
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: numpy.ma : a package to handle missing or invalid values.
3: 
4: This package was initially written for numarray by Paul F. Dubois
5: at Lawrence Livermore National Laboratory.
6: In 2006, the package was completely rewritten by Pierre Gerard-Marchant
7: (University of Georgia) to make the MaskedArray class a subclass of ndarray,
8: and to improve support of structured arrays.
9: 
10: 
11: Copyright 1999, 2000, 2001 Regents of the University of California.
12: Released for unlimited redistribution.
13: 
14: * Adapted for numpy_core 2005 by Travis Oliphant and (mainly) Paul Dubois.
15: * Subclassing of the base `ndarray` 2006 by Pierre Gerard-Marchant
16:   (pgmdevlist_AT_gmail_DOT_com)
17: * Improvements suggested by Reggie Dugard (reggie_AT_merfinllc_DOT_com)
18: 
19: .. moduleauthor:: Pierre Gerard-Marchant
20: 
21: '''
22: # pylint: disable-msg=E1002
23: from __future__ import division, absolute_import, print_function
24: 
25: import sys
26: import warnings
27: from functools import reduce
28: 
29: import numpy as np
30: import numpy.core.umath as umath
31: import numpy.core.numerictypes as ntypes
32: from numpy import ndarray, amax, amin, iscomplexobj, bool_, _NoValue
33: from numpy import array as narray
34: from numpy.lib.function_base import angle
35: from numpy.compat import (
36:     getargspec, formatargspec, long, basestring, unicode, bytes, sixu
37:     )
38: from numpy import expand_dims as n_expand_dims
39: 
40: 
41: if sys.version_info[0] >= 3:
42:     import pickle
43: else:
44:     import cPickle as pickle
45: 
46: __all__ = [
47:     'MAError', 'MaskError', 'MaskType', 'MaskedArray', 'abs', 'absolute',
48:     'add', 'all', 'allclose', 'allequal', 'alltrue', 'amax', 'amin',
49:     'angle', 'anom', 'anomalies', 'any', 'append', 'arange', 'arccos',
50:     'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh',
51:     'argmax', 'argmin', 'argsort', 'around', 'array', 'asanyarray',
52:     'asarray', 'bitwise_and', 'bitwise_or', 'bitwise_xor', 'bool_', 'ceil',
53:     'choose', 'clip', 'common_fill_value', 'compress', 'compressed',
54:     'concatenate', 'conjugate', 'copy', 'cos', 'cosh', 'count', 'cumprod',
55:     'cumsum', 'default_fill_value', 'diag', 'diagonal', 'diff', 'divide',
56:     'dump', 'dumps', 'empty', 'empty_like', 'equal', 'exp', 'expand_dims',
57:     'fabs', 'filled', 'fix_invalid', 'flatten_mask',
58:     'flatten_structured_array', 'floor', 'floor_divide', 'fmod',
59:     'frombuffer', 'fromflex', 'fromfunction', 'getdata', 'getmask',
60:     'getmaskarray', 'greater', 'greater_equal', 'harden_mask', 'hypot',
61:     'identity', 'ids', 'indices', 'inner', 'innerproduct', 'isMA',
62:     'isMaskedArray', 'is_mask', 'is_masked', 'isarray', 'left_shift',
63:     'less', 'less_equal', 'load', 'loads', 'log', 'log10', 'log2',
64:     'logical_and', 'logical_not', 'logical_or', 'logical_xor', 'make_mask',
65:     'make_mask_descr', 'make_mask_none', 'mask_or', 'masked',
66:     'masked_array', 'masked_equal', 'masked_greater',
67:     'masked_greater_equal', 'masked_inside', 'masked_invalid',
68:     'masked_less', 'masked_less_equal', 'masked_not_equal',
69:     'masked_object', 'masked_outside', 'masked_print_option',
70:     'masked_singleton', 'masked_values', 'masked_where', 'max', 'maximum',
71:     'maximum_fill_value', 'mean', 'min', 'minimum', 'minimum_fill_value',
72:     'mod', 'multiply', 'mvoid', 'ndim', 'negative', 'nomask', 'nonzero',
73:     'not_equal', 'ones', 'outer', 'outerproduct', 'power', 'prod',
74:     'product', 'ptp', 'put', 'putmask', 'rank', 'ravel', 'remainder',
75:     'repeat', 'reshape', 'resize', 'right_shift', 'round', 'round_',
76:     'set_fill_value', 'shape', 'sin', 'sinh', 'size', 'soften_mask',
77:     'sometrue', 'sort', 'sqrt', 'squeeze', 'std', 'subtract', 'sum',
78:     'swapaxes', 'take', 'tan', 'tanh', 'trace', 'transpose', 'true_divide',
79:     'var', 'where', 'zeros',
80:     ]
81: 
82: MaskType = np.bool_
83: nomask = MaskType(0)
84: 
85: class MaskedArrayFutureWarning(FutureWarning):
86:     pass
87: 
88: 
89: def doc_note(initialdoc, note):
90:     '''
91:     Adds a Notes section to an existing docstring.
92: 
93:     '''
94:     if initialdoc is None:
95:         return
96:     if note is None:
97:         return initialdoc
98:     newdoc = '''
99:     %s
100: 
101:     Notes
102:     -----
103:     %s
104:     '''
105:     return newdoc % (initialdoc, note)
106: 
107: 
108: def get_object_signature(obj):
109:     '''
110:     Get the signature from obj
111: 
112:     '''
113:     try:
114:         sig = formatargspec(*getargspec(obj))
115:     except TypeError:
116:         sig = ''
117:     return sig
118: 
119: 
120: ###############################################################################
121: #                              Exceptions                                     #
122: ###############################################################################
123: 
124: 
125: class MAError(Exception):
126:     '''
127:     Class for masked array related errors.
128: 
129:     '''
130:     pass
131: 
132: 
133: class MaskError(MAError):
134:     '''
135:     Class for mask related errors.
136: 
137:     '''
138:     pass
139: 
140: 
141: ###############################################################################
142: #                           Filling options                                   #
143: ###############################################################################
144: 
145: 
146: # b: boolean - c: complex - f: floats - i: integer - O: object - S: string
147: default_filler = {'b': True,
148:                   'c': 1.e20 + 0.0j,
149:                   'f': 1.e20,
150:                   'i': 999999,
151:                   'O': '?',
152:                   'S': b'N/A',
153:                   'u': 999999,
154:                   'V': '???',
155:                   'U': sixu('N/A')
156:                   }
157: 
158: # Add datetime64 and timedelta64 types
159: for v in ["Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", "ps",
160:           "fs", "as"]:
161:     default_filler["M8[" + v + "]"] = np.datetime64("NaT", v)
162:     default_filler["m8[" + v + "]"] = np.timedelta64("NaT", v)
163: 
164: max_filler = ntypes._minvals
165: max_filler.update([(k, -np.inf) for k in [np.float32, np.float64]])
166: min_filler = ntypes._maxvals
167: min_filler.update([(k, +np.inf) for k in [np.float32, np.float64]])
168: if 'float128' in ntypes.typeDict:
169:     max_filler.update([(np.float128, -np.inf)])
170:     min_filler.update([(np.float128, +np.inf)])
171: 
172: 
173: def default_fill_value(obj):
174:     '''
175:     Return the default fill value for the argument object.
176: 
177:     The default filling value depends on the datatype of the input
178:     array or the type of the input scalar:
179: 
180:        ========  ========
181:        datatype  default
182:        ========  ========
183:        bool      True
184:        int       999999
185:        float     1.e20
186:        complex   1.e20+0j
187:        object    '?'
188:        string    'N/A'
189:        ========  ========
190: 
191: 
192:     Parameters
193:     ----------
194:     obj : ndarray, dtype or scalar
195:         The array data-type or scalar for which the default fill value
196:         is returned.
197: 
198:     Returns
199:     -------
200:     fill_value : scalar
201:         The default fill value.
202: 
203:     Examples
204:     --------
205:     >>> np.ma.default_fill_value(1)
206:     999999
207:     >>> np.ma.default_fill_value(np.array([1.1, 2., np.pi]))
208:     1e+20
209:     >>> np.ma.default_fill_value(np.dtype(complex))
210:     (1e+20+0j)
211: 
212:     '''
213:     if hasattr(obj, 'dtype'):
214:         defval = _check_fill_value(None, obj.dtype)
215:     elif isinstance(obj, np.dtype):
216:         if obj.subdtype:
217:             defval = default_filler.get(obj.subdtype[0].kind, '?')
218:         elif obj.kind in 'Mm':
219:             defval = default_filler.get(obj.str[1:], '?')
220:         else:
221:             defval = default_filler.get(obj.kind, '?')
222:     elif isinstance(obj, float):
223:         defval = default_filler['f']
224:     elif isinstance(obj, int) or isinstance(obj, long):
225:         defval = default_filler['i']
226:     elif isinstance(obj, bytes):
227:         defval = default_filler['S']
228:     elif isinstance(obj, unicode):
229:         defval = default_filler['U']
230:     elif isinstance(obj, complex):
231:         defval = default_filler['c']
232:     else:
233:         defval = default_filler['O']
234:     return defval
235: 
236: 
237: def _recursive_extremum_fill_value(ndtype, extremum):
238:     names = ndtype.names
239:     if names:
240:         deflist = []
241:         for name in names:
242:             fval = _recursive_extremum_fill_value(ndtype[name], extremum)
243:             deflist.append(fval)
244:         return tuple(deflist)
245:     return extremum[ndtype]
246: 
247: 
248: def minimum_fill_value(obj):
249:     '''
250:     Return the maximum value that can be represented by the dtype of an object.
251: 
252:     This function is useful for calculating a fill value suitable for
253:     taking the minimum of an array with a given dtype.
254: 
255:     Parameters
256:     ----------
257:     obj : ndarray or dtype
258:         An object that can be queried for it's numeric type.
259: 
260:     Returns
261:     -------
262:     val : scalar
263:         The maximum representable value.
264: 
265:     Raises
266:     ------
267:     TypeError
268:         If `obj` isn't a suitable numeric type.
269: 
270:     See Also
271:     --------
272:     maximum_fill_value : The inverse function.
273:     set_fill_value : Set the filling value of a masked array.
274:     MaskedArray.fill_value : Return current fill value.
275: 
276:     Examples
277:     --------
278:     >>> import numpy.ma as ma
279:     >>> a = np.int8()
280:     >>> ma.minimum_fill_value(a)
281:     127
282:     >>> a = np.int32()
283:     >>> ma.minimum_fill_value(a)
284:     2147483647
285: 
286:     An array of numeric data can also be passed.
287: 
288:     >>> a = np.array([1, 2, 3], dtype=np.int8)
289:     >>> ma.minimum_fill_value(a)
290:     127
291:     >>> a = np.array([1, 2, 3], dtype=np.float32)
292:     >>> ma.minimum_fill_value(a)
293:     inf
294: 
295:     '''
296:     errmsg = "Unsuitable type for calculating minimum."
297:     if hasattr(obj, 'dtype'):
298:         return _recursive_extremum_fill_value(obj.dtype, min_filler)
299:     elif isinstance(obj, float):
300:         return min_filler[ntypes.typeDict['float_']]
301:     elif isinstance(obj, int):
302:         return min_filler[ntypes.typeDict['int_']]
303:     elif isinstance(obj, long):
304:         return min_filler[ntypes.typeDict['uint']]
305:     elif isinstance(obj, np.dtype):
306:         return min_filler[obj]
307:     else:
308:         raise TypeError(errmsg)
309: 
310: 
311: def maximum_fill_value(obj):
312:     '''
313:     Return the minimum value that can be represented by the dtype of an object.
314: 
315:     This function is useful for calculating a fill value suitable for
316:     taking the maximum of an array with a given dtype.
317: 
318:     Parameters
319:     ----------
320:     obj : {ndarray, dtype}
321:         An object that can be queried for it's numeric type.
322: 
323:     Returns
324:     -------
325:     val : scalar
326:         The minimum representable value.
327: 
328:     Raises
329:     ------
330:     TypeError
331:         If `obj` isn't a suitable numeric type.
332: 
333:     See Also
334:     --------
335:     minimum_fill_value : The inverse function.
336:     set_fill_value : Set the filling value of a masked array.
337:     MaskedArray.fill_value : Return current fill value.
338: 
339:     Examples
340:     --------
341:     >>> import numpy.ma as ma
342:     >>> a = np.int8()
343:     >>> ma.maximum_fill_value(a)
344:     -128
345:     >>> a = np.int32()
346:     >>> ma.maximum_fill_value(a)
347:     -2147483648
348: 
349:     An array of numeric data can also be passed.
350: 
351:     >>> a = np.array([1, 2, 3], dtype=np.int8)
352:     >>> ma.maximum_fill_value(a)
353:     -128
354:     >>> a = np.array([1, 2, 3], dtype=np.float32)
355:     >>> ma.maximum_fill_value(a)
356:     -inf
357: 
358:     '''
359:     errmsg = "Unsuitable type for calculating maximum."
360:     if hasattr(obj, 'dtype'):
361:         return _recursive_extremum_fill_value(obj.dtype, max_filler)
362:     elif isinstance(obj, float):
363:         return max_filler[ntypes.typeDict['float_']]
364:     elif isinstance(obj, int):
365:         return max_filler[ntypes.typeDict['int_']]
366:     elif isinstance(obj, long):
367:         return max_filler[ntypes.typeDict['uint']]
368:     elif isinstance(obj, np.dtype):
369:         return max_filler[obj]
370:     else:
371:         raise TypeError(errmsg)
372: 
373: 
374: def _recursive_set_default_fill_value(dtypedescr):
375:     deflist = []
376:     for currentdescr in dtypedescr:
377:         currenttype = currentdescr[1]
378:         if isinstance(currenttype, list):
379:             deflist.append(
380:                 tuple(_recursive_set_default_fill_value(currenttype)))
381:         else:
382:             deflist.append(default_fill_value(np.dtype(currenttype)))
383:     return tuple(deflist)
384: 
385: 
386: def _recursive_set_fill_value(fillvalue, dtypedescr):
387:     fillvalue = np.resize(fillvalue, len(dtypedescr))
388:     output_value = []
389:     for (fval, descr) in zip(fillvalue, dtypedescr):
390:         cdtype = descr[1]
391:         if isinstance(cdtype, list):
392:             output_value.append(tuple(_recursive_set_fill_value(fval, cdtype)))
393:         else:
394:             output_value.append(np.array(fval, dtype=cdtype).item())
395:     return tuple(output_value)
396: 
397: 
398: def _check_fill_value(fill_value, ndtype):
399:     '''
400:     Private function validating the given `fill_value` for the given dtype.
401: 
402:     If fill_value is None, it is set to the default corresponding to the dtype
403:     if this latter is standard (no fields). If the datatype is flexible (named
404:     fields), fill_value is set to a tuple whose elements are the default fill
405:     values corresponding to each field.
406: 
407:     If fill_value is not None, its value is forced to the given dtype.
408: 
409:     '''
410:     ndtype = np.dtype(ndtype)
411:     fields = ndtype.fields
412:     if fill_value is None:
413:         if fields:
414:             descr = ndtype.descr
415:             fill_value = np.array(_recursive_set_default_fill_value(descr),
416:                                   dtype=ndtype,)
417:         else:
418:             fill_value = default_fill_value(ndtype)
419:     elif fields:
420:         fdtype = [(_[0], _[1]) for _ in ndtype.descr]
421:         if isinstance(fill_value, (ndarray, np.void)):
422:             try:
423:                 fill_value = np.array(fill_value, copy=False, dtype=fdtype)
424:             except ValueError:
425:                 err_msg = "Unable to transform %s to dtype %s"
426:                 raise ValueError(err_msg % (fill_value, fdtype))
427:         else:
428:             descr = ndtype.descr
429:             fill_value = np.asarray(fill_value, dtype=object)
430:             fill_value = np.array(_recursive_set_fill_value(fill_value, descr),
431:                                   dtype=ndtype)
432:     else:
433:         if isinstance(fill_value, basestring) and (ndtype.char not in 'OSVU'):
434:             err_msg = "Cannot set fill value of string with array of dtype %s"
435:             raise TypeError(err_msg % ndtype)
436:         else:
437:             # In case we want to convert 1e20 to int.
438:             try:
439:                 fill_value = np.array(fill_value, copy=False, dtype=ndtype)
440:             except OverflowError:
441:                 # Raise TypeError instead of OverflowError. OverflowError
442:                 # is seldom used, and the real problem here is that the
443:                 # passed fill_value is not compatible with the ndtype.
444:                 err_msg = "Fill value %s overflows dtype %s"
445:                 raise TypeError(err_msg % (fill_value, ndtype))
446:     return np.array(fill_value)
447: 
448: 
449: def set_fill_value(a, fill_value):
450:     '''
451:     Set the filling value of a, if a is a masked array.
452: 
453:     This function changes the fill value of the masked array `a` in place.
454:     If `a` is not a masked array, the function returns silently, without
455:     doing anything.
456: 
457:     Parameters
458:     ----------
459:     a : array_like
460:         Input array.
461:     fill_value : dtype
462:         Filling value. A consistency test is performed to make sure
463:         the value is compatible with the dtype of `a`.
464: 
465:     Returns
466:     -------
467:     None
468:         Nothing returned by this function.
469: 
470:     See Also
471:     --------
472:     maximum_fill_value : Return the default fill value for a dtype.
473:     MaskedArray.fill_value : Return current fill value.
474:     MaskedArray.set_fill_value : Equivalent method.
475: 
476:     Examples
477:     --------
478:     >>> import numpy.ma as ma
479:     >>> a = np.arange(5)
480:     >>> a
481:     array([0, 1, 2, 3, 4])
482:     >>> a = ma.masked_where(a < 3, a)
483:     >>> a
484:     masked_array(data = [-- -- -- 3 4],
485:           mask = [ True  True  True False False],
486:           fill_value=999999)
487:     >>> ma.set_fill_value(a, -999)
488:     >>> a
489:     masked_array(data = [-- -- -- 3 4],
490:           mask = [ True  True  True False False],
491:           fill_value=-999)
492: 
493:     Nothing happens if `a` is not a masked array.
494: 
495:     >>> a = range(5)
496:     >>> a
497:     [0, 1, 2, 3, 4]
498:     >>> ma.set_fill_value(a, 100)
499:     >>> a
500:     [0, 1, 2, 3, 4]
501:     >>> a = np.arange(5)
502:     >>> a
503:     array([0, 1, 2, 3, 4])
504:     >>> ma.set_fill_value(a, 100)
505:     >>> a
506:     array([0, 1, 2, 3, 4])
507: 
508:     '''
509:     if isinstance(a, MaskedArray):
510:         a.set_fill_value(fill_value)
511:     return
512: 
513: 
514: def get_fill_value(a):
515:     '''
516:     Return the filling value of a, if any.  Otherwise, returns the
517:     default filling value for that type.
518: 
519:     '''
520:     if isinstance(a, MaskedArray):
521:         result = a.fill_value
522:     else:
523:         result = default_fill_value(a)
524:     return result
525: 
526: 
527: def common_fill_value(a, b):
528:     '''
529:     Return the common filling value of two masked arrays, if any.
530: 
531:     If ``a.fill_value == b.fill_value``, return the fill value,
532:     otherwise return None.
533: 
534:     Parameters
535:     ----------
536:     a, b : MaskedArray
537:         The masked arrays for which to compare fill values.
538: 
539:     Returns
540:     -------
541:     fill_value : scalar or None
542:         The common fill value, or None.
543: 
544:     Examples
545:     --------
546:     >>> x = np.ma.array([0, 1.], fill_value=3)
547:     >>> y = np.ma.array([0, 1.], fill_value=3)
548:     >>> np.ma.common_fill_value(x, y)
549:     3.0
550: 
551:     '''
552:     t1 = get_fill_value(a)
553:     t2 = get_fill_value(b)
554:     if t1 == t2:
555:         return t1
556:     return None
557: 
558: 
559: def filled(a, fill_value=None):
560:     '''
561:     Return input as an array with masked data replaced by a fill value.
562: 
563:     If `a` is not a `MaskedArray`, `a` itself is returned.
564:     If `a` is a `MaskedArray` and `fill_value` is None, `fill_value` is set to
565:     ``a.fill_value``.
566: 
567:     Parameters
568:     ----------
569:     a : MaskedArray or array_like
570:         An input object.
571:     fill_value : scalar, optional
572:         Filling value. Default is None.
573: 
574:     Returns
575:     -------
576:     a : ndarray
577:         The filled array.
578: 
579:     See Also
580:     --------
581:     compressed
582: 
583:     Examples
584:     --------
585:     >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],
586:     ...                                                   [1, 0, 0],
587:     ...                                                   [0, 0, 0]])
588:     >>> x.filled()
589:     array([[999999,      1,      2],
590:            [999999,      4,      5],
591:            [     6,      7,      8]])
592: 
593:     '''
594:     if hasattr(a, 'filled'):
595:         return a.filled(fill_value)
596:     elif isinstance(a, ndarray):
597:         # Should we check for contiguity ? and a.flags['CONTIGUOUS']:
598:         return a
599:     elif isinstance(a, dict):
600:         return np.array(a, 'O')
601:     else:
602:         return np.array(a)
603: 
604: 
605: def get_masked_subclass(*arrays):
606:     '''
607:     Return the youngest subclass of MaskedArray from a list of (masked) arrays.
608: 
609:     In case of siblings, the first listed takes over.
610: 
611:     '''
612:     if len(arrays) == 1:
613:         arr = arrays[0]
614:         if isinstance(arr, MaskedArray):
615:             rcls = type(arr)
616:         else:
617:             rcls = MaskedArray
618:     else:
619:         arrcls = [type(a) for a in arrays]
620:         rcls = arrcls[0]
621:         if not issubclass(rcls, MaskedArray):
622:             rcls = MaskedArray
623:         for cls in arrcls[1:]:
624:             if issubclass(cls, rcls):
625:                 rcls = cls
626:     # Don't return MaskedConstant as result: revert to MaskedArray
627:     if rcls.__name__ == 'MaskedConstant':
628:         return MaskedArray
629:     return rcls
630: 
631: 
632: def getdata(a, subok=True):
633:     '''
634:     Return the data of a masked array as an ndarray.
635: 
636:     Return the data of `a` (if any) as an ndarray if `a` is a ``MaskedArray``,
637:     else return `a` as a ndarray or subclass (depending on `subok`) if not.
638: 
639:     Parameters
640:     ----------
641:     a : array_like
642:         Input ``MaskedArray``, alternatively a ndarray or a subclass thereof.
643:     subok : bool
644:         Whether to force the output to be a `pure` ndarray (False) or to
645:         return a subclass of ndarray if appropriate (True, default).
646: 
647:     See Also
648:     --------
649:     getmask : Return the mask of a masked array, or nomask.
650:     getmaskarray : Return the mask of a masked array, or full array of False.
651: 
652:     Examples
653:     --------
654:     >>> import numpy.ma as ma
655:     >>> a = ma.masked_equal([[1,2],[3,4]], 2)
656:     >>> a
657:     masked_array(data =
658:      [[1 --]
659:      [3 4]],
660:           mask =
661:      [[False  True]
662:      [False False]],
663:           fill_value=999999)
664:     >>> ma.getdata(a)
665:     array([[1, 2],
666:            [3, 4]])
667: 
668:     Equivalently use the ``MaskedArray`` `data` attribute.
669: 
670:     >>> a.data
671:     array([[1, 2],
672:            [3, 4]])
673: 
674:     '''
675:     try:
676:         data = a._data
677:     except AttributeError:
678:         data = np.array(a, copy=False, subok=subok)
679:     if not subok:
680:         return data.view(ndarray)
681:     return data
682: 
683: 
684: get_data = getdata
685: 
686: 
687: def fix_invalid(a, mask=nomask, copy=True, fill_value=None):
688:     '''
689:     Return input with invalid data masked and replaced by a fill value.
690: 
691:     Invalid data means values of `nan`, `inf`, etc.
692: 
693:     Parameters
694:     ----------
695:     a : array_like
696:         Input array, a (subclass of) ndarray.
697:     mask : sequence, optional
698:         Mask. Must be convertible to an array of booleans with the same
699:         shape as `data`. True indicates a masked (i.e. invalid) data.
700:     copy : bool, optional
701:         Whether to use a copy of `a` (True) or to fix `a` in place (False).
702:         Default is True.
703:     fill_value : scalar, optional
704:         Value used for fixing invalid data. Default is None, in which case
705:         the ``a.fill_value`` is used.
706: 
707:     Returns
708:     -------
709:     b : MaskedArray
710:         The input array with invalid entries fixed.
711: 
712:     Notes
713:     -----
714:     A copy is performed by default.
715: 
716:     Examples
717:     --------
718:     >>> x = np.ma.array([1., -1, np.nan, np.inf], mask=[1] + [0]*3)
719:     >>> x
720:     masked_array(data = [-- -1.0 nan inf],
721:                  mask = [ True False False False],
722:            fill_value = 1e+20)
723:     >>> np.ma.fix_invalid(x)
724:     masked_array(data = [-- -1.0 -- --],
725:                  mask = [ True False  True  True],
726:            fill_value = 1e+20)
727: 
728:     >>> fixed = np.ma.fix_invalid(x)
729:     >>> fixed.data
730:     array([  1.00000000e+00,  -1.00000000e+00,   1.00000000e+20,
731:              1.00000000e+20])
732:     >>> x.data
733:     array([  1.,  -1.,  NaN,  Inf])
734: 
735:     '''
736:     a = masked_array(a, copy=copy, mask=mask, subok=True)
737:     invalid = np.logical_not(np.isfinite(a._data))
738:     if not invalid.any():
739:         return a
740:     a._mask |= invalid
741:     if fill_value is None:
742:         fill_value = a.fill_value
743:     a._data[invalid] = fill_value
744:     return a
745: 
746: 
747: ###############################################################################
748: #                                  Ufuncs                                     #
749: ###############################################################################
750: 
751: 
752: ufunc_domain = {}
753: ufunc_fills = {}
754: 
755: 
756: class _DomainCheckInterval:
757:     '''
758:     Define a valid interval, so that :
759: 
760:     ``domain_check_interval(a,b)(x) == True`` where
761:     ``x < a`` or ``x > b``.
762: 
763:     '''
764: 
765:     def __init__(self, a, b):
766:         "domain_check_interval(a,b)(x) = true where x < a or y > b"
767:         if (a > b):
768:             (a, b) = (b, a)
769:         self.a = a
770:         self.b = b
771: 
772:     def __call__(self, x):
773:         "Execute the call behavior."
774:         return umath.logical_or(umath.greater(x, self.b),
775:                                 umath.less(x, self.a))
776: 
777: 
778: class _DomainTan:
779:     '''
780:     Define a valid interval for the `tan` function, so that:
781: 
782:     ``domain_tan(eps) = True`` where ``abs(cos(x)) < eps``
783: 
784:     '''
785: 
786:     def __init__(self, eps):
787:         "domain_tan(eps) = true where abs(cos(x)) < eps)"
788:         self.eps = eps
789: 
790:     def __call__(self, x):
791:         "Executes the call behavior."
792:         return umath.less(umath.absolute(umath.cos(x)), self.eps)
793: 
794: 
795: class _DomainSafeDivide:
796:     '''
797:     Define a domain for safe division.
798: 
799:     '''
800: 
801:     def __init__(self, tolerance=None):
802:         self.tolerance = tolerance
803: 
804:     def __call__(self, a, b):
805:         # Delay the selection of the tolerance to here in order to reduce numpy
806:         # import times. The calculation of these parameters is a substantial
807:         # component of numpy's import time.
808:         if self.tolerance is None:
809:             self.tolerance = np.finfo(float).tiny
810:         # don't call ma ufuncs from __array_wrap__ which would fail for scalars
811:         a, b = np.asarray(a), np.asarray(b)
812:         return umath.absolute(a) * self.tolerance >= umath.absolute(b)
813: 
814: 
815: class _DomainGreater:
816:     '''
817:     DomainGreater(v)(x) is True where x <= v.
818: 
819:     '''
820: 
821:     def __init__(self, critical_value):
822:         "DomainGreater(v)(x) = true where x <= v"
823:         self.critical_value = critical_value
824: 
825:     def __call__(self, x):
826:         "Executes the call behavior."
827:         return umath.less_equal(x, self.critical_value)
828: 
829: 
830: class _DomainGreaterEqual:
831:     '''
832:     DomainGreaterEqual(v)(x) is True where x < v.
833: 
834:     '''
835: 
836:     def __init__(self, critical_value):
837:         "DomainGreaterEqual(v)(x) = true where x < v"
838:         self.critical_value = critical_value
839: 
840:     def __call__(self, x):
841:         "Executes the call behavior."
842:         return umath.less(x, self.critical_value)
843: 
844: 
845: class _MaskedUnaryOperation:
846:     '''
847:     Defines masked version of unary operations, where invalid values are
848:     pre-masked.
849: 
850:     Parameters
851:     ----------
852:     mufunc : callable
853:         The function for which to define a masked version. Made available
854:         as ``_MaskedUnaryOperation.f``.
855:     fill : scalar, optional
856:         Filling value, default is 0.
857:     domain : class instance
858:         Domain for the function. Should be one of the ``_Domain*``
859:         classes. Default is None.
860: 
861:     '''
862: 
863:     def __init__(self, mufunc, fill=0, domain=None):
864:         self.f = mufunc
865:         self.fill = fill
866:         self.domain = domain
867:         self.__doc__ = getattr(mufunc, "__doc__", str(mufunc))
868:         self.__name__ = getattr(mufunc, "__name__", str(mufunc))
869:         ufunc_domain[mufunc] = domain
870:         ufunc_fills[mufunc] = fill
871: 
872:     def __call__(self, a, *args, **kwargs):
873:         '''
874:         Execute the call behavior.
875: 
876:         '''
877:         d = getdata(a)
878:         # Deal with domain
879:         if self.domain is not None:
880:             # Case 1.1. : Domained function
881:             with np.errstate(divide='ignore', invalid='ignore'):
882:                 result = self.f(d, *args, **kwargs)
883:             # Make a mask
884:             m = ~umath.isfinite(result)
885:             m |= self.domain(d)
886:             m |= getmask(a)
887:         else:
888:             # Case 1.2. : Function without a domain
889:             # Get the result and the mask
890:             result = self.f(d, *args, **kwargs)
891:             m = getmask(a)
892: 
893:         if not result.ndim:
894:             # Case 2.1. : The result is scalarscalar
895:             if m:
896:                 return masked
897:             return result
898: 
899:         if m is not nomask:
900:             # Case 2.2. The result is an array
901:             # We need to fill the invalid data back w/ the input Now,
902:             # that's plain silly: in C, we would just skip the element and
903:             # keep the original, but we do have to do it that way in Python
904: 
905:             # In case result has a lower dtype than the inputs (as in
906:             # equal)
907:             try:
908:                 np.copyto(result, d, where=m)
909:             except TypeError:
910:                 pass
911:         # Transform to
912:         masked_result = result.view(get_masked_subclass(a))
913:         masked_result._mask = m
914:         masked_result._update_from(a)
915:         return masked_result
916: 
917:     def __str__(self):
918:         return "Masked version of %s. [Invalid values are masked]" % str(self.f)
919: 
920: 
921: class _MaskedBinaryOperation:
922:     '''
923:     Define masked version of binary operations, where invalid
924:     values are pre-masked.
925: 
926:     Parameters
927:     ----------
928:     mbfunc : function
929:         The function for which to define a masked version. Made available
930:         as ``_MaskedBinaryOperation.f``.
931:     domain : class instance
932:         Default domain for the function. Should be one of the ``_Domain*``
933:         classes. Default is None.
934:     fillx : scalar, optional
935:         Filling value for the first argument, default is 0.
936:     filly : scalar, optional
937:         Filling value for the second argument, default is 0.
938: 
939:     '''
940: 
941:     def __init__(self, mbfunc, fillx=0, filly=0):
942:         '''
943:         abfunc(fillx, filly) must be defined.
944: 
945:         abfunc(x, filly) = x for all x to enable reduce.
946: 
947:         '''
948:         self.f = mbfunc
949:         self.fillx = fillx
950:         self.filly = filly
951:         self.__doc__ = getattr(mbfunc, "__doc__", str(mbfunc))
952:         self.__name__ = getattr(mbfunc, "__name__", str(mbfunc))
953:         ufunc_domain[mbfunc] = None
954:         ufunc_fills[mbfunc] = (fillx, filly)
955: 
956:     def __call__(self, a, b, *args, **kwargs):
957:         '''
958:         Execute the call behavior.
959: 
960:         '''
961:         # Get the data, as ndarray
962:         (da, db) = (getdata(a), getdata(b))
963:         # Get the result
964:         with np.errstate():
965:             np.seterr(divide='ignore', invalid='ignore')
966:             result = self.f(da, db, *args, **kwargs)
967:         # Get the mask for the result
968:         (ma, mb) = (getmask(a), getmask(b))
969:         if ma is nomask:
970:             if mb is nomask:
971:                 m = nomask
972:             else:
973:                 m = umath.logical_or(getmaskarray(a), mb)
974:         elif mb is nomask:
975:             m = umath.logical_or(ma, getmaskarray(b))
976:         else:
977:             m = umath.logical_or(ma, mb)
978: 
979:         # Case 1. : scalar
980:         if not result.ndim:
981:             if m:
982:                 return masked
983:             return result
984: 
985:         # Case 2. : array
986:         # Revert result to da where masked
987:         if m is not nomask and m.any():
988:             # any errors, just abort; impossible to guarantee masked values
989:             try:
990:                 np.copyto(result, 0, casting='unsafe', where=m)
991:                 # avoid using "*" since this may be overlaid
992:                 masked_da = umath.multiply(m, da)
993:                 # only add back if it can be cast safely
994:                 if np.can_cast(masked_da.dtype, result.dtype, casting='safe'):
995:                     result += masked_da
996:             except:
997:                 pass
998: 
999:         # Transforms to a (subclass of) MaskedArray
1000:         masked_result = result.view(get_masked_subclass(a, b))
1001:         masked_result._mask = m
1002:         if isinstance(a, MaskedArray):
1003:             masked_result._update_from(a)
1004:         elif isinstance(b, MaskedArray):
1005:             masked_result._update_from(b)
1006:         return masked_result
1007: 
1008:     def reduce(self, target, axis=0, dtype=None):
1009:         '''
1010:         Reduce `target` along the given `axis`.
1011: 
1012:         '''
1013:         tclass = get_masked_subclass(target)
1014:         m = getmask(target)
1015:         t = filled(target, self.filly)
1016:         if t.shape == ():
1017:             t = t.reshape(1)
1018:             if m is not nomask:
1019:                 m = make_mask(m, copy=1)
1020:                 m.shape = (1,)
1021: 
1022:         if m is nomask:
1023:             tr = self.f.reduce(t, axis)
1024:             mr = nomask
1025:         else:
1026:             tr = self.f.reduce(t, axis, dtype=dtype or t.dtype)
1027:             mr = umath.logical_and.reduce(m, axis)
1028: 
1029:         if not tr.shape:
1030:             if mr:
1031:                 return masked
1032:             else:
1033:                 return tr
1034:         masked_tr = tr.view(tclass)
1035:         masked_tr._mask = mr
1036:         return masked_tr
1037: 
1038:     def outer(self, a, b):
1039:         '''
1040:         Return the function applied to the outer product of a and b.
1041: 
1042:         '''
1043:         (da, db) = (getdata(a), getdata(b))
1044:         d = self.f.outer(da, db)
1045:         ma = getmask(a)
1046:         mb = getmask(b)
1047:         if ma is nomask and mb is nomask:
1048:             m = nomask
1049:         else:
1050:             ma = getmaskarray(a)
1051:             mb = getmaskarray(b)
1052:             m = umath.logical_or.outer(ma, mb)
1053:         if (not m.ndim) and m:
1054:             return masked
1055:         if m is not nomask:
1056:             np.copyto(d, da, where=m)
1057:         if not d.shape:
1058:             return d
1059:         masked_d = d.view(get_masked_subclass(a, b))
1060:         masked_d._mask = m
1061:         return masked_d
1062: 
1063:     def accumulate(self, target, axis=0):
1064:         '''Accumulate `target` along `axis` after filling with y fill
1065:         value.
1066: 
1067:         '''
1068:         tclass = get_masked_subclass(target)
1069:         t = filled(target, self.filly)
1070:         result = self.f.accumulate(t, axis)
1071:         masked_result = result.view(tclass)
1072:         return masked_result
1073: 
1074:     def __str__(self):
1075:         return "Masked version of " + str(self.f)
1076: 
1077: 
1078: class _DomainedBinaryOperation:
1079:     '''
1080:     Define binary operations that have a domain, like divide.
1081: 
1082:     They have no reduce, outer or accumulate.
1083: 
1084:     Parameters
1085:     ----------
1086:     mbfunc : function
1087:         The function for which to define a masked version. Made available
1088:         as ``_DomainedBinaryOperation.f``.
1089:     domain : class instance
1090:         Default domain for the function. Should be one of the ``_Domain*``
1091:         classes.
1092:     fillx : scalar, optional
1093:         Filling value for the first argument, default is 0.
1094:     filly : scalar, optional
1095:         Filling value for the second argument, default is 0.
1096: 
1097:     '''
1098: 
1099:     def __init__(self, dbfunc, domain, fillx=0, filly=0):
1100:         '''abfunc(fillx, filly) must be defined.
1101:            abfunc(x, filly) = x for all x to enable reduce.
1102:         '''
1103:         self.f = dbfunc
1104:         self.domain = domain
1105:         self.fillx = fillx
1106:         self.filly = filly
1107:         self.__doc__ = getattr(dbfunc, "__doc__", str(dbfunc))
1108:         self.__name__ = getattr(dbfunc, "__name__", str(dbfunc))
1109:         ufunc_domain[dbfunc] = domain
1110:         ufunc_fills[dbfunc] = (fillx, filly)
1111: 
1112:     def __call__(self, a, b, *args, **kwargs):
1113:         "Execute the call behavior."
1114:         # Get the data
1115:         (da, db) = (getdata(a), getdata(b))
1116:         # Get the result
1117:         with np.errstate(divide='ignore', invalid='ignore'):
1118:             result = self.f(da, db, *args, **kwargs)
1119:         # Get the mask as a combination of the source masks and invalid
1120:         m = ~umath.isfinite(result)
1121:         m |= getmask(a)
1122:         m |= getmask(b)
1123:         # Apply the domain
1124:         domain = ufunc_domain.get(self.f, None)
1125:         if domain is not None:
1126:             m |= filled(domain(da, db), True)
1127:         # Take care of the scalar case first
1128:         if (not m.ndim):
1129:             if m:
1130:                 return masked
1131:             else:
1132:                 return result
1133:         # When the mask is True, put back da if possible
1134:         # any errors, just abort; impossible to guarantee masked values
1135:         try:
1136:             np.copyto(result, 0, casting='unsafe', where=m)
1137:             # avoid using "*" since this may be overlaid
1138:             masked_da = umath.multiply(m, da)
1139:             # only add back if it can be cast safely
1140:             if np.can_cast(masked_da.dtype, result.dtype, casting='safe'):
1141:                 result += masked_da
1142:         except:
1143:             pass
1144: 
1145:         # Transforms to a (subclass of) MaskedArray
1146:         masked_result = result.view(get_masked_subclass(a, b))
1147:         masked_result._mask = m
1148:         if isinstance(a, MaskedArray):
1149:             masked_result._update_from(a)
1150:         elif isinstance(b, MaskedArray):
1151:             masked_result._update_from(b)
1152:         return masked_result
1153: 
1154:     def __str__(self):
1155:         return "Masked version of " + str(self.f)
1156: 
1157: 
1158: # Unary ufuncs
1159: exp = _MaskedUnaryOperation(umath.exp)
1160: conjugate = _MaskedUnaryOperation(umath.conjugate)
1161: sin = _MaskedUnaryOperation(umath.sin)
1162: cos = _MaskedUnaryOperation(umath.cos)
1163: tan = _MaskedUnaryOperation(umath.tan)
1164: arctan = _MaskedUnaryOperation(umath.arctan)
1165: arcsinh = _MaskedUnaryOperation(umath.arcsinh)
1166: sinh = _MaskedUnaryOperation(umath.sinh)
1167: cosh = _MaskedUnaryOperation(umath.cosh)
1168: tanh = _MaskedUnaryOperation(umath.tanh)
1169: abs = absolute = _MaskedUnaryOperation(umath.absolute)
1170: angle = _MaskedUnaryOperation(angle)  # from numpy.lib.function_base
1171: fabs = _MaskedUnaryOperation(umath.fabs)
1172: negative = _MaskedUnaryOperation(umath.negative)
1173: floor = _MaskedUnaryOperation(umath.floor)
1174: ceil = _MaskedUnaryOperation(umath.ceil)
1175: around = _MaskedUnaryOperation(np.round_)
1176: logical_not = _MaskedUnaryOperation(umath.logical_not)
1177: 
1178: # Domained unary ufuncs
1179: sqrt = _MaskedUnaryOperation(umath.sqrt, 0.0,
1180:                              _DomainGreaterEqual(0.0))
1181: log = _MaskedUnaryOperation(umath.log, 1.0,
1182:                             _DomainGreater(0.0))
1183: log2 = _MaskedUnaryOperation(umath.log2, 1.0,
1184:                              _DomainGreater(0.0))
1185: log10 = _MaskedUnaryOperation(umath.log10, 1.0,
1186:                               _DomainGreater(0.0))
1187: tan = _MaskedUnaryOperation(umath.tan, 0.0,
1188:                             _DomainTan(1e-35))
1189: arcsin = _MaskedUnaryOperation(umath.arcsin, 0.0,
1190:                                _DomainCheckInterval(-1.0, 1.0))
1191: arccos = _MaskedUnaryOperation(umath.arccos, 0.0,
1192:                                _DomainCheckInterval(-1.0, 1.0))
1193: arccosh = _MaskedUnaryOperation(umath.arccosh, 1.0,
1194:                                 _DomainGreaterEqual(1.0))
1195: arctanh = _MaskedUnaryOperation(umath.arctanh, 0.0,
1196:                                 _DomainCheckInterval(-1.0 + 1e-15, 1.0 - 1e-15))
1197: 
1198: # Binary ufuncs
1199: add = _MaskedBinaryOperation(umath.add)
1200: subtract = _MaskedBinaryOperation(umath.subtract)
1201: multiply = _MaskedBinaryOperation(umath.multiply, 1, 1)
1202: arctan2 = _MaskedBinaryOperation(umath.arctan2, 0.0, 1.0)
1203: equal = _MaskedBinaryOperation(umath.equal)
1204: equal.reduce = None
1205: not_equal = _MaskedBinaryOperation(umath.not_equal)
1206: not_equal.reduce = None
1207: less_equal = _MaskedBinaryOperation(umath.less_equal)
1208: less_equal.reduce = None
1209: greater_equal = _MaskedBinaryOperation(umath.greater_equal)
1210: greater_equal.reduce = None
1211: less = _MaskedBinaryOperation(umath.less)
1212: less.reduce = None
1213: greater = _MaskedBinaryOperation(umath.greater)
1214: greater.reduce = None
1215: logical_and = _MaskedBinaryOperation(umath.logical_and)
1216: alltrue = _MaskedBinaryOperation(umath.logical_and, 1, 1).reduce
1217: logical_or = _MaskedBinaryOperation(umath.logical_or)
1218: sometrue = logical_or.reduce
1219: logical_xor = _MaskedBinaryOperation(umath.logical_xor)
1220: bitwise_and = _MaskedBinaryOperation(umath.bitwise_and)
1221: bitwise_or = _MaskedBinaryOperation(umath.bitwise_or)
1222: bitwise_xor = _MaskedBinaryOperation(umath.bitwise_xor)
1223: hypot = _MaskedBinaryOperation(umath.hypot)
1224: 
1225: # Domained binary ufuncs
1226: divide = _DomainedBinaryOperation(umath.divide, _DomainSafeDivide(), 0, 1)
1227: true_divide = _DomainedBinaryOperation(umath.true_divide,
1228:                                        _DomainSafeDivide(), 0, 1)
1229: floor_divide = _DomainedBinaryOperation(umath.floor_divide,
1230:                                         _DomainSafeDivide(), 0, 1)
1231: remainder = _DomainedBinaryOperation(umath.remainder,
1232:                                      _DomainSafeDivide(), 0, 1)
1233: fmod = _DomainedBinaryOperation(umath.fmod, _DomainSafeDivide(), 0, 1)
1234: mod = _DomainedBinaryOperation(umath.mod, _DomainSafeDivide(), 0, 1)
1235: 
1236: 
1237: ###############################################################################
1238: #                        Mask creation functions                              #
1239: ###############################################################################
1240: 
1241: 
1242: def _recursive_make_descr(datatype, newtype=bool_):
1243:     "Private function allowing recursion in make_descr."
1244:     # Do we have some name fields ?
1245:     if datatype.names:
1246:         descr = []
1247:         for name in datatype.names:
1248:             field = datatype.fields[name]
1249:             if len(field) == 3:
1250:                 # Prepend the title to the name
1251:                 name = (field[-1], name)
1252:             descr.append((name, _recursive_make_descr(field[0], newtype)))
1253:         return descr
1254:     # Is this some kind of composite a la (np.float,2)
1255:     elif datatype.subdtype:
1256:         mdescr = list(datatype.subdtype)
1257:         mdescr[0] = _recursive_make_descr(datatype.subdtype[0], newtype)
1258:         return tuple(mdescr)
1259:     else:
1260:         return newtype
1261: 
1262: 
1263: def make_mask_descr(ndtype):
1264:     '''
1265:     Construct a dtype description list from a given dtype.
1266: 
1267:     Returns a new dtype object, with the type of all fields in `ndtype` to a
1268:     boolean type. Field names are not altered.
1269: 
1270:     Parameters
1271:     ----------
1272:     ndtype : dtype
1273:         The dtype to convert.
1274: 
1275:     Returns
1276:     -------
1277:     result : dtype
1278:         A dtype that looks like `ndtype`, the type of all fields is boolean.
1279: 
1280:     Examples
1281:     --------
1282:     >>> import numpy.ma as ma
1283:     >>> dtype = np.dtype({'names':['foo', 'bar'],
1284:                           'formats':[np.float32, np.int]})
1285:     >>> dtype
1286:     dtype([('foo', '<f4'), ('bar', '<i4')])
1287:     >>> ma.make_mask_descr(dtype)
1288:     dtype([('foo', '|b1'), ('bar', '|b1')])
1289:     >>> ma.make_mask_descr(np.float32)
1290:     <type 'numpy.bool_'>
1291: 
1292:     '''
1293:     # Make sure we do have a dtype
1294:     if not isinstance(ndtype, np.dtype):
1295:         ndtype = np.dtype(ndtype)
1296:     return np.dtype(_recursive_make_descr(ndtype, np.bool))
1297: 
1298: 
1299: def getmask(a):
1300:     '''
1301:     Return the mask of a masked array, or nomask.
1302: 
1303:     Return the mask of `a` as an ndarray if `a` is a `MaskedArray` and the
1304:     mask is not `nomask`, else return `nomask`. To guarantee a full array
1305:     of booleans of the same shape as a, use `getmaskarray`.
1306: 
1307:     Parameters
1308:     ----------
1309:     a : array_like
1310:         Input `MaskedArray` for which the mask is required.
1311: 
1312:     See Also
1313:     --------
1314:     getdata : Return the data of a masked array as an ndarray.
1315:     getmaskarray : Return the mask of a masked array, or full array of False.
1316: 
1317:     Examples
1318:     --------
1319:     >>> import numpy.ma as ma
1320:     >>> a = ma.masked_equal([[1,2],[3,4]], 2)
1321:     >>> a
1322:     masked_array(data =
1323:      [[1 --]
1324:      [3 4]],
1325:           mask =
1326:      [[False  True]
1327:      [False False]],
1328:           fill_value=999999)
1329:     >>> ma.getmask(a)
1330:     array([[False,  True],
1331:            [False, False]], dtype=bool)
1332: 
1333:     Equivalently use the `MaskedArray` `mask` attribute.
1334: 
1335:     >>> a.mask
1336:     array([[False,  True],
1337:            [False, False]], dtype=bool)
1338: 
1339:     Result when mask == `nomask`
1340: 
1341:     >>> b = ma.masked_array([[1,2],[3,4]])
1342:     >>> b
1343:     masked_array(data =
1344:      [[1 2]
1345:      [3 4]],
1346:           mask =
1347:      False,
1348:           fill_value=999999)
1349:     >>> ma.nomask
1350:     False
1351:     >>> ma.getmask(b) == ma.nomask
1352:     True
1353:     >>> b.mask == ma.nomask
1354:     True
1355: 
1356:     '''
1357:     return getattr(a, '_mask', nomask)
1358: 
1359: 
1360: get_mask = getmask
1361: 
1362: 
1363: def getmaskarray(arr):
1364:     '''
1365:     Return the mask of a masked array, or full boolean array of False.
1366: 
1367:     Return the mask of `arr` as an ndarray if `arr` is a `MaskedArray` and
1368:     the mask is not `nomask`, else return a full boolean array of False of
1369:     the same shape as `arr`.
1370: 
1371:     Parameters
1372:     ----------
1373:     arr : array_like
1374:         Input `MaskedArray` for which the mask is required.
1375: 
1376:     See Also
1377:     --------
1378:     getmask : Return the mask of a masked array, or nomask.
1379:     getdata : Return the data of a masked array as an ndarray.
1380: 
1381:     Examples
1382:     --------
1383:     >>> import numpy.ma as ma
1384:     >>> a = ma.masked_equal([[1,2],[3,4]], 2)
1385:     >>> a
1386:     masked_array(data =
1387:      [[1 --]
1388:      [3 4]],
1389:           mask =
1390:      [[False  True]
1391:      [False False]],
1392:           fill_value=999999)
1393:     >>> ma.getmaskarray(a)
1394:     array([[False,  True],
1395:            [False, False]], dtype=bool)
1396: 
1397:     Result when mask == ``nomask``
1398: 
1399:     >>> b = ma.masked_array([[1,2],[3,4]])
1400:     >>> b
1401:     masked_array(data =
1402:      [[1 2]
1403:      [3 4]],
1404:           mask =
1405:      False,
1406:           fill_value=999999)
1407:     >>> >ma.getmaskarray(b)
1408:     array([[False, False],
1409:            [False, False]], dtype=bool)
1410: 
1411:     '''
1412:     mask = getmask(arr)
1413:     if mask is nomask:
1414:         mask = make_mask_none(np.shape(arr), getattr(arr, 'dtype', None))
1415:     return mask
1416: 
1417: 
1418: def is_mask(m):
1419:     '''
1420:     Return True if m is a valid, standard mask.
1421: 
1422:     This function does not check the contents of the input, only that the
1423:     type is MaskType. In particular, this function returns False if the
1424:     mask has a flexible dtype.
1425: 
1426:     Parameters
1427:     ----------
1428:     m : array_like
1429:         Array to test.
1430: 
1431:     Returns
1432:     -------
1433:     result : bool
1434:         True if `m.dtype.type` is MaskType, False otherwise.
1435: 
1436:     See Also
1437:     --------
1438:     isMaskedArray : Test whether input is an instance of MaskedArray.
1439: 
1440:     Examples
1441:     --------
1442:     >>> import numpy.ma as ma
1443:     >>> m = ma.masked_equal([0, 1, 0, 2, 3], 0)
1444:     >>> m
1445:     masked_array(data = [-- 1 -- 2 3],
1446:           mask = [ True False  True False False],
1447:           fill_value=999999)
1448:     >>> ma.is_mask(m)
1449:     False
1450:     >>> ma.is_mask(m.mask)
1451:     True
1452: 
1453:     Input must be an ndarray (or have similar attributes)
1454:     for it to be considered a valid mask.
1455: 
1456:     >>> m = [False, True, False]
1457:     >>> ma.is_mask(m)
1458:     False
1459:     >>> m = np.array([False, True, False])
1460:     >>> m
1461:     array([False,  True, False], dtype=bool)
1462:     >>> ma.is_mask(m)
1463:     True
1464: 
1465:     Arrays with complex dtypes don't return True.
1466: 
1467:     >>> dtype = np.dtype({'names':['monty', 'pithon'],
1468:                           'formats':[np.bool, np.bool]})
1469:     >>> dtype
1470:     dtype([('monty', '|b1'), ('pithon', '|b1')])
1471:     >>> m = np.array([(True, False), (False, True), (True, False)],
1472:                      dtype=dtype)
1473:     >>> m
1474:     array([(True, False), (False, True), (True, False)],
1475:           dtype=[('monty', '|b1'), ('pithon', '|b1')])
1476:     >>> ma.is_mask(m)
1477:     False
1478: 
1479:     '''
1480:     try:
1481:         return m.dtype.type is MaskType
1482:     except AttributeError:
1483:         return False
1484: 
1485: 
1486: def make_mask(m, copy=False, shrink=True, dtype=MaskType):
1487:     '''
1488:     Create a boolean mask from an array.
1489: 
1490:     Return `m` as a boolean mask, creating a copy if necessary or requested.
1491:     The function can accept any sequence that is convertible to integers,
1492:     or ``nomask``.  Does not require that contents must be 0s and 1s, values
1493:     of 0 are interepreted as False, everything else as True.
1494: 
1495:     Parameters
1496:     ----------
1497:     m : array_like
1498:         Potential mask.
1499:     copy : bool, optional
1500:         Whether to return a copy of `m` (True) or `m` itself (False).
1501:     shrink : bool, optional
1502:         Whether to shrink `m` to ``nomask`` if all its values are False.
1503:     dtype : dtype, optional
1504:         Data-type of the output mask. By default, the output mask has a
1505:         dtype of MaskType (bool). If the dtype is flexible, each field has
1506:         a boolean dtype. This is ignored when `m` is ``nomask``, in which
1507:         case ``nomask`` is always returned.
1508: 
1509:     Returns
1510:     -------
1511:     result : ndarray
1512:         A boolean mask derived from `m`.
1513: 
1514:     Examples
1515:     --------
1516:     >>> import numpy.ma as ma
1517:     >>> m = [True, False, True, True]
1518:     >>> ma.make_mask(m)
1519:     array([ True, False,  True,  True], dtype=bool)
1520:     >>> m = [1, 0, 1, 1]
1521:     >>> ma.make_mask(m)
1522:     array([ True, False,  True,  True], dtype=bool)
1523:     >>> m = [1, 0, 2, -3]
1524:     >>> ma.make_mask(m)
1525:     array([ True, False,  True,  True], dtype=bool)
1526: 
1527:     Effect of the `shrink` parameter.
1528: 
1529:     >>> m = np.zeros(4)
1530:     >>> m
1531:     array([ 0.,  0.,  0.,  0.])
1532:     >>> ma.make_mask(m)
1533:     False
1534:     >>> ma.make_mask(m, shrink=False)
1535:     array([False, False, False, False], dtype=bool)
1536: 
1537:     Using a flexible `dtype`.
1538: 
1539:     >>> m = [1, 0, 1, 1]
1540:     >>> n = [0, 1, 0, 0]
1541:     >>> arr = []
1542:     >>> for man, mouse in zip(m, n):
1543:     ...     arr.append((man, mouse))
1544:     >>> arr
1545:     [(1, 0), (0, 1), (1, 0), (1, 0)]
1546:     >>> dtype = np.dtype({'names':['man', 'mouse'],
1547:                           'formats':[np.int, np.int]})
1548:     >>> arr = np.array(arr, dtype=dtype)
1549:     >>> arr
1550:     array([(1, 0), (0, 1), (1, 0), (1, 0)],
1551:           dtype=[('man', '<i4'), ('mouse', '<i4')])
1552:     >>> ma.make_mask(arr, dtype=dtype)
1553:     array([(True, False), (False, True), (True, False), (True, False)],
1554:           dtype=[('man', '|b1'), ('mouse', '|b1')])
1555: 
1556:     '''
1557:     if m is nomask:
1558:         return nomask
1559:     elif isinstance(m, ndarray):
1560:         # We won't return after this point to make sure we can shrink the mask
1561:         # Fill the mask in case there are missing data
1562:         m = filled(m, True)
1563:         # Make sure the input dtype is valid
1564:         dtype = make_mask_descr(dtype)
1565:         if m.dtype == dtype:
1566:             if copy:
1567:                 result = m.copy()
1568:             else:
1569:                 result = m
1570:         else:
1571:             result = np.array(m, dtype=dtype, copy=copy)
1572:     else:
1573:         result = np.array(filled(m, True), dtype=MaskType)
1574:     # Bas les masques !
1575:     if shrink and (not result.dtype.names) and (not result.any()):
1576:         return nomask
1577:     else:
1578:         return result
1579: 
1580: 
1581: def make_mask_none(newshape, dtype=None):
1582:     '''
1583:     Return a boolean mask of the given shape, filled with False.
1584: 
1585:     This function returns a boolean ndarray with all entries False, that can
1586:     be used in common mask manipulations. If a complex dtype is specified, the
1587:     type of each field is converted to a boolean type.
1588: 
1589:     Parameters
1590:     ----------
1591:     newshape : tuple
1592:         A tuple indicating the shape of the mask.
1593:     dtype : {None, dtype}, optional
1594:         If None, use a MaskType instance. Otherwise, use a new datatype with
1595:         the same fields as `dtype`, converted to boolean types.
1596: 
1597:     Returns
1598:     -------
1599:     result : ndarray
1600:         An ndarray of appropriate shape and dtype, filled with False.
1601: 
1602:     See Also
1603:     --------
1604:     make_mask : Create a boolean mask from an array.
1605:     make_mask_descr : Construct a dtype description list from a given dtype.
1606: 
1607:     Examples
1608:     --------
1609:     >>> import numpy.ma as ma
1610:     >>> ma.make_mask_none((3,))
1611:     array([False, False, False], dtype=bool)
1612: 
1613:     Defining a more complex dtype.
1614: 
1615:     >>> dtype = np.dtype({'names':['foo', 'bar'],
1616:                           'formats':[np.float32, np.int]})
1617:     >>> dtype
1618:     dtype([('foo', '<f4'), ('bar', '<i4')])
1619:     >>> ma.make_mask_none((3,), dtype=dtype)
1620:     array([(False, False), (False, False), (False, False)],
1621:           dtype=[('foo', '|b1'), ('bar', '|b1')])
1622: 
1623:     '''
1624:     if dtype is None:
1625:         result = np.zeros(newshape, dtype=MaskType)
1626:     else:
1627:         result = np.zeros(newshape, dtype=make_mask_descr(dtype))
1628:     return result
1629: 
1630: 
1631: def mask_or(m1, m2, copy=False, shrink=True):
1632:     '''
1633:     Combine two masks with the ``logical_or`` operator.
1634: 
1635:     The result may be a view on `m1` or `m2` if the other is `nomask`
1636:     (i.e. False).
1637: 
1638:     Parameters
1639:     ----------
1640:     m1, m2 : array_like
1641:         Input masks.
1642:     copy : bool, optional
1643:         If copy is False and one of the inputs is `nomask`, return a view
1644:         of the other input mask. Defaults to False.
1645:     shrink : bool, optional
1646:         Whether to shrink the output to `nomask` if all its values are
1647:         False. Defaults to True.
1648: 
1649:     Returns
1650:     -------
1651:     mask : output mask
1652:         The result masks values that are masked in either `m1` or `m2`.
1653: 
1654:     Raises
1655:     ------
1656:     ValueError
1657:         If `m1` and `m2` have different flexible dtypes.
1658: 
1659:     Examples
1660:     --------
1661:     >>> m1 = np.ma.make_mask([0, 1, 1, 0])
1662:     >>> m2 = np.ma.make_mask([1, 0, 0, 0])
1663:     >>> np.ma.mask_or(m1, m2)
1664:     array([ True,  True,  True, False], dtype=bool)
1665: 
1666:     '''
1667: 
1668:     def _recursive_mask_or(m1, m2, newmask):
1669:         names = m1.dtype.names
1670:         for name in names:
1671:             current1 = m1[name]
1672:             if current1.dtype.names:
1673:                 _recursive_mask_or(current1, m2[name], newmask[name])
1674:             else:
1675:                 umath.logical_or(current1, m2[name], newmask[name])
1676:         return
1677: 
1678:     if (m1 is nomask) or (m1 is False):
1679:         dtype = getattr(m2, 'dtype', MaskType)
1680:         return make_mask(m2, copy=copy, shrink=shrink, dtype=dtype)
1681:     if (m2 is nomask) or (m2 is False):
1682:         dtype = getattr(m1, 'dtype', MaskType)
1683:         return make_mask(m1, copy=copy, shrink=shrink, dtype=dtype)
1684:     if m1 is m2 and is_mask(m1):
1685:         return m1
1686:     (dtype1, dtype2) = (getattr(m1, 'dtype', None), getattr(m2, 'dtype', None))
1687:     if (dtype1 != dtype2):
1688:         raise ValueError("Incompatible dtypes '%s'<>'%s'" % (dtype1, dtype2))
1689:     if dtype1.names:
1690:         newmask = np.empty_like(m1)
1691:         _recursive_mask_or(m1, m2, newmask)
1692:         return newmask
1693:     return make_mask(umath.logical_or(m1, m2), copy=copy, shrink=shrink)
1694: 
1695: 
1696: def flatten_mask(mask):
1697:     '''
1698:     Returns a completely flattened version of the mask, where nested fields
1699:     are collapsed.
1700: 
1701:     Parameters
1702:     ----------
1703:     mask : array_like
1704:         Input array, which will be interpreted as booleans.
1705: 
1706:     Returns
1707:     -------
1708:     flattened_mask : ndarray of bools
1709:         The flattened input.
1710: 
1711:     Examples
1712:     --------
1713:     >>> mask = np.array([0, 0, 1], dtype=np.bool)
1714:     >>> flatten_mask(mask)
1715:     array([False, False,  True], dtype=bool)
1716: 
1717:     >>> mask = np.array([(0, 0), (0, 1)], dtype=[('a', bool), ('b', bool)])
1718:     >>> flatten_mask(mask)
1719:     array([False, False, False,  True], dtype=bool)
1720: 
1721:     >>> mdtype = [('a', bool), ('b', [('ba', bool), ('bb', bool)])]
1722:     >>> mask = np.array([(0, (0, 0)), (0, (0, 1))], dtype=mdtype)
1723:     >>> flatten_mask(mask)
1724:     array([False, False, False, False, False,  True], dtype=bool)
1725: 
1726:     '''
1727: 
1728:     def _flatmask(mask):
1729:         "Flatten the mask and returns a (maybe nested) sequence of booleans."
1730:         mnames = mask.dtype.names
1731:         if mnames:
1732:             return [flatten_mask(mask[name]) for name in mnames]
1733:         else:
1734:             return mask
1735: 
1736:     def _flatsequence(sequence):
1737:         "Generates a flattened version of the sequence."
1738:         try:
1739:             for element in sequence:
1740:                 if hasattr(element, '__iter__'):
1741:                     for f in _flatsequence(element):
1742:                         yield f
1743:                 else:
1744:                     yield element
1745:         except TypeError:
1746:             yield sequence
1747: 
1748:     mask = np.asarray(mask)
1749:     flattened = _flatsequence(_flatmask(mask))
1750:     return np.array([_ for _ in flattened], dtype=bool)
1751: 
1752: 
1753: def _check_mask_axis(mask, axis):
1754:     "Check whether there are masked values along the given axis"
1755:     if mask is not nomask:
1756:         return mask.all(axis=axis)
1757:     return nomask
1758: 
1759: 
1760: ###############################################################################
1761: #                             Masking functions                               #
1762: ###############################################################################
1763: 
1764: def masked_where(condition, a, copy=True):
1765:     '''
1766:     Mask an array where a condition is met.
1767: 
1768:     Return `a` as an array masked where `condition` is True.
1769:     Any masked values of `a` or `condition` are also masked in the output.
1770: 
1771:     Parameters
1772:     ----------
1773:     condition : array_like
1774:         Masking condition.  When `condition` tests floating point values for
1775:         equality, consider using ``masked_values`` instead.
1776:     a : array_like
1777:         Array to mask.
1778:     copy : bool
1779:         If True (default) make a copy of `a` in the result.  If False modify
1780:         `a` in place and return a view.
1781: 
1782:     Returns
1783:     -------
1784:     result : MaskedArray
1785:         The result of masking `a` where `condition` is True.
1786: 
1787:     See Also
1788:     --------
1789:     masked_values : Mask using floating point equality.
1790:     masked_equal : Mask where equal to a given value.
1791:     masked_not_equal : Mask where `not` equal to a given value.
1792:     masked_less_equal : Mask where less than or equal to a given value.
1793:     masked_greater_equal : Mask where greater than or equal to a given value.
1794:     masked_less : Mask where less than a given value.
1795:     masked_greater : Mask where greater than a given value.
1796:     masked_inside : Mask inside a given interval.
1797:     masked_outside : Mask outside a given interval.
1798:     masked_invalid : Mask invalid values (NaNs or infs).
1799: 
1800:     Examples
1801:     --------
1802:     >>> import numpy.ma as ma
1803:     >>> a = np.arange(4)
1804:     >>> a
1805:     array([0, 1, 2, 3])
1806:     >>> ma.masked_where(a <= 2, a)
1807:     masked_array(data = [-- -- -- 3],
1808:           mask = [ True  True  True False],
1809:           fill_value=999999)
1810: 
1811:     Mask array `b` conditional on `a`.
1812: 
1813:     >>> b = ['a', 'b', 'c', 'd']
1814:     >>> ma.masked_where(a == 2, b)
1815:     masked_array(data = [a b -- d],
1816:           mask = [False False  True False],
1817:           fill_value=N/A)
1818: 
1819:     Effect of the `copy` argument.
1820: 
1821:     >>> c = ma.masked_where(a <= 2, a)
1822:     >>> c
1823:     masked_array(data = [-- -- -- 3],
1824:           mask = [ True  True  True False],
1825:           fill_value=999999)
1826:     >>> c[0] = 99
1827:     >>> c
1828:     masked_array(data = [99 -- -- 3],
1829:           mask = [False  True  True False],
1830:           fill_value=999999)
1831:     >>> a
1832:     array([0, 1, 2, 3])
1833:     >>> c = ma.masked_where(a <= 2, a, copy=False)
1834:     >>> c[0] = 99
1835:     >>> c
1836:     masked_array(data = [99 -- -- 3],
1837:           mask = [False  True  True False],
1838:           fill_value=999999)
1839:     >>> a
1840:     array([99,  1,  2,  3])
1841: 
1842:     When `condition` or `a` contain masked values.
1843: 
1844:     >>> a = np.arange(4)
1845:     >>> a = ma.masked_where(a == 2, a)
1846:     >>> a
1847:     masked_array(data = [0 1 -- 3],
1848:           mask = [False False  True False],
1849:           fill_value=999999)
1850:     >>> b = np.arange(4)
1851:     >>> b = ma.masked_where(b == 0, b)
1852:     >>> b
1853:     masked_array(data = [-- 1 2 3],
1854:           mask = [ True False False False],
1855:           fill_value=999999)
1856:     >>> ma.masked_where(a == 3, b)
1857:     masked_array(data = [-- 1 -- --],
1858:           mask = [ True False  True  True],
1859:           fill_value=999999)
1860: 
1861:     '''
1862:     # Make sure that condition is a valid standard-type mask.
1863:     cond = make_mask(condition)
1864:     a = np.array(a, copy=copy, subok=True)
1865: 
1866:     (cshape, ashape) = (cond.shape, a.shape)
1867:     if cshape and cshape != ashape:
1868:         raise IndexError("Inconsistant shape between the condition and the input"
1869:                          " (got %s and %s)" % (cshape, ashape))
1870:     if hasattr(a, '_mask'):
1871:         cond = mask_or(cond, a._mask)
1872:         cls = type(a)
1873:     else:
1874:         cls = MaskedArray
1875:     result = a.view(cls)
1876:     # Assign to *.mask so that structured masks are handled correctly.
1877:     result.mask = cond
1878:     return result
1879: 
1880: 
1881: def masked_greater(x, value, copy=True):
1882:     '''
1883:     Mask an array where greater than a given value.
1884: 
1885:     This function is a shortcut to ``masked_where``, with
1886:     `condition` = (x > value).
1887: 
1888:     See Also
1889:     --------
1890:     masked_where : Mask where a condition is met.
1891: 
1892:     Examples
1893:     --------
1894:     >>> import numpy.ma as ma
1895:     >>> a = np.arange(4)
1896:     >>> a
1897:     array([0, 1, 2, 3])
1898:     >>> ma.masked_greater(a, 2)
1899:     masked_array(data = [0 1 2 --],
1900:           mask = [False False False  True],
1901:           fill_value=999999)
1902: 
1903:     '''
1904:     return masked_where(greater(x, value), x, copy=copy)
1905: 
1906: 
1907: def masked_greater_equal(x, value, copy=True):
1908:     '''
1909:     Mask an array where greater than or equal to a given value.
1910: 
1911:     This function is a shortcut to ``masked_where``, with
1912:     `condition` = (x >= value).
1913: 
1914:     See Also
1915:     --------
1916:     masked_where : Mask where a condition is met.
1917: 
1918:     Examples
1919:     --------
1920:     >>> import numpy.ma as ma
1921:     >>> a = np.arange(4)
1922:     >>> a
1923:     array([0, 1, 2, 3])
1924:     >>> ma.masked_greater_equal(a, 2)
1925:     masked_array(data = [0 1 -- --],
1926:           mask = [False False  True  True],
1927:           fill_value=999999)
1928: 
1929:     '''
1930:     return masked_where(greater_equal(x, value), x, copy=copy)
1931: 
1932: 
1933: def masked_less(x, value, copy=True):
1934:     '''
1935:     Mask an array where less than a given value.
1936: 
1937:     This function is a shortcut to ``masked_where``, with
1938:     `condition` = (x < value).
1939: 
1940:     See Also
1941:     --------
1942:     masked_where : Mask where a condition is met.
1943: 
1944:     Examples
1945:     --------
1946:     >>> import numpy.ma as ma
1947:     >>> a = np.arange(4)
1948:     >>> a
1949:     array([0, 1, 2, 3])
1950:     >>> ma.masked_less(a, 2)
1951:     masked_array(data = [-- -- 2 3],
1952:           mask = [ True  True False False],
1953:           fill_value=999999)
1954: 
1955:     '''
1956:     return masked_where(less(x, value), x, copy=copy)
1957: 
1958: 
1959: def masked_less_equal(x, value, copy=True):
1960:     '''
1961:     Mask an array where less than or equal to a given value.
1962: 
1963:     This function is a shortcut to ``masked_where``, with
1964:     `condition` = (x <= value).
1965: 
1966:     See Also
1967:     --------
1968:     masked_where : Mask where a condition is met.
1969: 
1970:     Examples
1971:     --------
1972:     >>> import numpy.ma as ma
1973:     >>> a = np.arange(4)
1974:     >>> a
1975:     array([0, 1, 2, 3])
1976:     >>> ma.masked_less_equal(a, 2)
1977:     masked_array(data = [-- -- -- 3],
1978:           mask = [ True  True  True False],
1979:           fill_value=999999)
1980: 
1981:     '''
1982:     return masked_where(less_equal(x, value), x, copy=copy)
1983: 
1984: 
1985: def masked_not_equal(x, value, copy=True):
1986:     '''
1987:     Mask an array where `not` equal to a given value.
1988: 
1989:     This function is a shortcut to ``masked_where``, with
1990:     `condition` = (x != value).
1991: 
1992:     See Also
1993:     --------
1994:     masked_where : Mask where a condition is met.
1995: 
1996:     Examples
1997:     --------
1998:     >>> import numpy.ma as ma
1999:     >>> a = np.arange(4)
2000:     >>> a
2001:     array([0, 1, 2, 3])
2002:     >>> ma.masked_not_equal(a, 2)
2003:     masked_array(data = [-- -- 2 --],
2004:           mask = [ True  True False  True],
2005:           fill_value=999999)
2006: 
2007:     '''
2008:     return masked_where(not_equal(x, value), x, copy=copy)
2009: 
2010: 
2011: def masked_equal(x, value, copy=True):
2012:     '''
2013:     Mask an array where equal to a given value.
2014: 
2015:     This function is a shortcut to ``masked_where``, with
2016:     `condition` = (x == value).  For floating point arrays,
2017:     consider using ``masked_values(x, value)``.
2018: 
2019:     See Also
2020:     --------
2021:     masked_where : Mask where a condition is met.
2022:     masked_values : Mask using floating point equality.
2023: 
2024:     Examples
2025:     --------
2026:     >>> import numpy.ma as ma
2027:     >>> a = np.arange(4)
2028:     >>> a
2029:     array([0, 1, 2, 3])
2030:     >>> ma.masked_equal(a, 2)
2031:     masked_array(data = [0 1 -- 3],
2032:           mask = [False False  True False],
2033:           fill_value=999999)
2034: 
2035:     '''
2036:     output = masked_where(equal(x, value), x, copy=copy)
2037:     output.fill_value = value
2038:     return output
2039: 
2040: 
2041: def masked_inside(x, v1, v2, copy=True):
2042:     '''
2043:     Mask an array inside a given interval.
2044: 
2045:     Shortcut to ``masked_where``, where `condition` is True for `x` inside
2046:     the interval [v1,v2] (v1 <= x <= v2).  The boundaries `v1` and `v2`
2047:     can be given in either order.
2048: 
2049:     See Also
2050:     --------
2051:     masked_where : Mask where a condition is met.
2052: 
2053:     Notes
2054:     -----
2055:     The array `x` is prefilled with its filling value.
2056: 
2057:     Examples
2058:     --------
2059:     >>> import numpy.ma as ma
2060:     >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]
2061:     >>> ma.masked_inside(x, -0.3, 0.3)
2062:     masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],
2063:           mask = [False False  True  True False False],
2064:           fill_value=1e+20)
2065: 
2066:     The order of `v1` and `v2` doesn't matter.
2067: 
2068:     >>> ma.masked_inside(x, 0.3, -0.3)
2069:     masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],
2070:           mask = [False False  True  True False False],
2071:           fill_value=1e+20)
2072: 
2073:     '''
2074:     if v2 < v1:
2075:         (v1, v2) = (v2, v1)
2076:     xf = filled(x)
2077:     condition = (xf >= v1) & (xf <= v2)
2078:     return masked_where(condition, x, copy=copy)
2079: 
2080: 
2081: def masked_outside(x, v1, v2, copy=True):
2082:     '''
2083:     Mask an array outside a given interval.
2084: 
2085:     Shortcut to ``masked_where``, where `condition` is True for `x` outside
2086:     the interval [v1,v2] (x < v1)|(x > v2).
2087:     The boundaries `v1` and `v2` can be given in either order.
2088: 
2089:     See Also
2090:     --------
2091:     masked_where : Mask where a condition is met.
2092: 
2093:     Notes
2094:     -----
2095:     The array `x` is prefilled with its filling value.
2096: 
2097:     Examples
2098:     --------
2099:     >>> import numpy.ma as ma
2100:     >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]
2101:     >>> ma.masked_outside(x, -0.3, 0.3)
2102:     masked_array(data = [-- -- 0.01 0.2 -- --],
2103:           mask = [ True  True False False  True  True],
2104:           fill_value=1e+20)
2105: 
2106:     The order of `v1` and `v2` doesn't matter.
2107: 
2108:     >>> ma.masked_outside(x, 0.3, -0.3)
2109:     masked_array(data = [-- -- 0.01 0.2 -- --],
2110:           mask = [ True  True False False  True  True],
2111:           fill_value=1e+20)
2112: 
2113:     '''
2114:     if v2 < v1:
2115:         (v1, v2) = (v2, v1)
2116:     xf = filled(x)
2117:     condition = (xf < v1) | (xf > v2)
2118:     return masked_where(condition, x, copy=copy)
2119: 
2120: 
2121: def masked_object(x, value, copy=True, shrink=True):
2122:     '''
2123:     Mask the array `x` where the data are exactly equal to value.
2124: 
2125:     This function is similar to `masked_values`, but only suitable
2126:     for object arrays: for floating point, use `masked_values` instead.
2127: 
2128:     Parameters
2129:     ----------
2130:     x : array_like
2131:         Array to mask
2132:     value : object
2133:         Comparison value
2134:     copy : {True, False}, optional
2135:         Whether to return a copy of `x`.
2136:     shrink : {True, False}, optional
2137:         Whether to collapse a mask full of False to nomask
2138: 
2139:     Returns
2140:     -------
2141:     result : MaskedArray
2142:         The result of masking `x` where equal to `value`.
2143: 
2144:     See Also
2145:     --------
2146:     masked_where : Mask where a condition is met.
2147:     masked_equal : Mask where equal to a given value (integers).
2148:     masked_values : Mask using floating point equality.
2149: 
2150:     Examples
2151:     --------
2152:     >>> import numpy.ma as ma
2153:     >>> food = np.array(['green_eggs', 'ham'], dtype=object)
2154:     >>> # don't eat spoiled food
2155:     >>> eat = ma.masked_object(food, 'green_eggs')
2156:     >>> print(eat)
2157:     [-- ham]
2158:     >>> # plain ol` ham is boring
2159:     >>> fresh_food = np.array(['cheese', 'ham', 'pineapple'], dtype=object)
2160:     >>> eat = ma.masked_object(fresh_food, 'green_eggs')
2161:     >>> print(eat)
2162:     [cheese ham pineapple]
2163: 
2164:     Note that `mask` is set to ``nomask`` if possible.
2165: 
2166:     >>> eat
2167:     masked_array(data = [cheese ham pineapple],
2168:           mask = False,
2169:           fill_value=?)
2170: 
2171:     '''
2172:     if isMaskedArray(x):
2173:         condition = umath.equal(x._data, value)
2174:         mask = x._mask
2175:     else:
2176:         condition = umath.equal(np.asarray(x), value)
2177:         mask = nomask
2178:     mask = mask_or(mask, make_mask(condition, shrink=shrink))
2179:     return masked_array(x, mask=mask, copy=copy, fill_value=value)
2180: 
2181: 
2182: def masked_values(x, value, rtol=1e-5, atol=1e-8, copy=True, shrink=True):
2183:     '''
2184:     Mask using floating point equality.
2185: 
2186:     Return a MaskedArray, masked where the data in array `x` are approximately
2187:     equal to `value`, i.e. where the following condition is True
2188: 
2189:     (abs(x - value) <= atol+rtol*abs(value))
2190: 
2191:     The fill_value is set to `value` and the mask is set to ``nomask`` if
2192:     possible.  For integers, consider using ``masked_equal``.
2193: 
2194:     Parameters
2195:     ----------
2196:     x : array_like
2197:         Array to mask.
2198:     value : float
2199:         Masking value.
2200:     rtol : float, optional
2201:         Tolerance parameter.
2202:     atol : float, optional
2203:         Tolerance parameter (1e-8).
2204:     copy : bool, optional
2205:         Whether to return a copy of `x`.
2206:     shrink : bool, optional
2207:         Whether to collapse a mask full of False to ``nomask``.
2208: 
2209:     Returns
2210:     -------
2211:     result : MaskedArray
2212:         The result of masking `x` where approximately equal to `value`.
2213: 
2214:     See Also
2215:     --------
2216:     masked_where : Mask where a condition is met.
2217:     masked_equal : Mask where equal to a given value (integers).
2218: 
2219:     Examples
2220:     --------
2221:     >>> import numpy.ma as ma
2222:     >>> x = np.array([1, 1.1, 2, 1.1, 3])
2223:     >>> ma.masked_values(x, 1.1)
2224:     masked_array(data = [1.0 -- 2.0 -- 3.0],
2225:           mask = [False  True False  True False],
2226:           fill_value=1.1)
2227: 
2228:     Note that `mask` is set to ``nomask`` if possible.
2229: 
2230:     >>> ma.masked_values(x, 1.5)
2231:     masked_array(data = [ 1.   1.1  2.   1.1  3. ],
2232:           mask = False,
2233:           fill_value=1.5)
2234: 
2235:     For integers, the fill value will be different in general to the
2236:     result of ``masked_equal``.
2237: 
2238:     >>> x = np.arange(5)
2239:     >>> x
2240:     array([0, 1, 2, 3, 4])
2241:     >>> ma.masked_values(x, 2)
2242:     masked_array(data = [0 1 -- 3 4],
2243:           mask = [False False  True False False],
2244:           fill_value=2)
2245:     >>> ma.masked_equal(x, 2)
2246:     masked_array(data = [0 1 -- 3 4],
2247:           mask = [False False  True False False],
2248:           fill_value=999999)
2249: 
2250:     '''
2251:     mabs = umath.absolute
2252:     xnew = filled(x, value)
2253:     if issubclass(xnew.dtype.type, np.floating):
2254:         condition = umath.less_equal(
2255:             mabs(xnew - value), atol + rtol * mabs(value))
2256:         mask = getattr(x, '_mask', nomask)
2257:     else:
2258:         condition = umath.equal(xnew, value)
2259:         mask = nomask
2260:     mask = mask_or(mask, make_mask(condition, shrink=shrink), shrink=shrink)
2261:     return masked_array(xnew, mask=mask, copy=copy, fill_value=value)
2262: 
2263: 
2264: def masked_invalid(a, copy=True):
2265:     '''
2266:     Mask an array where invalid values occur (NaNs or infs).
2267: 
2268:     This function is a shortcut to ``masked_where``, with
2269:     `condition` = ~(np.isfinite(a)). Any pre-existing mask is conserved.
2270:     Only applies to arrays with a dtype where NaNs or infs make sense
2271:     (i.e. floating point types), but accepts any array_like object.
2272: 
2273:     See Also
2274:     --------
2275:     masked_where : Mask where a condition is met.
2276: 
2277:     Examples
2278:     --------
2279:     >>> import numpy.ma as ma
2280:     >>> a = np.arange(5, dtype=np.float)
2281:     >>> a[2] = np.NaN
2282:     >>> a[3] = np.PINF
2283:     >>> a
2284:     array([  0.,   1.,  NaN,  Inf,   4.])
2285:     >>> ma.masked_invalid(a)
2286:     masked_array(data = [0.0 1.0 -- -- 4.0],
2287:           mask = [False False  True  True False],
2288:           fill_value=1e+20)
2289: 
2290:     '''
2291:     a = np.array(a, copy=copy, subok=True)
2292:     mask = getattr(a, '_mask', None)
2293:     if mask is not None:
2294:         condition = ~(np.isfinite(getdata(a)))
2295:         if mask is not nomask:
2296:             condition |= mask
2297:         cls = type(a)
2298:     else:
2299:         condition = ~(np.isfinite(a))
2300:         cls = MaskedArray
2301:     result = a.view(cls)
2302:     result._mask = condition
2303:     return result
2304: 
2305: 
2306: ###############################################################################
2307: #                            Printing options                                 #
2308: ###############################################################################
2309: 
2310: 
2311: class _MaskedPrintOption:
2312:     '''
2313:     Handle the string used to represent missing data in a masked array.
2314: 
2315:     '''
2316: 
2317:     def __init__(self, display):
2318:         '''
2319:         Create the masked_print_option object.
2320: 
2321:         '''
2322:         self._display = display
2323:         self._enabled = True
2324: 
2325:     def display(self):
2326:         '''
2327:         Display the string to print for masked values.
2328: 
2329:         '''
2330:         return self._display
2331: 
2332:     def set_display(self, s):
2333:         '''
2334:         Set the string to print for masked values.
2335: 
2336:         '''
2337:         self._display = s
2338: 
2339:     def enabled(self):
2340:         '''
2341:         Is the use of the display value enabled?
2342: 
2343:         '''
2344:         return self._enabled
2345: 
2346:     def enable(self, shrink=1):
2347:         '''
2348:         Set the enabling shrink to `shrink`.
2349: 
2350:         '''
2351:         self._enabled = shrink
2352: 
2353:     def __str__(self):
2354:         return str(self._display)
2355: 
2356:     __repr__ = __str__
2357: 
2358: # if you single index into a masked location you get this object.
2359: masked_print_option = _MaskedPrintOption('--')
2360: 
2361: 
2362: def _recursive_printoption(result, mask, printopt):
2363:     '''
2364:     Puts printoptions in result where mask is True.
2365: 
2366:     Private function allowing for recursion
2367: 
2368:     '''
2369:     names = result.dtype.names
2370:     for name in names:
2371:         (curdata, curmask) = (result[name], mask[name])
2372:         if curdata.dtype.names:
2373:             _recursive_printoption(curdata, curmask, printopt)
2374:         else:
2375:             np.copyto(curdata, printopt, where=curmask)
2376:     return
2377: 
2378: _print_templates = dict(long_std='''\
2379: masked_%(name)s(data =
2380:  %(data)s,
2381:        %(nlen)s mask =
2382:  %(mask)s,
2383:  %(nlen)s fill_value = %(fill)s)
2384: ''',
2385:                         short_std='''\
2386: masked_%(name)s(data = %(data)s,
2387:        %(nlen)s mask = %(mask)s,
2388: %(nlen)s  fill_value = %(fill)s)
2389: ''',
2390:                         long_flx='''\
2391: masked_%(name)s(data =
2392:  %(data)s,
2393:        %(nlen)s mask =
2394:  %(mask)s,
2395: %(nlen)s  fill_value = %(fill)s,
2396:       %(nlen)s dtype = %(dtype)s)
2397: ''',
2398:                         short_flx='''\
2399: masked_%(name)s(data = %(data)s,
2400: %(nlen)s        mask = %(mask)s,
2401: %(nlen)s  fill_value = %(fill)s,
2402: %(nlen)s       dtype = %(dtype)s)
2403: ''')
2404: 
2405: ###############################################################################
2406: #                          MaskedArray class                                  #
2407: ###############################################################################
2408: 
2409: 
2410: def _recursive_filled(a, mask, fill_value):
2411:     '''
2412:     Recursively fill `a` with `fill_value`.
2413: 
2414:     '''
2415:     names = a.dtype.names
2416:     for name in names:
2417:         current = a[name]
2418:         if current.dtype.names:
2419:             _recursive_filled(current, mask[name], fill_value[name])
2420:         else:
2421:             np.copyto(current, fill_value[name], where=mask[name])
2422: 
2423: 
2424: def flatten_structured_array(a):
2425:     '''
2426:     Flatten a structured array.
2427: 
2428:     The data type of the output is chosen such that it can represent all of the
2429:     (nested) fields.
2430: 
2431:     Parameters
2432:     ----------
2433:     a : structured array
2434: 
2435:     Returns
2436:     -------
2437:     output : masked array or ndarray
2438:         A flattened masked array if the input is a masked array, otherwise a
2439:         standard ndarray.
2440: 
2441:     Examples
2442:     --------
2443:     >>> ndtype = [('a', int), ('b', float)]
2444:     >>> a = np.array([(1, 1), (2, 2)], dtype=ndtype)
2445:     >>> flatten_structured_array(a)
2446:     array([[1., 1.],
2447:            [2., 2.]])
2448: 
2449:     '''
2450: 
2451:     def flatten_sequence(iterable):
2452:         '''
2453:         Flattens a compound of nested iterables.
2454: 
2455:         '''
2456:         for elm in iter(iterable):
2457:             if hasattr(elm, '__iter__'):
2458:                 for f in flatten_sequence(elm):
2459:                     yield f
2460:             else:
2461:                 yield elm
2462: 
2463:     a = np.asanyarray(a)
2464:     inishape = a.shape
2465:     a = a.ravel()
2466:     if isinstance(a, MaskedArray):
2467:         out = np.array([tuple(flatten_sequence(d.item())) for d in a._data])
2468:         out = out.view(MaskedArray)
2469:         out._mask = np.array([tuple(flatten_sequence(d.item()))
2470:                               for d in getmaskarray(a)])
2471:     else:
2472:         out = np.array([tuple(flatten_sequence(d.item())) for d in a])
2473:     if len(inishape) > 1:
2474:         newshape = list(out.shape)
2475:         newshape[0] = inishape
2476:         out.shape = tuple(flatten_sequence(newshape))
2477:     return out
2478: 
2479: 
2480: def _arraymethod(funcname, onmask=True):
2481:     '''
2482:     Return a class method wrapper around a basic array method.
2483: 
2484:     Creates a class method which returns a masked array, where the new
2485:     ``_data`` array is the output of the corresponding basic method called
2486:     on the original ``_data``.
2487: 
2488:     If `onmask` is True, the new mask is the output of the method called
2489:     on the initial mask. Otherwise, the new mask is just a reference
2490:     to the initial mask.
2491: 
2492:     Parameters
2493:     ----------
2494:     funcname : str
2495:         Name of the function to apply on data.
2496:     onmask : bool
2497:         Whether the mask must be processed also (True) or left
2498:         alone (False). Default is True. Make available as `_onmask`
2499:         attribute.
2500: 
2501:     Returns
2502:     -------
2503:     method : instancemethod
2504:         Class method wrapper of the specified basic array method.
2505: 
2506:     '''
2507:     def wrapped_method(self, *args, **params):
2508:         result = getattr(self._data, funcname)(*args, **params)
2509:         result = result.view(type(self))
2510:         result._update_from(self)
2511:         mask = self._mask
2512:         if result.ndim:
2513:             if not onmask:
2514:                 result.__setmask__(mask)
2515:             elif mask is not nomask:
2516:                 result.__setmask__(getattr(mask, funcname)(*args, **params))
2517:         else:
2518:             if mask.ndim and (not mask.dtype.names and mask.all()):
2519:                 return masked
2520:         return result
2521:     methdoc = getattr(ndarray, funcname, None) or getattr(np, funcname, None)
2522:     if methdoc is not None:
2523:         wrapped_method.__doc__ = methdoc.__doc__
2524:     wrapped_method.__name__ = funcname
2525:     return wrapped_method
2526: 
2527: 
2528: class MaskedIterator(object):
2529:     '''
2530:     Flat iterator object to iterate over masked arrays.
2531: 
2532:     A `MaskedIterator` iterator is returned by ``x.flat`` for any masked array
2533:     `x`. It allows iterating over the array as if it were a 1-D array,
2534:     either in a for-loop or by calling its `next` method.
2535: 
2536:     Iteration is done in C-contiguous style, with the last index varying the
2537:     fastest. The iterator can also be indexed using basic slicing or
2538:     advanced indexing.
2539: 
2540:     See Also
2541:     --------
2542:     MaskedArray.flat : Return a flat iterator over an array.
2543:     MaskedArray.flatten : Returns a flattened copy of an array.
2544: 
2545:     Notes
2546:     -----
2547:     `MaskedIterator` is not exported by the `ma` module. Instead of
2548:     instantiating a `MaskedIterator` directly, use `MaskedArray.flat`.
2549: 
2550:     Examples
2551:     --------
2552:     >>> x = np.ma.array(arange(6).reshape(2, 3))
2553:     >>> fl = x.flat
2554:     >>> type(fl)
2555:     <class 'numpy.ma.core.MaskedIterator'>
2556:     >>> for item in fl:
2557:     ...     print(item)
2558:     ...
2559:     0
2560:     1
2561:     2
2562:     3
2563:     4
2564:     5
2565: 
2566:     Extracting more than a single element b indexing the `MaskedIterator`
2567:     returns a masked array:
2568: 
2569:     >>> fl[2:4]
2570:     masked_array(data = [2 3],
2571:                  mask = False,
2572:            fill_value = 999999)
2573: 
2574:     '''
2575: 
2576:     def __init__(self, ma):
2577:         self.ma = ma
2578:         self.dataiter = ma._data.flat
2579: 
2580:         if ma._mask is nomask:
2581:             self.maskiter = None
2582:         else:
2583:             self.maskiter = ma._mask.flat
2584: 
2585:     def __iter__(self):
2586:         return self
2587: 
2588:     def __getitem__(self, indx):
2589:         result = self.dataiter.__getitem__(indx).view(type(self.ma))
2590:         if self.maskiter is not None:
2591:             _mask = self.maskiter.__getitem__(indx)
2592:             if isinstance(_mask, ndarray):
2593:                 # set shape to match that of data; this is needed for matrices
2594:                 _mask.shape = result.shape
2595:                 result._mask = _mask
2596:             elif isinstance(_mask, np.void):
2597:                 return mvoid(result, mask=_mask, hardmask=self.ma._hardmask)
2598:             elif _mask:  # Just a scalar, masked
2599:                 return masked
2600:         return result
2601: 
2602:     # This won't work if ravel makes a copy
2603:     def __setitem__(self, index, value):
2604:         self.dataiter[index] = getdata(value)
2605:         if self.maskiter is not None:
2606:             self.maskiter[index] = getmaskarray(value)
2607: 
2608:     def __next__(self):
2609:         '''
2610:         Return the next value, or raise StopIteration.
2611: 
2612:         Examples
2613:         --------
2614:         >>> x = np.ma.array([3, 2], mask=[0, 1])
2615:         >>> fl = x.flat
2616:         >>> fl.next()
2617:         3
2618:         >>> fl.next()
2619:         masked_array(data = --,
2620:                      mask = True,
2621:                fill_value = 1e+20)
2622:         >>> fl.next()
2623:         Traceback (most recent call last):
2624:           File "<stdin>", line 1, in <module>
2625:           File "/home/ralf/python/numpy/numpy/ma/core.py", line 2243, in next
2626:             d = self.dataiter.next()
2627:         StopIteration
2628: 
2629:         '''
2630:         d = next(self.dataiter)
2631:         if self.maskiter is not None:
2632:             m = next(self.maskiter)
2633:             if isinstance(m, np.void):
2634:                 return mvoid(d, mask=m, hardmask=self.ma._hardmask)
2635:             elif m:  # Just a scalar, masked
2636:                 return masked
2637:         return d
2638: 
2639:     next = __next__
2640: 
2641: 
2642: class MaskedArray(ndarray):
2643:     '''
2644:     An array class with possibly masked values.
2645: 
2646:     Masked values of True exclude the corresponding element from any
2647:     computation.
2648: 
2649:     Construction::
2650: 
2651:       x = MaskedArray(data, mask=nomask, dtype=None, copy=False, subok=True,
2652:                       ndmin=0, fill_value=None, keep_mask=True, hard_mask=None,
2653:                       shrink=True, order=None)
2654: 
2655:     Parameters
2656:     ----------
2657:     data : array_like
2658:         Input data.
2659:     mask : sequence, optional
2660:         Mask. Must be convertible to an array of booleans with the same
2661:         shape as `data`. True indicates a masked (i.e. invalid) data.
2662:     dtype : dtype, optional
2663:         Data type of the output.
2664:         If `dtype` is None, the type of the data argument (``data.dtype``)
2665:         is used. If `dtype` is not None and different from ``data.dtype``,
2666:         a copy is performed.
2667:     copy : bool, optional
2668:         Whether to copy the input data (True), or to use a reference instead.
2669:         Default is False.
2670:     subok : bool, optional
2671:         Whether to return a subclass of `MaskedArray` if possible (True) or a
2672:         plain `MaskedArray`. Default is True.
2673:     ndmin : int, optional
2674:         Minimum number of dimensions. Default is 0.
2675:     fill_value : scalar, optional
2676:         Value used to fill in the masked values when necessary.
2677:         If None, a default based on the data-type is used.
2678:     keep_mask : bool, optional
2679:         Whether to combine `mask` with the mask of the input data, if any
2680:         (True), or to use only `mask` for the output (False). Default is True.
2681:     hard_mask : bool, optional
2682:         Whether to use a hard mask or not. With a hard mask, masked values
2683:         cannot be unmasked. Default is False.
2684:     shrink : bool, optional
2685:         Whether to force compression of an empty mask. Default is True.
2686:     order : {'C', 'F', 'A'}, optional
2687:         Specify the order of the array.  If order is 'C', then the array
2688:         will be in C-contiguous order (last-index varies the fastest).
2689:         If order is 'F', then the returned array will be in
2690:         Fortran-contiguous order (first-index varies the fastest).
2691:         If order is 'A' (default), then the returned array may be
2692:         in any order (either C-, Fortran-contiguous, or even discontiguous),
2693:         unless a copy is required, in which case it will be C-contiguous.
2694: 
2695:     '''
2696: 
2697:     __array_priority__ = 15
2698:     _defaultmask = nomask
2699:     _defaulthardmask = False
2700:     _baseclass = ndarray
2701:     # Maximum number of elements per axis used when printing an array.
2702:     _print_width = 100
2703: 
2704:     def __new__(cls, data=None, mask=nomask, dtype=None, copy=False,
2705:                 subok=True, ndmin=0, fill_value=None, keep_mask=True,
2706:                 hard_mask=None, shrink=True, order=None, **options):
2707:         '''
2708:         Create a new masked array from scratch.
2709: 
2710:         Notes
2711:         -----
2712:         A masked array can also be created by taking a .view(MaskedArray).
2713: 
2714:         '''
2715:         # Process data.
2716:         _data = np.array(data, dtype=dtype, copy=copy,
2717:                          order=order, subok=True, ndmin=ndmin)
2718:         _baseclass = getattr(data, '_baseclass', type(_data))
2719:         # Check that we're not erasing the mask.
2720:         if isinstance(data, MaskedArray) and (data.shape != _data.shape):
2721:             copy = True
2722:         # Careful, cls might not always be MaskedArray.
2723:         if not isinstance(data, cls) or not subok:
2724:             _data = ndarray.view(_data, cls)
2725:         else:
2726:             _data = ndarray.view(_data, type(data))
2727:         # Backwards compatibility w/ numpy.core.ma.
2728:         if hasattr(data, '_mask') and not isinstance(data, ndarray):
2729:             _data._mask = data._mask
2730:             # FIXME _sharedmask is never used.
2731:             _sharedmask = True
2732:         # Process mask.
2733:         # Number of named fields (or zero if none)
2734:         names_ = _data.dtype.names or ()
2735:         # Type of the mask
2736:         if names_:
2737:             mdtype = make_mask_descr(_data.dtype)
2738:         else:
2739:             mdtype = MaskType
2740: 
2741:         if mask is nomask:
2742:             # Case 1. : no mask in input.
2743:             # Erase the current mask ?
2744:             if not keep_mask:
2745:                 # With a reduced version
2746:                 if shrink:
2747:                     _data._mask = nomask
2748:                 # With full version
2749:                 else:
2750:                     _data._mask = np.zeros(_data.shape, dtype=mdtype)
2751:             # Check whether we missed something
2752:             elif isinstance(data, (tuple, list)):
2753:                 try:
2754:                     # If data is a sequence of masked array
2755:                     mask = np.array([getmaskarray(m) for m in data],
2756:                                     dtype=mdtype)
2757:                 except ValueError:
2758:                     # If data is nested
2759:                     mask = nomask
2760:                 # Force shrinking of the mask if needed (and possible)
2761:                 if (mdtype == MaskType) and mask.any():
2762:                     _data._mask = mask
2763:                     _data._sharedmask = False
2764:             else:
2765:                 if copy:
2766:                     _data._mask = _data._mask.copy()
2767:                     _data._sharedmask = False
2768:                     # Reset the shape of the original mask
2769:                     if getmask(data) is not nomask:
2770:                         data._mask.shape = data.shape
2771:                 else:
2772:                     _data._sharedmask = True
2773:         else:
2774:             # Case 2. : With a mask in input.
2775:             # If mask is boolean, create an array of True or False
2776:             if mask is True and mdtype == MaskType:
2777:                 mask = np.ones(_data.shape, dtype=mdtype)
2778:             elif mask is False and mdtype == MaskType:
2779:                 mask = np.zeros(_data.shape, dtype=mdtype)
2780:             else:
2781:                 # Read the mask with the current mdtype
2782:                 try:
2783:                     mask = np.array(mask, copy=copy, dtype=mdtype)
2784:                 # Or assume it's a sequence of bool/int
2785:                 except TypeError:
2786:                     mask = np.array([tuple([m] * len(mdtype)) for m in mask],
2787:                                     dtype=mdtype)
2788:             # Make sure the mask and the data have the same shape
2789:             if mask.shape != _data.shape:
2790:                 (nd, nm) = (_data.size, mask.size)
2791:                 if nm == 1:
2792:                     mask = np.resize(mask, _data.shape)
2793:                 elif nm == nd:
2794:                     mask = np.reshape(mask, _data.shape)
2795:                 else:
2796:                     msg = "Mask and data not compatible: data size is %i, " + \
2797:                           "mask size is %i."
2798:                     raise MaskError(msg % (nd, nm))
2799:                 copy = True
2800:             # Set the mask to the new value
2801:             if _data._mask is nomask:
2802:                 _data._mask = mask
2803:                 _data._sharedmask = not copy
2804:             else:
2805:                 if not keep_mask:
2806:                     _data._mask = mask
2807:                     _data._sharedmask = not copy
2808:                 else:
2809:                     if names_:
2810:                         def _recursive_or(a, b):
2811:                             "do a|=b on each field of a, recursively"
2812:                             for name in a.dtype.names:
2813:                                 (af, bf) = (a[name], b[name])
2814:                                 if af.dtype.names:
2815:                                     _recursive_or(af, bf)
2816:                                 else:
2817:                                     af |= bf
2818:                             return
2819:                         _recursive_or(_data._mask, mask)
2820:                     else:
2821:                         _data._mask = np.logical_or(mask, _data._mask)
2822:                     _data._sharedmask = False
2823:         # Update fill_value.
2824:         if fill_value is None:
2825:             fill_value = getattr(data, '_fill_value', None)
2826:         # But don't run the check unless we have something to check.
2827:         if fill_value is not None:
2828:             _data._fill_value = _check_fill_value(fill_value, _data.dtype)
2829:         # Process extra options ..
2830:         if hard_mask is None:
2831:             _data._hardmask = getattr(data, '_hardmask', False)
2832:         else:
2833:             _data._hardmask = hard_mask
2834:         _data._baseclass = _baseclass
2835:         return _data
2836: 
2837: 
2838:     def _update_from(self, obj):
2839:         '''
2840:         Copies some attributes of obj to self.
2841: 
2842:         '''
2843:         if obj is not None and isinstance(obj, ndarray):
2844:             _baseclass = type(obj)
2845:         else:
2846:             _baseclass = ndarray
2847:         # We need to copy the _basedict to avoid backward propagation
2848:         _optinfo = {}
2849:         _optinfo.update(getattr(obj, '_optinfo', {}))
2850:         _optinfo.update(getattr(obj, '_basedict', {}))
2851:         if not isinstance(obj, MaskedArray):
2852:             _optinfo.update(getattr(obj, '__dict__', {}))
2853:         _dict = dict(_fill_value=getattr(obj, '_fill_value', None),
2854:                      _hardmask=getattr(obj, '_hardmask', False),
2855:                      _sharedmask=getattr(obj, '_sharedmask', False),
2856:                      _isfield=getattr(obj, '_isfield', False),
2857:                      _baseclass=getattr(obj, '_baseclass', _baseclass),
2858:                      _optinfo=_optinfo,
2859:                      _basedict=_optinfo)
2860:         self.__dict__.update(_dict)
2861:         self.__dict__.update(_optinfo)
2862:         return
2863: 
2864:     def __array_finalize__(self, obj):
2865:         '''
2866:         Finalizes the masked array.
2867: 
2868:         '''
2869:         # Get main attributes.
2870:         self._update_from(obj)
2871: 
2872:         # We have to decide how to initialize self.mask, based on
2873:         # obj.mask. This is very difficult.  There might be some
2874:         # correspondence between the elements in the array we are being
2875:         # created from (= obj) and us. Or there might not. This method can
2876:         # be called in all kinds of places for all kinds of reasons -- could
2877:         # be empty_like, could be slicing, could be a ufunc, could be a view.
2878:         # The numpy subclassing interface simply doesn't give us any way
2879:         # to know, which means that at best this method will be based on
2880:         # guesswork and heuristics. To make things worse, there isn't even any
2881:         # clear consensus about what the desired behavior is. For instance,
2882:         # most users think that np.empty_like(marr) -- which goes via this
2883:         # method -- should return a masked array with an empty mask (see
2884:         # gh-3404 and linked discussions), but others disagree, and they have
2885:         # existing code which depends on empty_like returning an array that
2886:         # matches the input mask.
2887:         #
2888:         # Historically our algorithm was: if the template object mask had the
2889:         # same *number of elements* as us, then we used *it's mask object
2890:         # itself* as our mask, so that writes to us would also write to the
2891:         # original array. This is horribly broken in multiple ways.
2892:         #
2893:         # Now what we do instead is, if the template object mask has the same
2894:         # number of elements as us, and we do not have the same base pointer
2895:         # as the template object (b/c views like arr[...] should keep the same
2896:         # mask), then we make a copy of the template object mask and use
2897:         # that. This is also horribly broken but somewhat less so. Maybe.
2898:         if isinstance(obj, ndarray):
2899:             # XX: This looks like a bug -- shouldn't it check self.dtype
2900:             # instead?
2901:             if obj.dtype.names:
2902:                 _mask = getattr(obj, '_mask',
2903:                                 make_mask_none(obj.shape, obj.dtype))
2904:             else:
2905:                 _mask = getattr(obj, '_mask', nomask)
2906: 
2907:             # If self and obj point to exactly the same data, then probably
2908:             # self is a simple view of obj (e.g., self = obj[...]), so they
2909:             # should share the same mask. (This isn't 100% reliable, e.g. self
2910:             # could be the first row of obj, or have strange strides, but as a
2911:             # heuristic it's not bad.) In all other cases, we make a copy of
2912:             # the mask, so that future modifications to 'self' do not end up
2913:             # side-effecting 'obj' as well.
2914:             if (obj.__array_interface__["data"][0]
2915:                     != self.__array_interface__["data"][0]):
2916:                 _mask = _mask.copy()
2917:         else:
2918:             _mask = nomask
2919:         self._mask = _mask
2920:         # Finalize the mask
2921:         if self._mask is not nomask:
2922:             try:
2923:                 self._mask.shape = self.shape
2924:             except ValueError:
2925:                 self._mask = nomask
2926:             except (TypeError, AttributeError):
2927:                 # When _mask.shape is not writable (because it's a void)
2928:                 pass
2929:         # Finalize the fill_value for structured arrays
2930:         if self.dtype.names:
2931:             if self._fill_value is None:
2932:                 self._fill_value = _check_fill_value(None, self.dtype)
2933:         return
2934: 
2935:     def __array_wrap__(self, obj, context=None):
2936:         '''
2937:         Special hook for ufuncs.
2938: 
2939:         Wraps the numpy array and sets the mask according to context.
2940: 
2941:         '''
2942:         result = obj.view(type(self))
2943:         result._update_from(self)
2944: 
2945:         if context is not None:
2946:             result._mask = result._mask.copy()
2947:             (func, args, _) = context
2948:             m = reduce(mask_or, [getmaskarray(arg) for arg in args])
2949:             # Get the domain mask
2950:             domain = ufunc_domain.get(func, None)
2951:             if domain is not None:
2952:                 # Take the domain, and make sure it's a ndarray
2953:                 if len(args) > 2:
2954:                     d = filled(reduce(domain, args), True)
2955:                 else:
2956:                     d = filled(domain(*args), True)
2957:                 # Fill the result where the domain is wrong
2958:                 try:
2959:                     # Binary domain: take the last value
2960:                     fill_value = ufunc_fills[func][-1]
2961:                 except TypeError:
2962:                     # Unary domain: just use this one
2963:                     fill_value = ufunc_fills[func]
2964:                 except KeyError:
2965:                     # Domain not recognized, use fill_value instead
2966:                     fill_value = self.fill_value
2967:                 result = result.copy()
2968:                 np.copyto(result, fill_value, where=d)
2969:                 # Update the mask
2970:                 if m is nomask:
2971:                     if d is not nomask:
2972:                         m = d
2973:                 else:
2974:                     # Don't modify inplace, we risk back-propagation
2975:                     m = (m | d)
2976:             # Make sure the mask has the proper size
2977:             if result.shape == () and m:
2978:                 return masked
2979:             else:
2980:                 result._mask = m
2981:                 result._sharedmask = False
2982: 
2983:         return result
2984: 
2985:     def view(self, dtype=None, type=None, fill_value=None):
2986:         '''
2987:         Return a view of the MaskedArray data
2988: 
2989:         Parameters
2990:         ----------
2991:         dtype : data-type or ndarray sub-class, optional
2992:             Data-type descriptor of the returned view, e.g., float32 or int16.
2993:             The default, None, results in the view having the same data-type
2994:             as `a`. As with ``ndarray.view``, dtype can also be specified as
2995:             an ndarray sub-class, which then specifies the type of the
2996:             returned object (this is equivalent to setting the ``type``
2997:             parameter).
2998:         type : Python type, optional
2999:             Type of the returned view, e.g., ndarray or matrix.  Again, the
3000:             default None results in type preservation.
3001: 
3002:         Notes
3003:         -----
3004: 
3005:         ``a.view()`` is used two different ways:
3006: 
3007:         ``a.view(some_dtype)`` or ``a.view(dtype=some_dtype)`` constructs a view
3008:         of the array's memory with a different data-type.  This can cause a
3009:         reinterpretation of the bytes of memory.
3010: 
3011:         ``a.view(ndarray_subclass)`` or ``a.view(type=ndarray_subclass)`` just
3012:         returns an instance of `ndarray_subclass` that looks at the same array
3013:         (same shape, dtype, etc.)  This does not cause a reinterpretation of the
3014:         memory.
3015: 
3016:         If `fill_value` is not specified, but `dtype` is specified (and is not
3017:         an ndarray sub-class), the `fill_value` of the MaskedArray will be
3018:         reset. If neither `fill_value` nor `dtype` are specified (or if
3019:         `dtype` is an ndarray sub-class), then the fill value is preserved.
3020:         Finally, if `fill_value` is specified, but `dtype` is not, the fill
3021:         value is set to the specified value.
3022: 
3023:         For ``a.view(some_dtype)``, if ``some_dtype`` has a different number of
3024:         bytes per entry than the previous dtype (for example, converting a
3025:         regular array to a structured array), then the behavior of the view
3026:         cannot be predicted just from the superficial appearance of ``a`` (shown
3027:         by ``print(a)``). It also depends on exactly how ``a`` is stored in
3028:         memory. Therefore if ``a`` is C-ordered versus fortran-ordered, versus
3029:         defined as a slice or transpose, etc., the view may give different
3030:         results.
3031:         '''
3032: 
3033:         if dtype is None:
3034:             if type is None:
3035:                 output = ndarray.view(self)
3036:             else:
3037:                 output = ndarray.view(self, type)
3038:         elif type is None:
3039:             try:
3040:                 if issubclass(dtype, ndarray):
3041:                     output = ndarray.view(self, dtype)
3042:                     dtype = None
3043:                 else:
3044:                     output = ndarray.view(self, dtype)
3045:             except TypeError:
3046:                 output = ndarray.view(self, dtype)
3047:         else:
3048:             output = ndarray.view(self, dtype, type)
3049: 
3050:         # also make the mask be a view (so attr changes to the view's
3051:         # mask do no affect original object's mask)
3052:         # (especially important to avoid affecting np.masked singleton)
3053:         if (getattr(output, '_mask', nomask) is not nomask):
3054:             output._mask = output._mask.view()
3055: 
3056:         # Make sure to reset the _fill_value if needed
3057:         if getattr(output, '_fill_value', None) is not None:
3058:             if fill_value is None:
3059:                 if dtype is None:
3060:                     pass  # leave _fill_value as is
3061:                 else:
3062:                     output._fill_value = None
3063:             else:
3064:                 output.fill_value = fill_value
3065:         return output
3066:     view.__doc__ = ndarray.view.__doc__
3067: 
3068:     def astype(self, newtype):
3069:         '''
3070:         Returns a copy of the MaskedArray cast to given newtype.
3071: 
3072:         Returns
3073:         -------
3074:         output : MaskedArray
3075:             A copy of self cast to input newtype.
3076:             The returned record shape matches self.shape.
3077: 
3078:         Examples
3079:         --------
3080:         >>> x = np.ma.array([[1,2,3.1],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)
3081:         >>> print(x)
3082:         [[1.0 -- 3.1]
3083:          [-- 5.0 --]
3084:          [7.0 -- 9.0]]
3085:         >>> print(x.astype(int32))
3086:         [[1 -- 3]
3087:          [-- 5 --]
3088:          [7 -- 9]]
3089: 
3090:         '''
3091:         newtype = np.dtype(newtype)
3092:         output = self._data.astype(newtype).view(type(self))
3093:         output._update_from(self)
3094:         names = output.dtype.names
3095:         if names is None:
3096:             output._mask = self._mask.astype(bool)
3097:         else:
3098:             if self._mask is nomask:
3099:                 output._mask = nomask
3100:             else:
3101:                 output._mask = self._mask.astype([(n, bool) for n in names])
3102:         # Don't check _fill_value if it's None, that'll speed things up
3103:         if self._fill_value is not None:
3104:             output._fill_value = _check_fill_value(self._fill_value, newtype)
3105:         return output
3106: 
3107:     def __getitem__(self, indx):
3108:         '''
3109:         x.__getitem__(y) <==> x[y]
3110: 
3111:         Return the item described by i, as a masked array.
3112: 
3113:         '''
3114:         dout = self.data[indx]
3115:         # We could directly use ndarray.__getitem__ on self.
3116:         # But then we would have to modify __array_finalize__ to prevent the
3117:         # mask of being reshaped if it hasn't been set up properly yet
3118:         # So it's easier to stick to the current version
3119:         _mask = self._mask
3120:         # Did we extract a single item?
3121:         if not getattr(dout, 'ndim', False):
3122:             # A record
3123:             if isinstance(dout, np.void):
3124:                 mask = _mask[indx]
3125:                 # We should always re-cast to mvoid, otherwise users can
3126:                 # change masks on rows that already have masked values, but not
3127:                 # on rows that have no masked values, which is inconsistent.
3128:                 dout = mvoid(dout, mask=mask, hardmask=self._hardmask)
3129:             # Just a scalar
3130:             elif _mask is not nomask and _mask[indx]:
3131:                 return masked
3132:         elif self.dtype.type is np.object_ and self.dtype is not dout.dtype:
3133:             # self contains an object array of arrays (yes, that happens).
3134:             # If masked, turn into a MaskedArray, with everything masked.
3135:             if _mask is not nomask and _mask[indx]:
3136:                 return MaskedArray(dout, mask=True)
3137:         else:
3138:             # Force dout to MA
3139:             dout = dout.view(type(self))
3140:             # Inherit attributes from self
3141:             dout._update_from(self)
3142:             # Check the fill_value
3143:             if isinstance(indx, basestring):
3144:                 if self._fill_value is not None:
3145:                     dout._fill_value = self._fill_value[indx]
3146: 
3147:                     # If we're indexing a multidimensional field in a 
3148:                     # structured array (such as dtype("(2,)i2,(2,)i1")),
3149:                     # dimensionality goes up (M[field].ndim == M.ndim +
3150:                     # len(M.dtype[field].shape)).  That's fine for 
3151:                     # M[field] but problematic for M[field].fill_value 
3152:                     # which should have shape () to avoid breaking several
3153:                     # methods. There is no great way out, so set to
3154:                     # first element.  See issue #6723.
3155:                     if dout._fill_value.ndim > 0:
3156:                         if not (dout._fill_value ==
3157:                                 dout._fill_value.flat[0]).all():
3158:                             warnings.warn(
3159:                                 "Upon accessing multidimensional field "
3160:                                 "{indx:s}, need to keep dimensionality "
3161:                                 "of fill_value at 0. Discarding "
3162:                                 "heterogeneous fill_value and setting "
3163:                                 "all to {fv!s}.".format(indx=indx,
3164:                                     fv=dout._fill_value[0]))
3165:                         dout._fill_value = dout._fill_value.flat[0]
3166:                 dout._isfield = True
3167:             # Update the mask if needed
3168:             if _mask is not nomask:
3169:                 dout._mask = _mask[indx]
3170:                 # set shape to match that of data; this is needed for matrices
3171:                 dout._mask.shape = dout.shape
3172:                 dout._sharedmask = True
3173:                 # Note: Don't try to check for m.any(), that'll take too long
3174:         return dout
3175: 
3176:     def __setitem__(self, indx, value):
3177:         '''
3178:         x.__setitem__(i, y) <==> x[i]=y
3179: 
3180:         Set item described by index. If value is masked, masks those
3181:         locations.
3182: 
3183:         '''
3184:         if self is masked:
3185:             raise MaskError('Cannot alter the masked element.')
3186:         _data = self._data
3187:         _mask = self._mask
3188:         if isinstance(indx, basestring):
3189:             _data[indx] = value
3190:             if _mask is nomask:
3191:                 self._mask = _mask = make_mask_none(self.shape, self.dtype)
3192:             _mask[indx] = getmask(value)
3193:             return
3194: 
3195:         _dtype = _data.dtype
3196:         nbfields = len(_dtype.names or ())
3197: 
3198:         if value is masked:
3199:             # The mask wasn't set: create a full version.
3200:             if _mask is nomask:
3201:                 _mask = self._mask = make_mask_none(self.shape, _dtype)
3202:             # Now, set the mask to its value.
3203:             if nbfields:
3204:                 _mask[indx] = tuple([True] * nbfields)
3205:             else:
3206:                 _mask[indx] = True
3207:             if not self._isfield:
3208:                 self._sharedmask = False
3209:             return
3210: 
3211:         # Get the _data part of the new value
3212:         dval = value
3213:         # Get the _mask part of the new value
3214:         mval = getattr(value, '_mask', nomask)
3215:         if nbfields and mval is nomask:
3216:             mval = tuple([False] * nbfields)
3217:         if _mask is nomask:
3218:             # Set the data, then the mask
3219:             _data[indx] = dval
3220:             if mval is not nomask:
3221:                 _mask = self._mask = make_mask_none(self.shape, _dtype)
3222:                 _mask[indx] = mval
3223:         elif not self._hardmask:
3224:             # Unshare the mask if necessary to avoid propagation
3225:             # We want to remove the unshare logic from this place in the
3226:             # future. Note that _sharedmask has lots of false positives.
3227:             if not self._isfield:
3228:                 if self._sharedmask and not (
3229:                         # If no one else holds a reference (we have two
3230:                         # references (_mask and self._mask) -- add one for
3231:                         # getrefcount) and the array owns its own data
3232:                         # copying the mask should do nothing.
3233:                         (sys.getrefcount(_mask) == 3) and _mask.flags.owndata):
3234:                     # 2016.01.15 -- v1.11.0
3235:                     warnings.warn(
3236:                        "setting an item on a masked array which has a shared "
3237:                        "mask will not copy the mask and also change the "
3238:                        "original mask array in the future.\n"
3239:                        "Check the NumPy 1.11 release notes for more "
3240:                        "information.",
3241:                        MaskedArrayFutureWarning, stacklevel=2)
3242:                 self.unshare_mask()
3243:                 _mask = self._mask
3244:             # Set the data, then the mask
3245:             _data[indx] = dval
3246:             _mask[indx] = mval
3247:         elif hasattr(indx, 'dtype') and (indx.dtype == MaskType):
3248:             indx = indx * umath.logical_not(_mask)
3249:             _data[indx] = dval
3250:         else:
3251:             if nbfields:
3252:                 err_msg = "Flexible 'hard' masks are not yet supported."
3253:                 raise NotImplementedError(err_msg)
3254:             mindx = mask_or(_mask[indx], mval, copy=True)
3255:             dindx = self._data[indx]
3256:             if dindx.size > 1:
3257:                 np.copyto(dindx, dval, where=~mindx)
3258:             elif mindx is nomask:
3259:                 dindx = dval
3260:             _data[indx] = dindx
3261:             _mask[indx] = mindx
3262:         return
3263: 
3264:     def __setattr__(self, attr, value):
3265:         super(MaskedArray, self).__setattr__(attr, value)
3266:         if attr == 'dtype' and self._mask is not nomask:
3267:             self._mask = self._mask.view(make_mask_descr(value), ndarray)
3268:             # Try to reset the shape of the mask (if we don't have a void)
3269:             # This raises a ValueError if the dtype change won't work
3270:             try:
3271:                 self._mask.shape = self.shape
3272:             except (AttributeError, TypeError):
3273:                 pass
3274: 
3275:     def __getslice__(self, i, j):
3276:         '''
3277:         x.__getslice__(i, j) <==> x[i:j]
3278: 
3279:         Return the slice described by (i, j).  The use of negative indices
3280:         is not supported.
3281: 
3282:         '''
3283:         return self.__getitem__(slice(i, j))
3284: 
3285:     def __setslice__(self, i, j, value):
3286:         '''
3287:         x.__setslice__(i, j, value) <==> x[i:j]=value
3288: 
3289:         Set the slice (i,j) of a to value. If value is masked, mask those
3290:         locations.
3291: 
3292:         '''
3293:         self.__setitem__(slice(i, j), value)
3294: 
3295:     def __setmask__(self, mask, copy=False):
3296:         '''
3297:         Set the mask.
3298: 
3299:         '''
3300:         idtype = self.dtype
3301:         current_mask = self._mask
3302:         if mask is masked:
3303:             mask = True
3304: 
3305:         if (current_mask is nomask):
3306:             # Make sure the mask is set
3307:             # Just don't do anything if there's nothing to do.
3308:             if mask is nomask:
3309:                 return
3310:             current_mask = self._mask = make_mask_none(self.shape, idtype)
3311: 
3312:         if idtype.names is None:
3313:             # No named fields.
3314:             # Hardmask: don't unmask the data
3315:             if self._hardmask:
3316:                 current_mask |= mask
3317:             # Softmask: set everything to False
3318:             # If it's obviously a compatible scalar, use a quick update
3319:             # method.
3320:             elif isinstance(mask, (int, float, np.bool_, np.number)):
3321:                 current_mask[...] = mask
3322:             # Otherwise fall back to the slower, general purpose way.
3323:             else:
3324:                 current_mask.flat = mask
3325:         else:
3326:             # Named fields w/
3327:             mdtype = current_mask.dtype
3328:             mask = np.array(mask, copy=False)
3329:             # Mask is a singleton
3330:             if not mask.ndim:
3331:                 # It's a boolean : make a record
3332:                 if mask.dtype.kind == 'b':
3333:                     mask = np.array(tuple([mask.item()] * len(mdtype)),
3334:                                     dtype=mdtype)
3335:                 # It's a record: make sure the dtype is correct
3336:                 else:
3337:                     mask = mask.astype(mdtype)
3338:             # Mask is a sequence
3339:             else:
3340:                 # Make sure the new mask is a ndarray with the proper dtype
3341:                 try:
3342:                     mask = np.array(mask, copy=copy, dtype=mdtype)
3343:                 # Or assume it's a sequence of bool/int
3344:                 except TypeError:
3345:                     mask = np.array([tuple([m] * len(mdtype)) for m in mask],
3346:                                     dtype=mdtype)
3347:             # Hardmask: don't unmask the data
3348:             if self._hardmask:
3349:                 for n in idtype.names:
3350:                     current_mask[n] |= mask[n]
3351:             # Softmask: set everything to False
3352:             # If it's obviously a compatible scalar, use a quick update
3353:             # method.
3354:             elif isinstance(mask, (int, float, np.bool_, np.number)):
3355:                 current_mask[...] = mask
3356:             # Otherwise fall back to the slower, general purpose way.
3357:             else:
3358:                 current_mask.flat = mask
3359:         # Reshape if needed
3360:         if current_mask.shape:
3361:             current_mask.shape = self.shape
3362:         return
3363: 
3364:     _set_mask = __setmask__
3365: 
3366:     def _get_mask(self):
3367:         '''Return the current mask.
3368: 
3369:         '''
3370:         # We could try to force a reshape, but that wouldn't work in some
3371:         # cases.
3372:         return self._mask
3373: 
3374:     mask = property(fget=_get_mask, fset=__setmask__, doc="Mask")
3375: 
3376:     def _get_recordmask(self):
3377:         '''
3378:         Return the mask of the records.
3379: 
3380:         A record is masked when all the fields are masked.
3381: 
3382:         '''
3383:         _mask = self._mask.view(ndarray)
3384:         if _mask.dtype.names is None:
3385:             return _mask
3386:         return np.all(flatten_structured_array(_mask), axis=-1)
3387: 
3388:     def _set_recordmask(self):
3389:         '''
3390:         Return the mask of the records.
3391: 
3392:         A record is masked when all the fields are masked.
3393: 
3394:         '''
3395:         raise NotImplementedError("Coming soon: setting the mask per records!")
3396: 
3397:     recordmask = property(fget=_get_recordmask)
3398: 
3399:     def harden_mask(self):
3400:         '''
3401:         Force the mask to hard.
3402: 
3403:         Whether the mask of a masked array is hard or soft is determined by
3404:         its `hardmask` property. `harden_mask` sets `hardmask` to True.
3405: 
3406:         See Also
3407:         --------
3408:         hardmask
3409: 
3410:         '''
3411:         self._hardmask = True
3412:         return self
3413: 
3414:     def soften_mask(self):
3415:         '''
3416:         Force the mask to soft.
3417: 
3418:         Whether the mask of a masked array is hard or soft is determined by
3419:         its `hardmask` property. `soften_mask` sets `hardmask` to False.
3420: 
3421:         See Also
3422:         --------
3423:         hardmask
3424: 
3425:         '''
3426:         self._hardmask = False
3427:         return self
3428: 
3429:     hardmask = property(fget=lambda self: self._hardmask,
3430:                         doc="Hardness of the mask")
3431: 
3432:     def unshare_mask(self):
3433:         '''
3434:         Copy the mask and set the sharedmask flag to False.
3435: 
3436:         Whether the mask is shared between masked arrays can be seen from
3437:         the `sharedmask` property. `unshare_mask` ensures the mask is not shared.
3438:         A copy of the mask is only made if it was shared.
3439: 
3440:         See Also
3441:         --------
3442:         sharedmask
3443: 
3444:         '''
3445:         if self._sharedmask:
3446:             self._mask = self._mask.copy()
3447:             self._sharedmask = False
3448:         return self
3449: 
3450:     sharedmask = property(fget=lambda self: self._sharedmask,
3451:                           doc="Share status of the mask (read-only).")
3452: 
3453:     def shrink_mask(self):
3454:         '''
3455:         Reduce a mask to nomask when possible.
3456: 
3457:         Parameters
3458:         ----------
3459:         None
3460: 
3461:         Returns
3462:         -------
3463:         None
3464: 
3465:         Examples
3466:         --------
3467:         >>> x = np.ma.array([[1,2 ], [3, 4]], mask=[0]*4)
3468:         >>> x.mask
3469:         array([[False, False],
3470:                [False, False]], dtype=bool)
3471:         >>> x.shrink_mask()
3472:         >>> x.mask
3473:         False
3474: 
3475:         '''
3476:         m = self._mask
3477:         if m.ndim and not m.any():
3478:             self._mask = nomask
3479:         return self
3480: 
3481:     baseclass = property(fget=lambda self: self._baseclass,
3482:                          doc="Class of the underlying data (read-only).")
3483: 
3484:     def _get_data(self):
3485:         '''Return the current data, as a view of the original
3486:         underlying data.
3487: 
3488:         '''
3489:         return ndarray.view(self, self._baseclass)
3490: 
3491:     _data = property(fget=_get_data)
3492:     data = property(fget=_get_data)
3493: 
3494:     def _get_flat(self):
3495:         "Return a flat iterator."
3496:         return MaskedIterator(self)
3497: 
3498:     def _set_flat(self, value):
3499:         "Set a flattened version of self to value."
3500:         y = self.ravel()
3501:         y[:] = value
3502: 
3503:     flat = property(fget=_get_flat, fset=_set_flat,
3504:                     doc="Flat version of the array.")
3505: 
3506:     def get_fill_value(self):
3507:         '''
3508:         Return the filling value of the masked array.
3509: 
3510:         Returns
3511:         -------
3512:         fill_value : scalar
3513:             The filling value.
3514: 
3515:         Examples
3516:         --------
3517:         >>> for dt in [np.int32, np.int64, np.float64, np.complex128]:
3518:         ...     np.ma.array([0, 1], dtype=dt).get_fill_value()
3519:         ...
3520:         999999
3521:         999999
3522:         1e+20
3523:         (1e+20+0j)
3524: 
3525:         >>> x = np.ma.array([0, 1.], fill_value=-np.inf)
3526:         >>> x.get_fill_value()
3527:         -inf
3528: 
3529:         '''
3530:         if self._fill_value is None:
3531:             self._fill_value = _check_fill_value(None, self.dtype)
3532:         return self._fill_value[()]
3533: 
3534:     def set_fill_value(self, value=None):
3535:         '''
3536:         Set the filling value of the masked array.
3537: 
3538:         Parameters
3539:         ----------
3540:         value : scalar, optional
3541:             The new filling value. Default is None, in which case a default
3542:             based on the data type is used.
3543: 
3544:         See Also
3545:         --------
3546:         ma.set_fill_value : Equivalent function.
3547: 
3548:         Examples
3549:         --------
3550:         >>> x = np.ma.array([0, 1.], fill_value=-np.inf)
3551:         >>> x.fill_value
3552:         -inf
3553:         >>> x.set_fill_value(np.pi)
3554:         >>> x.fill_value
3555:         3.1415926535897931
3556: 
3557:         Reset to default:
3558: 
3559:         >>> x.set_fill_value()
3560:         >>> x.fill_value
3561:         1e+20
3562: 
3563:         '''
3564:         target = _check_fill_value(value, self.dtype)
3565:         _fill_value = self._fill_value
3566:         if _fill_value is None:
3567:             # Create the attribute if it was undefined
3568:             self._fill_value = target
3569:         else:
3570:             # Don't overwrite the attribute, just fill it (for propagation)
3571:             _fill_value[()] = target
3572: 
3573:     fill_value = property(fget=get_fill_value, fset=set_fill_value,
3574:                           doc="Filling value.")
3575: 
3576:     def filled(self, fill_value=None):
3577:         '''
3578:         Return a copy of self, with masked values filled with a given value.
3579:         **However**, if there are no masked values to fill, self will be
3580:         returned instead as an ndarray.
3581: 
3582:         Parameters
3583:         ----------
3584:         fill_value : scalar, optional
3585:             The value to use for invalid entries (None by default).
3586:             If None, the `fill_value` attribute of the array is used instead.
3587: 
3588:         Returns
3589:         -------
3590:         filled_array : ndarray
3591:             A copy of ``self`` with invalid entries replaced by *fill_value*
3592:             (be it the function argument or the attribute of ``self``), or
3593:             ``self`` itself as an ndarray if there are no invalid entries to
3594:             be replaced.
3595: 
3596:         Notes
3597:         -----
3598:         The result is **not** a MaskedArray!
3599: 
3600:         Examples
3601:         --------
3602:         >>> x = np.ma.array([1,2,3,4,5], mask=[0,0,1,0,1], fill_value=-999)
3603:         >>> x.filled()
3604:         array([1, 2, -999, 4, -999])
3605:         >>> type(x.filled())
3606:         <type 'numpy.ndarray'>
3607: 
3608:         Subclassing is preserved. This means that if the data part of the masked
3609:         array is a matrix, `filled` returns a matrix:
3610: 
3611:         >>> x = np.ma.array(np.matrix([[1, 2], [3, 4]]), mask=[[0, 1], [1, 0]])
3612:         >>> x.filled()
3613:         matrix([[     1, 999999],
3614:                 [999999,      4]])
3615: 
3616:         '''
3617:         m = self._mask
3618:         if m is nomask:
3619:             return self._data
3620: 
3621:         if fill_value is None:
3622:             fill_value = self.fill_value
3623:         else:
3624:             fill_value = _check_fill_value(fill_value, self.dtype)
3625: 
3626:         if self is masked_singleton:
3627:             return np.asanyarray(fill_value)
3628: 
3629:         if m.dtype.names:
3630:             result = self._data.copy('K')
3631:             _recursive_filled(result, self._mask, fill_value)
3632:         elif not m.any():
3633:             return self._data
3634:         else:
3635:             result = self._data.copy('K')
3636:             try:
3637:                 np.copyto(result, fill_value, where=m)
3638:             except (TypeError, AttributeError):
3639:                 fill_value = narray(fill_value, dtype=object)
3640:                 d = result.astype(object)
3641:                 result = np.choose(m, (d, fill_value))
3642:             except IndexError:
3643:                 # ok, if scalar
3644:                 if self._data.shape:
3645:                     raise
3646:                 elif m:
3647:                     result = np.array(fill_value, dtype=self.dtype)
3648:                 else:
3649:                     result = self._data
3650:         return result
3651: 
3652:     def compressed(self):
3653:         '''
3654:         Return all the non-masked data as a 1-D array.
3655: 
3656:         Returns
3657:         -------
3658:         data : ndarray
3659:             A new `ndarray` holding the non-masked data is returned.
3660: 
3661:         Notes
3662:         -----
3663:         The result is **not** a MaskedArray!
3664: 
3665:         Examples
3666:         --------
3667:         >>> x = np.ma.array(np.arange(5), mask=[0]*2 + [1]*3)
3668:         >>> x.compressed()
3669:         array([0, 1])
3670:         >>> type(x.compressed())
3671:         <type 'numpy.ndarray'>
3672: 
3673:         '''
3674:         data = ndarray.ravel(self._data)
3675:         if self._mask is not nomask:
3676:             data = data.compress(np.logical_not(ndarray.ravel(self._mask)))
3677:         return data
3678: 
3679:     def compress(self, condition, axis=None, out=None):
3680:         '''
3681:         Return `a` where condition is ``True``.
3682: 
3683:         If condition is a `MaskedArray`, missing values are considered
3684:         as ``False``.
3685: 
3686:         Parameters
3687:         ----------
3688:         condition : var
3689:             Boolean 1-d array selecting which entries to return. If len(condition)
3690:             is less than the size of a along the axis, then output is truncated
3691:             to length of condition array.
3692:         axis : {None, int}, optional
3693:             Axis along which the operation must be performed.
3694:         out : {None, ndarray}, optional
3695:             Alternative output array in which to place the result. It must have
3696:             the same shape as the expected output but the type will be cast if
3697:             necessary.
3698: 
3699:         Returns
3700:         -------
3701:         result : MaskedArray
3702:             A :class:`MaskedArray` object.
3703: 
3704:         Notes
3705:         -----
3706:         Please note the difference with :meth:`compressed` !
3707:         The output of :meth:`compress` has a mask, the output of
3708:         :meth:`compressed` does not.
3709: 
3710:         Examples
3711:         --------
3712:         >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)
3713:         >>> print(x)
3714:         [[1 -- 3]
3715:          [-- 5 --]
3716:          [7 -- 9]]
3717:         >>> x.compress([1, 0, 1])
3718:         masked_array(data = [1 3],
3719:               mask = [False False],
3720:               fill_value=999999)
3721: 
3722:         >>> x.compress([1, 0, 1], axis=1)
3723:         masked_array(data =
3724:          [[1 3]
3725:          [-- --]
3726:          [7 9]],
3727:               mask =
3728:          [[False False]
3729:          [ True  True]
3730:          [False False]],
3731:               fill_value=999999)
3732: 
3733:         '''
3734:         # Get the basic components
3735:         (_data, _mask) = (self._data, self._mask)
3736: 
3737:         # Force the condition to a regular ndarray and forget the missing
3738:         # values.
3739:         condition = np.array(condition, copy=False, subok=False)
3740: 
3741:         _new = _data.compress(condition, axis=axis, out=out).view(type(self))
3742:         _new._update_from(self)
3743:         if _mask is not nomask:
3744:             _new._mask = _mask.compress(condition, axis=axis)
3745:         return _new
3746: 
3747:     def __str__(self):
3748:         '''
3749:         String representation.
3750: 
3751:         '''
3752:         if masked_print_option.enabled():
3753:             f = masked_print_option
3754:             if self is masked:
3755:                 return str(f)
3756:             m = self._mask
3757:             if m is nomask:
3758:                 res = self._data
3759:             else:
3760:                 if m.shape == () and m.itemsize==len(m.dtype):
3761:                     if m.dtype.names:
3762:                         m = m.view((bool, len(m.dtype)))
3763:                         if m.any():
3764:                             return str(tuple((f if _m else _d) for _d, _m in
3765:                                              zip(self._data.tolist(), m)))
3766:                         else:
3767:                             return str(self._data)
3768:                     elif m:
3769:                         return str(f)
3770:                     else:
3771:                         return str(self._data)
3772:                 # convert to object array to make filled work
3773:                 names = self.dtype.names
3774:                 if names is None:
3775:                     data = self._data
3776:                     mask = m
3777:                     # For big arrays, to avoid a costly conversion to the
3778:                     # object dtype, extract the corners before the conversion.
3779:                     for axis in range(self.ndim):
3780:                         if data.shape[axis] > self._print_width:
3781:                             ind = self._print_width // 2
3782:                             arr = np.split(data, (ind, -ind), axis=axis)
3783:                             data = np.concatenate((arr[0], arr[2]), axis=axis)
3784:                             arr = np.split(mask, (ind, -ind), axis=axis)
3785:                             mask = np.concatenate((arr[0], arr[2]), axis=axis)
3786:                     res = data.astype("O")
3787:                     res.view(ndarray)[mask] = f
3788:                 else:
3789:                     rdtype = _recursive_make_descr(self.dtype, "O")
3790:                     res = self._data.astype(rdtype)
3791:                     _recursive_printoption(res, m, f)
3792:         else:
3793:             res = self.filled(self.fill_value)
3794:         return str(res)
3795: 
3796:     def __repr__(self):
3797:         '''
3798:         Literal string representation.
3799: 
3800:         '''
3801:         n = len(self.shape)
3802:         if self._baseclass is np.ndarray:
3803:             name = 'array'
3804:         else:
3805:             name = self._baseclass.__name__
3806: 
3807:         parameters = dict(name=name, nlen=" " * len(name),
3808:                           data=str(self), mask=str(self._mask),
3809:                           fill=str(self.fill_value), dtype=str(self.dtype))
3810:         if self.dtype.names:
3811:             if n <= 1:
3812:                 return _print_templates['short_flx'] % parameters
3813:             return _print_templates['long_flx'] % parameters
3814:         elif n <= 1:
3815:             return _print_templates['short_std'] % parameters
3816:         return _print_templates['long_std'] % parameters
3817: 
3818:     def _delegate_binop(self, other):
3819:         # This emulates the logic in
3820:         # multiarray/number.c:PyArray_GenericBinaryFunction
3821:         if (not isinstance(other, np.ndarray)
3822:                 and not hasattr(other, "__numpy_ufunc__")):
3823:             other_priority = getattr(other, "__array_priority__", -1000000)
3824:             if self.__array_priority__ < other_priority:
3825:                 return True
3826:         return False
3827: 
3828:     def __eq__(self, other):
3829:         '''
3830:         Check whether other equals self elementwise.
3831: 
3832:         '''
3833:         if self is masked:
3834:             return masked
3835:         omask = getattr(other, '_mask', nomask)
3836:         if omask is nomask:
3837:             check = self.filled(0).__eq__(other)
3838:             try:
3839:                 check = check.view(type(self))
3840:                 check._mask = self._mask
3841:             except AttributeError:
3842:                 # Dang, we have a bool instead of an array: return the bool
3843:                 return check
3844:         else:
3845:             odata = filled(other, 0)
3846:             check = self.filled(0).__eq__(odata).view(type(self))
3847:             if self._mask is nomask:
3848:                 check._mask = omask
3849:             else:
3850:                 mask = mask_or(self._mask, omask)
3851:                 if mask.dtype.names:
3852:                     if mask.size > 1:
3853:                         axis = 1
3854:                     else:
3855:                         axis = None
3856:                     try:
3857:                         mask = mask.view((bool_, len(self.dtype))).all(axis)
3858:                     except ValueError:
3859:                         mask = np.all([[f[n].all() for n in mask.dtype.names]
3860:                                        for f in mask], axis=axis)
3861:                 check._mask = mask
3862:         return check
3863: 
3864:     def __ne__(self, other):
3865:         '''
3866:         Check whether other doesn't equal self elementwise
3867: 
3868:         '''
3869:         if self is masked:
3870:             return masked
3871:         omask = getattr(other, '_mask', nomask)
3872:         if omask is nomask:
3873:             check = self.filled(0).__ne__(other)
3874:             try:
3875:                 check = check.view(type(self))
3876:                 check._mask = self._mask
3877:             except AttributeError:
3878:                 # In case check is a boolean (or a numpy.bool)
3879:                 return check
3880:         else:
3881:             odata = filled(other, 0)
3882:             check = self.filled(0).__ne__(odata).view(type(self))
3883:             if self._mask is nomask:
3884:                 check._mask = omask
3885:             else:
3886:                 mask = mask_or(self._mask, omask)
3887:                 if mask.dtype.names:
3888:                     if mask.size > 1:
3889:                         axis = 1
3890:                     else:
3891:                         axis = None
3892:                     try:
3893:                         mask = mask.view((bool_, len(self.dtype))).all(axis)
3894:                     except ValueError:
3895:                         mask = np.all([[f[n].all() for n in mask.dtype.names]
3896:                                        for f in mask], axis=axis)
3897:                 check._mask = mask
3898:         return check
3899: 
3900:     def __add__(self, other):
3901:         '''
3902:         Add self to other, and return a new masked array.
3903: 
3904:         '''
3905:         if self._delegate_binop(other):
3906:             return NotImplemented
3907:         return add(self, other)
3908: 
3909:     def __radd__(self, other):
3910:         '''
3911:         Add other to self, and return a new masked array.
3912: 
3913:         '''
3914:         # In analogy with __rsub__ and __rdiv__, use original order:
3915:         # we get here from `other + self`.
3916:         return add(other, self)
3917: 
3918:     def __sub__(self, other):
3919:         '''
3920:         Subtract other from self, and return a new masked array.
3921: 
3922:         '''
3923:         if self._delegate_binop(other):
3924:             return NotImplemented
3925:         return subtract(self, other)
3926: 
3927:     def __rsub__(self, other):
3928:         '''
3929:         Subtract self from other, and return a new masked array.
3930: 
3931:         '''
3932:         return subtract(other, self)
3933: 
3934:     def __mul__(self, other):
3935:         "Multiply self by other, and return a new masked array."
3936:         if self._delegate_binop(other):
3937:             return NotImplemented
3938:         return multiply(self, other)
3939: 
3940:     def __rmul__(self, other):
3941:         '''
3942:         Multiply other by self, and return a new masked array.
3943: 
3944:         '''
3945:         # In analogy with __rsub__ and __rdiv__, use original order:
3946:         # we get here from `other * self`.
3947:         return multiply(other, self)
3948: 
3949:     def __div__(self, other):
3950:         '''
3951:         Divide other into self, and return a new masked array.
3952: 
3953:         '''
3954:         if self._delegate_binop(other):
3955:             return NotImplemented
3956:         return divide(self, other)
3957: 
3958:     def __truediv__(self, other):
3959:         '''
3960:         Divide other into self, and return a new masked array.
3961: 
3962:         '''
3963:         if self._delegate_binop(other):
3964:             return NotImplemented
3965:         return true_divide(self, other)
3966: 
3967:     def __rtruediv__(self, other):
3968:         '''
3969:         Divide self into other, and return a new masked array.
3970: 
3971:         '''
3972:         return true_divide(other, self)
3973: 
3974:     def __floordiv__(self, other):
3975:         '''
3976:         Divide other into self, and return a new masked array.
3977: 
3978:         '''
3979:         if self._delegate_binop(other):
3980:             return NotImplemented
3981:         return floor_divide(self, other)
3982: 
3983:     def __rfloordiv__(self, other):
3984:         '''
3985:         Divide self into other, and return a new masked array.
3986: 
3987:         '''
3988:         return floor_divide(other, self)
3989: 
3990:     def __pow__(self, other):
3991:         '''
3992:         Raise self to the power other, masking the potential NaNs/Infs
3993: 
3994:         '''
3995:         if self._delegate_binop(other):
3996:             return NotImplemented
3997:         return power(self, other)
3998: 
3999:     def __rpow__(self, other):
4000:         '''
4001:         Raise other to the power self, masking the potential NaNs/Infs
4002: 
4003:         '''
4004:         return power(other, self)
4005: 
4006:     def __iadd__(self, other):
4007:         '''
4008:         Add other to self in-place.
4009: 
4010:         '''
4011:         m = getmask(other)
4012:         if self._mask is nomask:
4013:             if m is not nomask and m.any():
4014:                 self._mask = make_mask_none(self.shape, self.dtype)
4015:                 self._mask += m
4016:         else:
4017:             if m is not nomask:
4018:                 self._mask += m
4019:         self._data.__iadd__(np.where(self._mask, self.dtype.type(0),
4020:                                      getdata(other)))
4021:         return self
4022: 
4023:     def __isub__(self, other):
4024:         '''
4025:         Subtract other from self in-place.
4026: 
4027:         '''
4028:         m = getmask(other)
4029:         if self._mask is nomask:
4030:             if m is not nomask and m.any():
4031:                 self._mask = make_mask_none(self.shape, self.dtype)
4032:                 self._mask += m
4033:         elif m is not nomask:
4034:             self._mask += m
4035:         self._data.__isub__(np.where(self._mask, self.dtype.type(0),
4036:                                      getdata(other)))
4037:         return self
4038: 
4039:     def __imul__(self, other):
4040:         '''
4041:         Multiply self by other in-place.
4042: 
4043:         '''
4044:         m = getmask(other)
4045:         if self._mask is nomask:
4046:             if m is not nomask and m.any():
4047:                 self._mask = make_mask_none(self.shape, self.dtype)
4048:                 self._mask += m
4049:         elif m is not nomask:
4050:             self._mask += m
4051:         self._data.__imul__(np.where(self._mask, self.dtype.type(1),
4052:                                      getdata(other)))
4053:         return self
4054: 
4055:     def __idiv__(self, other):
4056:         '''
4057:         Divide self by other in-place.
4058: 
4059:         '''
4060:         other_data = getdata(other)
4061:         dom_mask = _DomainSafeDivide().__call__(self._data, other_data)
4062:         other_mask = getmask(other)
4063:         new_mask = mask_or(other_mask, dom_mask)
4064:         # The following 3 lines control the domain filling
4065:         if dom_mask.any():
4066:             (_, fval) = ufunc_fills[np.divide]
4067:             other_data = np.where(dom_mask, fval, other_data)
4068:         self._mask |= new_mask
4069:         self._data.__idiv__(np.where(self._mask, self.dtype.type(1),
4070:                                      other_data))
4071:         return self
4072: 
4073:     def __ifloordiv__(self, other):
4074:         '''
4075:         Floor divide self by other in-place.
4076: 
4077:         '''
4078:         other_data = getdata(other)
4079:         dom_mask = _DomainSafeDivide().__call__(self._data, other_data)
4080:         other_mask = getmask(other)
4081:         new_mask = mask_or(other_mask, dom_mask)
4082:         # The following 3 lines control the domain filling
4083:         if dom_mask.any():
4084:             (_, fval) = ufunc_fills[np.floor_divide]
4085:             other_data = np.where(dom_mask, fval, other_data)
4086:         self._mask |= new_mask
4087:         self._data.__ifloordiv__(np.where(self._mask, self.dtype.type(1),
4088:                                           other_data))
4089:         return self
4090: 
4091:     def __itruediv__(self, other):
4092:         '''
4093:         True divide self by other in-place.
4094: 
4095:         '''
4096:         other_data = getdata(other)
4097:         dom_mask = _DomainSafeDivide().__call__(self._data, other_data)
4098:         other_mask = getmask(other)
4099:         new_mask = mask_or(other_mask, dom_mask)
4100:         # The following 3 lines control the domain filling
4101:         if dom_mask.any():
4102:             (_, fval) = ufunc_fills[np.true_divide]
4103:             other_data = np.where(dom_mask, fval, other_data)
4104:         self._mask |= new_mask
4105:         self._data.__itruediv__(np.where(self._mask, self.dtype.type(1),
4106:                                          other_data))
4107:         return self
4108: 
4109:     def __ipow__(self, other):
4110:         '''
4111:         Raise self to the power other, in place.
4112: 
4113:         '''
4114:         other_data = getdata(other)
4115:         other_mask = getmask(other)
4116:         with np.errstate(divide='ignore', invalid='ignore'):
4117:             self._data.__ipow__(np.where(self._mask, self.dtype.type(1),
4118:                                          other_data))
4119:         invalid = np.logical_not(np.isfinite(self._data))
4120:         if invalid.any():
4121:             if self._mask is not nomask:
4122:                 self._mask |= invalid
4123:             else:
4124:                 self._mask = invalid
4125:             np.copyto(self._data, self.fill_value, where=invalid)
4126:         new_mask = mask_or(other_mask, invalid)
4127:         self._mask = mask_or(self._mask, new_mask)
4128:         return self
4129: 
4130:     def __float__(self):
4131:         '''
4132:         Convert to float.
4133: 
4134:         '''
4135:         if self.size > 1:
4136:             raise TypeError("Only length-1 arrays can be converted "
4137:                             "to Python scalars")
4138:         elif self._mask:
4139:             warnings.warn("Warning: converting a masked element to nan.")
4140:             return np.nan
4141:         return float(self.item())
4142: 
4143:     def __int__(self):
4144:         '''
4145:         Convert to int.
4146: 
4147:         '''
4148:         if self.size > 1:
4149:             raise TypeError("Only length-1 arrays can be converted "
4150:                             "to Python scalars")
4151:         elif self._mask:
4152:             raise MaskError('Cannot convert masked element to a Python int.')
4153:         return int(self.item())
4154: 
4155:     def get_imag(self):
4156:         '''
4157:         Return the imaginary part of the masked array.
4158: 
4159:         The returned array is a view on the imaginary part of the `MaskedArray`
4160:         whose `get_imag` method is called.
4161: 
4162:         Parameters
4163:         ----------
4164:         None
4165: 
4166:         Returns
4167:         -------
4168:         result : MaskedArray
4169:             The imaginary part of the masked array.
4170: 
4171:         See Also
4172:         --------
4173:         get_real, real, imag
4174: 
4175:         Examples
4176:         --------
4177:         >>> x = np.ma.array([1+1.j, -2j, 3.45+1.6j], mask=[False, True, False])
4178:         >>> x.get_imag()
4179:         masked_array(data = [1.0 -- 1.6],
4180:                      mask = [False  True False],
4181:                fill_value = 1e+20)
4182: 
4183:         '''
4184:         result = self._data.imag.view(type(self))
4185:         result.__setmask__(self._mask)
4186:         return result
4187: 
4188:     imag = property(fget=get_imag, doc="Imaginary part.")
4189: 
4190:     def get_real(self):
4191:         '''
4192:         Return the real part of the masked array.
4193: 
4194:         The returned array is a view on the real part of the `MaskedArray`
4195:         whose `get_real` method is called.
4196: 
4197:         Parameters
4198:         ----------
4199:         None
4200: 
4201:         Returns
4202:         -------
4203:         result : MaskedArray
4204:             The real part of the masked array.
4205: 
4206:         See Also
4207:         --------
4208:         get_imag, real, imag
4209: 
4210:         Examples
4211:         --------
4212:         >>> x = np.ma.array([1+1.j, -2j, 3.45+1.6j], mask=[False, True, False])
4213:         >>> x.get_real()
4214:         masked_array(data = [1.0 -- 3.45],
4215:                      mask = [False  True False],
4216:                fill_value = 1e+20)
4217: 
4218:         '''
4219:         result = self._data.real.view(type(self))
4220:         result.__setmask__(self._mask)
4221:         return result
4222:     real = property(fget=get_real, doc="Real part")
4223: 
4224:     def count(self, axis=None):
4225:         '''
4226:         Count the non-masked elements of the array along the given axis.
4227: 
4228:         Parameters
4229:         ----------
4230:         axis : int, optional
4231:             Axis along which to count the non-masked elements. If `axis` is
4232:             `None`, all non-masked elements are counted.
4233: 
4234:         Returns
4235:         -------
4236:         result : int or ndarray
4237:             If `axis` is `None`, an integer count is returned. When `axis` is
4238:             not `None`, an array with shape determined by the lengths of the
4239:             remaining axes, is returned.
4240: 
4241:         See Also
4242:         --------
4243:         count_masked : Count masked elements in array or along a given axis.
4244: 
4245:         Examples
4246:         --------
4247:         >>> import numpy.ma as ma
4248:         >>> a = ma.arange(6).reshape((2, 3))
4249:         >>> a[1, :] = ma.masked
4250:         >>> a
4251:         masked_array(data =
4252:          [[0 1 2]
4253:          [-- -- --]],
4254:                      mask =
4255:          [[False False False]
4256:          [ True  True  True]],
4257:                fill_value = 999999)
4258:         >>> a.count()
4259:         3
4260: 
4261:         When the `axis` keyword is specified an array of appropriate size is
4262:         returned.
4263: 
4264:         >>> a.count(axis=0)
4265:         array([1, 1, 1])
4266:         >>> a.count(axis=1)
4267:         array([3, 0])
4268: 
4269:         '''
4270:         m = self._mask
4271:         s = self.shape
4272:         if m is nomask:
4273:             if axis is None:
4274:                 return self.size
4275:             else:
4276:                 n = s[axis]
4277:                 t = list(s)
4278:                 del t[axis]
4279:                 return np.full(t, n, dtype=np.intp)
4280:         n1 = np.size(m, axis)
4281:         n2 = np.sum(m, axis=axis, dtype=np.intp)
4282:         if axis is None:
4283:             return (n1 - n2)
4284:         else:
4285:             return narray(n1 - n2)
4286: 
4287:     flatten = _arraymethod('flatten')
4288: 
4289:     def ravel(self, order='C'):
4290:         '''
4291:         Returns a 1D version of self, as a view.
4292: 
4293:         Parameters
4294:         ----------
4295:         order : {'C', 'F', 'A', 'K'}, optional
4296:             The elements of `a` are read using this index order. 'C' means to
4297:             index the elements in C-like order, with the last axis index
4298:             changing fastest, back to the first axis index changing slowest.
4299:             'F' means to index the elements in Fortran-like index order, with
4300:             the first index changing fastest, and the last index changing
4301:             slowest. Note that the 'C' and 'F' options take no account of the
4302:             memory layout of the underlying array, and only refer to the order
4303:             of axis indexing.  'A' means to read the elements in Fortran-like
4304:             index order if `m` is Fortran *contiguous* in memory, C-like order
4305:             otherwise.  'K' means to read the elements in the order they occur
4306:             in memory, except for reversing the data when strides are negative.
4307:             By default, 'C' index order is used.
4308: 
4309:         Returns
4310:         -------
4311:         MaskedArray
4312:             Output view is of shape ``(self.size,)`` (or
4313:             ``(np.ma.product(self.shape),)``).
4314: 
4315:         Examples
4316:         --------
4317:         >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)
4318:         >>> print(x)
4319:         [[1 -- 3]
4320:          [-- 5 --]
4321:          [7 -- 9]]
4322:         >>> print(x.ravel())
4323:         [1 -- 3 -- 5 -- 7 -- 9]
4324: 
4325:         '''
4326:         r = ndarray.ravel(self._data, order=order).view(type(self))
4327:         r._update_from(self)
4328:         if self._mask is not nomask:
4329:             r._mask = ndarray.ravel(self._mask, order=order).reshape(r.shape)
4330:         else:
4331:             r._mask = nomask
4332:         return r
4333: 
4334:     repeat = _arraymethod('repeat')
4335: 
4336: 
4337:     def reshape(self, *s, **kwargs):
4338:         '''
4339:         Give a new shape to the array without changing its data.
4340: 
4341:         Returns a masked array containing the same data, but with a new shape.
4342:         The result is a view on the original array; if this is not possible, a
4343:         ValueError is raised.
4344: 
4345:         Parameters
4346:         ----------
4347:         shape : int or tuple of ints
4348:             The new shape should be compatible with the original shape. If an
4349:             integer is supplied, then the result will be a 1-D array of that
4350:             length.
4351:         order : {'C', 'F'}, optional
4352:             Determines whether the array data should be viewed as in C
4353:             (row-major) or FORTRAN (column-major) order.
4354: 
4355:         Returns
4356:         -------
4357:         reshaped_array : array
4358:             A new view on the array.
4359: 
4360:         See Also
4361:         --------
4362:         reshape : Equivalent function in the masked array module.
4363:         numpy.ndarray.reshape : Equivalent method on ndarray object.
4364:         numpy.reshape : Equivalent function in the NumPy module.
4365: 
4366:         Notes
4367:         -----
4368:         The reshaping operation cannot guarantee that a copy will not be made,
4369:         to modify the shape in place, use ``a.shape = s``
4370: 
4371:         Examples
4372:         --------
4373:         >>> x = np.ma.array([[1,2],[3,4]], mask=[1,0,0,1])
4374:         >>> print(x)
4375:         [[-- 2]
4376:          [3 --]]
4377:         >>> x = x.reshape((4,1))
4378:         >>> print(x)
4379:         [[--]
4380:          [2]
4381:          [3]
4382:          [--]]
4383: 
4384:         '''
4385:         kwargs.update(order=kwargs.get('order', 'C'))
4386:         result = self._data.reshape(*s, **kwargs).view(type(self))
4387:         result._update_from(self)
4388:         mask = self._mask
4389:         if mask is not nomask:
4390:             result._mask = mask.reshape(*s, **kwargs)
4391:         return result
4392: 
4393:     def resize(self, newshape, refcheck=True, order=False):
4394:         '''
4395:         .. warning::
4396: 
4397:             This method does nothing, except raise a ValueError exception. A
4398:             masked array does not own its data and therefore cannot safely be
4399:             resized in place. Use the `numpy.ma.resize` function instead.
4400: 
4401:         This method is difficult to implement safely and may be deprecated in
4402:         future releases of NumPy.
4403: 
4404:         '''
4405:         # Note : the 'order' keyword looks broken, let's just drop it
4406:         errmsg = "A masked array does not own its data "\
4407:                  "and therefore cannot be resized.\n" \
4408:                  "Use the numpy.ma.resize function instead."
4409:         raise ValueError(errmsg)
4410: 
4411:     def put(self, indices, values, mode='raise'):
4412:         '''
4413:         Set storage-indexed locations to corresponding values.
4414: 
4415:         Sets self._data.flat[n] = values[n] for each n in indices.
4416:         If `values` is shorter than `indices` then it will repeat.
4417:         If `values` has some masked values, the initial mask is updated
4418:         in consequence, else the corresponding values are unmasked.
4419: 
4420:         Parameters
4421:         ----------
4422:         indices : 1-D array_like
4423:             Target indices, interpreted as integers.
4424:         values : array_like
4425:             Values to place in self._data copy at target indices.
4426:         mode : {'raise', 'wrap', 'clip'}, optional
4427:             Specifies how out-of-bounds indices will behave.
4428:             'raise' : raise an error.
4429:             'wrap' : wrap around.
4430:             'clip' : clip to the range.
4431: 
4432:         Notes
4433:         -----
4434:         `values` can be a scalar or length 1 array.
4435: 
4436:         Examples
4437:         --------
4438:         >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)
4439:         >>> print(x)
4440:         [[1 -- 3]
4441:          [-- 5 --]
4442:          [7 -- 9]]
4443:         >>> x.put([0,4,8],[10,20,30])
4444:         >>> print(x)
4445:         [[10 -- 3]
4446:          [-- 20 --]
4447:          [7 -- 30]]
4448: 
4449:         >>> x.put(4,999)
4450:         >>> print(x)
4451:         [[10 -- 3]
4452:          [-- 999 --]
4453:          [7 -- 30]]
4454: 
4455:         '''
4456:         # Hard mask: Get rid of the values/indices that fall on masked data
4457:         if self._hardmask and self._mask is not nomask:
4458:             mask = self._mask[indices]
4459:             indices = narray(indices, copy=False)
4460:             values = narray(values, copy=False, subok=True)
4461:             values.resize(indices.shape)
4462:             indices = indices[~mask]
4463:             values = values[~mask]
4464: 
4465:         self._data.put(indices, values, mode=mode)
4466: 
4467:         # short circut if neither self nor values are masked
4468:         if self._mask is nomask and getmask(values) is nomask:
4469:             return
4470: 
4471:         m = getmaskarray(self).copy()
4472: 
4473:         if getmask(values) is nomask:
4474:             m.put(indices, False, mode=mode)
4475:         else:
4476:             m.put(indices, values._mask, mode=mode)
4477:         m = make_mask(m, copy=False, shrink=True)
4478:         self._mask = m
4479:         return
4480: 
4481:     def ids(self):
4482:         '''
4483:         Return the addresses of the data and mask areas.
4484: 
4485:         Parameters
4486:         ----------
4487:         None
4488: 
4489:         Examples
4490:         --------
4491:         >>> x = np.ma.array([1, 2, 3], mask=[0, 1, 1])
4492:         >>> x.ids()
4493:         (166670640, 166659832)
4494: 
4495:         If the array has no mask, the address of `nomask` is returned. This address
4496:         is typically not close to the data in memory:
4497: 
4498:         >>> x = np.ma.array([1, 2, 3])
4499:         >>> x.ids()
4500:         (166691080, 3083169284L)
4501: 
4502:         '''
4503:         if self._mask is nomask:
4504:             return (self.ctypes.data, id(nomask))
4505:         return (self.ctypes.data, self._mask.ctypes.data)
4506: 
4507:     def iscontiguous(self):
4508:         '''
4509:         Return a boolean indicating whether the data is contiguous.
4510: 
4511:         Parameters
4512:         ----------
4513:         None
4514: 
4515:         Examples
4516:         --------
4517:         >>> x = np.ma.array([1, 2, 3])
4518:         >>> x.iscontiguous()
4519:         True
4520: 
4521:         `iscontiguous` returns one of the flags of the masked array:
4522: 
4523:         >>> x.flags
4524:           C_CONTIGUOUS : True
4525:           F_CONTIGUOUS : True
4526:           OWNDATA : False
4527:           WRITEABLE : True
4528:           ALIGNED : True
4529:           UPDATEIFCOPY : False
4530: 
4531:         '''
4532:         return self.flags['CONTIGUOUS']
4533: 
4534:     def all(self, axis=None, out=None):
4535:         '''
4536:         Check if all of the elements of `a` are true.
4537: 
4538:         Performs a :func:`logical_and` over the given axis and returns the result.
4539:         Masked values are considered as True during computation.
4540:         For convenience, the output array is masked where ALL the values along the
4541:         current axis are masked: if the output would have been a scalar and that
4542:         all the values are masked, then the output is `masked`.
4543: 
4544:         Parameters
4545:         ----------
4546:         axis : {None, integer}
4547:             Axis to perform the operation over.
4548:             If None, perform over flattened array.
4549:         out : {None, array}, optional
4550:             Array into which the result can be placed. Its type is preserved
4551:             and it must be of the right shape to hold the output.
4552: 
4553:         See Also
4554:         --------
4555:         all : equivalent function
4556: 
4557:         Examples
4558:         --------
4559:         >>> np.ma.array([1,2,3]).all()
4560:         True
4561:         >>> a = np.ma.array([1,2,3], mask=True)
4562:         >>> (a.all() is np.ma.masked)
4563:         True
4564: 
4565:         '''
4566:         mask = _check_mask_axis(self._mask, axis)
4567:         if out is None:
4568:             d = self.filled(True).all(axis=axis).view(type(self))
4569:             if d.ndim:
4570:                 d.__setmask__(mask)
4571:             elif mask:
4572:                 return masked
4573:             return d
4574:         self.filled(True).all(axis=axis, out=out)
4575:         if isinstance(out, MaskedArray):
4576:             if out.ndim or mask:
4577:                 out.__setmask__(mask)
4578:         return out
4579: 
4580:     def any(self, axis=None, out=None):
4581:         '''
4582:         Check if any of the elements of `a` are true.
4583: 
4584:         Performs a logical_or over the given axis and returns the result.
4585:         Masked values are considered as False during computation.
4586: 
4587:         Parameters
4588:         ----------
4589:         axis : {None, integer}
4590:             Axis to perform the operation over.
4591:             If None, perform over flattened array and return a scalar.
4592:         out : {None, array}, optional
4593:             Array into which the result can be placed. Its type is preserved
4594:             and it must be of the right shape to hold the output.
4595: 
4596:         See Also
4597:         --------
4598:         any : equivalent function
4599: 
4600:         '''
4601:         mask = _check_mask_axis(self._mask, axis)
4602:         if out is None:
4603:             d = self.filled(False).any(axis=axis).view(type(self))
4604:             if d.ndim:
4605:                 d.__setmask__(mask)
4606:             elif mask:
4607:                 d = masked
4608:             return d
4609:         self.filled(False).any(axis=axis, out=out)
4610:         if isinstance(out, MaskedArray):
4611:             if out.ndim or mask:
4612:                 out.__setmask__(mask)
4613:         return out
4614: 
4615:     def nonzero(self):
4616:         '''
4617:         Return the indices of unmasked elements that are not zero.
4618: 
4619:         Returns a tuple of arrays, one for each dimension, containing the
4620:         indices of the non-zero elements in that dimension. The corresponding
4621:         non-zero values can be obtained with::
4622: 
4623:             a[a.nonzero()]
4624: 
4625:         To group the indices by element, rather than dimension, use
4626:         instead::
4627: 
4628:             np.transpose(a.nonzero())
4629: 
4630:         The result of this is always a 2d array, with a row for each non-zero
4631:         element.
4632: 
4633:         Parameters
4634:         ----------
4635:         None
4636: 
4637:         Returns
4638:         -------
4639:         tuple_of_arrays : tuple
4640:             Indices of elements that are non-zero.
4641: 
4642:         See Also
4643:         --------
4644:         numpy.nonzero :
4645:             Function operating on ndarrays.
4646:         flatnonzero :
4647:             Return indices that are non-zero in the flattened version of the input
4648:             array.
4649:         ndarray.nonzero :
4650:             Equivalent ndarray method.
4651:         count_nonzero :
4652:             Counts the number of non-zero elements in the input array.
4653: 
4654:         Examples
4655:         --------
4656:         >>> import numpy.ma as ma
4657:         >>> x = ma.array(np.eye(3))
4658:         >>> x
4659:         masked_array(data =
4660:          [[ 1.  0.  0.]
4661:          [ 0.  1.  0.]
4662:          [ 0.  0.  1.]],
4663:               mask =
4664:          False,
4665:               fill_value=1e+20)
4666:         >>> x.nonzero()
4667:         (array([0, 1, 2]), array([0, 1, 2]))
4668: 
4669:         Masked elements are ignored.
4670: 
4671:         >>> x[1, 1] = ma.masked
4672:         >>> x
4673:         masked_array(data =
4674:          [[1.0 0.0 0.0]
4675:          [0.0 -- 0.0]
4676:          [0.0 0.0 1.0]],
4677:               mask =
4678:          [[False False False]
4679:          [False  True False]
4680:          [False False False]],
4681:               fill_value=1e+20)
4682:         >>> x.nonzero()
4683:         (array([0, 2]), array([0, 2]))
4684: 
4685:         Indices can also be grouped by element.
4686: 
4687:         >>> np.transpose(x.nonzero())
4688:         array([[0, 0],
4689:                [2, 2]])
4690: 
4691:         A common use for ``nonzero`` is to find the indices of an array, where
4692:         a condition is True.  Given an array `a`, the condition `a` > 3 is a
4693:         boolean array and since False is interpreted as 0, ma.nonzero(a > 3)
4694:         yields the indices of the `a` where the condition is true.
4695: 
4696:         >>> a = ma.array([[1,2,3],[4,5,6],[7,8,9]])
4697:         >>> a > 3
4698:         masked_array(data =
4699:          [[False False False]
4700:          [ True  True  True]
4701:          [ True  True  True]],
4702:               mask =
4703:          False,
4704:               fill_value=999999)
4705:         >>> ma.nonzero(a > 3)
4706:         (array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))
4707: 
4708:         The ``nonzero`` method of the condition array can also be called.
4709: 
4710:         >>> (a > 3).nonzero()
4711:         (array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))
4712: 
4713:         '''
4714:         return narray(self.filled(0), copy=False).nonzero()
4715: 
4716:     def trace(self, offset=0, axis1=0, axis2=1, dtype=None, out=None):
4717:         '''
4718:         (this docstring should be overwritten)
4719:         '''
4720:         #!!!: implement out + test!
4721:         m = self._mask
4722:         if m is nomask:
4723:             result = super(MaskedArray, self).trace(offset=offset, axis1=axis1,
4724:                                                     axis2=axis2, out=out)
4725:             return result.astype(dtype)
4726:         else:
4727:             D = self.diagonal(offset=offset, axis1=axis1, axis2=axis2)
4728:             return D.astype(dtype).filled(0).sum(axis=None, out=out)
4729:     trace.__doc__ = ndarray.trace.__doc__
4730: 
4731:     def dot(self, b, out=None, strict=False):
4732:         '''
4733:         a.dot(b, out=None)
4734: 
4735:         Masked dot product of two arrays. Note that `out` and `strict` are
4736:         located in different positions than in `ma.dot`. In order to
4737:         maintain compatibility with the functional version, it is
4738:         recommended that the optional arguments be treated as keyword only.
4739:         At some point that may be mandatory.
4740: 
4741:         .. versionadded:: 1.10.0
4742: 
4743:         Parameters
4744:         ----------
4745:         b : masked_array_like
4746:             Inputs array.
4747:         out : masked_array, optional
4748:             Output argument. This must have the exact kind that would be
4749:             returned if it was not used. In particular, it must have the
4750:             right type, must be C-contiguous, and its dtype must be the
4751:             dtype that would be returned for `ma.dot(a,b)`. This is a
4752:             performance feature. Therefore, if these conditions are not
4753:             met, an exception is raised, instead of attempting to be
4754:             flexible.
4755:         strict : bool, optional
4756:             Whether masked data are propagated (True) or set to 0 (False)
4757:             for the computation. Default is False.  Propagating the mask
4758:             means that if a masked value appears in a row or column, the
4759:             whole row or column is considered masked.
4760: 
4761:             .. versionadded:: 1.10.2
4762: 
4763:         See Also
4764:         --------
4765:         numpy.ma.dot : equivalent function
4766: 
4767:         '''
4768:         return dot(self, b, out=out, strict=strict)
4769: 
4770:     def sum(self, axis=None, dtype=None, out=None):
4771:         '''
4772:         Return the sum of the array elements over the given axis.
4773:         Masked elements are set to 0 internally.
4774: 
4775:         Parameters
4776:         ----------
4777:         axis : {None, -1, int}, optional
4778:             Axis along which the sum is computed. The default
4779:             (`axis` = None) is to compute over the flattened array.
4780:         dtype : {None, dtype}, optional
4781:             Determines the type of the returned array and of the accumulator
4782:             where the elements are summed. If dtype has the value None and
4783:             the type of a is an integer type of precision less than the default
4784:             platform integer, then the default platform integer precision is
4785:             used.  Otherwise, the dtype is the same as that of a.
4786:         out :  {None, ndarray}, optional
4787:             Alternative output array in which to place the result. It must
4788:             have the same shape and buffer length as the expected output
4789:             but the type will be cast if necessary.
4790: 
4791:         Returns
4792:         -------
4793:         sum_along_axis : MaskedArray or scalar
4794:             An array with the same shape as self, with the specified
4795:             axis removed.   If self is a 0-d array, or if `axis` is None, a scalar
4796:             is returned.  If an output array is specified, a reference to
4797:             `out` is returned.
4798: 
4799:         Examples
4800:         --------
4801:         >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)
4802:         >>> print(x)
4803:         [[1 -- 3]
4804:          [-- 5 --]
4805:          [7 -- 9]]
4806:         >>> print(x.sum())
4807:         25
4808:         >>> print(x.sum(axis=1))
4809:         [4 5 16]
4810:         >>> print(x.sum(axis=0))
4811:         [8 5 12]
4812:         >>> print(type(x.sum(axis=0, dtype=np.int64)[0]))
4813:         <type 'numpy.int64'>
4814: 
4815:         '''
4816:         _mask = self._mask
4817:         newmask = _check_mask_axis(_mask, axis)
4818:         # No explicit output
4819:         if out is None:
4820:             result = self.filled(0).sum(axis, dtype=dtype)
4821:             rndim = getattr(result, 'ndim', 0)
4822:             if rndim:
4823:                 result = result.view(type(self))
4824:                 result.__setmask__(newmask)
4825:             elif newmask:
4826:                 result = masked
4827:             return result
4828:         # Explicit output
4829:         result = self.filled(0).sum(axis, dtype=dtype, out=out)
4830:         if isinstance(out, MaskedArray):
4831:             outmask = getattr(out, '_mask', nomask)
4832:             if (outmask is nomask):
4833:                 outmask = out._mask = make_mask_none(out.shape)
4834:             outmask.flat = newmask
4835:         return out
4836: 
4837:     def cumsum(self, axis=None, dtype=None, out=None):
4838:         '''
4839:         Return the cumulative sum of the elements along the given axis.
4840:         The cumulative sum is calculated over the flattened array by
4841:         default, otherwise over the specified axis.
4842: 
4843:         Masked values are set to 0 internally during the computation.
4844:         However, their position is saved, and the result will be masked at
4845:         the same locations.
4846: 
4847:         Parameters
4848:         ----------
4849:         axis : {None, -1, int}, optional
4850:             Axis along which the sum is computed. The default (`axis` = None) is to
4851:             compute over the flattened array. `axis` may be negative, in which case
4852:             it counts from the   last to the first axis.
4853:         dtype : {None, dtype}, optional
4854:             Type of the returned array and of the accumulator in which the
4855:             elements are summed.  If `dtype` is not specified, it defaults
4856:             to the dtype of `a`, unless `a` has an integer dtype with a
4857:             precision less than that of the default platform integer.  In
4858:             that case, the default platform integer is used.
4859:         out : ndarray, optional
4860:             Alternative output array in which to place the result. It must
4861:             have the same shape and buffer length as the expected output
4862:             but the type will be cast if necessary.
4863: 
4864:         Returns
4865:         -------
4866:         cumsum : ndarray.
4867:             A new array holding the result is returned unless ``out`` is
4868:             specified, in which case a reference to ``out`` is returned.
4869: 
4870:         Notes
4871:         -----
4872:         The mask is lost if `out` is not a valid :class:`MaskedArray` !
4873: 
4874:         Arithmetic is modular when using integer types, and no error is
4875:         raised on overflow.
4876: 
4877:         Examples
4878:         --------
4879:         >>> marr = np.ma.array(np.arange(10), mask=[0,0,0,1,1,1,0,0,0,0])
4880:         >>> print(marr.cumsum())
4881:         [0 1 3 -- -- -- 9 16 24 33]
4882: 
4883:         '''
4884:         result = self.filled(0).cumsum(axis=axis, dtype=dtype, out=out)
4885:         if out is not None:
4886:             if isinstance(out, MaskedArray):
4887:                 out.__setmask__(self.mask)
4888:             return out
4889:         result = result.view(type(self))
4890:         result.__setmask__(self._mask)
4891:         return result
4892: 
4893:     def prod(self, axis=None, dtype=None, out=None):
4894:         '''
4895:         Return the product of the array elements over the given axis.
4896:         Masked elements are set to 1 internally for computation.
4897: 
4898:         Parameters
4899:         ----------
4900:         axis : {None, int}, optional
4901:             Axis over which the product is taken. If None is used, then the
4902:             product is over all the array elements.
4903:         dtype : {None, dtype}, optional
4904:             Determines the type of the returned array and of the accumulator
4905:             where the elements are multiplied. If ``dtype`` has the value ``None``
4906:             and the type of a is an integer type of precision less than the default
4907:             platform integer, then the default platform integer precision is
4908:             used.  Otherwise, the dtype is the same as that of a.
4909:         out : {None, array}, optional
4910:             Alternative output array in which to place the result. It must have
4911:             the same shape as the expected output but the type will be cast if
4912:             necessary.
4913: 
4914:         Returns
4915:         -------
4916:         product_along_axis : {array, scalar}, see dtype parameter above.
4917:             Returns an array whose shape is the same as a with the specified
4918:             axis removed. Returns a 0d array when a is 1d or axis=None.
4919:             Returns a reference to the specified output array if specified.
4920: 
4921:         See Also
4922:         --------
4923:         prod : equivalent function
4924: 
4925:         Notes
4926:         -----
4927:         Arithmetic is modular when using integer types, and no error is raised
4928:         on overflow.
4929: 
4930:         Examples
4931:         --------
4932:         >>> np.prod([1.,2.])
4933:         2.0
4934:         >>> np.prod([1.,2.], dtype=np.int32)
4935:         2
4936:         >>> np.prod([[1.,2.],[3.,4.]])
4937:         24.0
4938:         >>> np.prod([[1.,2.],[3.,4.]], axis=1)
4939:         array([  2.,  12.])
4940: 
4941:         '''
4942:         _mask = self._mask
4943:         newmask = _check_mask_axis(_mask, axis)
4944:         # No explicit output
4945:         if out is None:
4946:             result = self.filled(1).prod(axis, dtype=dtype)
4947:             rndim = getattr(result, 'ndim', 0)
4948:             if rndim:
4949:                 result = result.view(type(self))
4950:                 result.__setmask__(newmask)
4951:             elif newmask:
4952:                 result = masked
4953:             return result
4954:         # Explicit output
4955:         result = self.filled(1).prod(axis, dtype=dtype, out=out)
4956:         if isinstance(out, MaskedArray):
4957:             outmask = getattr(out, '_mask', nomask)
4958:             if (outmask is nomask):
4959:                 outmask = out._mask = make_mask_none(out.shape)
4960:             outmask.flat = newmask
4961:         return out
4962: 
4963:     product = prod
4964: 
4965:     def cumprod(self, axis=None, dtype=None, out=None):
4966:         '''
4967:         Return the cumulative product of the elements along the given axis.
4968:         The cumulative product is taken over the flattened array by
4969:         default, otherwise over the specified axis.
4970: 
4971:         Masked values are set to 1 internally during the computation.
4972:         However, their position is saved, and the result will be masked at
4973:         the same locations.
4974: 
4975:         Parameters
4976:         ----------
4977:         axis : {None, -1, int}, optional
4978:             Axis along which the product is computed. The default
4979:             (`axis` = None) is to compute over the flattened array.
4980:         dtype : {None, dtype}, optional
4981:             Determines the type of the returned array and of the accumulator
4982:             where the elements are multiplied. If ``dtype`` has the value ``None``
4983:             and the type of ``a`` is an integer type of precision less than the
4984:             default platform integer, then the default platform integer precision
4985:             is used.  Otherwise, the dtype is the same as that of ``a``.
4986:         out : ndarray, optional
4987:             Alternative output array in which to place the result. It must
4988:             have the same shape and buffer length as the expected output
4989:             but the type will be cast if necessary.
4990: 
4991:         Returns
4992:         -------
4993:         cumprod : ndarray
4994:             A new array holding the result is returned unless out is specified,
4995:             in which case a reference to out is returned.
4996: 
4997:         Notes
4998:         -----
4999:         The mask is lost if `out` is not a valid MaskedArray !
5000: 
5001:         Arithmetic is modular when using integer types, and no error is
5002:         raised on overflow.
5003: 
5004:         '''
5005:         result = self.filled(1).cumprod(axis=axis, dtype=dtype, out=out)
5006:         if out is not None:
5007:             if isinstance(out, MaskedArray):
5008:                 out.__setmask__(self._mask)
5009:             return out
5010:         result = result.view(type(self))
5011:         result.__setmask__(self._mask)
5012:         return result
5013: 
5014:     def mean(self, axis=None, dtype=None, out=None):
5015:         '''
5016:         Returns the average of the array elements.
5017: 
5018:         Masked entries are ignored.
5019:         The average is taken over the flattened array by default, otherwise over
5020:         the specified axis. Refer to `numpy.mean` for the full documentation.
5021: 
5022:         Parameters
5023:         ----------
5024:         a : array_like
5025:             Array containing numbers whose mean is desired. If `a` is not an
5026:             array, a conversion is attempted.
5027:         axis : int, optional
5028:             Axis along which the means are computed. The default is to compute
5029:             the mean of the flattened array.
5030:         dtype : dtype, optional
5031:             Type to use in computing the mean. For integer inputs, the default
5032:             is float64; for floating point, inputs it is the same as the input
5033:             dtype.
5034:         out : ndarray, optional
5035:             Alternative output array in which to place the result. It must have
5036:             the same shape as the expected output but the type will be cast if
5037:             necessary.
5038: 
5039:         Returns
5040:         -------
5041:         mean : ndarray, see dtype parameter above
5042:             If `out=None`, returns a new array containing the mean values,
5043:             otherwise a reference to the output array is returned.
5044: 
5045:         See Also
5046:         --------
5047:         numpy.ma.mean : Equivalent function.
5048:         numpy.mean : Equivalent function on non-masked arrays.
5049:         numpy.ma.average: Weighted average.
5050: 
5051:         Examples
5052:         --------
5053:         >>> a = np.ma.array([1,2,3], mask=[False, False, True])
5054:         >>> a
5055:         masked_array(data = [1 2 --],
5056:                      mask = [False False  True],
5057:                fill_value = 999999)
5058:         >>> a.mean()
5059:         1.5
5060: 
5061:         '''
5062:         if self._mask is nomask:
5063:             result = super(MaskedArray, self).mean(axis=axis, dtype=dtype)
5064:         else:
5065:             dsum = self.sum(axis=axis, dtype=dtype)
5066:             cnt = self.count(axis=axis)
5067:             if cnt.shape == () and (cnt == 0):
5068:                 result = masked
5069:             else:
5070:                 result = dsum * 1. / cnt
5071:         if out is not None:
5072:             out.flat = result
5073:             if isinstance(out, MaskedArray):
5074:                 outmask = getattr(out, '_mask', nomask)
5075:                 if (outmask is nomask):
5076:                     outmask = out._mask = make_mask_none(out.shape)
5077:                 outmask.flat = getattr(result, '_mask', nomask)
5078:             return out
5079:         return result
5080: 
5081:     def anom(self, axis=None, dtype=None):
5082:         '''
5083:         Compute the anomalies (deviations from the arithmetic mean)
5084:         along the given axis.
5085: 
5086:         Returns an array of anomalies, with the same shape as the input and
5087:         where the arithmetic mean is computed along the given axis.
5088: 
5089:         Parameters
5090:         ----------
5091:         axis : int, optional
5092:             Axis over which the anomalies are taken.
5093:             The default is to use the mean of the flattened array as reference.
5094:         dtype : dtype, optional
5095:             Type to use in computing the variance. For arrays of integer type
5096:              the default is float32; for arrays of float types it is the same as
5097:              the array type.
5098: 
5099:         See Also
5100:         --------
5101:         mean : Compute the mean of the array.
5102: 
5103:         Examples
5104:         --------
5105:         >>> a = np.ma.array([1,2,3])
5106:         >>> a.anom()
5107:         masked_array(data = [-1.  0.  1.],
5108:                      mask = False,
5109:                fill_value = 1e+20)
5110: 
5111:         '''
5112:         m = self.mean(axis, dtype)
5113:         if m is masked:
5114:             return m
5115: 
5116:         if not axis:
5117:             return (self - m)
5118:         else:
5119:             return (self - expand_dims(m, axis))
5120: 
5121:     def var(self, axis=None, dtype=None, out=None, ddof=0):
5122:         ""
5123:         # Easy case: nomask, business as usual
5124:         if self._mask is nomask:
5125:             return self._data.var(axis=axis, dtype=dtype, out=out, ddof=ddof)
5126:         # Some data are masked, yay!
5127:         cnt = self.count(axis=axis) - ddof
5128:         danom = self.anom(axis=axis, dtype=dtype)
5129:         if iscomplexobj(self):
5130:             danom = umath.absolute(danom) ** 2
5131:         else:
5132:             danom *= danom
5133:         dvar = divide(danom.sum(axis), cnt).view(type(self))
5134:         # Apply the mask if it's not a scalar
5135:         if dvar.ndim:
5136:             dvar._mask = mask_or(self._mask.all(axis), (cnt <= 0))
5137:             dvar._update_from(self)
5138:         elif getattr(dvar, '_mask', False):
5139:             # Make sure that masked is returned when the scalar is masked.
5140:             dvar = masked
5141:             if out is not None:
5142:                 if isinstance(out, MaskedArray):
5143:                     out.flat = 0
5144:                     out.__setmask__(True)
5145:                 elif out.dtype.kind in 'biu':
5146:                     errmsg = "Masked data information would be lost in one or "\
5147:                              "more location."
5148:                     raise MaskError(errmsg)
5149:                 else:
5150:                     out.flat = np.nan
5151:                 return out
5152:         # In case with have an explicit output
5153:         if out is not None:
5154:             # Set the data
5155:             out.flat = dvar
5156:             # Set the mask if needed
5157:             if isinstance(out, MaskedArray):
5158:                 out.__setmask__(dvar.mask)
5159:             return out
5160:         return dvar
5161:     var.__doc__ = np.var.__doc__
5162: 
5163:     def std(self, axis=None, dtype=None, out=None, ddof=0):
5164:         ""
5165:         dvar = self.var(axis=axis, dtype=dtype, out=out, ddof=ddof)
5166:         if dvar is not masked:
5167:             if out is not None:
5168:                 np.power(out, 0.5, out=out, casting='unsafe')
5169:                 return out
5170:             dvar = sqrt(dvar)
5171:         return dvar
5172:     std.__doc__ = np.std.__doc__
5173: 
5174:     def round(self, decimals=0, out=None):
5175:         '''
5176:         Return an array rounded a to the given number of decimals.
5177: 
5178:         Refer to `numpy.around` for full documentation.
5179: 
5180:         See Also
5181:         --------
5182:         numpy.around : equivalent function
5183: 
5184:         '''
5185:         result = self._data.round(decimals=decimals, out=out).view(type(self))
5186:         if result.ndim > 0:
5187:             result._mask = self._mask
5188:             result._update_from(self)
5189:         elif self._mask:
5190:             # Return masked when the scalar is masked
5191:             result = masked
5192:         # No explicit output: we're done
5193:         if out is None:
5194:             return result
5195:         if isinstance(out, MaskedArray):
5196:             out.__setmask__(self._mask)
5197:         return out
5198:     round.__doc__ = ndarray.round.__doc__
5199: 
5200:     def argsort(self, axis=None, kind='quicksort', order=None, fill_value=None):
5201:         '''
5202:         Return an ndarray of indices that sort the array along the
5203:         specified axis.  Masked values are filled beforehand to
5204:         `fill_value`.
5205: 
5206:         Parameters
5207:         ----------
5208:         axis : int, optional
5209:             Axis along which to sort.  The default is -1 (last axis).
5210:             If None, the flattened array is used.
5211:         fill_value : var, optional
5212:             Value used to fill the array before sorting.
5213:             The default is the `fill_value` attribute of the input array.
5214:         kind : {'quicksort', 'mergesort', 'heapsort'}, optional
5215:             Sorting algorithm.
5216:         order : list, optional
5217:             When `a` is an array with fields defined, this argument specifies
5218:             which fields to compare first, second, etc.  Not all fields need be
5219:             specified.
5220: 
5221:         Returns
5222:         -------
5223:         index_array : ndarray, int
5224:             Array of indices that sort `a` along the specified axis.
5225:             In other words, ``a[index_array]`` yields a sorted `a`.
5226: 
5227:         See Also
5228:         --------
5229:         sort : Describes sorting algorithms used.
5230:         lexsort : Indirect stable sort with multiple keys.
5231:         ndarray.sort : Inplace sort.
5232: 
5233:         Notes
5234:         -----
5235:         See `sort` for notes on the different sorting algorithms.
5236: 
5237:         Examples
5238:         --------
5239:         >>> a = np.ma.array([3,2,1], mask=[False, False, True])
5240:         >>> a
5241:         masked_array(data = [3 2 --],
5242:                      mask = [False False  True],
5243:                fill_value = 999999)
5244:         >>> a.argsort()
5245:         array([1, 0, 2])
5246: 
5247:         '''
5248:         if fill_value is None:
5249:             fill_value = default_fill_value(self)
5250:         d = self.filled(fill_value).view(ndarray)
5251:         return d.argsort(axis=axis, kind=kind, order=order)
5252: 
5253:     def argmin(self, axis=None, fill_value=None, out=None):
5254:         '''
5255:         Return array of indices to the minimum values along the given axis.
5256: 
5257:         Parameters
5258:         ----------
5259:         axis : {None, integer}
5260:             If None, the index is into the flattened array, otherwise along
5261:             the specified axis
5262:         fill_value : {var}, optional
5263:             Value used to fill in the masked values.  If None, the output of
5264:             minimum_fill_value(self._data) is used instead.
5265:         out : {None, array}, optional
5266:             Array into which the result can be placed. Its type is preserved
5267:             and it must be of the right shape to hold the output.
5268: 
5269:         Returns
5270:         -------
5271:         ndarray or scalar
5272:             If multi-dimension input, returns a new ndarray of indices to the
5273:             minimum values along the given axis.  Otherwise, returns a scalar
5274:             of index to the minimum values along the given axis.
5275: 
5276:         Examples
5277:         --------
5278:         >>> x = np.ma.array(arange(4), mask=[1,1,0,0])
5279:         >>> x.shape = (2,2)
5280:         >>> print(x)
5281:         [[-- --]
5282:          [2 3]]
5283:         >>> print(x.argmin(axis=0, fill_value=-1))
5284:         [0 0]
5285:         >>> print(x.argmin(axis=0, fill_value=9))
5286:         [1 1]
5287: 
5288:         '''
5289:         if fill_value is None:
5290:             fill_value = minimum_fill_value(self)
5291:         d = self.filled(fill_value).view(ndarray)
5292:         return d.argmin(axis, out=out)
5293: 
5294:     def argmax(self, axis=None, fill_value=None, out=None):
5295:         '''
5296:         Returns array of indices of the maximum values along the given axis.
5297:         Masked values are treated as if they had the value fill_value.
5298: 
5299:         Parameters
5300:         ----------
5301:         axis : {None, integer}
5302:             If None, the index is into the flattened array, otherwise along
5303:             the specified axis
5304:         fill_value : {var}, optional
5305:             Value used to fill in the masked values.  If None, the output of
5306:             maximum_fill_value(self._data) is used instead.
5307:         out : {None, array}, optional
5308:             Array into which the result can be placed. Its type is preserved
5309:             and it must be of the right shape to hold the output.
5310: 
5311:         Returns
5312:         -------
5313:         index_array : {integer_array}
5314: 
5315:         Examples
5316:         --------
5317:         >>> a = np.arange(6).reshape(2,3)
5318:         >>> a.argmax()
5319:         5
5320:         >>> a.argmax(0)
5321:         array([1, 1, 1])
5322:         >>> a.argmax(1)
5323:         array([2, 2])
5324: 
5325:         '''
5326:         if fill_value is None:
5327:             fill_value = maximum_fill_value(self._data)
5328:         d = self.filled(fill_value).view(ndarray)
5329:         return d.argmax(axis, out=out)
5330: 
5331:     def sort(self, axis=-1, kind='quicksort', order=None,
5332:              endwith=True, fill_value=None):
5333:         '''
5334:         Sort the array, in-place
5335: 
5336:         Parameters
5337:         ----------
5338:         a : array_like
5339:             Array to be sorted.
5340:         axis : int, optional
5341:             Axis along which to sort. If None, the array is flattened before
5342:             sorting. The default is -1, which sorts along the last axis.
5343:         kind : {'quicksort', 'mergesort', 'heapsort'}, optional
5344:             Sorting algorithm. Default is 'quicksort'.
5345:         order : list, optional
5346:             When `a` is a structured array, this argument specifies which fields
5347:             to compare first, second, and so on.  This list does not need to
5348:             include all of the fields.
5349:         endwith : {True, False}, optional
5350:             Whether missing values (if any) should be forced in the upper indices
5351:             (at the end of the array) (True) or lower indices (at the beginning).
5352:             When the array contains unmasked values of the largest (or smallest if
5353:             False) representable value of the datatype the ordering of these values
5354:             and the masked values is undefined.  To enforce the masked values are
5355:             at the end (beginning) in this case one must sort the mask.
5356:         fill_value : {var}, optional
5357:             Value used internally for the masked values.
5358:             If ``fill_value`` is not None, it supersedes ``endwith``.
5359: 
5360:         Returns
5361:         -------
5362:         sorted_array : ndarray
5363:             Array of the same type and shape as `a`.
5364: 
5365:         See Also
5366:         --------
5367:         ndarray.sort : Method to sort an array in-place.
5368:         argsort : Indirect sort.
5369:         lexsort : Indirect stable sort on multiple keys.
5370:         searchsorted : Find elements in a sorted array.
5371: 
5372:         Notes
5373:         -----
5374:         See ``sort`` for notes on the different sorting algorithms.
5375: 
5376:         Examples
5377:         --------
5378:         >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])
5379:         >>> # Default
5380:         >>> a.sort()
5381:         >>> print(a)
5382:         [1 3 5 -- --]
5383: 
5384:         >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])
5385:         >>> # Put missing values in the front
5386:         >>> a.sort(endwith=False)
5387:         >>> print(a)
5388:         [-- -- 1 3 5]
5389: 
5390:         >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])
5391:         >>> # fill_value takes over endwith
5392:         >>> a.sort(endwith=False, fill_value=3)
5393:         >>> print(a)
5394:         [1 -- -- 3 5]
5395: 
5396:         '''
5397:         if self._mask is nomask:
5398:             ndarray.sort(self, axis=axis, kind=kind, order=order)
5399:         else:
5400:             if self is masked:
5401:                 return self
5402:             if fill_value is None:
5403:                 if endwith:
5404:                     # nan > inf
5405:                     if np.issubdtype(self.dtype, np.floating):
5406:                         filler = np.nan
5407:                     else:
5408:                         filler = minimum_fill_value(self)
5409:                 else:
5410:                     filler = maximum_fill_value(self)
5411:             else:
5412:                 filler = fill_value
5413: 
5414:             sidx = self.filled(filler).argsort(axis=axis, kind=kind,
5415:                                                order=order)
5416:             # save meshgrid memory for 1d arrays
5417:             if self.ndim == 1:
5418:                 idx = sidx
5419:             else:
5420:                 idx = np.meshgrid(*[np.arange(x) for x in self.shape], sparse=True,
5421:                                   indexing='ij')
5422:                 idx[axis] = sidx
5423:             tmp_mask = self._mask[idx].flat
5424:             tmp_data = self._data[idx].flat
5425:             self._data.flat = tmp_data
5426:             self._mask.flat = tmp_mask
5427:         return
5428: 
5429:     def min(self, axis=None, out=None, fill_value=None):
5430:         '''
5431:         Return the minimum along a given axis.
5432: 
5433:         Parameters
5434:         ----------
5435:         axis : {None, int}, optional
5436:             Axis along which to operate.  By default, ``axis`` is None and the
5437:             flattened input is used.
5438:         out : array_like, optional
5439:             Alternative output array in which to place the result.  Must be of
5440:             the same shape and buffer length as the expected output.
5441:         fill_value : {var}, optional
5442:             Value used to fill in the masked values.
5443:             If None, use the output of `minimum_fill_value`.
5444: 
5445:         Returns
5446:         -------
5447:         amin : array_like
5448:             New array holding the result.
5449:             If ``out`` was specified, ``out`` is returned.
5450: 
5451:         See Also
5452:         --------
5453:         minimum_fill_value
5454:             Returns the minimum filling value for a given datatype.
5455: 
5456:         '''
5457:         _mask = self._mask
5458:         newmask = _check_mask_axis(_mask, axis)
5459:         if fill_value is None:
5460:             fill_value = minimum_fill_value(self)
5461:         # No explicit output
5462:         if out is None:
5463:             result = self.filled(fill_value).min(
5464:                 axis=axis, out=out).view(type(self))
5465:             if result.ndim:
5466:                 # Set the mask
5467:                 result.__setmask__(newmask)
5468:                 # Get rid of Infs
5469:                 if newmask.ndim:
5470:                     np.copyto(result, result.fill_value, where=newmask)
5471:             elif newmask:
5472:                 result = masked
5473:             return result
5474:         # Explicit output
5475:         result = self.filled(fill_value).min(axis=axis, out=out)
5476:         if isinstance(out, MaskedArray):
5477:             outmask = getattr(out, '_mask', nomask)
5478:             if (outmask is nomask):
5479:                 outmask = out._mask = make_mask_none(out.shape)
5480:             outmask.flat = newmask
5481:         else:
5482:             if out.dtype.kind in 'biu':
5483:                 errmsg = "Masked data information would be lost in one or more"\
5484:                          " location."
5485:                 raise MaskError(errmsg)
5486:             np.copyto(out, np.nan, where=newmask)
5487:         return out
5488: 
5489:     def mini(self, axis=None):
5490:         '''
5491:         Return the array minimum along the specified axis.
5492: 
5493:         Parameters
5494:         ----------
5495:         axis : int, optional
5496:             The axis along which to find the minima. Default is None, in which case
5497:             the minimum value in the whole array is returned.
5498: 
5499:         Returns
5500:         -------
5501:         min : scalar or MaskedArray
5502:             If `axis` is None, the result is a scalar. Otherwise, if `axis` is
5503:             given and the array is at least 2-D, the result is a masked array with
5504:             dimension one smaller than the array on which `mini` is called.
5505: 
5506:         Examples
5507:         --------
5508:         >>> x = np.ma.array(np.arange(6), mask=[0 ,1, 0, 0, 0 ,1]).reshape(3, 2)
5509:         >>> print(x)
5510:         [[0 --]
5511:          [2 3]
5512:          [4 --]]
5513:         >>> x.mini()
5514:         0
5515:         >>> x.mini(axis=0)
5516:         masked_array(data = [0 3],
5517:                      mask = [False False],
5518:                fill_value = 999999)
5519:         >>> print(x.mini(axis=1))
5520:         [0 2 4]
5521: 
5522:         '''
5523:         if axis is None:
5524:             return minimum(self)
5525:         else:
5526:             return minimum.reduce(self, axis)
5527: 
5528:     def max(self, axis=None, out=None, fill_value=None):
5529:         '''
5530:         Return the maximum along a given axis.
5531: 
5532:         Parameters
5533:         ----------
5534:         axis : {None, int}, optional
5535:             Axis along which to operate.  By default, ``axis`` is None and the
5536:             flattened input is used.
5537:         out : array_like, optional
5538:             Alternative output array in which to place the result.  Must
5539:             be of the same shape and buffer length as the expected output.
5540:         fill_value : {var}, optional
5541:             Value used to fill in the masked values.
5542:             If None, use the output of maximum_fill_value().
5543: 
5544:         Returns
5545:         -------
5546:         amax : array_like
5547:             New array holding the result.
5548:             If ``out`` was specified, ``out`` is returned.
5549: 
5550:         See Also
5551:         --------
5552:         maximum_fill_value
5553:             Returns the maximum filling value for a given datatype.
5554: 
5555:         '''
5556:         _mask = self._mask
5557:         newmask = _check_mask_axis(_mask, axis)
5558:         if fill_value is None:
5559:             fill_value = maximum_fill_value(self)
5560:         # No explicit output
5561:         if out is None:
5562:             result = self.filled(fill_value).max(
5563:                 axis=axis, out=out).view(type(self))
5564:             if result.ndim:
5565:                 # Set the mask
5566:                 result.__setmask__(newmask)
5567:                 # Get rid of Infs
5568:                 if newmask.ndim:
5569:                     np.copyto(result, result.fill_value, where=newmask)
5570:             elif newmask:
5571:                 result = masked
5572:             return result
5573:         # Explicit output
5574:         result = self.filled(fill_value).max(axis=axis, out=out)
5575:         if isinstance(out, MaskedArray):
5576:             outmask = getattr(out, '_mask', nomask)
5577:             if (outmask is nomask):
5578:                 outmask = out._mask = make_mask_none(out.shape)
5579:             outmask.flat = newmask
5580:         else:
5581: 
5582:             if out.dtype.kind in 'biu':
5583:                 errmsg = "Masked data information would be lost in one or more"\
5584:                          " location."
5585:                 raise MaskError(errmsg)
5586:             np.copyto(out, np.nan, where=newmask)
5587:         return out
5588: 
5589:     def ptp(self, axis=None, out=None, fill_value=None):
5590:         '''
5591:         Return (maximum - minimum) along the the given dimension
5592:         (i.e. peak-to-peak value).
5593: 
5594:         Parameters
5595:         ----------
5596:         axis : {None, int}, optional
5597:             Axis along which to find the peaks.  If None (default) the
5598:             flattened array is used.
5599:         out : {None, array_like}, optional
5600:             Alternative output array in which to place the result. It must
5601:             have the same shape and buffer length as the expected output
5602:             but the type will be cast if necessary.
5603:         fill_value : {var}, optional
5604:             Value used to fill in the masked values.
5605: 
5606:         Returns
5607:         -------
5608:         ptp : ndarray.
5609:             A new array holding the result, unless ``out`` was
5610:             specified, in which case a reference to ``out`` is returned.
5611: 
5612:         '''
5613:         if out is None:
5614:             result = self.max(axis=axis, fill_value=fill_value)
5615:             result -= self.min(axis=axis, fill_value=fill_value)
5616:             return result
5617:         out.flat = self.max(axis=axis, out=out, fill_value=fill_value)
5618:         min_value = self.min(axis=axis, fill_value=fill_value)
5619:         np.subtract(out, min_value, out=out, casting='unsafe')
5620:         return out
5621: 
5622:     def take(self, indices, axis=None, out=None, mode='raise'):
5623:         '''
5624:         '''
5625:         (_data, _mask) = (self._data, self._mask)
5626:         cls = type(self)
5627:         # Make sure the indices are not masked
5628:         maskindices = getattr(indices, '_mask', nomask)
5629:         if maskindices is not nomask:
5630:             indices = indices.filled(0)
5631:         # Get the data
5632:         if out is None:
5633:             out = _data.take(indices, axis=axis, mode=mode).view(cls)
5634:         else:
5635:             np.take(_data, indices, axis=axis, mode=mode, out=out)
5636:         # Get the mask
5637:         if isinstance(out, MaskedArray):
5638:             if _mask is nomask:
5639:                 outmask = maskindices
5640:             else:
5641:                 outmask = _mask.take(indices, axis=axis, mode=mode)
5642:                 outmask |= maskindices
5643:             out.__setmask__(outmask)
5644:         return out
5645: 
5646:     # Array methods
5647:     copy = _arraymethod('copy')
5648:     diagonal = _arraymethod('diagonal')
5649:     transpose = _arraymethod('transpose')
5650:     T = property(fget=lambda self: self.transpose())
5651:     swapaxes = _arraymethod('swapaxes')
5652:     clip = _arraymethod('clip', onmask=False)
5653:     copy = _arraymethod('copy')
5654:     squeeze = _arraymethod('squeeze')
5655: 
5656:     def tolist(self, fill_value=None):
5657:         '''
5658:         Return the data portion of the masked array as a hierarchical Python list.
5659: 
5660:         Data items are converted to the nearest compatible Python type.
5661:         Masked values are converted to `fill_value`. If `fill_value` is None,
5662:         the corresponding entries in the output list will be ``None``.
5663: 
5664:         Parameters
5665:         ----------
5666:         fill_value : scalar, optional
5667:             The value to use for invalid entries. Default is None.
5668: 
5669:         Returns
5670:         -------
5671:         result : list
5672:             The Python list representation of the masked array.
5673: 
5674:         Examples
5675:         --------
5676:         >>> x = np.ma.array([[1,2,3], [4,5,6], [7,8,9]], mask=[0] + [1,0]*4)
5677:         >>> x.tolist()
5678:         [[1, None, 3], [None, 5, None], [7, None, 9]]
5679:         >>> x.tolist(-999)
5680:         [[1, -999, 3], [-999, 5, -999], [7, -999, 9]]
5681: 
5682:         '''
5683:         _mask = self._mask
5684:         # No mask ? Just return .data.tolist ?
5685:         if _mask is nomask:
5686:             return self._data.tolist()
5687:         # Explicit fill_value: fill the array and get the list
5688:         if fill_value is not None:
5689:             return self.filled(fill_value).tolist()
5690:         # Structured array.
5691:         names = self.dtype.names
5692:         if names:
5693:             result = self._data.astype([(_, object) for _ in names])
5694:             for n in names:
5695:                 result[n][_mask[n]] = None
5696:             return result.tolist()
5697:         # Standard arrays.
5698:         if _mask is nomask:
5699:             return [None]
5700:         # Set temps to save time when dealing w/ marrays.
5701:         inishape = self.shape
5702:         result = np.array(self._data.ravel(), dtype=object)
5703:         result[_mask.ravel()] = None
5704:         result.shape = inishape
5705:         return result.tolist()
5706: 
5707:     def tostring(self, fill_value=None, order='C'):
5708:         '''
5709:         This function is a compatibility alias for tobytes. Despite its name it
5710:         returns bytes not strings.
5711:         '''
5712: 
5713:         return self.tobytes(fill_value, order='C')
5714: 
5715:     def tobytes(self, fill_value=None, order='C'):
5716:         '''
5717:         Return the array data as a string containing the raw bytes in the array.
5718: 
5719:         The array is filled with a fill value before the string conversion.
5720: 
5721:         .. versionadded:: 1.9.0
5722: 
5723:         Parameters
5724:         ----------
5725:         fill_value : scalar, optional
5726:             Value used to fill in the masked values. Deafult is None, in which
5727:             case `MaskedArray.fill_value` is used.
5728:         order : {'C','F','A'}, optional
5729:             Order of the data item in the copy. Default is 'C'.
5730: 
5731:             - 'C'   -- C order (row major).
5732:             - 'F'   -- Fortran order (column major).
5733:             - 'A'   -- Any, current order of array.
5734:             - None  -- Same as 'A'.
5735: 
5736:         See Also
5737:         --------
5738:         ndarray.tobytes
5739:         tolist, tofile
5740: 
5741:         Notes
5742:         -----
5743:         As for `ndarray.tobytes`, information about the shape, dtype, etc.,
5744:         but also about `fill_value`, will be lost.
5745: 
5746:         Examples
5747:         --------
5748:         >>> x = np.ma.array(np.array([[1, 2], [3, 4]]), mask=[[0, 1], [1, 0]])
5749:         >>> x.tobytes()
5750:         '\\x01\\x00\\x00\\x00?B\\x0f\\x00?B\\x0f\\x00\\x04\\x00\\x00\\x00'
5751: 
5752:         '''
5753:         return self.filled(fill_value).tobytes(order=order)
5754: 
5755:     def tofile(self, fid, sep="", format="%s"):
5756:         '''
5757:         Save a masked array to a file in binary format.
5758: 
5759:         .. warning::
5760:           This function is not implemented yet.
5761: 
5762:         Raises
5763:         ------
5764:         NotImplementedError
5765:             When `tofile` is called.
5766: 
5767:         '''
5768:         raise NotImplementedError("MaskedArray.tofile() not implemented yet.")
5769: 
5770:     def toflex(self):
5771:         '''
5772:         Transforms a masked array into a flexible-type array.
5773: 
5774:         The flexible type array that is returned will have two fields:
5775: 
5776:         * the ``_data`` field stores the ``_data`` part of the array.
5777:         * the ``_mask`` field stores the ``_mask`` part of the array.
5778: 
5779:         Parameters
5780:         ----------
5781:         None
5782: 
5783:         Returns
5784:         -------
5785:         record : ndarray
5786:             A new flexible-type `ndarray` with two fields: the first element
5787:             containing a value, the second element containing the corresponding
5788:             mask boolean. The returned record shape matches self.shape.
5789: 
5790:         Notes
5791:         -----
5792:         A side-effect of transforming a masked array into a flexible `ndarray` is
5793:         that meta information (``fill_value``, ...) will be lost.
5794: 
5795:         Examples
5796:         --------
5797:         >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)
5798:         >>> print(x)
5799:         [[1 -- 3]
5800:          [-- 5 --]
5801:          [7 -- 9]]
5802:         >>> print(x.toflex())
5803:         [[(1, False) (2, True) (3, False)]
5804:          [(4, True) (5, False) (6, True)]
5805:          [(7, False) (8, True) (9, False)]]
5806: 
5807:         '''
5808:         # Get the basic dtype.
5809:         ddtype = self.dtype
5810:         # Make sure we have a mask
5811:         _mask = self._mask
5812:         if _mask is None:
5813:             _mask = make_mask_none(self.shape, ddtype)
5814:         # And get its dtype
5815:         mdtype = self._mask.dtype
5816: 
5817:         record = np.ndarray(shape=self.shape,
5818:                             dtype=[('_data', ddtype), ('_mask', mdtype)])
5819:         record['_data'] = self._data
5820:         record['_mask'] = self._mask
5821:         return record
5822:     torecords = toflex
5823: 
5824:     # Pickling
5825:     def __getstate__(self):
5826:         '''Return the internal state of the masked array, for pickling
5827:         purposes.
5828: 
5829:         '''
5830:         cf = 'CF'[self.flags.fnc]
5831:         state = (1,
5832:                  self.shape,
5833:                  self.dtype,
5834:                  self.flags.fnc,
5835:                  self._data.tobytes(cf),
5836:                  # self._data.tolist(),
5837:                  getmaskarray(self).tobytes(cf),
5838:                  # getmaskarray(self).tolist(),
5839:                  self._fill_value,
5840:                  )
5841:         return state
5842: 
5843:     def __setstate__(self, state):
5844:         '''Restore the internal state of the masked array, for
5845:         pickling purposes.  ``state`` is typically the output of the
5846:         ``__getstate__`` output, and is a 5-tuple:
5847: 
5848:         - class name
5849:         - a tuple giving the shape of the data
5850:         - a typecode for the data
5851:         - a binary string for the data
5852:         - a binary string for the mask.
5853: 
5854:         '''
5855:         (_, shp, typ, isf, raw, msk, flv) = state
5856:         super(MaskedArray, self).__setstate__((shp, typ, isf, raw))
5857:         self._mask.__setstate__((shp, make_mask_descr(typ), isf, msk))
5858:         self.fill_value = flv
5859: 
5860:     def __reduce__(self):
5861:         '''Return a 3-tuple for pickling a MaskedArray.
5862: 
5863:         '''
5864:         return (_mareconstruct,
5865:                 (self.__class__, self._baseclass, (0,), 'b',),
5866:                 self.__getstate__())
5867: 
5868:     def __deepcopy__(self, memo=None):
5869:         from copy import deepcopy
5870:         copied = MaskedArray.__new__(type(self), self, copy=True)
5871:         if memo is None:
5872:             memo = {}
5873:         memo[id(self)] = copied
5874:         for (k, v) in self.__dict__.items():
5875:             copied.__dict__[k] = deepcopy(v, memo)
5876:         return copied
5877: 
5878: 
5879: def _mareconstruct(subtype, baseclass, baseshape, basetype,):
5880:     '''Internal function that builds a new MaskedArray from the
5881:     information stored in a pickle.
5882: 
5883:     '''
5884:     _data = ndarray.__new__(baseclass, baseshape, basetype)
5885:     _mask = ndarray.__new__(ndarray, baseshape, make_mask_descr(basetype))
5886:     return subtype.__new__(subtype, _data, mask=_mask, dtype=basetype,)
5887: 
5888: 
5889: class mvoid(MaskedArray):
5890:     '''
5891:     Fake a 'void' object to use for masked array with structured dtypes.
5892:     '''
5893: 
5894:     def __new__(self, data, mask=nomask, dtype=None, fill_value=None,
5895:                 hardmask=False, copy=False, subok=True):
5896:         _data = np.array(data, copy=copy, subok=subok, dtype=dtype)
5897:         _data = _data.view(self)
5898:         _data._hardmask = hardmask
5899:         if mask is not nomask:
5900:             if isinstance(mask, np.void):
5901:                 _data._mask = mask
5902:             else:
5903:                 try:
5904:                     # Mask is already a 0D array
5905:                     _data._mask = np.void(mask)
5906:                 except TypeError:
5907:                     # Transform the mask to a void
5908:                     mdtype = make_mask_descr(dtype)
5909:                     _data._mask = np.array(mask, dtype=mdtype)[()]
5910:         if fill_value is not None:
5911:             _data.fill_value = fill_value
5912:         return _data
5913: 
5914:     def _get_data(self):
5915:         # Make sure that the _data part is a np.void
5916:         return self.view(ndarray)[()]
5917: 
5918:     _data = property(fget=_get_data)
5919: 
5920:     def __getitem__(self, indx):
5921:         '''
5922:         Get the index.
5923: 
5924:         '''
5925:         m = self._mask
5926:         if isinstance(m[indx], ndarray):
5927:             # Can happen when indx is a multi-dimensional field:
5928:             # A = ma.masked_array(data=[([0,1],)], mask=[([True,
5929:             #                     False],)], dtype=[("A", ">i2", (2,))])
5930:             # x = A[0]; y = x["A"]; then y.mask["A"].size==2
5931:             # and we can not say masked/unmasked.
5932:             # The result is no longer mvoid!
5933:             # See also issue #6724.
5934:             return masked_array(
5935:                 data=self._data[indx], mask=m[indx],
5936:                 fill_value=self._fill_value[indx],
5937:                 hard_mask=self._hardmask)
5938:         if m is not nomask and m[indx]:
5939:             return masked
5940:         return self._data[indx]
5941: 
5942:     def __setitem__(self, indx, value):
5943:         self._data[indx] = value
5944:         if self._hardmask:
5945:             self._mask[indx] |= getattr(value, "_mask", False)
5946:         else:
5947:             self._mask[indx] = getattr(value, "_mask", False)
5948: 
5949:     def __str__(self):
5950:         m = self._mask
5951:         if m is nomask:
5952:             return self._data.__str__()
5953:         printopt = masked_print_option
5954:         rdtype = _recursive_make_descr(self._data.dtype, "O")
5955:         res = np.array([self._data]).astype(rdtype)
5956:         _recursive_printoption(res, self._mask, printopt)
5957:         return str(res[0])
5958: 
5959:     __repr__ = __str__
5960: 
5961:     def __iter__(self):
5962:         "Defines an iterator for mvoid"
5963:         (_data, _mask) = (self._data, self._mask)
5964:         if _mask is nomask:
5965:             for d in _data:
5966:                 yield d
5967:         else:
5968:             for (d, m) in zip(_data, _mask):
5969:                 if m:
5970:                     yield masked
5971:                 else:
5972:                     yield d
5973: 
5974:     def __len__(self):
5975:         return self._data.__len__()
5976: 
5977:     def filled(self, fill_value=None):
5978:         '''
5979:         Return a copy with masked fields filled with a given value.
5980: 
5981:         Parameters
5982:         ----------
5983:         fill_value : scalar, optional
5984:             The value to use for invalid entries (None by default).
5985:             If None, the `fill_value` attribute is used instead.
5986: 
5987:         Returns
5988:         -------
5989:         filled_void
5990:             A `np.void` object
5991: 
5992:         See Also
5993:         --------
5994:         MaskedArray.filled
5995: 
5996:         '''
5997:         return asarray(self).filled(fill_value)[()]
5998: 
5999:     def tolist(self):
6000:         '''
6001:     Transforms the mvoid object into a tuple.
6002: 
6003:     Masked fields are replaced by None.
6004: 
6005:     Returns
6006:     -------
6007:     returned_tuple
6008:         Tuple of fields
6009:         '''
6010:         _mask = self._mask
6011:         if _mask is nomask:
6012:             return self._data.tolist()
6013:         result = []
6014:         for (d, m) in zip(self._data, self._mask):
6015:             if m:
6016:                 result.append(None)
6017:             else:
6018:                 # .item() makes sure we return a standard Python object
6019:                 result.append(d.item())
6020:         return tuple(result)
6021: 
6022: 
6023: ##############################################################################
6024: #                                Shortcuts                                   #
6025: ##############################################################################
6026: 
6027: 
6028: def isMaskedArray(x):
6029:     '''
6030:     Test whether input is an instance of MaskedArray.
6031: 
6032:     This function returns True if `x` is an instance of MaskedArray
6033:     and returns False otherwise.  Any object is accepted as input.
6034: 
6035:     Parameters
6036:     ----------
6037:     x : object
6038:         Object to test.
6039: 
6040:     Returns
6041:     -------
6042:     result : bool
6043:         True if `x` is a MaskedArray.
6044: 
6045:     See Also
6046:     --------
6047:     isMA : Alias to isMaskedArray.
6048:     isarray : Alias to isMaskedArray.
6049: 
6050:     Examples
6051:     --------
6052:     >>> import numpy.ma as ma
6053:     >>> a = np.eye(3, 3)
6054:     >>> a
6055:     array([[ 1.,  0.,  0.],
6056:            [ 0.,  1.,  0.],
6057:            [ 0.,  0.,  1.]])
6058:     >>> m = ma.masked_values(a, 0)
6059:     >>> m
6060:     masked_array(data =
6061:      [[1.0 -- --]
6062:      [-- 1.0 --]
6063:      [-- -- 1.0]],
6064:           mask =
6065:      [[False  True  True]
6066:      [ True False  True]
6067:      [ True  True False]],
6068:           fill_value=0.0)
6069:     >>> ma.isMaskedArray(a)
6070:     False
6071:     >>> ma.isMaskedArray(m)
6072:     True
6073:     >>> ma.isMaskedArray([0, 1, 2])
6074:     False
6075: 
6076:     '''
6077:     return isinstance(x, MaskedArray)
6078: 
6079: 
6080: isarray = isMaskedArray
6081: isMA = isMaskedArray  # backward compatibility
6082: 
6083: 
6084: class MaskedConstant(MaskedArray):
6085:     # We define the masked singleton as a float for higher precedence.
6086:     # Note that it can be tricky sometimes w/ type comparison
6087:     _data = data = np.array(0.)
6088:     _mask = mask = np.array(True)
6089:     _baseclass = ndarray
6090: 
6091:     def __new__(self):
6092:         return self._data.view(self)
6093: 
6094:     def __array_finalize__(self, obj):
6095:         return
6096: 
6097:     def __array_wrap__(self, obj):
6098:         return self
6099: 
6100:     def __str__(self):
6101:         return str(masked_print_option._display)
6102: 
6103:     def __repr__(self):
6104:         return 'masked'
6105: 
6106:     def flatten(self):
6107:         return masked_array([self._data], dtype=float, mask=[True])
6108: 
6109:     def __reduce__(self):
6110:         '''Override of MaskedArray's __reduce__.
6111:         '''
6112:         return (self.__class__, ())
6113: 
6114: 
6115: masked = masked_singleton = MaskedConstant()
6116: masked_array = MaskedArray
6117: 
6118: 
6119: def array(data, dtype=None, copy=False, order=None,
6120:           mask=nomask, fill_value=None, keep_mask=True,
6121:           hard_mask=False, shrink=True, subok=True, ndmin=0):
6122:     '''
6123:     Shortcut to MaskedArray.
6124: 
6125:     The options are in a different order for convenience and backwards
6126:     compatibility.
6127: 
6128:     '''
6129:     return MaskedArray(data, mask=mask, dtype=dtype, copy=copy,
6130:                        subok=subok, keep_mask=keep_mask,
6131:                        hard_mask=hard_mask, fill_value=fill_value,
6132:                        ndmin=ndmin, shrink=shrink, order=order)
6133: array.__doc__ = masked_array.__doc__
6134: 
6135: 
6136: def is_masked(x):
6137:     '''
6138:     Determine whether input has masked values.
6139: 
6140:     Accepts any object as input, but always returns False unless the
6141:     input is a MaskedArray containing masked values.
6142: 
6143:     Parameters
6144:     ----------
6145:     x : array_like
6146:         Array to check for masked values.
6147: 
6148:     Returns
6149:     -------
6150:     result : bool
6151:         True if `x` is a MaskedArray with masked values, False otherwise.
6152: 
6153:     Examples
6154:     --------
6155:     >>> import numpy.ma as ma
6156:     >>> x = ma.masked_equal([0, 1, 0, 2, 3], 0)
6157:     >>> x
6158:     masked_array(data = [-- 1 -- 2 3],
6159:           mask = [ True False  True False False],
6160:           fill_value=999999)
6161:     >>> ma.is_masked(x)
6162:     True
6163:     >>> x = ma.masked_equal([0, 1, 0, 2, 3], 42)
6164:     >>> x
6165:     masked_array(data = [0 1 0 2 3],
6166:           mask = False,
6167:           fill_value=999999)
6168:     >>> ma.is_masked(x)
6169:     False
6170: 
6171:     Always returns False if `x` isn't a MaskedArray.
6172: 
6173:     >>> x = [False, True, False]
6174:     >>> ma.is_masked(x)
6175:     False
6176:     >>> x = 'a string'
6177:     >>> ma.is_masked(x)
6178:     False
6179: 
6180:     '''
6181:     m = getmask(x)
6182:     if m is nomask:
6183:         return False
6184:     elif m.any():
6185:         return True
6186:     return False
6187: 
6188: 
6189: ##############################################################################
6190: #                             Extrema functions                              #
6191: ##############################################################################
6192: 
6193: 
6194: class _extrema_operation(object):
6195:     '''
6196:     Generic class for maximum/minimum functions.
6197: 
6198:     .. note::
6199:       This is the base class for `_maximum_operation` and
6200:       `_minimum_operation`.
6201: 
6202:     '''
6203: 
6204:     def __call__(self, a, b=None):
6205:         "Executes the call behavior."
6206:         if b is None:
6207:             return self.reduce(a)
6208:         return where(self.compare(a, b), a, b)
6209: 
6210:     def reduce(self, target, axis=None):
6211:         "Reduce target along the given axis."
6212:         target = narray(target, copy=False, subok=True)
6213:         m = getmask(target)
6214:         if axis is not None:
6215:             kargs = {'axis': axis}
6216:         else:
6217:             kargs = {}
6218:             target = target.ravel()
6219:             if not (m is nomask):
6220:                 m = m.ravel()
6221:         if m is nomask:
6222:             t = self.ufunc.reduce(target, **kargs)
6223:         else:
6224:             target = target.filled(
6225:                 self.fill_value_func(target)).view(type(target))
6226:             t = self.ufunc.reduce(target, **kargs)
6227:             m = umath.logical_and.reduce(m, **kargs)
6228:             if hasattr(t, '_mask'):
6229:                 t._mask = m
6230:             elif m:
6231:                 t = masked
6232:         return t
6233: 
6234:     def outer(self, a, b):
6235:         "Return the function applied to the outer product of a and b."
6236:         ma = getmask(a)
6237:         mb = getmask(b)
6238:         if ma is nomask and mb is nomask:
6239:             m = nomask
6240:         else:
6241:             ma = getmaskarray(a)
6242:             mb = getmaskarray(b)
6243:             m = logical_or.outer(ma, mb)
6244:         result = self.ufunc.outer(filled(a), filled(b))
6245:         if not isinstance(result, MaskedArray):
6246:             result = result.view(MaskedArray)
6247:         result._mask = m
6248:         return result
6249: 
6250: 
6251: class _minimum_operation(_extrema_operation):
6252: 
6253:     "Object to calculate minima"
6254: 
6255:     def __init__(self):
6256:         '''minimum(a, b) or minimum(a)
6257: In one argument case, returns the scalar minimum.
6258:         '''
6259:         self.ufunc = umath.minimum
6260:         self.afunc = amin
6261:         self.compare = less
6262:         self.fill_value_func = minimum_fill_value
6263: 
6264: 
6265: class _maximum_operation(_extrema_operation):
6266: 
6267:     "Object to calculate maxima"
6268: 
6269:     def __init__(self):
6270:         '''maximum(a, b) or maximum(a)
6271:            In one argument case returns the scalar maximum.
6272:         '''
6273:         self.ufunc = umath.maximum
6274:         self.afunc = amax
6275:         self.compare = greater
6276:         self.fill_value_func = maximum_fill_value
6277: 
6278: 
6279: def min(obj, axis=None, out=None, fill_value=None):
6280:     try:
6281:         return obj.min(axis=axis, fill_value=fill_value, out=out)
6282:     except (AttributeError, TypeError):
6283:         # If obj doesn't have a min method or if the method doesn't accept
6284:         # a fill_value argument
6285:         return asanyarray(obj).min(axis=axis, fill_value=fill_value, out=out)
6286: min.__doc__ = MaskedArray.min.__doc__
6287: 
6288: 
6289: def max(obj, axis=None, out=None, fill_value=None):
6290:     try:
6291:         return obj.max(axis=axis, fill_value=fill_value, out=out)
6292:     except (AttributeError, TypeError):
6293:         # If obj doesn't have a max method, or if the method doesn't accept
6294:         # a fill_value argument
6295:         return asanyarray(obj).max(axis=axis, fill_value=fill_value, out=out)
6296: max.__doc__ = MaskedArray.max.__doc__
6297: 
6298: 
6299: def ptp(obj, axis=None, out=None, fill_value=None):
6300:     '''
6301:     a.ptp(axis=None) =  a.max(axis) - a.min(axis)
6302: 
6303:     '''
6304:     try:
6305:         return obj.ptp(axis, out=out, fill_value=fill_value)
6306:     except (AttributeError, TypeError):
6307:         # If obj doesn't have a ptp method or if the method doesn't accept
6308:         # a fill_value argument
6309:         return asanyarray(obj).ptp(axis=axis, fill_value=fill_value, out=out)
6310: ptp.__doc__ = MaskedArray.ptp.__doc__
6311: 
6312: 
6313: ##############################################################################
6314: #           Definition of functions from the corresponding methods           #
6315: ##############################################################################
6316: 
6317: 
6318: class _frommethod:
6319:     '''
6320:     Define functions from existing MaskedArray methods.
6321: 
6322:     Parameters
6323:     ----------
6324:     methodname : str
6325:         Name of the method to transform.
6326: 
6327:     '''
6328: 
6329:     def __init__(self, methodname, reversed=False):
6330:         self.__name__ = methodname
6331:         self.__doc__ = self.getdoc()
6332:         self.reversed = reversed
6333: 
6334:     def getdoc(self):
6335:         "Return the doc of the function (from the doc of the method)."
6336:         meth = getattr(MaskedArray, self.__name__, None) or\
6337:             getattr(np, self.__name__, None)
6338:         signature = self.__name__ + get_object_signature(meth)
6339:         if meth is not None:
6340:             doc = '''    %s\n%s''' % (
6341:                 signature, getattr(meth, '__doc__', None))
6342:             return doc
6343: 
6344:     def __call__(self, a, *args, **params):
6345:         if self.reversed:
6346:             args = list(args)
6347:             arr = args[0]
6348:             args[0] = a
6349:             a = arr
6350:         # Get the method from the array (if possible)
6351:         method_name = self.__name__
6352:         method = getattr(a, method_name, None)
6353:         if method is not None:
6354:             return method(*args, **params)
6355:         # Still here ? Then a is not a MaskedArray
6356:         method = getattr(MaskedArray, method_name, None)
6357:         if method is not None:
6358:             return method(MaskedArray(a), *args, **params)
6359:         # Still here ? OK, let's call the corresponding np function
6360:         method = getattr(np, method_name)
6361:         return method(a, *args, **params)
6362: 
6363: 
6364: all = _frommethod('all')
6365: anomalies = anom = _frommethod('anom')
6366: any = _frommethod('any')
6367: compress = _frommethod('compress', reversed=True)
6368: cumprod = _frommethod('cumprod')
6369: cumsum = _frommethod('cumsum')
6370: copy = _frommethod('copy')
6371: diagonal = _frommethod('diagonal')
6372: harden_mask = _frommethod('harden_mask')
6373: ids = _frommethod('ids')
6374: maximum = _maximum_operation()
6375: mean = _frommethod('mean')
6376: minimum = _minimum_operation()
6377: nonzero = _frommethod('nonzero')
6378: prod = _frommethod('prod')
6379: product = _frommethod('prod')
6380: ravel = _frommethod('ravel')
6381: repeat = _frommethod('repeat')
6382: shrink_mask = _frommethod('shrink_mask')
6383: soften_mask = _frommethod('soften_mask')
6384: std = _frommethod('std')
6385: sum = _frommethod('sum')
6386: swapaxes = _frommethod('swapaxes')
6387: #take = _frommethod('take')
6388: trace = _frommethod('trace')
6389: var = _frommethod('var')
6390: 
6391: 
6392: def take(a, indices, axis=None, out=None, mode='raise'):
6393:     '''
6394:     '''
6395:     a = masked_array(a)
6396:     return a.take(indices, axis=axis, out=out, mode=mode)
6397: 
6398: 
6399: def power(a, b, third=None):
6400:     '''
6401:     Returns element-wise base array raised to power from second array.
6402: 
6403:     This is the masked array version of `numpy.power`. For details see
6404:     `numpy.power`.
6405: 
6406:     See Also
6407:     --------
6408:     numpy.power
6409: 
6410:     Notes
6411:     -----
6412:     The *out* argument to `numpy.power` is not supported, `third` has to be
6413:     None.
6414: 
6415:     '''
6416:     if third is not None:
6417:         raise MaskError("3-argument power not supported.")
6418:     # Get the masks
6419:     ma = getmask(a)
6420:     mb = getmask(b)
6421:     m = mask_or(ma, mb)
6422:     # Get the rawdata
6423:     fa = getdata(a)
6424:     fb = getdata(b)
6425:     # Get the type of the result (so that we preserve subclasses)
6426:     if isinstance(a, MaskedArray):
6427:         basetype = type(a)
6428:     else:
6429:         basetype = MaskedArray
6430:     # Get the result and view it as a (subclass of) MaskedArray
6431:     with np.errstate(divide='ignore', invalid='ignore'):
6432:         result = np.where(m, fa, umath.power(fa, fb)).view(basetype)
6433:     result._update_from(a)
6434:     # Find where we're in trouble w/ NaNs and Infs
6435:     invalid = np.logical_not(np.isfinite(result.view(ndarray)))
6436:     # Add the initial mask
6437:     if m is not nomask:
6438:         if not (result.ndim):
6439:             return masked
6440:         result._mask = np.logical_or(m, invalid)
6441:     # Fix the invalid parts
6442:     if invalid.any():
6443:         if not result.ndim:
6444:             return masked
6445:         elif result._mask is nomask:
6446:             result._mask = invalid
6447:         result._data[invalid] = result.fill_value
6448:     return result
6449: 
6450: 
6451: def argsort(a, axis=None, kind='quicksort', order=None, fill_value=None):
6452:     "Function version of the eponymous method."
6453:     if fill_value is None:
6454:         fill_value = default_fill_value(a)
6455:     d = filled(a, fill_value)
6456:     if axis is None:
6457:         return d.argsort(kind=kind, order=order)
6458:     return d.argsort(axis, kind=kind, order=order)
6459: argsort.__doc__ = MaskedArray.argsort.__doc__
6460: 
6461: 
6462: def argmin(a, axis=None, fill_value=None):
6463:     "Function version of the eponymous method."
6464:     if fill_value is None:
6465:         fill_value = default_fill_value(a)
6466:     d = filled(a, fill_value)
6467:     return d.argmin(axis=axis)
6468: argmin.__doc__ = MaskedArray.argmin.__doc__
6469: 
6470: 
6471: def argmax(a, axis=None, fill_value=None):
6472:     "Function version of the eponymous method."
6473:     if fill_value is None:
6474:         fill_value = default_fill_value(a)
6475:         try:
6476:             fill_value = -fill_value
6477:         except:
6478:             pass
6479:     d = filled(a, fill_value)
6480:     return d.argmax(axis=axis)
6481: argmax.__doc__ = MaskedArray.argmax.__doc__
6482: 
6483: 
6484: def sort(a, axis=-1, kind='quicksort', order=None, endwith=True, fill_value=None):
6485:     "Function version of the eponymous method."
6486:     a = narray(a, copy=True, subok=True)
6487:     if axis is None:
6488:         a = a.flatten()
6489:         axis = 0
6490:     if fill_value is None:
6491:         if endwith:
6492:             # nan > inf
6493:             if np.issubdtype(a.dtype, np.floating):
6494:                 filler = np.nan
6495:             else:
6496:                 filler = minimum_fill_value(a)
6497:         else:
6498:             filler = maximum_fill_value(a)
6499:     else:
6500:         filler = fill_value
6501: 
6502:     sindx = filled(a, filler).argsort(axis=axis, kind=kind, order=order)
6503: 
6504:     # save meshgrid memory for 1d arrays
6505:     if a.ndim == 1:
6506:         indx = sindx
6507:     else:
6508:         indx = np.meshgrid(*[np.arange(x) for x in a.shape], sparse=True,
6509:                            indexing='ij')
6510:         indx[axis] = sindx
6511:     return a[indx]
6512: sort.__doc__ = MaskedArray.sort.__doc__
6513: 
6514: 
6515: def compressed(x):
6516:     '''
6517:     Return all the non-masked data as a 1-D array.
6518: 
6519:     This function is equivalent to calling the "compressed" method of a
6520:     `MaskedArray`, see `MaskedArray.compressed` for details.
6521: 
6522:     See Also
6523:     --------
6524:     MaskedArray.compressed
6525:         Equivalent method.
6526: 
6527:     '''
6528:     if not isinstance(x, MaskedArray):
6529:         x = asanyarray(x)
6530:     return x.compressed()
6531: 
6532: 
6533: def concatenate(arrays, axis=0):
6534:     '''
6535:     Concatenate a sequence of arrays along the given axis.
6536: 
6537:     Parameters
6538:     ----------
6539:     arrays : sequence of array_like
6540:         The arrays must have the same shape, except in the dimension
6541:         corresponding to `axis` (the first, by default).
6542:     axis : int, optional
6543:         The axis along which the arrays will be joined. Default is 0.
6544: 
6545:     Returns
6546:     -------
6547:     result : MaskedArray
6548:         The concatenated array with any masked entries preserved.
6549: 
6550:     See Also
6551:     --------
6552:     numpy.concatenate : Equivalent function in the top-level NumPy module.
6553: 
6554:     Examples
6555:     --------
6556:     >>> import numpy.ma as ma
6557:     >>> a = ma.arange(3)
6558:     >>> a[1] = ma.masked
6559:     >>> b = ma.arange(2, 5)
6560:     >>> a
6561:     masked_array(data = [0 -- 2],
6562:                  mask = [False  True False],
6563:            fill_value = 999999)
6564:     >>> b
6565:     masked_array(data = [2 3 4],
6566:                  mask = False,
6567:            fill_value = 999999)
6568:     >>> ma.concatenate([a, b])
6569:     masked_array(data = [0 -- 2 2 3 4],
6570:                  mask = [False  True False False False False],
6571:            fill_value = 999999)
6572: 
6573:     '''
6574:     d = np.concatenate([getdata(a) for a in arrays], axis)
6575:     rcls = get_masked_subclass(*arrays)
6576:     data = d.view(rcls)
6577:     # Check whether one of the arrays has a non-empty mask.
6578:     for x in arrays:
6579:         if getmask(x) is not nomask:
6580:             break
6581:     else:
6582:         return data
6583:     # OK, so we have to concatenate the masks
6584:     dm = np.concatenate([getmaskarray(a) for a in arrays], axis)
6585:     # If we decide to keep a '_shrinkmask' option, we want to check that
6586:     # all of them are True, and then check for dm.any()
6587:     if not dm.dtype.fields and not dm.any():
6588:         data._mask = nomask
6589:     else:
6590:         data._mask = dm.reshape(d.shape)
6591:     return data
6592: 
6593: 
6594: def count(a, axis=None):
6595:     if isinstance(a, MaskedArray):
6596:         return a.count(axis)
6597:     return masked_array(a, copy=False).count(axis)
6598: count.__doc__ = MaskedArray.count.__doc__
6599: 
6600: 
6601: def diag(v, k=0):
6602:     '''
6603:     Extract a diagonal or construct a diagonal array.
6604: 
6605:     This function is the equivalent of `numpy.diag` that takes masked
6606:     values into account, see `numpy.diag` for details.
6607: 
6608:     See Also
6609:     --------
6610:     numpy.diag : Equivalent function for ndarrays.
6611: 
6612:     '''
6613:     output = np.diag(v, k).view(MaskedArray)
6614:     if getmask(v) is not nomask:
6615:         output._mask = np.diag(v._mask, k)
6616:     return output
6617: 
6618: 
6619: def expand_dims(x, axis):
6620:     '''
6621:     Expand the shape of an array.
6622: 
6623:     Expands the shape of the array by including a new axis before the one
6624:     specified by the `axis` parameter. This function behaves the same as
6625:     `numpy.expand_dims` but preserves masked elements.
6626: 
6627:     See Also
6628:     --------
6629:     numpy.expand_dims : Equivalent function in top-level NumPy module.
6630: 
6631:     Examples
6632:     --------
6633:     >>> import numpy.ma as ma
6634:     >>> x = ma.array([1, 2, 4])
6635:     >>> x[1] = ma.masked
6636:     >>> x
6637:     masked_array(data = [1 -- 4],
6638:                  mask = [False  True False],
6639:            fill_value = 999999)
6640:     >>> np.expand_dims(x, axis=0)
6641:     array([[1, 2, 4]])
6642:     >>> ma.expand_dims(x, axis=0)
6643:     masked_array(data =
6644:      [[1 -- 4]],
6645:                  mask =
6646:      [[False  True False]],
6647:            fill_value = 999999)
6648: 
6649:     The same result can be achieved using slicing syntax with `np.newaxis`.
6650: 
6651:     >>> x[np.newaxis, :]
6652:     masked_array(data =
6653:      [[1 -- 4]],
6654:                  mask =
6655:      [[False  True False]],
6656:            fill_value = 999999)
6657: 
6658:     '''
6659:     result = n_expand_dims(x, axis)
6660:     if isinstance(x, MaskedArray):
6661:         new_shape = result.shape
6662:         result = x.view()
6663:         result.shape = new_shape
6664:         if result._mask is not nomask:
6665:             result._mask.shape = new_shape
6666:     return result
6667: 
6668: 
6669: def left_shift(a, n):
6670:     '''
6671:     Shift the bits of an integer to the left.
6672: 
6673:     This is the masked array version of `numpy.left_shift`, for details
6674:     see that function.
6675: 
6676:     See Also
6677:     --------
6678:     numpy.left_shift
6679: 
6680:     '''
6681:     m = getmask(a)
6682:     if m is nomask:
6683:         d = umath.left_shift(filled(a), n)
6684:         return masked_array(d)
6685:     else:
6686:         d = umath.left_shift(filled(a, 0), n)
6687:         return masked_array(d, mask=m)
6688: 
6689: 
6690: def right_shift(a, n):
6691:     '''
6692:     Shift the bits of an integer to the right.
6693: 
6694:     This is the masked array version of `numpy.right_shift`, for details
6695:     see that function.
6696: 
6697:     See Also
6698:     --------
6699:     numpy.right_shift
6700: 
6701:     '''
6702:     m = getmask(a)
6703:     if m is nomask:
6704:         d = umath.right_shift(filled(a), n)
6705:         return masked_array(d)
6706:     else:
6707:         d = umath.right_shift(filled(a, 0), n)
6708:         return masked_array(d, mask=m)
6709: 
6710: 
6711: def put(a, indices, values, mode='raise'):
6712:     '''
6713:     Set storage-indexed locations to corresponding values.
6714: 
6715:     This function is equivalent to `MaskedArray.put`, see that method
6716:     for details.
6717: 
6718:     See Also
6719:     --------
6720:     MaskedArray.put
6721: 
6722:     '''
6723:     # We can't use 'frommethod', the order of arguments is different
6724:     try:
6725:         return a.put(indices, values, mode=mode)
6726:     except AttributeError:
6727:         return narray(a, copy=False).put(indices, values, mode=mode)
6728: 
6729: 
6730: def putmask(a, mask, values):  # , mode='raise'):
6731:     '''
6732:     Changes elements of an array based on conditional and input values.
6733: 
6734:     This is the masked array version of `numpy.putmask`, for details see
6735:     `numpy.putmask`.
6736: 
6737:     See Also
6738:     --------
6739:     numpy.putmask
6740: 
6741:     Notes
6742:     -----
6743:     Using a masked array as `values` will **not** transform a `ndarray` into
6744:     a `MaskedArray`.
6745: 
6746:     '''
6747:     # We can't use 'frommethod', the order of arguments is different
6748:     if not isinstance(a, MaskedArray):
6749:         a = a.view(MaskedArray)
6750:     (valdata, valmask) = (getdata(values), getmask(values))
6751:     if getmask(a) is nomask:
6752:         if valmask is not nomask:
6753:             a._sharedmask = True
6754:             a._mask = make_mask_none(a.shape, a.dtype)
6755:             np.copyto(a._mask, valmask, where=mask)
6756:     elif a._hardmask:
6757:         if valmask is not nomask:
6758:             m = a._mask.copy()
6759:             np.copyto(m, valmask, where=mask)
6760:             a.mask |= m
6761:     else:
6762:         if valmask is nomask:
6763:             valmask = getmaskarray(values)
6764:         np.copyto(a._mask, valmask, where=mask)
6765:     np.copyto(a._data, valdata, where=mask)
6766:     return
6767: 
6768: 
6769: def transpose(a, axes=None):
6770:     '''
6771:     Permute the dimensions of an array.
6772: 
6773:     This function is exactly equivalent to `numpy.transpose`.
6774: 
6775:     See Also
6776:     --------
6777:     numpy.transpose : Equivalent function in top-level NumPy module.
6778: 
6779:     Examples
6780:     --------
6781:     >>> import numpy.ma as ma
6782:     >>> x = ma.arange(4).reshape((2,2))
6783:     >>> x[1, 1] = ma.masked
6784:     >>>> x
6785:     masked_array(data =
6786:      [[0 1]
6787:      [2 --]],
6788:                  mask =
6789:      [[False False]
6790:      [False  True]],
6791:            fill_value = 999999)
6792:     >>> ma.transpose(x)
6793:     masked_array(data =
6794:      [[0 2]
6795:      [1 --]],
6796:                  mask =
6797:      [[False False]
6798:      [False  True]],
6799:            fill_value = 999999)
6800: 
6801:     '''
6802:     # We can't use 'frommethod', as 'transpose' doesn't take keywords
6803:     try:
6804:         return a.transpose(axes)
6805:     except AttributeError:
6806:         return narray(a, copy=False).transpose(axes).view(MaskedArray)
6807: 
6808: 
6809: def reshape(a, new_shape, order='C'):
6810:     '''
6811:     Returns an array containing the same data with a new shape.
6812: 
6813:     Refer to `MaskedArray.reshape` for full documentation.
6814: 
6815:     See Also
6816:     --------
6817:     MaskedArray.reshape : equivalent function
6818: 
6819:     '''
6820:     # We can't use 'frommethod', it whine about some parameters. Dmmit.
6821:     try:
6822:         return a.reshape(new_shape, order=order)
6823:     except AttributeError:
6824:         _tmp = narray(a, copy=False).reshape(new_shape, order=order)
6825:         return _tmp.view(MaskedArray)
6826: 
6827: 
6828: def resize(x, new_shape):
6829:     '''
6830:     Return a new masked array with the specified size and shape.
6831: 
6832:     This is the masked equivalent of the `numpy.resize` function. The new
6833:     array is filled with repeated copies of `x` (in the order that the
6834:     data are stored in memory). If `x` is masked, the new array will be
6835:     masked, and the new mask will be a repetition of the old one.
6836: 
6837:     See Also
6838:     --------
6839:     numpy.resize : Equivalent function in the top level NumPy module.
6840: 
6841:     Examples
6842:     --------
6843:     >>> import numpy.ma as ma
6844:     >>> a = ma.array([[1, 2] ,[3, 4]])
6845:     >>> a[0, 1] = ma.masked
6846:     >>> a
6847:     masked_array(data =
6848:      [[1 --]
6849:      [3 4]],
6850:                  mask =
6851:      [[False  True]
6852:      [False False]],
6853:            fill_value = 999999)
6854:     >>> np.resize(a, (3, 3))
6855:     array([[1, 2, 3],
6856:            [4, 1, 2],
6857:            [3, 4, 1]])
6858:     >>> ma.resize(a, (3, 3))
6859:     masked_array(data =
6860:      [[1 -- 3]
6861:      [4 1 --]
6862:      [3 4 1]],
6863:                  mask =
6864:      [[False  True False]
6865:      [False False  True]
6866:      [False False False]],
6867:            fill_value = 999999)
6868: 
6869:     A MaskedArray is always returned, regardless of the input type.
6870: 
6871:     >>> a = np.array([[1, 2] ,[3, 4]])
6872:     >>> ma.resize(a, (3, 3))
6873:     masked_array(data =
6874:      [[1 2 3]
6875:      [4 1 2]
6876:      [3 4 1]],
6877:                  mask =
6878:      False,
6879:            fill_value = 999999)
6880: 
6881:     '''
6882:     # We can't use _frommethods here, as N.resize is notoriously whiny.
6883:     m = getmask(x)
6884:     if m is not nomask:
6885:         m = np.resize(m, new_shape)
6886:     result = np.resize(x, new_shape).view(get_masked_subclass(x))
6887:     if result.ndim:
6888:         result._mask = m
6889:     return result
6890: 
6891: 
6892: def rank(obj):
6893:     '''
6894:     maskedarray version of the numpy function.
6895: 
6896:     .. note::
6897:         Deprecated since 1.10.0
6898: 
6899:     '''
6900:     # 2015-04-12, 1.10.0
6901:     warnings.warn(
6902:         "`rank` is deprecated; use the `ndim` function instead. ",
6903:         np.VisibleDeprecationWarning)
6904:     return np.ndim(getdata(obj))
6905: 
6906: rank.__doc__ = np.rank.__doc__
6907: 
6908: 
6909: def ndim(obj):
6910:     '''
6911:     maskedarray version of the numpy function.
6912: 
6913:     '''
6914:     return np.ndim(getdata(obj))
6915: 
6916: ndim.__doc__ = np.ndim.__doc__
6917: 
6918: 
6919: def shape(obj):
6920:     "maskedarray version of the numpy function."
6921:     return np.shape(getdata(obj))
6922: shape.__doc__ = np.shape.__doc__
6923: 
6924: 
6925: def size(obj, axis=None):
6926:     "maskedarray version of the numpy function."
6927:     return np.size(getdata(obj), axis)
6928: size.__doc__ = np.size.__doc__
6929: 
6930: 
6931: ##############################################################################
6932: #                            Extra functions                                 #
6933: ##############################################################################
6934: 
6935: 
6936: def where(condition, x=_NoValue, y=_NoValue):
6937:     '''
6938:     Return a masked array with elements from x or y, depending on condition.
6939: 
6940:     Returns a masked array, shaped like condition, where the elements
6941:     are from `x` when `condition` is True, and from `y` otherwise.
6942:     If neither `x` nor `y` are given, the function returns a tuple of
6943:     indices where `condition` is True (the result of
6944:     ``condition.nonzero()``).
6945: 
6946:     Parameters
6947:     ----------
6948:     condition : array_like, bool
6949:         The condition to meet. For each True element, yield the corresponding
6950:         element from `x`, otherwise from `y`.
6951:     x, y : array_like, optional
6952:         Values from which to choose. `x` and `y` need to have the same shape
6953:         as condition, or be broadcast-able to that shape.
6954: 
6955:     Returns
6956:     -------
6957:     out : MaskedArray or tuple of ndarrays
6958:         The resulting masked array if `x` and `y` were given, otherwise
6959:         the result of ``condition.nonzero()``.
6960: 
6961:     See Also
6962:     --------
6963:     numpy.where : Equivalent function in the top-level NumPy module.
6964: 
6965:     Examples
6966:     --------
6967:     >>> x = np.ma.array(np.arange(9.).reshape(3, 3), mask=[[0, 1, 0],
6968:     ...                                                    [1, 0, 1],
6969:     ...                                                    [0, 1, 0]])
6970:     >>> print(x)
6971:     [[0.0 -- 2.0]
6972:      [-- 4.0 --]
6973:      [6.0 -- 8.0]]
6974:     >>> np.ma.where(x > 5)    # return the indices where x > 5
6975:     (array([2, 2]), array([0, 2]))
6976: 
6977:     >>> print(np.ma.where(x > 5, x, -3.1416))
6978:     [[-3.1416 -- -3.1416]
6979:      [-- -3.1416 --]
6980:      [6.0 -- 8.0]]
6981: 
6982:     '''
6983:     missing = (x is _NoValue, y is _NoValue).count(True)
6984: 
6985:     if missing == 1:
6986:         raise ValueError("Must provide both 'x' and 'y' or neither.")
6987:     if missing == 2:
6988:         return filled(condition, 0).nonzero()
6989: 
6990:     # Both x and y are provided
6991: 
6992:     # Get the condition
6993:     fc = filled(condition, 0).astype(MaskType)
6994:     notfc = np.logical_not(fc)
6995: 
6996:     # Get the data
6997:     xv = getdata(x)
6998:     yv = getdata(y)
6999:     if x is masked:
7000:         ndtype = yv.dtype
7001:     elif y is masked:
7002:         ndtype = xv.dtype
7003:     else:
7004:         ndtype = np.find_common_type([xv.dtype, yv.dtype], [])
7005: 
7006:     # Construct an empty array and fill it
7007:     d = np.empty(fc.shape, dtype=ndtype).view(MaskedArray)
7008:     np.copyto(d._data, xv.astype(ndtype), where=fc)
7009:     np.copyto(d._data, yv.astype(ndtype), where=notfc)
7010: 
7011:     # Create an empty mask and fill it
7012:     mask = np.zeros(fc.shape, dtype=MaskType)
7013:     np.copyto(mask, getmask(x), where=fc)
7014:     np.copyto(mask, getmask(y), where=notfc)
7015:     mask |= getmaskarray(condition)
7016: 
7017:     # Use d._mask instead of d.mask to avoid copies
7018:     d._mask = mask if mask.any() else nomask
7019: 
7020:     return d
7021: 
7022: 
7023: def choose(indices, choices, out=None, mode='raise'):
7024:     '''
7025:     Use an index array to construct a new array from a set of choices.
7026: 
7027:     Given an array of integers and a set of n choice arrays, this method
7028:     will create a new array that merges each of the choice arrays.  Where a
7029:     value in `a` is i, the new array will have the value that choices[i]
7030:     contains in the same place.
7031: 
7032:     Parameters
7033:     ----------
7034:     a : ndarray of ints
7035:         This array must contain integers in ``[0, n-1]``, where n is the
7036:         number of choices.
7037:     choices : sequence of arrays
7038:         Choice arrays. The index array and all of the choices should be
7039:         broadcastable to the same shape.
7040:     out : array, optional
7041:         If provided, the result will be inserted into this array. It should
7042:         be of the appropriate shape and `dtype`.
7043:     mode : {'raise', 'wrap', 'clip'}, optional
7044:         Specifies how out-of-bounds indices will behave.
7045: 
7046:         * 'raise' : raise an error
7047:         * 'wrap' : wrap around
7048:         * 'clip' : clip to the range
7049: 
7050:     Returns
7051:     -------
7052:     merged_array : array
7053: 
7054:     See Also
7055:     --------
7056:     choose : equivalent function
7057: 
7058:     Examples
7059:     --------
7060:     >>> choice = np.array([[1,1,1], [2,2,2], [3,3,3]])
7061:     >>> a = np.array([2, 1, 0])
7062:     >>> np.ma.choose(a, choice)
7063:     masked_array(data = [3 2 1],
7064:           mask = False,
7065:           fill_value=999999)
7066: 
7067:     '''
7068:     def fmask(x):
7069:         "Returns the filled array, or True if masked."
7070:         if x is masked:
7071:             return True
7072:         return filled(x)
7073: 
7074:     def nmask(x):
7075:         "Returns the mask, True if ``masked``, False if ``nomask``."
7076:         if x is masked:
7077:             return True
7078:         return getmask(x)
7079:     # Get the indices.
7080:     c = filled(indices, 0)
7081:     # Get the masks.
7082:     masks = [nmask(x) for x in choices]
7083:     data = [fmask(x) for x in choices]
7084:     # Construct the mask
7085:     outputmask = np.choose(c, masks, mode=mode)
7086:     outputmask = make_mask(mask_or(outputmask, getmask(indices)),
7087:                            copy=0, shrink=True)
7088:     # Get the choices.
7089:     d = np.choose(c, data, mode=mode, out=out).view(MaskedArray)
7090:     if out is not None:
7091:         if isinstance(out, MaskedArray):
7092:             out.__setmask__(outputmask)
7093:         return out
7094:     d.__setmask__(outputmask)
7095:     return d
7096: 
7097: 
7098: def round_(a, decimals=0, out=None):
7099:     '''
7100:     Return a copy of a, rounded to 'decimals' places.
7101: 
7102:     When 'decimals' is negative, it specifies the number of positions
7103:     to the left of the decimal point.  The real and imaginary parts of
7104:     complex numbers are rounded separately. Nothing is done if the
7105:     array is not of float type and 'decimals' is greater than or equal
7106:     to 0.
7107: 
7108:     Parameters
7109:     ----------
7110:     decimals : int
7111:         Number of decimals to round to. May be negative.
7112:     out : array_like
7113:         Existing array to use for output.
7114:         If not given, returns a default copy of a.
7115: 
7116:     Notes
7117:     -----
7118:     If out is given and does not have a mask attribute, the mask of a
7119:     is lost!
7120: 
7121:     '''
7122:     if out is None:
7123:         return np.round_(a, decimals, out)
7124:     else:
7125:         np.round_(getdata(a), decimals, out)
7126:         if hasattr(out, '_mask'):
7127:             out._mask = getmask(a)
7128:         return out
7129: round = round_
7130: 
7131: 
7132: # Needed by dot, so move here from extras.py. It will still be exported
7133: # from extras.py for compatibility.
7134: def mask_rowcols(a, axis=None):
7135:     '''
7136:     Mask rows and/or columns of a 2D array that contain masked values.
7137: 
7138:     Mask whole rows and/or columns of a 2D array that contain
7139:     masked values.  The masking behavior is selected using the
7140:     `axis` parameter.
7141: 
7142:       - If `axis` is None, rows *and* columns are masked.
7143:       - If `axis` is 0, only rows are masked.
7144:       - If `axis` is 1 or -1, only columns are masked.
7145: 
7146:     Parameters
7147:     ----------
7148:     a : array_like, MaskedArray
7149:         The array to mask.  If not a MaskedArray instance (or if no array
7150:         elements are masked).  The result is a MaskedArray with `mask` set
7151:         to `nomask` (False). Must be a 2D array.
7152:     axis : int, optional
7153:         Axis along which to perform the operation. If None, applies to a
7154:         flattened version of the array.
7155: 
7156:     Returns
7157:     -------
7158:     a : MaskedArray
7159:         A modified version of the input array, masked depending on the value
7160:         of the `axis` parameter.
7161: 
7162:     Raises
7163:     ------
7164:     NotImplementedError
7165:         If input array `a` is not 2D.
7166: 
7167:     See Also
7168:     --------
7169:     mask_rows : Mask rows of a 2D array that contain masked values.
7170:     mask_cols : Mask cols of a 2D array that contain masked values.
7171:     masked_where : Mask where a condition is met.
7172: 
7173:     Notes
7174:     -----
7175:     The input array's mask is modified by this function.
7176: 
7177:     Examples
7178:     --------
7179:     >>> import numpy.ma as ma
7180:     >>> a = np.zeros((3, 3), dtype=np.int)
7181:     >>> a[1, 1] = 1
7182:     >>> a
7183:     array([[0, 0, 0],
7184:            [0, 1, 0],
7185:            [0, 0, 0]])
7186:     >>> a = ma.masked_equal(a, 1)
7187:     >>> a
7188:     masked_array(data =
7189:      [[0 0 0]
7190:      [0 -- 0]
7191:      [0 0 0]],
7192:           mask =
7193:      [[False False False]
7194:      [False  True False]
7195:      [False False False]],
7196:           fill_value=999999)
7197:     >>> ma.mask_rowcols(a)
7198:     masked_array(data =
7199:      [[0 -- 0]
7200:      [-- -- --]
7201:      [0 -- 0]],
7202:           mask =
7203:      [[False  True False]
7204:      [ True  True  True]
7205:      [False  True False]],
7206:           fill_value=999999)
7207: 
7208:     '''
7209:     a = array(a, subok=False)
7210:     if a.ndim != 2:
7211:         raise NotImplementedError("mask_rowcols works for 2D arrays only.")
7212:     m = getmask(a)
7213:     # Nothing is masked: return a
7214:     if m is nomask or not m.any():
7215:         return a
7216:     maskedval = m.nonzero()
7217:     a._mask = a._mask.copy()
7218:     if not axis:
7219:         a[np.unique(maskedval[0])] = masked
7220:     if axis in [None, 1, -1]:
7221:         a[:, np.unique(maskedval[1])] = masked
7222:     return a
7223: 
7224: 
7225: # Include masked dot here to avoid import problems in getting it from
7226: # extras.py. Note that it is not included in __all__, but rather exported
7227: # from extras in order to avoid backward compatibility problems.
7228: def dot(a, b, strict=False, out=None):
7229:     '''
7230:     Return the dot product of two arrays.
7231: 
7232:     This function is the equivalent of `numpy.dot` that takes masked values
7233:     into account. Note that `strict` and `out` are in different position
7234:     than in the method version. In order to maintain compatibility with the
7235:     corresponding method, it is recommended that the optional arguments be
7236:     treated as keyword only.  At some point that may be mandatory.
7237: 
7238:     .. note::
7239:       Works only with 2-D arrays at the moment.
7240: 
7241: 
7242:     Parameters
7243:     ----------
7244:     a, b : masked_array_like
7245:         Inputs arrays.
7246:     strict : bool, optional
7247:         Whether masked data are propagated (True) or set to 0 (False) for
7248:         the computation. Default is False.  Propagating the mask means that
7249:         if a masked value appears in a row or column, the whole row or
7250:         column is considered masked.
7251:     out : masked_array, optional
7252:         Output argument. This must have the exact kind that would be returned
7253:         if it was not used. In particular, it must have the right type, must be
7254:         C-contiguous, and its dtype must be the dtype that would be returned
7255:         for `dot(a,b)`. This is a performance feature. Therefore, if these
7256:         conditions are not met, an exception is raised, instead of attempting
7257:         to be flexible.
7258: 
7259:         .. versionadded:: 1.10.2
7260: 
7261:     See Also
7262:     --------
7263:     numpy.dot : Equivalent function for ndarrays.
7264: 
7265:     Examples
7266:     --------
7267:     >>> a = ma.array([[1, 2, 3], [4, 5, 6]], mask=[[1, 0, 0], [0, 0, 0]])
7268:     >>> b = ma.array([[1, 2], [3, 4], [5, 6]], mask=[[1, 0], [0, 0], [0, 0]])
7269:     >>> np.ma.dot(a, b)
7270:     masked_array(data =
7271:      [[21 26]
7272:      [45 64]],
7273:                  mask =
7274:      [[False False]
7275:      [False False]],
7276:            fill_value = 999999)
7277:     >>> np.ma.dot(a, b, strict=True)
7278:     masked_array(data =
7279:      [[-- --]
7280:      [-- 64]],
7281:                  mask =
7282:      [[ True  True]
7283:      [ True False]],
7284:            fill_value = 999999)
7285: 
7286:     '''
7287:     # !!!: Works only with 2D arrays. There should be a way to get it to run
7288:     # with higher dimension
7289:     if strict and (a.ndim == 2) and (b.ndim == 2):
7290:         a = mask_rowcols(a, 0)
7291:         b = mask_rowcols(b, 1)
7292:     am = ~getmaskarray(a)
7293:     bm = ~getmaskarray(b)
7294: 
7295:     if out is None:
7296:         d = np.dot(filled(a, 0), filled(b, 0))
7297:         m = ~np.dot(am, bm)
7298:         if d.ndim == 0:
7299:             d = np.asarray(d)
7300:         r = d.view(get_masked_subclass(a, b))
7301:         r.__setmask__(m)
7302:         return r
7303:     else:
7304:         d = np.dot(filled(a, 0), filled(b, 0), out._data)
7305:         if out.mask.shape != d.shape:
7306:             out._mask = np.empty(d.shape, MaskType)
7307:         np.dot(am, bm, out._mask)
7308:         np.logical_not(out._mask, out._mask)
7309:         return out
7310: 
7311: 
7312: def inner(a, b):
7313:     '''
7314:     Returns the inner product of a and b for arrays of floating point types.
7315: 
7316:     Like the generic NumPy equivalent the product sum is over the last dimension
7317:     of a and b.
7318: 
7319:     Notes
7320:     -----
7321:     The first argument is not conjugated.
7322: 
7323:     '''
7324:     fa = filled(a, 0)
7325:     fb = filled(b, 0)
7326:     if len(fa.shape) == 0:
7327:         fa.shape = (1,)
7328:     if len(fb.shape) == 0:
7329:         fb.shape = (1,)
7330:     return np.inner(fa, fb).view(MaskedArray)
7331: inner.__doc__ = doc_note(np.inner.__doc__,
7332:                          "Masked values are replaced by 0.")
7333: innerproduct = inner
7334: 
7335: 
7336: def outer(a, b):
7337:     "maskedarray version of the numpy function."
7338:     fa = filled(a, 0).ravel()
7339:     fb = filled(b, 0).ravel()
7340:     d = np.outer(fa, fb)
7341:     ma = getmask(a)
7342:     mb = getmask(b)
7343:     if ma is nomask and mb is nomask:
7344:         return masked_array(d)
7345:     ma = getmaskarray(a)
7346:     mb = getmaskarray(b)
7347:     m = make_mask(1 - np.outer(1 - ma, 1 - mb), copy=0)
7348:     return masked_array(d, mask=m)
7349: outer.__doc__ = doc_note(np.outer.__doc__,
7350:                          "Masked values are replaced by 0.")
7351: outerproduct = outer
7352: 
7353: 
7354: def allequal(a, b, fill_value=True):
7355:     '''
7356:     Return True if all entries of a and b are equal, using
7357:     fill_value as a truth value where either or both are masked.
7358: 
7359:     Parameters
7360:     ----------
7361:     a, b : array_like
7362:         Input arrays to compare.
7363:     fill_value : bool, optional
7364:         Whether masked values in a or b are considered equal (True) or not
7365:         (False).
7366: 
7367:     Returns
7368:     -------
7369:     y : bool
7370:         Returns True if the two arrays are equal within the given
7371:         tolerance, False otherwise. If either array contains NaN,
7372:         then False is returned.
7373: 
7374:     See Also
7375:     --------
7376:     all, any
7377:     numpy.ma.allclose
7378: 
7379:     Examples
7380:     --------
7381:     >>> a = ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])
7382:     >>> a
7383:     masked_array(data = [10000000000.0 1e-07 --],
7384:           mask = [False False  True],
7385:           fill_value=1e+20)
7386: 
7387:     >>> b = array([1e10, 1e-7, -42.0])
7388:     >>> b
7389:     array([  1.00000000e+10,   1.00000000e-07,  -4.20000000e+01])
7390:     >>> ma.allequal(a, b, fill_value=False)
7391:     False
7392:     >>> ma.allequal(a, b)
7393:     True
7394: 
7395:     '''
7396:     m = mask_or(getmask(a), getmask(b))
7397:     if m is nomask:
7398:         x = getdata(a)
7399:         y = getdata(b)
7400:         d = umath.equal(x, y)
7401:         return d.all()
7402:     elif fill_value:
7403:         x = getdata(a)
7404:         y = getdata(b)
7405:         d = umath.equal(x, y)
7406:         dm = array(d, mask=m, copy=False)
7407:         return dm.filled(True).all(None)
7408:     else:
7409:         return False
7410: 
7411: 
7412: def allclose(a, b, masked_equal=True, rtol=1e-5, atol=1e-8):
7413:     '''
7414:     Returns True if two arrays are element-wise equal within a tolerance.
7415: 
7416:     This function is equivalent to `allclose` except that masked values
7417:     are treated as equal (default) or unequal, depending on the `masked_equal`
7418:     argument.
7419: 
7420:     Parameters
7421:     ----------
7422:     a, b : array_like
7423:         Input arrays to compare.
7424:     masked_equal : bool, optional
7425:         Whether masked values in `a` and `b` are considered equal (True) or not
7426:         (False). They are considered equal by default.
7427:     rtol : float, optional
7428:         Relative tolerance. The relative difference is equal to ``rtol * b``.
7429:         Default is 1e-5.
7430:     atol : float, optional
7431:         Absolute tolerance. The absolute difference is equal to `atol`.
7432:         Default is 1e-8.
7433: 
7434:     Returns
7435:     -------
7436:     y : bool
7437:         Returns True if the two arrays are equal within the given
7438:         tolerance, False otherwise. If either array contains NaN, then
7439:         False is returned.
7440: 
7441:     See Also
7442:     --------
7443:     all, any
7444:     numpy.allclose : the non-masked `allclose`.
7445: 
7446:     Notes
7447:     -----
7448:     If the following equation is element-wise True, then `allclose` returns
7449:     True::
7450: 
7451:       absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))
7452: 
7453:     Return True if all elements of `a` and `b` are equal subject to
7454:     given tolerances.
7455: 
7456:     Examples
7457:     --------
7458:     >>> a = ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])
7459:     >>> a
7460:     masked_array(data = [10000000000.0 1e-07 --],
7461:                  mask = [False False  True],
7462:            fill_value = 1e+20)
7463:     >>> b = ma.array([1e10, 1e-8, -42.0], mask=[0, 0, 1])
7464:     >>> ma.allclose(a, b)
7465:     False
7466: 
7467:     >>> a = ma.array([1e10, 1e-8, 42.0], mask=[0, 0, 1])
7468:     >>> b = ma.array([1.00001e10, 1e-9, -42.0], mask=[0, 0, 1])
7469:     >>> ma.allclose(a, b)
7470:     True
7471:     >>> ma.allclose(a, b, masked_equal=False)
7472:     False
7473: 
7474:     Masked values are not compared directly.
7475: 
7476:     >>> a = ma.array([1e10, 1e-8, 42.0], mask=[0, 0, 1])
7477:     >>> b = ma.array([1.00001e10, 1e-9, 42.0], mask=[0, 0, 1])
7478:     >>> ma.allclose(a, b)
7479:     True
7480:     >>> ma.allclose(a, b, masked_equal=False)
7481:     False
7482: 
7483:     '''
7484:     x = masked_array(a, copy=False)
7485:     y = masked_array(b, copy=False)
7486: 
7487:     # make sure y is an inexact type to avoid abs(MIN_INT); will cause
7488:     # casting of x later.
7489:     dtype = np.result_type(y, 1.)
7490:     if y.dtype != dtype:
7491:         y = masked_array(y, dtype=dtype, copy=False)
7492: 
7493:     m = mask_or(getmask(x), getmask(y))
7494:     xinf = np.isinf(masked_array(x, copy=False, mask=m)).filled(False)
7495:     # If we have some infs, they should fall at the same place.
7496:     if not np.all(xinf == filled(np.isinf(y), False)):
7497:         return False
7498:     # No infs at all
7499:     if not np.any(xinf):
7500:         d = filled(umath.less_equal(umath.absolute(x - y),
7501:                                     atol + rtol * umath.absolute(y)),
7502:                    masked_equal)
7503:         return np.all(d)
7504: 
7505:     if not np.all(filled(x[xinf] == y[xinf], masked_equal)):
7506:         return False
7507:     x = x[~xinf]
7508:     y = y[~xinf]
7509: 
7510:     d = filled(umath.less_equal(umath.absolute(x - y),
7511:                                 atol + rtol * umath.absolute(y)),
7512:                masked_equal)
7513: 
7514:     return np.all(d)
7515: 
7516: 
7517: def asarray(a, dtype=None, order=None):
7518:     '''
7519:     Convert the input to a masked array of the given data-type.
7520: 
7521:     No copy is performed if the input is already an `ndarray`. If `a` is
7522:     a subclass of `MaskedArray`, a base class `MaskedArray` is returned.
7523: 
7524:     Parameters
7525:     ----------
7526:     a : array_like
7527:         Input data, in any form that can be converted to a masked array. This
7528:         includes lists, lists of tuples, tuples, tuples of tuples, tuples
7529:         of lists, ndarrays and masked arrays.
7530:     dtype : dtype, optional
7531:         By default, the data-type is inferred from the input data.
7532:     order : {'C', 'F'}, optional
7533:         Whether to use row-major ('C') or column-major ('FORTRAN') memory
7534:         representation.  Default is 'C'.
7535: 
7536:     Returns
7537:     -------
7538:     out : MaskedArray
7539:         Masked array interpretation of `a`.
7540: 
7541:     See Also
7542:     --------
7543:     asanyarray : Similar to `asarray`, but conserves subclasses.
7544: 
7545:     Examples
7546:     --------
7547:     >>> x = np.arange(10.).reshape(2, 5)
7548:     >>> x
7549:     array([[ 0.,  1.,  2.,  3.,  4.],
7550:            [ 5.,  6.,  7.,  8.,  9.]])
7551:     >>> np.ma.asarray(x)
7552:     masked_array(data =
7553:      [[ 0.  1.  2.  3.  4.]
7554:      [ 5.  6.  7.  8.  9.]],
7555:                  mask =
7556:      False,
7557:            fill_value = 1e+20)
7558:     >>> type(np.ma.asarray(x))
7559:     <class 'numpy.ma.core.MaskedArray'>
7560: 
7561:     '''
7562:     order = order or 'C'
7563:     return masked_array(a, dtype=dtype, copy=False, keep_mask=True,
7564:                         subok=False, order=order)
7565: 
7566: 
7567: def asanyarray(a, dtype=None):
7568:     '''
7569:     Convert the input to a masked array, conserving subclasses.
7570: 
7571:     If `a` is a subclass of `MaskedArray`, its class is conserved.
7572:     No copy is performed if the input is already an `ndarray`.
7573: 
7574:     Parameters
7575:     ----------
7576:     a : array_like
7577:         Input data, in any form that can be converted to an array.
7578:     dtype : dtype, optional
7579:         By default, the data-type is inferred from the input data.
7580:     order : {'C', 'F'}, optional
7581:         Whether to use row-major ('C') or column-major ('FORTRAN') memory
7582:         representation.  Default is 'C'.
7583: 
7584:     Returns
7585:     -------
7586:     out : MaskedArray
7587:         MaskedArray interpretation of `a`.
7588: 
7589:     See Also
7590:     --------
7591:     asarray : Similar to `asanyarray`, but does not conserve subclass.
7592: 
7593:     Examples
7594:     --------
7595:     >>> x = np.arange(10.).reshape(2, 5)
7596:     >>> x
7597:     array([[ 0.,  1.,  2.,  3.,  4.],
7598:            [ 5.,  6.,  7.,  8.,  9.]])
7599:     >>> np.ma.asanyarray(x)
7600:     masked_array(data =
7601:      [[ 0.  1.  2.  3.  4.]
7602:      [ 5.  6.  7.  8.  9.]],
7603:                  mask =
7604:      False,
7605:            fill_value = 1e+20)
7606:     >>> type(np.ma.asanyarray(x))
7607:     <class 'numpy.ma.core.MaskedArray'>
7608: 
7609:     '''
7610:     return masked_array(a, dtype=dtype, copy=False, keep_mask=True, subok=True)
7611: 
7612: 
7613: ##############################################################################
7614: #                               Pickling                                     #
7615: ##############################################################################
7616: def dump(a, F):
7617:     '''
7618:     Pickle a masked array to a file.
7619: 
7620:     This is a wrapper around ``cPickle.dump``.
7621: 
7622:     Parameters
7623:     ----------
7624:     a : MaskedArray
7625:         The array to be pickled.
7626:     F : str or file-like object
7627:         The file to pickle `a` to. If a string, the full path to the file.
7628: 
7629:     '''
7630:     if not hasattr(F, 'readline'):
7631:         F = open(F, 'w')
7632:     return pickle.dump(a, F)
7633: 
7634: 
7635: def dumps(a):
7636:     '''
7637:     Return a string corresponding to the pickling of a masked array.
7638: 
7639:     This is a wrapper around ``cPickle.dumps``.
7640: 
7641:     Parameters
7642:     ----------
7643:     a : MaskedArray
7644:         The array for which the string representation of the pickle is
7645:         returned.
7646: 
7647:     '''
7648:     return pickle.dumps(a)
7649: 
7650: 
7651: def load(F):
7652:     '''
7653:     Wrapper around ``cPickle.load`` which accepts either a file-like object
7654:     or a filename.
7655: 
7656:     Parameters
7657:     ----------
7658:     F : str or file
7659:         The file or file name to load.
7660: 
7661:     See Also
7662:     --------
7663:     dump : Pickle an array
7664: 
7665:     Notes
7666:     -----
7667:     This is different from `numpy.load`, which does not use cPickle but loads
7668:     the NumPy binary .npy format.
7669: 
7670:     '''
7671:     if not hasattr(F, 'readline'):
7672:         F = open(F, 'r')
7673:     return pickle.load(F)
7674: 
7675: 
7676: def loads(strg):
7677:     '''
7678:     Load a pickle from the current string.
7679: 
7680:     The result of ``cPickle.loads(strg)`` is returned.
7681: 
7682:     Parameters
7683:     ----------
7684:     strg : str
7685:         The string to load.
7686: 
7687:     See Also
7688:     --------
7689:     dumps : Return a string corresponding to the pickling of a masked array.
7690: 
7691:     '''
7692:     return pickle.loads(strg)
7693: 
7694: 
7695: def fromfile(file, dtype=float, count=-1, sep=''):
7696:     raise NotImplementedError(
7697:         "fromfile() not yet implemented for a MaskedArray.")
7698: 
7699: 
7700: def fromflex(fxarray):
7701:     '''
7702:     Build a masked array from a suitable flexible-type array.
7703: 
7704:     The input array has to have a data-type with ``_data`` and ``_mask``
7705:     fields. This type of array is output by `MaskedArray.toflex`.
7706: 
7707:     Parameters
7708:     ----------
7709:     fxarray : ndarray
7710:         The structured input array, containing ``_data`` and ``_mask``
7711:         fields. If present, other fields are discarded.
7712: 
7713:     Returns
7714:     -------
7715:     result : MaskedArray
7716:         The constructed masked array.
7717: 
7718:     See Also
7719:     --------
7720:     MaskedArray.toflex : Build a flexible-type array from a masked array.
7721: 
7722:     Examples
7723:     --------
7724:     >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[0] + [1, 0] * 4)
7725:     >>> rec = x.toflex()
7726:     >>> rec
7727:     array([[(0, False), (1, True), (2, False)],
7728:            [(3, True), (4, False), (5, True)],
7729:            [(6, False), (7, True), (8, False)]],
7730:           dtype=[('_data', '<i4'), ('_mask', '|b1')])
7731:     >>> x2 = np.ma.fromflex(rec)
7732:     >>> x2
7733:     masked_array(data =
7734:      [[0 -- 2]
7735:      [-- 4 --]
7736:      [6 -- 8]],
7737:                  mask =
7738:      [[False  True False]
7739:      [ True False  True]
7740:      [False  True False]],
7741:            fill_value = 999999)
7742: 
7743:     Extra fields can be present in the structured array but are discarded:
7744: 
7745:     >>> dt = [('_data', '<i4'), ('_mask', '|b1'), ('field3', '<f4')]
7746:     >>> rec2 = np.zeros((2, 2), dtype=dt)
7747:     >>> rec2
7748:     array([[(0, False, 0.0), (0, False, 0.0)],
7749:            [(0, False, 0.0), (0, False, 0.0)]],
7750:           dtype=[('_data', '<i4'), ('_mask', '|b1'), ('field3', '<f4')])
7751:     >>> y = np.ma.fromflex(rec2)
7752:     >>> y
7753:     masked_array(data =
7754:      [[0 0]
7755:      [0 0]],
7756:                  mask =
7757:      [[False False]
7758:      [False False]],
7759:            fill_value = 999999)
7760: 
7761:     '''
7762:     return masked_array(fxarray['_data'], mask=fxarray['_mask'])
7763: 
7764: 
7765: class _convert2ma:
7766: 
7767:     '''
7768:     Convert functions from numpy to numpy.ma.
7769: 
7770:     Parameters
7771:     ----------
7772:         _methodname : string
7773:             Name of the method to transform.
7774: 
7775:     '''
7776:     __doc__ = None
7777: 
7778:     def __init__(self, funcname, params=None):
7779:         self._func = getattr(np, funcname)
7780:         self.__doc__ = self.getdoc()
7781:         self._extras = params or {}
7782: 
7783:     def getdoc(self):
7784:         "Return the doc of the function (from the doc of the method)."
7785:         doc = getattr(self._func, '__doc__', None)
7786:         sig = get_object_signature(self._func)
7787:         if doc:
7788:             # Add the signature of the function at the beginning of the doc
7789:             if sig:
7790:                 sig = "%s%s\n" % (self._func.__name__, sig)
7791:             doc = sig + doc
7792:         return doc
7793: 
7794:     def __call__(self, *args, **params):
7795:         # Find the common parameters to the call and the definition
7796:         _extras = self._extras
7797:         common_params = set(params).intersection(_extras)
7798:         # Drop the common parameters from the call
7799:         for p in common_params:
7800:             _extras[p] = params.pop(p)
7801:         # Get the result
7802:         result = self._func.__call__(*args, **params).view(MaskedArray)
7803:         if "fill_value" in common_params:
7804:             result.fill_value = _extras.get("fill_value", None)
7805:         if "hardmask" in common_params:
7806:             result._hardmask = bool(_extras.get("hard_mask", False))
7807:         return result
7808: 
7809: arange = _convert2ma('arange', params=dict(fill_value=None, hardmask=False))
7810: clip = np.clip
7811: diff = np.diff
7812: empty = _convert2ma('empty', params=dict(fill_value=None, hardmask=False))
7813: empty_like = _convert2ma('empty_like')
7814: frombuffer = _convert2ma('frombuffer')
7815: fromfunction = _convert2ma('fromfunction')
7816: identity = _convert2ma(
7817:     'identity', params=dict(fill_value=None, hardmask=False))
7818: indices = np.indices
7819: ones = _convert2ma('ones', params=dict(fill_value=None, hardmask=False))
7820: ones_like = np.ones_like
7821: squeeze = np.squeeze
7822: zeros = _convert2ma('zeros', params=dict(fill_value=None, hardmask=False))
7823: zeros_like = np.zeros_like
7824: 
7825: 
7826: def append(a, b, axis=None):
7827:     '''Append values to the end of an array.
7828: 
7829:     .. versionadded:: 1.9.0
7830: 
7831:     Parameters
7832:     ----------
7833:     a : array_like
7834:         Values are appended to a copy of this array.
7835:     b : array_like
7836:         These values are appended to a copy of `a`.  It must be of the
7837:         correct shape (the same shape as `a`, excluding `axis`).  If `axis`
7838:         is not specified, `b` can be any shape and will be flattened
7839:         before use.
7840:     axis : int, optional
7841:         The axis along which `v` are appended.  If `axis` is not given,
7842:         both `a` and `b` are flattened before use.
7843: 
7844:     Returns
7845:     -------
7846:     append : MaskedArray
7847:         A copy of `a` with `b` appended to `axis`.  Note that `append`
7848:         does not occur in-place: a new array is allocated and filled.  If
7849:         `axis` is None, the result is a flattened array.
7850: 
7851:     See Also
7852:     --------
7853:     numpy.append : Equivalent function in the top-level NumPy module.
7854: 
7855:     Examples
7856:     --------
7857:     >>> import numpy.ma as ma
7858:     >>> a = ma.masked_values([1, 2, 3], 2)
7859:     >>> b = ma.masked_values([[4, 5, 6], [7, 8, 9]], 7)
7860:     >>> print(ma.append(a, b))
7861:     [1 -- 3 4 5 6 -- 8 9]
7862:     '''
7863:     return concatenate([a, b], axis)
7864: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_139207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, (-1)), 'str', '\nnumpy.ma : a package to handle missing or invalid values.\n\nThis package was initially written for numarray by Paul F. Dubois\nat Lawrence Livermore National Laboratory.\nIn 2006, the package was completely rewritten by Pierre Gerard-Marchant\n(University of Georgia) to make the MaskedArray class a subclass of ndarray,\nand to improve support of structured arrays.\n\n\nCopyright 1999, 2000, 2001 Regents of the University of California.\nReleased for unlimited redistribution.\n\n* Adapted for numpy_core 2005 by Travis Oliphant and (mainly) Paul Dubois.\n* Subclassing of the base `ndarray` 2006 by Pierre Gerard-Marchant\n  (pgmdevlist_AT_gmail_DOT_com)\n* Improvements suggested by Reggie Dugard (reggie_AT_merfinllc_DOT_com)\n\n.. moduleauthor:: Pierre Gerard-Marchant\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import sys' statement (line 25)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import warnings' statement (line 26)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from functools import reduce' statement (line 27)
from functools import reduce

import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'functools', None, module_type_store, ['reduce'], [reduce])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'import numpy' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_139208 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy')

if (type(import_139208) is not StypyTypeError):

    if (import_139208 != 'pyd_module'):
        __import__(import_139208)
        sys_modules_139209 = sys.modules[import_139208]
        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'np', sys_modules_139209.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy', import_139208)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'import numpy.core.umath' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_139210 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.core.umath')

if (type(import_139210) is not StypyTypeError):

    if (import_139210 != 'pyd_module'):
        __import__(import_139210)
        sys_modules_139211 = sys.modules[import_139210]
        import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'umath', sys_modules_139211.module_type_store, module_type_store)
    else:
        import numpy.core.umath as umath

        import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'umath', numpy.core.umath, module_type_store)

else:
    # Assigning a type to the variable 'numpy.core.umath' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.core.umath', import_139210)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'import numpy.core.numerictypes' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_139212 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'numpy.core.numerictypes')

if (type(import_139212) is not StypyTypeError):

    if (import_139212 != 'pyd_module'):
        __import__(import_139212)
        sys_modules_139213 = sys.modules[import_139212]
        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'ntypes', sys_modules_139213.module_type_store, module_type_store)
    else:
        import numpy.core.numerictypes as ntypes

        import_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'ntypes', numpy.core.numerictypes, module_type_store)

else:
    # Assigning a type to the variable 'numpy.core.numerictypes' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'numpy.core.numerictypes', import_139212)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from numpy import ndarray, amax, amin, iscomplexobj, bool_, _NoValue' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_139214 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'numpy')

if (type(import_139214) is not StypyTypeError):

    if (import_139214 != 'pyd_module'):
        __import__(import_139214)
        sys_modules_139215 = sys.modules[import_139214]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'numpy', sys_modules_139215.module_type_store, module_type_store, ['ndarray', 'amax', 'amin', 'iscomplexobj', 'bool_', '_NoValue'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_139215, sys_modules_139215.module_type_store, module_type_store)
    else:
        from numpy import ndarray, amax, amin, iscomplexobj, bool_, _NoValue

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'numpy', None, module_type_store, ['ndarray', 'amax', 'amin', 'iscomplexobj', 'bool_', '_NoValue'], [ndarray, amax, amin, iscomplexobj, bool_, _NoValue])

else:
    # Assigning a type to the variable 'numpy' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'numpy', import_139214)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'from numpy import narray' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_139216 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'numpy')

if (type(import_139216) is not StypyTypeError):

    if (import_139216 != 'pyd_module'):
        __import__(import_139216)
        sys_modules_139217 = sys.modules[import_139216]
        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'numpy', sys_modules_139217.module_type_store, module_type_store, ['array'])
        nest_module(stypy.reporting.localization.Localization(__file__, 33, 0), __file__, sys_modules_139217, sys_modules_139217.module_type_store, module_type_store)
    else:
        from numpy import array as narray

        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'numpy', None, module_type_store, ['array'], [narray])

else:
    # Assigning a type to the variable 'numpy' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'numpy', import_139216)

# Adding an alias
module_type_store.add_alias('narray', 'array')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'from numpy.lib.function_base import angle' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_139218 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'numpy.lib.function_base')

if (type(import_139218) is not StypyTypeError):

    if (import_139218 != 'pyd_module'):
        __import__(import_139218)
        sys_modules_139219 = sys.modules[import_139218]
        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'numpy.lib.function_base', sys_modules_139219.module_type_store, module_type_store, ['angle'])
        nest_module(stypy.reporting.localization.Localization(__file__, 34, 0), __file__, sys_modules_139219, sys_modules_139219.module_type_store, module_type_store)
    else:
        from numpy.lib.function_base import angle

        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'numpy.lib.function_base', None, module_type_store, ['angle'], [angle])

else:
    # Assigning a type to the variable 'numpy.lib.function_base' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'numpy.lib.function_base', import_139218)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'from numpy.compat import getargspec, formatargspec, long, basestring, unicode, bytes, sixu' statement (line 35)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_139220 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'numpy.compat')

if (type(import_139220) is not StypyTypeError):

    if (import_139220 != 'pyd_module'):
        __import__(import_139220)
        sys_modules_139221 = sys.modules[import_139220]
        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'numpy.compat', sys_modules_139221.module_type_store, module_type_store, ['getargspec', 'formatargspec', 'long', 'basestring', 'unicode', 'bytes', 'sixu'])
        nest_module(stypy.reporting.localization.Localization(__file__, 35, 0), __file__, sys_modules_139221, sys_modules_139221.module_type_store, module_type_store)
    else:
        from numpy.compat import getargspec, formatargspec, long, basestring, unicode, bytes, sixu

        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'numpy.compat', None, module_type_store, ['getargspec', 'formatargspec', 'long', 'basestring', 'unicode', 'bytes', 'sixu'], [getargspec, formatargspec, long, basestring, unicode, bytes, sixu])

else:
    # Assigning a type to the variable 'numpy.compat' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'numpy.compat', import_139220)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'from numpy import n_expand_dims' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_139222 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy')

if (type(import_139222) is not StypyTypeError):

    if (import_139222 != 'pyd_module'):
        __import__(import_139222)
        sys_modules_139223 = sys.modules[import_139222]
        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy', sys_modules_139223.module_type_store, module_type_store, ['expand_dims'])
        nest_module(stypy.reporting.localization.Localization(__file__, 38, 0), __file__, sys_modules_139223, sys_modules_139223.module_type_store, module_type_store)
    else:
        from numpy import expand_dims as n_expand_dims

        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy', None, module_type_store, ['expand_dims'], [n_expand_dims])

else:
    # Assigning a type to the variable 'numpy' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy', import_139222)

# Adding an alias
module_type_store.add_alias('n_expand_dims', 'expand_dims')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')




# Obtaining the type of the subscript
int_139224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 20), 'int')
# Getting the type of 'sys' (line 41)
sys_139225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 41)
version_info_139226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 41, 3), sys_139225, 'version_info')
# Obtaining the member '__getitem__' of a type (line 41)
getitem___139227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 41, 3), version_info_139226, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 41)
subscript_call_result_139228 = invoke(stypy.reporting.localization.Localization(__file__, 41, 3), getitem___139227, int_139224)

int_139229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 26), 'int')
# Applying the binary operator '>=' (line 41)
result_ge_139230 = python_operator(stypy.reporting.localization.Localization(__file__, 41, 3), '>=', subscript_call_result_139228, int_139229)

# Testing the type of an if condition (line 41)
if_condition_139231 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 41, 0), result_ge_139230)
# Assigning a type to the variable 'if_condition_139231' (line 41)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'if_condition_139231', if_condition_139231)
# SSA begins for if statement (line 41)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 4))

# 'import pickle' statement (line 42)
import pickle

import_module(stypy.reporting.localization.Localization(__file__, 42, 4), 'pickle', pickle, module_type_store)

# SSA branch for the else part of an if statement (line 41)
module_type_store.open_ssa_branch('else')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 4))

# 'import cPickle' statement (line 44)
import cPickle as pickle

import_module(stypy.reporting.localization.Localization(__file__, 44, 4), 'pickle', pickle, module_type_store)

# SSA join for if statement (line 41)
module_type_store = module_type_store.join_ssa_context()


# Assigning a List to a Name (line 46):

# Assigning a List to a Name (line 46):
__all__ = ['MAError', 'MaskError', 'MaskType', 'MaskedArray', 'abs', 'absolute', 'add', 'all', 'allclose', 'allequal', 'alltrue', 'amax', 'amin', 'angle', 'anom', 'anomalies', 'any', 'append', 'arange', 'arccos', 'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh', 'argmax', 'argmin', 'argsort', 'around', 'array', 'asanyarray', 'asarray', 'bitwise_and', 'bitwise_or', 'bitwise_xor', 'bool_', 'ceil', 'choose', 'clip', 'common_fill_value', 'compress', 'compressed', 'concatenate', 'conjugate', 'copy', 'cos', 'cosh', 'count', 'cumprod', 'cumsum', 'default_fill_value', 'diag', 'diagonal', 'diff', 'divide', 'dump', 'dumps', 'empty', 'empty_like', 'equal', 'exp', 'expand_dims', 'fabs', 'filled', 'fix_invalid', 'flatten_mask', 'flatten_structured_array', 'floor', 'floor_divide', 'fmod', 'frombuffer', 'fromflex', 'fromfunction', 'getdata', 'getmask', 'getmaskarray', 'greater', 'greater_equal', 'harden_mask', 'hypot', 'identity', 'ids', 'indices', 'inner', 'innerproduct', 'isMA', 'isMaskedArray', 'is_mask', 'is_masked', 'isarray', 'left_shift', 'less', 'less_equal', 'load', 'loads', 'log', 'log10', 'log2', 'logical_and', 'logical_not', 'logical_or', 'logical_xor', 'make_mask', 'make_mask_descr', 'make_mask_none', 'mask_or', 'masked', 'masked_array', 'masked_equal', 'masked_greater', 'masked_greater_equal', 'masked_inside', 'masked_invalid', 'masked_less', 'masked_less_equal', 'masked_not_equal', 'masked_object', 'masked_outside', 'masked_print_option', 'masked_singleton', 'masked_values', 'masked_where', 'max', 'maximum', 'maximum_fill_value', 'mean', 'min', 'minimum', 'minimum_fill_value', 'mod', 'multiply', 'mvoid', 'ndim', 'negative', 'nomask', 'nonzero', 'not_equal', 'ones', 'outer', 'outerproduct', 'power', 'prod', 'product', 'ptp', 'put', 'putmask', 'rank', 'ravel', 'remainder', 'repeat', 'reshape', 'resize', 'right_shift', 'round', 'round_', 'set_fill_value', 'shape', 'sin', 'sinh', 'size', 'soften_mask', 'sometrue', 'sort', 'sqrt', 'squeeze', 'std', 'subtract', 'sum', 'swapaxes', 'take', 'tan', 'tanh', 'trace', 'transpose', 'true_divide', 'var', 'where', 'zeros']
module_type_store.set_exportable_members(['MAError', 'MaskError', 'MaskType', 'MaskedArray', 'abs', 'absolute', 'add', 'all', 'allclose', 'allequal', 'alltrue', 'amax', 'amin', 'angle', 'anom', 'anomalies', 'any', 'append', 'arange', 'arccos', 'arccosh', 'arcsin', 'arcsinh', 'arctan', 'arctan2', 'arctanh', 'argmax', 'argmin', 'argsort', 'around', 'array', 'asanyarray', 'asarray', 'bitwise_and', 'bitwise_or', 'bitwise_xor', 'bool_', 'ceil', 'choose', 'clip', 'common_fill_value', 'compress', 'compressed', 'concatenate', 'conjugate', 'copy', 'cos', 'cosh', 'count', 'cumprod', 'cumsum', 'default_fill_value', 'diag', 'diagonal', 'diff', 'divide', 'dump', 'dumps', 'empty', 'empty_like', 'equal', 'exp', 'expand_dims', 'fabs', 'filled', 'fix_invalid', 'flatten_mask', 'flatten_structured_array', 'floor', 'floor_divide', 'fmod', 'frombuffer', 'fromflex', 'fromfunction', 'getdata', 'getmask', 'getmaskarray', 'greater', 'greater_equal', 'harden_mask', 'hypot', 'identity', 'ids', 'indices', 'inner', 'innerproduct', 'isMA', 'isMaskedArray', 'is_mask', 'is_masked', 'isarray', 'left_shift', 'less', 'less_equal', 'load', 'loads', 'log', 'log10', 'log2', 'logical_and', 'logical_not', 'logical_or', 'logical_xor', 'make_mask', 'make_mask_descr', 'make_mask_none', 'mask_or', 'masked', 'masked_array', 'masked_equal', 'masked_greater', 'masked_greater_equal', 'masked_inside', 'masked_invalid', 'masked_less', 'masked_less_equal', 'masked_not_equal', 'masked_object', 'masked_outside', 'masked_print_option', 'masked_singleton', 'masked_values', 'masked_where', 'max', 'maximum', 'maximum_fill_value', 'mean', 'min', 'minimum', 'minimum_fill_value', 'mod', 'multiply', 'mvoid', 'ndim', 'negative', 'nomask', 'nonzero', 'not_equal', 'ones', 'outer', 'outerproduct', 'power', 'prod', 'product', 'ptp', 'put', 'putmask', 'rank', 'ravel', 'remainder', 'repeat', 'reshape', 'resize', 'right_shift', 'round', 'round_', 'set_fill_value', 'shape', 'sin', 'sinh', 'size', 'soften_mask', 'sometrue', 'sort', 'sqrt', 'squeeze', 'std', 'subtract', 'sum', 'swapaxes', 'take', 'tan', 'tanh', 'trace', 'transpose', 'true_divide', 'var', 'where', 'zeros'])

# Obtaining an instance of the builtin type 'list' (line 46)
list_139232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 46)
# Adding element type (line 46)
str_139233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 4), 'str', 'MAError')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139233)
# Adding element type (line 46)
str_139234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 15), 'str', 'MaskError')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139234)
# Adding element type (line 46)
str_139235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 28), 'str', 'MaskType')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139235)
# Adding element type (line 46)
str_139236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 40), 'str', 'MaskedArray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139236)
# Adding element type (line 46)
str_139237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 55), 'str', 'abs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139237)
# Adding element type (line 46)
str_139238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 62), 'str', 'absolute')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139238)
# Adding element type (line 46)
str_139239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 4), 'str', 'add')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139239)
# Adding element type (line 46)
str_139240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 11), 'str', 'all')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139240)
# Adding element type (line 46)
str_139241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 18), 'str', 'allclose')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139241)
# Adding element type (line 46)
str_139242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 30), 'str', 'allequal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139242)
# Adding element type (line 46)
str_139243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 42), 'str', 'alltrue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139243)
# Adding element type (line 46)
str_139244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 53), 'str', 'amax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139244)
# Adding element type (line 46)
str_139245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 61), 'str', 'amin')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139245)
# Adding element type (line 46)
str_139246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 4), 'str', 'angle')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139246)
# Adding element type (line 46)
str_139247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 13), 'str', 'anom')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139247)
# Adding element type (line 46)
str_139248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 21), 'str', 'anomalies')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139248)
# Adding element type (line 46)
str_139249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 34), 'str', 'any')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139249)
# Adding element type (line 46)
str_139250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 41), 'str', 'append')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139250)
# Adding element type (line 46)
str_139251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 51), 'str', 'arange')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139251)
# Adding element type (line 46)
str_139252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 61), 'str', 'arccos')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139252)
# Adding element type (line 46)
str_139253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 4), 'str', 'arccosh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139253)
# Adding element type (line 46)
str_139254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 15), 'str', 'arcsin')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139254)
# Adding element type (line 46)
str_139255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 25), 'str', 'arcsinh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139255)
# Adding element type (line 46)
str_139256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 36), 'str', 'arctan')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139256)
# Adding element type (line 46)
str_139257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 46), 'str', 'arctan2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139257)
# Adding element type (line 46)
str_139258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 57), 'str', 'arctanh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139258)
# Adding element type (line 46)
str_139259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 4), 'str', 'argmax')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139259)
# Adding element type (line 46)
str_139260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 14), 'str', 'argmin')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139260)
# Adding element type (line 46)
str_139261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 24), 'str', 'argsort')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139261)
# Adding element type (line 46)
str_139262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 35), 'str', 'around')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139262)
# Adding element type (line 46)
str_139263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 45), 'str', 'array')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139263)
# Adding element type (line 46)
str_139264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 54), 'str', 'asanyarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139264)
# Adding element type (line 46)
str_139265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 4), 'str', 'asarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139265)
# Adding element type (line 46)
str_139266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 15), 'str', 'bitwise_and')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139266)
# Adding element type (line 46)
str_139267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 30), 'str', 'bitwise_or')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139267)
# Adding element type (line 46)
str_139268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 44), 'str', 'bitwise_xor')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139268)
# Adding element type (line 46)
str_139269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 59), 'str', 'bool_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139269)
# Adding element type (line 46)
str_139270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 68), 'str', 'ceil')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139270)
# Adding element type (line 46)
str_139271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 4), 'str', 'choose')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139271)
# Adding element type (line 46)
str_139272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 14), 'str', 'clip')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139272)
# Adding element type (line 46)
str_139273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 22), 'str', 'common_fill_value')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139273)
# Adding element type (line 46)
str_139274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 43), 'str', 'compress')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139274)
# Adding element type (line 46)
str_139275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 55), 'str', 'compressed')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139275)
# Adding element type (line 46)
str_139276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 4), 'str', 'concatenate')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139276)
# Adding element type (line 46)
str_139277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 19), 'str', 'conjugate')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139277)
# Adding element type (line 46)
str_139278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 32), 'str', 'copy')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139278)
# Adding element type (line 46)
str_139279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 40), 'str', 'cos')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139279)
# Adding element type (line 46)
str_139280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 47), 'str', 'cosh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139280)
# Adding element type (line 46)
str_139281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 55), 'str', 'count')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139281)
# Adding element type (line 46)
str_139282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 64), 'str', 'cumprod')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139282)
# Adding element type (line 46)
str_139283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 4), 'str', 'cumsum')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139283)
# Adding element type (line 46)
str_139284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 14), 'str', 'default_fill_value')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139284)
# Adding element type (line 46)
str_139285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 36), 'str', 'diag')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139285)
# Adding element type (line 46)
str_139286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 44), 'str', 'diagonal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139286)
# Adding element type (line 46)
str_139287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 56), 'str', 'diff')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139287)
# Adding element type (line 46)
str_139288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 64), 'str', 'divide')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139288)
# Adding element type (line 46)
str_139289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 4), 'str', 'dump')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139289)
# Adding element type (line 46)
str_139290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 12), 'str', 'dumps')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139290)
# Adding element type (line 46)
str_139291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 21), 'str', 'empty')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139291)
# Adding element type (line 46)
str_139292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 30), 'str', 'empty_like')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139292)
# Adding element type (line 46)
str_139293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 44), 'str', 'equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139293)
# Adding element type (line 46)
str_139294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 53), 'str', 'exp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139294)
# Adding element type (line 46)
str_139295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 60), 'str', 'expand_dims')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139295)
# Adding element type (line 46)
str_139296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 4), 'str', 'fabs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139296)
# Adding element type (line 46)
str_139297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 12), 'str', 'filled')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139297)
# Adding element type (line 46)
str_139298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 22), 'str', 'fix_invalid')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139298)
# Adding element type (line 46)
str_139299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 37), 'str', 'flatten_mask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139299)
# Adding element type (line 46)
str_139300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 4), 'str', 'flatten_structured_array')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139300)
# Adding element type (line 46)
str_139301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 32), 'str', 'floor')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139301)
# Adding element type (line 46)
str_139302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 41), 'str', 'floor_divide')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139302)
# Adding element type (line 46)
str_139303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 57), 'str', 'fmod')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139303)
# Adding element type (line 46)
str_139304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 4), 'str', 'frombuffer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139304)
# Adding element type (line 46)
str_139305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 18), 'str', 'fromflex')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139305)
# Adding element type (line 46)
str_139306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 30), 'str', 'fromfunction')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139306)
# Adding element type (line 46)
str_139307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 46), 'str', 'getdata')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139307)
# Adding element type (line 46)
str_139308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, 57), 'str', 'getmask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139308)
# Adding element type (line 46)
str_139309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 4), 'str', 'getmaskarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139309)
# Adding element type (line 46)
str_139310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 20), 'str', 'greater')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139310)
# Adding element type (line 46)
str_139311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 31), 'str', 'greater_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139311)
# Adding element type (line 46)
str_139312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 48), 'str', 'harden_mask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139312)
# Adding element type (line 46)
str_139313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 63), 'str', 'hypot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139313)
# Adding element type (line 46)
str_139314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 4), 'str', 'identity')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139314)
# Adding element type (line 46)
str_139315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 16), 'str', 'ids')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139315)
# Adding element type (line 46)
str_139316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 23), 'str', 'indices')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139316)
# Adding element type (line 46)
str_139317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 34), 'str', 'inner')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139317)
# Adding element type (line 46)
str_139318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 43), 'str', 'innerproduct')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139318)
# Adding element type (line 46)
str_139319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 59), 'str', 'isMA')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139319)
# Adding element type (line 46)
str_139320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 4), 'str', 'isMaskedArray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139320)
# Adding element type (line 46)
str_139321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 21), 'str', 'is_mask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139321)
# Adding element type (line 46)
str_139322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 32), 'str', 'is_masked')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139322)
# Adding element type (line 46)
str_139323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 45), 'str', 'isarray')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139323)
# Adding element type (line 46)
str_139324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 56), 'str', 'left_shift')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139324)
# Adding element type (line 46)
str_139325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 4), 'str', 'less')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139325)
# Adding element type (line 46)
str_139326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 12), 'str', 'less_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139326)
# Adding element type (line 46)
str_139327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 26), 'str', 'load')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139327)
# Adding element type (line 46)
str_139328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 34), 'str', 'loads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139328)
# Adding element type (line 46)
str_139329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 43), 'str', 'log')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139329)
# Adding element type (line 46)
str_139330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 50), 'str', 'log10')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139330)
# Adding element type (line 46)
str_139331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 63, 59), 'str', 'log2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139331)
# Adding element type (line 46)
str_139332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 4), 'str', 'logical_and')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139332)
# Adding element type (line 46)
str_139333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 19), 'str', 'logical_not')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139333)
# Adding element type (line 46)
str_139334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 34), 'str', 'logical_or')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139334)
# Adding element type (line 46)
str_139335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 48), 'str', 'logical_xor')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139335)
# Adding element type (line 46)
str_139336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 63), 'str', 'make_mask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139336)
# Adding element type (line 46)
str_139337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 4), 'str', 'make_mask_descr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139337)
# Adding element type (line 46)
str_139338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 23), 'str', 'make_mask_none')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139338)
# Adding element type (line 46)
str_139339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 41), 'str', 'mask_or')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139339)
# Adding element type (line 46)
str_139340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 52), 'str', 'masked')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139340)
# Adding element type (line 46)
str_139341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 4), 'str', 'masked_array')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139341)
# Adding element type (line 46)
str_139342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 20), 'str', 'masked_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139342)
# Adding element type (line 46)
str_139343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 36), 'str', 'masked_greater')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139343)
# Adding element type (line 46)
str_139344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, 4), 'str', 'masked_greater_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139344)
# Adding element type (line 46)
str_139345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, 28), 'str', 'masked_inside')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139345)
# Adding element type (line 46)
str_139346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, 45), 'str', 'masked_invalid')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139346)
# Adding element type (line 46)
str_139347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 4), 'str', 'masked_less')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139347)
# Adding element type (line 46)
str_139348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 19), 'str', 'masked_less_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139348)
# Adding element type (line 46)
str_139349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, 40), 'str', 'masked_not_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139349)
# Adding element type (line 46)
str_139350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 4), 'str', 'masked_object')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139350)
# Adding element type (line 46)
str_139351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 21), 'str', 'masked_outside')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139351)
# Adding element type (line 46)
str_139352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 39), 'str', 'masked_print_option')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139352)
# Adding element type (line 46)
str_139353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 4), 'str', 'masked_singleton')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139353)
# Adding element type (line 46)
str_139354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 24), 'str', 'masked_values')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139354)
# Adding element type (line 46)
str_139355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 41), 'str', 'masked_where')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139355)
# Adding element type (line 46)
str_139356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 57), 'str', 'max')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139356)
# Adding element type (line 46)
str_139357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 64), 'str', 'maximum')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139357)
# Adding element type (line 46)
str_139358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 4), 'str', 'maximum_fill_value')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139358)
# Adding element type (line 46)
str_139359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 26), 'str', 'mean')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139359)
# Adding element type (line 46)
str_139360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 34), 'str', 'min')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139360)
# Adding element type (line 46)
str_139361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 41), 'str', 'minimum')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139361)
# Adding element type (line 46)
str_139362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 52), 'str', 'minimum_fill_value')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139362)
# Adding element type (line 46)
str_139363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 4), 'str', 'mod')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139363)
# Adding element type (line 46)
str_139364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 11), 'str', 'multiply')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139364)
# Adding element type (line 46)
str_139365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 23), 'str', 'mvoid')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139365)
# Adding element type (line 46)
str_139366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 32), 'str', 'ndim')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139366)
# Adding element type (line 46)
str_139367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 40), 'str', 'negative')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139367)
# Adding element type (line 46)
str_139368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 52), 'str', 'nomask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139368)
# Adding element type (line 46)
str_139369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 62), 'str', 'nonzero')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139369)
# Adding element type (line 46)
str_139370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 4), 'str', 'not_equal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139370)
# Adding element type (line 46)
str_139371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 17), 'str', 'ones')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139371)
# Adding element type (line 46)
str_139372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 25), 'str', 'outer')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139372)
# Adding element type (line 46)
str_139373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 34), 'str', 'outerproduct')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139373)
# Adding element type (line 46)
str_139374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 50), 'str', 'power')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139374)
# Adding element type (line 46)
str_139375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 59), 'str', 'prod')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139375)
# Adding element type (line 46)
str_139376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 4), 'str', 'product')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139376)
# Adding element type (line 46)
str_139377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 15), 'str', 'ptp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139377)
# Adding element type (line 46)
str_139378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 22), 'str', 'put')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139378)
# Adding element type (line 46)
str_139379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 29), 'str', 'putmask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139379)
# Adding element type (line 46)
str_139380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 40), 'str', 'rank')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139380)
# Adding element type (line 46)
str_139381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 48), 'str', 'ravel')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139381)
# Adding element type (line 46)
str_139382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, 57), 'str', 'remainder')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139382)
# Adding element type (line 46)
str_139383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 4), 'str', 'repeat')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139383)
# Adding element type (line 46)
str_139384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 14), 'str', 'reshape')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139384)
# Adding element type (line 46)
str_139385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 25), 'str', 'resize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139385)
# Adding element type (line 46)
str_139386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 35), 'str', 'right_shift')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139386)
# Adding element type (line 46)
str_139387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 50), 'str', 'round')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139387)
# Adding element type (line 46)
str_139388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 59), 'str', 'round_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139388)
# Adding element type (line 46)
str_139389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 4), 'str', 'set_fill_value')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139389)
# Adding element type (line 46)
str_139390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 22), 'str', 'shape')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139390)
# Adding element type (line 46)
str_139391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 31), 'str', 'sin')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139391)
# Adding element type (line 46)
str_139392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 38), 'str', 'sinh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139392)
# Adding element type (line 46)
str_139393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 46), 'str', 'size')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139393)
# Adding element type (line 46)
str_139394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 54), 'str', 'soften_mask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139394)
# Adding element type (line 46)
str_139395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 4), 'str', 'sometrue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139395)
# Adding element type (line 46)
str_139396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 16), 'str', 'sort')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139396)
# Adding element type (line 46)
str_139397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 24), 'str', 'sqrt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139397)
# Adding element type (line 46)
str_139398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 32), 'str', 'squeeze')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139398)
# Adding element type (line 46)
str_139399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 43), 'str', 'std')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139399)
# Adding element type (line 46)
str_139400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 50), 'str', 'subtract')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139400)
# Adding element type (line 46)
str_139401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 62), 'str', 'sum')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139401)
# Adding element type (line 46)
str_139402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 4), 'str', 'swapaxes')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139402)
# Adding element type (line 46)
str_139403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 16), 'str', 'take')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139403)
# Adding element type (line 46)
str_139404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 24), 'str', 'tan')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139404)
# Adding element type (line 46)
str_139405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 31), 'str', 'tanh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139405)
# Adding element type (line 46)
str_139406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 39), 'str', 'trace')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139406)
# Adding element type (line 46)
str_139407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 48), 'str', 'transpose')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139407)
# Adding element type (line 46)
str_139408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 61), 'str', 'true_divide')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139408)
# Adding element type (line 46)
str_139409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 4), 'str', 'var')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139409)
# Adding element type (line 46)
str_139410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 11), 'str', 'where')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139410)
# Adding element type (line 46)
str_139411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 20), 'str', 'zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 10), list_139232, str_139411)

# Assigning a type to the variable '__all__' (line 46)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), '__all__', list_139232)

# Assigning a Attribute to a Name (line 82):

# Assigning a Attribute to a Name (line 82):
# Getting the type of 'np' (line 82)
np_139412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 11), 'np')
# Obtaining the member 'bool_' of a type (line 82)
bool__139413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 11), np_139412, 'bool_')
# Assigning a type to the variable 'MaskType' (line 82)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 0), 'MaskType', bool__139413)

# Assigning a Call to a Name (line 83):

# Assigning a Call to a Name (line 83):

# Call to MaskType(...): (line 83)
# Processing the call arguments (line 83)
int_139415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, 18), 'int')
# Processing the call keyword arguments (line 83)
kwargs_139416 = {}
# Getting the type of 'MaskType' (line 83)
MaskType_139414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 9), 'MaskType', False)
# Calling MaskType(args, kwargs) (line 83)
MaskType_call_result_139417 = invoke(stypy.reporting.localization.Localization(__file__, 83, 9), MaskType_139414, *[int_139415], **kwargs_139416)

# Assigning a type to the variable 'nomask' (line 83)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 0), 'nomask', MaskType_call_result_139417)
# Declaration of the 'MaskedArrayFutureWarning' class
# Getting the type of 'FutureWarning' (line 85)
FutureWarning_139418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 31), 'FutureWarning')

class MaskedArrayFutureWarning(FutureWarning_139418, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 85, 0, False)
        # Assigning a type to the variable 'self' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArrayFutureWarning.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'MaskedArrayFutureWarning' (line 85)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 0), 'MaskedArrayFutureWarning', MaskedArrayFutureWarning)

@norecursion
def doc_note(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'doc_note'
    module_type_store = module_type_store.open_function_context('doc_note', 89, 0, False)
    
    # Passed parameters checking function
    doc_note.stypy_localization = localization
    doc_note.stypy_type_of_self = None
    doc_note.stypy_type_store = module_type_store
    doc_note.stypy_function_name = 'doc_note'
    doc_note.stypy_param_names_list = ['initialdoc', 'note']
    doc_note.stypy_varargs_param_name = None
    doc_note.stypy_kwargs_param_name = None
    doc_note.stypy_call_defaults = defaults
    doc_note.stypy_call_varargs = varargs
    doc_note.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'doc_note', ['initialdoc', 'note'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'doc_note', localization, ['initialdoc', 'note'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'doc_note(...)' code ##################

    str_139419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, (-1)), 'str', '\n    Adds a Notes section to an existing docstring.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 94)
    # Getting the type of 'initialdoc' (line 94)
    initialdoc_139420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 7), 'initialdoc')
    # Getting the type of 'None' (line 94)
    None_139421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 21), 'None')
    
    (may_be_139422, more_types_in_union_139423) = may_be_none(initialdoc_139420, None_139421)

    if may_be_139422:

        if more_types_in_union_139423:
            # Runtime conditional SSA (line 94)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'stypy_return_type' (line 95)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 8), 'stypy_return_type', types.NoneType)

        if more_types_in_union_139423:
            # SSA join for if statement (line 94)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 96)
    # Getting the type of 'note' (line 96)
    note_139424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 7), 'note')
    # Getting the type of 'None' (line 96)
    None_139425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 15), 'None')
    
    (may_be_139426, more_types_in_union_139427) = may_be_none(note_139424, None_139425)

    if may_be_139426:

        if more_types_in_union_139427:
            # Runtime conditional SSA (line 96)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'initialdoc' (line 97)
        initialdoc_139428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 15), 'initialdoc')
        # Assigning a type to the variable 'stypy_return_type' (line 97)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'stypy_return_type', initialdoc_139428)

        if more_types_in_union_139427:
            # SSA join for if statement (line 96)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Str to a Name (line 98):
    
    # Assigning a Str to a Name (line 98):
    str_139429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, (-1)), 'str', '\n    %s\n\n    Notes\n    -----\n    %s\n    ')
    # Assigning a type to the variable 'newdoc' (line 98)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 4), 'newdoc', str_139429)
    # Getting the type of 'newdoc' (line 105)
    newdoc_139430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 11), 'newdoc')
    
    # Obtaining an instance of the builtin type 'tuple' (line 105)
    tuple_139431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 105)
    # Adding element type (line 105)
    # Getting the type of 'initialdoc' (line 105)
    initialdoc_139432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 21), 'initialdoc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 21), tuple_139431, initialdoc_139432)
    # Adding element type (line 105)
    # Getting the type of 'note' (line 105)
    note_139433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 33), 'note')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 21), tuple_139431, note_139433)
    
    # Applying the binary operator '%' (line 105)
    result_mod_139434 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 11), '%', newdoc_139430, tuple_139431)
    
    # Assigning a type to the variable 'stypy_return_type' (line 105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 4), 'stypy_return_type', result_mod_139434)
    
    # ################# End of 'doc_note(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'doc_note' in the type store
    # Getting the type of 'stypy_return_type' (line 89)
    stypy_return_type_139435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139435)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'doc_note'
    return stypy_return_type_139435

# Assigning a type to the variable 'doc_note' (line 89)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 0), 'doc_note', doc_note)

@norecursion
def get_object_signature(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_object_signature'
    module_type_store = module_type_store.open_function_context('get_object_signature', 108, 0, False)
    
    # Passed parameters checking function
    get_object_signature.stypy_localization = localization
    get_object_signature.stypy_type_of_self = None
    get_object_signature.stypy_type_store = module_type_store
    get_object_signature.stypy_function_name = 'get_object_signature'
    get_object_signature.stypy_param_names_list = ['obj']
    get_object_signature.stypy_varargs_param_name = None
    get_object_signature.stypy_kwargs_param_name = None
    get_object_signature.stypy_call_defaults = defaults
    get_object_signature.stypy_call_varargs = varargs
    get_object_signature.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_object_signature', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_object_signature', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_object_signature(...)' code ##################

    str_139436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, (-1)), 'str', '\n    Get the signature from obj\n\n    ')
    
    
    # SSA begins for try-except statement (line 113)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 114):
    
    # Assigning a Call to a Name (line 114):
    
    # Call to formatargspec(...): (line 114)
    
    # Call to getargspec(...): (line 114)
    # Processing the call arguments (line 114)
    # Getting the type of 'obj' (line 114)
    obj_139439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 40), 'obj', False)
    # Processing the call keyword arguments (line 114)
    kwargs_139440 = {}
    # Getting the type of 'getargspec' (line 114)
    getargspec_139438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 29), 'getargspec', False)
    # Calling getargspec(args, kwargs) (line 114)
    getargspec_call_result_139441 = invoke(stypy.reporting.localization.Localization(__file__, 114, 29), getargspec_139438, *[obj_139439], **kwargs_139440)
    
    # Processing the call keyword arguments (line 114)
    kwargs_139442 = {}
    # Getting the type of 'formatargspec' (line 114)
    formatargspec_139437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 14), 'formatargspec', False)
    # Calling formatargspec(args, kwargs) (line 114)
    formatargspec_call_result_139443 = invoke(stypy.reporting.localization.Localization(__file__, 114, 14), formatargspec_139437, *[getargspec_call_result_139441], **kwargs_139442)
    
    # Assigning a type to the variable 'sig' (line 114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 8), 'sig', formatargspec_call_result_139443)
    # SSA branch for the except part of a try statement (line 113)
    # SSA branch for the except 'TypeError' branch of a try statement (line 113)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Str to a Name (line 116):
    
    # Assigning a Str to a Name (line 116):
    str_139444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 116, 14), 'str', '')
    # Assigning a type to the variable 'sig' (line 116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 8), 'sig', str_139444)
    # SSA join for try-except statement (line 113)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'sig' (line 117)
    sig_139445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 11), 'sig')
    # Assigning a type to the variable 'stypy_return_type' (line 117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 4), 'stypy_return_type', sig_139445)
    
    # ################# End of 'get_object_signature(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_object_signature' in the type store
    # Getting the type of 'stypy_return_type' (line 108)
    stypy_return_type_139446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139446)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_object_signature'
    return stypy_return_type_139446

# Assigning a type to the variable 'get_object_signature' (line 108)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 0), 'get_object_signature', get_object_signature)
# Declaration of the 'MAError' class
# Getting the type of 'Exception' (line 125)
Exception_139447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 14), 'Exception')

class MAError(Exception_139447, ):
    str_139448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, (-1)), 'str', '\n    Class for masked array related errors.\n\n    ')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 125, 0, False)
        # Assigning a type to the variable 'self' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MAError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'MAError' (line 125)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 0), 'MAError', MAError)
# Declaration of the 'MaskError' class
# Getting the type of 'MAError' (line 133)
MAError_139449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 16), 'MAError')

class MaskError(MAError_139449, ):
    str_139450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 137, (-1)), 'str', '\n    Class for mask related errors.\n\n    ')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 133, 0, False)
        # Assigning a type to the variable 'self' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'MaskError' (line 133)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 0), 'MaskError', MaskError)

# Assigning a Dict to a Name (line 147):

# Assigning a Dict to a Name (line 147):

# Obtaining an instance of the builtin type 'dict' (line 147)
dict_139451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 17), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 147)
# Adding element type (key, value) (line 147)
str_139452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 18), 'str', 'b')
# Getting the type of 'True' (line 147)
True_139453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 23), 'True')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139452, True_139453))
# Adding element type (key, value) (line 147)
str_139454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 18), 'str', 'c')
float_139455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 23), 'float')
complex_139456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 31), 'complex')
# Applying the binary operator '+' (line 148)
result_add_139457 = python_operator(stypy.reporting.localization.Localization(__file__, 148, 23), '+', float_139455, complex_139456)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139454, result_add_139457))
# Adding element type (key, value) (line 147)
str_139458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 18), 'str', 'f')
float_139459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 23), 'float')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139458, float_139459))
# Adding element type (key, value) (line 147)
str_139460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 18), 'str', 'i')
int_139461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 23), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139460, int_139461))
# Adding element type (key, value) (line 147)
str_139462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 18), 'str', 'O')
str_139463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 23), 'str', '?')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139462, str_139463))
# Adding element type (key, value) (line 147)
str_139464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 18), 'str', 'S')
str_139465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 23), 'str', 'N/A')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139464, str_139465))
# Adding element type (key, value) (line 147)
str_139466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 18), 'str', 'u')
int_139467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 23), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139466, int_139467))
# Adding element type (key, value) (line 147)
str_139468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 18), 'str', 'V')
str_139469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 23), 'str', '???')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139468, str_139469))
# Adding element type (key, value) (line 147)
str_139470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 18), 'str', 'U')

# Call to sixu(...): (line 155)
# Processing the call arguments (line 155)
str_139472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 28), 'str', 'N/A')
# Processing the call keyword arguments (line 155)
kwargs_139473 = {}
# Getting the type of 'sixu' (line 155)
sixu_139471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 23), 'sixu', False)
# Calling sixu(args, kwargs) (line 155)
sixu_call_result_139474 = invoke(stypy.reporting.localization.Localization(__file__, 155, 23), sixu_139471, *[str_139472], **kwargs_139473)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 147, 17), dict_139451, (str_139470, sixu_call_result_139474))

# Assigning a type to the variable 'default_filler' (line 147)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 0), 'default_filler', dict_139451)


# Obtaining an instance of the builtin type 'list' (line 159)
list_139475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 9), 'list')
# Adding type elements to the builtin type 'list' instance (line 159)
# Adding element type (line 159)
str_139476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 10), 'str', 'Y')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139476)
# Adding element type (line 159)
str_139477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 15), 'str', 'M')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139477)
# Adding element type (line 159)
str_139478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 20), 'str', 'W')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139478)
# Adding element type (line 159)
str_139479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 25), 'str', 'D')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139479)
# Adding element type (line 159)
str_139480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 30), 'str', 'h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139480)
# Adding element type (line 159)
str_139481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 35), 'str', 'm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139481)
# Adding element type (line 159)
str_139482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 40), 'str', 's')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139482)
# Adding element type (line 159)
str_139483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 45), 'str', 'ms')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139483)
# Adding element type (line 159)
str_139484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 51), 'str', 'us')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139484)
# Adding element type (line 159)
str_139485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 57), 'str', 'ns')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139485)
# Adding element type (line 159)
str_139486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 63), 'str', 'ps')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139486)
# Adding element type (line 159)
str_139487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 10), 'str', 'fs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139487)
# Adding element type (line 159)
str_139488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 16), 'str', 'as')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 9), list_139475, str_139488)

# Testing the type of a for loop iterable (line 159)
is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 159, 0), list_139475)
# Getting the type of the for loop variable (line 159)
for_loop_var_139489 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 159, 0), list_139475)
# Assigning a type to the variable 'v' (line 159)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 0), 'v', for_loop_var_139489)
# SSA begins for a for statement (line 159)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')

# Assigning a Call to a Subscript (line 161):

# Assigning a Call to a Subscript (line 161):

# Call to datetime64(...): (line 161)
# Processing the call arguments (line 161)
str_139492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 52), 'str', 'NaT')
# Getting the type of 'v' (line 161)
v_139493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 59), 'v', False)
# Processing the call keyword arguments (line 161)
kwargs_139494 = {}
# Getting the type of 'np' (line 161)
np_139490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 38), 'np', False)
# Obtaining the member 'datetime64' of a type (line 161)
datetime64_139491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 38), np_139490, 'datetime64')
# Calling datetime64(args, kwargs) (line 161)
datetime64_call_result_139495 = invoke(stypy.reporting.localization.Localization(__file__, 161, 38), datetime64_139491, *[str_139492, v_139493], **kwargs_139494)

# Getting the type of 'default_filler' (line 161)
default_filler_139496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 4), 'default_filler')
str_139497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 19), 'str', 'M8[')
# Getting the type of 'v' (line 161)
v_139498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 27), 'v')
# Applying the binary operator '+' (line 161)
result_add_139499 = python_operator(stypy.reporting.localization.Localization(__file__, 161, 19), '+', str_139497, v_139498)

str_139500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 31), 'str', ']')
# Applying the binary operator '+' (line 161)
result_add_139501 = python_operator(stypy.reporting.localization.Localization(__file__, 161, 29), '+', result_add_139499, str_139500)

# Storing an element on a container (line 161)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 161, 4), default_filler_139496, (result_add_139501, datetime64_call_result_139495))

# Assigning a Call to a Subscript (line 162):

# Assigning a Call to a Subscript (line 162):

# Call to timedelta64(...): (line 162)
# Processing the call arguments (line 162)
str_139504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 53), 'str', 'NaT')
# Getting the type of 'v' (line 162)
v_139505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 60), 'v', False)
# Processing the call keyword arguments (line 162)
kwargs_139506 = {}
# Getting the type of 'np' (line 162)
np_139502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 38), 'np', False)
# Obtaining the member 'timedelta64' of a type (line 162)
timedelta64_139503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 38), np_139502, 'timedelta64')
# Calling timedelta64(args, kwargs) (line 162)
timedelta64_call_result_139507 = invoke(stypy.reporting.localization.Localization(__file__, 162, 38), timedelta64_139503, *[str_139504, v_139505], **kwargs_139506)

# Getting the type of 'default_filler' (line 162)
default_filler_139508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 4), 'default_filler')
str_139509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 19), 'str', 'm8[')
# Getting the type of 'v' (line 162)
v_139510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 27), 'v')
# Applying the binary operator '+' (line 162)
result_add_139511 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 19), '+', str_139509, v_139510)

str_139512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 31), 'str', ']')
# Applying the binary operator '+' (line 162)
result_add_139513 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 29), '+', result_add_139511, str_139512)

# Storing an element on a container (line 162)
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 162, 4), default_filler_139508, (result_add_139513, timedelta64_call_result_139507))
# SSA join for a for statement
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Name (line 164):

# Assigning a Attribute to a Name (line 164):
# Getting the type of 'ntypes' (line 164)
ntypes_139514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 13), 'ntypes')
# Obtaining the member '_minvals' of a type (line 164)
_minvals_139515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 13), ntypes_139514, '_minvals')
# Assigning a type to the variable 'max_filler' (line 164)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 0), 'max_filler', _minvals_139515)

# Call to update(...): (line 165)
# Processing the call arguments (line 165)
# Calculating list comprehension
# Calculating comprehension expression

# Obtaining an instance of the builtin type 'list' (line 165)
list_139523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 41), 'list')
# Adding type elements to the builtin type 'list' instance (line 165)
# Adding element type (line 165)
# Getting the type of 'np' (line 165)
np_139524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 42), 'np', False)
# Obtaining the member 'float32' of a type (line 165)
float32_139525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 42), np_139524, 'float32')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 41), list_139523, float32_139525)
# Adding element type (line 165)
# Getting the type of 'np' (line 165)
np_139526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 54), 'np', False)
# Obtaining the member 'float64' of a type (line 165)
float64_139527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 54), np_139526, 'float64')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 41), list_139523, float64_139527)

comprehension_139528 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 19), list_139523)
# Assigning a type to the variable 'k' (line 165)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 19), 'k', comprehension_139528)

# Obtaining an instance of the builtin type 'tuple' (line 165)
tuple_139518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 165)
# Adding element type (line 165)
# Getting the type of 'k' (line 165)
k_139519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 20), 'k', False)
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 20), tuple_139518, k_139519)
# Adding element type (line 165)

# Getting the type of 'np' (line 165)
np_139520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 24), 'np', False)
# Obtaining the member 'inf' of a type (line 165)
inf_139521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 24), np_139520, 'inf')
# Applying the 'usub' unary operator (line 165)
result___neg___139522 = python_operator(stypy.reporting.localization.Localization(__file__, 165, 23), 'usub', inf_139521)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 20), tuple_139518, result___neg___139522)

list_139529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 19), 'list')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 165, 19), list_139529, tuple_139518)
# Processing the call keyword arguments (line 165)
kwargs_139530 = {}
# Getting the type of 'max_filler' (line 165)
max_filler_139516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 0), 'max_filler', False)
# Obtaining the member 'update' of a type (line 165)
update_139517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 0), max_filler_139516, 'update')
# Calling update(args, kwargs) (line 165)
update_call_result_139531 = invoke(stypy.reporting.localization.Localization(__file__, 165, 0), update_139517, *[list_139529], **kwargs_139530)


# Assigning a Attribute to a Name (line 166):

# Assigning a Attribute to a Name (line 166):
# Getting the type of 'ntypes' (line 166)
ntypes_139532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 13), 'ntypes')
# Obtaining the member '_maxvals' of a type (line 166)
_maxvals_139533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 13), ntypes_139532, '_maxvals')
# Assigning a type to the variable 'min_filler' (line 166)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 0), 'min_filler', _maxvals_139533)

# Call to update(...): (line 167)
# Processing the call arguments (line 167)
# Calculating list comprehension
# Calculating comprehension expression

# Obtaining an instance of the builtin type 'list' (line 167)
list_139541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 41), 'list')
# Adding type elements to the builtin type 'list' instance (line 167)
# Adding element type (line 167)
# Getting the type of 'np' (line 167)
np_139542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 42), 'np', False)
# Obtaining the member 'float32' of a type (line 167)
float32_139543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 42), np_139542, 'float32')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 167, 41), list_139541, float32_139543)
# Adding element type (line 167)
# Getting the type of 'np' (line 167)
np_139544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 54), 'np', False)
# Obtaining the member 'float64' of a type (line 167)
float64_139545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 54), np_139544, 'float64')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 167, 41), list_139541, float64_139545)

comprehension_139546 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 167, 19), list_139541)
# Assigning a type to the variable 'k' (line 167)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 19), 'k', comprehension_139546)

# Obtaining an instance of the builtin type 'tuple' (line 167)
tuple_139536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 20), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 167)
# Adding element type (line 167)
# Getting the type of 'k' (line 167)
k_139537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 20), 'k', False)
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 167, 20), tuple_139536, k_139537)
# Adding element type (line 167)

# Getting the type of 'np' (line 167)
np_139538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 24), 'np', False)
# Obtaining the member 'inf' of a type (line 167)
inf_139539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 24), np_139538, 'inf')
# Applying the 'uadd' unary operator (line 167)
result___pos___139540 = python_operator(stypy.reporting.localization.Localization(__file__, 167, 23), 'uadd', inf_139539)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 167, 20), tuple_139536, result___pos___139540)

list_139547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 19), 'list')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 167, 19), list_139547, tuple_139536)
# Processing the call keyword arguments (line 167)
kwargs_139548 = {}
# Getting the type of 'min_filler' (line 167)
min_filler_139534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 0), 'min_filler', False)
# Obtaining the member 'update' of a type (line 167)
update_139535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 0), min_filler_139534, 'update')
# Calling update(args, kwargs) (line 167)
update_call_result_139549 = invoke(stypy.reporting.localization.Localization(__file__, 167, 0), update_139535, *[list_139547], **kwargs_139548)



str_139550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 3), 'str', 'float128')
# Getting the type of 'ntypes' (line 168)
ntypes_139551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 17), 'ntypes')
# Obtaining the member 'typeDict' of a type (line 168)
typeDict_139552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 17), ntypes_139551, 'typeDict')
# Applying the binary operator 'in' (line 168)
result_contains_139553 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 3), 'in', str_139550, typeDict_139552)

# Testing the type of an if condition (line 168)
if_condition_139554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 168, 0), result_contains_139553)
# Assigning a type to the variable 'if_condition_139554' (line 168)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 0), 'if_condition_139554', if_condition_139554)
# SSA begins for if statement (line 168)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to update(...): (line 169)
# Processing the call arguments (line 169)

# Obtaining an instance of the builtin type 'list' (line 169)
list_139557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 22), 'list')
# Adding type elements to the builtin type 'list' instance (line 169)
# Adding element type (line 169)

# Obtaining an instance of the builtin type 'tuple' (line 169)
tuple_139558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 24), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 169)
# Adding element type (line 169)
# Getting the type of 'np' (line 169)
np_139559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 24), 'np', False)
# Obtaining the member 'float128' of a type (line 169)
float128_139560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 24), np_139559, 'float128')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 24), tuple_139558, float128_139560)
# Adding element type (line 169)

# Getting the type of 'np' (line 169)
np_139561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 38), 'np', False)
# Obtaining the member 'inf' of a type (line 169)
inf_139562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 38), np_139561, 'inf')
# Applying the 'usub' unary operator (line 169)
result___neg___139563 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 37), 'usub', inf_139562)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 24), tuple_139558, result___neg___139563)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 169, 22), list_139557, tuple_139558)

# Processing the call keyword arguments (line 169)
kwargs_139564 = {}
# Getting the type of 'max_filler' (line 169)
max_filler_139555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'max_filler', False)
# Obtaining the member 'update' of a type (line 169)
update_139556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 4), max_filler_139555, 'update')
# Calling update(args, kwargs) (line 169)
update_call_result_139565 = invoke(stypy.reporting.localization.Localization(__file__, 169, 4), update_139556, *[list_139557], **kwargs_139564)


# Call to update(...): (line 170)
# Processing the call arguments (line 170)

# Obtaining an instance of the builtin type 'list' (line 170)
list_139568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 170, 22), 'list')
# Adding type elements to the builtin type 'list' instance (line 170)
# Adding element type (line 170)

# Obtaining an instance of the builtin type 'tuple' (line 170)
tuple_139569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 170, 24), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 170)
# Adding element type (line 170)
# Getting the type of 'np' (line 170)
np_139570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 24), 'np', False)
# Obtaining the member 'float128' of a type (line 170)
float128_139571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 24), np_139570, 'float128')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 170, 24), tuple_139569, float128_139571)
# Adding element type (line 170)

# Getting the type of 'np' (line 170)
np_139572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 38), 'np', False)
# Obtaining the member 'inf' of a type (line 170)
inf_139573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 38), np_139572, 'inf')
# Applying the 'uadd' unary operator (line 170)
result___pos___139574 = python_operator(stypy.reporting.localization.Localization(__file__, 170, 37), 'uadd', inf_139573)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 170, 24), tuple_139569, result___pos___139574)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 170, 22), list_139568, tuple_139569)

# Processing the call keyword arguments (line 170)
kwargs_139575 = {}
# Getting the type of 'min_filler' (line 170)
min_filler_139566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 4), 'min_filler', False)
# Obtaining the member 'update' of a type (line 170)
update_139567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 4), min_filler_139566, 'update')
# Calling update(args, kwargs) (line 170)
update_call_result_139576 = invoke(stypy.reporting.localization.Localization(__file__, 170, 4), update_139567, *[list_139568], **kwargs_139575)

# SSA join for if statement (line 168)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def default_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'default_fill_value'
    module_type_store = module_type_store.open_function_context('default_fill_value', 173, 0, False)
    
    # Passed parameters checking function
    default_fill_value.stypy_localization = localization
    default_fill_value.stypy_type_of_self = None
    default_fill_value.stypy_type_store = module_type_store
    default_fill_value.stypy_function_name = 'default_fill_value'
    default_fill_value.stypy_param_names_list = ['obj']
    default_fill_value.stypy_varargs_param_name = None
    default_fill_value.stypy_kwargs_param_name = None
    default_fill_value.stypy_call_defaults = defaults
    default_fill_value.stypy_call_varargs = varargs
    default_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'default_fill_value', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'default_fill_value', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'default_fill_value(...)' code ##################

    str_139577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, (-1)), 'str', "\n    Return the default fill value for the argument object.\n\n    The default filling value depends on the datatype of the input\n    array or the type of the input scalar:\n\n       ========  ========\n       datatype  default\n       ========  ========\n       bool      True\n       int       999999\n       float     1.e20\n       complex   1.e20+0j\n       object    '?'\n       string    'N/A'\n       ========  ========\n\n\n    Parameters\n    ----------\n    obj : ndarray, dtype or scalar\n        The array data-type or scalar for which the default fill value\n        is returned.\n\n    Returns\n    -------\n    fill_value : scalar\n        The default fill value.\n\n    Examples\n    --------\n    >>> np.ma.default_fill_value(1)\n    999999\n    >>> np.ma.default_fill_value(np.array([1.1, 2., np.pi]))\n    1e+20\n    >>> np.ma.default_fill_value(np.dtype(complex))\n    (1e+20+0j)\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 213)
    str_139578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 20), 'str', 'dtype')
    # Getting the type of 'obj' (line 213)
    obj_139579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 15), 'obj')
    
    (may_be_139580, more_types_in_union_139581) = may_provide_member(str_139578, obj_139579)

    if may_be_139580:

        if more_types_in_union_139581:
            # Runtime conditional SSA (line 213)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'obj' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 4), 'obj', remove_not_member_provider_from_union(obj_139579, 'dtype'))
        
        # Assigning a Call to a Name (line 214):
        
        # Assigning a Call to a Name (line 214):
        
        # Call to _check_fill_value(...): (line 214)
        # Processing the call arguments (line 214)
        # Getting the type of 'None' (line 214)
        None_139583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 35), 'None', False)
        # Getting the type of 'obj' (line 214)
        obj_139584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 41), 'obj', False)
        # Obtaining the member 'dtype' of a type (line 214)
        dtype_139585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 41), obj_139584, 'dtype')
        # Processing the call keyword arguments (line 214)
        kwargs_139586 = {}
        # Getting the type of '_check_fill_value' (line 214)
        _check_fill_value_139582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 17), '_check_fill_value', False)
        # Calling _check_fill_value(args, kwargs) (line 214)
        _check_fill_value_call_result_139587 = invoke(stypy.reporting.localization.Localization(__file__, 214, 17), _check_fill_value_139582, *[None_139583, dtype_139585], **kwargs_139586)
        
        # Assigning a type to the variable 'defval' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 8), 'defval', _check_fill_value_call_result_139587)

        if more_types_in_union_139581:
            # Runtime conditional SSA for else branch (line 213)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_139580) or more_types_in_union_139581):
        # Assigning a type to the variable 'obj' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 4), 'obj', remove_member_provider_from_union(obj_139579, 'dtype'))
        
        
        # Call to isinstance(...): (line 215)
        # Processing the call arguments (line 215)
        # Getting the type of 'obj' (line 215)
        obj_139589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 20), 'obj', False)
        # Getting the type of 'np' (line 215)
        np_139590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 25), 'np', False)
        # Obtaining the member 'dtype' of a type (line 215)
        dtype_139591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 25), np_139590, 'dtype')
        # Processing the call keyword arguments (line 215)
        kwargs_139592 = {}
        # Getting the type of 'isinstance' (line 215)
        isinstance_139588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 9), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 215)
        isinstance_call_result_139593 = invoke(stypy.reporting.localization.Localization(__file__, 215, 9), isinstance_139588, *[obj_139589, dtype_139591], **kwargs_139592)
        
        # Testing the type of an if condition (line 215)
        if_condition_139594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 215, 9), isinstance_call_result_139593)
        # Assigning a type to the variable 'if_condition_139594' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 9), 'if_condition_139594', if_condition_139594)
        # SSA begins for if statement (line 215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'obj' (line 216)
        obj_139595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 11), 'obj')
        # Obtaining the member 'subdtype' of a type (line 216)
        subdtype_139596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 11), obj_139595, 'subdtype')
        # Testing the type of an if condition (line 216)
        if_condition_139597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 216, 8), subdtype_139596)
        # Assigning a type to the variable 'if_condition_139597' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'if_condition_139597', if_condition_139597)
        # SSA begins for if statement (line 216)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 217):
        
        # Assigning a Call to a Name (line 217):
        
        # Call to get(...): (line 217)
        # Processing the call arguments (line 217)
        
        # Obtaining the type of the subscript
        int_139600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 53), 'int')
        # Getting the type of 'obj' (line 217)
        obj_139601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 40), 'obj', False)
        # Obtaining the member 'subdtype' of a type (line 217)
        subdtype_139602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 40), obj_139601, 'subdtype')
        # Obtaining the member '__getitem__' of a type (line 217)
        getitem___139603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 40), subdtype_139602, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 217)
        subscript_call_result_139604 = invoke(stypy.reporting.localization.Localization(__file__, 217, 40), getitem___139603, int_139600)
        
        # Obtaining the member 'kind' of a type (line 217)
        kind_139605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 40), subscript_call_result_139604, 'kind')
        str_139606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 62), 'str', '?')
        # Processing the call keyword arguments (line 217)
        kwargs_139607 = {}
        # Getting the type of 'default_filler' (line 217)
        default_filler_139598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 21), 'default_filler', False)
        # Obtaining the member 'get' of a type (line 217)
        get_139599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 21), default_filler_139598, 'get')
        # Calling get(args, kwargs) (line 217)
        get_call_result_139608 = invoke(stypy.reporting.localization.Localization(__file__, 217, 21), get_139599, *[kind_139605, str_139606], **kwargs_139607)
        
        # Assigning a type to the variable 'defval' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 12), 'defval', get_call_result_139608)
        # SSA branch for the else part of an if statement (line 216)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'obj' (line 218)
        obj_139609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 13), 'obj')
        # Obtaining the member 'kind' of a type (line 218)
        kind_139610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 13), obj_139609, 'kind')
        str_139611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 25), 'str', 'Mm')
        # Applying the binary operator 'in' (line 218)
        result_contains_139612 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 13), 'in', kind_139610, str_139611)
        
        # Testing the type of an if condition (line 218)
        if_condition_139613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 218, 13), result_contains_139612)
        # Assigning a type to the variable 'if_condition_139613' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 13), 'if_condition_139613', if_condition_139613)
        # SSA begins for if statement (line 218)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 219):
        
        # Assigning a Call to a Name (line 219):
        
        # Call to get(...): (line 219)
        # Processing the call arguments (line 219)
        
        # Obtaining the type of the subscript
        int_139616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 48), 'int')
        slice_139617 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 219, 40), int_139616, None, None)
        # Getting the type of 'obj' (line 219)
        obj_139618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 40), 'obj', False)
        # Obtaining the member 'str' of a type (line 219)
        str_139619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 40), obj_139618, 'str')
        # Obtaining the member '__getitem__' of a type (line 219)
        getitem___139620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 40), str_139619, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 219)
        subscript_call_result_139621 = invoke(stypy.reporting.localization.Localization(__file__, 219, 40), getitem___139620, slice_139617)
        
        str_139622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 53), 'str', '?')
        # Processing the call keyword arguments (line 219)
        kwargs_139623 = {}
        # Getting the type of 'default_filler' (line 219)
        default_filler_139614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 21), 'default_filler', False)
        # Obtaining the member 'get' of a type (line 219)
        get_139615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 21), default_filler_139614, 'get')
        # Calling get(args, kwargs) (line 219)
        get_call_result_139624 = invoke(stypy.reporting.localization.Localization(__file__, 219, 21), get_139615, *[subscript_call_result_139621, str_139622], **kwargs_139623)
        
        # Assigning a type to the variable 'defval' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 12), 'defval', get_call_result_139624)
        # SSA branch for the else part of an if statement (line 218)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 221):
        
        # Assigning a Call to a Name (line 221):
        
        # Call to get(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'obj' (line 221)
        obj_139627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 40), 'obj', False)
        # Obtaining the member 'kind' of a type (line 221)
        kind_139628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 40), obj_139627, 'kind')
        str_139629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 50), 'str', '?')
        # Processing the call keyword arguments (line 221)
        kwargs_139630 = {}
        # Getting the type of 'default_filler' (line 221)
        default_filler_139625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 21), 'default_filler', False)
        # Obtaining the member 'get' of a type (line 221)
        get_139626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 21), default_filler_139625, 'get')
        # Calling get(args, kwargs) (line 221)
        get_call_result_139631 = invoke(stypy.reporting.localization.Localization(__file__, 221, 21), get_139626, *[kind_139628, str_139629], **kwargs_139630)
        
        # Assigning a type to the variable 'defval' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 12), 'defval', get_call_result_139631)
        # SSA join for if statement (line 218)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 216)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 215)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 222)
        # Getting the type of 'float' (line 222)
        float_139632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 25), 'float')
        # Getting the type of 'obj' (line 222)
        obj_139633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 20), 'obj')
        
        (may_be_139634, more_types_in_union_139635) = may_be_subtype(float_139632, obj_139633)

        if may_be_139634:

            if more_types_in_union_139635:
                # Runtime conditional SSA (line 222)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'obj' (line 222)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 9), 'obj', remove_not_subtype_from_union(obj_139633, float))
            
            # Assigning a Subscript to a Name (line 223):
            
            # Assigning a Subscript to a Name (line 223):
            
            # Obtaining the type of the subscript
            str_139636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 32), 'str', 'f')
            # Getting the type of 'default_filler' (line 223)
            default_filler_139637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 17), 'default_filler')
            # Obtaining the member '__getitem__' of a type (line 223)
            getitem___139638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 17), default_filler_139637, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 223)
            subscript_call_result_139639 = invoke(stypy.reporting.localization.Localization(__file__, 223, 17), getitem___139638, str_139636)
            
            # Assigning a type to the variable 'defval' (line 223)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'defval', subscript_call_result_139639)

            if more_types_in_union_139635:
                # Runtime conditional SSA for else branch (line 222)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_139634) or more_types_in_union_139635):
            # Assigning a type to the variable 'obj' (line 222)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 9), 'obj', remove_subtype_from_union(obj_139633, float))
            
            
            # Evaluating a boolean operation
            
            # Call to isinstance(...): (line 224)
            # Processing the call arguments (line 224)
            # Getting the type of 'obj' (line 224)
            obj_139641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 20), 'obj', False)
            # Getting the type of 'int' (line 224)
            int_139642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 25), 'int', False)
            # Processing the call keyword arguments (line 224)
            kwargs_139643 = {}
            # Getting the type of 'isinstance' (line 224)
            isinstance_139640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 9), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 224)
            isinstance_call_result_139644 = invoke(stypy.reporting.localization.Localization(__file__, 224, 9), isinstance_139640, *[obj_139641, int_139642], **kwargs_139643)
            
            
            # Call to isinstance(...): (line 224)
            # Processing the call arguments (line 224)
            # Getting the type of 'obj' (line 224)
            obj_139646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 44), 'obj', False)
            # Getting the type of 'long' (line 224)
            long_139647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 49), 'long', False)
            # Processing the call keyword arguments (line 224)
            kwargs_139648 = {}
            # Getting the type of 'isinstance' (line 224)
            isinstance_139645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 33), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 224)
            isinstance_call_result_139649 = invoke(stypy.reporting.localization.Localization(__file__, 224, 33), isinstance_139645, *[obj_139646, long_139647], **kwargs_139648)
            
            # Applying the binary operator 'or' (line 224)
            result_or_keyword_139650 = python_operator(stypy.reporting.localization.Localization(__file__, 224, 9), 'or', isinstance_call_result_139644, isinstance_call_result_139649)
            
            # Testing the type of an if condition (line 224)
            if_condition_139651 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 224, 9), result_or_keyword_139650)
            # Assigning a type to the variable 'if_condition_139651' (line 224)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 9), 'if_condition_139651', if_condition_139651)
            # SSA begins for if statement (line 224)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 225):
            
            # Assigning a Subscript to a Name (line 225):
            
            # Obtaining the type of the subscript
            str_139652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 32), 'str', 'i')
            # Getting the type of 'default_filler' (line 225)
            default_filler_139653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 17), 'default_filler')
            # Obtaining the member '__getitem__' of a type (line 225)
            getitem___139654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 17), default_filler_139653, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 225)
            subscript_call_result_139655 = invoke(stypy.reporting.localization.Localization(__file__, 225, 17), getitem___139654, str_139652)
            
            # Assigning a type to the variable 'defval' (line 225)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'defval', subscript_call_result_139655)
            # SSA branch for the else part of an if statement (line 224)
            module_type_store.open_ssa_branch('else')
            
            # Type idiom detected: calculating its left and rigth part (line 226)
            # Getting the type of 'bytes' (line 226)
            bytes_139656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 25), 'bytes')
            # Getting the type of 'obj' (line 226)
            obj_139657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 20), 'obj')
            
            (may_be_139658, more_types_in_union_139659) = may_be_subtype(bytes_139656, obj_139657)

            if may_be_139658:

                if more_types_in_union_139659:
                    # Runtime conditional SSA (line 226)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'obj' (line 226)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 9), 'obj', remove_not_subtype_from_union(obj_139657, bytes))
                
                # Assigning a Subscript to a Name (line 227):
                
                # Assigning a Subscript to a Name (line 227):
                
                # Obtaining the type of the subscript
                str_139660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 32), 'str', 'S')
                # Getting the type of 'default_filler' (line 227)
                default_filler_139661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 17), 'default_filler')
                # Obtaining the member '__getitem__' of a type (line 227)
                getitem___139662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 17), default_filler_139661, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 227)
                subscript_call_result_139663 = invoke(stypy.reporting.localization.Localization(__file__, 227, 17), getitem___139662, str_139660)
                
                # Assigning a type to the variable 'defval' (line 227)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 8), 'defval', subscript_call_result_139663)

                if more_types_in_union_139659:
                    # Runtime conditional SSA for else branch (line 226)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_139658) or more_types_in_union_139659):
                # Assigning a type to the variable 'obj' (line 226)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 9), 'obj', remove_subtype_from_union(obj_139657, bytes))
                
                # Type idiom detected: calculating its left and rigth part (line 228)
                # Getting the type of 'unicode' (line 228)
                unicode_139664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 25), 'unicode')
                # Getting the type of 'obj' (line 228)
                obj_139665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 20), 'obj')
                
                (may_be_139666, more_types_in_union_139667) = may_be_subtype(unicode_139664, obj_139665)

                if may_be_139666:

                    if more_types_in_union_139667:
                        # Runtime conditional SSA (line 228)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    # Assigning a type to the variable 'obj' (line 228)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 9), 'obj', remove_not_subtype_from_union(obj_139665, unicode))
                    
                    # Assigning a Subscript to a Name (line 229):
                    
                    # Assigning a Subscript to a Name (line 229):
                    
                    # Obtaining the type of the subscript
                    str_139668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 32), 'str', 'U')
                    # Getting the type of 'default_filler' (line 229)
                    default_filler_139669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 17), 'default_filler')
                    # Obtaining the member '__getitem__' of a type (line 229)
                    getitem___139670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 17), default_filler_139669, '__getitem__')
                    # Calling the subscript (__getitem__) to obtain the elements type (line 229)
                    subscript_call_result_139671 = invoke(stypy.reporting.localization.Localization(__file__, 229, 17), getitem___139670, str_139668)
                    
                    # Assigning a type to the variable 'defval' (line 229)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'defval', subscript_call_result_139671)

                    if more_types_in_union_139667:
                        # Runtime conditional SSA for else branch (line 228)
                        module_type_store.open_ssa_branch('idiom else')



                if ((not may_be_139666) or more_types_in_union_139667):
                    # Assigning a type to the variable 'obj' (line 228)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 9), 'obj', remove_subtype_from_union(obj_139665, unicode))
                    
                    # Type idiom detected: calculating its left and rigth part (line 230)
                    # Getting the type of 'complex' (line 230)
                    complex_139672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 25), 'complex')
                    # Getting the type of 'obj' (line 230)
                    obj_139673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 20), 'obj')
                    
                    (may_be_139674, more_types_in_union_139675) = may_be_subtype(complex_139672, obj_139673)

                    if may_be_139674:

                        if more_types_in_union_139675:
                            # Runtime conditional SSA (line 230)
                            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                        else:
                            module_type_store = module_type_store

                        # Assigning a type to the variable 'obj' (line 230)
                        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 9), 'obj', remove_not_subtype_from_union(obj_139673, complex))
                        
                        # Assigning a Subscript to a Name (line 231):
                        
                        # Assigning a Subscript to a Name (line 231):
                        
                        # Obtaining the type of the subscript
                        str_139676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 32), 'str', 'c')
                        # Getting the type of 'default_filler' (line 231)
                        default_filler_139677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 17), 'default_filler')
                        # Obtaining the member '__getitem__' of a type (line 231)
                        getitem___139678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 17), default_filler_139677, '__getitem__')
                        # Calling the subscript (__getitem__) to obtain the elements type (line 231)
                        subscript_call_result_139679 = invoke(stypy.reporting.localization.Localization(__file__, 231, 17), getitem___139678, str_139676)
                        
                        # Assigning a type to the variable 'defval' (line 231)
                        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'defval', subscript_call_result_139679)

                        if more_types_in_union_139675:
                            # Runtime conditional SSA for else branch (line 230)
                            module_type_store.open_ssa_branch('idiom else')



                    if ((not may_be_139674) or more_types_in_union_139675):
                        # Assigning a type to the variable 'obj' (line 230)
                        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 9), 'obj', remove_subtype_from_union(obj_139673, complex))
                        
                        # Assigning a Subscript to a Name (line 233):
                        
                        # Assigning a Subscript to a Name (line 233):
                        
                        # Obtaining the type of the subscript
                        str_139680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 32), 'str', 'O')
                        # Getting the type of 'default_filler' (line 233)
                        default_filler_139681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 17), 'default_filler')
                        # Obtaining the member '__getitem__' of a type (line 233)
                        getitem___139682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 17), default_filler_139681, '__getitem__')
                        # Calling the subscript (__getitem__) to obtain the elements type (line 233)
                        subscript_call_result_139683 = invoke(stypy.reporting.localization.Localization(__file__, 233, 17), getitem___139682, str_139680)
                        
                        # Assigning a type to the variable 'defval' (line 233)
                        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'defval', subscript_call_result_139683)

                        if (may_be_139674 and more_types_in_union_139675):
                            # SSA join for if statement (line 230)
                            module_type_store = module_type_store.join_ssa_context()


                    

                    if (may_be_139666 and more_types_in_union_139667):
                        # SSA join for if statement (line 228)
                        module_type_store = module_type_store.join_ssa_context()


                

                if (may_be_139658 and more_types_in_union_139659):
                    # SSA join for if statement (line 226)
                    module_type_store = module_type_store.join_ssa_context()


            
            # SSA join for if statement (line 224)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_139634 and more_types_in_union_139635):
                # SSA join for if statement (line 222)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 215)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_139580 and more_types_in_union_139581):
            # SSA join for if statement (line 213)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'defval' (line 234)
    defval_139684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 11), 'defval')
    # Assigning a type to the variable 'stypy_return_type' (line 234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 4), 'stypy_return_type', defval_139684)
    
    # ################# End of 'default_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'default_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 173)
    stypy_return_type_139685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139685)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'default_fill_value'
    return stypy_return_type_139685

# Assigning a type to the variable 'default_fill_value' (line 173)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 0), 'default_fill_value', default_fill_value)

@norecursion
def _recursive_extremum_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_recursive_extremum_fill_value'
    module_type_store = module_type_store.open_function_context('_recursive_extremum_fill_value', 237, 0, False)
    
    # Passed parameters checking function
    _recursive_extremum_fill_value.stypy_localization = localization
    _recursive_extremum_fill_value.stypy_type_of_self = None
    _recursive_extremum_fill_value.stypy_type_store = module_type_store
    _recursive_extremum_fill_value.stypy_function_name = '_recursive_extremum_fill_value'
    _recursive_extremum_fill_value.stypy_param_names_list = ['ndtype', 'extremum']
    _recursive_extremum_fill_value.stypy_varargs_param_name = None
    _recursive_extremum_fill_value.stypy_kwargs_param_name = None
    _recursive_extremum_fill_value.stypy_call_defaults = defaults
    _recursive_extremum_fill_value.stypy_call_varargs = varargs
    _recursive_extremum_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_recursive_extremum_fill_value', ['ndtype', 'extremum'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_recursive_extremum_fill_value', localization, ['ndtype', 'extremum'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_recursive_extremum_fill_value(...)' code ##################

    
    # Assigning a Attribute to a Name (line 238):
    
    # Assigning a Attribute to a Name (line 238):
    # Getting the type of 'ndtype' (line 238)
    ndtype_139686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 12), 'ndtype')
    # Obtaining the member 'names' of a type (line 238)
    names_139687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 12), ndtype_139686, 'names')
    # Assigning a type to the variable 'names' (line 238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'names', names_139687)
    
    # Getting the type of 'names' (line 239)
    names_139688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 7), 'names')
    # Testing the type of an if condition (line 239)
    if_condition_139689 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 239, 4), names_139688)
    # Assigning a type to the variable 'if_condition_139689' (line 239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 4), 'if_condition_139689', if_condition_139689)
    # SSA begins for if statement (line 239)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 240):
    
    # Assigning a List to a Name (line 240):
    
    # Obtaining an instance of the builtin type 'list' (line 240)
    list_139690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 240)
    
    # Assigning a type to the variable 'deflist' (line 240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'deflist', list_139690)
    
    # Getting the type of 'names' (line 241)
    names_139691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 20), 'names')
    # Testing the type of a for loop iterable (line 241)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 241, 8), names_139691)
    # Getting the type of the for loop variable (line 241)
    for_loop_var_139692 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 241, 8), names_139691)
    # Assigning a type to the variable 'name' (line 241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'name', for_loop_var_139692)
    # SSA begins for a for statement (line 241)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 242):
    
    # Assigning a Call to a Name (line 242):
    
    # Call to _recursive_extremum_fill_value(...): (line 242)
    # Processing the call arguments (line 242)
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 242)
    name_139694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 57), 'name', False)
    # Getting the type of 'ndtype' (line 242)
    ndtype_139695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 50), 'ndtype', False)
    # Obtaining the member '__getitem__' of a type (line 242)
    getitem___139696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 50), ndtype_139695, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 242)
    subscript_call_result_139697 = invoke(stypy.reporting.localization.Localization(__file__, 242, 50), getitem___139696, name_139694)
    
    # Getting the type of 'extremum' (line 242)
    extremum_139698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 64), 'extremum', False)
    # Processing the call keyword arguments (line 242)
    kwargs_139699 = {}
    # Getting the type of '_recursive_extremum_fill_value' (line 242)
    _recursive_extremum_fill_value_139693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 19), '_recursive_extremum_fill_value', False)
    # Calling _recursive_extremum_fill_value(args, kwargs) (line 242)
    _recursive_extremum_fill_value_call_result_139700 = invoke(stypy.reporting.localization.Localization(__file__, 242, 19), _recursive_extremum_fill_value_139693, *[subscript_call_result_139697, extremum_139698], **kwargs_139699)
    
    # Assigning a type to the variable 'fval' (line 242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 12), 'fval', _recursive_extremum_fill_value_call_result_139700)
    
    # Call to append(...): (line 243)
    # Processing the call arguments (line 243)
    # Getting the type of 'fval' (line 243)
    fval_139703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 27), 'fval', False)
    # Processing the call keyword arguments (line 243)
    kwargs_139704 = {}
    # Getting the type of 'deflist' (line 243)
    deflist_139701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 12), 'deflist', False)
    # Obtaining the member 'append' of a type (line 243)
    append_139702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 12), deflist_139701, 'append')
    # Calling append(args, kwargs) (line 243)
    append_call_result_139705 = invoke(stypy.reporting.localization.Localization(__file__, 243, 12), append_139702, *[fval_139703], **kwargs_139704)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to tuple(...): (line 244)
    # Processing the call arguments (line 244)
    # Getting the type of 'deflist' (line 244)
    deflist_139707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 21), 'deflist', False)
    # Processing the call keyword arguments (line 244)
    kwargs_139708 = {}
    # Getting the type of 'tuple' (line 244)
    tuple_139706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 15), 'tuple', False)
    # Calling tuple(args, kwargs) (line 244)
    tuple_call_result_139709 = invoke(stypy.reporting.localization.Localization(__file__, 244, 15), tuple_139706, *[deflist_139707], **kwargs_139708)
    
    # Assigning a type to the variable 'stypy_return_type' (line 244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'stypy_return_type', tuple_call_result_139709)
    # SSA join for if statement (line 239)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ndtype' (line 245)
    ndtype_139710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 20), 'ndtype')
    # Getting the type of 'extremum' (line 245)
    extremum_139711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 11), 'extremum')
    # Obtaining the member '__getitem__' of a type (line 245)
    getitem___139712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 11), extremum_139711, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 245)
    subscript_call_result_139713 = invoke(stypy.reporting.localization.Localization(__file__, 245, 11), getitem___139712, ndtype_139710)
    
    # Assigning a type to the variable 'stypy_return_type' (line 245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 4), 'stypy_return_type', subscript_call_result_139713)
    
    # ################# End of '_recursive_extremum_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_recursive_extremum_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 237)
    stypy_return_type_139714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139714)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_recursive_extremum_fill_value'
    return stypy_return_type_139714

# Assigning a type to the variable '_recursive_extremum_fill_value' (line 237)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 0), '_recursive_extremum_fill_value', _recursive_extremum_fill_value)

@norecursion
def minimum_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'minimum_fill_value'
    module_type_store = module_type_store.open_function_context('minimum_fill_value', 248, 0, False)
    
    # Passed parameters checking function
    minimum_fill_value.stypy_localization = localization
    minimum_fill_value.stypy_type_of_self = None
    minimum_fill_value.stypy_type_store = module_type_store
    minimum_fill_value.stypy_function_name = 'minimum_fill_value'
    minimum_fill_value.stypy_param_names_list = ['obj']
    minimum_fill_value.stypy_varargs_param_name = None
    minimum_fill_value.stypy_kwargs_param_name = None
    minimum_fill_value.stypy_call_defaults = defaults
    minimum_fill_value.stypy_call_varargs = varargs
    minimum_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'minimum_fill_value', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'minimum_fill_value', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'minimum_fill_value(...)' code ##################

    str_139715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, (-1)), 'str', "\n    Return the maximum value that can be represented by the dtype of an object.\n\n    This function is useful for calculating a fill value suitable for\n    taking the minimum of an array with a given dtype.\n\n    Parameters\n    ----------\n    obj : ndarray or dtype\n        An object that can be queried for it's numeric type.\n\n    Returns\n    -------\n    val : scalar\n        The maximum representable value.\n\n    Raises\n    ------\n    TypeError\n        If `obj` isn't a suitable numeric type.\n\n    See Also\n    --------\n    maximum_fill_value : The inverse function.\n    set_fill_value : Set the filling value of a masked array.\n    MaskedArray.fill_value : Return current fill value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.int8()\n    >>> ma.minimum_fill_value(a)\n    127\n    >>> a = np.int32()\n    >>> ma.minimum_fill_value(a)\n    2147483647\n\n    An array of numeric data can also be passed.\n\n    >>> a = np.array([1, 2, 3], dtype=np.int8)\n    >>> ma.minimum_fill_value(a)\n    127\n    >>> a = np.array([1, 2, 3], dtype=np.float32)\n    >>> ma.minimum_fill_value(a)\n    inf\n\n    ")
    
    # Assigning a Str to a Name (line 296):
    
    # Assigning a Str to a Name (line 296):
    str_139716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 13), 'str', 'Unsuitable type for calculating minimum.')
    # Assigning a type to the variable 'errmsg' (line 296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 4), 'errmsg', str_139716)
    
    # Type idiom detected: calculating its left and rigth part (line 297)
    str_139717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 20), 'str', 'dtype')
    # Getting the type of 'obj' (line 297)
    obj_139718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 15), 'obj')
    
    (may_be_139719, more_types_in_union_139720) = may_provide_member(str_139717, obj_139718)

    if may_be_139719:

        if more_types_in_union_139720:
            # Runtime conditional SSA (line 297)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'obj' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'obj', remove_not_member_provider_from_union(obj_139718, 'dtype'))
        
        # Call to _recursive_extremum_fill_value(...): (line 298)
        # Processing the call arguments (line 298)
        # Getting the type of 'obj' (line 298)
        obj_139722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 46), 'obj', False)
        # Obtaining the member 'dtype' of a type (line 298)
        dtype_139723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 46), obj_139722, 'dtype')
        # Getting the type of 'min_filler' (line 298)
        min_filler_139724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 57), 'min_filler', False)
        # Processing the call keyword arguments (line 298)
        kwargs_139725 = {}
        # Getting the type of '_recursive_extremum_fill_value' (line 298)
        _recursive_extremum_fill_value_139721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 15), '_recursive_extremum_fill_value', False)
        # Calling _recursive_extremum_fill_value(args, kwargs) (line 298)
        _recursive_extremum_fill_value_call_result_139726 = invoke(stypy.reporting.localization.Localization(__file__, 298, 15), _recursive_extremum_fill_value_139721, *[dtype_139723, min_filler_139724], **kwargs_139725)
        
        # Assigning a type to the variable 'stypy_return_type' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'stypy_return_type', _recursive_extremum_fill_value_call_result_139726)

        if more_types_in_union_139720:
            # Runtime conditional SSA for else branch (line 297)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_139719) or more_types_in_union_139720):
        # Assigning a type to the variable 'obj' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 4), 'obj', remove_member_provider_from_union(obj_139718, 'dtype'))
        
        # Type idiom detected: calculating its left and rigth part (line 299)
        # Getting the type of 'float' (line 299)
        float_139727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 25), 'float')
        # Getting the type of 'obj' (line 299)
        obj_139728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 20), 'obj')
        
        (may_be_139729, more_types_in_union_139730) = may_be_subtype(float_139727, obj_139728)

        if may_be_139729:

            if more_types_in_union_139730:
                # Runtime conditional SSA (line 299)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'obj' (line 299)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 9), 'obj', remove_not_subtype_from_union(obj_139728, float))
            
            # Obtaining the type of the subscript
            
            # Obtaining the type of the subscript
            str_139731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 42), 'str', 'float_')
            # Getting the type of 'ntypes' (line 300)
            ntypes_139732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 26), 'ntypes')
            # Obtaining the member 'typeDict' of a type (line 300)
            typeDict_139733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 26), ntypes_139732, 'typeDict')
            # Obtaining the member '__getitem__' of a type (line 300)
            getitem___139734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 26), typeDict_139733, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 300)
            subscript_call_result_139735 = invoke(stypy.reporting.localization.Localization(__file__, 300, 26), getitem___139734, str_139731)
            
            # Getting the type of 'min_filler' (line 300)
            min_filler_139736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 15), 'min_filler')
            # Obtaining the member '__getitem__' of a type (line 300)
            getitem___139737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 15), min_filler_139736, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 300)
            subscript_call_result_139738 = invoke(stypy.reporting.localization.Localization(__file__, 300, 15), getitem___139737, subscript_call_result_139735)
            
            # Assigning a type to the variable 'stypy_return_type' (line 300)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 8), 'stypy_return_type', subscript_call_result_139738)

            if more_types_in_union_139730:
                # Runtime conditional SSA for else branch (line 299)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_139729) or more_types_in_union_139730):
            # Assigning a type to the variable 'obj' (line 299)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 9), 'obj', remove_subtype_from_union(obj_139728, float))
            
            # Type idiom detected: calculating its left and rigth part (line 301)
            # Getting the type of 'int' (line 301)
            int_139739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 25), 'int')
            # Getting the type of 'obj' (line 301)
            obj_139740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 20), 'obj')
            
            (may_be_139741, more_types_in_union_139742) = may_be_subtype(int_139739, obj_139740)

            if may_be_139741:

                if more_types_in_union_139742:
                    # Runtime conditional SSA (line 301)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'obj' (line 301)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 9), 'obj', remove_not_subtype_from_union(obj_139740, int))
                
                # Obtaining the type of the subscript
                
                # Obtaining the type of the subscript
                str_139743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 42), 'str', 'int_')
                # Getting the type of 'ntypes' (line 302)
                ntypes_139744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 26), 'ntypes')
                # Obtaining the member 'typeDict' of a type (line 302)
                typeDict_139745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 26), ntypes_139744, 'typeDict')
                # Obtaining the member '__getitem__' of a type (line 302)
                getitem___139746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 26), typeDict_139745, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 302)
                subscript_call_result_139747 = invoke(stypy.reporting.localization.Localization(__file__, 302, 26), getitem___139746, str_139743)
                
                # Getting the type of 'min_filler' (line 302)
                min_filler_139748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 15), 'min_filler')
                # Obtaining the member '__getitem__' of a type (line 302)
                getitem___139749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 15), min_filler_139748, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 302)
                subscript_call_result_139750 = invoke(stypy.reporting.localization.Localization(__file__, 302, 15), getitem___139749, subscript_call_result_139747)
                
                # Assigning a type to the variable 'stypy_return_type' (line 302)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 8), 'stypy_return_type', subscript_call_result_139750)

                if more_types_in_union_139742:
                    # Runtime conditional SSA for else branch (line 301)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_139741) or more_types_in_union_139742):
                # Assigning a type to the variable 'obj' (line 301)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 9), 'obj', remove_subtype_from_union(obj_139740, int))
                
                # Type idiom detected: calculating its left and rigth part (line 303)
                # Getting the type of 'long' (line 303)
                long_139751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 25), 'long')
                # Getting the type of 'obj' (line 303)
                obj_139752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 20), 'obj')
                
                (may_be_139753, more_types_in_union_139754) = may_be_subtype(long_139751, obj_139752)

                if may_be_139753:

                    if more_types_in_union_139754:
                        # Runtime conditional SSA (line 303)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    # Assigning a type to the variable 'obj' (line 303)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 9), 'obj', remove_not_subtype_from_union(obj_139752, long))
                    
                    # Obtaining the type of the subscript
                    
                    # Obtaining the type of the subscript
                    str_139755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 42), 'str', 'uint')
                    # Getting the type of 'ntypes' (line 304)
                    ntypes_139756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 26), 'ntypes')
                    # Obtaining the member 'typeDict' of a type (line 304)
                    typeDict_139757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 26), ntypes_139756, 'typeDict')
                    # Obtaining the member '__getitem__' of a type (line 304)
                    getitem___139758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 26), typeDict_139757, '__getitem__')
                    # Calling the subscript (__getitem__) to obtain the elements type (line 304)
                    subscript_call_result_139759 = invoke(stypy.reporting.localization.Localization(__file__, 304, 26), getitem___139758, str_139755)
                    
                    # Getting the type of 'min_filler' (line 304)
                    min_filler_139760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 15), 'min_filler')
                    # Obtaining the member '__getitem__' of a type (line 304)
                    getitem___139761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 15), min_filler_139760, '__getitem__')
                    # Calling the subscript (__getitem__) to obtain the elements type (line 304)
                    subscript_call_result_139762 = invoke(stypy.reporting.localization.Localization(__file__, 304, 15), getitem___139761, subscript_call_result_139759)
                    
                    # Assigning a type to the variable 'stypy_return_type' (line 304)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 8), 'stypy_return_type', subscript_call_result_139762)

                    if more_types_in_union_139754:
                        # Runtime conditional SSA for else branch (line 303)
                        module_type_store.open_ssa_branch('idiom else')



                if ((not may_be_139753) or more_types_in_union_139754):
                    # Assigning a type to the variable 'obj' (line 303)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 9), 'obj', remove_subtype_from_union(obj_139752, long))
                    
                    
                    # Call to isinstance(...): (line 305)
                    # Processing the call arguments (line 305)
                    # Getting the type of 'obj' (line 305)
                    obj_139764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 20), 'obj', False)
                    # Getting the type of 'np' (line 305)
                    np_139765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 25), 'np', False)
                    # Obtaining the member 'dtype' of a type (line 305)
                    dtype_139766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 25), np_139765, 'dtype')
                    # Processing the call keyword arguments (line 305)
                    kwargs_139767 = {}
                    # Getting the type of 'isinstance' (line 305)
                    isinstance_139763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 9), 'isinstance', False)
                    # Calling isinstance(args, kwargs) (line 305)
                    isinstance_call_result_139768 = invoke(stypy.reporting.localization.Localization(__file__, 305, 9), isinstance_139763, *[obj_139764, dtype_139766], **kwargs_139767)
                    
                    # Testing the type of an if condition (line 305)
                    if_condition_139769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 305, 9), isinstance_call_result_139768)
                    # Assigning a type to the variable 'if_condition_139769' (line 305)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 9), 'if_condition_139769', if_condition_139769)
                    # SSA begins for if statement (line 305)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Obtaining the type of the subscript
                    # Getting the type of 'obj' (line 306)
                    obj_139770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 26), 'obj')
                    # Getting the type of 'min_filler' (line 306)
                    min_filler_139771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 15), 'min_filler')
                    # Obtaining the member '__getitem__' of a type (line 306)
                    getitem___139772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 15), min_filler_139771, '__getitem__')
                    # Calling the subscript (__getitem__) to obtain the elements type (line 306)
                    subscript_call_result_139773 = invoke(stypy.reporting.localization.Localization(__file__, 306, 15), getitem___139772, obj_139770)
                    
                    # Assigning a type to the variable 'stypy_return_type' (line 306)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'stypy_return_type', subscript_call_result_139773)
                    # SSA branch for the else part of an if statement (line 305)
                    module_type_store.open_ssa_branch('else')
                    
                    # Call to TypeError(...): (line 308)
                    # Processing the call arguments (line 308)
                    # Getting the type of 'errmsg' (line 308)
                    errmsg_139775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 24), 'errmsg', False)
                    # Processing the call keyword arguments (line 308)
                    kwargs_139776 = {}
                    # Getting the type of 'TypeError' (line 308)
                    TypeError_139774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 14), 'TypeError', False)
                    # Calling TypeError(args, kwargs) (line 308)
                    TypeError_call_result_139777 = invoke(stypy.reporting.localization.Localization(__file__, 308, 14), TypeError_139774, *[errmsg_139775], **kwargs_139776)
                    
                    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 308, 8), TypeError_call_result_139777, 'raise parameter', BaseException)
                    # SSA join for if statement (line 305)
                    module_type_store = module_type_store.join_ssa_context()
                    

                    if (may_be_139753 and more_types_in_union_139754):
                        # SSA join for if statement (line 303)
                        module_type_store = module_type_store.join_ssa_context()


                

                if (may_be_139741 and more_types_in_union_139742):
                    # SSA join for if statement (line 301)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_139729 and more_types_in_union_139730):
                # SSA join for if statement (line 299)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_139719 and more_types_in_union_139720):
            # SSA join for if statement (line 297)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'minimum_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'minimum_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 248)
    stypy_return_type_139778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139778)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'minimum_fill_value'
    return stypy_return_type_139778

# Assigning a type to the variable 'minimum_fill_value' (line 248)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 0), 'minimum_fill_value', minimum_fill_value)

@norecursion
def maximum_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'maximum_fill_value'
    module_type_store = module_type_store.open_function_context('maximum_fill_value', 311, 0, False)
    
    # Passed parameters checking function
    maximum_fill_value.stypy_localization = localization
    maximum_fill_value.stypy_type_of_self = None
    maximum_fill_value.stypy_type_store = module_type_store
    maximum_fill_value.stypy_function_name = 'maximum_fill_value'
    maximum_fill_value.stypy_param_names_list = ['obj']
    maximum_fill_value.stypy_varargs_param_name = None
    maximum_fill_value.stypy_kwargs_param_name = None
    maximum_fill_value.stypy_call_defaults = defaults
    maximum_fill_value.stypy_call_varargs = varargs
    maximum_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'maximum_fill_value', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'maximum_fill_value', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'maximum_fill_value(...)' code ##################

    str_139779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, (-1)), 'str', "\n    Return the minimum value that can be represented by the dtype of an object.\n\n    This function is useful for calculating a fill value suitable for\n    taking the maximum of an array with a given dtype.\n\n    Parameters\n    ----------\n    obj : {ndarray, dtype}\n        An object that can be queried for it's numeric type.\n\n    Returns\n    -------\n    val : scalar\n        The minimum representable value.\n\n    Raises\n    ------\n    TypeError\n        If `obj` isn't a suitable numeric type.\n\n    See Also\n    --------\n    minimum_fill_value : The inverse function.\n    set_fill_value : Set the filling value of a masked array.\n    MaskedArray.fill_value : Return current fill value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.int8()\n    >>> ma.maximum_fill_value(a)\n    -128\n    >>> a = np.int32()\n    >>> ma.maximum_fill_value(a)\n    -2147483648\n\n    An array of numeric data can also be passed.\n\n    >>> a = np.array([1, 2, 3], dtype=np.int8)\n    >>> ma.maximum_fill_value(a)\n    -128\n    >>> a = np.array([1, 2, 3], dtype=np.float32)\n    >>> ma.maximum_fill_value(a)\n    -inf\n\n    ")
    
    # Assigning a Str to a Name (line 359):
    
    # Assigning a Str to a Name (line 359):
    str_139780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 13), 'str', 'Unsuitable type for calculating maximum.')
    # Assigning a type to the variable 'errmsg' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'errmsg', str_139780)
    
    # Type idiom detected: calculating its left and rigth part (line 360)
    str_139781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 20), 'str', 'dtype')
    # Getting the type of 'obj' (line 360)
    obj_139782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 15), 'obj')
    
    (may_be_139783, more_types_in_union_139784) = may_provide_member(str_139781, obj_139782)

    if may_be_139783:

        if more_types_in_union_139784:
            # Runtime conditional SSA (line 360)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'obj' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'obj', remove_not_member_provider_from_union(obj_139782, 'dtype'))
        
        # Call to _recursive_extremum_fill_value(...): (line 361)
        # Processing the call arguments (line 361)
        # Getting the type of 'obj' (line 361)
        obj_139786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 46), 'obj', False)
        # Obtaining the member 'dtype' of a type (line 361)
        dtype_139787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 46), obj_139786, 'dtype')
        # Getting the type of 'max_filler' (line 361)
        max_filler_139788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 57), 'max_filler', False)
        # Processing the call keyword arguments (line 361)
        kwargs_139789 = {}
        # Getting the type of '_recursive_extremum_fill_value' (line 361)
        _recursive_extremum_fill_value_139785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 15), '_recursive_extremum_fill_value', False)
        # Calling _recursive_extremum_fill_value(args, kwargs) (line 361)
        _recursive_extremum_fill_value_call_result_139790 = invoke(stypy.reporting.localization.Localization(__file__, 361, 15), _recursive_extremum_fill_value_139785, *[dtype_139787, max_filler_139788], **kwargs_139789)
        
        # Assigning a type to the variable 'stypy_return_type' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'stypy_return_type', _recursive_extremum_fill_value_call_result_139790)

        if more_types_in_union_139784:
            # Runtime conditional SSA for else branch (line 360)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_139783) or more_types_in_union_139784):
        # Assigning a type to the variable 'obj' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'obj', remove_member_provider_from_union(obj_139782, 'dtype'))
        
        # Type idiom detected: calculating its left and rigth part (line 362)
        # Getting the type of 'float' (line 362)
        float_139791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 25), 'float')
        # Getting the type of 'obj' (line 362)
        obj_139792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 20), 'obj')
        
        (may_be_139793, more_types_in_union_139794) = may_be_subtype(float_139791, obj_139792)

        if may_be_139793:

            if more_types_in_union_139794:
                # Runtime conditional SSA (line 362)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'obj' (line 362)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 9), 'obj', remove_not_subtype_from_union(obj_139792, float))
            
            # Obtaining the type of the subscript
            
            # Obtaining the type of the subscript
            str_139795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 42), 'str', 'float_')
            # Getting the type of 'ntypes' (line 363)
            ntypes_139796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 26), 'ntypes')
            # Obtaining the member 'typeDict' of a type (line 363)
            typeDict_139797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 26), ntypes_139796, 'typeDict')
            # Obtaining the member '__getitem__' of a type (line 363)
            getitem___139798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 26), typeDict_139797, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 363)
            subscript_call_result_139799 = invoke(stypy.reporting.localization.Localization(__file__, 363, 26), getitem___139798, str_139795)
            
            # Getting the type of 'max_filler' (line 363)
            max_filler_139800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 15), 'max_filler')
            # Obtaining the member '__getitem__' of a type (line 363)
            getitem___139801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 15), max_filler_139800, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 363)
            subscript_call_result_139802 = invoke(stypy.reporting.localization.Localization(__file__, 363, 15), getitem___139801, subscript_call_result_139799)
            
            # Assigning a type to the variable 'stypy_return_type' (line 363)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 8), 'stypy_return_type', subscript_call_result_139802)

            if more_types_in_union_139794:
                # Runtime conditional SSA for else branch (line 362)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_139793) or more_types_in_union_139794):
            # Assigning a type to the variable 'obj' (line 362)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 9), 'obj', remove_subtype_from_union(obj_139792, float))
            
            # Type idiom detected: calculating its left and rigth part (line 364)
            # Getting the type of 'int' (line 364)
            int_139803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 25), 'int')
            # Getting the type of 'obj' (line 364)
            obj_139804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 20), 'obj')
            
            (may_be_139805, more_types_in_union_139806) = may_be_subtype(int_139803, obj_139804)

            if may_be_139805:

                if more_types_in_union_139806:
                    # Runtime conditional SSA (line 364)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'obj' (line 364)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 9), 'obj', remove_not_subtype_from_union(obj_139804, int))
                
                # Obtaining the type of the subscript
                
                # Obtaining the type of the subscript
                str_139807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 42), 'str', 'int_')
                # Getting the type of 'ntypes' (line 365)
                ntypes_139808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 26), 'ntypes')
                # Obtaining the member 'typeDict' of a type (line 365)
                typeDict_139809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 26), ntypes_139808, 'typeDict')
                # Obtaining the member '__getitem__' of a type (line 365)
                getitem___139810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 26), typeDict_139809, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 365)
                subscript_call_result_139811 = invoke(stypy.reporting.localization.Localization(__file__, 365, 26), getitem___139810, str_139807)
                
                # Getting the type of 'max_filler' (line 365)
                max_filler_139812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 15), 'max_filler')
                # Obtaining the member '__getitem__' of a type (line 365)
                getitem___139813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 15), max_filler_139812, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 365)
                subscript_call_result_139814 = invoke(stypy.reporting.localization.Localization(__file__, 365, 15), getitem___139813, subscript_call_result_139811)
                
                # Assigning a type to the variable 'stypy_return_type' (line 365)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'stypy_return_type', subscript_call_result_139814)

                if more_types_in_union_139806:
                    # Runtime conditional SSA for else branch (line 364)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_139805) or more_types_in_union_139806):
                # Assigning a type to the variable 'obj' (line 364)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 9), 'obj', remove_subtype_from_union(obj_139804, int))
                
                # Type idiom detected: calculating its left and rigth part (line 366)
                # Getting the type of 'long' (line 366)
                long_139815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 25), 'long')
                # Getting the type of 'obj' (line 366)
                obj_139816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 20), 'obj')
                
                (may_be_139817, more_types_in_union_139818) = may_be_subtype(long_139815, obj_139816)

                if may_be_139817:

                    if more_types_in_union_139818:
                        # Runtime conditional SSA (line 366)
                        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                    else:
                        module_type_store = module_type_store

                    # Assigning a type to the variable 'obj' (line 366)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 9), 'obj', remove_not_subtype_from_union(obj_139816, long))
                    
                    # Obtaining the type of the subscript
                    
                    # Obtaining the type of the subscript
                    str_139819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 42), 'str', 'uint')
                    # Getting the type of 'ntypes' (line 367)
                    ntypes_139820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 26), 'ntypes')
                    # Obtaining the member 'typeDict' of a type (line 367)
                    typeDict_139821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 26), ntypes_139820, 'typeDict')
                    # Obtaining the member '__getitem__' of a type (line 367)
                    getitem___139822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 26), typeDict_139821, '__getitem__')
                    # Calling the subscript (__getitem__) to obtain the elements type (line 367)
                    subscript_call_result_139823 = invoke(stypy.reporting.localization.Localization(__file__, 367, 26), getitem___139822, str_139819)
                    
                    # Getting the type of 'max_filler' (line 367)
                    max_filler_139824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 15), 'max_filler')
                    # Obtaining the member '__getitem__' of a type (line 367)
                    getitem___139825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 15), max_filler_139824, '__getitem__')
                    # Calling the subscript (__getitem__) to obtain the elements type (line 367)
                    subscript_call_result_139826 = invoke(stypy.reporting.localization.Localization(__file__, 367, 15), getitem___139825, subscript_call_result_139823)
                    
                    # Assigning a type to the variable 'stypy_return_type' (line 367)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'stypy_return_type', subscript_call_result_139826)

                    if more_types_in_union_139818:
                        # Runtime conditional SSA for else branch (line 366)
                        module_type_store.open_ssa_branch('idiom else')



                if ((not may_be_139817) or more_types_in_union_139818):
                    # Assigning a type to the variable 'obj' (line 366)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 9), 'obj', remove_subtype_from_union(obj_139816, long))
                    
                    
                    # Call to isinstance(...): (line 368)
                    # Processing the call arguments (line 368)
                    # Getting the type of 'obj' (line 368)
                    obj_139828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 20), 'obj', False)
                    # Getting the type of 'np' (line 368)
                    np_139829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 25), 'np', False)
                    # Obtaining the member 'dtype' of a type (line 368)
                    dtype_139830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 25), np_139829, 'dtype')
                    # Processing the call keyword arguments (line 368)
                    kwargs_139831 = {}
                    # Getting the type of 'isinstance' (line 368)
                    isinstance_139827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 9), 'isinstance', False)
                    # Calling isinstance(args, kwargs) (line 368)
                    isinstance_call_result_139832 = invoke(stypy.reporting.localization.Localization(__file__, 368, 9), isinstance_139827, *[obj_139828, dtype_139830], **kwargs_139831)
                    
                    # Testing the type of an if condition (line 368)
                    if_condition_139833 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 368, 9), isinstance_call_result_139832)
                    # Assigning a type to the variable 'if_condition_139833' (line 368)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 9), 'if_condition_139833', if_condition_139833)
                    # SSA begins for if statement (line 368)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                    
                    # Obtaining the type of the subscript
                    # Getting the type of 'obj' (line 369)
                    obj_139834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 26), 'obj')
                    # Getting the type of 'max_filler' (line 369)
                    max_filler_139835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 15), 'max_filler')
                    # Obtaining the member '__getitem__' of a type (line 369)
                    getitem___139836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 15), max_filler_139835, '__getitem__')
                    # Calling the subscript (__getitem__) to obtain the elements type (line 369)
                    subscript_call_result_139837 = invoke(stypy.reporting.localization.Localization(__file__, 369, 15), getitem___139836, obj_139834)
                    
                    # Assigning a type to the variable 'stypy_return_type' (line 369)
                    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 8), 'stypy_return_type', subscript_call_result_139837)
                    # SSA branch for the else part of an if statement (line 368)
                    module_type_store.open_ssa_branch('else')
                    
                    # Call to TypeError(...): (line 371)
                    # Processing the call arguments (line 371)
                    # Getting the type of 'errmsg' (line 371)
                    errmsg_139839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 24), 'errmsg', False)
                    # Processing the call keyword arguments (line 371)
                    kwargs_139840 = {}
                    # Getting the type of 'TypeError' (line 371)
                    TypeError_139838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 14), 'TypeError', False)
                    # Calling TypeError(args, kwargs) (line 371)
                    TypeError_call_result_139841 = invoke(stypy.reporting.localization.Localization(__file__, 371, 14), TypeError_139838, *[errmsg_139839], **kwargs_139840)
                    
                    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 371, 8), TypeError_call_result_139841, 'raise parameter', BaseException)
                    # SSA join for if statement (line 368)
                    module_type_store = module_type_store.join_ssa_context()
                    

                    if (may_be_139817 and more_types_in_union_139818):
                        # SSA join for if statement (line 366)
                        module_type_store = module_type_store.join_ssa_context()


                

                if (may_be_139805 and more_types_in_union_139806):
                    # SSA join for if statement (line 364)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_139793 and more_types_in_union_139794):
                # SSA join for if statement (line 362)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_139783 and more_types_in_union_139784):
            # SSA join for if statement (line 360)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'maximum_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'maximum_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 311)
    stypy_return_type_139842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139842)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'maximum_fill_value'
    return stypy_return_type_139842

# Assigning a type to the variable 'maximum_fill_value' (line 311)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 0), 'maximum_fill_value', maximum_fill_value)

@norecursion
def _recursive_set_default_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_recursive_set_default_fill_value'
    module_type_store = module_type_store.open_function_context('_recursive_set_default_fill_value', 374, 0, False)
    
    # Passed parameters checking function
    _recursive_set_default_fill_value.stypy_localization = localization
    _recursive_set_default_fill_value.stypy_type_of_self = None
    _recursive_set_default_fill_value.stypy_type_store = module_type_store
    _recursive_set_default_fill_value.stypy_function_name = '_recursive_set_default_fill_value'
    _recursive_set_default_fill_value.stypy_param_names_list = ['dtypedescr']
    _recursive_set_default_fill_value.stypy_varargs_param_name = None
    _recursive_set_default_fill_value.stypy_kwargs_param_name = None
    _recursive_set_default_fill_value.stypy_call_defaults = defaults
    _recursive_set_default_fill_value.stypy_call_varargs = varargs
    _recursive_set_default_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_recursive_set_default_fill_value', ['dtypedescr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_recursive_set_default_fill_value', localization, ['dtypedescr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_recursive_set_default_fill_value(...)' code ##################

    
    # Assigning a List to a Name (line 375):
    
    # Assigning a List to a Name (line 375):
    
    # Obtaining an instance of the builtin type 'list' (line 375)
    list_139843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 375)
    
    # Assigning a type to the variable 'deflist' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'deflist', list_139843)
    
    # Getting the type of 'dtypedescr' (line 376)
    dtypedescr_139844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 24), 'dtypedescr')
    # Testing the type of a for loop iterable (line 376)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 376, 4), dtypedescr_139844)
    # Getting the type of the for loop variable (line 376)
    for_loop_var_139845 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 376, 4), dtypedescr_139844)
    # Assigning a type to the variable 'currentdescr' (line 376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'currentdescr', for_loop_var_139845)
    # SSA begins for a for statement (line 376)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 377):
    
    # Assigning a Subscript to a Name (line 377):
    
    # Obtaining the type of the subscript
    int_139846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 35), 'int')
    # Getting the type of 'currentdescr' (line 377)
    currentdescr_139847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 22), 'currentdescr')
    # Obtaining the member '__getitem__' of a type (line 377)
    getitem___139848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 22), currentdescr_139847, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 377)
    subscript_call_result_139849 = invoke(stypy.reporting.localization.Localization(__file__, 377, 22), getitem___139848, int_139846)
    
    # Assigning a type to the variable 'currenttype' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'currenttype', subscript_call_result_139849)
    
    # Type idiom detected: calculating its left and rigth part (line 378)
    # Getting the type of 'list' (line 378)
    list_139850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 35), 'list')
    # Getting the type of 'currenttype' (line 378)
    currenttype_139851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 22), 'currenttype')
    
    (may_be_139852, more_types_in_union_139853) = may_be_subtype(list_139850, currenttype_139851)

    if may_be_139852:

        if more_types_in_union_139853:
            # Runtime conditional SSA (line 378)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'currenttype' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'currenttype', remove_not_subtype_from_union(currenttype_139851, list))
        
        # Call to append(...): (line 379)
        # Processing the call arguments (line 379)
        
        # Call to tuple(...): (line 380)
        # Processing the call arguments (line 380)
        
        # Call to _recursive_set_default_fill_value(...): (line 380)
        # Processing the call arguments (line 380)
        # Getting the type of 'currenttype' (line 380)
        currenttype_139858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 56), 'currenttype', False)
        # Processing the call keyword arguments (line 380)
        kwargs_139859 = {}
        # Getting the type of '_recursive_set_default_fill_value' (line 380)
        _recursive_set_default_fill_value_139857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 22), '_recursive_set_default_fill_value', False)
        # Calling _recursive_set_default_fill_value(args, kwargs) (line 380)
        _recursive_set_default_fill_value_call_result_139860 = invoke(stypy.reporting.localization.Localization(__file__, 380, 22), _recursive_set_default_fill_value_139857, *[currenttype_139858], **kwargs_139859)
        
        # Processing the call keyword arguments (line 380)
        kwargs_139861 = {}
        # Getting the type of 'tuple' (line 380)
        tuple_139856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 16), 'tuple', False)
        # Calling tuple(args, kwargs) (line 380)
        tuple_call_result_139862 = invoke(stypy.reporting.localization.Localization(__file__, 380, 16), tuple_139856, *[_recursive_set_default_fill_value_call_result_139860], **kwargs_139861)
        
        # Processing the call keyword arguments (line 379)
        kwargs_139863 = {}
        # Getting the type of 'deflist' (line 379)
        deflist_139854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 12), 'deflist', False)
        # Obtaining the member 'append' of a type (line 379)
        append_139855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 12), deflist_139854, 'append')
        # Calling append(args, kwargs) (line 379)
        append_call_result_139864 = invoke(stypy.reporting.localization.Localization(__file__, 379, 12), append_139855, *[tuple_call_result_139862], **kwargs_139863)
        

        if more_types_in_union_139853:
            # Runtime conditional SSA for else branch (line 378)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_139852) or more_types_in_union_139853):
        # Assigning a type to the variable 'currenttype' (line 378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'currenttype', remove_subtype_from_union(currenttype_139851, list))
        
        # Call to append(...): (line 382)
        # Processing the call arguments (line 382)
        
        # Call to default_fill_value(...): (line 382)
        # Processing the call arguments (line 382)
        
        # Call to dtype(...): (line 382)
        # Processing the call arguments (line 382)
        # Getting the type of 'currenttype' (line 382)
        currenttype_139870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 55), 'currenttype', False)
        # Processing the call keyword arguments (line 382)
        kwargs_139871 = {}
        # Getting the type of 'np' (line 382)
        np_139868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 46), 'np', False)
        # Obtaining the member 'dtype' of a type (line 382)
        dtype_139869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 46), np_139868, 'dtype')
        # Calling dtype(args, kwargs) (line 382)
        dtype_call_result_139872 = invoke(stypy.reporting.localization.Localization(__file__, 382, 46), dtype_139869, *[currenttype_139870], **kwargs_139871)
        
        # Processing the call keyword arguments (line 382)
        kwargs_139873 = {}
        # Getting the type of 'default_fill_value' (line 382)
        default_fill_value_139867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 27), 'default_fill_value', False)
        # Calling default_fill_value(args, kwargs) (line 382)
        default_fill_value_call_result_139874 = invoke(stypy.reporting.localization.Localization(__file__, 382, 27), default_fill_value_139867, *[dtype_call_result_139872], **kwargs_139873)
        
        # Processing the call keyword arguments (line 382)
        kwargs_139875 = {}
        # Getting the type of 'deflist' (line 382)
        deflist_139865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 12), 'deflist', False)
        # Obtaining the member 'append' of a type (line 382)
        append_139866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 12), deflist_139865, 'append')
        # Calling append(args, kwargs) (line 382)
        append_call_result_139876 = invoke(stypy.reporting.localization.Localization(__file__, 382, 12), append_139866, *[default_fill_value_call_result_139874], **kwargs_139875)
        

        if (may_be_139852 and more_types_in_union_139853):
            # SSA join for if statement (line 378)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to tuple(...): (line 383)
    # Processing the call arguments (line 383)
    # Getting the type of 'deflist' (line 383)
    deflist_139878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 17), 'deflist', False)
    # Processing the call keyword arguments (line 383)
    kwargs_139879 = {}
    # Getting the type of 'tuple' (line 383)
    tuple_139877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 11), 'tuple', False)
    # Calling tuple(args, kwargs) (line 383)
    tuple_call_result_139880 = invoke(stypy.reporting.localization.Localization(__file__, 383, 11), tuple_139877, *[deflist_139878], **kwargs_139879)
    
    # Assigning a type to the variable 'stypy_return_type' (line 383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'stypy_return_type', tuple_call_result_139880)
    
    # ################# End of '_recursive_set_default_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_recursive_set_default_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 374)
    stypy_return_type_139881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139881)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_recursive_set_default_fill_value'
    return stypy_return_type_139881

# Assigning a type to the variable '_recursive_set_default_fill_value' (line 374)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 0), '_recursive_set_default_fill_value', _recursive_set_default_fill_value)

@norecursion
def _recursive_set_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_recursive_set_fill_value'
    module_type_store = module_type_store.open_function_context('_recursive_set_fill_value', 386, 0, False)
    
    # Passed parameters checking function
    _recursive_set_fill_value.stypy_localization = localization
    _recursive_set_fill_value.stypy_type_of_self = None
    _recursive_set_fill_value.stypy_type_store = module_type_store
    _recursive_set_fill_value.stypy_function_name = '_recursive_set_fill_value'
    _recursive_set_fill_value.stypy_param_names_list = ['fillvalue', 'dtypedescr']
    _recursive_set_fill_value.stypy_varargs_param_name = None
    _recursive_set_fill_value.stypy_kwargs_param_name = None
    _recursive_set_fill_value.stypy_call_defaults = defaults
    _recursive_set_fill_value.stypy_call_varargs = varargs
    _recursive_set_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_recursive_set_fill_value', ['fillvalue', 'dtypedescr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_recursive_set_fill_value', localization, ['fillvalue', 'dtypedescr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_recursive_set_fill_value(...)' code ##################

    
    # Assigning a Call to a Name (line 387):
    
    # Assigning a Call to a Name (line 387):
    
    # Call to resize(...): (line 387)
    # Processing the call arguments (line 387)
    # Getting the type of 'fillvalue' (line 387)
    fillvalue_139884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 26), 'fillvalue', False)
    
    # Call to len(...): (line 387)
    # Processing the call arguments (line 387)
    # Getting the type of 'dtypedescr' (line 387)
    dtypedescr_139886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 41), 'dtypedescr', False)
    # Processing the call keyword arguments (line 387)
    kwargs_139887 = {}
    # Getting the type of 'len' (line 387)
    len_139885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 37), 'len', False)
    # Calling len(args, kwargs) (line 387)
    len_call_result_139888 = invoke(stypy.reporting.localization.Localization(__file__, 387, 37), len_139885, *[dtypedescr_139886], **kwargs_139887)
    
    # Processing the call keyword arguments (line 387)
    kwargs_139889 = {}
    # Getting the type of 'np' (line 387)
    np_139882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 16), 'np', False)
    # Obtaining the member 'resize' of a type (line 387)
    resize_139883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 16), np_139882, 'resize')
    # Calling resize(args, kwargs) (line 387)
    resize_call_result_139890 = invoke(stypy.reporting.localization.Localization(__file__, 387, 16), resize_139883, *[fillvalue_139884, len_call_result_139888], **kwargs_139889)
    
    # Assigning a type to the variable 'fillvalue' (line 387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 4), 'fillvalue', resize_call_result_139890)
    
    # Assigning a List to a Name (line 388):
    
    # Assigning a List to a Name (line 388):
    
    # Obtaining an instance of the builtin type 'list' (line 388)
    list_139891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 388)
    
    # Assigning a type to the variable 'output_value' (line 388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'output_value', list_139891)
    
    
    # Call to zip(...): (line 389)
    # Processing the call arguments (line 389)
    # Getting the type of 'fillvalue' (line 389)
    fillvalue_139893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 29), 'fillvalue', False)
    # Getting the type of 'dtypedescr' (line 389)
    dtypedescr_139894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 40), 'dtypedescr', False)
    # Processing the call keyword arguments (line 389)
    kwargs_139895 = {}
    # Getting the type of 'zip' (line 389)
    zip_139892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 25), 'zip', False)
    # Calling zip(args, kwargs) (line 389)
    zip_call_result_139896 = invoke(stypy.reporting.localization.Localization(__file__, 389, 25), zip_139892, *[fillvalue_139893, dtypedescr_139894], **kwargs_139895)
    
    # Testing the type of a for loop iterable (line 389)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 389, 4), zip_call_result_139896)
    # Getting the type of the for loop variable (line 389)
    for_loop_var_139897 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 389, 4), zip_call_result_139896)
    # Assigning a type to the variable 'fval' (line 389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'fval', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 4), for_loop_var_139897))
    # Assigning a type to the variable 'descr' (line 389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'descr', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 4), for_loop_var_139897))
    # SSA begins for a for statement (line 389)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 390):
    
    # Assigning a Subscript to a Name (line 390):
    
    # Obtaining the type of the subscript
    int_139898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 23), 'int')
    # Getting the type of 'descr' (line 390)
    descr_139899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 17), 'descr')
    # Obtaining the member '__getitem__' of a type (line 390)
    getitem___139900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 17), descr_139899, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 390)
    subscript_call_result_139901 = invoke(stypy.reporting.localization.Localization(__file__, 390, 17), getitem___139900, int_139898)
    
    # Assigning a type to the variable 'cdtype' (line 390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'cdtype', subscript_call_result_139901)
    
    # Type idiom detected: calculating its left and rigth part (line 391)
    # Getting the type of 'list' (line 391)
    list_139902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 30), 'list')
    # Getting the type of 'cdtype' (line 391)
    cdtype_139903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 22), 'cdtype')
    
    (may_be_139904, more_types_in_union_139905) = may_be_subtype(list_139902, cdtype_139903)

    if may_be_139904:

        if more_types_in_union_139905:
            # Runtime conditional SSA (line 391)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'cdtype' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'cdtype', remove_not_subtype_from_union(cdtype_139903, list))
        
        # Call to append(...): (line 392)
        # Processing the call arguments (line 392)
        
        # Call to tuple(...): (line 392)
        # Processing the call arguments (line 392)
        
        # Call to _recursive_set_fill_value(...): (line 392)
        # Processing the call arguments (line 392)
        # Getting the type of 'fval' (line 392)
        fval_139910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 64), 'fval', False)
        # Getting the type of 'cdtype' (line 392)
        cdtype_139911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 70), 'cdtype', False)
        # Processing the call keyword arguments (line 392)
        kwargs_139912 = {}
        # Getting the type of '_recursive_set_fill_value' (line 392)
        _recursive_set_fill_value_139909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 38), '_recursive_set_fill_value', False)
        # Calling _recursive_set_fill_value(args, kwargs) (line 392)
        _recursive_set_fill_value_call_result_139913 = invoke(stypy.reporting.localization.Localization(__file__, 392, 38), _recursive_set_fill_value_139909, *[fval_139910, cdtype_139911], **kwargs_139912)
        
        # Processing the call keyword arguments (line 392)
        kwargs_139914 = {}
        # Getting the type of 'tuple' (line 392)
        tuple_139908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 32), 'tuple', False)
        # Calling tuple(args, kwargs) (line 392)
        tuple_call_result_139915 = invoke(stypy.reporting.localization.Localization(__file__, 392, 32), tuple_139908, *[_recursive_set_fill_value_call_result_139913], **kwargs_139914)
        
        # Processing the call keyword arguments (line 392)
        kwargs_139916 = {}
        # Getting the type of 'output_value' (line 392)
        output_value_139906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 12), 'output_value', False)
        # Obtaining the member 'append' of a type (line 392)
        append_139907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 12), output_value_139906, 'append')
        # Calling append(args, kwargs) (line 392)
        append_call_result_139917 = invoke(stypy.reporting.localization.Localization(__file__, 392, 12), append_139907, *[tuple_call_result_139915], **kwargs_139916)
        

        if more_types_in_union_139905:
            # Runtime conditional SSA for else branch (line 391)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_139904) or more_types_in_union_139905):
        # Assigning a type to the variable 'cdtype' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'cdtype', remove_subtype_from_union(cdtype_139903, list))
        
        # Call to append(...): (line 394)
        # Processing the call arguments (line 394)
        
        # Call to item(...): (line 394)
        # Processing the call keyword arguments (line 394)
        kwargs_139928 = {}
        
        # Call to array(...): (line 394)
        # Processing the call arguments (line 394)
        # Getting the type of 'fval' (line 394)
        fval_139922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 41), 'fval', False)
        # Processing the call keyword arguments (line 394)
        # Getting the type of 'cdtype' (line 394)
        cdtype_139923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 53), 'cdtype', False)
        keyword_139924 = cdtype_139923
        kwargs_139925 = {'dtype': keyword_139924}
        # Getting the type of 'np' (line 394)
        np_139920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 32), 'np', False)
        # Obtaining the member 'array' of a type (line 394)
        array_139921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 32), np_139920, 'array')
        # Calling array(args, kwargs) (line 394)
        array_call_result_139926 = invoke(stypy.reporting.localization.Localization(__file__, 394, 32), array_139921, *[fval_139922], **kwargs_139925)
        
        # Obtaining the member 'item' of a type (line 394)
        item_139927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 32), array_call_result_139926, 'item')
        # Calling item(args, kwargs) (line 394)
        item_call_result_139929 = invoke(stypy.reporting.localization.Localization(__file__, 394, 32), item_139927, *[], **kwargs_139928)
        
        # Processing the call keyword arguments (line 394)
        kwargs_139930 = {}
        # Getting the type of 'output_value' (line 394)
        output_value_139918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 12), 'output_value', False)
        # Obtaining the member 'append' of a type (line 394)
        append_139919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 12), output_value_139918, 'append')
        # Calling append(args, kwargs) (line 394)
        append_call_result_139931 = invoke(stypy.reporting.localization.Localization(__file__, 394, 12), append_139919, *[item_call_result_139929], **kwargs_139930)
        

        if (may_be_139904 and more_types_in_union_139905):
            # SSA join for if statement (line 391)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to tuple(...): (line 395)
    # Processing the call arguments (line 395)
    # Getting the type of 'output_value' (line 395)
    output_value_139933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 17), 'output_value', False)
    # Processing the call keyword arguments (line 395)
    kwargs_139934 = {}
    # Getting the type of 'tuple' (line 395)
    tuple_139932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 11), 'tuple', False)
    # Calling tuple(args, kwargs) (line 395)
    tuple_call_result_139935 = invoke(stypy.reporting.localization.Localization(__file__, 395, 11), tuple_139932, *[output_value_139933], **kwargs_139934)
    
    # Assigning a type to the variable 'stypy_return_type' (line 395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 4), 'stypy_return_type', tuple_call_result_139935)
    
    # ################# End of '_recursive_set_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_recursive_set_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 386)
    stypy_return_type_139936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_139936)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_recursive_set_fill_value'
    return stypy_return_type_139936

# Assigning a type to the variable '_recursive_set_fill_value' (line 386)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 0), '_recursive_set_fill_value', _recursive_set_fill_value)

@norecursion
def _check_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check_fill_value'
    module_type_store = module_type_store.open_function_context('_check_fill_value', 398, 0, False)
    
    # Passed parameters checking function
    _check_fill_value.stypy_localization = localization
    _check_fill_value.stypy_type_of_self = None
    _check_fill_value.stypy_type_store = module_type_store
    _check_fill_value.stypy_function_name = '_check_fill_value'
    _check_fill_value.stypy_param_names_list = ['fill_value', 'ndtype']
    _check_fill_value.stypy_varargs_param_name = None
    _check_fill_value.stypy_kwargs_param_name = None
    _check_fill_value.stypy_call_defaults = defaults
    _check_fill_value.stypy_call_varargs = varargs
    _check_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check_fill_value', ['fill_value', 'ndtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check_fill_value', localization, ['fill_value', 'ndtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check_fill_value(...)' code ##################

    str_139937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 409, (-1)), 'str', '\n    Private function validating the given `fill_value` for the given dtype.\n\n    If fill_value is None, it is set to the default corresponding to the dtype\n    if this latter is standard (no fields). If the datatype is flexible (named\n    fields), fill_value is set to a tuple whose elements are the default fill\n    values corresponding to each field.\n\n    If fill_value is not None, its value is forced to the given dtype.\n\n    ')
    
    # Assigning a Call to a Name (line 410):
    
    # Assigning a Call to a Name (line 410):
    
    # Call to dtype(...): (line 410)
    # Processing the call arguments (line 410)
    # Getting the type of 'ndtype' (line 410)
    ndtype_139940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 22), 'ndtype', False)
    # Processing the call keyword arguments (line 410)
    kwargs_139941 = {}
    # Getting the type of 'np' (line 410)
    np_139938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 13), 'np', False)
    # Obtaining the member 'dtype' of a type (line 410)
    dtype_139939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 13), np_139938, 'dtype')
    # Calling dtype(args, kwargs) (line 410)
    dtype_call_result_139942 = invoke(stypy.reporting.localization.Localization(__file__, 410, 13), dtype_139939, *[ndtype_139940], **kwargs_139941)
    
    # Assigning a type to the variable 'ndtype' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'ndtype', dtype_call_result_139942)
    
    # Assigning a Attribute to a Name (line 411):
    
    # Assigning a Attribute to a Name (line 411):
    # Getting the type of 'ndtype' (line 411)
    ndtype_139943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 13), 'ndtype')
    # Obtaining the member 'fields' of a type (line 411)
    fields_139944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 13), ndtype_139943, 'fields')
    # Assigning a type to the variable 'fields' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'fields', fields_139944)
    
    # Type idiom detected: calculating its left and rigth part (line 412)
    # Getting the type of 'fill_value' (line 412)
    fill_value_139945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 7), 'fill_value')
    # Getting the type of 'None' (line 412)
    None_139946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 21), 'None')
    
    (may_be_139947, more_types_in_union_139948) = may_be_none(fill_value_139945, None_139946)

    if may_be_139947:

        if more_types_in_union_139948:
            # Runtime conditional SSA (line 412)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'fields' (line 413)
        fields_139949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 11), 'fields')
        # Testing the type of an if condition (line 413)
        if_condition_139950 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 413, 8), fields_139949)
        # Assigning a type to the variable 'if_condition_139950' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'if_condition_139950', if_condition_139950)
        # SSA begins for if statement (line 413)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 414):
        
        # Assigning a Attribute to a Name (line 414):
        # Getting the type of 'ndtype' (line 414)
        ndtype_139951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 20), 'ndtype')
        # Obtaining the member 'descr' of a type (line 414)
        descr_139952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 20), ndtype_139951, 'descr')
        # Assigning a type to the variable 'descr' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 12), 'descr', descr_139952)
        
        # Assigning a Call to a Name (line 415):
        
        # Assigning a Call to a Name (line 415):
        
        # Call to array(...): (line 415)
        # Processing the call arguments (line 415)
        
        # Call to _recursive_set_default_fill_value(...): (line 415)
        # Processing the call arguments (line 415)
        # Getting the type of 'descr' (line 415)
        descr_139956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 68), 'descr', False)
        # Processing the call keyword arguments (line 415)
        kwargs_139957 = {}
        # Getting the type of '_recursive_set_default_fill_value' (line 415)
        _recursive_set_default_fill_value_139955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 34), '_recursive_set_default_fill_value', False)
        # Calling _recursive_set_default_fill_value(args, kwargs) (line 415)
        _recursive_set_default_fill_value_call_result_139958 = invoke(stypy.reporting.localization.Localization(__file__, 415, 34), _recursive_set_default_fill_value_139955, *[descr_139956], **kwargs_139957)
        
        # Processing the call keyword arguments (line 415)
        # Getting the type of 'ndtype' (line 416)
        ndtype_139959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 40), 'ndtype', False)
        keyword_139960 = ndtype_139959
        kwargs_139961 = {'dtype': keyword_139960}
        # Getting the type of 'np' (line 415)
        np_139953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 25), 'np', False)
        # Obtaining the member 'array' of a type (line 415)
        array_139954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 25), np_139953, 'array')
        # Calling array(args, kwargs) (line 415)
        array_call_result_139962 = invoke(stypy.reporting.localization.Localization(__file__, 415, 25), array_139954, *[_recursive_set_default_fill_value_call_result_139958], **kwargs_139961)
        
        # Assigning a type to the variable 'fill_value' (line 415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 12), 'fill_value', array_call_result_139962)
        # SSA branch for the else part of an if statement (line 413)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 418):
        
        # Assigning a Call to a Name (line 418):
        
        # Call to default_fill_value(...): (line 418)
        # Processing the call arguments (line 418)
        # Getting the type of 'ndtype' (line 418)
        ndtype_139964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 44), 'ndtype', False)
        # Processing the call keyword arguments (line 418)
        kwargs_139965 = {}
        # Getting the type of 'default_fill_value' (line 418)
        default_fill_value_139963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 25), 'default_fill_value', False)
        # Calling default_fill_value(args, kwargs) (line 418)
        default_fill_value_call_result_139966 = invoke(stypy.reporting.localization.Localization(__file__, 418, 25), default_fill_value_139963, *[ndtype_139964], **kwargs_139965)
        
        # Assigning a type to the variable 'fill_value' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 12), 'fill_value', default_fill_value_call_result_139966)
        # SSA join for if statement (line 413)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_139948:
            # Runtime conditional SSA for else branch (line 412)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_139947) or more_types_in_union_139948):
        
        # Getting the type of 'fields' (line 419)
        fields_139967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 9), 'fields')
        # Testing the type of an if condition (line 419)
        if_condition_139968 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 419, 9), fields_139967)
        # Assigning a type to the variable 'if_condition_139968' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 9), 'if_condition_139968', if_condition_139968)
        # SSA begins for if statement (line 419)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 420):
        
        # Assigning a ListComp to a Name (line 420):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ndtype' (line 420)
        ndtype_139978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 40), 'ndtype')
        # Obtaining the member 'descr' of a type (line 420)
        descr_139979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 40), ndtype_139978, 'descr')
        comprehension_139980 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 420, 18), descr_139979)
        # Assigning a type to the variable '_' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 18), '_', comprehension_139980)
        
        # Obtaining an instance of the builtin type 'tuple' (line 420)
        tuple_139969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 420)
        # Adding element type (line 420)
        
        # Obtaining the type of the subscript
        int_139970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 21), 'int')
        # Getting the type of '_' (line 420)
        __139971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 19), '_')
        # Obtaining the member '__getitem__' of a type (line 420)
        getitem___139972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 19), __139971, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 420)
        subscript_call_result_139973 = invoke(stypy.reporting.localization.Localization(__file__, 420, 19), getitem___139972, int_139970)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 420, 19), tuple_139969, subscript_call_result_139973)
        # Adding element type (line 420)
        
        # Obtaining the type of the subscript
        int_139974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 27), 'int')
        # Getting the type of '_' (line 420)
        __139975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 25), '_')
        # Obtaining the member '__getitem__' of a type (line 420)
        getitem___139976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 25), __139975, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 420)
        subscript_call_result_139977 = invoke(stypy.reporting.localization.Localization(__file__, 420, 25), getitem___139976, int_139974)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 420, 19), tuple_139969, subscript_call_result_139977)
        
        list_139981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 420, 18), list_139981, tuple_139969)
        # Assigning a type to the variable 'fdtype' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'fdtype', list_139981)
        
        
        # Call to isinstance(...): (line 421)
        # Processing the call arguments (line 421)
        # Getting the type of 'fill_value' (line 421)
        fill_value_139983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 22), 'fill_value', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 421)
        tuple_139984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 421)
        # Adding element type (line 421)
        # Getting the type of 'ndarray' (line 421)
        ndarray_139985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 35), 'ndarray', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 35), tuple_139984, ndarray_139985)
        # Adding element type (line 421)
        # Getting the type of 'np' (line 421)
        np_139986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 44), 'np', False)
        # Obtaining the member 'void' of a type (line 421)
        void_139987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 44), np_139986, 'void')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 35), tuple_139984, void_139987)
        
        # Processing the call keyword arguments (line 421)
        kwargs_139988 = {}
        # Getting the type of 'isinstance' (line 421)
        isinstance_139982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 421)
        isinstance_call_result_139989 = invoke(stypy.reporting.localization.Localization(__file__, 421, 11), isinstance_139982, *[fill_value_139983, tuple_139984], **kwargs_139988)
        
        # Testing the type of an if condition (line 421)
        if_condition_139990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 421, 8), isinstance_call_result_139989)
        # Assigning a type to the variable 'if_condition_139990' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 8), 'if_condition_139990', if_condition_139990)
        # SSA begins for if statement (line 421)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 422)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 423):
        
        # Assigning a Call to a Name (line 423):
        
        # Call to array(...): (line 423)
        # Processing the call arguments (line 423)
        # Getting the type of 'fill_value' (line 423)
        fill_value_139993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 38), 'fill_value', False)
        # Processing the call keyword arguments (line 423)
        # Getting the type of 'False' (line 423)
        False_139994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 55), 'False', False)
        keyword_139995 = False_139994
        # Getting the type of 'fdtype' (line 423)
        fdtype_139996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 68), 'fdtype', False)
        keyword_139997 = fdtype_139996
        kwargs_139998 = {'dtype': keyword_139997, 'copy': keyword_139995}
        # Getting the type of 'np' (line 423)
        np_139991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 29), 'np', False)
        # Obtaining the member 'array' of a type (line 423)
        array_139992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 29), np_139991, 'array')
        # Calling array(args, kwargs) (line 423)
        array_call_result_139999 = invoke(stypy.reporting.localization.Localization(__file__, 423, 29), array_139992, *[fill_value_139993], **kwargs_139998)
        
        # Assigning a type to the variable 'fill_value' (line 423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 16), 'fill_value', array_call_result_139999)
        # SSA branch for the except part of a try statement (line 422)
        # SSA branch for the except 'ValueError' branch of a try statement (line 422)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Str to a Name (line 425):
        
        # Assigning a Str to a Name (line 425):
        str_140000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 425, 26), 'str', 'Unable to transform %s to dtype %s')
        # Assigning a type to the variable 'err_msg' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 16), 'err_msg', str_140000)
        
        # Call to ValueError(...): (line 426)
        # Processing the call arguments (line 426)
        # Getting the type of 'err_msg' (line 426)
        err_msg_140002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 33), 'err_msg', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 426)
        tuple_140003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 426)
        # Adding element type (line 426)
        # Getting the type of 'fill_value' (line 426)
        fill_value_140004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 44), 'fill_value', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 44), tuple_140003, fill_value_140004)
        # Adding element type (line 426)
        # Getting the type of 'fdtype' (line 426)
        fdtype_140005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 56), 'fdtype', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 426, 44), tuple_140003, fdtype_140005)
        
        # Applying the binary operator '%' (line 426)
        result_mod_140006 = python_operator(stypy.reporting.localization.Localization(__file__, 426, 33), '%', err_msg_140002, tuple_140003)
        
        # Processing the call keyword arguments (line 426)
        kwargs_140007 = {}
        # Getting the type of 'ValueError' (line 426)
        ValueError_140001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 426)
        ValueError_call_result_140008 = invoke(stypy.reporting.localization.Localization(__file__, 426, 22), ValueError_140001, *[result_mod_140006], **kwargs_140007)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 426, 16), ValueError_call_result_140008, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 422)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 421)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 428):
        
        # Assigning a Attribute to a Name (line 428):
        # Getting the type of 'ndtype' (line 428)
        ndtype_140009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 20), 'ndtype')
        # Obtaining the member 'descr' of a type (line 428)
        descr_140010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 20), ndtype_140009, 'descr')
        # Assigning a type to the variable 'descr' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), 'descr', descr_140010)
        
        # Assigning a Call to a Name (line 429):
        
        # Assigning a Call to a Name (line 429):
        
        # Call to asarray(...): (line 429)
        # Processing the call arguments (line 429)
        # Getting the type of 'fill_value' (line 429)
        fill_value_140013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 36), 'fill_value', False)
        # Processing the call keyword arguments (line 429)
        # Getting the type of 'object' (line 429)
        object_140014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 54), 'object', False)
        keyword_140015 = object_140014
        kwargs_140016 = {'dtype': keyword_140015}
        # Getting the type of 'np' (line 429)
        np_140011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 25), 'np', False)
        # Obtaining the member 'asarray' of a type (line 429)
        asarray_140012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 25), np_140011, 'asarray')
        # Calling asarray(args, kwargs) (line 429)
        asarray_call_result_140017 = invoke(stypy.reporting.localization.Localization(__file__, 429, 25), asarray_140012, *[fill_value_140013], **kwargs_140016)
        
        # Assigning a type to the variable 'fill_value' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 12), 'fill_value', asarray_call_result_140017)
        
        # Assigning a Call to a Name (line 430):
        
        # Assigning a Call to a Name (line 430):
        
        # Call to array(...): (line 430)
        # Processing the call arguments (line 430)
        
        # Call to _recursive_set_fill_value(...): (line 430)
        # Processing the call arguments (line 430)
        # Getting the type of 'fill_value' (line 430)
        fill_value_140021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 60), 'fill_value', False)
        # Getting the type of 'descr' (line 430)
        descr_140022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 72), 'descr', False)
        # Processing the call keyword arguments (line 430)
        kwargs_140023 = {}
        # Getting the type of '_recursive_set_fill_value' (line 430)
        _recursive_set_fill_value_140020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 34), '_recursive_set_fill_value', False)
        # Calling _recursive_set_fill_value(args, kwargs) (line 430)
        _recursive_set_fill_value_call_result_140024 = invoke(stypy.reporting.localization.Localization(__file__, 430, 34), _recursive_set_fill_value_140020, *[fill_value_140021, descr_140022], **kwargs_140023)
        
        # Processing the call keyword arguments (line 430)
        # Getting the type of 'ndtype' (line 431)
        ndtype_140025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 40), 'ndtype', False)
        keyword_140026 = ndtype_140025
        kwargs_140027 = {'dtype': keyword_140026}
        # Getting the type of 'np' (line 430)
        np_140018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 25), 'np', False)
        # Obtaining the member 'array' of a type (line 430)
        array_140019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 25), np_140018, 'array')
        # Calling array(args, kwargs) (line 430)
        array_call_result_140028 = invoke(stypy.reporting.localization.Localization(__file__, 430, 25), array_140019, *[_recursive_set_fill_value_call_result_140024], **kwargs_140027)
        
        # Assigning a type to the variable 'fill_value' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 12), 'fill_value', array_call_result_140028)
        # SSA join for if statement (line 421)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 419)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 433)
        # Processing the call arguments (line 433)
        # Getting the type of 'fill_value' (line 433)
        fill_value_140030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 22), 'fill_value', False)
        # Getting the type of 'basestring' (line 433)
        basestring_140031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 34), 'basestring', False)
        # Processing the call keyword arguments (line 433)
        kwargs_140032 = {}
        # Getting the type of 'isinstance' (line 433)
        isinstance_140029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 433)
        isinstance_call_result_140033 = invoke(stypy.reporting.localization.Localization(__file__, 433, 11), isinstance_140029, *[fill_value_140030, basestring_140031], **kwargs_140032)
        
        
        # Getting the type of 'ndtype' (line 433)
        ndtype_140034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 51), 'ndtype')
        # Obtaining the member 'char' of a type (line 433)
        char_140035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 51), ndtype_140034, 'char')
        str_140036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 70), 'str', 'OSVU')
        # Applying the binary operator 'notin' (line 433)
        result_contains_140037 = python_operator(stypy.reporting.localization.Localization(__file__, 433, 51), 'notin', char_140035, str_140036)
        
        # Applying the binary operator 'and' (line 433)
        result_and_keyword_140038 = python_operator(stypy.reporting.localization.Localization(__file__, 433, 11), 'and', isinstance_call_result_140033, result_contains_140037)
        
        # Testing the type of an if condition (line 433)
        if_condition_140039 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 433, 8), result_and_keyword_140038)
        # Assigning a type to the variable 'if_condition_140039' (line 433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'if_condition_140039', if_condition_140039)
        # SSA begins for if statement (line 433)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 434):
        
        # Assigning a Str to a Name (line 434):
        str_140040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 22), 'str', 'Cannot set fill value of string with array of dtype %s')
        # Assigning a type to the variable 'err_msg' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 12), 'err_msg', str_140040)
        
        # Call to TypeError(...): (line 435)
        # Processing the call arguments (line 435)
        # Getting the type of 'err_msg' (line 435)
        err_msg_140042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 28), 'err_msg', False)
        # Getting the type of 'ndtype' (line 435)
        ndtype_140043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 38), 'ndtype', False)
        # Applying the binary operator '%' (line 435)
        result_mod_140044 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 28), '%', err_msg_140042, ndtype_140043)
        
        # Processing the call keyword arguments (line 435)
        kwargs_140045 = {}
        # Getting the type of 'TypeError' (line 435)
        TypeError_140041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 435)
        TypeError_call_result_140046 = invoke(stypy.reporting.localization.Localization(__file__, 435, 18), TypeError_140041, *[result_mod_140044], **kwargs_140045)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 435, 12), TypeError_call_result_140046, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 433)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 438)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 439):
        
        # Assigning a Call to a Name (line 439):
        
        # Call to array(...): (line 439)
        # Processing the call arguments (line 439)
        # Getting the type of 'fill_value' (line 439)
        fill_value_140049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 38), 'fill_value', False)
        # Processing the call keyword arguments (line 439)
        # Getting the type of 'False' (line 439)
        False_140050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 55), 'False', False)
        keyword_140051 = False_140050
        # Getting the type of 'ndtype' (line 439)
        ndtype_140052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 68), 'ndtype', False)
        keyword_140053 = ndtype_140052
        kwargs_140054 = {'dtype': keyword_140053, 'copy': keyword_140051}
        # Getting the type of 'np' (line 439)
        np_140047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 29), 'np', False)
        # Obtaining the member 'array' of a type (line 439)
        array_140048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 29), np_140047, 'array')
        # Calling array(args, kwargs) (line 439)
        array_call_result_140055 = invoke(stypy.reporting.localization.Localization(__file__, 439, 29), array_140048, *[fill_value_140049], **kwargs_140054)
        
        # Assigning a type to the variable 'fill_value' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 16), 'fill_value', array_call_result_140055)
        # SSA branch for the except part of a try statement (line 438)
        # SSA branch for the except 'OverflowError' branch of a try statement (line 438)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Str to a Name (line 444):
        
        # Assigning a Str to a Name (line 444):
        str_140056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, 26), 'str', 'Fill value %s overflows dtype %s')
        # Assigning a type to the variable 'err_msg' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 16), 'err_msg', str_140056)
        
        # Call to TypeError(...): (line 445)
        # Processing the call arguments (line 445)
        # Getting the type of 'err_msg' (line 445)
        err_msg_140058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 32), 'err_msg', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 445)
        tuple_140059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 445)
        # Adding element type (line 445)
        # Getting the type of 'fill_value' (line 445)
        fill_value_140060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 43), 'fill_value', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 445, 43), tuple_140059, fill_value_140060)
        # Adding element type (line 445)
        # Getting the type of 'ndtype' (line 445)
        ndtype_140061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 55), 'ndtype', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 445, 43), tuple_140059, ndtype_140061)
        
        # Applying the binary operator '%' (line 445)
        result_mod_140062 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 32), '%', err_msg_140058, tuple_140059)
        
        # Processing the call keyword arguments (line 445)
        kwargs_140063 = {}
        # Getting the type of 'TypeError' (line 445)
        TypeError_140057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 22), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 445)
        TypeError_call_result_140064 = invoke(stypy.reporting.localization.Localization(__file__, 445, 22), TypeError_140057, *[result_mod_140062], **kwargs_140063)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 445, 16), TypeError_call_result_140064, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 438)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 433)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 419)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_139947 and more_types_in_union_139948):
            # SSA join for if statement (line 412)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to array(...): (line 446)
    # Processing the call arguments (line 446)
    # Getting the type of 'fill_value' (line 446)
    fill_value_140067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 20), 'fill_value', False)
    # Processing the call keyword arguments (line 446)
    kwargs_140068 = {}
    # Getting the type of 'np' (line 446)
    np_140065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 11), 'np', False)
    # Obtaining the member 'array' of a type (line 446)
    array_140066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 11), np_140065, 'array')
    # Calling array(args, kwargs) (line 446)
    array_call_result_140069 = invoke(stypy.reporting.localization.Localization(__file__, 446, 11), array_140066, *[fill_value_140067], **kwargs_140068)
    
    # Assigning a type to the variable 'stypy_return_type' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'stypy_return_type', array_call_result_140069)
    
    # ################# End of '_check_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 398)
    stypy_return_type_140070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_140070)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check_fill_value'
    return stypy_return_type_140070

# Assigning a type to the variable '_check_fill_value' (line 398)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 0), '_check_fill_value', _check_fill_value)

@norecursion
def set_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'set_fill_value'
    module_type_store = module_type_store.open_function_context('set_fill_value', 449, 0, False)
    
    # Passed parameters checking function
    set_fill_value.stypy_localization = localization
    set_fill_value.stypy_type_of_self = None
    set_fill_value.stypy_type_store = module_type_store
    set_fill_value.stypy_function_name = 'set_fill_value'
    set_fill_value.stypy_param_names_list = ['a', 'fill_value']
    set_fill_value.stypy_varargs_param_name = None
    set_fill_value.stypy_kwargs_param_name = None
    set_fill_value.stypy_call_defaults = defaults
    set_fill_value.stypy_call_varargs = varargs
    set_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'set_fill_value', ['a', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'set_fill_value', localization, ['a', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'set_fill_value(...)' code ##################

    str_140071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, (-1)), 'str', '\n    Set the filling value of a, if a is a masked array.\n\n    This function changes the fill value of the masked array `a` in place.\n    If `a` is not a masked array, the function returns silently, without\n    doing anything.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array.\n    fill_value : dtype\n        Filling value. A consistency test is performed to make sure\n        the value is compatible with the dtype of `a`.\n\n    Returns\n    -------\n    None\n        Nothing returned by this function.\n\n    See Also\n    --------\n    maximum_fill_value : Return the default fill value for a dtype.\n    MaskedArray.fill_value : Return current fill value.\n    MaskedArray.set_fill_value : Equivalent method.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(5)\n    >>> a\n    array([0, 1, 2, 3, 4])\n    >>> a = ma.masked_where(a < 3, a)\n    >>> a\n    masked_array(data = [-- -- -- 3 4],\n          mask = [ True  True  True False False],\n          fill_value=999999)\n    >>> ma.set_fill_value(a, -999)\n    >>> a\n    masked_array(data = [-- -- -- 3 4],\n          mask = [ True  True  True False False],\n          fill_value=-999)\n\n    Nothing happens if `a` is not a masked array.\n\n    >>> a = range(5)\n    >>> a\n    [0, 1, 2, 3, 4]\n    >>> ma.set_fill_value(a, 100)\n    >>> a\n    [0, 1, 2, 3, 4]\n    >>> a = np.arange(5)\n    >>> a\n    array([0, 1, 2, 3, 4])\n    >>> ma.set_fill_value(a, 100)\n    >>> a\n    array([0, 1, 2, 3, 4])\n\n    ')
    
    
    # Call to isinstance(...): (line 509)
    # Processing the call arguments (line 509)
    # Getting the type of 'a' (line 509)
    a_140073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 18), 'a', False)
    # Getting the type of 'MaskedArray' (line 509)
    MaskedArray_140074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 21), 'MaskedArray', False)
    # Processing the call keyword arguments (line 509)
    kwargs_140075 = {}
    # Getting the type of 'isinstance' (line 509)
    isinstance_140072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 509)
    isinstance_call_result_140076 = invoke(stypy.reporting.localization.Localization(__file__, 509, 7), isinstance_140072, *[a_140073, MaskedArray_140074], **kwargs_140075)
    
    # Testing the type of an if condition (line 509)
    if_condition_140077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 509, 4), isinstance_call_result_140076)
    # Assigning a type to the variable 'if_condition_140077' (line 509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 4), 'if_condition_140077', if_condition_140077)
    # SSA begins for if statement (line 509)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_fill_value(...): (line 510)
    # Processing the call arguments (line 510)
    # Getting the type of 'fill_value' (line 510)
    fill_value_140080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 25), 'fill_value', False)
    # Processing the call keyword arguments (line 510)
    kwargs_140081 = {}
    # Getting the type of 'a' (line 510)
    a_140078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'a', False)
    # Obtaining the member 'set_fill_value' of a type (line 510)
    set_fill_value_140079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), a_140078, 'set_fill_value')
    # Calling set_fill_value(args, kwargs) (line 510)
    set_fill_value_call_result_140082 = invoke(stypy.reporting.localization.Localization(__file__, 510, 8), set_fill_value_140079, *[fill_value_140080], **kwargs_140081)
    
    # SSA join for if statement (line 509)
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'stypy_return_type', types.NoneType)
    
    # ################# End of 'set_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'set_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 449)
    stypy_return_type_140083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_140083)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'set_fill_value'
    return stypy_return_type_140083

# Assigning a type to the variable 'set_fill_value' (line 449)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 0), 'set_fill_value', set_fill_value)

@norecursion
def get_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_fill_value'
    module_type_store = module_type_store.open_function_context('get_fill_value', 514, 0, False)
    
    # Passed parameters checking function
    get_fill_value.stypy_localization = localization
    get_fill_value.stypy_type_of_self = None
    get_fill_value.stypy_type_store = module_type_store
    get_fill_value.stypy_function_name = 'get_fill_value'
    get_fill_value.stypy_param_names_list = ['a']
    get_fill_value.stypy_varargs_param_name = None
    get_fill_value.stypy_kwargs_param_name = None
    get_fill_value.stypy_call_defaults = defaults
    get_fill_value.stypy_call_varargs = varargs
    get_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_fill_value', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_fill_value', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_fill_value(...)' code ##################

    str_140084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, (-1)), 'str', '\n    Return the filling value of a, if any.  Otherwise, returns the\n    default filling value for that type.\n\n    ')
    
    
    # Call to isinstance(...): (line 520)
    # Processing the call arguments (line 520)
    # Getting the type of 'a' (line 520)
    a_140086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 18), 'a', False)
    # Getting the type of 'MaskedArray' (line 520)
    MaskedArray_140087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 21), 'MaskedArray', False)
    # Processing the call keyword arguments (line 520)
    kwargs_140088 = {}
    # Getting the type of 'isinstance' (line 520)
    isinstance_140085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 520)
    isinstance_call_result_140089 = invoke(stypy.reporting.localization.Localization(__file__, 520, 7), isinstance_140085, *[a_140086, MaskedArray_140087], **kwargs_140088)
    
    # Testing the type of an if condition (line 520)
    if_condition_140090 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 520, 4), isinstance_call_result_140089)
    # Assigning a type to the variable 'if_condition_140090' (line 520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'if_condition_140090', if_condition_140090)
    # SSA begins for if statement (line 520)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 521):
    
    # Assigning a Attribute to a Name (line 521):
    # Getting the type of 'a' (line 521)
    a_140091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 17), 'a')
    # Obtaining the member 'fill_value' of a type (line 521)
    fill_value_140092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 17), a_140091, 'fill_value')
    # Assigning a type to the variable 'result' (line 521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'result', fill_value_140092)
    # SSA branch for the else part of an if statement (line 520)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 523):
    
    # Assigning a Call to a Name (line 523):
    
    # Call to default_fill_value(...): (line 523)
    # Processing the call arguments (line 523)
    # Getting the type of 'a' (line 523)
    a_140094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 36), 'a', False)
    # Processing the call keyword arguments (line 523)
    kwargs_140095 = {}
    # Getting the type of 'default_fill_value' (line 523)
    default_fill_value_140093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 17), 'default_fill_value', False)
    # Calling default_fill_value(args, kwargs) (line 523)
    default_fill_value_call_result_140096 = invoke(stypy.reporting.localization.Localization(__file__, 523, 17), default_fill_value_140093, *[a_140094], **kwargs_140095)
    
    # Assigning a type to the variable 'result' (line 523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 8), 'result', default_fill_value_call_result_140096)
    # SSA join for if statement (line 520)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 524)
    result_140097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'stypy_return_type', result_140097)
    
    # ################# End of 'get_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 514)
    stypy_return_type_140098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_140098)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_fill_value'
    return stypy_return_type_140098

# Assigning a type to the variable 'get_fill_value' (line 514)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 0), 'get_fill_value', get_fill_value)

@norecursion
def common_fill_value(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'common_fill_value'
    module_type_store = module_type_store.open_function_context('common_fill_value', 527, 0, False)
    
    # Passed parameters checking function
    common_fill_value.stypy_localization = localization
    common_fill_value.stypy_type_of_self = None
    common_fill_value.stypy_type_store = module_type_store
    common_fill_value.stypy_function_name = 'common_fill_value'
    common_fill_value.stypy_param_names_list = ['a', 'b']
    common_fill_value.stypy_varargs_param_name = None
    common_fill_value.stypy_kwargs_param_name = None
    common_fill_value.stypy_call_defaults = defaults
    common_fill_value.stypy_call_varargs = varargs
    common_fill_value.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'common_fill_value', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'common_fill_value', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'common_fill_value(...)' code ##################

    str_140099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, (-1)), 'str', '\n    Return the common filling value of two masked arrays, if any.\n\n    If ``a.fill_value == b.fill_value``, return the fill value,\n    otherwise return None.\n\n    Parameters\n    ----------\n    a, b : MaskedArray\n        The masked arrays for which to compare fill values.\n\n    Returns\n    -------\n    fill_value : scalar or None\n        The common fill value, or None.\n\n    Examples\n    --------\n    >>> x = np.ma.array([0, 1.], fill_value=3)\n    >>> y = np.ma.array([0, 1.], fill_value=3)\n    >>> np.ma.common_fill_value(x, y)\n    3.0\n\n    ')
    
    # Assigning a Call to a Name (line 552):
    
    # Assigning a Call to a Name (line 552):
    
    # Call to get_fill_value(...): (line 552)
    # Processing the call arguments (line 552)
    # Getting the type of 'a' (line 552)
    a_140101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 24), 'a', False)
    # Processing the call keyword arguments (line 552)
    kwargs_140102 = {}
    # Getting the type of 'get_fill_value' (line 552)
    get_fill_value_140100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 9), 'get_fill_value', False)
    # Calling get_fill_value(args, kwargs) (line 552)
    get_fill_value_call_result_140103 = invoke(stypy.reporting.localization.Localization(__file__, 552, 9), get_fill_value_140100, *[a_140101], **kwargs_140102)
    
    # Assigning a type to the variable 't1' (line 552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 4), 't1', get_fill_value_call_result_140103)
    
    # Assigning a Call to a Name (line 553):
    
    # Assigning a Call to a Name (line 553):
    
    # Call to get_fill_value(...): (line 553)
    # Processing the call arguments (line 553)
    # Getting the type of 'b' (line 553)
    b_140105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 24), 'b', False)
    # Processing the call keyword arguments (line 553)
    kwargs_140106 = {}
    # Getting the type of 'get_fill_value' (line 553)
    get_fill_value_140104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 9), 'get_fill_value', False)
    # Calling get_fill_value(args, kwargs) (line 553)
    get_fill_value_call_result_140107 = invoke(stypy.reporting.localization.Localization(__file__, 553, 9), get_fill_value_140104, *[b_140105], **kwargs_140106)
    
    # Assigning a type to the variable 't2' (line 553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 553, 4), 't2', get_fill_value_call_result_140107)
    
    
    # Getting the type of 't1' (line 554)
    t1_140108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 7), 't1')
    # Getting the type of 't2' (line 554)
    t2_140109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 13), 't2')
    # Applying the binary operator '==' (line 554)
    result_eq_140110 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 7), '==', t1_140108, t2_140109)
    
    # Testing the type of an if condition (line 554)
    if_condition_140111 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 554, 4), result_eq_140110)
    # Assigning a type to the variable 'if_condition_140111' (line 554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 4), 'if_condition_140111', if_condition_140111)
    # SSA begins for if statement (line 554)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 't1' (line 555)
    t1_140112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 15), 't1')
    # Assigning a type to the variable 'stypy_return_type' (line 555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'stypy_return_type', t1_140112)
    # SSA join for if statement (line 554)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'None' (line 556)
    None_140113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 11), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 4), 'stypy_return_type', None_140113)
    
    # ################# End of 'common_fill_value(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'common_fill_value' in the type store
    # Getting the type of 'stypy_return_type' (line 527)
    stypy_return_type_140114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_140114)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'common_fill_value'
    return stypy_return_type_140114

# Assigning a type to the variable 'common_fill_value' (line 527)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 0), 'common_fill_value', common_fill_value)

@norecursion
def filled(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 559)
    None_140115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 25), 'None')
    defaults = [None_140115]
    # Create a new context for function 'filled'
    module_type_store = module_type_store.open_function_context('filled', 559, 0, False)
    
    # Passed parameters checking function
    filled.stypy_localization = localization
    filled.stypy_type_of_self = None
    filled.stypy_type_store = module_type_store
    filled.stypy_function_name = 'filled'
    filled.stypy_param_names_list = ['a', 'fill_value']
    filled.stypy_varargs_param_name = None
    filled.stypy_kwargs_param_name = None
    filled.stypy_call_defaults = defaults
    filled.stypy_call_varargs = varargs
    filled.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'filled', ['a', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'filled', localization, ['a', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'filled(...)' code ##################

    str_140116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, (-1)), 'str', '\n    Return input as an array with masked data replaced by a fill value.\n\n    If `a` is not a `MaskedArray`, `a` itself is returned.\n    If `a` is a `MaskedArray` and `fill_value` is None, `fill_value` is set to\n    ``a.fill_value``.\n\n    Parameters\n    ----------\n    a : MaskedArray or array_like\n        An input object.\n    fill_value : scalar, optional\n        Filling value. Default is None.\n\n    Returns\n    -------\n    a : ndarray\n        The filled array.\n\n    See Also\n    --------\n    compressed\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],\n    ...                                                   [1, 0, 0],\n    ...                                                   [0, 0, 0]])\n    >>> x.filled()\n    array([[999999,      1,      2],\n           [999999,      4,      5],\n           [     6,      7,      8]])\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 594)
    str_140117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 18), 'str', 'filled')
    # Getting the type of 'a' (line 594)
    a_140118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 15), 'a')
    
    (may_be_140119, more_types_in_union_140120) = may_provide_member(str_140117, a_140118)

    if may_be_140119:

        if more_types_in_union_140120:
            # Runtime conditional SSA (line 594)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'a' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'a', remove_not_member_provider_from_union(a_140118, 'filled'))
        
        # Call to filled(...): (line 595)
        # Processing the call arguments (line 595)
        # Getting the type of 'fill_value' (line 595)
        fill_value_140123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 24), 'fill_value', False)
        # Processing the call keyword arguments (line 595)
        kwargs_140124 = {}
        # Getting the type of 'a' (line 595)
        a_140121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 15), 'a', False)
        # Obtaining the member 'filled' of a type (line 595)
        filled_140122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 15), a_140121, 'filled')
        # Calling filled(args, kwargs) (line 595)
        filled_call_result_140125 = invoke(stypy.reporting.localization.Localization(__file__, 595, 15), filled_140122, *[fill_value_140123], **kwargs_140124)
        
        # Assigning a type to the variable 'stypy_return_type' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'stypy_return_type', filled_call_result_140125)

        if more_types_in_union_140120:
            # Runtime conditional SSA for else branch (line 594)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_140119) or more_types_in_union_140120):
        # Assigning a type to the variable 'a' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'a', remove_member_provider_from_union(a_140118, 'filled'))
        
        
        # Call to isinstance(...): (line 596)
        # Processing the call arguments (line 596)
        # Getting the type of 'a' (line 596)
        a_140127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 20), 'a', False)
        # Getting the type of 'ndarray' (line 596)
        ndarray_140128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 23), 'ndarray', False)
        # Processing the call keyword arguments (line 596)
        kwargs_140129 = {}
        # Getting the type of 'isinstance' (line 596)
        isinstance_140126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 9), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 596)
        isinstance_call_result_140130 = invoke(stypy.reporting.localization.Localization(__file__, 596, 9), isinstance_140126, *[a_140127, ndarray_140128], **kwargs_140129)
        
        # Testing the type of an if condition (line 596)
        if_condition_140131 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 596, 9), isinstance_call_result_140130)
        # Assigning a type to the variable 'if_condition_140131' (line 596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 9), 'if_condition_140131', if_condition_140131)
        # SSA begins for if statement (line 596)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'a' (line 598)
        a_140132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'stypy_return_type', a_140132)
        # SSA branch for the else part of an if statement (line 596)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 599)
        # Getting the type of 'dict' (line 599)
        dict_140133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 23), 'dict')
        # Getting the type of 'a' (line 599)
        a_140134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 20), 'a')
        
        (may_be_140135, more_types_in_union_140136) = may_be_subtype(dict_140133, a_140134)

        if may_be_140135:

            if more_types_in_union_140136:
                # Runtime conditional SSA (line 599)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'a' (line 599)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 9), 'a', remove_not_subtype_from_union(a_140134, dict))
            
            # Call to array(...): (line 600)
            # Processing the call arguments (line 600)
            # Getting the type of 'a' (line 600)
            a_140139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 24), 'a', False)
            str_140140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 27), 'str', 'O')
            # Processing the call keyword arguments (line 600)
            kwargs_140141 = {}
            # Getting the type of 'np' (line 600)
            np_140137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 15), 'np', False)
            # Obtaining the member 'array' of a type (line 600)
            array_140138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 15), np_140137, 'array')
            # Calling array(args, kwargs) (line 600)
            array_call_result_140142 = invoke(stypy.reporting.localization.Localization(__file__, 600, 15), array_140138, *[a_140139, str_140140], **kwargs_140141)
            
            # Assigning a type to the variable 'stypy_return_type' (line 600)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'stypy_return_type', array_call_result_140142)

            if more_types_in_union_140136:
                # Runtime conditional SSA for else branch (line 599)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_140135) or more_types_in_union_140136):
            # Assigning a type to the variable 'a' (line 599)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 9), 'a', remove_subtype_from_union(a_140134, dict))
            
            # Call to array(...): (line 602)
            # Processing the call arguments (line 602)
            # Getting the type of 'a' (line 602)
            a_140145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 24), 'a', False)
            # Processing the call keyword arguments (line 602)
            kwargs_140146 = {}
            # Getting the type of 'np' (line 602)
            np_140143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 15), 'np', False)
            # Obtaining the member 'array' of a type (line 602)
            array_140144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 15), np_140143, 'array')
            # Calling array(args, kwargs) (line 602)
            array_call_result_140147 = invoke(stypy.reporting.localization.Localization(__file__, 602, 15), array_140144, *[a_140145], **kwargs_140146)
            
            # Assigning a type to the variable 'stypy_return_type' (line 602)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'stypy_return_type', array_call_result_140147)

            if (may_be_140135 and more_types_in_union_140136):
                # SSA join for if statement (line 599)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 596)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_140119 and more_types_in_union_140120):
            # SSA join for if statement (line 594)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'filled(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'filled' in the type store
    # Getting the type of 'stypy_return_type' (line 559)
    stypy_return_type_140148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_140148)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'filled'
    return stypy_return_type_140148

# Assigning a type to the variable 'filled' (line 559)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 0), 'filled', filled)

@norecursion
def get_masked_subclass(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_masked_subclass'
    module_type_store = module_type_store.open_function_context('get_masked_subclass', 605, 0, False)
    
    # Passed parameters checking function
    get_masked_subclass.stypy_localization = localization
    get_masked_subclass.stypy_type_of_self = None
    get_masked_subclass.stypy_type_store = module_type_store
    get_masked_subclass.stypy_function_name = 'get_masked_subclass'
    get_masked_subclass.stypy_param_names_list = []
    get_masked_subclass.stypy_varargs_param_name = 'arrays'
    get_masked_subclass.stypy_kwargs_param_name = None
    get_masked_subclass.stypy_call_defaults = defaults
    get_masked_subclass.stypy_call_varargs = varargs
    get_masked_subclass.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_masked_subclass', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_masked_subclass', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_masked_subclass(...)' code ##################

    str_140149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, (-1)), 'str', '\n    Return the youngest subclass of MaskedArray from a list of (masked) arrays.\n\n    In case of siblings, the first listed takes over.\n\n    ')
    
    
    
    # Call to len(...): (line 612)
    # Processing the call arguments (line 612)
    # Getting the type of 'arrays' (line 612)
    arrays_140151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 11), 'arrays', False)
    # Processing the call keyword arguments (line 612)
    kwargs_140152 = {}
    # Getting the type of 'len' (line 612)
    len_140150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 7), 'len', False)
    # Calling len(args, kwargs) (line 612)
    len_call_result_140153 = invoke(stypy.reporting.localization.Localization(__file__, 612, 7), len_140150, *[arrays_140151], **kwargs_140152)
    
    int_140154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 22), 'int')
    # Applying the binary operator '==' (line 612)
    result_eq_140155 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 7), '==', len_call_result_140153, int_140154)
    
    # Testing the type of an if condition (line 612)
    if_condition_140156 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 612, 4), result_eq_140155)
    # Assigning a type to the variable 'if_condition_140156' (line 612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 4), 'if_condition_140156', if_condition_140156)
    # SSA begins for if statement (line 612)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 613):
    
    # Assigning a Subscript to a Name (line 613):
    
    # Obtaining the type of the subscript
    int_140157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 21), 'int')
    # Getting the type of 'arrays' (line 613)
    arrays_140158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 14), 'arrays')
    # Obtaining the member '__getitem__' of a type (line 613)
    getitem___140159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 14), arrays_140158, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 613)
    subscript_call_result_140160 = invoke(stypy.reporting.localization.Localization(__file__, 613, 14), getitem___140159, int_140157)
    
    # Assigning a type to the variable 'arr' (line 613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'arr', subscript_call_result_140160)
    
    
    # Call to isinstance(...): (line 614)
    # Processing the call arguments (line 614)
    # Getting the type of 'arr' (line 614)
    arr_140162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 22), 'arr', False)
    # Getting the type of 'MaskedArray' (line 614)
    MaskedArray_140163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 27), 'MaskedArray', False)
    # Processing the call keyword arguments (line 614)
    kwargs_140164 = {}
    # Getting the type of 'isinstance' (line 614)
    isinstance_140161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 614)
    isinstance_call_result_140165 = invoke(stypy.reporting.localization.Localization(__file__, 614, 11), isinstance_140161, *[arr_140162, MaskedArray_140163], **kwargs_140164)
    
    # Testing the type of an if condition (line 614)
    if_condition_140166 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 614, 8), isinstance_call_result_140165)
    # Assigning a type to the variable 'if_condition_140166' (line 614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 8), 'if_condition_140166', if_condition_140166)
    # SSA begins for if statement (line 614)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 615):
    
    # Assigning a Call to a Name (line 615):
    
    # Call to type(...): (line 615)
    # Processing the call arguments (line 615)
    # Getting the type of 'arr' (line 615)
    arr_140168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 24), 'arr', False)
    # Processing the call keyword arguments (line 615)
    kwargs_140169 = {}
    # Getting the type of 'type' (line 615)
    type_140167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 19), 'type', False)
    # Calling type(args, kwargs) (line 615)
    type_call_result_140170 = invoke(stypy.reporting.localization.Localization(__file__, 615, 19), type_140167, *[arr_140168], **kwargs_140169)
    
    # Assigning a type to the variable 'rcls' (line 615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 12), 'rcls', type_call_result_140170)
    # SSA branch for the else part of an if statement (line 614)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 617):
    
    # Assigning a Name to a Name (line 617):
    # Getting the type of 'MaskedArray' (line 617)
    MaskedArray_140171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 19), 'MaskedArray')
    # Assigning a type to the variable 'rcls' (line 617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 12), 'rcls', MaskedArray_140171)
    # SSA join for if statement (line 614)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 612)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a ListComp to a Name (line 619):
    
    # Assigning a ListComp to a Name (line 619):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'arrays' (line 619)
    arrays_140176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 35), 'arrays')
    comprehension_140177 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 18), arrays_140176)
    # Assigning a type to the variable 'a' (line 619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 18), 'a', comprehension_140177)
    
    # Call to type(...): (line 619)
    # Processing the call arguments (line 619)
    # Getting the type of 'a' (line 619)
    a_140173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 23), 'a', False)
    # Processing the call keyword arguments (line 619)
    kwargs_140174 = {}
    # Getting the type of 'type' (line 619)
    type_140172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 18), 'type', False)
    # Calling type(args, kwargs) (line 619)
    type_call_result_140175 = invoke(stypy.reporting.localization.Localization(__file__, 619, 18), type_140172, *[a_140173], **kwargs_140174)
    
    list_140178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 619, 18), list_140178, type_call_result_140175)
    # Assigning a type to the variable 'arrcls' (line 619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 'arrcls', list_140178)
    
    # Assigning a Subscript to a Name (line 620):
    
    # Assigning a Subscript to a Name (line 620):
    
    # Obtaining the type of the subscript
    int_140179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 22), 'int')
    # Getting the type of 'arrcls' (line 620)
    arrcls_140180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 15), 'arrcls')
    # Obtaining the member '__getitem__' of a type (line 620)
    getitem___140181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 15), arrcls_140180, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 620)
    subscript_call_result_140182 = invoke(stypy.reporting.localization.Localization(__file__, 620, 15), getitem___140181, int_140179)
    
    # Assigning a type to the variable 'rcls' (line 620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'rcls', subscript_call_result_140182)
    
    
    
    # Call to issubclass(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'rcls' (line 621)
    rcls_140184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 26), 'rcls', False)
    # Getting the type of 'MaskedArray' (line 621)
    MaskedArray_140185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 32), 'MaskedArray', False)
    # Processing the call keyword arguments (line 621)
    kwargs_140186 = {}
    # Getting the type of 'issubclass' (line 621)
    issubclass_140183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 621)
    issubclass_call_result_140187 = invoke(stypy.reporting.localization.Localization(__file__, 621, 15), issubclass_140183, *[rcls_140184, MaskedArray_140185], **kwargs_140186)
    
    # Applying the 'not' unary operator (line 621)
    result_not__140188 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 11), 'not', issubclass_call_result_140187)
    
    # Testing the type of an if condition (line 621)
    if_condition_140189 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 621, 8), result_not__140188)
    # Assigning a type to the variable 'if_condition_140189' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 8), 'if_condition_140189', if_condition_140189)
    # SSA begins for if statement (line 621)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 622):
    
    # Assigning a Name to a Name (line 622):
    # Getting the type of 'MaskedArray' (line 622)
    MaskedArray_140190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 19), 'MaskedArray')
    # Assigning a type to the variable 'rcls' (line 622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 12), 'rcls', MaskedArray_140190)
    # SSA join for if statement (line 621)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Obtaining the type of the subscript
    int_140191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 26), 'int')
    slice_140192 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 623, 19), int_140191, None, None)
    # Getting the type of 'arrcls' (line 623)
    arrcls_140193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 19), 'arrcls')
    # Obtaining the member '__getitem__' of a type (line 623)
    getitem___140194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 19), arrcls_140193, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 623)
    subscript_call_result_140195 = invoke(stypy.reporting.localization.Localization(__file__, 623, 19), getitem___140194, slice_140192)
    
    # Testing the type of a for loop iterable (line 623)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 623, 8), subscript_call_result_140195)
    # Getting the type of the for loop variable (line 623)
    for_loop_var_140196 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 623, 8), subscript_call_result_140195)
    # Assigning a type to the variable 'cls' (line 623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'cls', for_loop_var_140196)
    # SSA begins for a for statement (line 623)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to issubclass(...): (line 624)
    # Processing the call arguments (line 624)
    # Getting the type of 'cls' (line 624)
    cls_140198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 26), 'cls', False)
    # Getting the type of 'rcls' (line 624)
    rcls_140199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 31), 'rcls', False)
    # Processing the call keyword arguments (line 624)
    kwargs_140200 = {}
    # Getting the type of 'issubclass' (line 624)
    issubclass_140197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 15), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 624)
    issubclass_call_result_140201 = invoke(stypy.reporting.localization.Localization(__file__, 624, 15), issubclass_140197, *[cls_140198, rcls_140199], **kwargs_140200)
    
    # Testing the type of an if condition (line 624)
    if_condition_140202 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 624, 12), issubclass_call_result_140201)
    # Assigning a type to the variable 'if_condition_140202' (line 624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 12), 'if_condition_140202', if_condition_140202)
    # SSA begins for if statement (line 624)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 625):
    
    # Assigning a Name to a Name (line 625):
    # Getting the type of 'cls' (line 625)
    cls_140203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 23), 'cls')
    # Assigning a type to the variable 'rcls' (line 625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 16), 'rcls', cls_140203)
    # SSA join for if statement (line 624)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 612)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'rcls' (line 627)
    rcls_140204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 7), 'rcls')
    # Obtaining the member '__name__' of a type (line 627)
    name___140205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 7), rcls_140204, '__name__')
    str_140206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 24), 'str', 'MaskedConstant')
    # Applying the binary operator '==' (line 627)
    result_eq_140207 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 7), '==', name___140205, str_140206)
    
    # Testing the type of an if condition (line 627)
    if_condition_140208 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 627, 4), result_eq_140207)
    # Assigning a type to the variable 'if_condition_140208' (line 627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'if_condition_140208', if_condition_140208)
    # SSA begins for if statement (line 627)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'MaskedArray' (line 628)
    MaskedArray_140209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 15), 'MaskedArray')
    # Assigning a type to the variable 'stypy_return_type' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'stypy_return_type', MaskedArray_140209)
    # SSA join for if statement (line 627)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'rcls' (line 629)
    rcls_140210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 11), 'rcls')
    # Assigning a type to the variable 'stypy_return_type' (line 629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 4), 'stypy_return_type', rcls_140210)
    
    # ################# End of 'get_masked_subclass(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_masked_subclass' in the type store
    # Getting the type of 'stypy_return_type' (line 605)
    stypy_return_type_140211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_140211)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_masked_subclass'
    return stypy_return_type_140211

# Assigning a type to the variable 'get_masked_subclass' (line 605)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 0), 'get_masked_subclass', get_masked_subclass)

@norecursion
def getdata(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 632)
    True_140212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 21), 'True')
    defaults = [True_140212]
    # Create a new context for function 'getdata'
    module_type_store = module_type_store.open_function_context('getdata', 632, 0, False)
    
    # Passed parameters checking function
    getdata.stypy_localization = localization
    getdata.stypy_type_of_self = None
    getdata.stypy_type_store = module_type_store
    getdata.stypy_function_name = 'getdata'
    getdata.stypy_param_names_list = ['a', 'subok']
    getdata.stypy_varargs_param_name = None
    getdata.stypy_kwargs_param_name = None
    getdata.stypy_call_defaults = defaults
    getdata.stypy_call_varargs = varargs
    getdata.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'getdata', ['a', 'subok'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'getdata', localization, ['a', 'subok'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'getdata(...)' code ##################

    str_140213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, (-1)), 'str', '\n    Return the data of a masked array as an ndarray.\n\n    Return the data of `a` (if any) as an ndarray if `a` is a ``MaskedArray``,\n    else return `a` as a ndarray or subclass (depending on `subok`) if not.\n\n    Parameters\n    ----------\n    a : array_like\n        Input ``MaskedArray``, alternatively a ndarray or a subclass thereof.\n    subok : bool\n        Whether to force the output to be a `pure` ndarray (False) or to\n        return a subclass of ndarray if appropriate (True, default).\n\n    See Also\n    --------\n    getmask : Return the mask of a masked array, or nomask.\n    getmaskarray : Return the mask of a masked array, or full array of False.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\n    >>> a\n    masked_array(data =\n     [[1 --]\n     [3 4]],\n          mask =\n     [[False  True]\n     [False False]],\n          fill_value=999999)\n    >>> ma.getdata(a)\n    array([[1, 2],\n           [3, 4]])\n\n    Equivalently use the ``MaskedArray`` `data` attribute.\n\n    >>> a.data\n    array([[1, 2],\n           [3, 4]])\n\n    ')
    
    
    # SSA begins for try-except statement (line 675)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Attribute to a Name (line 676):
    
    # Assigning a Attribute to a Name (line 676):
    # Getting the type of 'a' (line 676)
    a_140214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 15), 'a')
    # Obtaining the member '_data' of a type (line 676)
    _data_140215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 15), a_140214, '_data')
    # Assigning a type to the variable 'data' (line 676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 8), 'data', _data_140215)
    # SSA branch for the except part of a try statement (line 675)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 675)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 678):
    
    # Assigning a Call to a Name (line 678):
    
    # Call to array(...): (line 678)
    # Processing the call arguments (line 678)
    # Getting the type of 'a' (line 678)
    a_140218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 24), 'a', False)
    # Processing the call keyword arguments (line 678)
    # Getting the type of 'False' (line 678)
    False_140219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 32), 'False', False)
    keyword_140220 = False_140219
    # Getting the type of 'subok' (line 678)
    subok_140221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 45), 'subok', False)
    keyword_140222 = subok_140221
    kwargs_140223 = {'subok': keyword_140222, 'copy': keyword_140220}
    # Getting the type of 'np' (line 678)
    np_140216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 678)
    array_140217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 15), np_140216, 'array')
    # Calling array(args, kwargs) (line 678)
    array_call_result_140224 = invoke(stypy.reporting.localization.Localization(__file__, 678, 15), array_140217, *[a_140218], **kwargs_140223)
    
    # Assigning a type to the variable 'data' (line 678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 8), 'data', array_call_result_140224)
    # SSA join for try-except statement (line 675)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'subok' (line 679)
    subok_140225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 11), 'subok')
    # Applying the 'not' unary operator (line 679)
    result_not__140226 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 7), 'not', subok_140225)
    
    # Testing the type of an if condition (line 679)
    if_condition_140227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 679, 4), result_not__140226)
    # Assigning a type to the variable 'if_condition_140227' (line 679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 4), 'if_condition_140227', if_condition_140227)
    # SSA begins for if statement (line 679)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to view(...): (line 680)
    # Processing the call arguments (line 680)
    # Getting the type of 'ndarray' (line 680)
    ndarray_140230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 25), 'ndarray', False)
    # Processing the call keyword arguments (line 680)
    kwargs_140231 = {}
    # Getting the type of 'data' (line 680)
    data_140228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 15), 'data', False)
    # Obtaining the member 'view' of a type (line 680)
    view_140229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 15), data_140228, 'view')
    # Calling view(args, kwargs) (line 680)
    view_call_result_140232 = invoke(stypy.reporting.localization.Localization(__file__, 680, 15), view_140229, *[ndarray_140230], **kwargs_140231)
    
    # Assigning a type to the variable 'stypy_return_type' (line 680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'stypy_return_type', view_call_result_140232)
    # SSA join for if statement (line 679)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'data' (line 681)
    data_140233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 11), 'data')
    # Assigning a type to the variable 'stypy_return_type' (line 681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 4), 'stypy_return_type', data_140233)
    
    # ################# End of 'getdata(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'getdata' in the type store
    # Getting the type of 'stypy_return_type' (line 632)
    stypy_return_type_140234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_140234)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'getdata'
    return stypy_return_type_140234

# Assigning a type to the variable 'getdata' (line 632)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 0), 'getdata', getdata)

# Assigning a Name to a Name (line 684):

# Assigning a Name to a Name (line 684):
# Getting the type of 'getdata' (line 684)
getdata_140235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 11), 'getdata')
# Assigning a type to the variable 'get_data' (line 684)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 0), 'get_data', getdata_140235)

@norecursion
def fix_invalid(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'nomask' (line 687)
    nomask_140236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 24), 'nomask')
    # Getting the type of 'True' (line 687)
    True_140237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 37), 'True')
    # Getting the type of 'None' (line 687)
    None_140238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 54), 'None')
    defaults = [nomask_140236, True_140237, None_140238]
    # Create a new context for function 'fix_invalid'
    module_type_store = module_type_store.open_function_context('fix_invalid', 687, 0, False)
    
    # Passed parameters checking function
    fix_invalid.stypy_localization = localization
    fix_invalid.stypy_type_of_self = None
    fix_invalid.stypy_type_store = module_type_store
    fix_invalid.stypy_function_name = 'fix_invalid'
    fix_invalid.stypy_param_names_list = ['a', 'mask', 'copy', 'fill_value']
    fix_invalid.stypy_varargs_param_name = None
    fix_invalid.stypy_kwargs_param_name = None
    fix_invalid.stypy_call_defaults = defaults
    fix_invalid.stypy_call_varargs = varargs
    fix_invalid.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fix_invalid', ['a', 'mask', 'copy', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fix_invalid', localization, ['a', 'mask', 'copy', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fix_invalid(...)' code ##################

    str_140239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, (-1)), 'str', '\n    Return input with invalid data masked and replaced by a fill value.\n\n    Invalid data means values of `nan`, `inf`, etc.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array, a (subclass of) ndarray.\n    mask : sequence, optional\n        Mask. Must be convertible to an array of booleans with the same\n        shape as `data`. True indicates a masked (i.e. invalid) data.\n    copy : bool, optional\n        Whether to use a copy of `a` (True) or to fix `a` in place (False).\n        Default is True.\n    fill_value : scalar, optional\n        Value used for fixing invalid data. Default is None, in which case\n        the ``a.fill_value`` is used.\n\n    Returns\n    -------\n    b : MaskedArray\n        The input array with invalid entries fixed.\n\n    Notes\n    -----\n    A copy is performed by default.\n\n    Examples\n    --------\n    >>> x = np.ma.array([1., -1, np.nan, np.inf], mask=[1] + [0]*3)\n    >>> x\n    masked_array(data = [-- -1.0 nan inf],\n                 mask = [ True False False False],\n           fill_value = 1e+20)\n    >>> np.ma.fix_invalid(x)\n    masked_array(data = [-- -1.0 -- --],\n                 mask = [ True False  True  True],\n           fill_value = 1e+20)\n\n    >>> fixed = np.ma.fix_invalid(x)\n    >>> fixed.data\n    array([  1.00000000e+00,  -1.00000000e+00,   1.00000000e+20,\n             1.00000000e+20])\n    >>> x.data\n    array([  1.,  -1.,  NaN,  Inf])\n\n    ')
    
    # Assigning a Call to a Name (line 736):
    
    # Assigning a Call to a Name (line 736):
    
    # Call to masked_array(...): (line 736)
    # Processing the call arguments (line 736)
    # Getting the type of 'a' (line 736)
    a_140241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 21), 'a', False)
    # Processing the call keyword arguments (line 736)
    # Getting the type of 'copy' (line 736)
    copy_140242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 29), 'copy', False)
    keyword_140243 = copy_140242
    # Getting the type of 'mask' (line 736)
    mask_140244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 40), 'mask', False)
    keyword_140245 = mask_140244
    # Getting the type of 'True' (line 736)
    True_140246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 52), 'True', False)
    keyword_140247 = True_140246
    kwargs_140248 = {'subok': keyword_140247, 'copy': keyword_140243, 'mask': keyword_140245}
    # Getting the type of 'masked_array' (line 736)
    masked_array_140240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 736)
    masked_array_call_result_140249 = invoke(stypy.reporting.localization.Localization(__file__, 736, 8), masked_array_140240, *[a_140241], **kwargs_140248)
    
    # Assigning a type to the variable 'a' (line 736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'a', masked_array_call_result_140249)
    
    # Assigning a Call to a Name (line 737):
    
    # Assigning a Call to a Name (line 737):
    
    # Call to logical_not(...): (line 737)
    # Processing the call arguments (line 737)
    
    # Call to isfinite(...): (line 737)
    # Processing the call arguments (line 737)
    # Getting the type of 'a' (line 737)
    a_140254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 41), 'a', False)
    # Obtaining the member '_data' of a type (line 737)
    _data_140255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 41), a_140254, '_data')
    # Processing the call keyword arguments (line 737)
    kwargs_140256 = {}
    # Getting the type of 'np' (line 737)
    np_140252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 29), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 737)
    isfinite_140253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 29), np_140252, 'isfinite')
    # Calling isfinite(args, kwargs) (line 737)
    isfinite_call_result_140257 = invoke(stypy.reporting.localization.Localization(__file__, 737, 29), isfinite_140253, *[_data_140255], **kwargs_140256)
    
    # Processing the call keyword arguments (line 737)
    kwargs_140258 = {}
    # Getting the type of 'np' (line 737)
    np_140250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 14), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 737)
    logical_not_140251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 14), np_140250, 'logical_not')
    # Calling logical_not(args, kwargs) (line 737)
    logical_not_call_result_140259 = invoke(stypy.reporting.localization.Localization(__file__, 737, 14), logical_not_140251, *[isfinite_call_result_140257], **kwargs_140258)
    
    # Assigning a type to the variable 'invalid' (line 737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 4), 'invalid', logical_not_call_result_140259)
    
    
    
    # Call to any(...): (line 738)
    # Processing the call keyword arguments (line 738)
    kwargs_140262 = {}
    # Getting the type of 'invalid' (line 738)
    invalid_140260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 11), 'invalid', False)
    # Obtaining the member 'any' of a type (line 738)
    any_140261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 11), invalid_140260, 'any')
    # Calling any(args, kwargs) (line 738)
    any_call_result_140263 = invoke(stypy.reporting.localization.Localization(__file__, 738, 11), any_140261, *[], **kwargs_140262)
    
    # Applying the 'not' unary operator (line 738)
    result_not__140264 = python_operator(stypy.reporting.localization.Localization(__file__, 738, 7), 'not', any_call_result_140263)
    
    # Testing the type of an if condition (line 738)
    if_condition_140265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 738, 4), result_not__140264)
    # Assigning a type to the variable 'if_condition_140265' (line 738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 4), 'if_condition_140265', if_condition_140265)
    # SSA begins for if statement (line 738)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 739)
    a_140266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'stypy_return_type', a_140266)
    # SSA join for if statement (line 738)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'a' (line 740)
    a_140267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 4), 'a')
    # Obtaining the member '_mask' of a type (line 740)
    _mask_140268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 4), a_140267, '_mask')
    # Getting the type of 'invalid' (line 740)
    invalid_140269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 15), 'invalid')
    # Applying the binary operator '|=' (line 740)
    result_ior_140270 = python_operator(stypy.reporting.localization.Localization(__file__, 740, 4), '|=', _mask_140268, invalid_140269)
    # Getting the type of 'a' (line 740)
    a_140271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 4), 'a')
    # Setting the type of the member '_mask' of a type (line 740)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 4), a_140271, '_mask', result_ior_140270)
    
    
    # Type idiom detected: calculating its left and rigth part (line 741)
    # Getting the type of 'fill_value' (line 741)
    fill_value_140272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 7), 'fill_value')
    # Getting the type of 'None' (line 741)
    None_140273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 21), 'None')
    
    (may_be_140274, more_types_in_union_140275) = may_be_none(fill_value_140272, None_140273)

    if may_be_140274:

        if more_types_in_union_140275:
            # Runtime conditional SSA (line 741)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 742):
        
        # Assigning a Attribute to a Name (line 742):
        # Getting the type of 'a' (line 742)
        a_140276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 21), 'a')
        # Obtaining the member 'fill_value' of a type (line 742)
        fill_value_140277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 21), a_140276, 'fill_value')
        # Assigning a type to the variable 'fill_value' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'fill_value', fill_value_140277)

        if more_types_in_union_140275:
            # SSA join for if statement (line 741)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Subscript (line 743):
    
    # Assigning a Name to a Subscript (line 743):
    # Getting the type of 'fill_value' (line 743)
    fill_value_140278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 23), 'fill_value')
    # Getting the type of 'a' (line 743)
    a_140279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'a')
    # Obtaining the member '_data' of a type (line 743)
    _data_140280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 4), a_140279, '_data')
    # Getting the type of 'invalid' (line 743)
    invalid_140281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'invalid')
    # Storing an element on a container (line 743)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 743, 4), _data_140280, (invalid_140281, fill_value_140278))
    # Getting the type of 'a' (line 744)
    a_140282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 4), 'stypy_return_type', a_140282)
    
    # ################# End of 'fix_invalid(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fix_invalid' in the type store
    # Getting the type of 'stypy_return_type' (line 687)
    stypy_return_type_140283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_140283)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fix_invalid'
    return stypy_return_type_140283

# Assigning a type to the variable 'fix_invalid' (line 687)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 0), 'fix_invalid', fix_invalid)

# Assigning a Dict to a Name (line 752):

# Assigning a Dict to a Name (line 752):

# Obtaining an instance of the builtin type 'dict' (line 752)
dict_140284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 752)

# Assigning a type to the variable 'ufunc_domain' (line 752)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 0), 'ufunc_domain', dict_140284)

# Assigning a Dict to a Name (line 753):

# Assigning a Dict to a Name (line 753):

# Obtaining an instance of the builtin type 'dict' (line 753)
dict_140285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 14), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 753)

# Assigning a type to the variable 'ufunc_fills' (line 753)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 0), 'ufunc_fills', dict_140285)
# Declaration of the '_DomainCheckInterval' class

class _DomainCheckInterval:
    str_140286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, (-1)), 'str', '\n    Define a valid interval, so that :\n\n    ``domain_check_interval(a,b)(x) == True`` where\n    ``x < a`` or ``x > b``.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 765, 4, False)
        # Assigning a type to the variable 'self' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainCheckInterval.__init__', ['a', 'b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_140287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 8), 'str', 'domain_check_interval(a,b)(x) = true where x < a or y > b')
        
        
        # Getting the type of 'a' (line 767)
        a_140288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 12), 'a')
        # Getting the type of 'b' (line 767)
        b_140289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 16), 'b')
        # Applying the binary operator '>' (line 767)
        result_gt_140290 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 12), '>', a_140288, b_140289)
        
        # Testing the type of an if condition (line 767)
        if_condition_140291 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 767, 8), result_gt_140290)
        # Assigning a type to the variable 'if_condition_140291' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'if_condition_140291', if_condition_140291)
        # SSA begins for if statement (line 767)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 768):
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'b' (line 768)
        b_140292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 22), 'b')
        # Assigning a type to the variable 'tuple_assignment_139157' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'tuple_assignment_139157', b_140292)
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'a' (line 768)
        a_140293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 25), 'a')
        # Assigning a type to the variable 'tuple_assignment_139158' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'tuple_assignment_139158', a_140293)
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'tuple_assignment_139157' (line 768)
        tuple_assignment_139157_140294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'tuple_assignment_139157')
        # Assigning a type to the variable 'a' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 13), 'a', tuple_assignment_139157_140294)
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'tuple_assignment_139158' (line 768)
        tuple_assignment_139158_140295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'tuple_assignment_139158')
        # Assigning a type to the variable 'b' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 16), 'b', tuple_assignment_139158_140295)
        # SSA join for if statement (line 767)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 769):
        
        # Assigning a Name to a Attribute (line 769):
        # Getting the type of 'a' (line 769)
        a_140296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 17), 'a')
        # Getting the type of 'self' (line 769)
        self_140297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'self')
        # Setting the type of the member 'a' of a type (line 769)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 8), self_140297, 'a', a_140296)
        
        # Assigning a Name to a Attribute (line 770):
        
        # Assigning a Name to a Attribute (line 770):
        # Getting the type of 'b' (line 770)
        b_140298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 17), 'b')
        # Getting the type of 'self' (line 770)
        self_140299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'self')
        # Setting the type of the member 'b' of a type (line 770)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 8), self_140299, 'b', b_140298)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 772, 4, False)
        # Assigning a type to the variable 'self' (line 773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_localization', localization)
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_function_name', '_DomainCheckInterval.__call__')
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_param_names_list', ['x'])
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DomainCheckInterval.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainCheckInterval.__call__', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_140300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 8), 'str', 'Execute the call behavior.')
        
        # Call to logical_or(...): (line 774)
        # Processing the call arguments (line 774)
        
        # Call to greater(...): (line 774)
        # Processing the call arguments (line 774)
        # Getting the type of 'x' (line 774)
        x_140305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 46), 'x', False)
        # Getting the type of 'self' (line 774)
        self_140306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 49), 'self', False)
        # Obtaining the member 'b' of a type (line 774)
        b_140307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 49), self_140306, 'b')
        # Processing the call keyword arguments (line 774)
        kwargs_140308 = {}
        # Getting the type of 'umath' (line 774)
        umath_140303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 32), 'umath', False)
        # Obtaining the member 'greater' of a type (line 774)
        greater_140304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 32), umath_140303, 'greater')
        # Calling greater(args, kwargs) (line 774)
        greater_call_result_140309 = invoke(stypy.reporting.localization.Localization(__file__, 774, 32), greater_140304, *[x_140305, b_140307], **kwargs_140308)
        
        
        # Call to less(...): (line 775)
        # Processing the call arguments (line 775)
        # Getting the type of 'x' (line 775)
        x_140312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 43), 'x', False)
        # Getting the type of 'self' (line 775)
        self_140313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 46), 'self', False)
        # Obtaining the member 'a' of a type (line 775)
        a_140314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 46), self_140313, 'a')
        # Processing the call keyword arguments (line 775)
        kwargs_140315 = {}
        # Getting the type of 'umath' (line 775)
        umath_140310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 32), 'umath', False)
        # Obtaining the member 'less' of a type (line 775)
        less_140311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 32), umath_140310, 'less')
        # Calling less(args, kwargs) (line 775)
        less_call_result_140316 = invoke(stypy.reporting.localization.Localization(__file__, 775, 32), less_140311, *[x_140312, a_140314], **kwargs_140315)
        
        # Processing the call keyword arguments (line 774)
        kwargs_140317 = {}
        # Getting the type of 'umath' (line 774)
        umath_140301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 15), 'umath', False)
        # Obtaining the member 'logical_or' of a type (line 774)
        logical_or_140302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 15), umath_140301, 'logical_or')
        # Calling logical_or(args, kwargs) (line 774)
        logical_or_call_result_140318 = invoke(stypy.reporting.localization.Localization(__file__, 774, 15), logical_or_140302, *[greater_call_result_140309, less_call_result_140316], **kwargs_140317)
        
        # Assigning a type to the variable 'stypy_return_type' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 8), 'stypy_return_type', logical_or_call_result_140318)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 772)
        stypy_return_type_140319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140319)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_140319


# Assigning a type to the variable '_DomainCheckInterval' (line 756)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 0), '_DomainCheckInterval', _DomainCheckInterval)
# Declaration of the '_DomainTan' class

class _DomainTan:
    str_140320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, (-1)), 'str', '\n    Define a valid interval for the `tan` function, so that:\n\n    ``domain_tan(eps) = True`` where ``abs(cos(x)) < eps``\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 786, 4, False)
        # Assigning a type to the variable 'self' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainTan.__init__', ['eps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['eps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_140321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 8), 'str', 'domain_tan(eps) = true where abs(cos(x)) < eps)')
        
        # Assigning a Name to a Attribute (line 788):
        
        # Assigning a Name to a Attribute (line 788):
        # Getting the type of 'eps' (line 788)
        eps_140322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 19), 'eps')
        # Getting the type of 'self' (line 788)
        self_140323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'self')
        # Setting the type of the member 'eps' of a type (line 788)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 8), self_140323, 'eps', eps_140322)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 790, 4, False)
        # Assigning a type to the variable 'self' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DomainTan.__call__.__dict__.__setitem__('stypy_localization', localization)
        _DomainTan.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DomainTan.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DomainTan.__call__.__dict__.__setitem__('stypy_function_name', '_DomainTan.__call__')
        _DomainTan.__call__.__dict__.__setitem__('stypy_param_names_list', ['x'])
        _DomainTan.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DomainTan.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DomainTan.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DomainTan.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DomainTan.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DomainTan.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainTan.__call__', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_140324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 8), 'str', 'Executes the call behavior.')
        
        # Call to less(...): (line 792)
        # Processing the call arguments (line 792)
        
        # Call to absolute(...): (line 792)
        # Processing the call arguments (line 792)
        
        # Call to cos(...): (line 792)
        # Processing the call arguments (line 792)
        # Getting the type of 'x' (line 792)
        x_140331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 51), 'x', False)
        # Processing the call keyword arguments (line 792)
        kwargs_140332 = {}
        # Getting the type of 'umath' (line 792)
        umath_140329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 41), 'umath', False)
        # Obtaining the member 'cos' of a type (line 792)
        cos_140330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 41), umath_140329, 'cos')
        # Calling cos(args, kwargs) (line 792)
        cos_call_result_140333 = invoke(stypy.reporting.localization.Localization(__file__, 792, 41), cos_140330, *[x_140331], **kwargs_140332)
        
        # Processing the call keyword arguments (line 792)
        kwargs_140334 = {}
        # Getting the type of 'umath' (line 792)
        umath_140327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 26), 'umath', False)
        # Obtaining the member 'absolute' of a type (line 792)
        absolute_140328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 26), umath_140327, 'absolute')
        # Calling absolute(args, kwargs) (line 792)
        absolute_call_result_140335 = invoke(stypy.reporting.localization.Localization(__file__, 792, 26), absolute_140328, *[cos_call_result_140333], **kwargs_140334)
        
        # Getting the type of 'self' (line 792)
        self_140336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 56), 'self', False)
        # Obtaining the member 'eps' of a type (line 792)
        eps_140337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 56), self_140336, 'eps')
        # Processing the call keyword arguments (line 792)
        kwargs_140338 = {}
        # Getting the type of 'umath' (line 792)
        umath_140325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 15), 'umath', False)
        # Obtaining the member 'less' of a type (line 792)
        less_140326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 15), umath_140325, 'less')
        # Calling less(args, kwargs) (line 792)
        less_call_result_140339 = invoke(stypy.reporting.localization.Localization(__file__, 792, 15), less_140326, *[absolute_call_result_140335, eps_140337], **kwargs_140338)
        
        # Assigning a type to the variable 'stypy_return_type' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'stypy_return_type', less_call_result_140339)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 790)
        stypy_return_type_140340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140340)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_140340


# Assigning a type to the variable '_DomainTan' (line 778)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 778, 0), '_DomainTan', _DomainTan)
# Declaration of the '_DomainSafeDivide' class

class _DomainSafeDivide:
    str_140341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, (-1)), 'str', '\n    Define a domain for safe division.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 801)
        None_140342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 33), 'None')
        defaults = [None_140342]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 801, 4, False)
        # Assigning a type to the variable 'self' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainSafeDivide.__init__', ['tolerance'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['tolerance'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 802):
        
        # Assigning a Name to a Attribute (line 802):
        # Getting the type of 'tolerance' (line 802)
        tolerance_140343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 25), 'tolerance')
        # Getting the type of 'self' (line 802)
        self_140344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'self')
        # Setting the type of the member 'tolerance' of a type (line 802)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 8), self_140344, 'tolerance', tolerance_140343)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 804, 4, False)
        # Assigning a type to the variable 'self' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_localization', localization)
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_function_name', '_DomainSafeDivide.__call__')
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_param_names_list', ['a', 'b'])
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DomainSafeDivide.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainSafeDivide.__call__', ['a', 'b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 808)
        # Getting the type of 'self' (line 808)
        self_140345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 11), 'self')
        # Obtaining the member 'tolerance' of a type (line 808)
        tolerance_140346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 11), self_140345, 'tolerance')
        # Getting the type of 'None' (line 808)
        None_140347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 29), 'None')
        
        (may_be_140348, more_types_in_union_140349) = may_be_none(tolerance_140346, None_140347)

        if may_be_140348:

            if more_types_in_union_140349:
                # Runtime conditional SSA (line 808)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 809):
            
            # Assigning a Attribute to a Attribute (line 809):
            
            # Call to finfo(...): (line 809)
            # Processing the call arguments (line 809)
            # Getting the type of 'float' (line 809)
            float_140352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 38), 'float', False)
            # Processing the call keyword arguments (line 809)
            kwargs_140353 = {}
            # Getting the type of 'np' (line 809)
            np_140350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 29), 'np', False)
            # Obtaining the member 'finfo' of a type (line 809)
            finfo_140351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 29), np_140350, 'finfo')
            # Calling finfo(args, kwargs) (line 809)
            finfo_call_result_140354 = invoke(stypy.reporting.localization.Localization(__file__, 809, 29), finfo_140351, *[float_140352], **kwargs_140353)
            
            # Obtaining the member 'tiny' of a type (line 809)
            tiny_140355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 29), finfo_call_result_140354, 'tiny')
            # Getting the type of 'self' (line 809)
            self_140356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 12), 'self')
            # Setting the type of the member 'tolerance' of a type (line 809)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 12), self_140356, 'tolerance', tiny_140355)

            if more_types_in_union_140349:
                # SSA join for if statement (line 808)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Tuple to a Tuple (line 811):
        
        # Assigning a Call to a Name (line 811):
        
        # Call to asarray(...): (line 811)
        # Processing the call arguments (line 811)
        # Getting the type of 'a' (line 811)
        a_140359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 26), 'a', False)
        # Processing the call keyword arguments (line 811)
        kwargs_140360 = {}
        # Getting the type of 'np' (line 811)
        np_140357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 15), 'np', False)
        # Obtaining the member 'asarray' of a type (line 811)
        asarray_140358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 15), np_140357, 'asarray')
        # Calling asarray(args, kwargs) (line 811)
        asarray_call_result_140361 = invoke(stypy.reporting.localization.Localization(__file__, 811, 15), asarray_140358, *[a_140359], **kwargs_140360)
        
        # Assigning a type to the variable 'tuple_assignment_139159' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'tuple_assignment_139159', asarray_call_result_140361)
        
        # Assigning a Call to a Name (line 811):
        
        # Call to asarray(...): (line 811)
        # Processing the call arguments (line 811)
        # Getting the type of 'b' (line 811)
        b_140364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 41), 'b', False)
        # Processing the call keyword arguments (line 811)
        kwargs_140365 = {}
        # Getting the type of 'np' (line 811)
        np_140362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 30), 'np', False)
        # Obtaining the member 'asarray' of a type (line 811)
        asarray_140363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 30), np_140362, 'asarray')
        # Calling asarray(args, kwargs) (line 811)
        asarray_call_result_140366 = invoke(stypy.reporting.localization.Localization(__file__, 811, 30), asarray_140363, *[b_140364], **kwargs_140365)
        
        # Assigning a type to the variable 'tuple_assignment_139160' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'tuple_assignment_139160', asarray_call_result_140366)
        
        # Assigning a Name to a Name (line 811):
        # Getting the type of 'tuple_assignment_139159' (line 811)
        tuple_assignment_139159_140367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'tuple_assignment_139159')
        # Assigning a type to the variable 'a' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'a', tuple_assignment_139159_140367)
        
        # Assigning a Name to a Name (line 811):
        # Getting the type of 'tuple_assignment_139160' (line 811)
        tuple_assignment_139160_140368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'tuple_assignment_139160')
        # Assigning a type to the variable 'b' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 11), 'b', tuple_assignment_139160_140368)
        
        
        # Call to absolute(...): (line 812)
        # Processing the call arguments (line 812)
        # Getting the type of 'a' (line 812)
        a_140371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 30), 'a', False)
        # Processing the call keyword arguments (line 812)
        kwargs_140372 = {}
        # Getting the type of 'umath' (line 812)
        umath_140369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 15), 'umath', False)
        # Obtaining the member 'absolute' of a type (line 812)
        absolute_140370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 15), umath_140369, 'absolute')
        # Calling absolute(args, kwargs) (line 812)
        absolute_call_result_140373 = invoke(stypy.reporting.localization.Localization(__file__, 812, 15), absolute_140370, *[a_140371], **kwargs_140372)
        
        # Getting the type of 'self' (line 812)
        self_140374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 35), 'self')
        # Obtaining the member 'tolerance' of a type (line 812)
        tolerance_140375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 35), self_140374, 'tolerance')
        # Applying the binary operator '*' (line 812)
        result_mul_140376 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 15), '*', absolute_call_result_140373, tolerance_140375)
        
        
        # Call to absolute(...): (line 812)
        # Processing the call arguments (line 812)
        # Getting the type of 'b' (line 812)
        b_140379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 68), 'b', False)
        # Processing the call keyword arguments (line 812)
        kwargs_140380 = {}
        # Getting the type of 'umath' (line 812)
        umath_140377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 53), 'umath', False)
        # Obtaining the member 'absolute' of a type (line 812)
        absolute_140378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 53), umath_140377, 'absolute')
        # Calling absolute(args, kwargs) (line 812)
        absolute_call_result_140381 = invoke(stypy.reporting.localization.Localization(__file__, 812, 53), absolute_140378, *[b_140379], **kwargs_140380)
        
        # Applying the binary operator '>=' (line 812)
        result_ge_140382 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 15), '>=', result_mul_140376, absolute_call_result_140381)
        
        # Assigning a type to the variable 'stypy_return_type' (line 812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 8), 'stypy_return_type', result_ge_140382)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 804)
        stypy_return_type_140383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140383)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_140383


# Assigning a type to the variable '_DomainSafeDivide' (line 795)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 0), '_DomainSafeDivide', _DomainSafeDivide)
# Declaration of the '_DomainGreater' class

class _DomainGreater:
    str_140384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, (-1)), 'str', '\n    DomainGreater(v)(x) is True where x <= v.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 821, 4, False)
        # Assigning a type to the variable 'self' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainGreater.__init__', ['critical_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['critical_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_140385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 8), 'str', 'DomainGreater(v)(x) = true where x <= v')
        
        # Assigning a Name to a Attribute (line 823):
        
        # Assigning a Name to a Attribute (line 823):
        # Getting the type of 'critical_value' (line 823)
        critical_value_140386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 30), 'critical_value')
        # Getting the type of 'self' (line 823)
        self_140387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'self')
        # Setting the type of the member 'critical_value' of a type (line 823)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 8), self_140387, 'critical_value', critical_value_140386)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 825, 4, False)
        # Assigning a type to the variable 'self' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DomainGreater.__call__.__dict__.__setitem__('stypy_localization', localization)
        _DomainGreater.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DomainGreater.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DomainGreater.__call__.__dict__.__setitem__('stypy_function_name', '_DomainGreater.__call__')
        _DomainGreater.__call__.__dict__.__setitem__('stypy_param_names_list', ['x'])
        _DomainGreater.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DomainGreater.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DomainGreater.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DomainGreater.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DomainGreater.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DomainGreater.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainGreater.__call__', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_140388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 8), 'str', 'Executes the call behavior.')
        
        # Call to less_equal(...): (line 827)
        # Processing the call arguments (line 827)
        # Getting the type of 'x' (line 827)
        x_140391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 32), 'x', False)
        # Getting the type of 'self' (line 827)
        self_140392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 35), 'self', False)
        # Obtaining the member 'critical_value' of a type (line 827)
        critical_value_140393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 35), self_140392, 'critical_value')
        # Processing the call keyword arguments (line 827)
        kwargs_140394 = {}
        # Getting the type of 'umath' (line 827)
        umath_140389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 15), 'umath', False)
        # Obtaining the member 'less_equal' of a type (line 827)
        less_equal_140390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 15), umath_140389, 'less_equal')
        # Calling less_equal(args, kwargs) (line 827)
        less_equal_call_result_140395 = invoke(stypy.reporting.localization.Localization(__file__, 827, 15), less_equal_140390, *[x_140391, critical_value_140393], **kwargs_140394)
        
        # Assigning a type to the variable 'stypy_return_type' (line 827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 8), 'stypy_return_type', less_equal_call_result_140395)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 825)
        stypy_return_type_140396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140396)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_140396


# Assigning a type to the variable '_DomainGreater' (line 815)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 0), '_DomainGreater', _DomainGreater)
# Declaration of the '_DomainGreaterEqual' class

class _DomainGreaterEqual:
    str_140397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, (-1)), 'str', '\n    DomainGreaterEqual(v)(x) is True where x < v.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 836, 4, False)
        # Assigning a type to the variable 'self' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainGreaterEqual.__init__', ['critical_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['critical_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_140398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 8), 'str', 'DomainGreaterEqual(v)(x) = true where x < v')
        
        # Assigning a Name to a Attribute (line 838):
        
        # Assigning a Name to a Attribute (line 838):
        # Getting the type of 'critical_value' (line 838)
        critical_value_140399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 30), 'critical_value')
        # Getting the type of 'self' (line 838)
        self_140400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 8), 'self')
        # Setting the type of the member 'critical_value' of a type (line 838)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 8), self_140400, 'critical_value', critical_value_140399)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 840, 4, False)
        # Assigning a type to the variable 'self' (line 841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 841, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_localization', localization)
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_function_name', '_DomainGreaterEqual.__call__')
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_param_names_list', ['x'])
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DomainGreaterEqual.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainGreaterEqual.__call__', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_140401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 841, 8), 'str', 'Executes the call behavior.')
        
        # Call to less(...): (line 842)
        # Processing the call arguments (line 842)
        # Getting the type of 'x' (line 842)
        x_140404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 26), 'x', False)
        # Getting the type of 'self' (line 842)
        self_140405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 29), 'self', False)
        # Obtaining the member 'critical_value' of a type (line 842)
        critical_value_140406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 29), self_140405, 'critical_value')
        # Processing the call keyword arguments (line 842)
        kwargs_140407 = {}
        # Getting the type of 'umath' (line 842)
        umath_140402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 15), 'umath', False)
        # Obtaining the member 'less' of a type (line 842)
        less_140403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 15), umath_140402, 'less')
        # Calling less(args, kwargs) (line 842)
        less_call_result_140408 = invoke(stypy.reporting.localization.Localization(__file__, 842, 15), less_140403, *[x_140404, critical_value_140406], **kwargs_140407)
        
        # Assigning a type to the variable 'stypy_return_type' (line 842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 8), 'stypy_return_type', less_call_result_140408)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 840)
        stypy_return_type_140409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140409)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_140409


# Assigning a type to the variable '_DomainGreaterEqual' (line 830)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 0), '_DomainGreaterEqual', _DomainGreaterEqual)
# Declaration of the '_MaskedUnaryOperation' class

class _MaskedUnaryOperation:
    str_140410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 861, (-1)), 'str', '\n    Defines masked version of unary operations, where invalid values are\n    pre-masked.\n\n    Parameters\n    ----------\n    mufunc : callable\n        The function for which to define a masked version. Made available\n        as ``_MaskedUnaryOperation.f``.\n    fill : scalar, optional\n        Filling value, default is 0.\n    domain : class instance\n        Domain for the function. Should be one of the ``_Domain*``\n        classes. Default is None.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_140411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 36), 'int')
        # Getting the type of 'None' (line 863)
        None_140412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 46), 'None')
        defaults = [int_140411, None_140412]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 863, 4, False)
        # Assigning a type to the variable 'self' (line 864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedUnaryOperation.__init__', ['mufunc', 'fill', 'domain'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['mufunc', 'fill', 'domain'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 864):
        
        # Assigning a Name to a Attribute (line 864):
        # Getting the type of 'mufunc' (line 864)
        mufunc_140413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 17), 'mufunc')
        # Getting the type of 'self' (line 864)
        self_140414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 8), 'self')
        # Setting the type of the member 'f' of a type (line 864)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 8), self_140414, 'f', mufunc_140413)
        
        # Assigning a Name to a Attribute (line 865):
        
        # Assigning a Name to a Attribute (line 865):
        # Getting the type of 'fill' (line 865)
        fill_140415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 20), 'fill')
        # Getting the type of 'self' (line 865)
        self_140416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 8), 'self')
        # Setting the type of the member 'fill' of a type (line 865)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 8), self_140416, 'fill', fill_140415)
        
        # Assigning a Name to a Attribute (line 866):
        
        # Assigning a Name to a Attribute (line 866):
        # Getting the type of 'domain' (line 866)
        domain_140417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 22), 'domain')
        # Getting the type of 'self' (line 866)
        self_140418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 8), 'self')
        # Setting the type of the member 'domain' of a type (line 866)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 8), self_140418, 'domain', domain_140417)
        
        # Assigning a Call to a Attribute (line 867):
        
        # Assigning a Call to a Attribute (line 867):
        
        # Call to getattr(...): (line 867)
        # Processing the call arguments (line 867)
        # Getting the type of 'mufunc' (line 867)
        mufunc_140420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 31), 'mufunc', False)
        str_140421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 39), 'str', '__doc__')
        
        # Call to str(...): (line 867)
        # Processing the call arguments (line 867)
        # Getting the type of 'mufunc' (line 867)
        mufunc_140423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 54), 'mufunc', False)
        # Processing the call keyword arguments (line 867)
        kwargs_140424 = {}
        # Getting the type of 'str' (line 867)
        str_140422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 50), 'str', False)
        # Calling str(args, kwargs) (line 867)
        str_call_result_140425 = invoke(stypy.reporting.localization.Localization(__file__, 867, 50), str_140422, *[mufunc_140423], **kwargs_140424)
        
        # Processing the call keyword arguments (line 867)
        kwargs_140426 = {}
        # Getting the type of 'getattr' (line 867)
        getattr_140419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 23), 'getattr', False)
        # Calling getattr(args, kwargs) (line 867)
        getattr_call_result_140427 = invoke(stypy.reporting.localization.Localization(__file__, 867, 23), getattr_140419, *[mufunc_140420, str_140421, str_call_result_140425], **kwargs_140426)
        
        # Getting the type of 'self' (line 867)
        self_140428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 867)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 8), self_140428, '__doc__', getattr_call_result_140427)
        
        # Assigning a Call to a Attribute (line 868):
        
        # Assigning a Call to a Attribute (line 868):
        
        # Call to getattr(...): (line 868)
        # Processing the call arguments (line 868)
        # Getting the type of 'mufunc' (line 868)
        mufunc_140430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 32), 'mufunc', False)
        str_140431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 40), 'str', '__name__')
        
        # Call to str(...): (line 868)
        # Processing the call arguments (line 868)
        # Getting the type of 'mufunc' (line 868)
        mufunc_140433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 56), 'mufunc', False)
        # Processing the call keyword arguments (line 868)
        kwargs_140434 = {}
        # Getting the type of 'str' (line 868)
        str_140432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 52), 'str', False)
        # Calling str(args, kwargs) (line 868)
        str_call_result_140435 = invoke(stypy.reporting.localization.Localization(__file__, 868, 52), str_140432, *[mufunc_140433], **kwargs_140434)
        
        # Processing the call keyword arguments (line 868)
        kwargs_140436 = {}
        # Getting the type of 'getattr' (line 868)
        getattr_140429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 24), 'getattr', False)
        # Calling getattr(args, kwargs) (line 868)
        getattr_call_result_140437 = invoke(stypy.reporting.localization.Localization(__file__, 868, 24), getattr_140429, *[mufunc_140430, str_140431, str_call_result_140435], **kwargs_140436)
        
        # Getting the type of 'self' (line 868)
        self_140438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'self')
        # Setting the type of the member '__name__' of a type (line 868)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 8), self_140438, '__name__', getattr_call_result_140437)
        
        # Assigning a Name to a Subscript (line 869):
        
        # Assigning a Name to a Subscript (line 869):
        # Getting the type of 'domain' (line 869)
        domain_140439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 31), 'domain')
        # Getting the type of 'ufunc_domain' (line 869)
        ufunc_domain_140440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 8), 'ufunc_domain')
        # Getting the type of 'mufunc' (line 869)
        mufunc_140441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 21), 'mufunc')
        # Storing an element on a container (line 869)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 8), ufunc_domain_140440, (mufunc_140441, domain_140439))
        
        # Assigning a Name to a Subscript (line 870):
        
        # Assigning a Name to a Subscript (line 870):
        # Getting the type of 'fill' (line 870)
        fill_140442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 30), 'fill')
        # Getting the type of 'ufunc_fills' (line 870)
        ufunc_fills_140443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 8), 'ufunc_fills')
        # Getting the type of 'mufunc' (line 870)
        mufunc_140444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 20), 'mufunc')
        # Storing an element on a container (line 870)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 870, 8), ufunc_fills_140443, (mufunc_140444, fill_140442))
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 872, 4, False)
        # Assigning a type to the variable 'self' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_localization', localization)
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_function_name', '_MaskedUnaryOperation.__call__')
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_param_names_list', ['a'])
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedUnaryOperation.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedUnaryOperation.__call__', ['a'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_140445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, (-1)), 'str', '\n        Execute the call behavior.\n\n        ')
        
        # Assigning a Call to a Name (line 877):
        
        # Assigning a Call to a Name (line 877):
        
        # Call to getdata(...): (line 877)
        # Processing the call arguments (line 877)
        # Getting the type of 'a' (line 877)
        a_140447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 20), 'a', False)
        # Processing the call keyword arguments (line 877)
        kwargs_140448 = {}
        # Getting the type of 'getdata' (line 877)
        getdata_140446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 12), 'getdata', False)
        # Calling getdata(args, kwargs) (line 877)
        getdata_call_result_140449 = invoke(stypy.reporting.localization.Localization(__file__, 877, 12), getdata_140446, *[a_140447], **kwargs_140448)
        
        # Assigning a type to the variable 'd' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'd', getdata_call_result_140449)
        
        
        # Getting the type of 'self' (line 879)
        self_140450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 11), 'self')
        # Obtaining the member 'domain' of a type (line 879)
        domain_140451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 11), self_140450, 'domain')
        # Getting the type of 'None' (line 879)
        None_140452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 30), 'None')
        # Applying the binary operator 'isnot' (line 879)
        result_is_not_140453 = python_operator(stypy.reporting.localization.Localization(__file__, 879, 11), 'isnot', domain_140451, None_140452)
        
        # Testing the type of an if condition (line 879)
        if_condition_140454 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 879, 8), result_is_not_140453)
        # Assigning a type to the variable 'if_condition_140454' (line 879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 8), 'if_condition_140454', if_condition_140454)
        # SSA begins for if statement (line 879)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to errstate(...): (line 881)
        # Processing the call keyword arguments (line 881)
        str_140457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 36), 'str', 'ignore')
        keyword_140458 = str_140457
        str_140459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 54), 'str', 'ignore')
        keyword_140460 = str_140459
        kwargs_140461 = {'divide': keyword_140458, 'invalid': keyword_140460}
        # Getting the type of 'np' (line 881)
        np_140455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 17), 'np', False)
        # Obtaining the member 'errstate' of a type (line 881)
        errstate_140456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 17), np_140455, 'errstate')
        # Calling errstate(args, kwargs) (line 881)
        errstate_call_result_140462 = invoke(stypy.reporting.localization.Localization(__file__, 881, 17), errstate_140456, *[], **kwargs_140461)
        
        with_140463 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 881, 17), errstate_call_result_140462, 'with parameter', '__enter__', '__exit__')

        if with_140463:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 881)
            enter___140464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 17), errstate_call_result_140462, '__enter__')
            with_enter_140465 = invoke(stypy.reporting.localization.Localization(__file__, 881, 17), enter___140464)
            
            # Assigning a Call to a Name (line 882):
            
            # Assigning a Call to a Name (line 882):
            
            # Call to f(...): (line 882)
            # Processing the call arguments (line 882)
            # Getting the type of 'd' (line 882)
            d_140468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 32), 'd', False)
            # Getting the type of 'args' (line 882)
            args_140469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 36), 'args', False)
            # Processing the call keyword arguments (line 882)
            # Getting the type of 'kwargs' (line 882)
            kwargs_140470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 44), 'kwargs', False)
            kwargs_140471 = {'kwargs_140470': kwargs_140470}
            # Getting the type of 'self' (line 882)
            self_140466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 25), 'self', False)
            # Obtaining the member 'f' of a type (line 882)
            f_140467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 25), self_140466, 'f')
            # Calling f(args, kwargs) (line 882)
            f_call_result_140472 = invoke(stypy.reporting.localization.Localization(__file__, 882, 25), f_140467, *[d_140468, args_140469], **kwargs_140471)
            
            # Assigning a type to the variable 'result' (line 882)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 16), 'result', f_call_result_140472)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 881)
            exit___140473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 17), errstate_call_result_140462, '__exit__')
            with_exit_140474 = invoke(stypy.reporting.localization.Localization(__file__, 881, 17), exit___140473, None, None, None)

        
        # Assigning a UnaryOp to a Name (line 884):
        
        # Assigning a UnaryOp to a Name (line 884):
        
        
        # Call to isfinite(...): (line 884)
        # Processing the call arguments (line 884)
        # Getting the type of 'result' (line 884)
        result_140477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 32), 'result', False)
        # Processing the call keyword arguments (line 884)
        kwargs_140478 = {}
        # Getting the type of 'umath' (line 884)
        umath_140475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 17), 'umath', False)
        # Obtaining the member 'isfinite' of a type (line 884)
        isfinite_140476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 17), umath_140475, 'isfinite')
        # Calling isfinite(args, kwargs) (line 884)
        isfinite_call_result_140479 = invoke(stypy.reporting.localization.Localization(__file__, 884, 17), isfinite_140476, *[result_140477], **kwargs_140478)
        
        # Applying the '~' unary operator (line 884)
        result_inv_140480 = python_operator(stypy.reporting.localization.Localization(__file__, 884, 16), '~', isfinite_call_result_140479)
        
        # Assigning a type to the variable 'm' (line 884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 12), 'm', result_inv_140480)
        
        # Getting the type of 'm' (line 885)
        m_140481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 12), 'm')
        
        # Call to domain(...): (line 885)
        # Processing the call arguments (line 885)
        # Getting the type of 'd' (line 885)
        d_140484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 29), 'd', False)
        # Processing the call keyword arguments (line 885)
        kwargs_140485 = {}
        # Getting the type of 'self' (line 885)
        self_140482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 17), 'self', False)
        # Obtaining the member 'domain' of a type (line 885)
        domain_140483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 17), self_140482, 'domain')
        # Calling domain(args, kwargs) (line 885)
        domain_call_result_140486 = invoke(stypy.reporting.localization.Localization(__file__, 885, 17), domain_140483, *[d_140484], **kwargs_140485)
        
        # Applying the binary operator '|=' (line 885)
        result_ior_140487 = python_operator(stypy.reporting.localization.Localization(__file__, 885, 12), '|=', m_140481, domain_call_result_140486)
        # Assigning a type to the variable 'm' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 12), 'm', result_ior_140487)
        
        
        # Getting the type of 'm' (line 886)
        m_140488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 12), 'm')
        
        # Call to getmask(...): (line 886)
        # Processing the call arguments (line 886)
        # Getting the type of 'a' (line 886)
        a_140490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 25), 'a', False)
        # Processing the call keyword arguments (line 886)
        kwargs_140491 = {}
        # Getting the type of 'getmask' (line 886)
        getmask_140489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 17), 'getmask', False)
        # Calling getmask(args, kwargs) (line 886)
        getmask_call_result_140492 = invoke(stypy.reporting.localization.Localization(__file__, 886, 17), getmask_140489, *[a_140490], **kwargs_140491)
        
        # Applying the binary operator '|=' (line 886)
        result_ior_140493 = python_operator(stypy.reporting.localization.Localization(__file__, 886, 12), '|=', m_140488, getmask_call_result_140492)
        # Assigning a type to the variable 'm' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 12), 'm', result_ior_140493)
        
        # SSA branch for the else part of an if statement (line 879)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 890):
        
        # Assigning a Call to a Name (line 890):
        
        # Call to f(...): (line 890)
        # Processing the call arguments (line 890)
        # Getting the type of 'd' (line 890)
        d_140496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 28), 'd', False)
        # Getting the type of 'args' (line 890)
        args_140497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 32), 'args', False)
        # Processing the call keyword arguments (line 890)
        # Getting the type of 'kwargs' (line 890)
        kwargs_140498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 40), 'kwargs', False)
        kwargs_140499 = {'kwargs_140498': kwargs_140498}
        # Getting the type of 'self' (line 890)
        self_140494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 21), 'self', False)
        # Obtaining the member 'f' of a type (line 890)
        f_140495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 890, 21), self_140494, 'f')
        # Calling f(args, kwargs) (line 890)
        f_call_result_140500 = invoke(stypy.reporting.localization.Localization(__file__, 890, 21), f_140495, *[d_140496, args_140497], **kwargs_140499)
        
        # Assigning a type to the variable 'result' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 12), 'result', f_call_result_140500)
        
        # Assigning a Call to a Name (line 891):
        
        # Assigning a Call to a Name (line 891):
        
        # Call to getmask(...): (line 891)
        # Processing the call arguments (line 891)
        # Getting the type of 'a' (line 891)
        a_140502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 24), 'a', False)
        # Processing the call keyword arguments (line 891)
        kwargs_140503 = {}
        # Getting the type of 'getmask' (line 891)
        getmask_140501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 16), 'getmask', False)
        # Calling getmask(args, kwargs) (line 891)
        getmask_call_result_140504 = invoke(stypy.reporting.localization.Localization(__file__, 891, 16), getmask_140501, *[a_140502], **kwargs_140503)
        
        # Assigning a type to the variable 'm' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 12), 'm', getmask_call_result_140504)
        # SSA join for if statement (line 879)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'result' (line 893)
        result_140505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 15), 'result')
        # Obtaining the member 'ndim' of a type (line 893)
        ndim_140506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 15), result_140505, 'ndim')
        # Applying the 'not' unary operator (line 893)
        result_not__140507 = python_operator(stypy.reporting.localization.Localization(__file__, 893, 11), 'not', ndim_140506)
        
        # Testing the type of an if condition (line 893)
        if_condition_140508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 893, 8), result_not__140507)
        # Assigning a type to the variable 'if_condition_140508' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 8), 'if_condition_140508', if_condition_140508)
        # SSA begins for if statement (line 893)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'm' (line 895)
        m_140509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 15), 'm')
        # Testing the type of an if condition (line 895)
        if_condition_140510 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 895, 12), m_140509)
        # Assigning a type to the variable 'if_condition_140510' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'if_condition_140510', if_condition_140510)
        # SSA begins for if statement (line 895)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 896)
        masked_140511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 23), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 16), 'stypy_return_type', masked_140511)
        # SSA join for if statement (line 895)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 897)
        result_140512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 19), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 12), 'stypy_return_type', result_140512)
        # SSA join for if statement (line 893)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'm' (line 899)
        m_140513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 11), 'm')
        # Getting the type of 'nomask' (line 899)
        nomask_140514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 20), 'nomask')
        # Applying the binary operator 'isnot' (line 899)
        result_is_not_140515 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 11), 'isnot', m_140513, nomask_140514)
        
        # Testing the type of an if condition (line 899)
        if_condition_140516 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 899, 8), result_is_not_140515)
        # Assigning a type to the variable 'if_condition_140516' (line 899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'if_condition_140516', if_condition_140516)
        # SSA begins for if statement (line 899)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 907)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to copyto(...): (line 908)
        # Processing the call arguments (line 908)
        # Getting the type of 'result' (line 908)
        result_140519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 26), 'result', False)
        # Getting the type of 'd' (line 908)
        d_140520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 34), 'd', False)
        # Processing the call keyword arguments (line 908)
        # Getting the type of 'm' (line 908)
        m_140521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 43), 'm', False)
        keyword_140522 = m_140521
        kwargs_140523 = {'where': keyword_140522}
        # Getting the type of 'np' (line 908)
        np_140517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 16), 'np', False)
        # Obtaining the member 'copyto' of a type (line 908)
        copyto_140518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 16), np_140517, 'copyto')
        # Calling copyto(args, kwargs) (line 908)
        copyto_call_result_140524 = invoke(stypy.reporting.localization.Localization(__file__, 908, 16), copyto_140518, *[result_140519, d_140520], **kwargs_140523)
        
        # SSA branch for the except part of a try statement (line 907)
        # SSA branch for the except 'TypeError' branch of a try statement (line 907)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 907)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 899)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 912):
        
        # Assigning a Call to a Name (line 912):
        
        # Call to view(...): (line 912)
        # Processing the call arguments (line 912)
        
        # Call to get_masked_subclass(...): (line 912)
        # Processing the call arguments (line 912)
        # Getting the type of 'a' (line 912)
        a_140528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 56), 'a', False)
        # Processing the call keyword arguments (line 912)
        kwargs_140529 = {}
        # Getting the type of 'get_masked_subclass' (line 912)
        get_masked_subclass_140527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 36), 'get_masked_subclass', False)
        # Calling get_masked_subclass(args, kwargs) (line 912)
        get_masked_subclass_call_result_140530 = invoke(stypy.reporting.localization.Localization(__file__, 912, 36), get_masked_subclass_140527, *[a_140528], **kwargs_140529)
        
        # Processing the call keyword arguments (line 912)
        kwargs_140531 = {}
        # Getting the type of 'result' (line 912)
        result_140525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 24), 'result', False)
        # Obtaining the member 'view' of a type (line 912)
        view_140526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 24), result_140525, 'view')
        # Calling view(args, kwargs) (line 912)
        view_call_result_140532 = invoke(stypy.reporting.localization.Localization(__file__, 912, 24), view_140526, *[get_masked_subclass_call_result_140530], **kwargs_140531)
        
        # Assigning a type to the variable 'masked_result' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'masked_result', view_call_result_140532)
        
        # Assigning a Name to a Attribute (line 913):
        
        # Assigning a Name to a Attribute (line 913):
        # Getting the type of 'm' (line 913)
        m_140533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 30), 'm')
        # Getting the type of 'masked_result' (line 913)
        masked_result_140534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 8), 'masked_result')
        # Setting the type of the member '_mask' of a type (line 913)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 8), masked_result_140534, '_mask', m_140533)
        
        # Call to _update_from(...): (line 914)
        # Processing the call arguments (line 914)
        # Getting the type of 'a' (line 914)
        a_140537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 35), 'a', False)
        # Processing the call keyword arguments (line 914)
        kwargs_140538 = {}
        # Getting the type of 'masked_result' (line 914)
        masked_result_140535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 8), 'masked_result', False)
        # Obtaining the member '_update_from' of a type (line 914)
        _update_from_140536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 8), masked_result_140535, '_update_from')
        # Calling _update_from(args, kwargs) (line 914)
        _update_from_call_result_140539 = invoke(stypy.reporting.localization.Localization(__file__, 914, 8), _update_from_140536, *[a_140537], **kwargs_140538)
        
        # Getting the type of 'masked_result' (line 915)
        masked_result_140540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 15), 'masked_result')
        # Assigning a type to the variable 'stypy_return_type' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 8), 'stypy_return_type', masked_result_140540)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 872)
        stypy_return_type_140541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140541)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_140541


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 917, 4, False)
        # Assigning a type to the variable 'self' (line 918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_function_name', '_MaskedUnaryOperation.__str__')
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedUnaryOperation.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedUnaryOperation.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        str_140542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 15), 'str', 'Masked version of %s. [Invalid values are masked]')
        
        # Call to str(...): (line 918)
        # Processing the call arguments (line 918)
        # Getting the type of 'self' (line 918)
        self_140544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 73), 'self', False)
        # Obtaining the member 'f' of a type (line 918)
        f_140545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 73), self_140544, 'f')
        # Processing the call keyword arguments (line 918)
        kwargs_140546 = {}
        # Getting the type of 'str' (line 918)
        str_140543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 69), 'str', False)
        # Calling str(args, kwargs) (line 918)
        str_call_result_140547 = invoke(stypy.reporting.localization.Localization(__file__, 918, 69), str_140543, *[f_140545], **kwargs_140546)
        
        # Applying the binary operator '%' (line 918)
        result_mod_140548 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 15), '%', str_140542, str_call_result_140547)
        
        # Assigning a type to the variable 'stypy_return_type' (line 918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'stypy_return_type', result_mod_140548)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 917)
        stypy_return_type_140549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140549)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_140549


# Assigning a type to the variable '_MaskedUnaryOperation' (line 845)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 0), '_MaskedUnaryOperation', _MaskedUnaryOperation)
# Declaration of the '_MaskedBinaryOperation' class

class _MaskedBinaryOperation:
    str_140550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, (-1)), 'str', '\n    Define masked version of binary operations, where invalid\n    values are pre-masked.\n\n    Parameters\n    ----------\n    mbfunc : function\n        The function for which to define a masked version. Made available\n        as ``_MaskedBinaryOperation.f``.\n    domain : class instance\n        Default domain for the function. Should be one of the ``_Domain*``\n        classes. Default is None.\n    fillx : scalar, optional\n        Filling value for the first argument, default is 0.\n    filly : scalar, optional\n        Filling value for the second argument, default is 0.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_140551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 37), 'int')
        int_140552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 46), 'int')
        defaults = [int_140551, int_140552]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 941, 4, False)
        # Assigning a type to the variable 'self' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedBinaryOperation.__init__', ['mbfunc', 'fillx', 'filly'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['mbfunc', 'fillx', 'filly'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_140553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, (-1)), 'str', '\n        abfunc(fillx, filly) must be defined.\n\n        abfunc(x, filly) = x for all x to enable reduce.\n\n        ')
        
        # Assigning a Name to a Attribute (line 948):
        
        # Assigning a Name to a Attribute (line 948):
        # Getting the type of 'mbfunc' (line 948)
        mbfunc_140554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 17), 'mbfunc')
        # Getting the type of 'self' (line 948)
        self_140555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 8), 'self')
        # Setting the type of the member 'f' of a type (line 948)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 8), self_140555, 'f', mbfunc_140554)
        
        # Assigning a Name to a Attribute (line 949):
        
        # Assigning a Name to a Attribute (line 949):
        # Getting the type of 'fillx' (line 949)
        fillx_140556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 21), 'fillx')
        # Getting the type of 'self' (line 949)
        self_140557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 8), 'self')
        # Setting the type of the member 'fillx' of a type (line 949)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 8), self_140557, 'fillx', fillx_140556)
        
        # Assigning a Name to a Attribute (line 950):
        
        # Assigning a Name to a Attribute (line 950):
        # Getting the type of 'filly' (line 950)
        filly_140558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 21), 'filly')
        # Getting the type of 'self' (line 950)
        self_140559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'self')
        # Setting the type of the member 'filly' of a type (line 950)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 8), self_140559, 'filly', filly_140558)
        
        # Assigning a Call to a Attribute (line 951):
        
        # Assigning a Call to a Attribute (line 951):
        
        # Call to getattr(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'mbfunc' (line 951)
        mbfunc_140561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 31), 'mbfunc', False)
        str_140562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 39), 'str', '__doc__')
        
        # Call to str(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'mbfunc' (line 951)
        mbfunc_140564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 54), 'mbfunc', False)
        # Processing the call keyword arguments (line 951)
        kwargs_140565 = {}
        # Getting the type of 'str' (line 951)
        str_140563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 50), 'str', False)
        # Calling str(args, kwargs) (line 951)
        str_call_result_140566 = invoke(stypy.reporting.localization.Localization(__file__, 951, 50), str_140563, *[mbfunc_140564], **kwargs_140565)
        
        # Processing the call keyword arguments (line 951)
        kwargs_140567 = {}
        # Getting the type of 'getattr' (line 951)
        getattr_140560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 23), 'getattr', False)
        # Calling getattr(args, kwargs) (line 951)
        getattr_call_result_140568 = invoke(stypy.reporting.localization.Localization(__file__, 951, 23), getattr_140560, *[mbfunc_140561, str_140562, str_call_result_140566], **kwargs_140567)
        
        # Getting the type of 'self' (line 951)
        self_140569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 951)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 951, 8), self_140569, '__doc__', getattr_call_result_140568)
        
        # Assigning a Call to a Attribute (line 952):
        
        # Assigning a Call to a Attribute (line 952):
        
        # Call to getattr(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'mbfunc' (line 952)
        mbfunc_140571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 32), 'mbfunc', False)
        str_140572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 40), 'str', '__name__')
        
        # Call to str(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'mbfunc' (line 952)
        mbfunc_140574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 56), 'mbfunc', False)
        # Processing the call keyword arguments (line 952)
        kwargs_140575 = {}
        # Getting the type of 'str' (line 952)
        str_140573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 52), 'str', False)
        # Calling str(args, kwargs) (line 952)
        str_call_result_140576 = invoke(stypy.reporting.localization.Localization(__file__, 952, 52), str_140573, *[mbfunc_140574], **kwargs_140575)
        
        # Processing the call keyword arguments (line 952)
        kwargs_140577 = {}
        # Getting the type of 'getattr' (line 952)
        getattr_140570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 24), 'getattr', False)
        # Calling getattr(args, kwargs) (line 952)
        getattr_call_result_140578 = invoke(stypy.reporting.localization.Localization(__file__, 952, 24), getattr_140570, *[mbfunc_140571, str_140572, str_call_result_140576], **kwargs_140577)
        
        # Getting the type of 'self' (line 952)
        self_140579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'self')
        # Setting the type of the member '__name__' of a type (line 952)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 8), self_140579, '__name__', getattr_call_result_140578)
        
        # Assigning a Name to a Subscript (line 953):
        
        # Assigning a Name to a Subscript (line 953):
        # Getting the type of 'None' (line 953)
        None_140580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 31), 'None')
        # Getting the type of 'ufunc_domain' (line 953)
        ufunc_domain_140581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'ufunc_domain')
        # Getting the type of 'mbfunc' (line 953)
        mbfunc_140582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 21), 'mbfunc')
        # Storing an element on a container (line 953)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 953, 8), ufunc_domain_140581, (mbfunc_140582, None_140580))
        
        # Assigning a Tuple to a Subscript (line 954):
        
        # Assigning a Tuple to a Subscript (line 954):
        
        # Obtaining an instance of the builtin type 'tuple' (line 954)
        tuple_140583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 954)
        # Adding element type (line 954)
        # Getting the type of 'fillx' (line 954)
        fillx_140584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 31), 'fillx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 31), tuple_140583, fillx_140584)
        # Adding element type (line 954)
        # Getting the type of 'filly' (line 954)
        filly_140585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 38), 'filly')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 31), tuple_140583, filly_140585)
        
        # Getting the type of 'ufunc_fills' (line 954)
        ufunc_fills_140586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'ufunc_fills')
        # Getting the type of 'mbfunc' (line 954)
        mbfunc_140587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 20), 'mbfunc')
        # Storing an element on a container (line 954)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 8), ufunc_fills_140586, (mbfunc_140587, tuple_140583))
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 956, 4, False)
        # Assigning a type to the variable 'self' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_localization', localization)
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_function_name', '_MaskedBinaryOperation.__call__')
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_param_names_list', ['a', 'b'])
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedBinaryOperation.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedBinaryOperation.__call__', ['a', 'b'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_140588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, (-1)), 'str', '\n        Execute the call behavior.\n\n        ')
        
        # Assigning a Tuple to a Tuple (line 962):
        
        # Assigning a Call to a Name (line 962):
        
        # Call to getdata(...): (line 962)
        # Processing the call arguments (line 962)
        # Getting the type of 'a' (line 962)
        a_140590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 28), 'a', False)
        # Processing the call keyword arguments (line 962)
        kwargs_140591 = {}
        # Getting the type of 'getdata' (line 962)
        getdata_140589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 20), 'getdata', False)
        # Calling getdata(args, kwargs) (line 962)
        getdata_call_result_140592 = invoke(stypy.reporting.localization.Localization(__file__, 962, 20), getdata_140589, *[a_140590], **kwargs_140591)
        
        # Assigning a type to the variable 'tuple_assignment_139161' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'tuple_assignment_139161', getdata_call_result_140592)
        
        # Assigning a Call to a Name (line 962):
        
        # Call to getdata(...): (line 962)
        # Processing the call arguments (line 962)
        # Getting the type of 'b' (line 962)
        b_140594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 40), 'b', False)
        # Processing the call keyword arguments (line 962)
        kwargs_140595 = {}
        # Getting the type of 'getdata' (line 962)
        getdata_140593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 32), 'getdata', False)
        # Calling getdata(args, kwargs) (line 962)
        getdata_call_result_140596 = invoke(stypy.reporting.localization.Localization(__file__, 962, 32), getdata_140593, *[b_140594], **kwargs_140595)
        
        # Assigning a type to the variable 'tuple_assignment_139162' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'tuple_assignment_139162', getdata_call_result_140596)
        
        # Assigning a Name to a Name (line 962):
        # Getting the type of 'tuple_assignment_139161' (line 962)
        tuple_assignment_139161_140597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'tuple_assignment_139161')
        # Assigning a type to the variable 'da' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 9), 'da', tuple_assignment_139161_140597)
        
        # Assigning a Name to a Name (line 962):
        # Getting the type of 'tuple_assignment_139162' (line 962)
        tuple_assignment_139162_140598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'tuple_assignment_139162')
        # Assigning a type to the variable 'db' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 13), 'db', tuple_assignment_139162_140598)
        
        # Call to errstate(...): (line 964)
        # Processing the call keyword arguments (line 964)
        kwargs_140601 = {}
        # Getting the type of 'np' (line 964)
        np_140599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 13), 'np', False)
        # Obtaining the member 'errstate' of a type (line 964)
        errstate_140600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 13), np_140599, 'errstate')
        # Calling errstate(args, kwargs) (line 964)
        errstate_call_result_140602 = invoke(stypy.reporting.localization.Localization(__file__, 964, 13), errstate_140600, *[], **kwargs_140601)
        
        with_140603 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 964, 13), errstate_call_result_140602, 'with parameter', '__enter__', '__exit__')

        if with_140603:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 964)
            enter___140604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 13), errstate_call_result_140602, '__enter__')
            with_enter_140605 = invoke(stypy.reporting.localization.Localization(__file__, 964, 13), enter___140604)
            
            # Call to seterr(...): (line 965)
            # Processing the call keyword arguments (line 965)
            str_140608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 29), 'str', 'ignore')
            keyword_140609 = str_140608
            str_140610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 47), 'str', 'ignore')
            keyword_140611 = str_140610
            kwargs_140612 = {'divide': keyword_140609, 'invalid': keyword_140611}
            # Getting the type of 'np' (line 965)
            np_140606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 12), 'np', False)
            # Obtaining the member 'seterr' of a type (line 965)
            seterr_140607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 12), np_140606, 'seterr')
            # Calling seterr(args, kwargs) (line 965)
            seterr_call_result_140613 = invoke(stypy.reporting.localization.Localization(__file__, 965, 12), seterr_140607, *[], **kwargs_140612)
            
            
            # Assigning a Call to a Name (line 966):
            
            # Assigning a Call to a Name (line 966):
            
            # Call to f(...): (line 966)
            # Processing the call arguments (line 966)
            # Getting the type of 'da' (line 966)
            da_140616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 28), 'da', False)
            # Getting the type of 'db' (line 966)
            db_140617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 32), 'db', False)
            # Getting the type of 'args' (line 966)
            args_140618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 37), 'args', False)
            # Processing the call keyword arguments (line 966)
            # Getting the type of 'kwargs' (line 966)
            kwargs_140619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 45), 'kwargs', False)
            kwargs_140620 = {'kwargs_140619': kwargs_140619}
            # Getting the type of 'self' (line 966)
            self_140614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 21), 'self', False)
            # Obtaining the member 'f' of a type (line 966)
            f_140615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 21), self_140614, 'f')
            # Calling f(args, kwargs) (line 966)
            f_call_result_140621 = invoke(stypy.reporting.localization.Localization(__file__, 966, 21), f_140615, *[da_140616, db_140617, args_140618], **kwargs_140620)
            
            # Assigning a type to the variable 'result' (line 966)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 12), 'result', f_call_result_140621)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 964)
            exit___140622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 13), errstate_call_result_140602, '__exit__')
            with_exit_140623 = invoke(stypy.reporting.localization.Localization(__file__, 964, 13), exit___140622, None, None, None)

        
        # Assigning a Tuple to a Tuple (line 968):
        
        # Assigning a Call to a Name (line 968):
        
        # Call to getmask(...): (line 968)
        # Processing the call arguments (line 968)
        # Getting the type of 'a' (line 968)
        a_140625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 28), 'a', False)
        # Processing the call keyword arguments (line 968)
        kwargs_140626 = {}
        # Getting the type of 'getmask' (line 968)
        getmask_140624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 20), 'getmask', False)
        # Calling getmask(args, kwargs) (line 968)
        getmask_call_result_140627 = invoke(stypy.reporting.localization.Localization(__file__, 968, 20), getmask_140624, *[a_140625], **kwargs_140626)
        
        # Assigning a type to the variable 'tuple_assignment_139163' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_assignment_139163', getmask_call_result_140627)
        
        # Assigning a Call to a Name (line 968):
        
        # Call to getmask(...): (line 968)
        # Processing the call arguments (line 968)
        # Getting the type of 'b' (line 968)
        b_140629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 40), 'b', False)
        # Processing the call keyword arguments (line 968)
        kwargs_140630 = {}
        # Getting the type of 'getmask' (line 968)
        getmask_140628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 32), 'getmask', False)
        # Calling getmask(args, kwargs) (line 968)
        getmask_call_result_140631 = invoke(stypy.reporting.localization.Localization(__file__, 968, 32), getmask_140628, *[b_140629], **kwargs_140630)
        
        # Assigning a type to the variable 'tuple_assignment_139164' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_assignment_139164', getmask_call_result_140631)
        
        # Assigning a Name to a Name (line 968):
        # Getting the type of 'tuple_assignment_139163' (line 968)
        tuple_assignment_139163_140632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_assignment_139163')
        # Assigning a type to the variable 'ma' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 9), 'ma', tuple_assignment_139163_140632)
        
        # Assigning a Name to a Name (line 968):
        # Getting the type of 'tuple_assignment_139164' (line 968)
        tuple_assignment_139164_140633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'tuple_assignment_139164')
        # Assigning a type to the variable 'mb' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 13), 'mb', tuple_assignment_139164_140633)
        
        
        # Getting the type of 'ma' (line 969)
        ma_140634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 11), 'ma')
        # Getting the type of 'nomask' (line 969)
        nomask_140635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 17), 'nomask')
        # Applying the binary operator 'is' (line 969)
        result_is__140636 = python_operator(stypy.reporting.localization.Localization(__file__, 969, 11), 'is', ma_140634, nomask_140635)
        
        # Testing the type of an if condition (line 969)
        if_condition_140637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 969, 8), result_is__140636)
        # Assigning a type to the variable 'if_condition_140637' (line 969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 8), 'if_condition_140637', if_condition_140637)
        # SSA begins for if statement (line 969)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'mb' (line 970)
        mb_140638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 15), 'mb')
        # Getting the type of 'nomask' (line 970)
        nomask_140639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 21), 'nomask')
        # Applying the binary operator 'is' (line 970)
        result_is__140640 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 15), 'is', mb_140638, nomask_140639)
        
        # Testing the type of an if condition (line 970)
        if_condition_140641 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 970, 12), result_is__140640)
        # Assigning a type to the variable 'if_condition_140641' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 12), 'if_condition_140641', if_condition_140641)
        # SSA begins for if statement (line 970)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 971):
        
        # Assigning a Name to a Name (line 971):
        # Getting the type of 'nomask' (line 971)
        nomask_140642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 20), 'nomask')
        # Assigning a type to the variable 'm' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 16), 'm', nomask_140642)
        # SSA branch for the else part of an if statement (line 970)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 973):
        
        # Assigning a Call to a Name (line 973):
        
        # Call to logical_or(...): (line 973)
        # Processing the call arguments (line 973)
        
        # Call to getmaskarray(...): (line 973)
        # Processing the call arguments (line 973)
        # Getting the type of 'a' (line 973)
        a_140646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 50), 'a', False)
        # Processing the call keyword arguments (line 973)
        kwargs_140647 = {}
        # Getting the type of 'getmaskarray' (line 973)
        getmaskarray_140645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 37), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 973)
        getmaskarray_call_result_140648 = invoke(stypy.reporting.localization.Localization(__file__, 973, 37), getmaskarray_140645, *[a_140646], **kwargs_140647)
        
        # Getting the type of 'mb' (line 973)
        mb_140649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 54), 'mb', False)
        # Processing the call keyword arguments (line 973)
        kwargs_140650 = {}
        # Getting the type of 'umath' (line 973)
        umath_140643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 20), 'umath', False)
        # Obtaining the member 'logical_or' of a type (line 973)
        logical_or_140644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 20), umath_140643, 'logical_or')
        # Calling logical_or(args, kwargs) (line 973)
        logical_or_call_result_140651 = invoke(stypy.reporting.localization.Localization(__file__, 973, 20), logical_or_140644, *[getmaskarray_call_result_140648, mb_140649], **kwargs_140650)
        
        # Assigning a type to the variable 'm' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 16), 'm', logical_or_call_result_140651)
        # SSA join for if statement (line 970)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 969)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'mb' (line 974)
        mb_140652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 13), 'mb')
        # Getting the type of 'nomask' (line 974)
        nomask_140653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 19), 'nomask')
        # Applying the binary operator 'is' (line 974)
        result_is__140654 = python_operator(stypy.reporting.localization.Localization(__file__, 974, 13), 'is', mb_140652, nomask_140653)
        
        # Testing the type of an if condition (line 974)
        if_condition_140655 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 974, 13), result_is__140654)
        # Assigning a type to the variable 'if_condition_140655' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 13), 'if_condition_140655', if_condition_140655)
        # SSA begins for if statement (line 974)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 975):
        
        # Assigning a Call to a Name (line 975):
        
        # Call to logical_or(...): (line 975)
        # Processing the call arguments (line 975)
        # Getting the type of 'ma' (line 975)
        ma_140658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 33), 'ma', False)
        
        # Call to getmaskarray(...): (line 975)
        # Processing the call arguments (line 975)
        # Getting the type of 'b' (line 975)
        b_140660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 50), 'b', False)
        # Processing the call keyword arguments (line 975)
        kwargs_140661 = {}
        # Getting the type of 'getmaskarray' (line 975)
        getmaskarray_140659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 37), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 975)
        getmaskarray_call_result_140662 = invoke(stypy.reporting.localization.Localization(__file__, 975, 37), getmaskarray_140659, *[b_140660], **kwargs_140661)
        
        # Processing the call keyword arguments (line 975)
        kwargs_140663 = {}
        # Getting the type of 'umath' (line 975)
        umath_140656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 16), 'umath', False)
        # Obtaining the member 'logical_or' of a type (line 975)
        logical_or_140657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 16), umath_140656, 'logical_or')
        # Calling logical_or(args, kwargs) (line 975)
        logical_or_call_result_140664 = invoke(stypy.reporting.localization.Localization(__file__, 975, 16), logical_or_140657, *[ma_140658, getmaskarray_call_result_140662], **kwargs_140663)
        
        # Assigning a type to the variable 'm' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 12), 'm', logical_or_call_result_140664)
        # SSA branch for the else part of an if statement (line 974)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 977):
        
        # Assigning a Call to a Name (line 977):
        
        # Call to logical_or(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'ma' (line 977)
        ma_140667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 33), 'ma', False)
        # Getting the type of 'mb' (line 977)
        mb_140668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 37), 'mb', False)
        # Processing the call keyword arguments (line 977)
        kwargs_140669 = {}
        # Getting the type of 'umath' (line 977)
        umath_140665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 16), 'umath', False)
        # Obtaining the member 'logical_or' of a type (line 977)
        logical_or_140666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 16), umath_140665, 'logical_or')
        # Calling logical_or(args, kwargs) (line 977)
        logical_or_call_result_140670 = invoke(stypy.reporting.localization.Localization(__file__, 977, 16), logical_or_140666, *[ma_140667, mb_140668], **kwargs_140669)
        
        # Assigning a type to the variable 'm' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'm', logical_or_call_result_140670)
        # SSA join for if statement (line 974)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 969)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'result' (line 980)
        result_140671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 15), 'result')
        # Obtaining the member 'ndim' of a type (line 980)
        ndim_140672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 15), result_140671, 'ndim')
        # Applying the 'not' unary operator (line 980)
        result_not__140673 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 11), 'not', ndim_140672)
        
        # Testing the type of an if condition (line 980)
        if_condition_140674 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 980, 8), result_not__140673)
        # Assigning a type to the variable 'if_condition_140674' (line 980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 8), 'if_condition_140674', if_condition_140674)
        # SSA begins for if statement (line 980)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'm' (line 981)
        m_140675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 15), 'm')
        # Testing the type of an if condition (line 981)
        if_condition_140676 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 981, 12), m_140675)
        # Assigning a type to the variable 'if_condition_140676' (line 981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'if_condition_140676', if_condition_140676)
        # SSA begins for if statement (line 981)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 982)
        masked_140677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 23), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 16), 'stypy_return_type', masked_140677)
        # SSA join for if statement (line 981)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 983)
        result_140678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 19), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 12), 'stypy_return_type', result_140678)
        # SSA join for if statement (line 980)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 987)
        m_140679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 11), 'm')
        # Getting the type of 'nomask' (line 987)
        nomask_140680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 20), 'nomask')
        # Applying the binary operator 'isnot' (line 987)
        result_is_not_140681 = python_operator(stypy.reporting.localization.Localization(__file__, 987, 11), 'isnot', m_140679, nomask_140680)
        
        
        # Call to any(...): (line 987)
        # Processing the call keyword arguments (line 987)
        kwargs_140684 = {}
        # Getting the type of 'm' (line 987)
        m_140682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 31), 'm', False)
        # Obtaining the member 'any' of a type (line 987)
        any_140683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 31), m_140682, 'any')
        # Calling any(args, kwargs) (line 987)
        any_call_result_140685 = invoke(stypy.reporting.localization.Localization(__file__, 987, 31), any_140683, *[], **kwargs_140684)
        
        # Applying the binary operator 'and' (line 987)
        result_and_keyword_140686 = python_operator(stypy.reporting.localization.Localization(__file__, 987, 11), 'and', result_is_not_140681, any_call_result_140685)
        
        # Testing the type of an if condition (line 987)
        if_condition_140687 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 987, 8), result_and_keyword_140686)
        # Assigning a type to the variable 'if_condition_140687' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'if_condition_140687', if_condition_140687)
        # SSA begins for if statement (line 987)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 989)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to copyto(...): (line 990)
        # Processing the call arguments (line 990)
        # Getting the type of 'result' (line 990)
        result_140690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 26), 'result', False)
        int_140691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 34), 'int')
        # Processing the call keyword arguments (line 990)
        str_140692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 45), 'str', 'unsafe')
        keyword_140693 = str_140692
        # Getting the type of 'm' (line 990)
        m_140694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 61), 'm', False)
        keyword_140695 = m_140694
        kwargs_140696 = {'where': keyword_140695, 'casting': keyword_140693}
        # Getting the type of 'np' (line 990)
        np_140688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 16), 'np', False)
        # Obtaining the member 'copyto' of a type (line 990)
        copyto_140689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 16), np_140688, 'copyto')
        # Calling copyto(args, kwargs) (line 990)
        copyto_call_result_140697 = invoke(stypy.reporting.localization.Localization(__file__, 990, 16), copyto_140689, *[result_140690, int_140691], **kwargs_140696)
        
        
        # Assigning a Call to a Name (line 992):
        
        # Assigning a Call to a Name (line 992):
        
        # Call to multiply(...): (line 992)
        # Processing the call arguments (line 992)
        # Getting the type of 'm' (line 992)
        m_140700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 43), 'm', False)
        # Getting the type of 'da' (line 992)
        da_140701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 46), 'da', False)
        # Processing the call keyword arguments (line 992)
        kwargs_140702 = {}
        # Getting the type of 'umath' (line 992)
        umath_140698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 28), 'umath', False)
        # Obtaining the member 'multiply' of a type (line 992)
        multiply_140699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 28), umath_140698, 'multiply')
        # Calling multiply(args, kwargs) (line 992)
        multiply_call_result_140703 = invoke(stypy.reporting.localization.Localization(__file__, 992, 28), multiply_140699, *[m_140700, da_140701], **kwargs_140702)
        
        # Assigning a type to the variable 'masked_da' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 16), 'masked_da', multiply_call_result_140703)
        
        
        # Call to can_cast(...): (line 994)
        # Processing the call arguments (line 994)
        # Getting the type of 'masked_da' (line 994)
        masked_da_140706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 31), 'masked_da', False)
        # Obtaining the member 'dtype' of a type (line 994)
        dtype_140707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 31), masked_da_140706, 'dtype')
        # Getting the type of 'result' (line 994)
        result_140708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 48), 'result', False)
        # Obtaining the member 'dtype' of a type (line 994)
        dtype_140709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 48), result_140708, 'dtype')
        # Processing the call keyword arguments (line 994)
        str_140710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 70), 'str', 'safe')
        keyword_140711 = str_140710
        kwargs_140712 = {'casting': keyword_140711}
        # Getting the type of 'np' (line 994)
        np_140704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 19), 'np', False)
        # Obtaining the member 'can_cast' of a type (line 994)
        can_cast_140705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 19), np_140704, 'can_cast')
        # Calling can_cast(args, kwargs) (line 994)
        can_cast_call_result_140713 = invoke(stypy.reporting.localization.Localization(__file__, 994, 19), can_cast_140705, *[dtype_140707, dtype_140709], **kwargs_140712)
        
        # Testing the type of an if condition (line 994)
        if_condition_140714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 994, 16), can_cast_call_result_140713)
        # Assigning a type to the variable 'if_condition_140714' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 16), 'if_condition_140714', if_condition_140714)
        # SSA begins for if statement (line 994)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'result' (line 995)
        result_140715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 20), 'result')
        # Getting the type of 'masked_da' (line 995)
        masked_da_140716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 30), 'masked_da')
        # Applying the binary operator '+=' (line 995)
        result_iadd_140717 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 20), '+=', result_140715, masked_da_140716)
        # Assigning a type to the variable 'result' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 20), 'result', result_iadd_140717)
        
        # SSA join for if statement (line 994)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 989)
        # SSA branch for the except '<any exception>' branch of a try statement (line 989)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 989)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 987)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1000):
        
        # Assigning a Call to a Name (line 1000):
        
        # Call to view(...): (line 1000)
        # Processing the call arguments (line 1000)
        
        # Call to get_masked_subclass(...): (line 1000)
        # Processing the call arguments (line 1000)
        # Getting the type of 'a' (line 1000)
        a_140721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 56), 'a', False)
        # Getting the type of 'b' (line 1000)
        b_140722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 59), 'b', False)
        # Processing the call keyword arguments (line 1000)
        kwargs_140723 = {}
        # Getting the type of 'get_masked_subclass' (line 1000)
        get_masked_subclass_140720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 36), 'get_masked_subclass', False)
        # Calling get_masked_subclass(args, kwargs) (line 1000)
        get_masked_subclass_call_result_140724 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 36), get_masked_subclass_140720, *[a_140721, b_140722], **kwargs_140723)
        
        # Processing the call keyword arguments (line 1000)
        kwargs_140725 = {}
        # Getting the type of 'result' (line 1000)
        result_140718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 24), 'result', False)
        # Obtaining the member 'view' of a type (line 1000)
        view_140719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 24), result_140718, 'view')
        # Calling view(args, kwargs) (line 1000)
        view_call_result_140726 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 24), view_140719, *[get_masked_subclass_call_result_140724], **kwargs_140725)
        
        # Assigning a type to the variable 'masked_result' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'masked_result', view_call_result_140726)
        
        # Assigning a Name to a Attribute (line 1001):
        
        # Assigning a Name to a Attribute (line 1001):
        # Getting the type of 'm' (line 1001)
        m_140727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 30), 'm')
        # Getting the type of 'masked_result' (line 1001)
        masked_result_140728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'masked_result')
        # Setting the type of the member '_mask' of a type (line 1001)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 8), masked_result_140728, '_mask', m_140727)
        
        
        # Call to isinstance(...): (line 1002)
        # Processing the call arguments (line 1002)
        # Getting the type of 'a' (line 1002)
        a_140730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 22), 'a', False)
        # Getting the type of 'MaskedArray' (line 1002)
        MaskedArray_140731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 25), 'MaskedArray', False)
        # Processing the call keyword arguments (line 1002)
        kwargs_140732 = {}
        # Getting the type of 'isinstance' (line 1002)
        isinstance_140729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1002)
        isinstance_call_result_140733 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 11), isinstance_140729, *[a_140730, MaskedArray_140731], **kwargs_140732)
        
        # Testing the type of an if condition (line 1002)
        if_condition_140734 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1002, 8), isinstance_call_result_140733)
        # Assigning a type to the variable 'if_condition_140734' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 8), 'if_condition_140734', if_condition_140734)
        # SSA begins for if statement (line 1002)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _update_from(...): (line 1003)
        # Processing the call arguments (line 1003)
        # Getting the type of 'a' (line 1003)
        a_140737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 39), 'a', False)
        # Processing the call keyword arguments (line 1003)
        kwargs_140738 = {}
        # Getting the type of 'masked_result' (line 1003)
        masked_result_140735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 12), 'masked_result', False)
        # Obtaining the member '_update_from' of a type (line 1003)
        _update_from_140736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 12), masked_result_140735, '_update_from')
        # Calling _update_from(args, kwargs) (line 1003)
        _update_from_call_result_140739 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 12), _update_from_140736, *[a_140737], **kwargs_140738)
        
        # SSA branch for the else part of an if statement (line 1002)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 1004)
        # Processing the call arguments (line 1004)
        # Getting the type of 'b' (line 1004)
        b_140741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 24), 'b', False)
        # Getting the type of 'MaskedArray' (line 1004)
        MaskedArray_140742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 1004)
        kwargs_140743 = {}
        # Getting the type of 'isinstance' (line 1004)
        isinstance_140740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1004)
        isinstance_call_result_140744 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 13), isinstance_140740, *[b_140741, MaskedArray_140742], **kwargs_140743)
        
        # Testing the type of an if condition (line 1004)
        if_condition_140745 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1004, 13), isinstance_call_result_140744)
        # Assigning a type to the variable 'if_condition_140745' (line 1004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 13), 'if_condition_140745', if_condition_140745)
        # SSA begins for if statement (line 1004)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _update_from(...): (line 1005)
        # Processing the call arguments (line 1005)
        # Getting the type of 'b' (line 1005)
        b_140748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 39), 'b', False)
        # Processing the call keyword arguments (line 1005)
        kwargs_140749 = {}
        # Getting the type of 'masked_result' (line 1005)
        masked_result_140746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'masked_result', False)
        # Obtaining the member '_update_from' of a type (line 1005)
        _update_from_140747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 12), masked_result_140746, '_update_from')
        # Calling _update_from(args, kwargs) (line 1005)
        _update_from_call_result_140750 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 12), _update_from_140747, *[b_140748], **kwargs_140749)
        
        # SSA join for if statement (line 1004)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1002)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'masked_result' (line 1006)
        masked_result_140751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 15), 'masked_result')
        # Assigning a type to the variable 'stypy_return_type' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'stypy_return_type', masked_result_140751)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 956)
        stypy_return_type_140752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140752)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_140752


    @norecursion
    def reduce(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_140753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1008, 34), 'int')
        # Getting the type of 'None' (line 1008)
        None_140754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 43), 'None')
        defaults = [int_140753, None_140754]
        # Create a new context for function 'reduce'
        module_type_store = module_type_store.open_function_context('reduce', 1008, 4, False)
        # Assigning a type to the variable 'self' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_localization', localization)
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_function_name', '_MaskedBinaryOperation.reduce')
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_param_names_list', ['target', 'axis', 'dtype'])
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedBinaryOperation.reduce.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedBinaryOperation.reduce', ['target', 'axis', 'dtype'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reduce', localization, ['target', 'axis', 'dtype'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reduce(...)' code ##################

        str_140755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, (-1)), 'str', '\n        Reduce `target` along the given `axis`.\n\n        ')
        
        # Assigning a Call to a Name (line 1013):
        
        # Assigning a Call to a Name (line 1013):
        
        # Call to get_masked_subclass(...): (line 1013)
        # Processing the call arguments (line 1013)
        # Getting the type of 'target' (line 1013)
        target_140757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 37), 'target', False)
        # Processing the call keyword arguments (line 1013)
        kwargs_140758 = {}
        # Getting the type of 'get_masked_subclass' (line 1013)
        get_masked_subclass_140756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 17), 'get_masked_subclass', False)
        # Calling get_masked_subclass(args, kwargs) (line 1013)
        get_masked_subclass_call_result_140759 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 17), get_masked_subclass_140756, *[target_140757], **kwargs_140758)
        
        # Assigning a type to the variable 'tclass' (line 1013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 8), 'tclass', get_masked_subclass_call_result_140759)
        
        # Assigning a Call to a Name (line 1014):
        
        # Assigning a Call to a Name (line 1014):
        
        # Call to getmask(...): (line 1014)
        # Processing the call arguments (line 1014)
        # Getting the type of 'target' (line 1014)
        target_140761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 20), 'target', False)
        # Processing the call keyword arguments (line 1014)
        kwargs_140762 = {}
        # Getting the type of 'getmask' (line 1014)
        getmask_140760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 12), 'getmask', False)
        # Calling getmask(args, kwargs) (line 1014)
        getmask_call_result_140763 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 12), getmask_140760, *[target_140761], **kwargs_140762)
        
        # Assigning a type to the variable 'm' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 8), 'm', getmask_call_result_140763)
        
        # Assigning a Call to a Name (line 1015):
        
        # Assigning a Call to a Name (line 1015):
        
        # Call to filled(...): (line 1015)
        # Processing the call arguments (line 1015)
        # Getting the type of 'target' (line 1015)
        target_140765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 19), 'target', False)
        # Getting the type of 'self' (line 1015)
        self_140766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 27), 'self', False)
        # Obtaining the member 'filly' of a type (line 1015)
        filly_140767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 27), self_140766, 'filly')
        # Processing the call keyword arguments (line 1015)
        kwargs_140768 = {}
        # Getting the type of 'filled' (line 1015)
        filled_140764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 12), 'filled', False)
        # Calling filled(args, kwargs) (line 1015)
        filled_call_result_140769 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 12), filled_140764, *[target_140765, filly_140767], **kwargs_140768)
        
        # Assigning a type to the variable 't' (line 1015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 't', filled_call_result_140769)
        
        
        # Getting the type of 't' (line 1016)
        t_140770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 11), 't')
        # Obtaining the member 'shape' of a type (line 1016)
        shape_140771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 11), t_140770, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1016)
        tuple_140772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1016)
        
        # Applying the binary operator '==' (line 1016)
        result_eq_140773 = python_operator(stypy.reporting.localization.Localization(__file__, 1016, 11), '==', shape_140771, tuple_140772)
        
        # Testing the type of an if condition (line 1016)
        if_condition_140774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1016, 8), result_eq_140773)
        # Assigning a type to the variable 'if_condition_140774' (line 1016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'if_condition_140774', if_condition_140774)
        # SSA begins for if statement (line 1016)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1017):
        
        # Assigning a Call to a Name (line 1017):
        
        # Call to reshape(...): (line 1017)
        # Processing the call arguments (line 1017)
        int_140777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 26), 'int')
        # Processing the call keyword arguments (line 1017)
        kwargs_140778 = {}
        # Getting the type of 't' (line 1017)
        t_140775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 16), 't', False)
        # Obtaining the member 'reshape' of a type (line 1017)
        reshape_140776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 16), t_140775, 'reshape')
        # Calling reshape(args, kwargs) (line 1017)
        reshape_call_result_140779 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 16), reshape_140776, *[int_140777], **kwargs_140778)
        
        # Assigning a type to the variable 't' (line 1017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 12), 't', reshape_call_result_140779)
        
        
        # Getting the type of 'm' (line 1018)
        m_140780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 15), 'm')
        # Getting the type of 'nomask' (line 1018)
        nomask_140781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 24), 'nomask')
        # Applying the binary operator 'isnot' (line 1018)
        result_is_not_140782 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 15), 'isnot', m_140780, nomask_140781)
        
        # Testing the type of an if condition (line 1018)
        if_condition_140783 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1018, 12), result_is_not_140782)
        # Assigning a type to the variable 'if_condition_140783' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 12), 'if_condition_140783', if_condition_140783)
        # SSA begins for if statement (line 1018)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1019):
        
        # Assigning a Call to a Name (line 1019):
        
        # Call to make_mask(...): (line 1019)
        # Processing the call arguments (line 1019)
        # Getting the type of 'm' (line 1019)
        m_140785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 30), 'm', False)
        # Processing the call keyword arguments (line 1019)
        int_140786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 38), 'int')
        keyword_140787 = int_140786
        kwargs_140788 = {'copy': keyword_140787}
        # Getting the type of 'make_mask' (line 1019)
        make_mask_140784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 20), 'make_mask', False)
        # Calling make_mask(args, kwargs) (line 1019)
        make_mask_call_result_140789 = invoke(stypy.reporting.localization.Localization(__file__, 1019, 20), make_mask_140784, *[m_140785], **kwargs_140788)
        
        # Assigning a type to the variable 'm' (line 1019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 16), 'm', make_mask_call_result_140789)
        
        # Assigning a Tuple to a Attribute (line 1020):
        
        # Assigning a Tuple to a Attribute (line 1020):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1020)
        tuple_140790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1020)
        # Adding element type (line 1020)
        int_140791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1020, 27), tuple_140790, int_140791)
        
        # Getting the type of 'm' (line 1020)
        m_140792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 16), 'm')
        # Setting the type of the member 'shape' of a type (line 1020)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 16), m_140792, 'shape', tuple_140790)
        # SSA join for if statement (line 1018)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1016)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'm' (line 1022)
        m_140793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 11), 'm')
        # Getting the type of 'nomask' (line 1022)
        nomask_140794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 16), 'nomask')
        # Applying the binary operator 'is' (line 1022)
        result_is__140795 = python_operator(stypy.reporting.localization.Localization(__file__, 1022, 11), 'is', m_140793, nomask_140794)
        
        # Testing the type of an if condition (line 1022)
        if_condition_140796 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1022, 8), result_is__140795)
        # Assigning a type to the variable 'if_condition_140796' (line 1022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'if_condition_140796', if_condition_140796)
        # SSA begins for if statement (line 1022)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1023):
        
        # Assigning a Call to a Name (line 1023):
        
        # Call to reduce(...): (line 1023)
        # Processing the call arguments (line 1023)
        # Getting the type of 't' (line 1023)
        t_140800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 31), 't', False)
        # Getting the type of 'axis' (line 1023)
        axis_140801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 34), 'axis', False)
        # Processing the call keyword arguments (line 1023)
        kwargs_140802 = {}
        # Getting the type of 'self' (line 1023)
        self_140797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 17), 'self', False)
        # Obtaining the member 'f' of a type (line 1023)
        f_140798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 17), self_140797, 'f')
        # Obtaining the member 'reduce' of a type (line 1023)
        reduce_140799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 17), f_140798, 'reduce')
        # Calling reduce(args, kwargs) (line 1023)
        reduce_call_result_140803 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 17), reduce_140799, *[t_140800, axis_140801], **kwargs_140802)
        
        # Assigning a type to the variable 'tr' (line 1023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 12), 'tr', reduce_call_result_140803)
        
        # Assigning a Name to a Name (line 1024):
        
        # Assigning a Name to a Name (line 1024):
        # Getting the type of 'nomask' (line 1024)
        nomask_140804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 17), 'nomask')
        # Assigning a type to the variable 'mr' (line 1024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 12), 'mr', nomask_140804)
        # SSA branch for the else part of an if statement (line 1022)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1026):
        
        # Assigning a Call to a Name (line 1026):
        
        # Call to reduce(...): (line 1026)
        # Processing the call arguments (line 1026)
        # Getting the type of 't' (line 1026)
        t_140808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 31), 't', False)
        # Getting the type of 'axis' (line 1026)
        axis_140809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 34), 'axis', False)
        # Processing the call keyword arguments (line 1026)
        
        # Evaluating a boolean operation
        # Getting the type of 'dtype' (line 1026)
        dtype_140810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 46), 'dtype', False)
        # Getting the type of 't' (line 1026)
        t_140811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 55), 't', False)
        # Obtaining the member 'dtype' of a type (line 1026)
        dtype_140812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 55), t_140811, 'dtype')
        # Applying the binary operator 'or' (line 1026)
        result_or_keyword_140813 = python_operator(stypy.reporting.localization.Localization(__file__, 1026, 46), 'or', dtype_140810, dtype_140812)
        
        keyword_140814 = result_or_keyword_140813
        kwargs_140815 = {'dtype': keyword_140814}
        # Getting the type of 'self' (line 1026)
        self_140805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 17), 'self', False)
        # Obtaining the member 'f' of a type (line 1026)
        f_140806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 17), self_140805, 'f')
        # Obtaining the member 'reduce' of a type (line 1026)
        reduce_140807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 17), f_140806, 'reduce')
        # Calling reduce(args, kwargs) (line 1026)
        reduce_call_result_140816 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 17), reduce_140807, *[t_140808, axis_140809], **kwargs_140815)
        
        # Assigning a type to the variable 'tr' (line 1026)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 12), 'tr', reduce_call_result_140816)
        
        # Assigning a Call to a Name (line 1027):
        
        # Assigning a Call to a Name (line 1027):
        
        # Call to reduce(...): (line 1027)
        # Processing the call arguments (line 1027)
        # Getting the type of 'm' (line 1027)
        m_140820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 42), 'm', False)
        # Getting the type of 'axis' (line 1027)
        axis_140821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 45), 'axis', False)
        # Processing the call keyword arguments (line 1027)
        kwargs_140822 = {}
        # Getting the type of 'umath' (line 1027)
        umath_140817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 17), 'umath', False)
        # Obtaining the member 'logical_and' of a type (line 1027)
        logical_and_140818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 17), umath_140817, 'logical_and')
        # Obtaining the member 'reduce' of a type (line 1027)
        reduce_140819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 17), logical_and_140818, 'reduce')
        # Calling reduce(args, kwargs) (line 1027)
        reduce_call_result_140823 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 17), reduce_140819, *[m_140820, axis_140821], **kwargs_140822)
        
        # Assigning a type to the variable 'mr' (line 1027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 12), 'mr', reduce_call_result_140823)
        # SSA join for if statement (line 1022)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'tr' (line 1029)
        tr_140824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 15), 'tr')
        # Obtaining the member 'shape' of a type (line 1029)
        shape_140825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 15), tr_140824, 'shape')
        # Applying the 'not' unary operator (line 1029)
        result_not__140826 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 11), 'not', shape_140825)
        
        # Testing the type of an if condition (line 1029)
        if_condition_140827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1029, 8), result_not__140826)
        # Assigning a type to the variable 'if_condition_140827' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'if_condition_140827', if_condition_140827)
        # SSA begins for if statement (line 1029)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'mr' (line 1030)
        mr_140828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 15), 'mr')
        # Testing the type of an if condition (line 1030)
        if_condition_140829 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1030, 12), mr_140828)
        # Assigning a type to the variable 'if_condition_140829' (line 1030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 12), 'if_condition_140829', if_condition_140829)
        # SSA begins for if statement (line 1030)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 1031)
        masked_140830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 23), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 16), 'stypy_return_type', masked_140830)
        # SSA branch for the else part of an if statement (line 1030)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'tr' (line 1033)
        tr_140831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 23), 'tr')
        # Assigning a type to the variable 'stypy_return_type' (line 1033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1033, 16), 'stypy_return_type', tr_140831)
        # SSA join for if statement (line 1030)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1029)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1034):
        
        # Assigning a Call to a Name (line 1034):
        
        # Call to view(...): (line 1034)
        # Processing the call arguments (line 1034)
        # Getting the type of 'tclass' (line 1034)
        tclass_140834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 28), 'tclass', False)
        # Processing the call keyword arguments (line 1034)
        kwargs_140835 = {}
        # Getting the type of 'tr' (line 1034)
        tr_140832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 20), 'tr', False)
        # Obtaining the member 'view' of a type (line 1034)
        view_140833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 20), tr_140832, 'view')
        # Calling view(args, kwargs) (line 1034)
        view_call_result_140836 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 20), view_140833, *[tclass_140834], **kwargs_140835)
        
        # Assigning a type to the variable 'masked_tr' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'masked_tr', view_call_result_140836)
        
        # Assigning a Name to a Attribute (line 1035):
        
        # Assigning a Name to a Attribute (line 1035):
        # Getting the type of 'mr' (line 1035)
        mr_140837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 26), 'mr')
        # Getting the type of 'masked_tr' (line 1035)
        masked_tr_140838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 8), 'masked_tr')
        # Setting the type of the member '_mask' of a type (line 1035)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 8), masked_tr_140838, '_mask', mr_140837)
        # Getting the type of 'masked_tr' (line 1036)
        masked_tr_140839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 15), 'masked_tr')
        # Assigning a type to the variable 'stypy_return_type' (line 1036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'stypy_return_type', masked_tr_140839)
        
        # ################# End of 'reduce(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reduce' in the type store
        # Getting the type of 'stypy_return_type' (line 1008)
        stypy_return_type_140840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140840)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reduce'
        return stypy_return_type_140840


    @norecursion
    def outer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'outer'
        module_type_store = module_type_store.open_function_context('outer', 1038, 4, False)
        # Assigning a type to the variable 'self' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_localization', localization)
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_function_name', '_MaskedBinaryOperation.outer')
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_param_names_list', ['a', 'b'])
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedBinaryOperation.outer.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedBinaryOperation.outer', ['a', 'b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'outer', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'outer(...)' code ##################

        str_140841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, (-1)), 'str', '\n        Return the function applied to the outer product of a and b.\n\n        ')
        
        # Assigning a Tuple to a Tuple (line 1043):
        
        # Assigning a Call to a Name (line 1043):
        
        # Call to getdata(...): (line 1043)
        # Processing the call arguments (line 1043)
        # Getting the type of 'a' (line 1043)
        a_140843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 28), 'a', False)
        # Processing the call keyword arguments (line 1043)
        kwargs_140844 = {}
        # Getting the type of 'getdata' (line 1043)
        getdata_140842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 20), 'getdata', False)
        # Calling getdata(args, kwargs) (line 1043)
        getdata_call_result_140845 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 20), getdata_140842, *[a_140843], **kwargs_140844)
        
        # Assigning a type to the variable 'tuple_assignment_139165' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'tuple_assignment_139165', getdata_call_result_140845)
        
        # Assigning a Call to a Name (line 1043):
        
        # Call to getdata(...): (line 1043)
        # Processing the call arguments (line 1043)
        # Getting the type of 'b' (line 1043)
        b_140847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 40), 'b', False)
        # Processing the call keyword arguments (line 1043)
        kwargs_140848 = {}
        # Getting the type of 'getdata' (line 1043)
        getdata_140846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 32), 'getdata', False)
        # Calling getdata(args, kwargs) (line 1043)
        getdata_call_result_140849 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 32), getdata_140846, *[b_140847], **kwargs_140848)
        
        # Assigning a type to the variable 'tuple_assignment_139166' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'tuple_assignment_139166', getdata_call_result_140849)
        
        # Assigning a Name to a Name (line 1043):
        # Getting the type of 'tuple_assignment_139165' (line 1043)
        tuple_assignment_139165_140850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'tuple_assignment_139165')
        # Assigning a type to the variable 'da' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 9), 'da', tuple_assignment_139165_140850)
        
        # Assigning a Name to a Name (line 1043):
        # Getting the type of 'tuple_assignment_139166' (line 1043)
        tuple_assignment_139166_140851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'tuple_assignment_139166')
        # Assigning a type to the variable 'db' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 13), 'db', tuple_assignment_139166_140851)
        
        # Assigning a Call to a Name (line 1044):
        
        # Assigning a Call to a Name (line 1044):
        
        # Call to outer(...): (line 1044)
        # Processing the call arguments (line 1044)
        # Getting the type of 'da' (line 1044)
        da_140855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 25), 'da', False)
        # Getting the type of 'db' (line 1044)
        db_140856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 29), 'db', False)
        # Processing the call keyword arguments (line 1044)
        kwargs_140857 = {}
        # Getting the type of 'self' (line 1044)
        self_140852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 12), 'self', False)
        # Obtaining the member 'f' of a type (line 1044)
        f_140853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 12), self_140852, 'f')
        # Obtaining the member 'outer' of a type (line 1044)
        outer_140854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 12), f_140853, 'outer')
        # Calling outer(args, kwargs) (line 1044)
        outer_call_result_140858 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 12), outer_140854, *[da_140855, db_140856], **kwargs_140857)
        
        # Assigning a type to the variable 'd' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 8), 'd', outer_call_result_140858)
        
        # Assigning a Call to a Name (line 1045):
        
        # Assigning a Call to a Name (line 1045):
        
        # Call to getmask(...): (line 1045)
        # Processing the call arguments (line 1045)
        # Getting the type of 'a' (line 1045)
        a_140860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 21), 'a', False)
        # Processing the call keyword arguments (line 1045)
        kwargs_140861 = {}
        # Getting the type of 'getmask' (line 1045)
        getmask_140859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 13), 'getmask', False)
        # Calling getmask(args, kwargs) (line 1045)
        getmask_call_result_140862 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 13), getmask_140859, *[a_140860], **kwargs_140861)
        
        # Assigning a type to the variable 'ma' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'ma', getmask_call_result_140862)
        
        # Assigning a Call to a Name (line 1046):
        
        # Assigning a Call to a Name (line 1046):
        
        # Call to getmask(...): (line 1046)
        # Processing the call arguments (line 1046)
        # Getting the type of 'b' (line 1046)
        b_140864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 21), 'b', False)
        # Processing the call keyword arguments (line 1046)
        kwargs_140865 = {}
        # Getting the type of 'getmask' (line 1046)
        getmask_140863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 13), 'getmask', False)
        # Calling getmask(args, kwargs) (line 1046)
        getmask_call_result_140866 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 13), getmask_140863, *[b_140864], **kwargs_140865)
        
        # Assigning a type to the variable 'mb' (line 1046)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'mb', getmask_call_result_140866)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ma' (line 1047)
        ma_140867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 11), 'ma')
        # Getting the type of 'nomask' (line 1047)
        nomask_140868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 17), 'nomask')
        # Applying the binary operator 'is' (line 1047)
        result_is__140869 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 11), 'is', ma_140867, nomask_140868)
        
        
        # Getting the type of 'mb' (line 1047)
        mb_140870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 28), 'mb')
        # Getting the type of 'nomask' (line 1047)
        nomask_140871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 34), 'nomask')
        # Applying the binary operator 'is' (line 1047)
        result_is__140872 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 28), 'is', mb_140870, nomask_140871)
        
        # Applying the binary operator 'and' (line 1047)
        result_and_keyword_140873 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 11), 'and', result_is__140869, result_is__140872)
        
        # Testing the type of an if condition (line 1047)
        if_condition_140874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1047, 8), result_and_keyword_140873)
        # Assigning a type to the variable 'if_condition_140874' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 8), 'if_condition_140874', if_condition_140874)
        # SSA begins for if statement (line 1047)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1048):
        
        # Assigning a Name to a Name (line 1048):
        # Getting the type of 'nomask' (line 1048)
        nomask_140875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 16), 'nomask')
        # Assigning a type to the variable 'm' (line 1048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 12), 'm', nomask_140875)
        # SSA branch for the else part of an if statement (line 1047)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1050):
        
        # Assigning a Call to a Name (line 1050):
        
        # Call to getmaskarray(...): (line 1050)
        # Processing the call arguments (line 1050)
        # Getting the type of 'a' (line 1050)
        a_140877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 30), 'a', False)
        # Processing the call keyword arguments (line 1050)
        kwargs_140878 = {}
        # Getting the type of 'getmaskarray' (line 1050)
        getmaskarray_140876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 17), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 1050)
        getmaskarray_call_result_140879 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 17), getmaskarray_140876, *[a_140877], **kwargs_140878)
        
        # Assigning a type to the variable 'ma' (line 1050)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 12), 'ma', getmaskarray_call_result_140879)
        
        # Assigning a Call to a Name (line 1051):
        
        # Assigning a Call to a Name (line 1051):
        
        # Call to getmaskarray(...): (line 1051)
        # Processing the call arguments (line 1051)
        # Getting the type of 'b' (line 1051)
        b_140881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 30), 'b', False)
        # Processing the call keyword arguments (line 1051)
        kwargs_140882 = {}
        # Getting the type of 'getmaskarray' (line 1051)
        getmaskarray_140880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 17), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 1051)
        getmaskarray_call_result_140883 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 17), getmaskarray_140880, *[b_140881], **kwargs_140882)
        
        # Assigning a type to the variable 'mb' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'mb', getmaskarray_call_result_140883)
        
        # Assigning a Call to a Name (line 1052):
        
        # Assigning a Call to a Name (line 1052):
        
        # Call to outer(...): (line 1052)
        # Processing the call arguments (line 1052)
        # Getting the type of 'ma' (line 1052)
        ma_140887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 39), 'ma', False)
        # Getting the type of 'mb' (line 1052)
        mb_140888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 43), 'mb', False)
        # Processing the call keyword arguments (line 1052)
        kwargs_140889 = {}
        # Getting the type of 'umath' (line 1052)
        umath_140884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 16), 'umath', False)
        # Obtaining the member 'logical_or' of a type (line 1052)
        logical_or_140885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 16), umath_140884, 'logical_or')
        # Obtaining the member 'outer' of a type (line 1052)
        outer_140886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 16), logical_or_140885, 'outer')
        # Calling outer(args, kwargs) (line 1052)
        outer_call_result_140890 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 16), outer_140886, *[ma_140887, mb_140888], **kwargs_140889)
        
        # Assigning a type to the variable 'm' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 12), 'm', outer_call_result_140890)
        # SSA join for if statement (line 1047)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 1053)
        m_140891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 16), 'm')
        # Obtaining the member 'ndim' of a type (line 1053)
        ndim_140892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 16), m_140891, 'ndim')
        # Applying the 'not' unary operator (line 1053)
        result_not__140893 = python_operator(stypy.reporting.localization.Localization(__file__, 1053, 12), 'not', ndim_140892)
        
        # Getting the type of 'm' (line 1053)
        m_140894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 28), 'm')
        # Applying the binary operator 'and' (line 1053)
        result_and_keyword_140895 = python_operator(stypy.reporting.localization.Localization(__file__, 1053, 11), 'and', result_not__140893, m_140894)
        
        # Testing the type of an if condition (line 1053)
        if_condition_140896 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1053, 8), result_and_keyword_140895)
        # Assigning a type to the variable 'if_condition_140896' (line 1053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'if_condition_140896', if_condition_140896)
        # SSA begins for if statement (line 1053)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 1054)
        masked_140897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 19), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 1054)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 12), 'stypy_return_type', masked_140897)
        # SSA join for if statement (line 1053)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'm' (line 1055)
        m_140898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 11), 'm')
        # Getting the type of 'nomask' (line 1055)
        nomask_140899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 20), 'nomask')
        # Applying the binary operator 'isnot' (line 1055)
        result_is_not_140900 = python_operator(stypy.reporting.localization.Localization(__file__, 1055, 11), 'isnot', m_140898, nomask_140899)
        
        # Testing the type of an if condition (line 1055)
        if_condition_140901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1055, 8), result_is_not_140900)
        # Assigning a type to the variable 'if_condition_140901' (line 1055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 8), 'if_condition_140901', if_condition_140901)
        # SSA begins for if statement (line 1055)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to copyto(...): (line 1056)
        # Processing the call arguments (line 1056)
        # Getting the type of 'd' (line 1056)
        d_140904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 22), 'd', False)
        # Getting the type of 'da' (line 1056)
        da_140905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 25), 'da', False)
        # Processing the call keyword arguments (line 1056)
        # Getting the type of 'm' (line 1056)
        m_140906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 35), 'm', False)
        keyword_140907 = m_140906
        kwargs_140908 = {'where': keyword_140907}
        # Getting the type of 'np' (line 1056)
        np_140902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 12), 'np', False)
        # Obtaining the member 'copyto' of a type (line 1056)
        copyto_140903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 12), np_140902, 'copyto')
        # Calling copyto(args, kwargs) (line 1056)
        copyto_call_result_140909 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 12), copyto_140903, *[d_140904, da_140905], **kwargs_140908)
        
        # SSA join for if statement (line 1055)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'd' (line 1057)
        d_140910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 15), 'd')
        # Obtaining the member 'shape' of a type (line 1057)
        shape_140911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 15), d_140910, 'shape')
        # Applying the 'not' unary operator (line 1057)
        result_not__140912 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 11), 'not', shape_140911)
        
        # Testing the type of an if condition (line 1057)
        if_condition_140913 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1057, 8), result_not__140912)
        # Assigning a type to the variable 'if_condition_140913' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 8), 'if_condition_140913', if_condition_140913)
        # SSA begins for if statement (line 1057)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'd' (line 1058)
        d_140914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 19), 'd')
        # Assigning a type to the variable 'stypy_return_type' (line 1058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 12), 'stypy_return_type', d_140914)
        # SSA join for if statement (line 1057)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1059):
        
        # Assigning a Call to a Name (line 1059):
        
        # Call to view(...): (line 1059)
        # Processing the call arguments (line 1059)
        
        # Call to get_masked_subclass(...): (line 1059)
        # Processing the call arguments (line 1059)
        # Getting the type of 'a' (line 1059)
        a_140918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 46), 'a', False)
        # Getting the type of 'b' (line 1059)
        b_140919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 49), 'b', False)
        # Processing the call keyword arguments (line 1059)
        kwargs_140920 = {}
        # Getting the type of 'get_masked_subclass' (line 1059)
        get_masked_subclass_140917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 26), 'get_masked_subclass', False)
        # Calling get_masked_subclass(args, kwargs) (line 1059)
        get_masked_subclass_call_result_140921 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 26), get_masked_subclass_140917, *[a_140918, b_140919], **kwargs_140920)
        
        # Processing the call keyword arguments (line 1059)
        kwargs_140922 = {}
        # Getting the type of 'd' (line 1059)
        d_140915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 19), 'd', False)
        # Obtaining the member 'view' of a type (line 1059)
        view_140916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 19), d_140915, 'view')
        # Calling view(args, kwargs) (line 1059)
        view_call_result_140923 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 19), view_140916, *[get_masked_subclass_call_result_140921], **kwargs_140922)
        
        # Assigning a type to the variable 'masked_d' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 8), 'masked_d', view_call_result_140923)
        
        # Assigning a Name to a Attribute (line 1060):
        
        # Assigning a Name to a Attribute (line 1060):
        # Getting the type of 'm' (line 1060)
        m_140924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 25), 'm')
        # Getting the type of 'masked_d' (line 1060)
        masked_d_140925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'masked_d')
        # Setting the type of the member '_mask' of a type (line 1060)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 8), masked_d_140925, '_mask', m_140924)
        # Getting the type of 'masked_d' (line 1061)
        masked_d_140926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 15), 'masked_d')
        # Assigning a type to the variable 'stypy_return_type' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'stypy_return_type', masked_d_140926)
        
        # ################# End of 'outer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'outer' in the type store
        # Getting the type of 'stypy_return_type' (line 1038)
        stypy_return_type_140927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140927)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'outer'
        return stypy_return_type_140927


    @norecursion
    def accumulate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_140928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 38), 'int')
        defaults = [int_140928]
        # Create a new context for function 'accumulate'
        module_type_store = module_type_store.open_function_context('accumulate', 1063, 4, False)
        # Assigning a type to the variable 'self' (line 1064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1064, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_localization', localization)
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_function_name', '_MaskedBinaryOperation.accumulate')
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_param_names_list', ['target', 'axis'])
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedBinaryOperation.accumulate.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedBinaryOperation.accumulate', ['target', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'accumulate', localization, ['target', 'axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'accumulate(...)' code ##################

        str_140929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1067, (-1)), 'str', 'Accumulate `target` along `axis` after filling with y fill\n        value.\n\n        ')
        
        # Assigning a Call to a Name (line 1068):
        
        # Assigning a Call to a Name (line 1068):
        
        # Call to get_masked_subclass(...): (line 1068)
        # Processing the call arguments (line 1068)
        # Getting the type of 'target' (line 1068)
        target_140931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 37), 'target', False)
        # Processing the call keyword arguments (line 1068)
        kwargs_140932 = {}
        # Getting the type of 'get_masked_subclass' (line 1068)
        get_masked_subclass_140930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 17), 'get_masked_subclass', False)
        # Calling get_masked_subclass(args, kwargs) (line 1068)
        get_masked_subclass_call_result_140933 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 17), get_masked_subclass_140930, *[target_140931], **kwargs_140932)
        
        # Assigning a type to the variable 'tclass' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'tclass', get_masked_subclass_call_result_140933)
        
        # Assigning a Call to a Name (line 1069):
        
        # Assigning a Call to a Name (line 1069):
        
        # Call to filled(...): (line 1069)
        # Processing the call arguments (line 1069)
        # Getting the type of 'target' (line 1069)
        target_140935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 19), 'target', False)
        # Getting the type of 'self' (line 1069)
        self_140936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 27), 'self', False)
        # Obtaining the member 'filly' of a type (line 1069)
        filly_140937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 27), self_140936, 'filly')
        # Processing the call keyword arguments (line 1069)
        kwargs_140938 = {}
        # Getting the type of 'filled' (line 1069)
        filled_140934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 12), 'filled', False)
        # Calling filled(args, kwargs) (line 1069)
        filled_call_result_140939 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 12), filled_140934, *[target_140935, filly_140937], **kwargs_140938)
        
        # Assigning a type to the variable 't' (line 1069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 8), 't', filled_call_result_140939)
        
        # Assigning a Call to a Name (line 1070):
        
        # Assigning a Call to a Name (line 1070):
        
        # Call to accumulate(...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of 't' (line 1070)
        t_140943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 35), 't', False)
        # Getting the type of 'axis' (line 1070)
        axis_140944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 38), 'axis', False)
        # Processing the call keyword arguments (line 1070)
        kwargs_140945 = {}
        # Getting the type of 'self' (line 1070)
        self_140940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 17), 'self', False)
        # Obtaining the member 'f' of a type (line 1070)
        f_140941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 17), self_140940, 'f')
        # Obtaining the member 'accumulate' of a type (line 1070)
        accumulate_140942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 17), f_140941, 'accumulate')
        # Calling accumulate(args, kwargs) (line 1070)
        accumulate_call_result_140946 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 17), accumulate_140942, *[t_140943, axis_140944], **kwargs_140945)
        
        # Assigning a type to the variable 'result' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'result', accumulate_call_result_140946)
        
        # Assigning a Call to a Name (line 1071):
        
        # Assigning a Call to a Name (line 1071):
        
        # Call to view(...): (line 1071)
        # Processing the call arguments (line 1071)
        # Getting the type of 'tclass' (line 1071)
        tclass_140949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 36), 'tclass', False)
        # Processing the call keyword arguments (line 1071)
        kwargs_140950 = {}
        # Getting the type of 'result' (line 1071)
        result_140947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 24), 'result', False)
        # Obtaining the member 'view' of a type (line 1071)
        view_140948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 24), result_140947, 'view')
        # Calling view(args, kwargs) (line 1071)
        view_call_result_140951 = invoke(stypy.reporting.localization.Localization(__file__, 1071, 24), view_140948, *[tclass_140949], **kwargs_140950)
        
        # Assigning a type to the variable 'masked_result' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 8), 'masked_result', view_call_result_140951)
        # Getting the type of 'masked_result' (line 1072)
        masked_result_140952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 15), 'masked_result')
        # Assigning a type to the variable 'stypy_return_type' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 8), 'stypy_return_type', masked_result_140952)
        
        # ################# End of 'accumulate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'accumulate' in the type store
        # Getting the type of 'stypy_return_type' (line 1063)
        stypy_return_type_140953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140953)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'accumulate'
        return stypy_return_type_140953


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1074, 4, False)
        # Assigning a type to the variable 'self' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_function_name', '_MaskedBinaryOperation.__str__')
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedBinaryOperation.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        str_140954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1075, 15), 'str', 'Masked version of ')
        
        # Call to str(...): (line 1075)
        # Processing the call arguments (line 1075)
        # Getting the type of 'self' (line 1075)
        self_140956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 42), 'self', False)
        # Obtaining the member 'f' of a type (line 1075)
        f_140957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 42), self_140956, 'f')
        # Processing the call keyword arguments (line 1075)
        kwargs_140958 = {}
        # Getting the type of 'str' (line 1075)
        str_140955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 38), 'str', False)
        # Calling str(args, kwargs) (line 1075)
        str_call_result_140959 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 38), str_140955, *[f_140957], **kwargs_140958)
        
        # Applying the binary operator '+' (line 1075)
        result_add_140960 = python_operator(stypy.reporting.localization.Localization(__file__, 1075, 15), '+', str_140954, str_call_result_140959)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'stypy_return_type', result_add_140960)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1074)
        stypy_return_type_140961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_140961)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_140961


# Assigning a type to the variable '_MaskedBinaryOperation' (line 921)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 0), '_MaskedBinaryOperation', _MaskedBinaryOperation)
# Declaration of the '_DomainedBinaryOperation' class

class _DomainedBinaryOperation:
    str_140962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, (-1)), 'str', '\n    Define binary operations that have a domain, like divide.\n\n    They have no reduce, outer or accumulate.\n\n    Parameters\n    ----------\n    mbfunc : function\n        The function for which to define a masked version. Made available\n        as ``_DomainedBinaryOperation.f``.\n    domain : class instance\n        Default domain for the function. Should be one of the ``_Domain*``\n        classes.\n    fillx : scalar, optional\n        Filling value for the first argument, default is 0.\n    filly : scalar, optional\n        Filling value for the second argument, default is 0.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_140963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 45), 'int')
        int_140964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 54), 'int')
        defaults = [int_140963, int_140964]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1099, 4, False)
        # Assigning a type to the variable 'self' (line 1100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1100, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainedBinaryOperation.__init__', ['dbfunc', 'domain', 'fillx', 'filly'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['dbfunc', 'domain', 'fillx', 'filly'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_140965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, (-1)), 'str', 'abfunc(fillx, filly) must be defined.\n           abfunc(x, filly) = x for all x to enable reduce.\n        ')
        
        # Assigning a Name to a Attribute (line 1103):
        
        # Assigning a Name to a Attribute (line 1103):
        # Getting the type of 'dbfunc' (line 1103)
        dbfunc_140966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 17), 'dbfunc')
        # Getting the type of 'self' (line 1103)
        self_140967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 8), 'self')
        # Setting the type of the member 'f' of a type (line 1103)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 8), self_140967, 'f', dbfunc_140966)
        
        # Assigning a Name to a Attribute (line 1104):
        
        # Assigning a Name to a Attribute (line 1104):
        # Getting the type of 'domain' (line 1104)
        domain_140968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 22), 'domain')
        # Getting the type of 'self' (line 1104)
        self_140969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 8), 'self')
        # Setting the type of the member 'domain' of a type (line 1104)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 8), self_140969, 'domain', domain_140968)
        
        # Assigning a Name to a Attribute (line 1105):
        
        # Assigning a Name to a Attribute (line 1105):
        # Getting the type of 'fillx' (line 1105)
        fillx_140970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 21), 'fillx')
        # Getting the type of 'self' (line 1105)
        self_140971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'self')
        # Setting the type of the member 'fillx' of a type (line 1105)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 8), self_140971, 'fillx', fillx_140970)
        
        # Assigning a Name to a Attribute (line 1106):
        
        # Assigning a Name to a Attribute (line 1106):
        # Getting the type of 'filly' (line 1106)
        filly_140972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 21), 'filly')
        # Getting the type of 'self' (line 1106)
        self_140973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 8), 'self')
        # Setting the type of the member 'filly' of a type (line 1106)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 8), self_140973, 'filly', filly_140972)
        
        # Assigning a Call to a Attribute (line 1107):
        
        # Assigning a Call to a Attribute (line 1107):
        
        # Call to getattr(...): (line 1107)
        # Processing the call arguments (line 1107)
        # Getting the type of 'dbfunc' (line 1107)
        dbfunc_140975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 31), 'dbfunc', False)
        str_140976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 39), 'str', '__doc__')
        
        # Call to str(...): (line 1107)
        # Processing the call arguments (line 1107)
        # Getting the type of 'dbfunc' (line 1107)
        dbfunc_140978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 54), 'dbfunc', False)
        # Processing the call keyword arguments (line 1107)
        kwargs_140979 = {}
        # Getting the type of 'str' (line 1107)
        str_140977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 50), 'str', False)
        # Calling str(args, kwargs) (line 1107)
        str_call_result_140980 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 50), str_140977, *[dbfunc_140978], **kwargs_140979)
        
        # Processing the call keyword arguments (line 1107)
        kwargs_140981 = {}
        # Getting the type of 'getattr' (line 1107)
        getattr_140974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 23), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1107)
        getattr_call_result_140982 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 23), getattr_140974, *[dbfunc_140975, str_140976, str_call_result_140980], **kwargs_140981)
        
        # Getting the type of 'self' (line 1107)
        self_140983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 1107)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 8), self_140983, '__doc__', getattr_call_result_140982)
        
        # Assigning a Call to a Attribute (line 1108):
        
        # Assigning a Call to a Attribute (line 1108):
        
        # Call to getattr(...): (line 1108)
        # Processing the call arguments (line 1108)
        # Getting the type of 'dbfunc' (line 1108)
        dbfunc_140985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 32), 'dbfunc', False)
        str_140986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 40), 'str', '__name__')
        
        # Call to str(...): (line 1108)
        # Processing the call arguments (line 1108)
        # Getting the type of 'dbfunc' (line 1108)
        dbfunc_140988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 56), 'dbfunc', False)
        # Processing the call keyword arguments (line 1108)
        kwargs_140989 = {}
        # Getting the type of 'str' (line 1108)
        str_140987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 52), 'str', False)
        # Calling str(args, kwargs) (line 1108)
        str_call_result_140990 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 52), str_140987, *[dbfunc_140988], **kwargs_140989)
        
        # Processing the call keyword arguments (line 1108)
        kwargs_140991 = {}
        # Getting the type of 'getattr' (line 1108)
        getattr_140984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 24), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1108)
        getattr_call_result_140992 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 24), getattr_140984, *[dbfunc_140985, str_140986, str_call_result_140990], **kwargs_140991)
        
        # Getting the type of 'self' (line 1108)
        self_140993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'self')
        # Setting the type of the member '__name__' of a type (line 1108)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 8), self_140993, '__name__', getattr_call_result_140992)
        
        # Assigning a Name to a Subscript (line 1109):
        
        # Assigning a Name to a Subscript (line 1109):
        # Getting the type of 'domain' (line 1109)
        domain_140994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 31), 'domain')
        # Getting the type of 'ufunc_domain' (line 1109)
        ufunc_domain_140995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'ufunc_domain')
        # Getting the type of 'dbfunc' (line 1109)
        dbfunc_140996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 21), 'dbfunc')
        # Storing an element on a container (line 1109)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 8), ufunc_domain_140995, (dbfunc_140996, domain_140994))
        
        # Assigning a Tuple to a Subscript (line 1110):
        
        # Assigning a Tuple to a Subscript (line 1110):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1110)
        tuple_140997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1110)
        # Adding element type (line 1110)
        # Getting the type of 'fillx' (line 1110)
        fillx_140998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 31), 'fillx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1110, 31), tuple_140997, fillx_140998)
        # Adding element type (line 1110)
        # Getting the type of 'filly' (line 1110)
        filly_140999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 38), 'filly')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1110, 31), tuple_140997, filly_140999)
        
        # Getting the type of 'ufunc_fills' (line 1110)
        ufunc_fills_141000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 8), 'ufunc_fills')
        # Getting the type of 'dbfunc' (line 1110)
        dbfunc_141001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 20), 'dbfunc')
        # Storing an element on a container (line 1110)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1110, 8), ufunc_fills_141000, (dbfunc_141001, tuple_140997))
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1112, 4, False)
        # Assigning a type to the variable 'self' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_localization', localization)
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_function_name', '_DomainedBinaryOperation.__call__')
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_param_names_list', ['a', 'b'])
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DomainedBinaryOperation.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainedBinaryOperation.__call__', ['a', 'b'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_141002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1113, 8), 'str', 'Execute the call behavior.')
        
        # Assigning a Tuple to a Tuple (line 1115):
        
        # Assigning a Call to a Name (line 1115):
        
        # Call to getdata(...): (line 1115)
        # Processing the call arguments (line 1115)
        # Getting the type of 'a' (line 1115)
        a_141004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 28), 'a', False)
        # Processing the call keyword arguments (line 1115)
        kwargs_141005 = {}
        # Getting the type of 'getdata' (line 1115)
        getdata_141003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 20), 'getdata', False)
        # Calling getdata(args, kwargs) (line 1115)
        getdata_call_result_141006 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 20), getdata_141003, *[a_141004], **kwargs_141005)
        
        # Assigning a type to the variable 'tuple_assignment_139167' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'tuple_assignment_139167', getdata_call_result_141006)
        
        # Assigning a Call to a Name (line 1115):
        
        # Call to getdata(...): (line 1115)
        # Processing the call arguments (line 1115)
        # Getting the type of 'b' (line 1115)
        b_141008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 40), 'b', False)
        # Processing the call keyword arguments (line 1115)
        kwargs_141009 = {}
        # Getting the type of 'getdata' (line 1115)
        getdata_141007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 32), 'getdata', False)
        # Calling getdata(args, kwargs) (line 1115)
        getdata_call_result_141010 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 32), getdata_141007, *[b_141008], **kwargs_141009)
        
        # Assigning a type to the variable 'tuple_assignment_139168' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'tuple_assignment_139168', getdata_call_result_141010)
        
        # Assigning a Name to a Name (line 1115):
        # Getting the type of 'tuple_assignment_139167' (line 1115)
        tuple_assignment_139167_141011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'tuple_assignment_139167')
        # Assigning a type to the variable 'da' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 9), 'da', tuple_assignment_139167_141011)
        
        # Assigning a Name to a Name (line 1115):
        # Getting the type of 'tuple_assignment_139168' (line 1115)
        tuple_assignment_139168_141012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'tuple_assignment_139168')
        # Assigning a type to the variable 'db' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 13), 'db', tuple_assignment_139168_141012)
        
        # Call to errstate(...): (line 1117)
        # Processing the call keyword arguments (line 1117)
        str_141015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, 32), 'str', 'ignore')
        keyword_141016 = str_141015
        str_141017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, 50), 'str', 'ignore')
        keyword_141018 = str_141017
        kwargs_141019 = {'divide': keyword_141016, 'invalid': keyword_141018}
        # Getting the type of 'np' (line 1117)
        np_141013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 13), 'np', False)
        # Obtaining the member 'errstate' of a type (line 1117)
        errstate_141014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 13), np_141013, 'errstate')
        # Calling errstate(args, kwargs) (line 1117)
        errstate_call_result_141020 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 13), errstate_141014, *[], **kwargs_141019)
        
        with_141021 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1117, 13), errstate_call_result_141020, 'with parameter', '__enter__', '__exit__')

        if with_141021:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 1117)
            enter___141022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 13), errstate_call_result_141020, '__enter__')
            with_enter_141023 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 13), enter___141022)
            
            # Assigning a Call to a Name (line 1118):
            
            # Assigning a Call to a Name (line 1118):
            
            # Call to f(...): (line 1118)
            # Processing the call arguments (line 1118)
            # Getting the type of 'da' (line 1118)
            da_141026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 28), 'da', False)
            # Getting the type of 'db' (line 1118)
            db_141027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 32), 'db', False)
            # Getting the type of 'args' (line 1118)
            args_141028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 37), 'args', False)
            # Processing the call keyword arguments (line 1118)
            # Getting the type of 'kwargs' (line 1118)
            kwargs_141029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 45), 'kwargs', False)
            kwargs_141030 = {'kwargs_141029': kwargs_141029}
            # Getting the type of 'self' (line 1118)
            self_141024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 21), 'self', False)
            # Obtaining the member 'f' of a type (line 1118)
            f_141025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 21), self_141024, 'f')
            # Calling f(args, kwargs) (line 1118)
            f_call_result_141031 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 21), f_141025, *[da_141026, db_141027, args_141028], **kwargs_141030)
            
            # Assigning a type to the variable 'result' (line 1118)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 12), 'result', f_call_result_141031)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 1117)
            exit___141032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 13), errstate_call_result_141020, '__exit__')
            with_exit_141033 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 13), exit___141032, None, None, None)

        
        # Assigning a UnaryOp to a Name (line 1120):
        
        # Assigning a UnaryOp to a Name (line 1120):
        
        
        # Call to isfinite(...): (line 1120)
        # Processing the call arguments (line 1120)
        # Getting the type of 'result' (line 1120)
        result_141036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 28), 'result', False)
        # Processing the call keyword arguments (line 1120)
        kwargs_141037 = {}
        # Getting the type of 'umath' (line 1120)
        umath_141034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 13), 'umath', False)
        # Obtaining the member 'isfinite' of a type (line 1120)
        isfinite_141035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 13), umath_141034, 'isfinite')
        # Calling isfinite(args, kwargs) (line 1120)
        isfinite_call_result_141038 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 13), isfinite_141035, *[result_141036], **kwargs_141037)
        
        # Applying the '~' unary operator (line 1120)
        result_inv_141039 = python_operator(stypy.reporting.localization.Localization(__file__, 1120, 12), '~', isfinite_call_result_141038)
        
        # Assigning a type to the variable 'm' (line 1120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'm', result_inv_141039)
        
        # Getting the type of 'm' (line 1121)
        m_141040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'm')
        
        # Call to getmask(...): (line 1121)
        # Processing the call arguments (line 1121)
        # Getting the type of 'a' (line 1121)
        a_141042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 21), 'a', False)
        # Processing the call keyword arguments (line 1121)
        kwargs_141043 = {}
        # Getting the type of 'getmask' (line 1121)
        getmask_141041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 13), 'getmask', False)
        # Calling getmask(args, kwargs) (line 1121)
        getmask_call_result_141044 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 13), getmask_141041, *[a_141042], **kwargs_141043)
        
        # Applying the binary operator '|=' (line 1121)
        result_ior_141045 = python_operator(stypy.reporting.localization.Localization(__file__, 1121, 8), '|=', m_141040, getmask_call_result_141044)
        # Assigning a type to the variable 'm' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'm', result_ior_141045)
        
        
        # Getting the type of 'm' (line 1122)
        m_141046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 8), 'm')
        
        # Call to getmask(...): (line 1122)
        # Processing the call arguments (line 1122)
        # Getting the type of 'b' (line 1122)
        b_141048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 21), 'b', False)
        # Processing the call keyword arguments (line 1122)
        kwargs_141049 = {}
        # Getting the type of 'getmask' (line 1122)
        getmask_141047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 13), 'getmask', False)
        # Calling getmask(args, kwargs) (line 1122)
        getmask_call_result_141050 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 13), getmask_141047, *[b_141048], **kwargs_141049)
        
        # Applying the binary operator '|=' (line 1122)
        result_ior_141051 = python_operator(stypy.reporting.localization.Localization(__file__, 1122, 8), '|=', m_141046, getmask_call_result_141050)
        # Assigning a type to the variable 'm' (line 1122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 8), 'm', result_ior_141051)
        
        
        # Assigning a Call to a Name (line 1124):
        
        # Assigning a Call to a Name (line 1124):
        
        # Call to get(...): (line 1124)
        # Processing the call arguments (line 1124)
        # Getting the type of 'self' (line 1124)
        self_141054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 34), 'self', False)
        # Obtaining the member 'f' of a type (line 1124)
        f_141055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 34), self_141054, 'f')
        # Getting the type of 'None' (line 1124)
        None_141056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 42), 'None', False)
        # Processing the call keyword arguments (line 1124)
        kwargs_141057 = {}
        # Getting the type of 'ufunc_domain' (line 1124)
        ufunc_domain_141052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 17), 'ufunc_domain', False)
        # Obtaining the member 'get' of a type (line 1124)
        get_141053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 17), ufunc_domain_141052, 'get')
        # Calling get(args, kwargs) (line 1124)
        get_call_result_141058 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 17), get_141053, *[f_141055, None_141056], **kwargs_141057)
        
        # Assigning a type to the variable 'domain' (line 1124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 8), 'domain', get_call_result_141058)
        
        # Type idiom detected: calculating its left and rigth part (line 1125)
        # Getting the type of 'domain' (line 1125)
        domain_141059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 8), 'domain')
        # Getting the type of 'None' (line 1125)
        None_141060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 25), 'None')
        
        (may_be_141061, more_types_in_union_141062) = may_not_be_none(domain_141059, None_141060)

        if may_be_141061:

            if more_types_in_union_141062:
                # Runtime conditional SSA (line 1125)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'm' (line 1126)
            m_141063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'm')
            
            # Call to filled(...): (line 1126)
            # Processing the call arguments (line 1126)
            
            # Call to domain(...): (line 1126)
            # Processing the call arguments (line 1126)
            # Getting the type of 'da' (line 1126)
            da_141066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 31), 'da', False)
            # Getting the type of 'db' (line 1126)
            db_141067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 35), 'db', False)
            # Processing the call keyword arguments (line 1126)
            kwargs_141068 = {}
            # Getting the type of 'domain' (line 1126)
            domain_141065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 24), 'domain', False)
            # Calling domain(args, kwargs) (line 1126)
            domain_call_result_141069 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 24), domain_141065, *[da_141066, db_141067], **kwargs_141068)
            
            # Getting the type of 'True' (line 1126)
            True_141070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 40), 'True', False)
            # Processing the call keyword arguments (line 1126)
            kwargs_141071 = {}
            # Getting the type of 'filled' (line 1126)
            filled_141064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 17), 'filled', False)
            # Calling filled(args, kwargs) (line 1126)
            filled_call_result_141072 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 17), filled_141064, *[domain_call_result_141069, True_141070], **kwargs_141071)
            
            # Applying the binary operator '|=' (line 1126)
            result_ior_141073 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 12), '|=', m_141063, filled_call_result_141072)
            # Assigning a type to the variable 'm' (line 1126)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'm', result_ior_141073)
            

            if more_types_in_union_141062:
                # SSA join for if statement (line 1125)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'm' (line 1128)
        m_141074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 16), 'm')
        # Obtaining the member 'ndim' of a type (line 1128)
        ndim_141075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 16), m_141074, 'ndim')
        # Applying the 'not' unary operator (line 1128)
        result_not__141076 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 12), 'not', ndim_141075)
        
        # Testing the type of an if condition (line 1128)
        if_condition_141077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1128, 8), result_not__141076)
        # Assigning a type to the variable 'if_condition_141077' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 8), 'if_condition_141077', if_condition_141077)
        # SSA begins for if statement (line 1128)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'm' (line 1129)
        m_141078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 15), 'm')
        # Testing the type of an if condition (line 1129)
        if_condition_141079 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1129, 12), m_141078)
        # Assigning a type to the variable 'if_condition_141079' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'if_condition_141079', if_condition_141079)
        # SSA begins for if statement (line 1129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 1130)
        masked_141080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 23), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 16), 'stypy_return_type', masked_141080)
        # SSA branch for the else part of an if statement (line 1129)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'result' (line 1132)
        result_141081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 23), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'stypy_return_type', result_141081)
        # SSA join for if statement (line 1129)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1128)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1135)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to copyto(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of 'result' (line 1136)
        result_141084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 22), 'result', False)
        int_141085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 30), 'int')
        # Processing the call keyword arguments (line 1136)
        str_141086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 41), 'str', 'unsafe')
        keyword_141087 = str_141086
        # Getting the type of 'm' (line 1136)
        m_141088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 57), 'm', False)
        keyword_141089 = m_141088
        kwargs_141090 = {'where': keyword_141089, 'casting': keyword_141087}
        # Getting the type of 'np' (line 1136)
        np_141082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 12), 'np', False)
        # Obtaining the member 'copyto' of a type (line 1136)
        copyto_141083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 12), np_141082, 'copyto')
        # Calling copyto(args, kwargs) (line 1136)
        copyto_call_result_141091 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 12), copyto_141083, *[result_141084, int_141085], **kwargs_141090)
        
        
        # Assigning a Call to a Name (line 1138):
        
        # Assigning a Call to a Name (line 1138):
        
        # Call to multiply(...): (line 1138)
        # Processing the call arguments (line 1138)
        # Getting the type of 'm' (line 1138)
        m_141094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 39), 'm', False)
        # Getting the type of 'da' (line 1138)
        da_141095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 42), 'da', False)
        # Processing the call keyword arguments (line 1138)
        kwargs_141096 = {}
        # Getting the type of 'umath' (line 1138)
        umath_141092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 24), 'umath', False)
        # Obtaining the member 'multiply' of a type (line 1138)
        multiply_141093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 24), umath_141092, 'multiply')
        # Calling multiply(args, kwargs) (line 1138)
        multiply_call_result_141097 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 24), multiply_141093, *[m_141094, da_141095], **kwargs_141096)
        
        # Assigning a type to the variable 'masked_da' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 12), 'masked_da', multiply_call_result_141097)
        
        
        # Call to can_cast(...): (line 1140)
        # Processing the call arguments (line 1140)
        # Getting the type of 'masked_da' (line 1140)
        masked_da_141100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 27), 'masked_da', False)
        # Obtaining the member 'dtype' of a type (line 1140)
        dtype_141101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 27), masked_da_141100, 'dtype')
        # Getting the type of 'result' (line 1140)
        result_141102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 44), 'result', False)
        # Obtaining the member 'dtype' of a type (line 1140)
        dtype_141103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 44), result_141102, 'dtype')
        # Processing the call keyword arguments (line 1140)
        str_141104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 66), 'str', 'safe')
        keyword_141105 = str_141104
        kwargs_141106 = {'casting': keyword_141105}
        # Getting the type of 'np' (line 1140)
        np_141098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 15), 'np', False)
        # Obtaining the member 'can_cast' of a type (line 1140)
        can_cast_141099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 15), np_141098, 'can_cast')
        # Calling can_cast(args, kwargs) (line 1140)
        can_cast_call_result_141107 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 15), can_cast_141099, *[dtype_141101, dtype_141103], **kwargs_141106)
        
        # Testing the type of an if condition (line 1140)
        if_condition_141108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1140, 12), can_cast_call_result_141107)
        # Assigning a type to the variable 'if_condition_141108' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 12), 'if_condition_141108', if_condition_141108)
        # SSA begins for if statement (line 1140)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'result' (line 1141)
        result_141109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 16), 'result')
        # Getting the type of 'masked_da' (line 1141)
        masked_da_141110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 26), 'masked_da')
        # Applying the binary operator '+=' (line 1141)
        result_iadd_141111 = python_operator(stypy.reporting.localization.Localization(__file__, 1141, 16), '+=', result_141109, masked_da_141110)
        # Assigning a type to the variable 'result' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 16), 'result', result_iadd_141111)
        
        # SSA join for if statement (line 1140)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 1135)
        # SSA branch for the except '<any exception>' branch of a try statement (line 1135)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1135)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1146):
        
        # Assigning a Call to a Name (line 1146):
        
        # Call to view(...): (line 1146)
        # Processing the call arguments (line 1146)
        
        # Call to get_masked_subclass(...): (line 1146)
        # Processing the call arguments (line 1146)
        # Getting the type of 'a' (line 1146)
        a_141115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 56), 'a', False)
        # Getting the type of 'b' (line 1146)
        b_141116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 59), 'b', False)
        # Processing the call keyword arguments (line 1146)
        kwargs_141117 = {}
        # Getting the type of 'get_masked_subclass' (line 1146)
        get_masked_subclass_141114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 36), 'get_masked_subclass', False)
        # Calling get_masked_subclass(args, kwargs) (line 1146)
        get_masked_subclass_call_result_141118 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 36), get_masked_subclass_141114, *[a_141115, b_141116], **kwargs_141117)
        
        # Processing the call keyword arguments (line 1146)
        kwargs_141119 = {}
        # Getting the type of 'result' (line 1146)
        result_141112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 24), 'result', False)
        # Obtaining the member 'view' of a type (line 1146)
        view_141113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 24), result_141112, 'view')
        # Calling view(args, kwargs) (line 1146)
        view_call_result_141120 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 24), view_141113, *[get_masked_subclass_call_result_141118], **kwargs_141119)
        
        # Assigning a type to the variable 'masked_result' (line 1146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'masked_result', view_call_result_141120)
        
        # Assigning a Name to a Attribute (line 1147):
        
        # Assigning a Name to a Attribute (line 1147):
        # Getting the type of 'm' (line 1147)
        m_141121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 30), 'm')
        # Getting the type of 'masked_result' (line 1147)
        masked_result_141122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'masked_result')
        # Setting the type of the member '_mask' of a type (line 1147)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 8), masked_result_141122, '_mask', m_141121)
        
        
        # Call to isinstance(...): (line 1148)
        # Processing the call arguments (line 1148)
        # Getting the type of 'a' (line 1148)
        a_141124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 22), 'a', False)
        # Getting the type of 'MaskedArray' (line 1148)
        MaskedArray_141125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 25), 'MaskedArray', False)
        # Processing the call keyword arguments (line 1148)
        kwargs_141126 = {}
        # Getting the type of 'isinstance' (line 1148)
        isinstance_141123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1148)
        isinstance_call_result_141127 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 11), isinstance_141123, *[a_141124, MaskedArray_141125], **kwargs_141126)
        
        # Testing the type of an if condition (line 1148)
        if_condition_141128 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1148, 8), isinstance_call_result_141127)
        # Assigning a type to the variable 'if_condition_141128' (line 1148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 8), 'if_condition_141128', if_condition_141128)
        # SSA begins for if statement (line 1148)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _update_from(...): (line 1149)
        # Processing the call arguments (line 1149)
        # Getting the type of 'a' (line 1149)
        a_141131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 39), 'a', False)
        # Processing the call keyword arguments (line 1149)
        kwargs_141132 = {}
        # Getting the type of 'masked_result' (line 1149)
        masked_result_141129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'masked_result', False)
        # Obtaining the member '_update_from' of a type (line 1149)
        _update_from_141130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 12), masked_result_141129, '_update_from')
        # Calling _update_from(args, kwargs) (line 1149)
        _update_from_call_result_141133 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 12), _update_from_141130, *[a_141131], **kwargs_141132)
        
        # SSA branch for the else part of an if statement (line 1148)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 1150)
        # Processing the call arguments (line 1150)
        # Getting the type of 'b' (line 1150)
        b_141135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 24), 'b', False)
        # Getting the type of 'MaskedArray' (line 1150)
        MaskedArray_141136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 1150)
        kwargs_141137 = {}
        # Getting the type of 'isinstance' (line 1150)
        isinstance_141134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1150)
        isinstance_call_result_141138 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 13), isinstance_141134, *[b_141135, MaskedArray_141136], **kwargs_141137)
        
        # Testing the type of an if condition (line 1150)
        if_condition_141139 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1150, 13), isinstance_call_result_141138)
        # Assigning a type to the variable 'if_condition_141139' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 13), 'if_condition_141139', if_condition_141139)
        # SSA begins for if statement (line 1150)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _update_from(...): (line 1151)
        # Processing the call arguments (line 1151)
        # Getting the type of 'b' (line 1151)
        b_141142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 39), 'b', False)
        # Processing the call keyword arguments (line 1151)
        kwargs_141143 = {}
        # Getting the type of 'masked_result' (line 1151)
        masked_result_141140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 12), 'masked_result', False)
        # Obtaining the member '_update_from' of a type (line 1151)
        _update_from_141141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 12), masked_result_141140, '_update_from')
        # Calling _update_from(args, kwargs) (line 1151)
        _update_from_call_result_141144 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 12), _update_from_141141, *[b_141142], **kwargs_141143)
        
        # SSA join for if statement (line 1150)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1148)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'masked_result' (line 1152)
        masked_result_141145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 15), 'masked_result')
        # Assigning a type to the variable 'stypy_return_type' (line 1152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), 'stypy_return_type', masked_result_141145)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1112)
        stypy_return_type_141146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141146)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_141146


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 1154, 4, False)
        # Assigning a type to the variable 'self' (line 1155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_function_name', '_DomainedBinaryOperation.__str__')
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _DomainedBinaryOperation.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_DomainedBinaryOperation.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        str_141147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 15), 'str', 'Masked version of ')
        
        # Call to str(...): (line 1155)
        # Processing the call arguments (line 1155)
        # Getting the type of 'self' (line 1155)
        self_141149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 42), 'self', False)
        # Obtaining the member 'f' of a type (line 1155)
        f_141150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 42), self_141149, 'f')
        # Processing the call keyword arguments (line 1155)
        kwargs_141151 = {}
        # Getting the type of 'str' (line 1155)
        str_141148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 38), 'str', False)
        # Calling str(args, kwargs) (line 1155)
        str_call_result_141152 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 38), str_141148, *[f_141150], **kwargs_141151)
        
        # Applying the binary operator '+' (line 1155)
        result_add_141153 = python_operator(stypy.reporting.localization.Localization(__file__, 1155, 15), '+', str_141147, str_call_result_141152)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 8), 'stypy_return_type', result_add_141153)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 1154)
        stypy_return_type_141154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141154)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_141154


# Assigning a type to the variable '_DomainedBinaryOperation' (line 1078)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 0), '_DomainedBinaryOperation', _DomainedBinaryOperation)

# Assigning a Call to a Name (line 1159):

# Assigning a Call to a Name (line 1159):

# Call to _MaskedUnaryOperation(...): (line 1159)
# Processing the call arguments (line 1159)
# Getting the type of 'umath' (line 1159)
umath_141156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 28), 'umath', False)
# Obtaining the member 'exp' of a type (line 1159)
exp_141157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 28), umath_141156, 'exp')
# Processing the call keyword arguments (line 1159)
kwargs_141158 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1159)
_MaskedUnaryOperation_141155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 6), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1159)
_MaskedUnaryOperation_call_result_141159 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 6), _MaskedUnaryOperation_141155, *[exp_141157], **kwargs_141158)

# Assigning a type to the variable 'exp' (line 1159)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 0), 'exp', _MaskedUnaryOperation_call_result_141159)

# Assigning a Call to a Name (line 1160):

# Assigning a Call to a Name (line 1160):

# Call to _MaskedUnaryOperation(...): (line 1160)
# Processing the call arguments (line 1160)
# Getting the type of 'umath' (line 1160)
umath_141161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 34), 'umath', False)
# Obtaining the member 'conjugate' of a type (line 1160)
conjugate_141162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 34), umath_141161, 'conjugate')
# Processing the call keyword arguments (line 1160)
kwargs_141163 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1160)
_MaskedUnaryOperation_141160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 12), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1160)
_MaskedUnaryOperation_call_result_141164 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 12), _MaskedUnaryOperation_141160, *[conjugate_141162], **kwargs_141163)

# Assigning a type to the variable 'conjugate' (line 1160)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 0), 'conjugate', _MaskedUnaryOperation_call_result_141164)

# Assigning a Call to a Name (line 1161):

# Assigning a Call to a Name (line 1161):

# Call to _MaskedUnaryOperation(...): (line 1161)
# Processing the call arguments (line 1161)
# Getting the type of 'umath' (line 1161)
umath_141166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 28), 'umath', False)
# Obtaining the member 'sin' of a type (line 1161)
sin_141167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1161, 28), umath_141166, 'sin')
# Processing the call keyword arguments (line 1161)
kwargs_141168 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1161)
_MaskedUnaryOperation_141165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 6), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1161)
_MaskedUnaryOperation_call_result_141169 = invoke(stypy.reporting.localization.Localization(__file__, 1161, 6), _MaskedUnaryOperation_141165, *[sin_141167], **kwargs_141168)

# Assigning a type to the variable 'sin' (line 1161)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 0), 'sin', _MaskedUnaryOperation_call_result_141169)

# Assigning a Call to a Name (line 1162):

# Assigning a Call to a Name (line 1162):

# Call to _MaskedUnaryOperation(...): (line 1162)
# Processing the call arguments (line 1162)
# Getting the type of 'umath' (line 1162)
umath_141171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 28), 'umath', False)
# Obtaining the member 'cos' of a type (line 1162)
cos_141172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 28), umath_141171, 'cos')
# Processing the call keyword arguments (line 1162)
kwargs_141173 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1162)
_MaskedUnaryOperation_141170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 6), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1162)
_MaskedUnaryOperation_call_result_141174 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 6), _MaskedUnaryOperation_141170, *[cos_141172], **kwargs_141173)

# Assigning a type to the variable 'cos' (line 1162)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 0), 'cos', _MaskedUnaryOperation_call_result_141174)

# Assigning a Call to a Name (line 1163):

# Assigning a Call to a Name (line 1163):

# Call to _MaskedUnaryOperation(...): (line 1163)
# Processing the call arguments (line 1163)
# Getting the type of 'umath' (line 1163)
umath_141176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 28), 'umath', False)
# Obtaining the member 'tan' of a type (line 1163)
tan_141177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 28), umath_141176, 'tan')
# Processing the call keyword arguments (line 1163)
kwargs_141178 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1163)
_MaskedUnaryOperation_141175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 6), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1163)
_MaskedUnaryOperation_call_result_141179 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 6), _MaskedUnaryOperation_141175, *[tan_141177], **kwargs_141178)

# Assigning a type to the variable 'tan' (line 1163)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 0), 'tan', _MaskedUnaryOperation_call_result_141179)

# Assigning a Call to a Name (line 1164):

# Assigning a Call to a Name (line 1164):

# Call to _MaskedUnaryOperation(...): (line 1164)
# Processing the call arguments (line 1164)
# Getting the type of 'umath' (line 1164)
umath_141181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 31), 'umath', False)
# Obtaining the member 'arctan' of a type (line 1164)
arctan_141182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 31), umath_141181, 'arctan')
# Processing the call keyword arguments (line 1164)
kwargs_141183 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1164)
_MaskedUnaryOperation_141180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 9), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1164)
_MaskedUnaryOperation_call_result_141184 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 9), _MaskedUnaryOperation_141180, *[arctan_141182], **kwargs_141183)

# Assigning a type to the variable 'arctan' (line 1164)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 0), 'arctan', _MaskedUnaryOperation_call_result_141184)

# Assigning a Call to a Name (line 1165):

# Assigning a Call to a Name (line 1165):

# Call to _MaskedUnaryOperation(...): (line 1165)
# Processing the call arguments (line 1165)
# Getting the type of 'umath' (line 1165)
umath_141186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 32), 'umath', False)
# Obtaining the member 'arcsinh' of a type (line 1165)
arcsinh_141187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 32), umath_141186, 'arcsinh')
# Processing the call keyword arguments (line 1165)
kwargs_141188 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1165)
_MaskedUnaryOperation_141185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 10), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1165)
_MaskedUnaryOperation_call_result_141189 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 10), _MaskedUnaryOperation_141185, *[arcsinh_141187], **kwargs_141188)

# Assigning a type to the variable 'arcsinh' (line 1165)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 0), 'arcsinh', _MaskedUnaryOperation_call_result_141189)

# Assigning a Call to a Name (line 1166):

# Assigning a Call to a Name (line 1166):

# Call to _MaskedUnaryOperation(...): (line 1166)
# Processing the call arguments (line 1166)
# Getting the type of 'umath' (line 1166)
umath_141191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 29), 'umath', False)
# Obtaining the member 'sinh' of a type (line 1166)
sinh_141192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 29), umath_141191, 'sinh')
# Processing the call keyword arguments (line 1166)
kwargs_141193 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1166)
_MaskedUnaryOperation_141190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 7), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1166)
_MaskedUnaryOperation_call_result_141194 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 7), _MaskedUnaryOperation_141190, *[sinh_141192], **kwargs_141193)

# Assigning a type to the variable 'sinh' (line 1166)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 0), 'sinh', _MaskedUnaryOperation_call_result_141194)

# Assigning a Call to a Name (line 1167):

# Assigning a Call to a Name (line 1167):

# Call to _MaskedUnaryOperation(...): (line 1167)
# Processing the call arguments (line 1167)
# Getting the type of 'umath' (line 1167)
umath_141196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 29), 'umath', False)
# Obtaining the member 'cosh' of a type (line 1167)
cosh_141197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 29), umath_141196, 'cosh')
# Processing the call keyword arguments (line 1167)
kwargs_141198 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1167)
_MaskedUnaryOperation_141195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 7), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1167)
_MaskedUnaryOperation_call_result_141199 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 7), _MaskedUnaryOperation_141195, *[cosh_141197], **kwargs_141198)

# Assigning a type to the variable 'cosh' (line 1167)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 0), 'cosh', _MaskedUnaryOperation_call_result_141199)

# Assigning a Call to a Name (line 1168):

# Assigning a Call to a Name (line 1168):

# Call to _MaskedUnaryOperation(...): (line 1168)
# Processing the call arguments (line 1168)
# Getting the type of 'umath' (line 1168)
umath_141201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 29), 'umath', False)
# Obtaining the member 'tanh' of a type (line 1168)
tanh_141202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 29), umath_141201, 'tanh')
# Processing the call keyword arguments (line 1168)
kwargs_141203 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1168)
_MaskedUnaryOperation_141200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 7), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1168)
_MaskedUnaryOperation_call_result_141204 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 7), _MaskedUnaryOperation_141200, *[tanh_141202], **kwargs_141203)

# Assigning a type to the variable 'tanh' (line 1168)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 0), 'tanh', _MaskedUnaryOperation_call_result_141204)

# Multiple assignment of 2 elements.

# Assigning a Call to a Name (line 1169):

# Call to _MaskedUnaryOperation(...): (line 1169)
# Processing the call arguments (line 1169)
# Getting the type of 'umath' (line 1169)
umath_141206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 39), 'umath', False)
# Obtaining the member 'absolute' of a type (line 1169)
absolute_141207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 39), umath_141206, 'absolute')
# Processing the call keyword arguments (line 1169)
kwargs_141208 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1169)
_MaskedUnaryOperation_141205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 17), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1169)
_MaskedUnaryOperation_call_result_141209 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 17), _MaskedUnaryOperation_141205, *[absolute_141207], **kwargs_141208)

# Assigning a type to the variable 'absolute' (line 1169)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 6), 'absolute', _MaskedUnaryOperation_call_result_141209)

# Assigning a Name to a Name (line 1169):
# Getting the type of 'absolute' (line 1169)
absolute_141210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 6), 'absolute')
# Assigning a type to the variable 'abs' (line 1169)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 0), 'abs', absolute_141210)

# Assigning a Call to a Name (line 1170):

# Assigning a Call to a Name (line 1170):

# Call to _MaskedUnaryOperation(...): (line 1170)
# Processing the call arguments (line 1170)
# Getting the type of 'angle' (line 1170)
angle_141212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 30), 'angle', False)
# Processing the call keyword arguments (line 1170)
kwargs_141213 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1170)
_MaskedUnaryOperation_141211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1170)
_MaskedUnaryOperation_call_result_141214 = invoke(stypy.reporting.localization.Localization(__file__, 1170, 8), _MaskedUnaryOperation_141211, *[angle_141212], **kwargs_141213)

# Assigning a type to the variable 'angle' (line 1170)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1170, 0), 'angle', _MaskedUnaryOperation_call_result_141214)

# Assigning a Call to a Name (line 1171):

# Assigning a Call to a Name (line 1171):

# Call to _MaskedUnaryOperation(...): (line 1171)
# Processing the call arguments (line 1171)
# Getting the type of 'umath' (line 1171)
umath_141216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 29), 'umath', False)
# Obtaining the member 'fabs' of a type (line 1171)
fabs_141217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 29), umath_141216, 'fabs')
# Processing the call keyword arguments (line 1171)
kwargs_141218 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1171)
_MaskedUnaryOperation_141215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 7), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1171)
_MaskedUnaryOperation_call_result_141219 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 7), _MaskedUnaryOperation_141215, *[fabs_141217], **kwargs_141218)

# Assigning a type to the variable 'fabs' (line 1171)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 0), 'fabs', _MaskedUnaryOperation_call_result_141219)

# Assigning a Call to a Name (line 1172):

# Assigning a Call to a Name (line 1172):

# Call to _MaskedUnaryOperation(...): (line 1172)
# Processing the call arguments (line 1172)
# Getting the type of 'umath' (line 1172)
umath_141221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 33), 'umath', False)
# Obtaining the member 'negative' of a type (line 1172)
negative_141222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 33), umath_141221, 'negative')
# Processing the call keyword arguments (line 1172)
kwargs_141223 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1172)
_MaskedUnaryOperation_141220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 11), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1172)
_MaskedUnaryOperation_call_result_141224 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 11), _MaskedUnaryOperation_141220, *[negative_141222], **kwargs_141223)

# Assigning a type to the variable 'negative' (line 1172)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 0), 'negative', _MaskedUnaryOperation_call_result_141224)

# Assigning a Call to a Name (line 1173):

# Assigning a Call to a Name (line 1173):

# Call to _MaskedUnaryOperation(...): (line 1173)
# Processing the call arguments (line 1173)
# Getting the type of 'umath' (line 1173)
umath_141226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 30), 'umath', False)
# Obtaining the member 'floor' of a type (line 1173)
floor_141227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 30), umath_141226, 'floor')
# Processing the call keyword arguments (line 1173)
kwargs_141228 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1173)
_MaskedUnaryOperation_141225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 8), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1173)
_MaskedUnaryOperation_call_result_141229 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 8), _MaskedUnaryOperation_141225, *[floor_141227], **kwargs_141228)

# Assigning a type to the variable 'floor' (line 1173)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 0), 'floor', _MaskedUnaryOperation_call_result_141229)

# Assigning a Call to a Name (line 1174):

# Assigning a Call to a Name (line 1174):

# Call to _MaskedUnaryOperation(...): (line 1174)
# Processing the call arguments (line 1174)
# Getting the type of 'umath' (line 1174)
umath_141231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 29), 'umath', False)
# Obtaining the member 'ceil' of a type (line 1174)
ceil_141232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 29), umath_141231, 'ceil')
# Processing the call keyword arguments (line 1174)
kwargs_141233 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1174)
_MaskedUnaryOperation_141230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 7), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1174)
_MaskedUnaryOperation_call_result_141234 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 7), _MaskedUnaryOperation_141230, *[ceil_141232], **kwargs_141233)

# Assigning a type to the variable 'ceil' (line 1174)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 0), 'ceil', _MaskedUnaryOperation_call_result_141234)

# Assigning a Call to a Name (line 1175):

# Assigning a Call to a Name (line 1175):

# Call to _MaskedUnaryOperation(...): (line 1175)
# Processing the call arguments (line 1175)
# Getting the type of 'np' (line 1175)
np_141236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 31), 'np', False)
# Obtaining the member 'round_' of a type (line 1175)
round__141237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 31), np_141236, 'round_')
# Processing the call keyword arguments (line 1175)
kwargs_141238 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1175)
_MaskedUnaryOperation_141235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 9), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1175)
_MaskedUnaryOperation_call_result_141239 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 9), _MaskedUnaryOperation_141235, *[round__141237], **kwargs_141238)

# Assigning a type to the variable 'around' (line 1175)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 0), 'around', _MaskedUnaryOperation_call_result_141239)

# Assigning a Call to a Name (line 1176):

# Assigning a Call to a Name (line 1176):

# Call to _MaskedUnaryOperation(...): (line 1176)
# Processing the call arguments (line 1176)
# Getting the type of 'umath' (line 1176)
umath_141241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 36), 'umath', False)
# Obtaining the member 'logical_not' of a type (line 1176)
logical_not_141242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 36), umath_141241, 'logical_not')
# Processing the call keyword arguments (line 1176)
kwargs_141243 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1176)
_MaskedUnaryOperation_141240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 14), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1176)
_MaskedUnaryOperation_call_result_141244 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 14), _MaskedUnaryOperation_141240, *[logical_not_141242], **kwargs_141243)

# Assigning a type to the variable 'logical_not' (line 1176)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 0), 'logical_not', _MaskedUnaryOperation_call_result_141244)

# Assigning a Call to a Name (line 1179):

# Assigning a Call to a Name (line 1179):

# Call to _MaskedUnaryOperation(...): (line 1179)
# Processing the call arguments (line 1179)
# Getting the type of 'umath' (line 1179)
umath_141246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 29), 'umath', False)
# Obtaining the member 'sqrt' of a type (line 1179)
sqrt_141247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 29), umath_141246, 'sqrt')
float_141248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 41), 'float')

# Call to _DomainGreaterEqual(...): (line 1180)
# Processing the call arguments (line 1180)
float_141250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1180, 49), 'float')
# Processing the call keyword arguments (line 1180)
kwargs_141251 = {}
# Getting the type of '_DomainGreaterEqual' (line 1180)
_DomainGreaterEqual_141249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 29), '_DomainGreaterEqual', False)
# Calling _DomainGreaterEqual(args, kwargs) (line 1180)
_DomainGreaterEqual_call_result_141252 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 29), _DomainGreaterEqual_141249, *[float_141250], **kwargs_141251)

# Processing the call keyword arguments (line 1179)
kwargs_141253 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1179)
_MaskedUnaryOperation_141245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 7), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1179)
_MaskedUnaryOperation_call_result_141254 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 7), _MaskedUnaryOperation_141245, *[sqrt_141247, float_141248, _DomainGreaterEqual_call_result_141252], **kwargs_141253)

# Assigning a type to the variable 'sqrt' (line 1179)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 0), 'sqrt', _MaskedUnaryOperation_call_result_141254)

# Assigning a Call to a Name (line 1181):

# Assigning a Call to a Name (line 1181):

# Call to _MaskedUnaryOperation(...): (line 1181)
# Processing the call arguments (line 1181)
# Getting the type of 'umath' (line 1181)
umath_141256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 28), 'umath', False)
# Obtaining the member 'log' of a type (line 1181)
log_141257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 28), umath_141256, 'log')
float_141258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, 39), 'float')

# Call to _DomainGreater(...): (line 1182)
# Processing the call arguments (line 1182)
float_141260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 43), 'float')
# Processing the call keyword arguments (line 1182)
kwargs_141261 = {}
# Getting the type of '_DomainGreater' (line 1182)
_DomainGreater_141259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 28), '_DomainGreater', False)
# Calling _DomainGreater(args, kwargs) (line 1182)
_DomainGreater_call_result_141262 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 28), _DomainGreater_141259, *[float_141260], **kwargs_141261)

# Processing the call keyword arguments (line 1181)
kwargs_141263 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1181)
_MaskedUnaryOperation_141255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 6), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1181)
_MaskedUnaryOperation_call_result_141264 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 6), _MaskedUnaryOperation_141255, *[log_141257, float_141258, _DomainGreater_call_result_141262], **kwargs_141263)

# Assigning a type to the variable 'log' (line 1181)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 0), 'log', _MaskedUnaryOperation_call_result_141264)

# Assigning a Call to a Name (line 1183):

# Assigning a Call to a Name (line 1183):

# Call to _MaskedUnaryOperation(...): (line 1183)
# Processing the call arguments (line 1183)
# Getting the type of 'umath' (line 1183)
umath_141266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 29), 'umath', False)
# Obtaining the member 'log2' of a type (line 1183)
log2_141267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 29), umath_141266, 'log2')
float_141268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 41), 'float')

# Call to _DomainGreater(...): (line 1184)
# Processing the call arguments (line 1184)
float_141270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 44), 'float')
# Processing the call keyword arguments (line 1184)
kwargs_141271 = {}
# Getting the type of '_DomainGreater' (line 1184)
_DomainGreater_141269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 29), '_DomainGreater', False)
# Calling _DomainGreater(args, kwargs) (line 1184)
_DomainGreater_call_result_141272 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 29), _DomainGreater_141269, *[float_141270], **kwargs_141271)

# Processing the call keyword arguments (line 1183)
kwargs_141273 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1183)
_MaskedUnaryOperation_141265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 7), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1183)
_MaskedUnaryOperation_call_result_141274 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 7), _MaskedUnaryOperation_141265, *[log2_141267, float_141268, _DomainGreater_call_result_141272], **kwargs_141273)

# Assigning a type to the variable 'log2' (line 1183)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 0), 'log2', _MaskedUnaryOperation_call_result_141274)

# Assigning a Call to a Name (line 1185):

# Assigning a Call to a Name (line 1185):

# Call to _MaskedUnaryOperation(...): (line 1185)
# Processing the call arguments (line 1185)
# Getting the type of 'umath' (line 1185)
umath_141276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 30), 'umath', False)
# Obtaining the member 'log10' of a type (line 1185)
log10_141277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 30), umath_141276, 'log10')
float_141278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1185, 43), 'float')

# Call to _DomainGreater(...): (line 1186)
# Processing the call arguments (line 1186)
float_141280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 45), 'float')
# Processing the call keyword arguments (line 1186)
kwargs_141281 = {}
# Getting the type of '_DomainGreater' (line 1186)
_DomainGreater_141279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 30), '_DomainGreater', False)
# Calling _DomainGreater(args, kwargs) (line 1186)
_DomainGreater_call_result_141282 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 30), _DomainGreater_141279, *[float_141280], **kwargs_141281)

# Processing the call keyword arguments (line 1185)
kwargs_141283 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1185)
_MaskedUnaryOperation_141275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 8), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1185)
_MaskedUnaryOperation_call_result_141284 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 8), _MaskedUnaryOperation_141275, *[log10_141277, float_141278, _DomainGreater_call_result_141282], **kwargs_141283)

# Assigning a type to the variable 'log10' (line 1185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 0), 'log10', _MaskedUnaryOperation_call_result_141284)

# Assigning a Call to a Name (line 1187):

# Assigning a Call to a Name (line 1187):

# Call to _MaskedUnaryOperation(...): (line 1187)
# Processing the call arguments (line 1187)
# Getting the type of 'umath' (line 1187)
umath_141286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 28), 'umath', False)
# Obtaining the member 'tan' of a type (line 1187)
tan_141287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 28), umath_141286, 'tan')
float_141288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 39), 'float')

# Call to _DomainTan(...): (line 1188)
# Processing the call arguments (line 1188)
float_141290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 39), 'float')
# Processing the call keyword arguments (line 1188)
kwargs_141291 = {}
# Getting the type of '_DomainTan' (line 1188)
_DomainTan_141289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 28), '_DomainTan', False)
# Calling _DomainTan(args, kwargs) (line 1188)
_DomainTan_call_result_141292 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 28), _DomainTan_141289, *[float_141290], **kwargs_141291)

# Processing the call keyword arguments (line 1187)
kwargs_141293 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1187)
_MaskedUnaryOperation_141285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 6), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1187)
_MaskedUnaryOperation_call_result_141294 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 6), _MaskedUnaryOperation_141285, *[tan_141287, float_141288, _DomainTan_call_result_141292], **kwargs_141293)

# Assigning a type to the variable 'tan' (line 1187)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 0), 'tan', _MaskedUnaryOperation_call_result_141294)

# Assigning a Call to a Name (line 1189):

# Assigning a Call to a Name (line 1189):

# Call to _MaskedUnaryOperation(...): (line 1189)
# Processing the call arguments (line 1189)
# Getting the type of 'umath' (line 1189)
umath_141296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 31), 'umath', False)
# Obtaining the member 'arcsin' of a type (line 1189)
arcsin_141297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 31), umath_141296, 'arcsin')
float_141298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 45), 'float')

# Call to _DomainCheckInterval(...): (line 1190)
# Processing the call arguments (line 1190)
float_141300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 52), 'float')
float_141301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 58), 'float')
# Processing the call keyword arguments (line 1190)
kwargs_141302 = {}
# Getting the type of '_DomainCheckInterval' (line 1190)
_DomainCheckInterval_141299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 31), '_DomainCheckInterval', False)
# Calling _DomainCheckInterval(args, kwargs) (line 1190)
_DomainCheckInterval_call_result_141303 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 31), _DomainCheckInterval_141299, *[float_141300, float_141301], **kwargs_141302)

# Processing the call keyword arguments (line 1189)
kwargs_141304 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1189)
_MaskedUnaryOperation_141295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 9), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1189)
_MaskedUnaryOperation_call_result_141305 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 9), _MaskedUnaryOperation_141295, *[arcsin_141297, float_141298, _DomainCheckInterval_call_result_141303], **kwargs_141304)

# Assigning a type to the variable 'arcsin' (line 1189)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 0), 'arcsin', _MaskedUnaryOperation_call_result_141305)

# Assigning a Call to a Name (line 1191):

# Assigning a Call to a Name (line 1191):

# Call to _MaskedUnaryOperation(...): (line 1191)
# Processing the call arguments (line 1191)
# Getting the type of 'umath' (line 1191)
umath_141307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 31), 'umath', False)
# Obtaining the member 'arccos' of a type (line 1191)
arccos_141308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 31), umath_141307, 'arccos')
float_141309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 45), 'float')

# Call to _DomainCheckInterval(...): (line 1192)
# Processing the call arguments (line 1192)
float_141311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 52), 'float')
float_141312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 58), 'float')
# Processing the call keyword arguments (line 1192)
kwargs_141313 = {}
# Getting the type of '_DomainCheckInterval' (line 1192)
_DomainCheckInterval_141310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 31), '_DomainCheckInterval', False)
# Calling _DomainCheckInterval(args, kwargs) (line 1192)
_DomainCheckInterval_call_result_141314 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 31), _DomainCheckInterval_141310, *[float_141311, float_141312], **kwargs_141313)

# Processing the call keyword arguments (line 1191)
kwargs_141315 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1191)
_MaskedUnaryOperation_141306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 9), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1191)
_MaskedUnaryOperation_call_result_141316 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 9), _MaskedUnaryOperation_141306, *[arccos_141308, float_141309, _DomainCheckInterval_call_result_141314], **kwargs_141315)

# Assigning a type to the variable 'arccos' (line 1191)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 0), 'arccos', _MaskedUnaryOperation_call_result_141316)

# Assigning a Call to a Name (line 1193):

# Assigning a Call to a Name (line 1193):

# Call to _MaskedUnaryOperation(...): (line 1193)
# Processing the call arguments (line 1193)
# Getting the type of 'umath' (line 1193)
umath_141318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 32), 'umath', False)
# Obtaining the member 'arccosh' of a type (line 1193)
arccosh_141319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 32), umath_141318, 'arccosh')
float_141320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 47), 'float')

# Call to _DomainGreaterEqual(...): (line 1194)
# Processing the call arguments (line 1194)
float_141322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 52), 'float')
# Processing the call keyword arguments (line 1194)
kwargs_141323 = {}
# Getting the type of '_DomainGreaterEqual' (line 1194)
_DomainGreaterEqual_141321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 32), '_DomainGreaterEqual', False)
# Calling _DomainGreaterEqual(args, kwargs) (line 1194)
_DomainGreaterEqual_call_result_141324 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 32), _DomainGreaterEqual_141321, *[float_141322], **kwargs_141323)

# Processing the call keyword arguments (line 1193)
kwargs_141325 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1193)
_MaskedUnaryOperation_141317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 10), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1193)
_MaskedUnaryOperation_call_result_141326 = invoke(stypy.reporting.localization.Localization(__file__, 1193, 10), _MaskedUnaryOperation_141317, *[arccosh_141319, float_141320, _DomainGreaterEqual_call_result_141324], **kwargs_141325)

# Assigning a type to the variable 'arccosh' (line 1193)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 0), 'arccosh', _MaskedUnaryOperation_call_result_141326)

# Assigning a Call to a Name (line 1195):

# Assigning a Call to a Name (line 1195):

# Call to _MaskedUnaryOperation(...): (line 1195)
# Processing the call arguments (line 1195)
# Getting the type of 'umath' (line 1195)
umath_141328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 32), 'umath', False)
# Obtaining the member 'arctanh' of a type (line 1195)
arctanh_141329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 32), umath_141328, 'arctanh')
float_141330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 47), 'float')

# Call to _DomainCheckInterval(...): (line 1196)
# Processing the call arguments (line 1196)
float_141332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 53), 'float')
float_141333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 60), 'float')
# Applying the binary operator '+' (line 1196)
result_add_141334 = python_operator(stypy.reporting.localization.Localization(__file__, 1196, 53), '+', float_141332, float_141333)

float_141335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 67), 'float')
float_141336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 73), 'float')
# Applying the binary operator '-' (line 1196)
result_sub_141337 = python_operator(stypy.reporting.localization.Localization(__file__, 1196, 67), '-', float_141335, float_141336)

# Processing the call keyword arguments (line 1196)
kwargs_141338 = {}
# Getting the type of '_DomainCheckInterval' (line 1196)
_DomainCheckInterval_141331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 32), '_DomainCheckInterval', False)
# Calling _DomainCheckInterval(args, kwargs) (line 1196)
_DomainCheckInterval_call_result_141339 = invoke(stypy.reporting.localization.Localization(__file__, 1196, 32), _DomainCheckInterval_141331, *[result_add_141334, result_sub_141337], **kwargs_141338)

# Processing the call keyword arguments (line 1195)
kwargs_141340 = {}
# Getting the type of '_MaskedUnaryOperation' (line 1195)
_MaskedUnaryOperation_141327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 10), '_MaskedUnaryOperation', False)
# Calling _MaskedUnaryOperation(args, kwargs) (line 1195)
_MaskedUnaryOperation_call_result_141341 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 10), _MaskedUnaryOperation_141327, *[arctanh_141329, float_141330, _DomainCheckInterval_call_result_141339], **kwargs_141340)

# Assigning a type to the variable 'arctanh' (line 1195)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 0), 'arctanh', _MaskedUnaryOperation_call_result_141341)

# Assigning a Call to a Name (line 1199):

# Assigning a Call to a Name (line 1199):

# Call to _MaskedBinaryOperation(...): (line 1199)
# Processing the call arguments (line 1199)
# Getting the type of 'umath' (line 1199)
umath_141343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 29), 'umath', False)
# Obtaining the member 'add' of a type (line 1199)
add_141344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 29), umath_141343, 'add')
# Processing the call keyword arguments (line 1199)
kwargs_141345 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1199)
_MaskedBinaryOperation_141342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 6), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1199)
_MaskedBinaryOperation_call_result_141346 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 6), _MaskedBinaryOperation_141342, *[add_141344], **kwargs_141345)

# Assigning a type to the variable 'add' (line 1199)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 0), 'add', _MaskedBinaryOperation_call_result_141346)

# Assigning a Call to a Name (line 1200):

# Assigning a Call to a Name (line 1200):

# Call to _MaskedBinaryOperation(...): (line 1200)
# Processing the call arguments (line 1200)
# Getting the type of 'umath' (line 1200)
umath_141348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 34), 'umath', False)
# Obtaining the member 'subtract' of a type (line 1200)
subtract_141349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 34), umath_141348, 'subtract')
# Processing the call keyword arguments (line 1200)
kwargs_141350 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1200)
_MaskedBinaryOperation_141347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 11), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1200)
_MaskedBinaryOperation_call_result_141351 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 11), _MaskedBinaryOperation_141347, *[subtract_141349], **kwargs_141350)

# Assigning a type to the variable 'subtract' (line 1200)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 0), 'subtract', _MaskedBinaryOperation_call_result_141351)

# Assigning a Call to a Name (line 1201):

# Assigning a Call to a Name (line 1201):

# Call to _MaskedBinaryOperation(...): (line 1201)
# Processing the call arguments (line 1201)
# Getting the type of 'umath' (line 1201)
umath_141353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 34), 'umath', False)
# Obtaining the member 'multiply' of a type (line 1201)
multiply_141354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 34), umath_141353, 'multiply')
int_141355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 50), 'int')
int_141356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 53), 'int')
# Processing the call keyword arguments (line 1201)
kwargs_141357 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1201)
_MaskedBinaryOperation_141352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 11), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1201)
_MaskedBinaryOperation_call_result_141358 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 11), _MaskedBinaryOperation_141352, *[multiply_141354, int_141355, int_141356], **kwargs_141357)

# Assigning a type to the variable 'multiply' (line 1201)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 0), 'multiply', _MaskedBinaryOperation_call_result_141358)

# Assigning a Call to a Name (line 1202):

# Assigning a Call to a Name (line 1202):

# Call to _MaskedBinaryOperation(...): (line 1202)
# Processing the call arguments (line 1202)
# Getting the type of 'umath' (line 1202)
umath_141360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 33), 'umath', False)
# Obtaining the member 'arctan2' of a type (line 1202)
arctan2_141361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 33), umath_141360, 'arctan2')
float_141362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 48), 'float')
float_141363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 53), 'float')
# Processing the call keyword arguments (line 1202)
kwargs_141364 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1202)
_MaskedBinaryOperation_141359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 10), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1202)
_MaskedBinaryOperation_call_result_141365 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 10), _MaskedBinaryOperation_141359, *[arctan2_141361, float_141362, float_141363], **kwargs_141364)

# Assigning a type to the variable 'arctan2' (line 1202)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 0), 'arctan2', _MaskedBinaryOperation_call_result_141365)

# Assigning a Call to a Name (line 1203):

# Assigning a Call to a Name (line 1203):

# Call to _MaskedBinaryOperation(...): (line 1203)
# Processing the call arguments (line 1203)
# Getting the type of 'umath' (line 1203)
umath_141367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 31), 'umath', False)
# Obtaining the member 'equal' of a type (line 1203)
equal_141368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 31), umath_141367, 'equal')
# Processing the call keyword arguments (line 1203)
kwargs_141369 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1203)
_MaskedBinaryOperation_141366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 8), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1203)
_MaskedBinaryOperation_call_result_141370 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 8), _MaskedBinaryOperation_141366, *[equal_141368], **kwargs_141369)

# Assigning a type to the variable 'equal' (line 1203)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 0), 'equal', _MaskedBinaryOperation_call_result_141370)

# Assigning a Name to a Attribute (line 1204):

# Assigning a Name to a Attribute (line 1204):
# Getting the type of 'None' (line 1204)
None_141371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 15), 'None')
# Getting the type of 'equal' (line 1204)
equal_141372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 0), 'equal')
# Setting the type of the member 'reduce' of a type (line 1204)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 0), equal_141372, 'reduce', None_141371)

# Assigning a Call to a Name (line 1205):

# Assigning a Call to a Name (line 1205):

# Call to _MaskedBinaryOperation(...): (line 1205)
# Processing the call arguments (line 1205)
# Getting the type of 'umath' (line 1205)
umath_141374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 35), 'umath', False)
# Obtaining the member 'not_equal' of a type (line 1205)
not_equal_141375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 35), umath_141374, 'not_equal')
# Processing the call keyword arguments (line 1205)
kwargs_141376 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1205)
_MaskedBinaryOperation_141373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 12), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1205)
_MaskedBinaryOperation_call_result_141377 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 12), _MaskedBinaryOperation_141373, *[not_equal_141375], **kwargs_141376)

# Assigning a type to the variable 'not_equal' (line 1205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 0), 'not_equal', _MaskedBinaryOperation_call_result_141377)

# Assigning a Name to a Attribute (line 1206):

# Assigning a Name to a Attribute (line 1206):
# Getting the type of 'None' (line 1206)
None_141378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 19), 'None')
# Getting the type of 'not_equal' (line 1206)
not_equal_141379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 0), 'not_equal')
# Setting the type of the member 'reduce' of a type (line 1206)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 0), not_equal_141379, 'reduce', None_141378)

# Assigning a Call to a Name (line 1207):

# Assigning a Call to a Name (line 1207):

# Call to _MaskedBinaryOperation(...): (line 1207)
# Processing the call arguments (line 1207)
# Getting the type of 'umath' (line 1207)
umath_141381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 36), 'umath', False)
# Obtaining the member 'less_equal' of a type (line 1207)
less_equal_141382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 36), umath_141381, 'less_equal')
# Processing the call keyword arguments (line 1207)
kwargs_141383 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1207)
_MaskedBinaryOperation_141380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 13), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1207)
_MaskedBinaryOperation_call_result_141384 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 13), _MaskedBinaryOperation_141380, *[less_equal_141382], **kwargs_141383)

# Assigning a type to the variable 'less_equal' (line 1207)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 0), 'less_equal', _MaskedBinaryOperation_call_result_141384)

# Assigning a Name to a Attribute (line 1208):

# Assigning a Name to a Attribute (line 1208):
# Getting the type of 'None' (line 1208)
None_141385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 20), 'None')
# Getting the type of 'less_equal' (line 1208)
less_equal_141386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 0), 'less_equal')
# Setting the type of the member 'reduce' of a type (line 1208)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 0), less_equal_141386, 'reduce', None_141385)

# Assigning a Call to a Name (line 1209):

# Assigning a Call to a Name (line 1209):

# Call to _MaskedBinaryOperation(...): (line 1209)
# Processing the call arguments (line 1209)
# Getting the type of 'umath' (line 1209)
umath_141388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 39), 'umath', False)
# Obtaining the member 'greater_equal' of a type (line 1209)
greater_equal_141389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1209, 39), umath_141388, 'greater_equal')
# Processing the call keyword arguments (line 1209)
kwargs_141390 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1209)
_MaskedBinaryOperation_141387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 16), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1209)
_MaskedBinaryOperation_call_result_141391 = invoke(stypy.reporting.localization.Localization(__file__, 1209, 16), _MaskedBinaryOperation_141387, *[greater_equal_141389], **kwargs_141390)

# Assigning a type to the variable 'greater_equal' (line 1209)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 0), 'greater_equal', _MaskedBinaryOperation_call_result_141391)

# Assigning a Name to a Attribute (line 1210):

# Assigning a Name to a Attribute (line 1210):
# Getting the type of 'None' (line 1210)
None_141392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 23), 'None')
# Getting the type of 'greater_equal' (line 1210)
greater_equal_141393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 0), 'greater_equal')
# Setting the type of the member 'reduce' of a type (line 1210)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 0), greater_equal_141393, 'reduce', None_141392)

# Assigning a Call to a Name (line 1211):

# Assigning a Call to a Name (line 1211):

# Call to _MaskedBinaryOperation(...): (line 1211)
# Processing the call arguments (line 1211)
# Getting the type of 'umath' (line 1211)
umath_141395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 30), 'umath', False)
# Obtaining the member 'less' of a type (line 1211)
less_141396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 30), umath_141395, 'less')
# Processing the call keyword arguments (line 1211)
kwargs_141397 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1211)
_MaskedBinaryOperation_141394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 7), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1211)
_MaskedBinaryOperation_call_result_141398 = invoke(stypy.reporting.localization.Localization(__file__, 1211, 7), _MaskedBinaryOperation_141394, *[less_141396], **kwargs_141397)

# Assigning a type to the variable 'less' (line 1211)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 0), 'less', _MaskedBinaryOperation_call_result_141398)

# Assigning a Name to a Attribute (line 1212):

# Assigning a Name to a Attribute (line 1212):
# Getting the type of 'None' (line 1212)
None_141399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 14), 'None')
# Getting the type of 'less' (line 1212)
less_141400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 0), 'less')
# Setting the type of the member 'reduce' of a type (line 1212)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1212, 0), less_141400, 'reduce', None_141399)

# Assigning a Call to a Name (line 1213):

# Assigning a Call to a Name (line 1213):

# Call to _MaskedBinaryOperation(...): (line 1213)
# Processing the call arguments (line 1213)
# Getting the type of 'umath' (line 1213)
umath_141402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 33), 'umath', False)
# Obtaining the member 'greater' of a type (line 1213)
greater_141403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 33), umath_141402, 'greater')
# Processing the call keyword arguments (line 1213)
kwargs_141404 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1213)
_MaskedBinaryOperation_141401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 10), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1213)
_MaskedBinaryOperation_call_result_141405 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 10), _MaskedBinaryOperation_141401, *[greater_141403], **kwargs_141404)

# Assigning a type to the variable 'greater' (line 1213)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 0), 'greater', _MaskedBinaryOperation_call_result_141405)

# Assigning a Name to a Attribute (line 1214):

# Assigning a Name to a Attribute (line 1214):
# Getting the type of 'None' (line 1214)
None_141406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 17), 'None')
# Getting the type of 'greater' (line 1214)
greater_141407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 0), 'greater')
# Setting the type of the member 'reduce' of a type (line 1214)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 0), greater_141407, 'reduce', None_141406)

# Assigning a Call to a Name (line 1215):

# Assigning a Call to a Name (line 1215):

# Call to _MaskedBinaryOperation(...): (line 1215)
# Processing the call arguments (line 1215)
# Getting the type of 'umath' (line 1215)
umath_141409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 37), 'umath', False)
# Obtaining the member 'logical_and' of a type (line 1215)
logical_and_141410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 37), umath_141409, 'logical_and')
# Processing the call keyword arguments (line 1215)
kwargs_141411 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1215)
_MaskedBinaryOperation_141408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 14), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1215)
_MaskedBinaryOperation_call_result_141412 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 14), _MaskedBinaryOperation_141408, *[logical_and_141410], **kwargs_141411)

# Assigning a type to the variable 'logical_and' (line 1215)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 0), 'logical_and', _MaskedBinaryOperation_call_result_141412)

# Assigning a Attribute to a Name (line 1216):

# Assigning a Attribute to a Name (line 1216):

# Call to _MaskedBinaryOperation(...): (line 1216)
# Processing the call arguments (line 1216)
# Getting the type of 'umath' (line 1216)
umath_141414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 33), 'umath', False)
# Obtaining the member 'logical_and' of a type (line 1216)
logical_and_141415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 33), umath_141414, 'logical_and')
int_141416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 52), 'int')
int_141417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 55), 'int')
# Processing the call keyword arguments (line 1216)
kwargs_141418 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1216)
_MaskedBinaryOperation_141413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 10), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1216)
_MaskedBinaryOperation_call_result_141419 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 10), _MaskedBinaryOperation_141413, *[logical_and_141415, int_141416, int_141417], **kwargs_141418)

# Obtaining the member 'reduce' of a type (line 1216)
reduce_141420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 10), _MaskedBinaryOperation_call_result_141419, 'reduce')
# Assigning a type to the variable 'alltrue' (line 1216)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 0), 'alltrue', reduce_141420)

# Assigning a Call to a Name (line 1217):

# Assigning a Call to a Name (line 1217):

# Call to _MaskedBinaryOperation(...): (line 1217)
# Processing the call arguments (line 1217)
# Getting the type of 'umath' (line 1217)
umath_141422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 36), 'umath', False)
# Obtaining the member 'logical_or' of a type (line 1217)
logical_or_141423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 36), umath_141422, 'logical_or')
# Processing the call keyword arguments (line 1217)
kwargs_141424 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1217)
_MaskedBinaryOperation_141421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 13), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1217)
_MaskedBinaryOperation_call_result_141425 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 13), _MaskedBinaryOperation_141421, *[logical_or_141423], **kwargs_141424)

# Assigning a type to the variable 'logical_or' (line 1217)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 0), 'logical_or', _MaskedBinaryOperation_call_result_141425)

# Assigning a Attribute to a Name (line 1218):

# Assigning a Attribute to a Name (line 1218):
# Getting the type of 'logical_or' (line 1218)
logical_or_141426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 11), 'logical_or')
# Obtaining the member 'reduce' of a type (line 1218)
reduce_141427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 11), logical_or_141426, 'reduce')
# Assigning a type to the variable 'sometrue' (line 1218)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 0), 'sometrue', reduce_141427)

# Assigning a Call to a Name (line 1219):

# Assigning a Call to a Name (line 1219):

# Call to _MaskedBinaryOperation(...): (line 1219)
# Processing the call arguments (line 1219)
# Getting the type of 'umath' (line 1219)
umath_141429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 37), 'umath', False)
# Obtaining the member 'logical_xor' of a type (line 1219)
logical_xor_141430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 37), umath_141429, 'logical_xor')
# Processing the call keyword arguments (line 1219)
kwargs_141431 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1219)
_MaskedBinaryOperation_141428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 14), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1219)
_MaskedBinaryOperation_call_result_141432 = invoke(stypy.reporting.localization.Localization(__file__, 1219, 14), _MaskedBinaryOperation_141428, *[logical_xor_141430], **kwargs_141431)

# Assigning a type to the variable 'logical_xor' (line 1219)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1219, 0), 'logical_xor', _MaskedBinaryOperation_call_result_141432)

# Assigning a Call to a Name (line 1220):

# Assigning a Call to a Name (line 1220):

# Call to _MaskedBinaryOperation(...): (line 1220)
# Processing the call arguments (line 1220)
# Getting the type of 'umath' (line 1220)
umath_141434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 37), 'umath', False)
# Obtaining the member 'bitwise_and' of a type (line 1220)
bitwise_and_141435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 37), umath_141434, 'bitwise_and')
# Processing the call keyword arguments (line 1220)
kwargs_141436 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1220)
_MaskedBinaryOperation_141433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 14), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1220)
_MaskedBinaryOperation_call_result_141437 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 14), _MaskedBinaryOperation_141433, *[bitwise_and_141435], **kwargs_141436)

# Assigning a type to the variable 'bitwise_and' (line 1220)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 0), 'bitwise_and', _MaskedBinaryOperation_call_result_141437)

# Assigning a Call to a Name (line 1221):

# Assigning a Call to a Name (line 1221):

# Call to _MaskedBinaryOperation(...): (line 1221)
# Processing the call arguments (line 1221)
# Getting the type of 'umath' (line 1221)
umath_141439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 36), 'umath', False)
# Obtaining the member 'bitwise_or' of a type (line 1221)
bitwise_or_141440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 36), umath_141439, 'bitwise_or')
# Processing the call keyword arguments (line 1221)
kwargs_141441 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1221)
_MaskedBinaryOperation_141438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 13), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1221)
_MaskedBinaryOperation_call_result_141442 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 13), _MaskedBinaryOperation_141438, *[bitwise_or_141440], **kwargs_141441)

# Assigning a type to the variable 'bitwise_or' (line 1221)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 0), 'bitwise_or', _MaskedBinaryOperation_call_result_141442)

# Assigning a Call to a Name (line 1222):

# Assigning a Call to a Name (line 1222):

# Call to _MaskedBinaryOperation(...): (line 1222)
# Processing the call arguments (line 1222)
# Getting the type of 'umath' (line 1222)
umath_141444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 37), 'umath', False)
# Obtaining the member 'bitwise_xor' of a type (line 1222)
bitwise_xor_141445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 37), umath_141444, 'bitwise_xor')
# Processing the call keyword arguments (line 1222)
kwargs_141446 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1222)
_MaskedBinaryOperation_141443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 14), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1222)
_MaskedBinaryOperation_call_result_141447 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 14), _MaskedBinaryOperation_141443, *[bitwise_xor_141445], **kwargs_141446)

# Assigning a type to the variable 'bitwise_xor' (line 1222)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 0), 'bitwise_xor', _MaskedBinaryOperation_call_result_141447)

# Assigning a Call to a Name (line 1223):

# Assigning a Call to a Name (line 1223):

# Call to _MaskedBinaryOperation(...): (line 1223)
# Processing the call arguments (line 1223)
# Getting the type of 'umath' (line 1223)
umath_141449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 31), 'umath', False)
# Obtaining the member 'hypot' of a type (line 1223)
hypot_141450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 31), umath_141449, 'hypot')
# Processing the call keyword arguments (line 1223)
kwargs_141451 = {}
# Getting the type of '_MaskedBinaryOperation' (line 1223)
_MaskedBinaryOperation_141448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), '_MaskedBinaryOperation', False)
# Calling _MaskedBinaryOperation(args, kwargs) (line 1223)
_MaskedBinaryOperation_call_result_141452 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 8), _MaskedBinaryOperation_141448, *[hypot_141450], **kwargs_141451)

# Assigning a type to the variable 'hypot' (line 1223)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 0), 'hypot', _MaskedBinaryOperation_call_result_141452)

# Assigning a Call to a Name (line 1226):

# Assigning a Call to a Name (line 1226):

# Call to _DomainedBinaryOperation(...): (line 1226)
# Processing the call arguments (line 1226)
# Getting the type of 'umath' (line 1226)
umath_141454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 34), 'umath', False)
# Obtaining the member 'divide' of a type (line 1226)
divide_141455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 34), umath_141454, 'divide')

# Call to _DomainSafeDivide(...): (line 1226)
# Processing the call keyword arguments (line 1226)
kwargs_141457 = {}
# Getting the type of '_DomainSafeDivide' (line 1226)
_DomainSafeDivide_141456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 48), '_DomainSafeDivide', False)
# Calling _DomainSafeDivide(args, kwargs) (line 1226)
_DomainSafeDivide_call_result_141458 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 48), _DomainSafeDivide_141456, *[], **kwargs_141457)

int_141459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 69), 'int')
int_141460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 72), 'int')
# Processing the call keyword arguments (line 1226)
kwargs_141461 = {}
# Getting the type of '_DomainedBinaryOperation' (line 1226)
_DomainedBinaryOperation_141453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 9), '_DomainedBinaryOperation', False)
# Calling _DomainedBinaryOperation(args, kwargs) (line 1226)
_DomainedBinaryOperation_call_result_141462 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 9), _DomainedBinaryOperation_141453, *[divide_141455, _DomainSafeDivide_call_result_141458, int_141459, int_141460], **kwargs_141461)

# Assigning a type to the variable 'divide' (line 1226)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 0), 'divide', _DomainedBinaryOperation_call_result_141462)

# Assigning a Call to a Name (line 1227):

# Assigning a Call to a Name (line 1227):

# Call to _DomainedBinaryOperation(...): (line 1227)
# Processing the call arguments (line 1227)
# Getting the type of 'umath' (line 1227)
umath_141464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 39), 'umath', False)
# Obtaining the member 'true_divide' of a type (line 1227)
true_divide_141465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 39), umath_141464, 'true_divide')

# Call to _DomainSafeDivide(...): (line 1228)
# Processing the call keyword arguments (line 1228)
kwargs_141467 = {}
# Getting the type of '_DomainSafeDivide' (line 1228)
_DomainSafeDivide_141466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 39), '_DomainSafeDivide', False)
# Calling _DomainSafeDivide(args, kwargs) (line 1228)
_DomainSafeDivide_call_result_141468 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 39), _DomainSafeDivide_141466, *[], **kwargs_141467)

int_141469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 60), 'int')
int_141470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 63), 'int')
# Processing the call keyword arguments (line 1227)
kwargs_141471 = {}
# Getting the type of '_DomainedBinaryOperation' (line 1227)
_DomainedBinaryOperation_141463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 14), '_DomainedBinaryOperation', False)
# Calling _DomainedBinaryOperation(args, kwargs) (line 1227)
_DomainedBinaryOperation_call_result_141472 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 14), _DomainedBinaryOperation_141463, *[true_divide_141465, _DomainSafeDivide_call_result_141468, int_141469, int_141470], **kwargs_141471)

# Assigning a type to the variable 'true_divide' (line 1227)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 0), 'true_divide', _DomainedBinaryOperation_call_result_141472)

# Assigning a Call to a Name (line 1229):

# Assigning a Call to a Name (line 1229):

# Call to _DomainedBinaryOperation(...): (line 1229)
# Processing the call arguments (line 1229)
# Getting the type of 'umath' (line 1229)
umath_141474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 40), 'umath', False)
# Obtaining the member 'floor_divide' of a type (line 1229)
floor_divide_141475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 40), umath_141474, 'floor_divide')

# Call to _DomainSafeDivide(...): (line 1230)
# Processing the call keyword arguments (line 1230)
kwargs_141477 = {}
# Getting the type of '_DomainSafeDivide' (line 1230)
_DomainSafeDivide_141476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 40), '_DomainSafeDivide', False)
# Calling _DomainSafeDivide(args, kwargs) (line 1230)
_DomainSafeDivide_call_result_141478 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 40), _DomainSafeDivide_141476, *[], **kwargs_141477)

int_141479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 61), 'int')
int_141480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 64), 'int')
# Processing the call keyword arguments (line 1229)
kwargs_141481 = {}
# Getting the type of '_DomainedBinaryOperation' (line 1229)
_DomainedBinaryOperation_141473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 15), '_DomainedBinaryOperation', False)
# Calling _DomainedBinaryOperation(args, kwargs) (line 1229)
_DomainedBinaryOperation_call_result_141482 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 15), _DomainedBinaryOperation_141473, *[floor_divide_141475, _DomainSafeDivide_call_result_141478, int_141479, int_141480], **kwargs_141481)

# Assigning a type to the variable 'floor_divide' (line 1229)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 0), 'floor_divide', _DomainedBinaryOperation_call_result_141482)

# Assigning a Call to a Name (line 1231):

# Assigning a Call to a Name (line 1231):

# Call to _DomainedBinaryOperation(...): (line 1231)
# Processing the call arguments (line 1231)
# Getting the type of 'umath' (line 1231)
umath_141484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 37), 'umath', False)
# Obtaining the member 'remainder' of a type (line 1231)
remainder_141485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 37), umath_141484, 'remainder')

# Call to _DomainSafeDivide(...): (line 1232)
# Processing the call keyword arguments (line 1232)
kwargs_141487 = {}
# Getting the type of '_DomainSafeDivide' (line 1232)
_DomainSafeDivide_141486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 37), '_DomainSafeDivide', False)
# Calling _DomainSafeDivide(args, kwargs) (line 1232)
_DomainSafeDivide_call_result_141488 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 37), _DomainSafeDivide_141486, *[], **kwargs_141487)

int_141489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 58), 'int')
int_141490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 61), 'int')
# Processing the call keyword arguments (line 1231)
kwargs_141491 = {}
# Getting the type of '_DomainedBinaryOperation' (line 1231)
_DomainedBinaryOperation_141483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 12), '_DomainedBinaryOperation', False)
# Calling _DomainedBinaryOperation(args, kwargs) (line 1231)
_DomainedBinaryOperation_call_result_141492 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 12), _DomainedBinaryOperation_141483, *[remainder_141485, _DomainSafeDivide_call_result_141488, int_141489, int_141490], **kwargs_141491)

# Assigning a type to the variable 'remainder' (line 1231)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 0), 'remainder', _DomainedBinaryOperation_call_result_141492)

# Assigning a Call to a Name (line 1233):

# Assigning a Call to a Name (line 1233):

# Call to _DomainedBinaryOperation(...): (line 1233)
# Processing the call arguments (line 1233)
# Getting the type of 'umath' (line 1233)
umath_141494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 32), 'umath', False)
# Obtaining the member 'fmod' of a type (line 1233)
fmod_141495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 32), umath_141494, 'fmod')

# Call to _DomainSafeDivide(...): (line 1233)
# Processing the call keyword arguments (line 1233)
kwargs_141497 = {}
# Getting the type of '_DomainSafeDivide' (line 1233)
_DomainSafeDivide_141496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 44), '_DomainSafeDivide', False)
# Calling _DomainSafeDivide(args, kwargs) (line 1233)
_DomainSafeDivide_call_result_141498 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 44), _DomainSafeDivide_141496, *[], **kwargs_141497)

int_141499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1233, 65), 'int')
int_141500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1233, 68), 'int')
# Processing the call keyword arguments (line 1233)
kwargs_141501 = {}
# Getting the type of '_DomainedBinaryOperation' (line 1233)
_DomainedBinaryOperation_141493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 7), '_DomainedBinaryOperation', False)
# Calling _DomainedBinaryOperation(args, kwargs) (line 1233)
_DomainedBinaryOperation_call_result_141502 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 7), _DomainedBinaryOperation_141493, *[fmod_141495, _DomainSafeDivide_call_result_141498, int_141499, int_141500], **kwargs_141501)

# Assigning a type to the variable 'fmod' (line 1233)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 0), 'fmod', _DomainedBinaryOperation_call_result_141502)

# Assigning a Call to a Name (line 1234):

# Assigning a Call to a Name (line 1234):

# Call to _DomainedBinaryOperation(...): (line 1234)
# Processing the call arguments (line 1234)
# Getting the type of 'umath' (line 1234)
umath_141504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 31), 'umath', False)
# Obtaining the member 'mod' of a type (line 1234)
mod_141505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 31), umath_141504, 'mod')

# Call to _DomainSafeDivide(...): (line 1234)
# Processing the call keyword arguments (line 1234)
kwargs_141507 = {}
# Getting the type of '_DomainSafeDivide' (line 1234)
_DomainSafeDivide_141506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 42), '_DomainSafeDivide', False)
# Calling _DomainSafeDivide(args, kwargs) (line 1234)
_DomainSafeDivide_call_result_141508 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 42), _DomainSafeDivide_141506, *[], **kwargs_141507)

int_141509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 63), 'int')
int_141510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 66), 'int')
# Processing the call keyword arguments (line 1234)
kwargs_141511 = {}
# Getting the type of '_DomainedBinaryOperation' (line 1234)
_DomainedBinaryOperation_141503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 6), '_DomainedBinaryOperation', False)
# Calling _DomainedBinaryOperation(args, kwargs) (line 1234)
_DomainedBinaryOperation_call_result_141512 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 6), _DomainedBinaryOperation_141503, *[mod_141505, _DomainSafeDivide_call_result_141508, int_141509, int_141510], **kwargs_141511)

# Assigning a type to the variable 'mod' (line 1234)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 0), 'mod', _DomainedBinaryOperation_call_result_141512)

@norecursion
def _recursive_make_descr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'bool_' (line 1242)
    bool__141513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 44), 'bool_')
    defaults = [bool__141513]
    # Create a new context for function '_recursive_make_descr'
    module_type_store = module_type_store.open_function_context('_recursive_make_descr', 1242, 0, False)
    
    # Passed parameters checking function
    _recursive_make_descr.stypy_localization = localization
    _recursive_make_descr.stypy_type_of_self = None
    _recursive_make_descr.stypy_type_store = module_type_store
    _recursive_make_descr.stypy_function_name = '_recursive_make_descr'
    _recursive_make_descr.stypy_param_names_list = ['datatype', 'newtype']
    _recursive_make_descr.stypy_varargs_param_name = None
    _recursive_make_descr.stypy_kwargs_param_name = None
    _recursive_make_descr.stypy_call_defaults = defaults
    _recursive_make_descr.stypy_call_varargs = varargs
    _recursive_make_descr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_recursive_make_descr', ['datatype', 'newtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_recursive_make_descr', localization, ['datatype', 'newtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_recursive_make_descr(...)' code ##################

    str_141514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 4), 'str', 'Private function allowing recursion in make_descr.')
    
    # Getting the type of 'datatype' (line 1245)
    datatype_141515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 7), 'datatype')
    # Obtaining the member 'names' of a type (line 1245)
    names_141516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 7), datatype_141515, 'names')
    # Testing the type of an if condition (line 1245)
    if_condition_141517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1245, 4), names_141516)
    # Assigning a type to the variable 'if_condition_141517' (line 1245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 4), 'if_condition_141517', if_condition_141517)
    # SSA begins for if statement (line 1245)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 1246):
    
    # Assigning a List to a Name (line 1246):
    
    # Obtaining an instance of the builtin type 'list' (line 1246)
    list_141518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1246)
    
    # Assigning a type to the variable 'descr' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 8), 'descr', list_141518)
    
    # Getting the type of 'datatype' (line 1247)
    datatype_141519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 20), 'datatype')
    # Obtaining the member 'names' of a type (line 1247)
    names_141520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1247, 20), datatype_141519, 'names')
    # Testing the type of a for loop iterable (line 1247)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1247, 8), names_141520)
    # Getting the type of the for loop variable (line 1247)
    for_loop_var_141521 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1247, 8), names_141520)
    # Assigning a type to the variable 'name' (line 1247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 8), 'name', for_loop_var_141521)
    # SSA begins for a for statement (line 1247)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 1248):
    
    # Assigning a Subscript to a Name (line 1248):
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 1248)
    name_141522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 36), 'name')
    # Getting the type of 'datatype' (line 1248)
    datatype_141523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 20), 'datatype')
    # Obtaining the member 'fields' of a type (line 1248)
    fields_141524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 20), datatype_141523, 'fields')
    # Obtaining the member '__getitem__' of a type (line 1248)
    getitem___141525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 20), fields_141524, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1248)
    subscript_call_result_141526 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 20), getitem___141525, name_141522)
    
    # Assigning a type to the variable 'field' (line 1248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 12), 'field', subscript_call_result_141526)
    
    
    
    # Call to len(...): (line 1249)
    # Processing the call arguments (line 1249)
    # Getting the type of 'field' (line 1249)
    field_141528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 19), 'field', False)
    # Processing the call keyword arguments (line 1249)
    kwargs_141529 = {}
    # Getting the type of 'len' (line 1249)
    len_141527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 15), 'len', False)
    # Calling len(args, kwargs) (line 1249)
    len_call_result_141530 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 15), len_141527, *[field_141528], **kwargs_141529)
    
    int_141531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 29), 'int')
    # Applying the binary operator '==' (line 1249)
    result_eq_141532 = python_operator(stypy.reporting.localization.Localization(__file__, 1249, 15), '==', len_call_result_141530, int_141531)
    
    # Testing the type of an if condition (line 1249)
    if_condition_141533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1249, 12), result_eq_141532)
    # Assigning a type to the variable 'if_condition_141533' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 12), 'if_condition_141533', if_condition_141533)
    # SSA begins for if statement (line 1249)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1251):
    
    # Assigning a Tuple to a Name (line 1251):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1251)
    tuple_141534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1251)
    # Adding element type (line 1251)
    
    # Obtaining the type of the subscript
    int_141535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, 30), 'int')
    # Getting the type of 'field' (line 1251)
    field_141536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 24), 'field')
    # Obtaining the member '__getitem__' of a type (line 1251)
    getitem___141537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 24), field_141536, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1251)
    subscript_call_result_141538 = invoke(stypy.reporting.localization.Localization(__file__, 1251, 24), getitem___141537, int_141535)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1251, 24), tuple_141534, subscript_call_result_141538)
    # Adding element type (line 1251)
    # Getting the type of 'name' (line 1251)
    name_141539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 35), 'name')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1251, 24), tuple_141534, name_141539)
    
    # Assigning a type to the variable 'name' (line 1251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 16), 'name', tuple_141534)
    # SSA join for if statement (line 1249)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 1252)
    # Processing the call arguments (line 1252)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1252)
    tuple_141542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1252)
    # Adding element type (line 1252)
    # Getting the type of 'name' (line 1252)
    name_141543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 26), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1252, 26), tuple_141542, name_141543)
    # Adding element type (line 1252)
    
    # Call to _recursive_make_descr(...): (line 1252)
    # Processing the call arguments (line 1252)
    
    # Obtaining the type of the subscript
    int_141545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 60), 'int')
    # Getting the type of 'field' (line 1252)
    field_141546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 54), 'field', False)
    # Obtaining the member '__getitem__' of a type (line 1252)
    getitem___141547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 54), field_141546, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1252)
    subscript_call_result_141548 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 54), getitem___141547, int_141545)
    
    # Getting the type of 'newtype' (line 1252)
    newtype_141549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 64), 'newtype', False)
    # Processing the call keyword arguments (line 1252)
    kwargs_141550 = {}
    # Getting the type of '_recursive_make_descr' (line 1252)
    _recursive_make_descr_141544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 32), '_recursive_make_descr', False)
    # Calling _recursive_make_descr(args, kwargs) (line 1252)
    _recursive_make_descr_call_result_141551 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 32), _recursive_make_descr_141544, *[subscript_call_result_141548, newtype_141549], **kwargs_141550)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1252, 26), tuple_141542, _recursive_make_descr_call_result_141551)
    
    # Processing the call keyword arguments (line 1252)
    kwargs_141552 = {}
    # Getting the type of 'descr' (line 1252)
    descr_141540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 12), 'descr', False)
    # Obtaining the member 'append' of a type (line 1252)
    append_141541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 12), descr_141540, 'append')
    # Calling append(args, kwargs) (line 1252)
    append_call_result_141553 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 12), append_141541, *[tuple_141542], **kwargs_141552)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'descr' (line 1253)
    descr_141554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 15), 'descr')
    # Assigning a type to the variable 'stypy_return_type' (line 1253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 8), 'stypy_return_type', descr_141554)
    # SSA branch for the else part of an if statement (line 1245)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'datatype' (line 1255)
    datatype_141555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 9), 'datatype')
    # Obtaining the member 'subdtype' of a type (line 1255)
    subdtype_141556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 9), datatype_141555, 'subdtype')
    # Testing the type of an if condition (line 1255)
    if_condition_141557 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1255, 9), subdtype_141556)
    # Assigning a type to the variable 'if_condition_141557' (line 1255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 9), 'if_condition_141557', if_condition_141557)
    # SSA begins for if statement (line 1255)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1256):
    
    # Assigning a Call to a Name (line 1256):
    
    # Call to list(...): (line 1256)
    # Processing the call arguments (line 1256)
    # Getting the type of 'datatype' (line 1256)
    datatype_141559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 22), 'datatype', False)
    # Obtaining the member 'subdtype' of a type (line 1256)
    subdtype_141560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 22), datatype_141559, 'subdtype')
    # Processing the call keyword arguments (line 1256)
    kwargs_141561 = {}
    # Getting the type of 'list' (line 1256)
    list_141558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 17), 'list', False)
    # Calling list(args, kwargs) (line 1256)
    list_call_result_141562 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 17), list_141558, *[subdtype_141560], **kwargs_141561)
    
    # Assigning a type to the variable 'mdescr' (line 1256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 8), 'mdescr', list_call_result_141562)
    
    # Assigning a Call to a Subscript (line 1257):
    
    # Assigning a Call to a Subscript (line 1257):
    
    # Call to _recursive_make_descr(...): (line 1257)
    # Processing the call arguments (line 1257)
    
    # Obtaining the type of the subscript
    int_141564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 60), 'int')
    # Getting the type of 'datatype' (line 1257)
    datatype_141565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 42), 'datatype', False)
    # Obtaining the member 'subdtype' of a type (line 1257)
    subdtype_141566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1257, 42), datatype_141565, 'subdtype')
    # Obtaining the member '__getitem__' of a type (line 1257)
    getitem___141567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1257, 42), subdtype_141566, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1257)
    subscript_call_result_141568 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 42), getitem___141567, int_141564)
    
    # Getting the type of 'newtype' (line 1257)
    newtype_141569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 64), 'newtype', False)
    # Processing the call keyword arguments (line 1257)
    kwargs_141570 = {}
    # Getting the type of '_recursive_make_descr' (line 1257)
    _recursive_make_descr_141563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 20), '_recursive_make_descr', False)
    # Calling _recursive_make_descr(args, kwargs) (line 1257)
    _recursive_make_descr_call_result_141571 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 20), _recursive_make_descr_141563, *[subscript_call_result_141568, newtype_141569], **kwargs_141570)
    
    # Getting the type of 'mdescr' (line 1257)
    mdescr_141572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 8), 'mdescr')
    int_141573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 15), 'int')
    # Storing an element on a container (line 1257)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1257, 8), mdescr_141572, (int_141573, _recursive_make_descr_call_result_141571))
    
    # Call to tuple(...): (line 1258)
    # Processing the call arguments (line 1258)
    # Getting the type of 'mdescr' (line 1258)
    mdescr_141575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 21), 'mdescr', False)
    # Processing the call keyword arguments (line 1258)
    kwargs_141576 = {}
    # Getting the type of 'tuple' (line 1258)
    tuple_141574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 15), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1258)
    tuple_call_result_141577 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 15), tuple_141574, *[mdescr_141575], **kwargs_141576)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 8), 'stypy_return_type', tuple_call_result_141577)
    # SSA branch for the else part of an if statement (line 1255)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'newtype' (line 1260)
    newtype_141578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 15), 'newtype')
    # Assigning a type to the variable 'stypy_return_type' (line 1260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'stypy_return_type', newtype_141578)
    # SSA join for if statement (line 1255)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1245)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_recursive_make_descr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_recursive_make_descr' in the type store
    # Getting the type of 'stypy_return_type' (line 1242)
    stypy_return_type_141579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141579)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_recursive_make_descr'
    return stypy_return_type_141579

# Assigning a type to the variable '_recursive_make_descr' (line 1242)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 0), '_recursive_make_descr', _recursive_make_descr)

@norecursion
def make_mask_descr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'make_mask_descr'
    module_type_store = module_type_store.open_function_context('make_mask_descr', 1263, 0, False)
    
    # Passed parameters checking function
    make_mask_descr.stypy_localization = localization
    make_mask_descr.stypy_type_of_self = None
    make_mask_descr.stypy_type_store = module_type_store
    make_mask_descr.stypy_function_name = 'make_mask_descr'
    make_mask_descr.stypy_param_names_list = ['ndtype']
    make_mask_descr.stypy_varargs_param_name = None
    make_mask_descr.stypy_kwargs_param_name = None
    make_mask_descr.stypy_call_defaults = defaults
    make_mask_descr.stypy_call_varargs = varargs
    make_mask_descr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'make_mask_descr', ['ndtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'make_mask_descr', localization, ['ndtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'make_mask_descr(...)' code ##################

    str_141580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, (-1)), 'str', "\n    Construct a dtype description list from a given dtype.\n\n    Returns a new dtype object, with the type of all fields in `ndtype` to a\n    boolean type. Field names are not altered.\n\n    Parameters\n    ----------\n    ndtype : dtype\n        The dtype to convert.\n\n    Returns\n    -------\n    result : dtype\n        A dtype that looks like `ndtype`, the type of all fields is boolean.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> dtype = np.dtype({'names':['foo', 'bar'],\n                          'formats':[np.float32, np.int]})\n    >>> dtype\n    dtype([('foo', '<f4'), ('bar', '<i4')])\n    >>> ma.make_mask_descr(dtype)\n    dtype([('foo', '|b1'), ('bar', '|b1')])\n    >>> ma.make_mask_descr(np.float32)\n    <type 'numpy.bool_'>\n\n    ")
    
    
    
    # Call to isinstance(...): (line 1294)
    # Processing the call arguments (line 1294)
    # Getting the type of 'ndtype' (line 1294)
    ndtype_141582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 22), 'ndtype', False)
    # Getting the type of 'np' (line 1294)
    np_141583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 30), 'np', False)
    # Obtaining the member 'dtype' of a type (line 1294)
    dtype_141584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 30), np_141583, 'dtype')
    # Processing the call keyword arguments (line 1294)
    kwargs_141585 = {}
    # Getting the type of 'isinstance' (line 1294)
    isinstance_141581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1294)
    isinstance_call_result_141586 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 11), isinstance_141581, *[ndtype_141582, dtype_141584], **kwargs_141585)
    
    # Applying the 'not' unary operator (line 1294)
    result_not__141587 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 7), 'not', isinstance_call_result_141586)
    
    # Testing the type of an if condition (line 1294)
    if_condition_141588 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1294, 4), result_not__141587)
    # Assigning a type to the variable 'if_condition_141588' (line 1294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 4), 'if_condition_141588', if_condition_141588)
    # SSA begins for if statement (line 1294)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1295):
    
    # Assigning a Call to a Name (line 1295):
    
    # Call to dtype(...): (line 1295)
    # Processing the call arguments (line 1295)
    # Getting the type of 'ndtype' (line 1295)
    ndtype_141591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 26), 'ndtype', False)
    # Processing the call keyword arguments (line 1295)
    kwargs_141592 = {}
    # Getting the type of 'np' (line 1295)
    np_141589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 17), 'np', False)
    # Obtaining the member 'dtype' of a type (line 1295)
    dtype_141590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 17), np_141589, 'dtype')
    # Calling dtype(args, kwargs) (line 1295)
    dtype_call_result_141593 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 17), dtype_141590, *[ndtype_141591], **kwargs_141592)
    
    # Assigning a type to the variable 'ndtype' (line 1295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'ndtype', dtype_call_result_141593)
    # SSA join for if statement (line 1294)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to dtype(...): (line 1296)
    # Processing the call arguments (line 1296)
    
    # Call to _recursive_make_descr(...): (line 1296)
    # Processing the call arguments (line 1296)
    # Getting the type of 'ndtype' (line 1296)
    ndtype_141597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 42), 'ndtype', False)
    # Getting the type of 'np' (line 1296)
    np_141598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 50), 'np', False)
    # Obtaining the member 'bool' of a type (line 1296)
    bool_141599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 50), np_141598, 'bool')
    # Processing the call keyword arguments (line 1296)
    kwargs_141600 = {}
    # Getting the type of '_recursive_make_descr' (line 1296)
    _recursive_make_descr_141596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 20), '_recursive_make_descr', False)
    # Calling _recursive_make_descr(args, kwargs) (line 1296)
    _recursive_make_descr_call_result_141601 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 20), _recursive_make_descr_141596, *[ndtype_141597, bool_141599], **kwargs_141600)
    
    # Processing the call keyword arguments (line 1296)
    kwargs_141602 = {}
    # Getting the type of 'np' (line 1296)
    np_141594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 11), 'np', False)
    # Obtaining the member 'dtype' of a type (line 1296)
    dtype_141595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 11), np_141594, 'dtype')
    # Calling dtype(args, kwargs) (line 1296)
    dtype_call_result_141603 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 11), dtype_141595, *[_recursive_make_descr_call_result_141601], **kwargs_141602)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'stypy_return_type', dtype_call_result_141603)
    
    # ################# End of 'make_mask_descr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'make_mask_descr' in the type store
    # Getting the type of 'stypy_return_type' (line 1263)
    stypy_return_type_141604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141604)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'make_mask_descr'
    return stypy_return_type_141604

# Assigning a type to the variable 'make_mask_descr' (line 1263)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 0), 'make_mask_descr', make_mask_descr)

@norecursion
def getmask(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'getmask'
    module_type_store = module_type_store.open_function_context('getmask', 1299, 0, False)
    
    # Passed parameters checking function
    getmask.stypy_localization = localization
    getmask.stypy_type_of_self = None
    getmask.stypy_type_store = module_type_store
    getmask.stypy_function_name = 'getmask'
    getmask.stypy_param_names_list = ['a']
    getmask.stypy_varargs_param_name = None
    getmask.stypy_kwargs_param_name = None
    getmask.stypy_call_defaults = defaults
    getmask.stypy_call_varargs = varargs
    getmask.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'getmask', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'getmask', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'getmask(...)' code ##################

    str_141605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, (-1)), 'str', '\n    Return the mask of a masked array, or nomask.\n\n    Return the mask of `a` as an ndarray if `a` is a `MaskedArray` and the\n    mask is not `nomask`, else return `nomask`. To guarantee a full array\n    of booleans of the same shape as a, use `getmaskarray`.\n\n    Parameters\n    ----------\n    a : array_like\n        Input `MaskedArray` for which the mask is required.\n\n    See Also\n    --------\n    getdata : Return the data of a masked array as an ndarray.\n    getmaskarray : Return the mask of a masked array, or full array of False.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\n    >>> a\n    masked_array(data =\n     [[1 --]\n     [3 4]],\n          mask =\n     [[False  True]\n     [False False]],\n          fill_value=999999)\n    >>> ma.getmask(a)\n    array([[False,  True],\n           [False, False]], dtype=bool)\n\n    Equivalently use the `MaskedArray` `mask` attribute.\n\n    >>> a.mask\n    array([[False,  True],\n           [False, False]], dtype=bool)\n\n    Result when mask == `nomask`\n\n    >>> b = ma.masked_array([[1,2],[3,4]])\n    >>> b\n    masked_array(data =\n     [[1 2]\n     [3 4]],\n          mask =\n     False,\n          fill_value=999999)\n    >>> ma.nomask\n    False\n    >>> ma.getmask(b) == ma.nomask\n    True\n    >>> b.mask == ma.nomask\n    True\n\n    ')
    
    # Call to getattr(...): (line 1357)
    # Processing the call arguments (line 1357)
    # Getting the type of 'a' (line 1357)
    a_141607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 19), 'a', False)
    str_141608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 22), 'str', '_mask')
    # Getting the type of 'nomask' (line 1357)
    nomask_141609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 31), 'nomask', False)
    # Processing the call keyword arguments (line 1357)
    kwargs_141610 = {}
    # Getting the type of 'getattr' (line 1357)
    getattr_141606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 11), 'getattr', False)
    # Calling getattr(args, kwargs) (line 1357)
    getattr_call_result_141611 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 11), getattr_141606, *[a_141607, str_141608, nomask_141609], **kwargs_141610)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 4), 'stypy_return_type', getattr_call_result_141611)
    
    # ################# End of 'getmask(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'getmask' in the type store
    # Getting the type of 'stypy_return_type' (line 1299)
    stypy_return_type_141612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141612)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'getmask'
    return stypy_return_type_141612

# Assigning a type to the variable 'getmask' (line 1299)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 0), 'getmask', getmask)

# Assigning a Name to a Name (line 1360):

# Assigning a Name to a Name (line 1360):
# Getting the type of 'getmask' (line 1360)
getmask_141613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 11), 'getmask')
# Assigning a type to the variable 'get_mask' (line 1360)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 0), 'get_mask', getmask_141613)

@norecursion
def getmaskarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'getmaskarray'
    module_type_store = module_type_store.open_function_context('getmaskarray', 1363, 0, False)
    
    # Passed parameters checking function
    getmaskarray.stypy_localization = localization
    getmaskarray.stypy_type_of_self = None
    getmaskarray.stypy_type_store = module_type_store
    getmaskarray.stypy_function_name = 'getmaskarray'
    getmaskarray.stypy_param_names_list = ['arr']
    getmaskarray.stypy_varargs_param_name = None
    getmaskarray.stypy_kwargs_param_name = None
    getmaskarray.stypy_call_defaults = defaults
    getmaskarray.stypy_call_varargs = varargs
    getmaskarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'getmaskarray', ['arr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'getmaskarray', localization, ['arr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'getmaskarray(...)' code ##################

    str_141614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, (-1)), 'str', '\n    Return the mask of a masked array, or full boolean array of False.\n\n    Return the mask of `arr` as an ndarray if `arr` is a `MaskedArray` and\n    the mask is not `nomask`, else return a full boolean array of False of\n    the same shape as `arr`.\n\n    Parameters\n    ----------\n    arr : array_like\n        Input `MaskedArray` for which the mask is required.\n\n    See Also\n    --------\n    getmask : Return the mask of a masked array, or nomask.\n    getdata : Return the data of a masked array as an ndarray.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\n    >>> a\n    masked_array(data =\n     [[1 --]\n     [3 4]],\n          mask =\n     [[False  True]\n     [False False]],\n          fill_value=999999)\n    >>> ma.getmaskarray(a)\n    array([[False,  True],\n           [False, False]], dtype=bool)\n\n    Result when mask == ``nomask``\n\n    >>> b = ma.masked_array([[1,2],[3,4]])\n    >>> b\n    masked_array(data =\n     [[1 2]\n     [3 4]],\n          mask =\n     False,\n          fill_value=999999)\n    >>> >ma.getmaskarray(b)\n    array([[False, False],\n           [False, False]], dtype=bool)\n\n    ')
    
    # Assigning a Call to a Name (line 1412):
    
    # Assigning a Call to a Name (line 1412):
    
    # Call to getmask(...): (line 1412)
    # Processing the call arguments (line 1412)
    # Getting the type of 'arr' (line 1412)
    arr_141616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 19), 'arr', False)
    # Processing the call keyword arguments (line 1412)
    kwargs_141617 = {}
    # Getting the type of 'getmask' (line 1412)
    getmask_141615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 11), 'getmask', False)
    # Calling getmask(args, kwargs) (line 1412)
    getmask_call_result_141618 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 11), getmask_141615, *[arr_141616], **kwargs_141617)
    
    # Assigning a type to the variable 'mask' (line 1412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 4), 'mask', getmask_call_result_141618)
    
    
    # Getting the type of 'mask' (line 1413)
    mask_141619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 7), 'mask')
    # Getting the type of 'nomask' (line 1413)
    nomask_141620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 15), 'nomask')
    # Applying the binary operator 'is' (line 1413)
    result_is__141621 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 7), 'is', mask_141619, nomask_141620)
    
    # Testing the type of an if condition (line 1413)
    if_condition_141622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1413, 4), result_is__141621)
    # Assigning a type to the variable 'if_condition_141622' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 4), 'if_condition_141622', if_condition_141622)
    # SSA begins for if statement (line 1413)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1414):
    
    # Assigning a Call to a Name (line 1414):
    
    # Call to make_mask_none(...): (line 1414)
    # Processing the call arguments (line 1414)
    
    # Call to shape(...): (line 1414)
    # Processing the call arguments (line 1414)
    # Getting the type of 'arr' (line 1414)
    arr_141626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 39), 'arr', False)
    # Processing the call keyword arguments (line 1414)
    kwargs_141627 = {}
    # Getting the type of 'np' (line 1414)
    np_141624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 30), 'np', False)
    # Obtaining the member 'shape' of a type (line 1414)
    shape_141625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 30), np_141624, 'shape')
    # Calling shape(args, kwargs) (line 1414)
    shape_call_result_141628 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 30), shape_141625, *[arr_141626], **kwargs_141627)
    
    
    # Call to getattr(...): (line 1414)
    # Processing the call arguments (line 1414)
    # Getting the type of 'arr' (line 1414)
    arr_141630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 53), 'arr', False)
    str_141631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, 58), 'str', 'dtype')
    # Getting the type of 'None' (line 1414)
    None_141632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 67), 'None', False)
    # Processing the call keyword arguments (line 1414)
    kwargs_141633 = {}
    # Getting the type of 'getattr' (line 1414)
    getattr_141629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 45), 'getattr', False)
    # Calling getattr(args, kwargs) (line 1414)
    getattr_call_result_141634 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 45), getattr_141629, *[arr_141630, str_141631, None_141632], **kwargs_141633)
    
    # Processing the call keyword arguments (line 1414)
    kwargs_141635 = {}
    # Getting the type of 'make_mask_none' (line 1414)
    make_mask_none_141623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 15), 'make_mask_none', False)
    # Calling make_mask_none(args, kwargs) (line 1414)
    make_mask_none_call_result_141636 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 15), make_mask_none_141623, *[shape_call_result_141628, getattr_call_result_141634], **kwargs_141635)
    
    # Assigning a type to the variable 'mask' (line 1414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'mask', make_mask_none_call_result_141636)
    # SSA join for if statement (line 1413)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'mask' (line 1415)
    mask_141637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 11), 'mask')
    # Assigning a type to the variable 'stypy_return_type' (line 1415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 4), 'stypy_return_type', mask_141637)
    
    # ################# End of 'getmaskarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'getmaskarray' in the type store
    # Getting the type of 'stypy_return_type' (line 1363)
    stypy_return_type_141638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141638)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'getmaskarray'
    return stypy_return_type_141638

# Assigning a type to the variable 'getmaskarray' (line 1363)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 0), 'getmaskarray', getmaskarray)

@norecursion
def is_mask(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_mask'
    module_type_store = module_type_store.open_function_context('is_mask', 1418, 0, False)
    
    # Passed parameters checking function
    is_mask.stypy_localization = localization
    is_mask.stypy_type_of_self = None
    is_mask.stypy_type_store = module_type_store
    is_mask.stypy_function_name = 'is_mask'
    is_mask.stypy_param_names_list = ['m']
    is_mask.stypy_varargs_param_name = None
    is_mask.stypy_kwargs_param_name = None
    is_mask.stypy_call_defaults = defaults
    is_mask.stypy_call_varargs = varargs
    is_mask.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_mask', ['m'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_mask', localization, ['m'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_mask(...)' code ##################

    str_141639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, (-1)), 'str', "\n    Return True if m is a valid, standard mask.\n\n    This function does not check the contents of the input, only that the\n    type is MaskType. In particular, this function returns False if the\n    mask has a flexible dtype.\n\n    Parameters\n    ----------\n    m : array_like\n        Array to test.\n\n    Returns\n    -------\n    result : bool\n        True if `m.dtype.type` is MaskType, False otherwise.\n\n    See Also\n    --------\n    isMaskedArray : Test whether input is an instance of MaskedArray.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> m = ma.masked_equal([0, 1, 0, 2, 3], 0)\n    >>> m\n    masked_array(data = [-- 1 -- 2 3],\n          mask = [ True False  True False False],\n          fill_value=999999)\n    >>> ma.is_mask(m)\n    False\n    >>> ma.is_mask(m.mask)\n    True\n\n    Input must be an ndarray (or have similar attributes)\n    for it to be considered a valid mask.\n\n    >>> m = [False, True, False]\n    >>> ma.is_mask(m)\n    False\n    >>> m = np.array([False, True, False])\n    >>> m\n    array([False,  True, False], dtype=bool)\n    >>> ma.is_mask(m)\n    True\n\n    Arrays with complex dtypes don't return True.\n\n    >>> dtype = np.dtype({'names':['monty', 'pithon'],\n                          'formats':[np.bool, np.bool]})\n    >>> dtype\n    dtype([('monty', '|b1'), ('pithon', '|b1')])\n    >>> m = np.array([(True, False), (False, True), (True, False)],\n                     dtype=dtype)\n    >>> m\n    array([(True, False), (False, True), (True, False)],\n          dtype=[('monty', '|b1'), ('pithon', '|b1')])\n    >>> ma.is_mask(m)\n    False\n\n    ")
    
    
    # SSA begins for try-except statement (line 1480)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Getting the type of 'm' (line 1481)
    m_141640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 15), 'm')
    # Obtaining the member 'dtype' of a type (line 1481)
    dtype_141641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 15), m_141640, 'dtype')
    # Obtaining the member 'type' of a type (line 1481)
    type_141642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 15), dtype_141641, 'type')
    # Getting the type of 'MaskType' (line 1481)
    MaskType_141643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 31), 'MaskType')
    # Applying the binary operator 'is' (line 1481)
    result_is__141644 = python_operator(stypy.reporting.localization.Localization(__file__, 1481, 15), 'is', type_141642, MaskType_141643)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 8), 'stypy_return_type', result_is__141644)
    # SSA branch for the except part of a try statement (line 1480)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 1480)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'False' (line 1483)
    False_141645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'stypy_return_type', False_141645)
    # SSA join for try-except statement (line 1480)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'is_mask(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_mask' in the type store
    # Getting the type of 'stypy_return_type' (line 1418)
    stypy_return_type_141646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141646)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_mask'
    return stypy_return_type_141646

# Assigning a type to the variable 'is_mask' (line 1418)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 0), 'is_mask', is_mask)

@norecursion
def make_mask(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1486)
    False_141647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 22), 'False')
    # Getting the type of 'True' (line 1486)
    True_141648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 36), 'True')
    # Getting the type of 'MaskType' (line 1486)
    MaskType_141649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 48), 'MaskType')
    defaults = [False_141647, True_141648, MaskType_141649]
    # Create a new context for function 'make_mask'
    module_type_store = module_type_store.open_function_context('make_mask', 1486, 0, False)
    
    # Passed parameters checking function
    make_mask.stypy_localization = localization
    make_mask.stypy_type_of_self = None
    make_mask.stypy_type_store = module_type_store
    make_mask.stypy_function_name = 'make_mask'
    make_mask.stypy_param_names_list = ['m', 'copy', 'shrink', 'dtype']
    make_mask.stypy_varargs_param_name = None
    make_mask.stypy_kwargs_param_name = None
    make_mask.stypy_call_defaults = defaults
    make_mask.stypy_call_varargs = varargs
    make_mask.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'make_mask', ['m', 'copy', 'shrink', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'make_mask', localization, ['m', 'copy', 'shrink', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'make_mask(...)' code ##################

    str_141650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1556, (-1)), 'str', "\n    Create a boolean mask from an array.\n\n    Return `m` as a boolean mask, creating a copy if necessary or requested.\n    The function can accept any sequence that is convertible to integers,\n    or ``nomask``.  Does not require that contents must be 0s and 1s, values\n    of 0 are interepreted as False, everything else as True.\n\n    Parameters\n    ----------\n    m : array_like\n        Potential mask.\n    copy : bool, optional\n        Whether to return a copy of `m` (True) or `m` itself (False).\n    shrink : bool, optional\n        Whether to shrink `m` to ``nomask`` if all its values are False.\n    dtype : dtype, optional\n        Data-type of the output mask. By default, the output mask has a\n        dtype of MaskType (bool). If the dtype is flexible, each field has\n        a boolean dtype. This is ignored when `m` is ``nomask``, in which\n        case ``nomask`` is always returned.\n\n    Returns\n    -------\n    result : ndarray\n        A boolean mask derived from `m`.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> m = [True, False, True, True]\n    >>> ma.make_mask(m)\n    array([ True, False,  True,  True], dtype=bool)\n    >>> m = [1, 0, 1, 1]\n    >>> ma.make_mask(m)\n    array([ True, False,  True,  True], dtype=bool)\n    >>> m = [1, 0, 2, -3]\n    >>> ma.make_mask(m)\n    array([ True, False,  True,  True], dtype=bool)\n\n    Effect of the `shrink` parameter.\n\n    >>> m = np.zeros(4)\n    >>> m\n    array([ 0.,  0.,  0.,  0.])\n    >>> ma.make_mask(m)\n    False\n    >>> ma.make_mask(m, shrink=False)\n    array([False, False, False, False], dtype=bool)\n\n    Using a flexible `dtype`.\n\n    >>> m = [1, 0, 1, 1]\n    >>> n = [0, 1, 0, 0]\n    >>> arr = []\n    >>> for man, mouse in zip(m, n):\n    ...     arr.append((man, mouse))\n    >>> arr\n    [(1, 0), (0, 1), (1, 0), (1, 0)]\n    >>> dtype = np.dtype({'names':['man', 'mouse'],\n                          'formats':[np.int, np.int]})\n    >>> arr = np.array(arr, dtype=dtype)\n    >>> arr\n    array([(1, 0), (0, 1), (1, 0), (1, 0)],\n          dtype=[('man', '<i4'), ('mouse', '<i4')])\n    >>> ma.make_mask(arr, dtype=dtype)\n    array([(True, False), (False, True), (True, False), (True, False)],\n          dtype=[('man', '|b1'), ('mouse', '|b1')])\n\n    ")
    
    
    # Getting the type of 'm' (line 1557)
    m_141651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 7), 'm')
    # Getting the type of 'nomask' (line 1557)
    nomask_141652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 12), 'nomask')
    # Applying the binary operator 'is' (line 1557)
    result_is__141653 = python_operator(stypy.reporting.localization.Localization(__file__, 1557, 7), 'is', m_141651, nomask_141652)
    
    # Testing the type of an if condition (line 1557)
    if_condition_141654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1557, 4), result_is__141653)
    # Assigning a type to the variable 'if_condition_141654' (line 1557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 4), 'if_condition_141654', if_condition_141654)
    # SSA begins for if statement (line 1557)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'nomask' (line 1558)
    nomask_141655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 15), 'nomask')
    # Assigning a type to the variable 'stypy_return_type' (line 1558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 8), 'stypy_return_type', nomask_141655)
    # SSA branch for the else part of an if statement (line 1557)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 1559)
    # Processing the call arguments (line 1559)
    # Getting the type of 'm' (line 1559)
    m_141657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 20), 'm', False)
    # Getting the type of 'ndarray' (line 1559)
    ndarray_141658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 23), 'ndarray', False)
    # Processing the call keyword arguments (line 1559)
    kwargs_141659 = {}
    # Getting the type of 'isinstance' (line 1559)
    isinstance_141656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1559)
    isinstance_call_result_141660 = invoke(stypy.reporting.localization.Localization(__file__, 1559, 9), isinstance_141656, *[m_141657, ndarray_141658], **kwargs_141659)
    
    # Testing the type of an if condition (line 1559)
    if_condition_141661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1559, 9), isinstance_call_result_141660)
    # Assigning a type to the variable 'if_condition_141661' (line 1559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 9), 'if_condition_141661', if_condition_141661)
    # SSA begins for if statement (line 1559)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1562):
    
    # Assigning a Call to a Name (line 1562):
    
    # Call to filled(...): (line 1562)
    # Processing the call arguments (line 1562)
    # Getting the type of 'm' (line 1562)
    m_141663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 19), 'm', False)
    # Getting the type of 'True' (line 1562)
    True_141664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 22), 'True', False)
    # Processing the call keyword arguments (line 1562)
    kwargs_141665 = {}
    # Getting the type of 'filled' (line 1562)
    filled_141662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 12), 'filled', False)
    # Calling filled(args, kwargs) (line 1562)
    filled_call_result_141666 = invoke(stypy.reporting.localization.Localization(__file__, 1562, 12), filled_141662, *[m_141663, True_141664], **kwargs_141665)
    
    # Assigning a type to the variable 'm' (line 1562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 8), 'm', filled_call_result_141666)
    
    # Assigning a Call to a Name (line 1564):
    
    # Assigning a Call to a Name (line 1564):
    
    # Call to make_mask_descr(...): (line 1564)
    # Processing the call arguments (line 1564)
    # Getting the type of 'dtype' (line 1564)
    dtype_141668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 32), 'dtype', False)
    # Processing the call keyword arguments (line 1564)
    kwargs_141669 = {}
    # Getting the type of 'make_mask_descr' (line 1564)
    make_mask_descr_141667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 16), 'make_mask_descr', False)
    # Calling make_mask_descr(args, kwargs) (line 1564)
    make_mask_descr_call_result_141670 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 16), make_mask_descr_141667, *[dtype_141668], **kwargs_141669)
    
    # Assigning a type to the variable 'dtype' (line 1564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 8), 'dtype', make_mask_descr_call_result_141670)
    
    
    # Getting the type of 'm' (line 1565)
    m_141671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 11), 'm')
    # Obtaining the member 'dtype' of a type (line 1565)
    dtype_141672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 11), m_141671, 'dtype')
    # Getting the type of 'dtype' (line 1565)
    dtype_141673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 22), 'dtype')
    # Applying the binary operator '==' (line 1565)
    result_eq_141674 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 11), '==', dtype_141672, dtype_141673)
    
    # Testing the type of an if condition (line 1565)
    if_condition_141675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1565, 8), result_eq_141674)
    # Assigning a type to the variable 'if_condition_141675' (line 1565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'if_condition_141675', if_condition_141675)
    # SSA begins for if statement (line 1565)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'copy' (line 1566)
    copy_141676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 15), 'copy')
    # Testing the type of an if condition (line 1566)
    if_condition_141677 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1566, 12), copy_141676)
    # Assigning a type to the variable 'if_condition_141677' (line 1566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 12), 'if_condition_141677', if_condition_141677)
    # SSA begins for if statement (line 1566)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1567):
    
    # Assigning a Call to a Name (line 1567):
    
    # Call to copy(...): (line 1567)
    # Processing the call keyword arguments (line 1567)
    kwargs_141680 = {}
    # Getting the type of 'm' (line 1567)
    m_141678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 25), 'm', False)
    # Obtaining the member 'copy' of a type (line 1567)
    copy_141679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 25), m_141678, 'copy')
    # Calling copy(args, kwargs) (line 1567)
    copy_call_result_141681 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 25), copy_141679, *[], **kwargs_141680)
    
    # Assigning a type to the variable 'result' (line 1567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 16), 'result', copy_call_result_141681)
    # SSA branch for the else part of an if statement (line 1566)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1569):
    
    # Assigning a Name to a Name (line 1569):
    # Getting the type of 'm' (line 1569)
    m_141682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 25), 'm')
    # Assigning a type to the variable 'result' (line 1569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 16), 'result', m_141682)
    # SSA join for if statement (line 1566)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1565)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1571):
    
    # Assigning a Call to a Name (line 1571):
    
    # Call to array(...): (line 1571)
    # Processing the call arguments (line 1571)
    # Getting the type of 'm' (line 1571)
    m_141685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 30), 'm', False)
    # Processing the call keyword arguments (line 1571)
    # Getting the type of 'dtype' (line 1571)
    dtype_141686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 39), 'dtype', False)
    keyword_141687 = dtype_141686
    # Getting the type of 'copy' (line 1571)
    copy_141688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 51), 'copy', False)
    keyword_141689 = copy_141688
    kwargs_141690 = {'dtype': keyword_141687, 'copy': keyword_141689}
    # Getting the type of 'np' (line 1571)
    np_141683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 21), 'np', False)
    # Obtaining the member 'array' of a type (line 1571)
    array_141684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 21), np_141683, 'array')
    # Calling array(args, kwargs) (line 1571)
    array_call_result_141691 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 21), array_141684, *[m_141685], **kwargs_141690)
    
    # Assigning a type to the variable 'result' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 12), 'result', array_call_result_141691)
    # SSA join for if statement (line 1565)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1559)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1573):
    
    # Assigning a Call to a Name (line 1573):
    
    # Call to array(...): (line 1573)
    # Processing the call arguments (line 1573)
    
    # Call to filled(...): (line 1573)
    # Processing the call arguments (line 1573)
    # Getting the type of 'm' (line 1573)
    m_141695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 33), 'm', False)
    # Getting the type of 'True' (line 1573)
    True_141696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 36), 'True', False)
    # Processing the call keyword arguments (line 1573)
    kwargs_141697 = {}
    # Getting the type of 'filled' (line 1573)
    filled_141694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 26), 'filled', False)
    # Calling filled(args, kwargs) (line 1573)
    filled_call_result_141698 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 26), filled_141694, *[m_141695, True_141696], **kwargs_141697)
    
    # Processing the call keyword arguments (line 1573)
    # Getting the type of 'MaskType' (line 1573)
    MaskType_141699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 49), 'MaskType', False)
    keyword_141700 = MaskType_141699
    kwargs_141701 = {'dtype': keyword_141700}
    # Getting the type of 'np' (line 1573)
    np_141692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 17), 'np', False)
    # Obtaining the member 'array' of a type (line 1573)
    array_141693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 17), np_141692, 'array')
    # Calling array(args, kwargs) (line 1573)
    array_call_result_141702 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 17), array_141693, *[filled_call_result_141698], **kwargs_141701)
    
    # Assigning a type to the variable 'result' (line 1573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 8), 'result', array_call_result_141702)
    # SSA join for if statement (line 1559)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1557)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'shrink' (line 1575)
    shrink_141703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 7), 'shrink')
    
    # Getting the type of 'result' (line 1575)
    result_141704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 23), 'result')
    # Obtaining the member 'dtype' of a type (line 1575)
    dtype_141705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 23), result_141704, 'dtype')
    # Obtaining the member 'names' of a type (line 1575)
    names_141706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 23), dtype_141705, 'names')
    # Applying the 'not' unary operator (line 1575)
    result_not__141707 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 19), 'not', names_141706)
    
    # Applying the binary operator 'and' (line 1575)
    result_and_keyword_141708 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 7), 'and', shrink_141703, result_not__141707)
    
    
    # Call to any(...): (line 1575)
    # Processing the call keyword arguments (line 1575)
    kwargs_141711 = {}
    # Getting the type of 'result' (line 1575)
    result_141709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 52), 'result', False)
    # Obtaining the member 'any' of a type (line 1575)
    any_141710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 52), result_141709, 'any')
    # Calling any(args, kwargs) (line 1575)
    any_call_result_141712 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 52), any_141710, *[], **kwargs_141711)
    
    # Applying the 'not' unary operator (line 1575)
    result_not__141713 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 48), 'not', any_call_result_141712)
    
    # Applying the binary operator 'and' (line 1575)
    result_and_keyword_141714 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 7), 'and', result_and_keyword_141708, result_not__141713)
    
    # Testing the type of an if condition (line 1575)
    if_condition_141715 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1575, 4), result_and_keyword_141714)
    # Assigning a type to the variable 'if_condition_141715' (line 1575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'if_condition_141715', if_condition_141715)
    # SSA begins for if statement (line 1575)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'nomask' (line 1576)
    nomask_141716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 15), 'nomask')
    # Assigning a type to the variable 'stypy_return_type' (line 1576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 8), 'stypy_return_type', nomask_141716)
    # SSA branch for the else part of an if statement (line 1575)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'result' (line 1578)
    result_141717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 15), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 8), 'stypy_return_type', result_141717)
    # SSA join for if statement (line 1575)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'make_mask(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'make_mask' in the type store
    # Getting the type of 'stypy_return_type' (line 1486)
    stypy_return_type_141718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141718)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'make_mask'
    return stypy_return_type_141718

# Assigning a type to the variable 'make_mask' (line 1486)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 0), 'make_mask', make_mask)

@norecursion
def make_mask_none(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1581)
    None_141719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 35), 'None')
    defaults = [None_141719]
    # Create a new context for function 'make_mask_none'
    module_type_store = module_type_store.open_function_context('make_mask_none', 1581, 0, False)
    
    # Passed parameters checking function
    make_mask_none.stypy_localization = localization
    make_mask_none.stypy_type_of_self = None
    make_mask_none.stypy_type_store = module_type_store
    make_mask_none.stypy_function_name = 'make_mask_none'
    make_mask_none.stypy_param_names_list = ['newshape', 'dtype']
    make_mask_none.stypy_varargs_param_name = None
    make_mask_none.stypy_kwargs_param_name = None
    make_mask_none.stypy_call_defaults = defaults
    make_mask_none.stypy_call_varargs = varargs
    make_mask_none.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'make_mask_none', ['newshape', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'make_mask_none', localization, ['newshape', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'make_mask_none(...)' code ##################

    str_141720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1623, (-1)), 'str', "\n    Return a boolean mask of the given shape, filled with False.\n\n    This function returns a boolean ndarray with all entries False, that can\n    be used in common mask manipulations. If a complex dtype is specified, the\n    type of each field is converted to a boolean type.\n\n    Parameters\n    ----------\n    newshape : tuple\n        A tuple indicating the shape of the mask.\n    dtype : {None, dtype}, optional\n        If None, use a MaskType instance. Otherwise, use a new datatype with\n        the same fields as `dtype`, converted to boolean types.\n\n    Returns\n    -------\n    result : ndarray\n        An ndarray of appropriate shape and dtype, filled with False.\n\n    See Also\n    --------\n    make_mask : Create a boolean mask from an array.\n    make_mask_descr : Construct a dtype description list from a given dtype.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> ma.make_mask_none((3,))\n    array([False, False, False], dtype=bool)\n\n    Defining a more complex dtype.\n\n    >>> dtype = np.dtype({'names':['foo', 'bar'],\n                          'formats':[np.float32, np.int]})\n    >>> dtype\n    dtype([('foo', '<f4'), ('bar', '<i4')])\n    >>> ma.make_mask_none((3,), dtype=dtype)\n    array([(False, False), (False, False), (False, False)],\n          dtype=[('foo', '|b1'), ('bar', '|b1')])\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1624)
    # Getting the type of 'dtype' (line 1624)
    dtype_141721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 7), 'dtype')
    # Getting the type of 'None' (line 1624)
    None_141722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 16), 'None')
    
    (may_be_141723, more_types_in_union_141724) = may_be_none(dtype_141721, None_141722)

    if may_be_141723:

        if more_types_in_union_141724:
            # Runtime conditional SSA (line 1624)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1625):
        
        # Assigning a Call to a Name (line 1625):
        
        # Call to zeros(...): (line 1625)
        # Processing the call arguments (line 1625)
        # Getting the type of 'newshape' (line 1625)
        newshape_141727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 26), 'newshape', False)
        # Processing the call keyword arguments (line 1625)
        # Getting the type of 'MaskType' (line 1625)
        MaskType_141728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 42), 'MaskType', False)
        keyword_141729 = MaskType_141728
        kwargs_141730 = {'dtype': keyword_141729}
        # Getting the type of 'np' (line 1625)
        np_141725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 17), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1625)
        zeros_141726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 17), np_141725, 'zeros')
        # Calling zeros(args, kwargs) (line 1625)
        zeros_call_result_141731 = invoke(stypy.reporting.localization.Localization(__file__, 1625, 17), zeros_141726, *[newshape_141727], **kwargs_141730)
        
        # Assigning a type to the variable 'result' (line 1625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1625, 8), 'result', zeros_call_result_141731)

        if more_types_in_union_141724:
            # Runtime conditional SSA for else branch (line 1624)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_141723) or more_types_in_union_141724):
        
        # Assigning a Call to a Name (line 1627):
        
        # Assigning a Call to a Name (line 1627):
        
        # Call to zeros(...): (line 1627)
        # Processing the call arguments (line 1627)
        # Getting the type of 'newshape' (line 1627)
        newshape_141734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 26), 'newshape', False)
        # Processing the call keyword arguments (line 1627)
        
        # Call to make_mask_descr(...): (line 1627)
        # Processing the call arguments (line 1627)
        # Getting the type of 'dtype' (line 1627)
        dtype_141736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 58), 'dtype', False)
        # Processing the call keyword arguments (line 1627)
        kwargs_141737 = {}
        # Getting the type of 'make_mask_descr' (line 1627)
        make_mask_descr_141735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 42), 'make_mask_descr', False)
        # Calling make_mask_descr(args, kwargs) (line 1627)
        make_mask_descr_call_result_141738 = invoke(stypy.reporting.localization.Localization(__file__, 1627, 42), make_mask_descr_141735, *[dtype_141736], **kwargs_141737)
        
        keyword_141739 = make_mask_descr_call_result_141738
        kwargs_141740 = {'dtype': keyword_141739}
        # Getting the type of 'np' (line 1627)
        np_141732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 17), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1627)
        zeros_141733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1627, 17), np_141732, 'zeros')
        # Calling zeros(args, kwargs) (line 1627)
        zeros_call_result_141741 = invoke(stypy.reporting.localization.Localization(__file__, 1627, 17), zeros_141733, *[newshape_141734], **kwargs_141740)
        
        # Assigning a type to the variable 'result' (line 1627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1627, 8), 'result', zeros_call_result_141741)

        if (may_be_141723 and more_types_in_union_141724):
            # SSA join for if statement (line 1624)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'result' (line 1628)
    result_141742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 4), 'stypy_return_type', result_141742)
    
    # ################# End of 'make_mask_none(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'make_mask_none' in the type store
    # Getting the type of 'stypy_return_type' (line 1581)
    stypy_return_type_141743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141743)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'make_mask_none'
    return stypy_return_type_141743

# Assigning a type to the variable 'make_mask_none' (line 1581)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 0), 'make_mask_none', make_mask_none)

@norecursion
def mask_or(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1631)
    False_141744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 25), 'False')
    # Getting the type of 'True' (line 1631)
    True_141745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 39), 'True')
    defaults = [False_141744, True_141745]
    # Create a new context for function 'mask_or'
    module_type_store = module_type_store.open_function_context('mask_or', 1631, 0, False)
    
    # Passed parameters checking function
    mask_or.stypy_localization = localization
    mask_or.stypy_type_of_self = None
    mask_or.stypy_type_store = module_type_store
    mask_or.stypy_function_name = 'mask_or'
    mask_or.stypy_param_names_list = ['m1', 'm2', 'copy', 'shrink']
    mask_or.stypy_varargs_param_name = None
    mask_or.stypy_kwargs_param_name = None
    mask_or.stypy_call_defaults = defaults
    mask_or.stypy_call_varargs = varargs
    mask_or.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mask_or', ['m1', 'm2', 'copy', 'shrink'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mask_or', localization, ['m1', 'm2', 'copy', 'shrink'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mask_or(...)' code ##################

    str_141746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1666, (-1)), 'str', '\n    Combine two masks with the ``logical_or`` operator.\n\n    The result may be a view on `m1` or `m2` if the other is `nomask`\n    (i.e. False).\n\n    Parameters\n    ----------\n    m1, m2 : array_like\n        Input masks.\n    copy : bool, optional\n        If copy is False and one of the inputs is `nomask`, return a view\n        of the other input mask. Defaults to False.\n    shrink : bool, optional\n        Whether to shrink the output to `nomask` if all its values are\n        False. Defaults to True.\n\n    Returns\n    -------\n    mask : output mask\n        The result masks values that are masked in either `m1` or `m2`.\n\n    Raises\n    ------\n    ValueError\n        If `m1` and `m2` have different flexible dtypes.\n\n    Examples\n    --------\n    >>> m1 = np.ma.make_mask([0, 1, 1, 0])\n    >>> m2 = np.ma.make_mask([1, 0, 0, 0])\n    >>> np.ma.mask_or(m1, m2)\n    array([ True,  True,  True, False], dtype=bool)\n\n    ')

    @norecursion
    def _recursive_mask_or(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_recursive_mask_or'
        module_type_store = module_type_store.open_function_context('_recursive_mask_or', 1668, 4, False)
        
        # Passed parameters checking function
        _recursive_mask_or.stypy_localization = localization
        _recursive_mask_or.stypy_type_of_self = None
        _recursive_mask_or.stypy_type_store = module_type_store
        _recursive_mask_or.stypy_function_name = '_recursive_mask_or'
        _recursive_mask_or.stypy_param_names_list = ['m1', 'm2', 'newmask']
        _recursive_mask_or.stypy_varargs_param_name = None
        _recursive_mask_or.stypy_kwargs_param_name = None
        _recursive_mask_or.stypy_call_defaults = defaults
        _recursive_mask_or.stypy_call_varargs = varargs
        _recursive_mask_or.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_recursive_mask_or', ['m1', 'm2', 'newmask'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_recursive_mask_or', localization, ['m1', 'm2', 'newmask'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_recursive_mask_or(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1669):
        
        # Assigning a Attribute to a Name (line 1669):
        # Getting the type of 'm1' (line 1669)
        m1_141747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 16), 'm1')
        # Obtaining the member 'dtype' of a type (line 1669)
        dtype_141748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 16), m1_141747, 'dtype')
        # Obtaining the member 'names' of a type (line 1669)
        names_141749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 16), dtype_141748, 'names')
        # Assigning a type to the variable 'names' (line 1669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'names', names_141749)
        
        # Getting the type of 'names' (line 1670)
        names_141750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 20), 'names')
        # Testing the type of a for loop iterable (line 1670)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1670, 8), names_141750)
        # Getting the type of the for loop variable (line 1670)
        for_loop_var_141751 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1670, 8), names_141750)
        # Assigning a type to the variable 'name' (line 1670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'name', for_loop_var_141751)
        # SSA begins for a for statement (line 1670)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1671):
        
        # Assigning a Subscript to a Name (line 1671):
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 1671)
        name_141752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 26), 'name')
        # Getting the type of 'm1' (line 1671)
        m1_141753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 23), 'm1')
        # Obtaining the member '__getitem__' of a type (line 1671)
        getitem___141754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1671, 23), m1_141753, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1671)
        subscript_call_result_141755 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 23), getitem___141754, name_141752)
        
        # Assigning a type to the variable 'current1' (line 1671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'current1', subscript_call_result_141755)
        
        # Getting the type of 'current1' (line 1672)
        current1_141756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 15), 'current1')
        # Obtaining the member 'dtype' of a type (line 1672)
        dtype_141757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 15), current1_141756, 'dtype')
        # Obtaining the member 'names' of a type (line 1672)
        names_141758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 15), dtype_141757, 'names')
        # Testing the type of an if condition (line 1672)
        if_condition_141759 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1672, 12), names_141758)
        # Assigning a type to the variable 'if_condition_141759' (line 1672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 12), 'if_condition_141759', if_condition_141759)
        # SSA begins for if statement (line 1672)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _recursive_mask_or(...): (line 1673)
        # Processing the call arguments (line 1673)
        # Getting the type of 'current1' (line 1673)
        current1_141761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 35), 'current1', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 1673)
        name_141762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 48), 'name', False)
        # Getting the type of 'm2' (line 1673)
        m2_141763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 45), 'm2', False)
        # Obtaining the member '__getitem__' of a type (line 1673)
        getitem___141764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 45), m2_141763, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1673)
        subscript_call_result_141765 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 45), getitem___141764, name_141762)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 1673)
        name_141766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 63), 'name', False)
        # Getting the type of 'newmask' (line 1673)
        newmask_141767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 55), 'newmask', False)
        # Obtaining the member '__getitem__' of a type (line 1673)
        getitem___141768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 55), newmask_141767, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1673)
        subscript_call_result_141769 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 55), getitem___141768, name_141766)
        
        # Processing the call keyword arguments (line 1673)
        kwargs_141770 = {}
        # Getting the type of '_recursive_mask_or' (line 1673)
        _recursive_mask_or_141760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 16), '_recursive_mask_or', False)
        # Calling _recursive_mask_or(args, kwargs) (line 1673)
        _recursive_mask_or_call_result_141771 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 16), _recursive_mask_or_141760, *[current1_141761, subscript_call_result_141765, subscript_call_result_141769], **kwargs_141770)
        
        # SSA branch for the else part of an if statement (line 1672)
        module_type_store.open_ssa_branch('else')
        
        # Call to logical_or(...): (line 1675)
        # Processing the call arguments (line 1675)
        # Getting the type of 'current1' (line 1675)
        current1_141774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 33), 'current1', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 1675)
        name_141775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 46), 'name', False)
        # Getting the type of 'm2' (line 1675)
        m2_141776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 43), 'm2', False)
        # Obtaining the member '__getitem__' of a type (line 1675)
        getitem___141777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 43), m2_141776, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1675)
        subscript_call_result_141778 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 43), getitem___141777, name_141775)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 1675)
        name_141779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 61), 'name', False)
        # Getting the type of 'newmask' (line 1675)
        newmask_141780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 53), 'newmask', False)
        # Obtaining the member '__getitem__' of a type (line 1675)
        getitem___141781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 53), newmask_141780, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1675)
        subscript_call_result_141782 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 53), getitem___141781, name_141779)
        
        # Processing the call keyword arguments (line 1675)
        kwargs_141783 = {}
        # Getting the type of 'umath' (line 1675)
        umath_141772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 16), 'umath', False)
        # Obtaining the member 'logical_or' of a type (line 1675)
        logical_or_141773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 16), umath_141772, 'logical_or')
        # Calling logical_or(args, kwargs) (line 1675)
        logical_or_call_result_141784 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 16), logical_or_141773, *[current1_141774, subscript_call_result_141778, subscript_call_result_141782], **kwargs_141783)
        
        # SSA join for if statement (line 1672)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 1676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of '_recursive_mask_or(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_recursive_mask_or' in the type store
        # Getting the type of 'stypy_return_type' (line 1668)
        stypy_return_type_141785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141785)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_recursive_mask_or'
        return stypy_return_type_141785

    # Assigning a type to the variable '_recursive_mask_or' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), '_recursive_mask_or', _recursive_mask_or)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm1' (line 1678)
    m1_141786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'm1')
    # Getting the type of 'nomask' (line 1678)
    nomask_141787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 14), 'nomask')
    # Applying the binary operator 'is' (line 1678)
    result_is__141788 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 8), 'is', m1_141786, nomask_141787)
    
    
    # Getting the type of 'm1' (line 1678)
    m1_141789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 26), 'm1')
    # Getting the type of 'False' (line 1678)
    False_141790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 32), 'False')
    # Applying the binary operator 'is' (line 1678)
    result_is__141791 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 26), 'is', m1_141789, False_141790)
    
    # Applying the binary operator 'or' (line 1678)
    result_or_keyword_141792 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 7), 'or', result_is__141788, result_is__141791)
    
    # Testing the type of an if condition (line 1678)
    if_condition_141793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1678, 4), result_or_keyword_141792)
    # Assigning a type to the variable 'if_condition_141793' (line 1678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 4), 'if_condition_141793', if_condition_141793)
    # SSA begins for if statement (line 1678)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1679):
    
    # Assigning a Call to a Name (line 1679):
    
    # Call to getattr(...): (line 1679)
    # Processing the call arguments (line 1679)
    # Getting the type of 'm2' (line 1679)
    m2_141795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 24), 'm2', False)
    str_141796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 28), 'str', 'dtype')
    # Getting the type of 'MaskType' (line 1679)
    MaskType_141797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 37), 'MaskType', False)
    # Processing the call keyword arguments (line 1679)
    kwargs_141798 = {}
    # Getting the type of 'getattr' (line 1679)
    getattr_141794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 16), 'getattr', False)
    # Calling getattr(args, kwargs) (line 1679)
    getattr_call_result_141799 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 16), getattr_141794, *[m2_141795, str_141796, MaskType_141797], **kwargs_141798)
    
    # Assigning a type to the variable 'dtype' (line 1679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'dtype', getattr_call_result_141799)
    
    # Call to make_mask(...): (line 1680)
    # Processing the call arguments (line 1680)
    # Getting the type of 'm2' (line 1680)
    m2_141801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 25), 'm2', False)
    # Processing the call keyword arguments (line 1680)
    # Getting the type of 'copy' (line 1680)
    copy_141802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 34), 'copy', False)
    keyword_141803 = copy_141802
    # Getting the type of 'shrink' (line 1680)
    shrink_141804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 47), 'shrink', False)
    keyword_141805 = shrink_141804
    # Getting the type of 'dtype' (line 1680)
    dtype_141806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 61), 'dtype', False)
    keyword_141807 = dtype_141806
    kwargs_141808 = {'dtype': keyword_141807, 'copy': keyword_141803, 'shrink': keyword_141805}
    # Getting the type of 'make_mask' (line 1680)
    make_mask_141800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 15), 'make_mask', False)
    # Calling make_mask(args, kwargs) (line 1680)
    make_mask_call_result_141809 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 15), make_mask_141800, *[m2_141801], **kwargs_141808)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'stypy_return_type', make_mask_call_result_141809)
    # SSA join for if statement (line 1678)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm2' (line 1681)
    m2_141810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 8), 'm2')
    # Getting the type of 'nomask' (line 1681)
    nomask_141811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 14), 'nomask')
    # Applying the binary operator 'is' (line 1681)
    result_is__141812 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 8), 'is', m2_141810, nomask_141811)
    
    
    # Getting the type of 'm2' (line 1681)
    m2_141813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 26), 'm2')
    # Getting the type of 'False' (line 1681)
    False_141814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 32), 'False')
    # Applying the binary operator 'is' (line 1681)
    result_is__141815 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 26), 'is', m2_141813, False_141814)
    
    # Applying the binary operator 'or' (line 1681)
    result_or_keyword_141816 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 7), 'or', result_is__141812, result_is__141815)
    
    # Testing the type of an if condition (line 1681)
    if_condition_141817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1681, 4), result_or_keyword_141816)
    # Assigning a type to the variable 'if_condition_141817' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 4), 'if_condition_141817', if_condition_141817)
    # SSA begins for if statement (line 1681)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1682):
    
    # Assigning a Call to a Name (line 1682):
    
    # Call to getattr(...): (line 1682)
    # Processing the call arguments (line 1682)
    # Getting the type of 'm1' (line 1682)
    m1_141819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 24), 'm1', False)
    str_141820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1682, 28), 'str', 'dtype')
    # Getting the type of 'MaskType' (line 1682)
    MaskType_141821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 37), 'MaskType', False)
    # Processing the call keyword arguments (line 1682)
    kwargs_141822 = {}
    # Getting the type of 'getattr' (line 1682)
    getattr_141818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 16), 'getattr', False)
    # Calling getattr(args, kwargs) (line 1682)
    getattr_call_result_141823 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 16), getattr_141818, *[m1_141819, str_141820, MaskType_141821], **kwargs_141822)
    
    # Assigning a type to the variable 'dtype' (line 1682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 8), 'dtype', getattr_call_result_141823)
    
    # Call to make_mask(...): (line 1683)
    # Processing the call arguments (line 1683)
    # Getting the type of 'm1' (line 1683)
    m1_141825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 25), 'm1', False)
    # Processing the call keyword arguments (line 1683)
    # Getting the type of 'copy' (line 1683)
    copy_141826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 34), 'copy', False)
    keyword_141827 = copy_141826
    # Getting the type of 'shrink' (line 1683)
    shrink_141828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 47), 'shrink', False)
    keyword_141829 = shrink_141828
    # Getting the type of 'dtype' (line 1683)
    dtype_141830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 61), 'dtype', False)
    keyword_141831 = dtype_141830
    kwargs_141832 = {'dtype': keyword_141831, 'copy': keyword_141827, 'shrink': keyword_141829}
    # Getting the type of 'make_mask' (line 1683)
    make_mask_141824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 15), 'make_mask', False)
    # Calling make_mask(args, kwargs) (line 1683)
    make_mask_call_result_141833 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 15), make_mask_141824, *[m1_141825], **kwargs_141832)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 8), 'stypy_return_type', make_mask_call_result_141833)
    # SSA join for if statement (line 1681)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm1' (line 1684)
    m1_141834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 7), 'm1')
    # Getting the type of 'm2' (line 1684)
    m2_141835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 13), 'm2')
    # Applying the binary operator 'is' (line 1684)
    result_is__141836 = python_operator(stypy.reporting.localization.Localization(__file__, 1684, 7), 'is', m1_141834, m2_141835)
    
    
    # Call to is_mask(...): (line 1684)
    # Processing the call arguments (line 1684)
    # Getting the type of 'm1' (line 1684)
    m1_141838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 28), 'm1', False)
    # Processing the call keyword arguments (line 1684)
    kwargs_141839 = {}
    # Getting the type of 'is_mask' (line 1684)
    is_mask_141837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 20), 'is_mask', False)
    # Calling is_mask(args, kwargs) (line 1684)
    is_mask_call_result_141840 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 20), is_mask_141837, *[m1_141838], **kwargs_141839)
    
    # Applying the binary operator 'and' (line 1684)
    result_and_keyword_141841 = python_operator(stypy.reporting.localization.Localization(__file__, 1684, 7), 'and', result_is__141836, is_mask_call_result_141840)
    
    # Testing the type of an if condition (line 1684)
    if_condition_141842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1684, 4), result_and_keyword_141841)
    # Assigning a type to the variable 'if_condition_141842' (line 1684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 4), 'if_condition_141842', if_condition_141842)
    # SSA begins for if statement (line 1684)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'm1' (line 1685)
    m1_141843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 15), 'm1')
    # Assigning a type to the variable 'stypy_return_type' (line 1685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 8), 'stypy_return_type', m1_141843)
    # SSA join for if statement (line 1684)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 1686):
    
    # Assigning a Call to a Name (line 1686):
    
    # Call to getattr(...): (line 1686)
    # Processing the call arguments (line 1686)
    # Getting the type of 'm1' (line 1686)
    m1_141845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 32), 'm1', False)
    str_141846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 36), 'str', 'dtype')
    # Getting the type of 'None' (line 1686)
    None_141847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 45), 'None', False)
    # Processing the call keyword arguments (line 1686)
    kwargs_141848 = {}
    # Getting the type of 'getattr' (line 1686)
    getattr_141844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 24), 'getattr', False)
    # Calling getattr(args, kwargs) (line 1686)
    getattr_call_result_141849 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 24), getattr_141844, *[m1_141845, str_141846, None_141847], **kwargs_141848)
    
    # Assigning a type to the variable 'tuple_assignment_139169' (line 1686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 4), 'tuple_assignment_139169', getattr_call_result_141849)
    
    # Assigning a Call to a Name (line 1686):
    
    # Call to getattr(...): (line 1686)
    # Processing the call arguments (line 1686)
    # Getting the type of 'm2' (line 1686)
    m2_141851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 60), 'm2', False)
    str_141852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 64), 'str', 'dtype')
    # Getting the type of 'None' (line 1686)
    None_141853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 73), 'None', False)
    # Processing the call keyword arguments (line 1686)
    kwargs_141854 = {}
    # Getting the type of 'getattr' (line 1686)
    getattr_141850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 52), 'getattr', False)
    # Calling getattr(args, kwargs) (line 1686)
    getattr_call_result_141855 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 52), getattr_141850, *[m2_141851, str_141852, None_141853], **kwargs_141854)
    
    # Assigning a type to the variable 'tuple_assignment_139170' (line 1686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 4), 'tuple_assignment_139170', getattr_call_result_141855)
    
    # Assigning a Name to a Name (line 1686):
    # Getting the type of 'tuple_assignment_139169' (line 1686)
    tuple_assignment_139169_141856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 4), 'tuple_assignment_139169')
    # Assigning a type to the variable 'dtype1' (line 1686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 5), 'dtype1', tuple_assignment_139169_141856)
    
    # Assigning a Name to a Name (line 1686):
    # Getting the type of 'tuple_assignment_139170' (line 1686)
    tuple_assignment_139170_141857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 4), 'tuple_assignment_139170')
    # Assigning a type to the variable 'dtype2' (line 1686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 13), 'dtype2', tuple_assignment_139170_141857)
    
    
    # Getting the type of 'dtype1' (line 1687)
    dtype1_141858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'dtype1')
    # Getting the type of 'dtype2' (line 1687)
    dtype2_141859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 18), 'dtype2')
    # Applying the binary operator '!=' (line 1687)
    result_ne_141860 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 8), '!=', dtype1_141858, dtype2_141859)
    
    # Testing the type of an if condition (line 1687)
    if_condition_141861 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1687, 4), result_ne_141860)
    # Assigning a type to the variable 'if_condition_141861' (line 1687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 4), 'if_condition_141861', if_condition_141861)
    # SSA begins for if statement (line 1687)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1688)
    # Processing the call arguments (line 1688)
    str_141863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 25), 'str', "Incompatible dtypes '%s'<>'%s'")
    
    # Obtaining an instance of the builtin type 'tuple' (line 1688)
    tuple_141864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 61), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1688)
    # Adding element type (line 1688)
    # Getting the type of 'dtype1' (line 1688)
    dtype1_141865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 61), 'dtype1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1688, 61), tuple_141864, dtype1_141865)
    # Adding element type (line 1688)
    # Getting the type of 'dtype2' (line 1688)
    dtype2_141866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 69), 'dtype2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1688, 61), tuple_141864, dtype2_141866)
    
    # Applying the binary operator '%' (line 1688)
    result_mod_141867 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 25), '%', str_141863, tuple_141864)
    
    # Processing the call keyword arguments (line 1688)
    kwargs_141868 = {}
    # Getting the type of 'ValueError' (line 1688)
    ValueError_141862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1688)
    ValueError_call_result_141869 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 14), ValueError_141862, *[result_mod_141867], **kwargs_141868)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1688, 8), ValueError_call_result_141869, 'raise parameter', BaseException)
    # SSA join for if statement (line 1687)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'dtype1' (line 1689)
    dtype1_141870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 7), 'dtype1')
    # Obtaining the member 'names' of a type (line 1689)
    names_141871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1689, 7), dtype1_141870, 'names')
    # Testing the type of an if condition (line 1689)
    if_condition_141872 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1689, 4), names_141871)
    # Assigning a type to the variable 'if_condition_141872' (line 1689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 4), 'if_condition_141872', if_condition_141872)
    # SSA begins for if statement (line 1689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1690):
    
    # Assigning a Call to a Name (line 1690):
    
    # Call to empty_like(...): (line 1690)
    # Processing the call arguments (line 1690)
    # Getting the type of 'm1' (line 1690)
    m1_141875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 32), 'm1', False)
    # Processing the call keyword arguments (line 1690)
    kwargs_141876 = {}
    # Getting the type of 'np' (line 1690)
    np_141873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 18), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 1690)
    empty_like_141874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 18), np_141873, 'empty_like')
    # Calling empty_like(args, kwargs) (line 1690)
    empty_like_call_result_141877 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 18), empty_like_141874, *[m1_141875], **kwargs_141876)
    
    # Assigning a type to the variable 'newmask' (line 1690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'newmask', empty_like_call_result_141877)
    
    # Call to _recursive_mask_or(...): (line 1691)
    # Processing the call arguments (line 1691)
    # Getting the type of 'm1' (line 1691)
    m1_141879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 27), 'm1', False)
    # Getting the type of 'm2' (line 1691)
    m2_141880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 31), 'm2', False)
    # Getting the type of 'newmask' (line 1691)
    newmask_141881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 35), 'newmask', False)
    # Processing the call keyword arguments (line 1691)
    kwargs_141882 = {}
    # Getting the type of '_recursive_mask_or' (line 1691)
    _recursive_mask_or_141878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 8), '_recursive_mask_or', False)
    # Calling _recursive_mask_or(args, kwargs) (line 1691)
    _recursive_mask_or_call_result_141883 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 8), _recursive_mask_or_141878, *[m1_141879, m2_141880, newmask_141881], **kwargs_141882)
    
    # Getting the type of 'newmask' (line 1692)
    newmask_141884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 15), 'newmask')
    # Assigning a type to the variable 'stypy_return_type' (line 1692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 8), 'stypy_return_type', newmask_141884)
    # SSA join for if statement (line 1689)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to make_mask(...): (line 1693)
    # Processing the call arguments (line 1693)
    
    # Call to logical_or(...): (line 1693)
    # Processing the call arguments (line 1693)
    # Getting the type of 'm1' (line 1693)
    m1_141888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 38), 'm1', False)
    # Getting the type of 'm2' (line 1693)
    m2_141889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 42), 'm2', False)
    # Processing the call keyword arguments (line 1693)
    kwargs_141890 = {}
    # Getting the type of 'umath' (line 1693)
    umath_141886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 21), 'umath', False)
    # Obtaining the member 'logical_or' of a type (line 1693)
    logical_or_141887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 21), umath_141886, 'logical_or')
    # Calling logical_or(args, kwargs) (line 1693)
    logical_or_call_result_141891 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 21), logical_or_141887, *[m1_141888, m2_141889], **kwargs_141890)
    
    # Processing the call keyword arguments (line 1693)
    # Getting the type of 'copy' (line 1693)
    copy_141892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 52), 'copy', False)
    keyword_141893 = copy_141892
    # Getting the type of 'shrink' (line 1693)
    shrink_141894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 65), 'shrink', False)
    keyword_141895 = shrink_141894
    kwargs_141896 = {'copy': keyword_141893, 'shrink': keyword_141895}
    # Getting the type of 'make_mask' (line 1693)
    make_mask_141885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 11), 'make_mask', False)
    # Calling make_mask(args, kwargs) (line 1693)
    make_mask_call_result_141897 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 11), make_mask_141885, *[logical_or_call_result_141891], **kwargs_141896)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 4), 'stypy_return_type', make_mask_call_result_141897)
    
    # ################# End of 'mask_or(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mask_or' in the type store
    # Getting the type of 'stypy_return_type' (line 1631)
    stypy_return_type_141898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141898)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mask_or'
    return stypy_return_type_141898

# Assigning a type to the variable 'mask_or' (line 1631)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 0), 'mask_or', mask_or)

@norecursion
def flatten_mask(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'flatten_mask'
    module_type_store = module_type_store.open_function_context('flatten_mask', 1696, 0, False)
    
    # Passed parameters checking function
    flatten_mask.stypy_localization = localization
    flatten_mask.stypy_type_of_self = None
    flatten_mask.stypy_type_store = module_type_store
    flatten_mask.stypy_function_name = 'flatten_mask'
    flatten_mask.stypy_param_names_list = ['mask']
    flatten_mask.stypy_varargs_param_name = None
    flatten_mask.stypy_kwargs_param_name = None
    flatten_mask.stypy_call_defaults = defaults
    flatten_mask.stypy_call_varargs = varargs
    flatten_mask.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'flatten_mask', ['mask'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'flatten_mask', localization, ['mask'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'flatten_mask(...)' code ##################

    str_141899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, (-1)), 'str', "\n    Returns a completely flattened version of the mask, where nested fields\n    are collapsed.\n\n    Parameters\n    ----------\n    mask : array_like\n        Input array, which will be interpreted as booleans.\n\n    Returns\n    -------\n    flattened_mask : ndarray of bools\n        The flattened input.\n\n    Examples\n    --------\n    >>> mask = np.array([0, 0, 1], dtype=np.bool)\n    >>> flatten_mask(mask)\n    array([False, False,  True], dtype=bool)\n\n    >>> mask = np.array([(0, 0), (0, 1)], dtype=[('a', bool), ('b', bool)])\n    >>> flatten_mask(mask)\n    array([False, False, False,  True], dtype=bool)\n\n    >>> mdtype = [('a', bool), ('b', [('ba', bool), ('bb', bool)])]\n    >>> mask = np.array([(0, (0, 0)), (0, (0, 1))], dtype=mdtype)\n    >>> flatten_mask(mask)\n    array([False, False, False, False, False,  True], dtype=bool)\n\n    ")

    @norecursion
    def _flatmask(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_flatmask'
        module_type_store = module_type_store.open_function_context('_flatmask', 1728, 4, False)
        
        # Passed parameters checking function
        _flatmask.stypy_localization = localization
        _flatmask.stypy_type_of_self = None
        _flatmask.stypy_type_store = module_type_store
        _flatmask.stypy_function_name = '_flatmask'
        _flatmask.stypy_param_names_list = ['mask']
        _flatmask.stypy_varargs_param_name = None
        _flatmask.stypy_kwargs_param_name = None
        _flatmask.stypy_call_defaults = defaults
        _flatmask.stypy_call_varargs = varargs
        _flatmask.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_flatmask', ['mask'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_flatmask', localization, ['mask'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_flatmask(...)' code ##################

        str_141900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 8), 'str', 'Flatten the mask and returns a (maybe nested) sequence of booleans.')
        
        # Assigning a Attribute to a Name (line 1730):
        
        # Assigning a Attribute to a Name (line 1730):
        # Getting the type of 'mask' (line 1730)
        mask_141901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 17), 'mask')
        # Obtaining the member 'dtype' of a type (line 1730)
        dtype_141902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 17), mask_141901, 'dtype')
        # Obtaining the member 'names' of a type (line 1730)
        names_141903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 17), dtype_141902, 'names')
        # Assigning a type to the variable 'mnames' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'mnames', names_141903)
        
        # Getting the type of 'mnames' (line 1731)
        mnames_141904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 11), 'mnames')
        # Testing the type of an if condition (line 1731)
        if_condition_141905 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1731, 8), mnames_141904)
        # Assigning a type to the variable 'if_condition_141905' (line 1731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'if_condition_141905', if_condition_141905)
        # SSA begins for if statement (line 1731)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'mnames' (line 1732)
        mnames_141913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 57), 'mnames')
        comprehension_141914 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1732, 20), mnames_141913)
        # Assigning a type to the variable 'name' (line 1732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 20), 'name', comprehension_141914)
        
        # Call to flatten_mask(...): (line 1732)
        # Processing the call arguments (line 1732)
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 1732)
        name_141907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 38), 'name', False)
        # Getting the type of 'mask' (line 1732)
        mask_141908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 33), 'mask', False)
        # Obtaining the member '__getitem__' of a type (line 1732)
        getitem___141909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 33), mask_141908, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1732)
        subscript_call_result_141910 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 33), getitem___141909, name_141907)
        
        # Processing the call keyword arguments (line 1732)
        kwargs_141911 = {}
        # Getting the type of 'flatten_mask' (line 1732)
        flatten_mask_141906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 20), 'flatten_mask', False)
        # Calling flatten_mask(args, kwargs) (line 1732)
        flatten_mask_call_result_141912 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 20), flatten_mask_141906, *[subscript_call_result_141910], **kwargs_141911)
        
        list_141915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1732, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1732, 20), list_141915, flatten_mask_call_result_141912)
        # Assigning a type to the variable 'stypy_return_type' (line 1732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 12), 'stypy_return_type', list_141915)
        # SSA branch for the else part of an if statement (line 1731)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'mask' (line 1734)
        mask_141916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 19), 'mask')
        # Assigning a type to the variable 'stypy_return_type' (line 1734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 12), 'stypy_return_type', mask_141916)
        # SSA join for if statement (line 1731)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_flatmask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_flatmask' in the type store
        # Getting the type of 'stypy_return_type' (line 1728)
        stypy_return_type_141917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141917)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_flatmask'
        return stypy_return_type_141917

    # Assigning a type to the variable '_flatmask' (line 1728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 4), '_flatmask', _flatmask)

    @norecursion
    def _flatsequence(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_flatsequence'
        module_type_store = module_type_store.open_function_context('_flatsequence', 1736, 4, False)
        
        # Passed parameters checking function
        _flatsequence.stypy_localization = localization
        _flatsequence.stypy_type_of_self = None
        _flatsequence.stypy_type_store = module_type_store
        _flatsequence.stypy_function_name = '_flatsequence'
        _flatsequence.stypy_param_names_list = ['sequence']
        _flatsequence.stypy_varargs_param_name = None
        _flatsequence.stypy_kwargs_param_name = None
        _flatsequence.stypy_call_defaults = defaults
        _flatsequence.stypy_call_varargs = varargs
        _flatsequence.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_flatsequence', ['sequence'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_flatsequence', localization, ['sequence'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_flatsequence(...)' code ##################

        str_141918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 8), 'str', 'Generates a flattened version of the sequence.')
        
        
        # SSA begins for try-except statement (line 1738)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Getting the type of 'sequence' (line 1739)
        sequence_141919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 27), 'sequence')
        # Testing the type of a for loop iterable (line 1739)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1739, 12), sequence_141919)
        # Getting the type of the for loop variable (line 1739)
        for_loop_var_141920 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1739, 12), sequence_141919)
        # Assigning a type to the variable 'element' (line 1739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1739, 12), 'element', for_loop_var_141920)
        # SSA begins for a for statement (line 1739)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 1740)
        str_141921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 36), 'str', '__iter__')
        # Getting the type of 'element' (line 1740)
        element_141922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 27), 'element')
        
        (may_be_141923, more_types_in_union_141924) = may_provide_member(str_141921, element_141922)

        if may_be_141923:

            if more_types_in_union_141924:
                # Runtime conditional SSA (line 1740)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'element' (line 1740)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 16), 'element', remove_not_member_provider_from_union(element_141922, '__iter__'))
            
            
            # Call to _flatsequence(...): (line 1741)
            # Processing the call arguments (line 1741)
            # Getting the type of 'element' (line 1741)
            element_141926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 43), 'element', False)
            # Processing the call keyword arguments (line 1741)
            kwargs_141927 = {}
            # Getting the type of '_flatsequence' (line 1741)
            _flatsequence_141925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 29), '_flatsequence', False)
            # Calling _flatsequence(args, kwargs) (line 1741)
            _flatsequence_call_result_141928 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 29), _flatsequence_141925, *[element_141926], **kwargs_141927)
            
            # Testing the type of a for loop iterable (line 1741)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1741, 20), _flatsequence_call_result_141928)
            # Getting the type of the for loop variable (line 1741)
            for_loop_var_141929 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1741, 20), _flatsequence_call_result_141928)
            # Assigning a type to the variable 'f' (line 1741)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 20), 'f', for_loop_var_141929)
            # SSA begins for a for statement (line 1741)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            # Creating a generator
            # Getting the type of 'f' (line 1742)
            f_141930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 30), 'f')
            GeneratorType_141931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 24), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1742, 24), GeneratorType_141931, f_141930)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 24), 'stypy_return_type', GeneratorType_141931)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_141924:
                # Runtime conditional SSA for else branch (line 1740)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_141923) or more_types_in_union_141924):
            # Assigning a type to the variable 'element' (line 1740)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1740, 16), 'element', remove_member_provider_from_union(element_141922, '__iter__'))
            # Creating a generator
            # Getting the type of 'element' (line 1744)
            element_141932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 26), 'element')
            GeneratorType_141933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1744, 20), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1744, 20), GeneratorType_141933, element_141932)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 20), 'stypy_return_type', GeneratorType_141933)

            if (may_be_141923 and more_types_in_union_141924):
                # SSA join for if statement (line 1740)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 1738)
        # SSA branch for the except 'TypeError' branch of a try statement (line 1738)
        module_type_store.open_ssa_branch('except')
        # Creating a generator
        # Getting the type of 'sequence' (line 1746)
        sequence_141934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 18), 'sequence')
        GeneratorType_141935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1746, 12), GeneratorType_141935, sequence_141934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 12), 'stypy_return_type', GeneratorType_141935)
        # SSA join for try-except statement (line 1738)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_flatsequence(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_flatsequence' in the type store
        # Getting the type of 'stypy_return_type' (line 1736)
        stypy_return_type_141936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_141936)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_flatsequence'
        return stypy_return_type_141936

    # Assigning a type to the variable '_flatsequence' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 4), '_flatsequence', _flatsequence)
    
    # Assigning a Call to a Name (line 1748):
    
    # Assigning a Call to a Name (line 1748):
    
    # Call to asarray(...): (line 1748)
    # Processing the call arguments (line 1748)
    # Getting the type of 'mask' (line 1748)
    mask_141939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 22), 'mask', False)
    # Processing the call keyword arguments (line 1748)
    kwargs_141940 = {}
    # Getting the type of 'np' (line 1748)
    np_141937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 11), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1748)
    asarray_141938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 11), np_141937, 'asarray')
    # Calling asarray(args, kwargs) (line 1748)
    asarray_call_result_141941 = invoke(stypy.reporting.localization.Localization(__file__, 1748, 11), asarray_141938, *[mask_141939], **kwargs_141940)
    
    # Assigning a type to the variable 'mask' (line 1748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 4), 'mask', asarray_call_result_141941)
    
    # Assigning a Call to a Name (line 1749):
    
    # Assigning a Call to a Name (line 1749):
    
    # Call to _flatsequence(...): (line 1749)
    # Processing the call arguments (line 1749)
    
    # Call to _flatmask(...): (line 1749)
    # Processing the call arguments (line 1749)
    # Getting the type of 'mask' (line 1749)
    mask_141944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 40), 'mask', False)
    # Processing the call keyword arguments (line 1749)
    kwargs_141945 = {}
    # Getting the type of '_flatmask' (line 1749)
    _flatmask_141943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 30), '_flatmask', False)
    # Calling _flatmask(args, kwargs) (line 1749)
    _flatmask_call_result_141946 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 30), _flatmask_141943, *[mask_141944], **kwargs_141945)
    
    # Processing the call keyword arguments (line 1749)
    kwargs_141947 = {}
    # Getting the type of '_flatsequence' (line 1749)
    _flatsequence_141942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 16), '_flatsequence', False)
    # Calling _flatsequence(args, kwargs) (line 1749)
    _flatsequence_call_result_141948 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 16), _flatsequence_141942, *[_flatmask_call_result_141946], **kwargs_141947)
    
    # Assigning a type to the variable 'flattened' (line 1749)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 4), 'flattened', _flatsequence_call_result_141948)
    
    # Call to array(...): (line 1750)
    # Processing the call arguments (line 1750)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'flattened' (line 1750)
    flattened_141952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 32), 'flattened', False)
    comprehension_141953 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1750, 21), flattened_141952)
    # Assigning a type to the variable '_' (line 1750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1750, 21), '_', comprehension_141953)
    # Getting the type of '_' (line 1750)
    __141951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 21), '_', False)
    list_141954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1750, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1750, 21), list_141954, __141951)
    # Processing the call keyword arguments (line 1750)
    # Getting the type of 'bool' (line 1750)
    bool_141955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 50), 'bool', False)
    keyword_141956 = bool_141955
    kwargs_141957 = {'dtype': keyword_141956}
    # Getting the type of 'np' (line 1750)
    np_141949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 11), 'np', False)
    # Obtaining the member 'array' of a type (line 1750)
    array_141950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1750, 11), np_141949, 'array')
    # Calling array(args, kwargs) (line 1750)
    array_call_result_141958 = invoke(stypy.reporting.localization.Localization(__file__, 1750, 11), array_141950, *[list_141954], **kwargs_141957)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1750, 4), 'stypy_return_type', array_call_result_141958)
    
    # ################# End of 'flatten_mask(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'flatten_mask' in the type store
    # Getting the type of 'stypy_return_type' (line 1696)
    stypy_return_type_141959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141959)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'flatten_mask'
    return stypy_return_type_141959

# Assigning a type to the variable 'flatten_mask' (line 1696)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 0), 'flatten_mask', flatten_mask)

@norecursion
def _check_mask_axis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check_mask_axis'
    module_type_store = module_type_store.open_function_context('_check_mask_axis', 1753, 0, False)
    
    # Passed parameters checking function
    _check_mask_axis.stypy_localization = localization
    _check_mask_axis.stypy_type_of_self = None
    _check_mask_axis.stypy_type_store = module_type_store
    _check_mask_axis.stypy_function_name = '_check_mask_axis'
    _check_mask_axis.stypy_param_names_list = ['mask', 'axis']
    _check_mask_axis.stypy_varargs_param_name = None
    _check_mask_axis.stypy_kwargs_param_name = None
    _check_mask_axis.stypy_call_defaults = defaults
    _check_mask_axis.stypy_call_varargs = varargs
    _check_mask_axis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check_mask_axis', ['mask', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check_mask_axis', localization, ['mask', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check_mask_axis(...)' code ##################

    str_141960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 4), 'str', 'Check whether there are masked values along the given axis')
    
    
    # Getting the type of 'mask' (line 1755)
    mask_141961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 7), 'mask')
    # Getting the type of 'nomask' (line 1755)
    nomask_141962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 19), 'nomask')
    # Applying the binary operator 'isnot' (line 1755)
    result_is_not_141963 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 7), 'isnot', mask_141961, nomask_141962)
    
    # Testing the type of an if condition (line 1755)
    if_condition_141964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1755, 4), result_is_not_141963)
    # Assigning a type to the variable 'if_condition_141964' (line 1755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1755, 4), 'if_condition_141964', if_condition_141964)
    # SSA begins for if statement (line 1755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to all(...): (line 1756)
    # Processing the call keyword arguments (line 1756)
    # Getting the type of 'axis' (line 1756)
    axis_141967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 29), 'axis', False)
    keyword_141968 = axis_141967
    kwargs_141969 = {'axis': keyword_141968}
    # Getting the type of 'mask' (line 1756)
    mask_141965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 15), 'mask', False)
    # Obtaining the member 'all' of a type (line 1756)
    all_141966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1756, 15), mask_141965, 'all')
    # Calling all(args, kwargs) (line 1756)
    all_call_result_141970 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 15), all_141966, *[], **kwargs_141969)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 8), 'stypy_return_type', all_call_result_141970)
    # SSA join for if statement (line 1755)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'nomask' (line 1757)
    nomask_141971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 11), 'nomask')
    # Assigning a type to the variable 'stypy_return_type' (line 1757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 4), 'stypy_return_type', nomask_141971)
    
    # ################# End of '_check_mask_axis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check_mask_axis' in the type store
    # Getting the type of 'stypy_return_type' (line 1753)
    stypy_return_type_141972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_141972)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check_mask_axis'
    return stypy_return_type_141972

# Assigning a type to the variable '_check_mask_axis' (line 1753)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 0), '_check_mask_axis', _check_mask_axis)

@norecursion
def masked_where(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1764)
    True_141973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 36), 'True')
    defaults = [True_141973]
    # Create a new context for function 'masked_where'
    module_type_store = module_type_store.open_function_context('masked_where', 1764, 0, False)
    
    # Passed parameters checking function
    masked_where.stypy_localization = localization
    masked_where.stypy_type_of_self = None
    masked_where.stypy_type_store = module_type_store
    masked_where.stypy_function_name = 'masked_where'
    masked_where.stypy_param_names_list = ['condition', 'a', 'copy']
    masked_where.stypy_varargs_param_name = None
    masked_where.stypy_kwargs_param_name = None
    masked_where.stypy_call_defaults = defaults
    masked_where.stypy_call_varargs = varargs
    masked_where.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_where', ['condition', 'a', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_where', localization, ['condition', 'a', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_where(...)' code ##################

    str_141974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1861, (-1)), 'str', "\n    Mask an array where a condition is met.\n\n    Return `a` as an array masked where `condition` is True.\n    Any masked values of `a` or `condition` are also masked in the output.\n\n    Parameters\n    ----------\n    condition : array_like\n        Masking condition.  When `condition` tests floating point values for\n        equality, consider using ``masked_values`` instead.\n    a : array_like\n        Array to mask.\n    copy : bool\n        If True (default) make a copy of `a` in the result.  If False modify\n        `a` in place and return a view.\n\n    Returns\n    -------\n    result : MaskedArray\n        The result of masking `a` where `condition` is True.\n\n    See Also\n    --------\n    masked_values : Mask using floating point equality.\n    masked_equal : Mask where equal to a given value.\n    masked_not_equal : Mask where `not` equal to a given value.\n    masked_less_equal : Mask where less than or equal to a given value.\n    masked_greater_equal : Mask where greater than or equal to a given value.\n    masked_less : Mask where less than a given value.\n    masked_greater : Mask where greater than a given value.\n    masked_inside : Mask inside a given interval.\n    masked_outside : Mask outside a given interval.\n    masked_invalid : Mask invalid values (NaNs or infs).\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_where(a <= 2, a)\n    masked_array(data = [-- -- -- 3],\n          mask = [ True  True  True False],\n          fill_value=999999)\n\n    Mask array `b` conditional on `a`.\n\n    >>> b = ['a', 'b', 'c', 'd']\n    >>> ma.masked_where(a == 2, b)\n    masked_array(data = [a b -- d],\n          mask = [False False  True False],\n          fill_value=N/A)\n\n    Effect of the `copy` argument.\n\n    >>> c = ma.masked_where(a <= 2, a)\n    >>> c\n    masked_array(data = [-- -- -- 3],\n          mask = [ True  True  True False],\n          fill_value=999999)\n    >>> c[0] = 99\n    >>> c\n    masked_array(data = [99 -- -- 3],\n          mask = [False  True  True False],\n          fill_value=999999)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> c = ma.masked_where(a <= 2, a, copy=False)\n    >>> c[0] = 99\n    >>> c\n    masked_array(data = [99 -- -- 3],\n          mask = [False  True  True False],\n          fill_value=999999)\n    >>> a\n    array([99,  1,  2,  3])\n\n    When `condition` or `a` contain masked values.\n\n    >>> a = np.arange(4)\n    >>> a = ma.masked_where(a == 2, a)\n    >>> a\n    masked_array(data = [0 1 -- 3],\n          mask = [False False  True False],\n          fill_value=999999)\n    >>> b = np.arange(4)\n    >>> b = ma.masked_where(b == 0, b)\n    >>> b\n    masked_array(data = [-- 1 2 3],\n          mask = [ True False False False],\n          fill_value=999999)\n    >>> ma.masked_where(a == 3, b)\n    masked_array(data = [-- 1 -- --],\n          mask = [ True False  True  True],\n          fill_value=999999)\n\n    ")
    
    # Assigning a Call to a Name (line 1863):
    
    # Assigning a Call to a Name (line 1863):
    
    # Call to make_mask(...): (line 1863)
    # Processing the call arguments (line 1863)
    # Getting the type of 'condition' (line 1863)
    condition_141976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 21), 'condition', False)
    # Processing the call keyword arguments (line 1863)
    kwargs_141977 = {}
    # Getting the type of 'make_mask' (line 1863)
    make_mask_141975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 11), 'make_mask', False)
    # Calling make_mask(args, kwargs) (line 1863)
    make_mask_call_result_141978 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 11), make_mask_141975, *[condition_141976], **kwargs_141977)
    
    # Assigning a type to the variable 'cond' (line 1863)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 4), 'cond', make_mask_call_result_141978)
    
    # Assigning a Call to a Name (line 1864):
    
    # Assigning a Call to a Name (line 1864):
    
    # Call to array(...): (line 1864)
    # Processing the call arguments (line 1864)
    # Getting the type of 'a' (line 1864)
    a_141981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 17), 'a', False)
    # Processing the call keyword arguments (line 1864)
    # Getting the type of 'copy' (line 1864)
    copy_141982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 25), 'copy', False)
    keyword_141983 = copy_141982
    # Getting the type of 'True' (line 1864)
    True_141984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 37), 'True', False)
    keyword_141985 = True_141984
    kwargs_141986 = {'subok': keyword_141985, 'copy': keyword_141983}
    # Getting the type of 'np' (line 1864)
    np_141979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 1864)
    array_141980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 8), np_141979, 'array')
    # Calling array(args, kwargs) (line 1864)
    array_call_result_141987 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 8), array_141980, *[a_141981], **kwargs_141986)
    
    # Assigning a type to the variable 'a' (line 1864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 4), 'a', array_call_result_141987)
    
    # Assigning a Tuple to a Tuple (line 1866):
    
    # Assigning a Attribute to a Name (line 1866):
    # Getting the type of 'cond' (line 1866)
    cond_141988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 24), 'cond')
    # Obtaining the member 'shape' of a type (line 1866)
    shape_141989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 24), cond_141988, 'shape')
    # Assigning a type to the variable 'tuple_assignment_139171' (line 1866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'tuple_assignment_139171', shape_141989)
    
    # Assigning a Attribute to a Name (line 1866):
    # Getting the type of 'a' (line 1866)
    a_141990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 36), 'a')
    # Obtaining the member 'shape' of a type (line 1866)
    shape_141991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 36), a_141990, 'shape')
    # Assigning a type to the variable 'tuple_assignment_139172' (line 1866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'tuple_assignment_139172', shape_141991)
    
    # Assigning a Name to a Name (line 1866):
    # Getting the type of 'tuple_assignment_139171' (line 1866)
    tuple_assignment_139171_141992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'tuple_assignment_139171')
    # Assigning a type to the variable 'cshape' (line 1866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 5), 'cshape', tuple_assignment_139171_141992)
    
    # Assigning a Name to a Name (line 1866):
    # Getting the type of 'tuple_assignment_139172' (line 1866)
    tuple_assignment_139172_141993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'tuple_assignment_139172')
    # Assigning a type to the variable 'ashape' (line 1866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 13), 'ashape', tuple_assignment_139172_141993)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'cshape' (line 1867)
    cshape_141994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 7), 'cshape')
    
    # Getting the type of 'cshape' (line 1867)
    cshape_141995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 18), 'cshape')
    # Getting the type of 'ashape' (line 1867)
    ashape_141996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 28), 'ashape')
    # Applying the binary operator '!=' (line 1867)
    result_ne_141997 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 18), '!=', cshape_141995, ashape_141996)
    
    # Applying the binary operator 'and' (line 1867)
    result_and_keyword_141998 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 7), 'and', cshape_141994, result_ne_141997)
    
    # Testing the type of an if condition (line 1867)
    if_condition_141999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1867, 4), result_and_keyword_141998)
    # Assigning a type to the variable 'if_condition_141999' (line 1867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 4), 'if_condition_141999', if_condition_141999)
    # SSA begins for if statement (line 1867)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to IndexError(...): (line 1868)
    # Processing the call arguments (line 1868)
    str_142001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 25), 'str', 'Inconsistant shape between the condition and the input (got %s and %s)')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1869)
    tuple_142002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1869)
    # Adding element type (line 1869)
    # Getting the type of 'cshape' (line 1869)
    cshape_142003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 47), 'cshape', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1869, 47), tuple_142002, cshape_142003)
    # Adding element type (line 1869)
    # Getting the type of 'ashape' (line 1869)
    ashape_142004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 55), 'ashape', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1869, 47), tuple_142002, ashape_142004)
    
    # Applying the binary operator '%' (line 1868)
    result_mod_142005 = python_operator(stypy.reporting.localization.Localization(__file__, 1868, 25), '%', str_142001, tuple_142002)
    
    # Processing the call keyword arguments (line 1868)
    kwargs_142006 = {}
    # Getting the type of 'IndexError' (line 1868)
    IndexError_142000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 14), 'IndexError', False)
    # Calling IndexError(args, kwargs) (line 1868)
    IndexError_call_result_142007 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 14), IndexError_142000, *[result_mod_142005], **kwargs_142006)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1868, 8), IndexError_call_result_142007, 'raise parameter', BaseException)
    # SSA join for if statement (line 1867)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1870)
    str_142008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1870, 18), 'str', '_mask')
    # Getting the type of 'a' (line 1870)
    a_142009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 15), 'a')
    
    (may_be_142010, more_types_in_union_142011) = may_provide_member(str_142008, a_142009)

    if may_be_142010:

        if more_types_in_union_142011:
            # Runtime conditional SSA (line 1870)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'a' (line 1870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'a', remove_not_member_provider_from_union(a_142009, '_mask'))
        
        # Assigning a Call to a Name (line 1871):
        
        # Assigning a Call to a Name (line 1871):
        
        # Call to mask_or(...): (line 1871)
        # Processing the call arguments (line 1871)
        # Getting the type of 'cond' (line 1871)
        cond_142013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 23), 'cond', False)
        # Getting the type of 'a' (line 1871)
        a_142014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 29), 'a', False)
        # Obtaining the member '_mask' of a type (line 1871)
        _mask_142015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 29), a_142014, '_mask')
        # Processing the call keyword arguments (line 1871)
        kwargs_142016 = {}
        # Getting the type of 'mask_or' (line 1871)
        mask_or_142012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 15), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 1871)
        mask_or_call_result_142017 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 15), mask_or_142012, *[cond_142013, _mask_142015], **kwargs_142016)
        
        # Assigning a type to the variable 'cond' (line 1871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 8), 'cond', mask_or_call_result_142017)
        
        # Assigning a Call to a Name (line 1872):
        
        # Assigning a Call to a Name (line 1872):
        
        # Call to type(...): (line 1872)
        # Processing the call arguments (line 1872)
        # Getting the type of 'a' (line 1872)
        a_142019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 19), 'a', False)
        # Processing the call keyword arguments (line 1872)
        kwargs_142020 = {}
        # Getting the type of 'type' (line 1872)
        type_142018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 14), 'type', False)
        # Calling type(args, kwargs) (line 1872)
        type_call_result_142021 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 14), type_142018, *[a_142019], **kwargs_142020)
        
        # Assigning a type to the variable 'cls' (line 1872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 8), 'cls', type_call_result_142021)

        if more_types_in_union_142011:
            # Runtime conditional SSA for else branch (line 1870)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_142010) or more_types_in_union_142011):
        # Assigning a type to the variable 'a' (line 1870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'a', remove_member_provider_from_union(a_142009, '_mask'))
        
        # Assigning a Name to a Name (line 1874):
        
        # Assigning a Name to a Name (line 1874):
        # Getting the type of 'MaskedArray' (line 1874)
        MaskedArray_142022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 14), 'MaskedArray')
        # Assigning a type to the variable 'cls' (line 1874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 8), 'cls', MaskedArray_142022)

        if (may_be_142010 and more_types_in_union_142011):
            # SSA join for if statement (line 1870)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1875):
    
    # Assigning a Call to a Name (line 1875):
    
    # Call to view(...): (line 1875)
    # Processing the call arguments (line 1875)
    # Getting the type of 'cls' (line 1875)
    cls_142025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 20), 'cls', False)
    # Processing the call keyword arguments (line 1875)
    kwargs_142026 = {}
    # Getting the type of 'a' (line 1875)
    a_142023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 13), 'a', False)
    # Obtaining the member 'view' of a type (line 1875)
    view_142024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 13), a_142023, 'view')
    # Calling view(args, kwargs) (line 1875)
    view_call_result_142027 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 13), view_142024, *[cls_142025], **kwargs_142026)
    
    # Assigning a type to the variable 'result' (line 1875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 4), 'result', view_call_result_142027)
    
    # Assigning a Name to a Attribute (line 1877):
    
    # Assigning a Name to a Attribute (line 1877):
    # Getting the type of 'cond' (line 1877)
    cond_142028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 18), 'cond')
    # Getting the type of 'result' (line 1877)
    result_142029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 4), 'result')
    # Setting the type of the member 'mask' of a type (line 1877)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 4), result_142029, 'mask', cond_142028)
    # Getting the type of 'result' (line 1878)
    result_142030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 4), 'stypy_return_type', result_142030)
    
    # ################# End of 'masked_where(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_where' in the type store
    # Getting the type of 'stypy_return_type' (line 1764)
    stypy_return_type_142031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142031)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_where'
    return stypy_return_type_142031

# Assigning a type to the variable 'masked_where' (line 1764)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 0), 'masked_where', masked_where)

@norecursion
def masked_greater(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1881)
    True_142032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 34), 'True')
    defaults = [True_142032]
    # Create a new context for function 'masked_greater'
    module_type_store = module_type_store.open_function_context('masked_greater', 1881, 0, False)
    
    # Passed parameters checking function
    masked_greater.stypy_localization = localization
    masked_greater.stypy_type_of_self = None
    masked_greater.stypy_type_store = module_type_store
    masked_greater.stypy_function_name = 'masked_greater'
    masked_greater.stypy_param_names_list = ['x', 'value', 'copy']
    masked_greater.stypy_varargs_param_name = None
    masked_greater.stypy_kwargs_param_name = None
    masked_greater.stypy_call_defaults = defaults
    masked_greater.stypy_call_varargs = varargs
    masked_greater.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_greater', ['x', 'value', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_greater', localization, ['x', 'value', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_greater(...)' code ##################

    str_142033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, (-1)), 'str', '\n    Mask an array where greater than a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x > value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_greater(a, 2)\n    masked_array(data = [0 1 2 --],\n          mask = [False False False  True],\n          fill_value=999999)\n\n    ')
    
    # Call to masked_where(...): (line 1904)
    # Processing the call arguments (line 1904)
    
    # Call to greater(...): (line 1904)
    # Processing the call arguments (line 1904)
    # Getting the type of 'x' (line 1904)
    x_142036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 32), 'x', False)
    # Getting the type of 'value' (line 1904)
    value_142037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 35), 'value', False)
    # Processing the call keyword arguments (line 1904)
    kwargs_142038 = {}
    # Getting the type of 'greater' (line 1904)
    greater_142035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 24), 'greater', False)
    # Calling greater(args, kwargs) (line 1904)
    greater_call_result_142039 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 24), greater_142035, *[x_142036, value_142037], **kwargs_142038)
    
    # Getting the type of 'x' (line 1904)
    x_142040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 43), 'x', False)
    # Processing the call keyword arguments (line 1904)
    # Getting the type of 'copy' (line 1904)
    copy_142041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 51), 'copy', False)
    keyword_142042 = copy_142041
    kwargs_142043 = {'copy': keyword_142042}
    # Getting the type of 'masked_where' (line 1904)
    masked_where_142034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 11), 'masked_where', False)
    # Calling masked_where(args, kwargs) (line 1904)
    masked_where_call_result_142044 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 11), masked_where_142034, *[greater_call_result_142039, x_142040], **kwargs_142043)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 4), 'stypy_return_type', masked_where_call_result_142044)
    
    # ################# End of 'masked_greater(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_greater' in the type store
    # Getting the type of 'stypy_return_type' (line 1881)
    stypy_return_type_142045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142045)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_greater'
    return stypy_return_type_142045

# Assigning a type to the variable 'masked_greater' (line 1881)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 0), 'masked_greater', masked_greater)

@norecursion
def masked_greater_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1907)
    True_142046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 40), 'True')
    defaults = [True_142046]
    # Create a new context for function 'masked_greater_equal'
    module_type_store = module_type_store.open_function_context('masked_greater_equal', 1907, 0, False)
    
    # Passed parameters checking function
    masked_greater_equal.stypy_localization = localization
    masked_greater_equal.stypy_type_of_self = None
    masked_greater_equal.stypy_type_store = module_type_store
    masked_greater_equal.stypy_function_name = 'masked_greater_equal'
    masked_greater_equal.stypy_param_names_list = ['x', 'value', 'copy']
    masked_greater_equal.stypy_varargs_param_name = None
    masked_greater_equal.stypy_kwargs_param_name = None
    masked_greater_equal.stypy_call_defaults = defaults
    masked_greater_equal.stypy_call_varargs = varargs
    masked_greater_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_greater_equal', ['x', 'value', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_greater_equal', localization, ['x', 'value', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_greater_equal(...)' code ##################

    str_142047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, (-1)), 'str', '\n    Mask an array where greater than or equal to a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x >= value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_greater_equal(a, 2)\n    masked_array(data = [0 1 -- --],\n          mask = [False False  True  True],\n          fill_value=999999)\n\n    ')
    
    # Call to masked_where(...): (line 1930)
    # Processing the call arguments (line 1930)
    
    # Call to greater_equal(...): (line 1930)
    # Processing the call arguments (line 1930)
    # Getting the type of 'x' (line 1930)
    x_142050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 38), 'x', False)
    # Getting the type of 'value' (line 1930)
    value_142051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 41), 'value', False)
    # Processing the call keyword arguments (line 1930)
    kwargs_142052 = {}
    # Getting the type of 'greater_equal' (line 1930)
    greater_equal_142049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 24), 'greater_equal', False)
    # Calling greater_equal(args, kwargs) (line 1930)
    greater_equal_call_result_142053 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 24), greater_equal_142049, *[x_142050, value_142051], **kwargs_142052)
    
    # Getting the type of 'x' (line 1930)
    x_142054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 49), 'x', False)
    # Processing the call keyword arguments (line 1930)
    # Getting the type of 'copy' (line 1930)
    copy_142055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 57), 'copy', False)
    keyword_142056 = copy_142055
    kwargs_142057 = {'copy': keyword_142056}
    # Getting the type of 'masked_where' (line 1930)
    masked_where_142048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 11), 'masked_where', False)
    # Calling masked_where(args, kwargs) (line 1930)
    masked_where_call_result_142058 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 11), masked_where_142048, *[greater_equal_call_result_142053, x_142054], **kwargs_142057)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 4), 'stypy_return_type', masked_where_call_result_142058)
    
    # ################# End of 'masked_greater_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_greater_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 1907)
    stypy_return_type_142059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142059)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_greater_equal'
    return stypy_return_type_142059

# Assigning a type to the variable 'masked_greater_equal' (line 1907)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 0), 'masked_greater_equal', masked_greater_equal)

@norecursion
def masked_less(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1933)
    True_142060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 31), 'True')
    defaults = [True_142060]
    # Create a new context for function 'masked_less'
    module_type_store = module_type_store.open_function_context('masked_less', 1933, 0, False)
    
    # Passed parameters checking function
    masked_less.stypy_localization = localization
    masked_less.stypy_type_of_self = None
    masked_less.stypy_type_store = module_type_store
    masked_less.stypy_function_name = 'masked_less'
    masked_less.stypy_param_names_list = ['x', 'value', 'copy']
    masked_less.stypy_varargs_param_name = None
    masked_less.stypy_kwargs_param_name = None
    masked_less.stypy_call_defaults = defaults
    masked_less.stypy_call_varargs = varargs
    masked_less.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_less', ['x', 'value', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_less', localization, ['x', 'value', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_less(...)' code ##################

    str_142061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1955, (-1)), 'str', '\n    Mask an array where less than a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x < value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_less(a, 2)\n    masked_array(data = [-- -- 2 3],\n          mask = [ True  True False False],\n          fill_value=999999)\n\n    ')
    
    # Call to masked_where(...): (line 1956)
    # Processing the call arguments (line 1956)
    
    # Call to less(...): (line 1956)
    # Processing the call arguments (line 1956)
    # Getting the type of 'x' (line 1956)
    x_142064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 29), 'x', False)
    # Getting the type of 'value' (line 1956)
    value_142065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 32), 'value', False)
    # Processing the call keyword arguments (line 1956)
    kwargs_142066 = {}
    # Getting the type of 'less' (line 1956)
    less_142063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 24), 'less', False)
    # Calling less(args, kwargs) (line 1956)
    less_call_result_142067 = invoke(stypy.reporting.localization.Localization(__file__, 1956, 24), less_142063, *[x_142064, value_142065], **kwargs_142066)
    
    # Getting the type of 'x' (line 1956)
    x_142068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 40), 'x', False)
    # Processing the call keyword arguments (line 1956)
    # Getting the type of 'copy' (line 1956)
    copy_142069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 48), 'copy', False)
    keyword_142070 = copy_142069
    kwargs_142071 = {'copy': keyword_142070}
    # Getting the type of 'masked_where' (line 1956)
    masked_where_142062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 11), 'masked_where', False)
    # Calling masked_where(args, kwargs) (line 1956)
    masked_where_call_result_142072 = invoke(stypy.reporting.localization.Localization(__file__, 1956, 11), masked_where_142062, *[less_call_result_142067, x_142068], **kwargs_142071)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 4), 'stypy_return_type', masked_where_call_result_142072)
    
    # ################# End of 'masked_less(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_less' in the type store
    # Getting the type of 'stypy_return_type' (line 1933)
    stypy_return_type_142073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142073)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_less'
    return stypy_return_type_142073

# Assigning a type to the variable 'masked_less' (line 1933)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 0), 'masked_less', masked_less)

@norecursion
def masked_less_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1959)
    True_142074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 37), 'True')
    defaults = [True_142074]
    # Create a new context for function 'masked_less_equal'
    module_type_store = module_type_store.open_function_context('masked_less_equal', 1959, 0, False)
    
    # Passed parameters checking function
    masked_less_equal.stypy_localization = localization
    masked_less_equal.stypy_type_of_self = None
    masked_less_equal.stypy_type_store = module_type_store
    masked_less_equal.stypy_function_name = 'masked_less_equal'
    masked_less_equal.stypy_param_names_list = ['x', 'value', 'copy']
    masked_less_equal.stypy_varargs_param_name = None
    masked_less_equal.stypy_kwargs_param_name = None
    masked_less_equal.stypy_call_defaults = defaults
    masked_less_equal.stypy_call_varargs = varargs
    masked_less_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_less_equal', ['x', 'value', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_less_equal', localization, ['x', 'value', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_less_equal(...)' code ##################

    str_142075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, (-1)), 'str', '\n    Mask an array where less than or equal to a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x <= value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_less_equal(a, 2)\n    masked_array(data = [-- -- -- 3],\n          mask = [ True  True  True False],\n          fill_value=999999)\n\n    ')
    
    # Call to masked_where(...): (line 1982)
    # Processing the call arguments (line 1982)
    
    # Call to less_equal(...): (line 1982)
    # Processing the call arguments (line 1982)
    # Getting the type of 'x' (line 1982)
    x_142078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 35), 'x', False)
    # Getting the type of 'value' (line 1982)
    value_142079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 38), 'value', False)
    # Processing the call keyword arguments (line 1982)
    kwargs_142080 = {}
    # Getting the type of 'less_equal' (line 1982)
    less_equal_142077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 24), 'less_equal', False)
    # Calling less_equal(args, kwargs) (line 1982)
    less_equal_call_result_142081 = invoke(stypy.reporting.localization.Localization(__file__, 1982, 24), less_equal_142077, *[x_142078, value_142079], **kwargs_142080)
    
    # Getting the type of 'x' (line 1982)
    x_142082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 46), 'x', False)
    # Processing the call keyword arguments (line 1982)
    # Getting the type of 'copy' (line 1982)
    copy_142083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 54), 'copy', False)
    keyword_142084 = copy_142083
    kwargs_142085 = {'copy': keyword_142084}
    # Getting the type of 'masked_where' (line 1982)
    masked_where_142076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 11), 'masked_where', False)
    # Calling masked_where(args, kwargs) (line 1982)
    masked_where_call_result_142086 = invoke(stypy.reporting.localization.Localization(__file__, 1982, 11), masked_where_142076, *[less_equal_call_result_142081, x_142082], **kwargs_142085)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 4), 'stypy_return_type', masked_where_call_result_142086)
    
    # ################# End of 'masked_less_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_less_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 1959)
    stypy_return_type_142087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142087)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_less_equal'
    return stypy_return_type_142087

# Assigning a type to the variable 'masked_less_equal' (line 1959)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 0), 'masked_less_equal', masked_less_equal)

@norecursion
def masked_not_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 1985)
    True_142088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 36), 'True')
    defaults = [True_142088]
    # Create a new context for function 'masked_not_equal'
    module_type_store = module_type_store.open_function_context('masked_not_equal', 1985, 0, False)
    
    # Passed parameters checking function
    masked_not_equal.stypy_localization = localization
    masked_not_equal.stypy_type_of_self = None
    masked_not_equal.stypy_type_store = module_type_store
    masked_not_equal.stypy_function_name = 'masked_not_equal'
    masked_not_equal.stypy_param_names_list = ['x', 'value', 'copy']
    masked_not_equal.stypy_varargs_param_name = None
    masked_not_equal.stypy_kwargs_param_name = None
    masked_not_equal.stypy_call_defaults = defaults
    masked_not_equal.stypy_call_varargs = varargs
    masked_not_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_not_equal', ['x', 'value', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_not_equal', localization, ['x', 'value', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_not_equal(...)' code ##################

    str_142089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2007, (-1)), 'str', '\n    Mask an array where `not` equal to a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x != value).\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_not_equal(a, 2)\n    masked_array(data = [-- -- 2 --],\n          mask = [ True  True False  True],\n          fill_value=999999)\n\n    ')
    
    # Call to masked_where(...): (line 2008)
    # Processing the call arguments (line 2008)
    
    # Call to not_equal(...): (line 2008)
    # Processing the call arguments (line 2008)
    # Getting the type of 'x' (line 2008)
    x_142092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 34), 'x', False)
    # Getting the type of 'value' (line 2008)
    value_142093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 37), 'value', False)
    # Processing the call keyword arguments (line 2008)
    kwargs_142094 = {}
    # Getting the type of 'not_equal' (line 2008)
    not_equal_142091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 24), 'not_equal', False)
    # Calling not_equal(args, kwargs) (line 2008)
    not_equal_call_result_142095 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 24), not_equal_142091, *[x_142092, value_142093], **kwargs_142094)
    
    # Getting the type of 'x' (line 2008)
    x_142096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 45), 'x', False)
    # Processing the call keyword arguments (line 2008)
    # Getting the type of 'copy' (line 2008)
    copy_142097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 53), 'copy', False)
    keyword_142098 = copy_142097
    kwargs_142099 = {'copy': keyword_142098}
    # Getting the type of 'masked_where' (line 2008)
    masked_where_142090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 11), 'masked_where', False)
    # Calling masked_where(args, kwargs) (line 2008)
    masked_where_call_result_142100 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 11), masked_where_142090, *[not_equal_call_result_142095, x_142096], **kwargs_142099)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 4), 'stypy_return_type', masked_where_call_result_142100)
    
    # ################# End of 'masked_not_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_not_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 1985)
    stypy_return_type_142101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142101)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_not_equal'
    return stypy_return_type_142101

# Assigning a type to the variable 'masked_not_equal' (line 1985)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 0), 'masked_not_equal', masked_not_equal)

@norecursion
def masked_equal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 2011)
    True_142102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 32), 'True')
    defaults = [True_142102]
    # Create a new context for function 'masked_equal'
    module_type_store = module_type_store.open_function_context('masked_equal', 2011, 0, False)
    
    # Passed parameters checking function
    masked_equal.stypy_localization = localization
    masked_equal.stypy_type_of_self = None
    masked_equal.stypy_type_store = module_type_store
    masked_equal.stypy_function_name = 'masked_equal'
    masked_equal.stypy_param_names_list = ['x', 'value', 'copy']
    masked_equal.stypy_varargs_param_name = None
    masked_equal.stypy_kwargs_param_name = None
    masked_equal.stypy_call_defaults = defaults
    masked_equal.stypy_call_varargs = varargs
    masked_equal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_equal', ['x', 'value', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_equal', localization, ['x', 'value', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_equal(...)' code ##################

    str_142103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2035, (-1)), 'str', '\n    Mask an array where equal to a given value.\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = (x == value).  For floating point arrays,\n    consider using ``masked_values(x, value)``.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n    masked_values : Mask using floating point equality.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(4)\n    >>> a\n    array([0, 1, 2, 3])\n    >>> ma.masked_equal(a, 2)\n    masked_array(data = [0 1 -- 3],\n          mask = [False False  True False],\n          fill_value=999999)\n\n    ')
    
    # Assigning a Call to a Name (line 2036):
    
    # Assigning a Call to a Name (line 2036):
    
    # Call to masked_where(...): (line 2036)
    # Processing the call arguments (line 2036)
    
    # Call to equal(...): (line 2036)
    # Processing the call arguments (line 2036)
    # Getting the type of 'x' (line 2036)
    x_142106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 32), 'x', False)
    # Getting the type of 'value' (line 2036)
    value_142107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 35), 'value', False)
    # Processing the call keyword arguments (line 2036)
    kwargs_142108 = {}
    # Getting the type of 'equal' (line 2036)
    equal_142105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 26), 'equal', False)
    # Calling equal(args, kwargs) (line 2036)
    equal_call_result_142109 = invoke(stypy.reporting.localization.Localization(__file__, 2036, 26), equal_142105, *[x_142106, value_142107], **kwargs_142108)
    
    # Getting the type of 'x' (line 2036)
    x_142110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 43), 'x', False)
    # Processing the call keyword arguments (line 2036)
    # Getting the type of 'copy' (line 2036)
    copy_142111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 51), 'copy', False)
    keyword_142112 = copy_142111
    kwargs_142113 = {'copy': keyword_142112}
    # Getting the type of 'masked_where' (line 2036)
    masked_where_142104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 13), 'masked_where', False)
    # Calling masked_where(args, kwargs) (line 2036)
    masked_where_call_result_142114 = invoke(stypy.reporting.localization.Localization(__file__, 2036, 13), masked_where_142104, *[equal_call_result_142109, x_142110], **kwargs_142113)
    
    # Assigning a type to the variable 'output' (line 2036)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2036, 4), 'output', masked_where_call_result_142114)
    
    # Assigning a Name to a Attribute (line 2037):
    
    # Assigning a Name to a Attribute (line 2037):
    # Getting the type of 'value' (line 2037)
    value_142115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 24), 'value')
    # Getting the type of 'output' (line 2037)
    output_142116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 4), 'output')
    # Setting the type of the member 'fill_value' of a type (line 2037)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2037, 4), output_142116, 'fill_value', value_142115)
    # Getting the type of 'output' (line 2038)
    output_142117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 11), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 2038)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2038, 4), 'stypy_return_type', output_142117)
    
    # ################# End of 'masked_equal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_equal' in the type store
    # Getting the type of 'stypy_return_type' (line 2011)
    stypy_return_type_142118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142118)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_equal'
    return stypy_return_type_142118

# Assigning a type to the variable 'masked_equal' (line 2011)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2011, 0), 'masked_equal', masked_equal)

@norecursion
def masked_inside(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 2041)
    True_142119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 34), 'True')
    defaults = [True_142119]
    # Create a new context for function 'masked_inside'
    module_type_store = module_type_store.open_function_context('masked_inside', 2041, 0, False)
    
    # Passed parameters checking function
    masked_inside.stypy_localization = localization
    masked_inside.stypy_type_of_self = None
    masked_inside.stypy_type_store = module_type_store
    masked_inside.stypy_function_name = 'masked_inside'
    masked_inside.stypy_param_names_list = ['x', 'v1', 'v2', 'copy']
    masked_inside.stypy_varargs_param_name = None
    masked_inside.stypy_kwargs_param_name = None
    masked_inside.stypy_call_defaults = defaults
    masked_inside.stypy_call_varargs = varargs
    masked_inside.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_inside', ['x', 'v1', 'v2', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_inside', localization, ['x', 'v1', 'v2', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_inside(...)' code ##################

    str_142120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2073, (-1)), 'str', "\n    Mask an array inside a given interval.\n\n    Shortcut to ``masked_where``, where `condition` is True for `x` inside\n    the interval [v1,v2] (v1 <= x <= v2).  The boundaries `v1` and `v2`\n    can be given in either order.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The array `x` is prefilled with its filling value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\n    >>> ma.masked_inside(x, -0.3, 0.3)\n    masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],\n          mask = [False False  True  True False False],\n          fill_value=1e+20)\n\n    The order of `v1` and `v2` doesn't matter.\n\n    >>> ma.masked_inside(x, 0.3, -0.3)\n    masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],\n          mask = [False False  True  True False False],\n          fill_value=1e+20)\n\n    ")
    
    
    # Getting the type of 'v2' (line 2074)
    v2_142121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 7), 'v2')
    # Getting the type of 'v1' (line 2074)
    v1_142122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 12), 'v1')
    # Applying the binary operator '<' (line 2074)
    result_lt_142123 = python_operator(stypy.reporting.localization.Localization(__file__, 2074, 7), '<', v2_142121, v1_142122)
    
    # Testing the type of an if condition (line 2074)
    if_condition_142124 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2074, 4), result_lt_142123)
    # Assigning a type to the variable 'if_condition_142124' (line 2074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 4), 'if_condition_142124', if_condition_142124)
    # SSA begins for if statement (line 2074)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 2075):
    
    # Assigning a Name to a Name (line 2075):
    # Getting the type of 'v2' (line 2075)
    v2_142125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 20), 'v2')
    # Assigning a type to the variable 'tuple_assignment_139173' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 8), 'tuple_assignment_139173', v2_142125)
    
    # Assigning a Name to a Name (line 2075):
    # Getting the type of 'v1' (line 2075)
    v1_142126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 24), 'v1')
    # Assigning a type to the variable 'tuple_assignment_139174' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 8), 'tuple_assignment_139174', v1_142126)
    
    # Assigning a Name to a Name (line 2075):
    # Getting the type of 'tuple_assignment_139173' (line 2075)
    tuple_assignment_139173_142127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 8), 'tuple_assignment_139173')
    # Assigning a type to the variable 'v1' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 9), 'v1', tuple_assignment_139173_142127)
    
    # Assigning a Name to a Name (line 2075):
    # Getting the type of 'tuple_assignment_139174' (line 2075)
    tuple_assignment_139174_142128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 8), 'tuple_assignment_139174')
    # Assigning a type to the variable 'v2' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 13), 'v2', tuple_assignment_139174_142128)
    # SSA join for if statement (line 2074)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2076):
    
    # Assigning a Call to a Name (line 2076):
    
    # Call to filled(...): (line 2076)
    # Processing the call arguments (line 2076)
    # Getting the type of 'x' (line 2076)
    x_142130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 16), 'x', False)
    # Processing the call keyword arguments (line 2076)
    kwargs_142131 = {}
    # Getting the type of 'filled' (line 2076)
    filled_142129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 9), 'filled', False)
    # Calling filled(args, kwargs) (line 2076)
    filled_call_result_142132 = invoke(stypy.reporting.localization.Localization(__file__, 2076, 9), filled_142129, *[x_142130], **kwargs_142131)
    
    # Assigning a type to the variable 'xf' (line 2076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2076, 4), 'xf', filled_call_result_142132)
    
    # Assigning a BinOp to a Name (line 2077):
    
    # Assigning a BinOp to a Name (line 2077):
    
    # Getting the type of 'xf' (line 2077)
    xf_142133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 17), 'xf')
    # Getting the type of 'v1' (line 2077)
    v1_142134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 23), 'v1')
    # Applying the binary operator '>=' (line 2077)
    result_ge_142135 = python_operator(stypy.reporting.localization.Localization(__file__, 2077, 17), '>=', xf_142133, v1_142134)
    
    
    # Getting the type of 'xf' (line 2077)
    xf_142136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 30), 'xf')
    # Getting the type of 'v2' (line 2077)
    v2_142137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 36), 'v2')
    # Applying the binary operator '<=' (line 2077)
    result_le_142138 = python_operator(stypy.reporting.localization.Localization(__file__, 2077, 30), '<=', xf_142136, v2_142137)
    
    # Applying the binary operator '&' (line 2077)
    result_and__142139 = python_operator(stypy.reporting.localization.Localization(__file__, 2077, 16), '&', result_ge_142135, result_le_142138)
    
    # Assigning a type to the variable 'condition' (line 2077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2077, 4), 'condition', result_and__142139)
    
    # Call to masked_where(...): (line 2078)
    # Processing the call arguments (line 2078)
    # Getting the type of 'condition' (line 2078)
    condition_142141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 24), 'condition', False)
    # Getting the type of 'x' (line 2078)
    x_142142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 35), 'x', False)
    # Processing the call keyword arguments (line 2078)
    # Getting the type of 'copy' (line 2078)
    copy_142143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 43), 'copy', False)
    keyword_142144 = copy_142143
    kwargs_142145 = {'copy': keyword_142144}
    # Getting the type of 'masked_where' (line 2078)
    masked_where_142140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 11), 'masked_where', False)
    # Calling masked_where(args, kwargs) (line 2078)
    masked_where_call_result_142146 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 11), masked_where_142140, *[condition_142141, x_142142], **kwargs_142145)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2078)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 4), 'stypy_return_type', masked_where_call_result_142146)
    
    # ################# End of 'masked_inside(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_inside' in the type store
    # Getting the type of 'stypy_return_type' (line 2041)
    stypy_return_type_142147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142147)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_inside'
    return stypy_return_type_142147

# Assigning a type to the variable 'masked_inside' (line 2041)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 0), 'masked_inside', masked_inside)

@norecursion
def masked_outside(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 2081)
    True_142148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 35), 'True')
    defaults = [True_142148]
    # Create a new context for function 'masked_outside'
    module_type_store = module_type_store.open_function_context('masked_outside', 2081, 0, False)
    
    # Passed parameters checking function
    masked_outside.stypy_localization = localization
    masked_outside.stypy_type_of_self = None
    masked_outside.stypy_type_store = module_type_store
    masked_outside.stypy_function_name = 'masked_outside'
    masked_outside.stypy_param_names_list = ['x', 'v1', 'v2', 'copy']
    masked_outside.stypy_varargs_param_name = None
    masked_outside.stypy_kwargs_param_name = None
    masked_outside.stypy_call_defaults = defaults
    masked_outside.stypy_call_varargs = varargs
    masked_outside.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_outside', ['x', 'v1', 'v2', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_outside', localization, ['x', 'v1', 'v2', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_outside(...)' code ##################

    str_142149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2113, (-1)), 'str', "\n    Mask an array outside a given interval.\n\n    Shortcut to ``masked_where``, where `condition` is True for `x` outside\n    the interval [v1,v2] (x < v1)|(x > v2).\n    The boundaries `v1` and `v2` can be given in either order.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The array `x` is prefilled with its filling value.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\n    >>> ma.masked_outside(x, -0.3, 0.3)\n    masked_array(data = [-- -- 0.01 0.2 -- --],\n          mask = [ True  True False False  True  True],\n          fill_value=1e+20)\n\n    The order of `v1` and `v2` doesn't matter.\n\n    >>> ma.masked_outside(x, 0.3, -0.3)\n    masked_array(data = [-- -- 0.01 0.2 -- --],\n          mask = [ True  True False False  True  True],\n          fill_value=1e+20)\n\n    ")
    
    
    # Getting the type of 'v2' (line 2114)
    v2_142150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 7), 'v2')
    # Getting the type of 'v1' (line 2114)
    v1_142151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 12), 'v1')
    # Applying the binary operator '<' (line 2114)
    result_lt_142152 = python_operator(stypy.reporting.localization.Localization(__file__, 2114, 7), '<', v2_142150, v1_142151)
    
    # Testing the type of an if condition (line 2114)
    if_condition_142153 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2114, 4), result_lt_142152)
    # Assigning a type to the variable 'if_condition_142153' (line 2114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2114, 4), 'if_condition_142153', if_condition_142153)
    # SSA begins for if statement (line 2114)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 2115):
    
    # Assigning a Name to a Name (line 2115):
    # Getting the type of 'v2' (line 2115)
    v2_142154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 20), 'v2')
    # Assigning a type to the variable 'tuple_assignment_139175' (line 2115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 8), 'tuple_assignment_139175', v2_142154)
    
    # Assigning a Name to a Name (line 2115):
    # Getting the type of 'v1' (line 2115)
    v1_142155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 24), 'v1')
    # Assigning a type to the variable 'tuple_assignment_139176' (line 2115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 8), 'tuple_assignment_139176', v1_142155)
    
    # Assigning a Name to a Name (line 2115):
    # Getting the type of 'tuple_assignment_139175' (line 2115)
    tuple_assignment_139175_142156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 8), 'tuple_assignment_139175')
    # Assigning a type to the variable 'v1' (line 2115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 9), 'v1', tuple_assignment_139175_142156)
    
    # Assigning a Name to a Name (line 2115):
    # Getting the type of 'tuple_assignment_139176' (line 2115)
    tuple_assignment_139176_142157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 8), 'tuple_assignment_139176')
    # Assigning a type to the variable 'v2' (line 2115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 13), 'v2', tuple_assignment_139176_142157)
    # SSA join for if statement (line 2114)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2116):
    
    # Assigning a Call to a Name (line 2116):
    
    # Call to filled(...): (line 2116)
    # Processing the call arguments (line 2116)
    # Getting the type of 'x' (line 2116)
    x_142159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 16), 'x', False)
    # Processing the call keyword arguments (line 2116)
    kwargs_142160 = {}
    # Getting the type of 'filled' (line 2116)
    filled_142158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 9), 'filled', False)
    # Calling filled(args, kwargs) (line 2116)
    filled_call_result_142161 = invoke(stypy.reporting.localization.Localization(__file__, 2116, 9), filled_142158, *[x_142159], **kwargs_142160)
    
    # Assigning a type to the variable 'xf' (line 2116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2116, 4), 'xf', filled_call_result_142161)
    
    # Assigning a BinOp to a Name (line 2117):
    
    # Assigning a BinOp to a Name (line 2117):
    
    # Getting the type of 'xf' (line 2117)
    xf_142162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 17), 'xf')
    # Getting the type of 'v1' (line 2117)
    v1_142163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 22), 'v1')
    # Applying the binary operator '<' (line 2117)
    result_lt_142164 = python_operator(stypy.reporting.localization.Localization(__file__, 2117, 17), '<', xf_142162, v1_142163)
    
    
    # Getting the type of 'xf' (line 2117)
    xf_142165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 29), 'xf')
    # Getting the type of 'v2' (line 2117)
    v2_142166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 34), 'v2')
    # Applying the binary operator '>' (line 2117)
    result_gt_142167 = python_operator(stypy.reporting.localization.Localization(__file__, 2117, 29), '>', xf_142165, v2_142166)
    
    # Applying the binary operator '|' (line 2117)
    result_or__142168 = python_operator(stypy.reporting.localization.Localization(__file__, 2117, 16), '|', result_lt_142164, result_gt_142167)
    
    # Assigning a type to the variable 'condition' (line 2117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2117, 4), 'condition', result_or__142168)
    
    # Call to masked_where(...): (line 2118)
    # Processing the call arguments (line 2118)
    # Getting the type of 'condition' (line 2118)
    condition_142170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 24), 'condition', False)
    # Getting the type of 'x' (line 2118)
    x_142171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 35), 'x', False)
    # Processing the call keyword arguments (line 2118)
    # Getting the type of 'copy' (line 2118)
    copy_142172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 43), 'copy', False)
    keyword_142173 = copy_142172
    kwargs_142174 = {'copy': keyword_142173}
    # Getting the type of 'masked_where' (line 2118)
    masked_where_142169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 11), 'masked_where', False)
    # Calling masked_where(args, kwargs) (line 2118)
    masked_where_call_result_142175 = invoke(stypy.reporting.localization.Localization(__file__, 2118, 11), masked_where_142169, *[condition_142170, x_142171], **kwargs_142174)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2118, 4), 'stypy_return_type', masked_where_call_result_142175)
    
    # ################# End of 'masked_outside(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_outside' in the type store
    # Getting the type of 'stypy_return_type' (line 2081)
    stypy_return_type_142176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142176)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_outside'
    return stypy_return_type_142176

# Assigning a type to the variable 'masked_outside' (line 2081)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2081, 0), 'masked_outside', masked_outside)

@norecursion
def masked_object(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 2121)
    True_142177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 33), 'True')
    # Getting the type of 'True' (line 2121)
    True_142178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 46), 'True')
    defaults = [True_142177, True_142178]
    # Create a new context for function 'masked_object'
    module_type_store = module_type_store.open_function_context('masked_object', 2121, 0, False)
    
    # Passed parameters checking function
    masked_object.stypy_localization = localization
    masked_object.stypy_type_of_self = None
    masked_object.stypy_type_store = module_type_store
    masked_object.stypy_function_name = 'masked_object'
    masked_object.stypy_param_names_list = ['x', 'value', 'copy', 'shrink']
    masked_object.stypy_varargs_param_name = None
    masked_object.stypy_kwargs_param_name = None
    masked_object.stypy_call_defaults = defaults
    masked_object.stypy_call_varargs = varargs
    masked_object.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_object', ['x', 'value', 'copy', 'shrink'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_object', localization, ['x', 'value', 'copy', 'shrink'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_object(...)' code ##################

    str_142179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2171, (-1)), 'str', "\n    Mask the array `x` where the data are exactly equal to value.\n\n    This function is similar to `masked_values`, but only suitable\n    for object arrays: for floating point, use `masked_values` instead.\n\n    Parameters\n    ----------\n    x : array_like\n        Array to mask\n    value : object\n        Comparison value\n    copy : {True, False}, optional\n        Whether to return a copy of `x`.\n    shrink : {True, False}, optional\n        Whether to collapse a mask full of False to nomask\n\n    Returns\n    -------\n    result : MaskedArray\n        The result of masking `x` where equal to `value`.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n    masked_equal : Mask where equal to a given value (integers).\n    masked_values : Mask using floating point equality.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> food = np.array(['green_eggs', 'ham'], dtype=object)\n    >>> # don't eat spoiled food\n    >>> eat = ma.masked_object(food, 'green_eggs')\n    >>> print(eat)\n    [-- ham]\n    >>> # plain ol` ham is boring\n    >>> fresh_food = np.array(['cheese', 'ham', 'pineapple'], dtype=object)\n    >>> eat = ma.masked_object(fresh_food, 'green_eggs')\n    >>> print(eat)\n    [cheese ham pineapple]\n\n    Note that `mask` is set to ``nomask`` if possible.\n\n    >>> eat\n    masked_array(data = [cheese ham pineapple],\n          mask = False,\n          fill_value=?)\n\n    ")
    
    
    # Call to isMaskedArray(...): (line 2172)
    # Processing the call arguments (line 2172)
    # Getting the type of 'x' (line 2172)
    x_142181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 21), 'x', False)
    # Processing the call keyword arguments (line 2172)
    kwargs_142182 = {}
    # Getting the type of 'isMaskedArray' (line 2172)
    isMaskedArray_142180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 7), 'isMaskedArray', False)
    # Calling isMaskedArray(args, kwargs) (line 2172)
    isMaskedArray_call_result_142183 = invoke(stypy.reporting.localization.Localization(__file__, 2172, 7), isMaskedArray_142180, *[x_142181], **kwargs_142182)
    
    # Testing the type of an if condition (line 2172)
    if_condition_142184 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2172, 4), isMaskedArray_call_result_142183)
    # Assigning a type to the variable 'if_condition_142184' (line 2172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 4), 'if_condition_142184', if_condition_142184)
    # SSA begins for if statement (line 2172)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2173):
    
    # Assigning a Call to a Name (line 2173):
    
    # Call to equal(...): (line 2173)
    # Processing the call arguments (line 2173)
    # Getting the type of 'x' (line 2173)
    x_142187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 32), 'x', False)
    # Obtaining the member '_data' of a type (line 2173)
    _data_142188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 32), x_142187, '_data')
    # Getting the type of 'value' (line 2173)
    value_142189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 41), 'value', False)
    # Processing the call keyword arguments (line 2173)
    kwargs_142190 = {}
    # Getting the type of 'umath' (line 2173)
    umath_142185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 20), 'umath', False)
    # Obtaining the member 'equal' of a type (line 2173)
    equal_142186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 20), umath_142185, 'equal')
    # Calling equal(args, kwargs) (line 2173)
    equal_call_result_142191 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 20), equal_142186, *[_data_142188, value_142189], **kwargs_142190)
    
    # Assigning a type to the variable 'condition' (line 2173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2173, 8), 'condition', equal_call_result_142191)
    
    # Assigning a Attribute to a Name (line 2174):
    
    # Assigning a Attribute to a Name (line 2174):
    # Getting the type of 'x' (line 2174)
    x_142192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 15), 'x')
    # Obtaining the member '_mask' of a type (line 2174)
    _mask_142193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2174, 15), x_142192, '_mask')
    # Assigning a type to the variable 'mask' (line 2174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 8), 'mask', _mask_142193)
    # SSA branch for the else part of an if statement (line 2172)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2176):
    
    # Assigning a Call to a Name (line 2176):
    
    # Call to equal(...): (line 2176)
    # Processing the call arguments (line 2176)
    
    # Call to asarray(...): (line 2176)
    # Processing the call arguments (line 2176)
    # Getting the type of 'x' (line 2176)
    x_142198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 43), 'x', False)
    # Processing the call keyword arguments (line 2176)
    kwargs_142199 = {}
    # Getting the type of 'np' (line 2176)
    np_142196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 32), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2176)
    asarray_142197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 32), np_142196, 'asarray')
    # Calling asarray(args, kwargs) (line 2176)
    asarray_call_result_142200 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 32), asarray_142197, *[x_142198], **kwargs_142199)
    
    # Getting the type of 'value' (line 2176)
    value_142201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 47), 'value', False)
    # Processing the call keyword arguments (line 2176)
    kwargs_142202 = {}
    # Getting the type of 'umath' (line 2176)
    umath_142194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 20), 'umath', False)
    # Obtaining the member 'equal' of a type (line 2176)
    equal_142195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2176, 20), umath_142194, 'equal')
    # Calling equal(args, kwargs) (line 2176)
    equal_call_result_142203 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 20), equal_142195, *[asarray_call_result_142200, value_142201], **kwargs_142202)
    
    # Assigning a type to the variable 'condition' (line 2176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 8), 'condition', equal_call_result_142203)
    
    # Assigning a Name to a Name (line 2177):
    
    # Assigning a Name to a Name (line 2177):
    # Getting the type of 'nomask' (line 2177)
    nomask_142204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 15), 'nomask')
    # Assigning a type to the variable 'mask' (line 2177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2177, 8), 'mask', nomask_142204)
    # SSA join for if statement (line 2172)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2178):
    
    # Assigning a Call to a Name (line 2178):
    
    # Call to mask_or(...): (line 2178)
    # Processing the call arguments (line 2178)
    # Getting the type of 'mask' (line 2178)
    mask_142206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 19), 'mask', False)
    
    # Call to make_mask(...): (line 2178)
    # Processing the call arguments (line 2178)
    # Getting the type of 'condition' (line 2178)
    condition_142208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 35), 'condition', False)
    # Processing the call keyword arguments (line 2178)
    # Getting the type of 'shrink' (line 2178)
    shrink_142209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 53), 'shrink', False)
    keyword_142210 = shrink_142209
    kwargs_142211 = {'shrink': keyword_142210}
    # Getting the type of 'make_mask' (line 2178)
    make_mask_142207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 25), 'make_mask', False)
    # Calling make_mask(args, kwargs) (line 2178)
    make_mask_call_result_142212 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 25), make_mask_142207, *[condition_142208], **kwargs_142211)
    
    # Processing the call keyword arguments (line 2178)
    kwargs_142213 = {}
    # Getting the type of 'mask_or' (line 2178)
    mask_or_142205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 11), 'mask_or', False)
    # Calling mask_or(args, kwargs) (line 2178)
    mask_or_call_result_142214 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 11), mask_or_142205, *[mask_142206, make_mask_call_result_142212], **kwargs_142213)
    
    # Assigning a type to the variable 'mask' (line 2178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 4), 'mask', mask_or_call_result_142214)
    
    # Call to masked_array(...): (line 2179)
    # Processing the call arguments (line 2179)
    # Getting the type of 'x' (line 2179)
    x_142216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 24), 'x', False)
    # Processing the call keyword arguments (line 2179)
    # Getting the type of 'mask' (line 2179)
    mask_142217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 32), 'mask', False)
    keyword_142218 = mask_142217
    # Getting the type of 'copy' (line 2179)
    copy_142219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 43), 'copy', False)
    keyword_142220 = copy_142219
    # Getting the type of 'value' (line 2179)
    value_142221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 60), 'value', False)
    keyword_142222 = value_142221
    kwargs_142223 = {'copy': keyword_142220, 'mask': keyword_142218, 'fill_value': keyword_142222}
    # Getting the type of 'masked_array' (line 2179)
    masked_array_142215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 11), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 2179)
    masked_array_call_result_142224 = invoke(stypy.reporting.localization.Localization(__file__, 2179, 11), masked_array_142215, *[x_142216], **kwargs_142223)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 4), 'stypy_return_type', masked_array_call_result_142224)
    
    # ################# End of 'masked_object(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_object' in the type store
    # Getting the type of 'stypy_return_type' (line 2121)
    stypy_return_type_142225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142225)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_object'
    return stypy_return_type_142225

# Assigning a type to the variable 'masked_object' (line 2121)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2121, 0), 'masked_object', masked_object)

@norecursion
def masked_values(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_142226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 33), 'float')
    float_142227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 44), 'float')
    # Getting the type of 'True' (line 2182)
    True_142228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 55), 'True')
    # Getting the type of 'True' (line 2182)
    True_142229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 68), 'True')
    defaults = [float_142226, float_142227, True_142228, True_142229]
    # Create a new context for function 'masked_values'
    module_type_store = module_type_store.open_function_context('masked_values', 2182, 0, False)
    
    # Passed parameters checking function
    masked_values.stypy_localization = localization
    masked_values.stypy_type_of_self = None
    masked_values.stypy_type_store = module_type_store
    masked_values.stypy_function_name = 'masked_values'
    masked_values.stypy_param_names_list = ['x', 'value', 'rtol', 'atol', 'copy', 'shrink']
    masked_values.stypy_varargs_param_name = None
    masked_values.stypy_kwargs_param_name = None
    masked_values.stypy_call_defaults = defaults
    masked_values.stypy_call_varargs = varargs
    masked_values.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_values', ['x', 'value', 'rtol', 'atol', 'copy', 'shrink'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_values', localization, ['x', 'value', 'rtol', 'atol', 'copy', 'shrink'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_values(...)' code ##################

    str_142230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, (-1)), 'str', '\n    Mask using floating point equality.\n\n    Return a MaskedArray, masked where the data in array `x` are approximately\n    equal to `value`, i.e. where the following condition is True\n\n    (abs(x - value) <= atol+rtol*abs(value))\n\n    The fill_value is set to `value` and the mask is set to ``nomask`` if\n    possible.  For integers, consider using ``masked_equal``.\n\n    Parameters\n    ----------\n    x : array_like\n        Array to mask.\n    value : float\n        Masking value.\n    rtol : float, optional\n        Tolerance parameter.\n    atol : float, optional\n        Tolerance parameter (1e-8).\n    copy : bool, optional\n        Whether to return a copy of `x`.\n    shrink : bool, optional\n        Whether to collapse a mask full of False to ``nomask``.\n\n    Returns\n    -------\n    result : MaskedArray\n        The result of masking `x` where approximately equal to `value`.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n    masked_equal : Mask where equal to a given value (integers).\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = np.array([1, 1.1, 2, 1.1, 3])\n    >>> ma.masked_values(x, 1.1)\n    masked_array(data = [1.0 -- 2.0 -- 3.0],\n          mask = [False  True False  True False],\n          fill_value=1.1)\n\n    Note that `mask` is set to ``nomask`` if possible.\n\n    >>> ma.masked_values(x, 1.5)\n    masked_array(data = [ 1.   1.1  2.   1.1  3. ],\n          mask = False,\n          fill_value=1.5)\n\n    For integers, the fill value will be different in general to the\n    result of ``masked_equal``.\n\n    >>> x = np.arange(5)\n    >>> x\n    array([0, 1, 2, 3, 4])\n    >>> ma.masked_values(x, 2)\n    masked_array(data = [0 1 -- 3 4],\n          mask = [False False  True False False],\n          fill_value=2)\n    >>> ma.masked_equal(x, 2)\n    masked_array(data = [0 1 -- 3 4],\n          mask = [False False  True False False],\n          fill_value=999999)\n\n    ')
    
    # Assigning a Attribute to a Name (line 2251):
    
    # Assigning a Attribute to a Name (line 2251):
    # Getting the type of 'umath' (line 2251)
    umath_142231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 11), 'umath')
    # Obtaining the member 'absolute' of a type (line 2251)
    absolute_142232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 11), umath_142231, 'absolute')
    # Assigning a type to the variable 'mabs' (line 2251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 4), 'mabs', absolute_142232)
    
    # Assigning a Call to a Name (line 2252):
    
    # Assigning a Call to a Name (line 2252):
    
    # Call to filled(...): (line 2252)
    # Processing the call arguments (line 2252)
    # Getting the type of 'x' (line 2252)
    x_142234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 18), 'x', False)
    # Getting the type of 'value' (line 2252)
    value_142235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 21), 'value', False)
    # Processing the call keyword arguments (line 2252)
    kwargs_142236 = {}
    # Getting the type of 'filled' (line 2252)
    filled_142233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 11), 'filled', False)
    # Calling filled(args, kwargs) (line 2252)
    filled_call_result_142237 = invoke(stypy.reporting.localization.Localization(__file__, 2252, 11), filled_142233, *[x_142234, value_142235], **kwargs_142236)
    
    # Assigning a type to the variable 'xnew' (line 2252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2252, 4), 'xnew', filled_call_result_142237)
    
    
    # Call to issubclass(...): (line 2253)
    # Processing the call arguments (line 2253)
    # Getting the type of 'xnew' (line 2253)
    xnew_142239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 18), 'xnew', False)
    # Obtaining the member 'dtype' of a type (line 2253)
    dtype_142240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2253, 18), xnew_142239, 'dtype')
    # Obtaining the member 'type' of a type (line 2253)
    type_142241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2253, 18), dtype_142240, 'type')
    # Getting the type of 'np' (line 2253)
    np_142242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 35), 'np', False)
    # Obtaining the member 'floating' of a type (line 2253)
    floating_142243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2253, 35), np_142242, 'floating')
    # Processing the call keyword arguments (line 2253)
    kwargs_142244 = {}
    # Getting the type of 'issubclass' (line 2253)
    issubclass_142238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 7), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 2253)
    issubclass_call_result_142245 = invoke(stypy.reporting.localization.Localization(__file__, 2253, 7), issubclass_142238, *[type_142241, floating_142243], **kwargs_142244)
    
    # Testing the type of an if condition (line 2253)
    if_condition_142246 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2253, 4), issubclass_call_result_142245)
    # Assigning a type to the variable 'if_condition_142246' (line 2253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2253, 4), 'if_condition_142246', if_condition_142246)
    # SSA begins for if statement (line 2253)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2254):
    
    # Assigning a Call to a Name (line 2254):
    
    # Call to less_equal(...): (line 2254)
    # Processing the call arguments (line 2254)
    
    # Call to mabs(...): (line 2255)
    # Processing the call arguments (line 2255)
    # Getting the type of 'xnew' (line 2255)
    xnew_142250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 17), 'xnew', False)
    # Getting the type of 'value' (line 2255)
    value_142251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 24), 'value', False)
    # Applying the binary operator '-' (line 2255)
    result_sub_142252 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 17), '-', xnew_142250, value_142251)
    
    # Processing the call keyword arguments (line 2255)
    kwargs_142253 = {}
    # Getting the type of 'mabs' (line 2255)
    mabs_142249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 12), 'mabs', False)
    # Calling mabs(args, kwargs) (line 2255)
    mabs_call_result_142254 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 12), mabs_142249, *[result_sub_142252], **kwargs_142253)
    
    # Getting the type of 'atol' (line 2255)
    atol_142255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 32), 'atol', False)
    # Getting the type of 'rtol' (line 2255)
    rtol_142256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 39), 'rtol', False)
    
    # Call to mabs(...): (line 2255)
    # Processing the call arguments (line 2255)
    # Getting the type of 'value' (line 2255)
    value_142258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 51), 'value', False)
    # Processing the call keyword arguments (line 2255)
    kwargs_142259 = {}
    # Getting the type of 'mabs' (line 2255)
    mabs_142257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 46), 'mabs', False)
    # Calling mabs(args, kwargs) (line 2255)
    mabs_call_result_142260 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 46), mabs_142257, *[value_142258], **kwargs_142259)
    
    # Applying the binary operator '*' (line 2255)
    result_mul_142261 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 39), '*', rtol_142256, mabs_call_result_142260)
    
    # Applying the binary operator '+' (line 2255)
    result_add_142262 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 32), '+', atol_142255, result_mul_142261)
    
    # Processing the call keyword arguments (line 2254)
    kwargs_142263 = {}
    # Getting the type of 'umath' (line 2254)
    umath_142247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 20), 'umath', False)
    # Obtaining the member 'less_equal' of a type (line 2254)
    less_equal_142248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 20), umath_142247, 'less_equal')
    # Calling less_equal(args, kwargs) (line 2254)
    less_equal_call_result_142264 = invoke(stypy.reporting.localization.Localization(__file__, 2254, 20), less_equal_142248, *[mabs_call_result_142254, result_add_142262], **kwargs_142263)
    
    # Assigning a type to the variable 'condition' (line 2254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 8), 'condition', less_equal_call_result_142264)
    
    # Assigning a Call to a Name (line 2256):
    
    # Assigning a Call to a Name (line 2256):
    
    # Call to getattr(...): (line 2256)
    # Processing the call arguments (line 2256)
    # Getting the type of 'x' (line 2256)
    x_142266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 23), 'x', False)
    str_142267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 26), 'str', '_mask')
    # Getting the type of 'nomask' (line 2256)
    nomask_142268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 35), 'nomask', False)
    # Processing the call keyword arguments (line 2256)
    kwargs_142269 = {}
    # Getting the type of 'getattr' (line 2256)
    getattr_142265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 15), 'getattr', False)
    # Calling getattr(args, kwargs) (line 2256)
    getattr_call_result_142270 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 15), getattr_142265, *[x_142266, str_142267, nomask_142268], **kwargs_142269)
    
    # Assigning a type to the variable 'mask' (line 2256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2256, 8), 'mask', getattr_call_result_142270)
    # SSA branch for the else part of an if statement (line 2253)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2258):
    
    # Assigning a Call to a Name (line 2258):
    
    # Call to equal(...): (line 2258)
    # Processing the call arguments (line 2258)
    # Getting the type of 'xnew' (line 2258)
    xnew_142273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 32), 'xnew', False)
    # Getting the type of 'value' (line 2258)
    value_142274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 38), 'value', False)
    # Processing the call keyword arguments (line 2258)
    kwargs_142275 = {}
    # Getting the type of 'umath' (line 2258)
    umath_142271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 20), 'umath', False)
    # Obtaining the member 'equal' of a type (line 2258)
    equal_142272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 20), umath_142271, 'equal')
    # Calling equal(args, kwargs) (line 2258)
    equal_call_result_142276 = invoke(stypy.reporting.localization.Localization(__file__, 2258, 20), equal_142272, *[xnew_142273, value_142274], **kwargs_142275)
    
    # Assigning a type to the variable 'condition' (line 2258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2258, 8), 'condition', equal_call_result_142276)
    
    # Assigning a Name to a Name (line 2259):
    
    # Assigning a Name to a Name (line 2259):
    # Getting the type of 'nomask' (line 2259)
    nomask_142277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 15), 'nomask')
    # Assigning a type to the variable 'mask' (line 2259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'mask', nomask_142277)
    # SSA join for if statement (line 2253)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2260):
    
    # Assigning a Call to a Name (line 2260):
    
    # Call to mask_or(...): (line 2260)
    # Processing the call arguments (line 2260)
    # Getting the type of 'mask' (line 2260)
    mask_142279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 19), 'mask', False)
    
    # Call to make_mask(...): (line 2260)
    # Processing the call arguments (line 2260)
    # Getting the type of 'condition' (line 2260)
    condition_142281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 35), 'condition', False)
    # Processing the call keyword arguments (line 2260)
    # Getting the type of 'shrink' (line 2260)
    shrink_142282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 53), 'shrink', False)
    keyword_142283 = shrink_142282
    kwargs_142284 = {'shrink': keyword_142283}
    # Getting the type of 'make_mask' (line 2260)
    make_mask_142280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 25), 'make_mask', False)
    # Calling make_mask(args, kwargs) (line 2260)
    make_mask_call_result_142285 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 25), make_mask_142280, *[condition_142281], **kwargs_142284)
    
    # Processing the call keyword arguments (line 2260)
    # Getting the type of 'shrink' (line 2260)
    shrink_142286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 69), 'shrink', False)
    keyword_142287 = shrink_142286
    kwargs_142288 = {'shrink': keyword_142287}
    # Getting the type of 'mask_or' (line 2260)
    mask_or_142278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 11), 'mask_or', False)
    # Calling mask_or(args, kwargs) (line 2260)
    mask_or_call_result_142289 = invoke(stypy.reporting.localization.Localization(__file__, 2260, 11), mask_or_142278, *[mask_142279, make_mask_call_result_142285], **kwargs_142288)
    
    # Assigning a type to the variable 'mask' (line 2260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2260, 4), 'mask', mask_or_call_result_142289)
    
    # Call to masked_array(...): (line 2261)
    # Processing the call arguments (line 2261)
    # Getting the type of 'xnew' (line 2261)
    xnew_142291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 24), 'xnew', False)
    # Processing the call keyword arguments (line 2261)
    # Getting the type of 'mask' (line 2261)
    mask_142292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 35), 'mask', False)
    keyword_142293 = mask_142292
    # Getting the type of 'copy' (line 2261)
    copy_142294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 46), 'copy', False)
    keyword_142295 = copy_142294
    # Getting the type of 'value' (line 2261)
    value_142296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 63), 'value', False)
    keyword_142297 = value_142296
    kwargs_142298 = {'copy': keyword_142295, 'mask': keyword_142293, 'fill_value': keyword_142297}
    # Getting the type of 'masked_array' (line 2261)
    masked_array_142290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 11), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 2261)
    masked_array_call_result_142299 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 11), masked_array_142290, *[xnew_142291], **kwargs_142298)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 4), 'stypy_return_type', masked_array_call_result_142299)
    
    # ################# End of 'masked_values(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_values' in the type store
    # Getting the type of 'stypy_return_type' (line 2182)
    stypy_return_type_142300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142300)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_values'
    return stypy_return_type_142300

# Assigning a type to the variable 'masked_values' (line 2182)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 0), 'masked_values', masked_values)

@norecursion
def masked_invalid(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 2264)
    True_142301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 27), 'True')
    defaults = [True_142301]
    # Create a new context for function 'masked_invalid'
    module_type_store = module_type_store.open_function_context('masked_invalid', 2264, 0, False)
    
    # Passed parameters checking function
    masked_invalid.stypy_localization = localization
    masked_invalid.stypy_type_of_self = None
    masked_invalid.stypy_type_store = module_type_store
    masked_invalid.stypy_function_name = 'masked_invalid'
    masked_invalid.stypy_param_names_list = ['a', 'copy']
    masked_invalid.stypy_varargs_param_name = None
    masked_invalid.stypy_kwargs_param_name = None
    masked_invalid.stypy_call_defaults = defaults
    masked_invalid.stypy_call_varargs = varargs
    masked_invalid.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_invalid', ['a', 'copy'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_invalid', localization, ['a', 'copy'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_invalid(...)' code ##################

    str_142302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, (-1)), 'str', '\n    Mask an array where invalid values occur (NaNs or infs).\n\n    This function is a shortcut to ``masked_where``, with\n    `condition` = ~(np.isfinite(a)). Any pre-existing mask is conserved.\n    Only applies to arrays with a dtype where NaNs or infs make sense\n    (i.e. floating point types), but accepts any array_like object.\n\n    See Also\n    --------\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(5, dtype=np.float)\n    >>> a[2] = np.NaN\n    >>> a[3] = np.PINF\n    >>> a\n    array([  0.,   1.,  NaN,  Inf,   4.])\n    >>> ma.masked_invalid(a)\n    masked_array(data = [0.0 1.0 -- -- 4.0],\n          mask = [False False  True  True False],\n          fill_value=1e+20)\n\n    ')
    
    # Assigning a Call to a Name (line 2291):
    
    # Assigning a Call to a Name (line 2291):
    
    # Call to array(...): (line 2291)
    # Processing the call arguments (line 2291)
    # Getting the type of 'a' (line 2291)
    a_142305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 17), 'a', False)
    # Processing the call keyword arguments (line 2291)
    # Getting the type of 'copy' (line 2291)
    copy_142306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 25), 'copy', False)
    keyword_142307 = copy_142306
    # Getting the type of 'True' (line 2291)
    True_142308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 37), 'True', False)
    keyword_142309 = True_142308
    kwargs_142310 = {'subok': keyword_142309, 'copy': keyword_142307}
    # Getting the type of 'np' (line 2291)
    np_142303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 2291)
    array_142304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2291, 8), np_142303, 'array')
    # Calling array(args, kwargs) (line 2291)
    array_call_result_142311 = invoke(stypy.reporting.localization.Localization(__file__, 2291, 8), array_142304, *[a_142305], **kwargs_142310)
    
    # Assigning a type to the variable 'a' (line 2291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2291, 4), 'a', array_call_result_142311)
    
    # Assigning a Call to a Name (line 2292):
    
    # Assigning a Call to a Name (line 2292):
    
    # Call to getattr(...): (line 2292)
    # Processing the call arguments (line 2292)
    # Getting the type of 'a' (line 2292)
    a_142313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 19), 'a', False)
    str_142314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2292, 22), 'str', '_mask')
    # Getting the type of 'None' (line 2292)
    None_142315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 31), 'None', False)
    # Processing the call keyword arguments (line 2292)
    kwargs_142316 = {}
    # Getting the type of 'getattr' (line 2292)
    getattr_142312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 11), 'getattr', False)
    # Calling getattr(args, kwargs) (line 2292)
    getattr_call_result_142317 = invoke(stypy.reporting.localization.Localization(__file__, 2292, 11), getattr_142312, *[a_142313, str_142314, None_142315], **kwargs_142316)
    
    # Assigning a type to the variable 'mask' (line 2292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 4), 'mask', getattr_call_result_142317)
    
    # Type idiom detected: calculating its left and rigth part (line 2293)
    # Getting the type of 'mask' (line 2293)
    mask_142318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'mask')
    # Getting the type of 'None' (line 2293)
    None_142319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 19), 'None')
    
    (may_be_142320, more_types_in_union_142321) = may_not_be_none(mask_142318, None_142319)

    if may_be_142320:

        if more_types_in_union_142321:
            # Runtime conditional SSA (line 2293)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a UnaryOp to a Name (line 2294):
        
        # Assigning a UnaryOp to a Name (line 2294):
        
        
        # Call to isfinite(...): (line 2294)
        # Processing the call arguments (line 2294)
        
        # Call to getdata(...): (line 2294)
        # Processing the call arguments (line 2294)
        # Getting the type of 'a' (line 2294)
        a_142325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 42), 'a', False)
        # Processing the call keyword arguments (line 2294)
        kwargs_142326 = {}
        # Getting the type of 'getdata' (line 2294)
        getdata_142324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 34), 'getdata', False)
        # Calling getdata(args, kwargs) (line 2294)
        getdata_call_result_142327 = invoke(stypy.reporting.localization.Localization(__file__, 2294, 34), getdata_142324, *[a_142325], **kwargs_142326)
        
        # Processing the call keyword arguments (line 2294)
        kwargs_142328 = {}
        # Getting the type of 'np' (line 2294)
        np_142322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 22), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2294)
        isfinite_142323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2294, 22), np_142322, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2294)
        isfinite_call_result_142329 = invoke(stypy.reporting.localization.Localization(__file__, 2294, 22), isfinite_142323, *[getdata_call_result_142327], **kwargs_142328)
        
        # Applying the '~' unary operator (line 2294)
        result_inv_142330 = python_operator(stypy.reporting.localization.Localization(__file__, 2294, 20), '~', isfinite_call_result_142329)
        
        # Assigning a type to the variable 'condition' (line 2294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'condition', result_inv_142330)
        
        
        # Getting the type of 'mask' (line 2295)
        mask_142331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 11), 'mask')
        # Getting the type of 'nomask' (line 2295)
        nomask_142332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 23), 'nomask')
        # Applying the binary operator 'isnot' (line 2295)
        result_is_not_142333 = python_operator(stypy.reporting.localization.Localization(__file__, 2295, 11), 'isnot', mask_142331, nomask_142332)
        
        # Testing the type of an if condition (line 2295)
        if_condition_142334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2295, 8), result_is_not_142333)
        # Assigning a type to the variable 'if_condition_142334' (line 2295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 8), 'if_condition_142334', if_condition_142334)
        # SSA begins for if statement (line 2295)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'condition' (line 2296)
        condition_142335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 12), 'condition')
        # Getting the type of 'mask' (line 2296)
        mask_142336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 25), 'mask')
        # Applying the binary operator '|=' (line 2296)
        result_ior_142337 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 12), '|=', condition_142335, mask_142336)
        # Assigning a type to the variable 'condition' (line 2296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2296, 12), 'condition', result_ior_142337)
        
        # SSA join for if statement (line 2295)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2297):
        
        # Assigning a Call to a Name (line 2297):
        
        # Call to type(...): (line 2297)
        # Processing the call arguments (line 2297)
        # Getting the type of 'a' (line 2297)
        a_142339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 19), 'a', False)
        # Processing the call keyword arguments (line 2297)
        kwargs_142340 = {}
        # Getting the type of 'type' (line 2297)
        type_142338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 14), 'type', False)
        # Calling type(args, kwargs) (line 2297)
        type_call_result_142341 = invoke(stypy.reporting.localization.Localization(__file__, 2297, 14), type_142338, *[a_142339], **kwargs_142340)
        
        # Assigning a type to the variable 'cls' (line 2297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 8), 'cls', type_call_result_142341)

        if more_types_in_union_142321:
            # Runtime conditional SSA for else branch (line 2293)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_142320) or more_types_in_union_142321):
        
        # Assigning a UnaryOp to a Name (line 2299):
        
        # Assigning a UnaryOp to a Name (line 2299):
        
        
        # Call to isfinite(...): (line 2299)
        # Processing the call arguments (line 2299)
        # Getting the type of 'a' (line 2299)
        a_142344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 34), 'a', False)
        # Processing the call keyword arguments (line 2299)
        kwargs_142345 = {}
        # Getting the type of 'np' (line 2299)
        np_142342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 22), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 2299)
        isfinite_142343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 22), np_142342, 'isfinite')
        # Calling isfinite(args, kwargs) (line 2299)
        isfinite_call_result_142346 = invoke(stypy.reporting.localization.Localization(__file__, 2299, 22), isfinite_142343, *[a_142344], **kwargs_142345)
        
        # Applying the '~' unary operator (line 2299)
        result_inv_142347 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 20), '~', isfinite_call_result_142346)
        
        # Assigning a type to the variable 'condition' (line 2299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2299, 8), 'condition', result_inv_142347)
        
        # Assigning a Name to a Name (line 2300):
        
        # Assigning a Name to a Name (line 2300):
        # Getting the type of 'MaskedArray' (line 2300)
        MaskedArray_142348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 14), 'MaskedArray')
        # Assigning a type to the variable 'cls' (line 2300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 8), 'cls', MaskedArray_142348)

        if (may_be_142320 and more_types_in_union_142321):
            # SSA join for if statement (line 2293)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2301):
    
    # Assigning a Call to a Name (line 2301):
    
    # Call to view(...): (line 2301)
    # Processing the call arguments (line 2301)
    # Getting the type of 'cls' (line 2301)
    cls_142351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 20), 'cls', False)
    # Processing the call keyword arguments (line 2301)
    kwargs_142352 = {}
    # Getting the type of 'a' (line 2301)
    a_142349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 13), 'a', False)
    # Obtaining the member 'view' of a type (line 2301)
    view_142350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2301, 13), a_142349, 'view')
    # Calling view(args, kwargs) (line 2301)
    view_call_result_142353 = invoke(stypy.reporting.localization.Localization(__file__, 2301, 13), view_142350, *[cls_142351], **kwargs_142352)
    
    # Assigning a type to the variable 'result' (line 2301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 4), 'result', view_call_result_142353)
    
    # Assigning a Name to a Attribute (line 2302):
    
    # Assigning a Name to a Attribute (line 2302):
    # Getting the type of 'condition' (line 2302)
    condition_142354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 19), 'condition')
    # Getting the type of 'result' (line 2302)
    result_142355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2302, 4), 'result')
    # Setting the type of the member '_mask' of a type (line 2302)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2302, 4), result_142355, '_mask', condition_142354)
    # Getting the type of 'result' (line 2303)
    result_142356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 2303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2303, 4), 'stypy_return_type', result_142356)
    
    # ################# End of 'masked_invalid(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_invalid' in the type store
    # Getting the type of 'stypy_return_type' (line 2264)
    stypy_return_type_142357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142357)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_invalid'
    return stypy_return_type_142357

# Assigning a type to the variable 'masked_invalid' (line 2264)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2264, 0), 'masked_invalid', masked_invalid)
# Declaration of the '_MaskedPrintOption' class

class _MaskedPrintOption:
    str_142358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2315, (-1)), 'str', '\n    Handle the string used to represent missing data in a masked array.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2317, 4, False)
        # Assigning a type to the variable 'self' (line 2318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedPrintOption.__init__', ['display'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['display'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_142359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2321, (-1)), 'str', '\n        Create the masked_print_option object.\n\n        ')
        
        # Assigning a Name to a Attribute (line 2322):
        
        # Assigning a Name to a Attribute (line 2322):
        # Getting the type of 'display' (line 2322)
        display_142360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 24), 'display')
        # Getting the type of 'self' (line 2322)
        self_142361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 8), 'self')
        # Setting the type of the member '_display' of a type (line 2322)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2322, 8), self_142361, '_display', display_142360)
        
        # Assigning a Name to a Attribute (line 2323):
        
        # Assigning a Name to a Attribute (line 2323):
        # Getting the type of 'True' (line 2323)
        True_142362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 24), 'True')
        # Getting the type of 'self' (line 2323)
        self_142363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 8), 'self')
        # Setting the type of the member '_enabled' of a type (line 2323)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2323, 8), self_142363, '_enabled', True_142362)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def display(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'display'
        module_type_store = module_type_store.open_function_context('display', 2325, 4, False)
        # Assigning a type to the variable 'self' (line 2326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2326, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_localization', localization)
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_function_name', '_MaskedPrintOption.display')
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_param_names_list', [])
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedPrintOption.display.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedPrintOption.display', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'display', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'display(...)' code ##################

        str_142364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2329, (-1)), 'str', '\n        Display the string to print for masked values.\n\n        ')
        # Getting the type of 'self' (line 2330)
        self_142365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 15), 'self')
        # Obtaining the member '_display' of a type (line 2330)
        _display_142366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 15), self_142365, '_display')
        # Assigning a type to the variable 'stypy_return_type' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 8), 'stypy_return_type', _display_142366)
        
        # ################# End of 'display(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'display' in the type store
        # Getting the type of 'stypy_return_type' (line 2325)
        stypy_return_type_142367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142367)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'display'
        return stypy_return_type_142367


    @norecursion
    def set_display(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_display'
        module_type_store = module_type_store.open_function_context('set_display', 2332, 4, False)
        # Assigning a type to the variable 'self' (line 2333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2333, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_localization', localization)
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_function_name', '_MaskedPrintOption.set_display')
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_param_names_list', ['s'])
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedPrintOption.set_display.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedPrintOption.set_display', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_display', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_display(...)' code ##################

        str_142368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2336, (-1)), 'str', '\n        Set the string to print for masked values.\n\n        ')
        
        # Assigning a Name to a Attribute (line 2337):
        
        # Assigning a Name to a Attribute (line 2337):
        # Getting the type of 's' (line 2337)
        s_142369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 24), 's')
        # Getting the type of 'self' (line 2337)
        self_142370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 8), 'self')
        # Setting the type of the member '_display' of a type (line 2337)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2337, 8), self_142370, '_display', s_142369)
        
        # ################# End of 'set_display(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_display' in the type store
        # Getting the type of 'stypy_return_type' (line 2332)
        stypy_return_type_142371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142371)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_display'
        return stypy_return_type_142371


    @norecursion
    def enabled(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'enabled'
        module_type_store = module_type_store.open_function_context('enabled', 2339, 4, False)
        # Assigning a type to the variable 'self' (line 2340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_localization', localization)
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_function_name', '_MaskedPrintOption.enabled')
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_param_names_list', [])
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedPrintOption.enabled.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedPrintOption.enabled', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'enabled', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'enabled(...)' code ##################

        str_142372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2343, (-1)), 'str', '\n        Is the use of the display value enabled?\n\n        ')
        # Getting the type of 'self' (line 2344)
        self_142373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 15), 'self')
        # Obtaining the member '_enabled' of a type (line 2344)
        _enabled_142374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 15), self_142373, '_enabled')
        # Assigning a type to the variable 'stypy_return_type' (line 2344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2344, 8), 'stypy_return_type', _enabled_142374)
        
        # ################# End of 'enabled(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'enabled' in the type store
        # Getting the type of 'stypy_return_type' (line 2339)
        stypy_return_type_142375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142375)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'enabled'
        return stypy_return_type_142375


    @norecursion
    def enable(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_142376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2346, 28), 'int')
        defaults = [int_142376]
        # Create a new context for function 'enable'
        module_type_store = module_type_store.open_function_context('enable', 2346, 4, False)
        # Assigning a type to the variable 'self' (line 2347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_localization', localization)
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_function_name', '_MaskedPrintOption.enable')
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_param_names_list', ['shrink'])
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedPrintOption.enable.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedPrintOption.enable', ['shrink'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'enable', localization, ['shrink'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'enable(...)' code ##################

        str_142377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, (-1)), 'str', '\n        Set the enabling shrink to `shrink`.\n\n        ')
        
        # Assigning a Name to a Attribute (line 2351):
        
        # Assigning a Name to a Attribute (line 2351):
        # Getting the type of 'shrink' (line 2351)
        shrink_142378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 24), 'shrink')
        # Getting the type of 'self' (line 2351)
        self_142379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 8), 'self')
        # Setting the type of the member '_enabled' of a type (line 2351)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 8), self_142379, '_enabled', shrink_142378)
        
        # ################# End of 'enable(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'enable' in the type store
        # Getting the type of 'stypy_return_type' (line 2346)
        stypy_return_type_142380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142380)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'enable'
        return stypy_return_type_142380


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 2353, 4, False)
        # Assigning a type to the variable 'self' (line 2354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2354, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_function_name', '_MaskedPrintOption.__str__')
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _MaskedPrintOption.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_MaskedPrintOption.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Call to str(...): (line 2354)
        # Processing the call arguments (line 2354)
        # Getting the type of 'self' (line 2354)
        self_142382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 19), 'self', False)
        # Obtaining the member '_display' of a type (line 2354)
        _display_142383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 19), self_142382, '_display')
        # Processing the call keyword arguments (line 2354)
        kwargs_142384 = {}
        # Getting the type of 'str' (line 2354)
        str_142381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 15), 'str', False)
        # Calling str(args, kwargs) (line 2354)
        str_call_result_142385 = invoke(stypy.reporting.localization.Localization(__file__, 2354, 15), str_142381, *[_display_142383], **kwargs_142384)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2354, 8), 'stypy_return_type', str_call_result_142385)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 2353)
        stypy_return_type_142386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142386)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_142386

    
    # Assigning a Name to a Name (line 2356):

# Assigning a type to the variable '_MaskedPrintOption' (line 2311)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2311, 0), '_MaskedPrintOption', _MaskedPrintOption)

# Assigning a Name to a Name (line 2356):
# Getting the type of '_MaskedPrintOption'
_MaskedPrintOption_142387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_MaskedPrintOption')
# Obtaining the member '__str__' of a type
str___142388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _MaskedPrintOption_142387, '__str__')
# Getting the type of '_MaskedPrintOption'
_MaskedPrintOption_142389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_MaskedPrintOption')
# Setting the type of the member '__repr__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _MaskedPrintOption_142389, '__repr__', str___142388)

# Assigning a Call to a Name (line 2359):

# Assigning a Call to a Name (line 2359):

# Call to _MaskedPrintOption(...): (line 2359)
# Processing the call arguments (line 2359)
str_142391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2359, 41), 'str', '--')
# Processing the call keyword arguments (line 2359)
kwargs_142392 = {}
# Getting the type of '_MaskedPrintOption' (line 2359)
_MaskedPrintOption_142390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 22), '_MaskedPrintOption', False)
# Calling _MaskedPrintOption(args, kwargs) (line 2359)
_MaskedPrintOption_call_result_142393 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 22), _MaskedPrintOption_142390, *[str_142391], **kwargs_142392)

# Assigning a type to the variable 'masked_print_option' (line 2359)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 0), 'masked_print_option', _MaskedPrintOption_call_result_142393)

@norecursion
def _recursive_printoption(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_recursive_printoption'
    module_type_store = module_type_store.open_function_context('_recursive_printoption', 2362, 0, False)
    
    # Passed parameters checking function
    _recursive_printoption.stypy_localization = localization
    _recursive_printoption.stypy_type_of_self = None
    _recursive_printoption.stypy_type_store = module_type_store
    _recursive_printoption.stypy_function_name = '_recursive_printoption'
    _recursive_printoption.stypy_param_names_list = ['result', 'mask', 'printopt']
    _recursive_printoption.stypy_varargs_param_name = None
    _recursive_printoption.stypy_kwargs_param_name = None
    _recursive_printoption.stypy_call_defaults = defaults
    _recursive_printoption.stypy_call_varargs = varargs
    _recursive_printoption.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_recursive_printoption', ['result', 'mask', 'printopt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_recursive_printoption', localization, ['result', 'mask', 'printopt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_recursive_printoption(...)' code ##################

    str_142394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2368, (-1)), 'str', '\n    Puts printoptions in result where mask is True.\n\n    Private function allowing for recursion\n\n    ')
    
    # Assigning a Attribute to a Name (line 2369):
    
    # Assigning a Attribute to a Name (line 2369):
    # Getting the type of 'result' (line 2369)
    result_142395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'result')
    # Obtaining the member 'dtype' of a type (line 2369)
    dtype_142396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 12), result_142395, 'dtype')
    # Obtaining the member 'names' of a type (line 2369)
    names_142397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 12), dtype_142396, 'names')
    # Assigning a type to the variable 'names' (line 2369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'names', names_142397)
    
    # Getting the type of 'names' (line 2370)
    names_142398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 16), 'names')
    # Testing the type of a for loop iterable (line 2370)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2370, 4), names_142398)
    # Getting the type of the for loop variable (line 2370)
    for_loop_var_142399 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2370, 4), names_142398)
    # Assigning a type to the variable 'name' (line 2370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2370, 4), 'name', for_loop_var_142399)
    # SSA begins for a for statement (line 2370)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Tuple to a Tuple (line 2371):
    
    # Assigning a Subscript to a Name (line 2371):
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2371)
    name_142400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 37), 'name')
    # Getting the type of 'result' (line 2371)
    result_142401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 30), 'result')
    # Obtaining the member '__getitem__' of a type (line 2371)
    getitem___142402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 30), result_142401, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2371)
    subscript_call_result_142403 = invoke(stypy.reporting.localization.Localization(__file__, 2371, 30), getitem___142402, name_142400)
    
    # Assigning a type to the variable 'tuple_assignment_139177' (line 2371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2371, 8), 'tuple_assignment_139177', subscript_call_result_142403)
    
    # Assigning a Subscript to a Name (line 2371):
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2371)
    name_142404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 49), 'name')
    # Getting the type of 'mask' (line 2371)
    mask_142405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 44), 'mask')
    # Obtaining the member '__getitem__' of a type (line 2371)
    getitem___142406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 44), mask_142405, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2371)
    subscript_call_result_142407 = invoke(stypy.reporting.localization.Localization(__file__, 2371, 44), getitem___142406, name_142404)
    
    # Assigning a type to the variable 'tuple_assignment_139178' (line 2371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2371, 8), 'tuple_assignment_139178', subscript_call_result_142407)
    
    # Assigning a Name to a Name (line 2371):
    # Getting the type of 'tuple_assignment_139177' (line 2371)
    tuple_assignment_139177_142408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 8), 'tuple_assignment_139177')
    # Assigning a type to the variable 'curdata' (line 2371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2371, 9), 'curdata', tuple_assignment_139177_142408)
    
    # Assigning a Name to a Name (line 2371):
    # Getting the type of 'tuple_assignment_139178' (line 2371)
    tuple_assignment_139178_142409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 8), 'tuple_assignment_139178')
    # Assigning a type to the variable 'curmask' (line 2371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2371, 18), 'curmask', tuple_assignment_139178_142409)
    
    # Getting the type of 'curdata' (line 2372)
    curdata_142410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 11), 'curdata')
    # Obtaining the member 'dtype' of a type (line 2372)
    dtype_142411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2372, 11), curdata_142410, 'dtype')
    # Obtaining the member 'names' of a type (line 2372)
    names_142412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2372, 11), dtype_142411, 'names')
    # Testing the type of an if condition (line 2372)
    if_condition_142413 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2372, 8), names_142412)
    # Assigning a type to the variable 'if_condition_142413' (line 2372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 8), 'if_condition_142413', if_condition_142413)
    # SSA begins for if statement (line 2372)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _recursive_printoption(...): (line 2373)
    # Processing the call arguments (line 2373)
    # Getting the type of 'curdata' (line 2373)
    curdata_142415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 35), 'curdata', False)
    # Getting the type of 'curmask' (line 2373)
    curmask_142416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 44), 'curmask', False)
    # Getting the type of 'printopt' (line 2373)
    printopt_142417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 53), 'printopt', False)
    # Processing the call keyword arguments (line 2373)
    kwargs_142418 = {}
    # Getting the type of '_recursive_printoption' (line 2373)
    _recursive_printoption_142414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 12), '_recursive_printoption', False)
    # Calling _recursive_printoption(args, kwargs) (line 2373)
    _recursive_printoption_call_result_142419 = invoke(stypy.reporting.localization.Localization(__file__, 2373, 12), _recursive_printoption_142414, *[curdata_142415, curmask_142416, printopt_142417], **kwargs_142418)
    
    # SSA branch for the else part of an if statement (line 2372)
    module_type_store.open_ssa_branch('else')
    
    # Call to copyto(...): (line 2375)
    # Processing the call arguments (line 2375)
    # Getting the type of 'curdata' (line 2375)
    curdata_142422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 22), 'curdata', False)
    # Getting the type of 'printopt' (line 2375)
    printopt_142423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 31), 'printopt', False)
    # Processing the call keyword arguments (line 2375)
    # Getting the type of 'curmask' (line 2375)
    curmask_142424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 47), 'curmask', False)
    keyword_142425 = curmask_142424
    kwargs_142426 = {'where': keyword_142425}
    # Getting the type of 'np' (line 2375)
    np_142420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 12), 'np', False)
    # Obtaining the member 'copyto' of a type (line 2375)
    copyto_142421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 12), np_142420, 'copyto')
    # Calling copyto(args, kwargs) (line 2375)
    copyto_call_result_142427 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 12), copyto_142421, *[curdata_142422, printopt_142423], **kwargs_142426)
    
    # SSA join for if statement (line 2372)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 2376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2376, 4), 'stypy_return_type', types.NoneType)
    
    # ################# End of '_recursive_printoption(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_recursive_printoption' in the type store
    # Getting the type of 'stypy_return_type' (line 2362)
    stypy_return_type_142428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142428)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_recursive_printoption'
    return stypy_return_type_142428

# Assigning a type to the variable '_recursive_printoption' (line 2362)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2362, 0), '_recursive_printoption', _recursive_printoption)

# Assigning a Call to a Name (line 2378):

# Assigning a Call to a Name (line 2378):

# Call to dict(...): (line 2378)
# Processing the call keyword arguments (line 2378)
str_142430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, (-1)), 'str', 'masked_%(name)s(data =\n %(data)s,\n       %(nlen)s mask =\n %(mask)s,\n %(nlen)s fill_value = %(fill)s)\n')
keyword_142431 = str_142430
str_142432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2389, (-1)), 'str', 'masked_%(name)s(data = %(data)s,\n       %(nlen)s mask = %(mask)s,\n%(nlen)s  fill_value = %(fill)s)\n')
keyword_142433 = str_142432
str_142434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, (-1)), 'str', 'masked_%(name)s(data =\n %(data)s,\n       %(nlen)s mask =\n %(mask)s,\n%(nlen)s  fill_value = %(fill)s,\n      %(nlen)s dtype = %(dtype)s)\n')
keyword_142435 = str_142434
str_142436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2403, (-1)), 'str', 'masked_%(name)s(data = %(data)s,\n%(nlen)s        mask = %(mask)s,\n%(nlen)s  fill_value = %(fill)s,\n%(nlen)s       dtype = %(dtype)s)\n')
keyword_142437 = str_142436
kwargs_142438 = {'long_std': keyword_142431, 'long_flx': keyword_142435, 'short_flx': keyword_142437, 'short_std': keyword_142433}
# Getting the type of 'dict' (line 2378)
dict_142429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 19), 'dict', False)
# Calling dict(args, kwargs) (line 2378)
dict_call_result_142439 = invoke(stypy.reporting.localization.Localization(__file__, 2378, 19), dict_142429, *[], **kwargs_142438)

# Assigning a type to the variable '_print_templates' (line 2378)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 0), '_print_templates', dict_call_result_142439)

@norecursion
def _recursive_filled(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_recursive_filled'
    module_type_store = module_type_store.open_function_context('_recursive_filled', 2410, 0, False)
    
    # Passed parameters checking function
    _recursive_filled.stypy_localization = localization
    _recursive_filled.stypy_type_of_self = None
    _recursive_filled.stypy_type_store = module_type_store
    _recursive_filled.stypy_function_name = '_recursive_filled'
    _recursive_filled.stypy_param_names_list = ['a', 'mask', 'fill_value']
    _recursive_filled.stypy_varargs_param_name = None
    _recursive_filled.stypy_kwargs_param_name = None
    _recursive_filled.stypy_call_defaults = defaults
    _recursive_filled.stypy_call_varargs = varargs
    _recursive_filled.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_recursive_filled', ['a', 'mask', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_recursive_filled', localization, ['a', 'mask', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_recursive_filled(...)' code ##################

    str_142440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2414, (-1)), 'str', '\n    Recursively fill `a` with `fill_value`.\n\n    ')
    
    # Assigning a Attribute to a Name (line 2415):
    
    # Assigning a Attribute to a Name (line 2415):
    # Getting the type of 'a' (line 2415)
    a_142441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 12), 'a')
    # Obtaining the member 'dtype' of a type (line 2415)
    dtype_142442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2415, 12), a_142441, 'dtype')
    # Obtaining the member 'names' of a type (line 2415)
    names_142443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2415, 12), dtype_142442, 'names')
    # Assigning a type to the variable 'names' (line 2415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2415, 4), 'names', names_142443)
    
    # Getting the type of 'names' (line 2416)
    names_142444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 16), 'names')
    # Testing the type of a for loop iterable (line 2416)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2416, 4), names_142444)
    # Getting the type of the for loop variable (line 2416)
    for_loop_var_142445 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2416, 4), names_142444)
    # Assigning a type to the variable 'name' (line 2416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2416, 4), 'name', for_loop_var_142445)
    # SSA begins for a for statement (line 2416)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 2417):
    
    # Assigning a Subscript to a Name (line 2417):
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2417)
    name_142446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 20), 'name')
    # Getting the type of 'a' (line 2417)
    a_142447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 18), 'a')
    # Obtaining the member '__getitem__' of a type (line 2417)
    getitem___142448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2417, 18), a_142447, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2417)
    subscript_call_result_142449 = invoke(stypy.reporting.localization.Localization(__file__, 2417, 18), getitem___142448, name_142446)
    
    # Assigning a type to the variable 'current' (line 2417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 8), 'current', subscript_call_result_142449)
    
    # Getting the type of 'current' (line 2418)
    current_142450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 11), 'current')
    # Obtaining the member 'dtype' of a type (line 2418)
    dtype_142451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 11), current_142450, 'dtype')
    # Obtaining the member 'names' of a type (line 2418)
    names_142452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 11), dtype_142451, 'names')
    # Testing the type of an if condition (line 2418)
    if_condition_142453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2418, 8), names_142452)
    # Assigning a type to the variable 'if_condition_142453' (line 2418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 8), 'if_condition_142453', if_condition_142453)
    # SSA begins for if statement (line 2418)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _recursive_filled(...): (line 2419)
    # Processing the call arguments (line 2419)
    # Getting the type of 'current' (line 2419)
    current_142455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 30), 'current', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2419)
    name_142456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 44), 'name', False)
    # Getting the type of 'mask' (line 2419)
    mask_142457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 39), 'mask', False)
    # Obtaining the member '__getitem__' of a type (line 2419)
    getitem___142458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2419, 39), mask_142457, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2419)
    subscript_call_result_142459 = invoke(stypy.reporting.localization.Localization(__file__, 2419, 39), getitem___142458, name_142456)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2419)
    name_142460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 62), 'name', False)
    # Getting the type of 'fill_value' (line 2419)
    fill_value_142461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 51), 'fill_value', False)
    # Obtaining the member '__getitem__' of a type (line 2419)
    getitem___142462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2419, 51), fill_value_142461, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2419)
    subscript_call_result_142463 = invoke(stypy.reporting.localization.Localization(__file__, 2419, 51), getitem___142462, name_142460)
    
    # Processing the call keyword arguments (line 2419)
    kwargs_142464 = {}
    # Getting the type of '_recursive_filled' (line 2419)
    _recursive_filled_142454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 12), '_recursive_filled', False)
    # Calling _recursive_filled(args, kwargs) (line 2419)
    _recursive_filled_call_result_142465 = invoke(stypy.reporting.localization.Localization(__file__, 2419, 12), _recursive_filled_142454, *[current_142455, subscript_call_result_142459, subscript_call_result_142463], **kwargs_142464)
    
    # SSA branch for the else part of an if statement (line 2418)
    module_type_store.open_ssa_branch('else')
    
    # Call to copyto(...): (line 2421)
    # Processing the call arguments (line 2421)
    # Getting the type of 'current' (line 2421)
    current_142468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 22), 'current', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2421)
    name_142469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 42), 'name', False)
    # Getting the type of 'fill_value' (line 2421)
    fill_value_142470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 31), 'fill_value', False)
    # Obtaining the member '__getitem__' of a type (line 2421)
    getitem___142471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 31), fill_value_142470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2421)
    subscript_call_result_142472 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 31), getitem___142471, name_142469)
    
    # Processing the call keyword arguments (line 2421)
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2421)
    name_142473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 60), 'name', False)
    # Getting the type of 'mask' (line 2421)
    mask_142474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 55), 'mask', False)
    # Obtaining the member '__getitem__' of a type (line 2421)
    getitem___142475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 55), mask_142474, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2421)
    subscript_call_result_142476 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 55), getitem___142475, name_142473)
    
    keyword_142477 = subscript_call_result_142476
    kwargs_142478 = {'where': keyword_142477}
    # Getting the type of 'np' (line 2421)
    np_142466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 12), 'np', False)
    # Obtaining the member 'copyto' of a type (line 2421)
    copyto_142467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 12), np_142466, 'copyto')
    # Calling copyto(args, kwargs) (line 2421)
    copyto_call_result_142479 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 12), copyto_142467, *[current_142468, subscript_call_result_142472], **kwargs_142478)
    
    # SSA join for if statement (line 2418)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_recursive_filled(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_recursive_filled' in the type store
    # Getting the type of 'stypy_return_type' (line 2410)
    stypy_return_type_142480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142480)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_recursive_filled'
    return stypy_return_type_142480

# Assigning a type to the variable '_recursive_filled' (line 2410)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2410, 0), '_recursive_filled', _recursive_filled)

@norecursion
def flatten_structured_array(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'flatten_structured_array'
    module_type_store = module_type_store.open_function_context('flatten_structured_array', 2424, 0, False)
    
    # Passed parameters checking function
    flatten_structured_array.stypy_localization = localization
    flatten_structured_array.stypy_type_of_self = None
    flatten_structured_array.stypy_type_store = module_type_store
    flatten_structured_array.stypy_function_name = 'flatten_structured_array'
    flatten_structured_array.stypy_param_names_list = ['a']
    flatten_structured_array.stypy_varargs_param_name = None
    flatten_structured_array.stypy_kwargs_param_name = None
    flatten_structured_array.stypy_call_defaults = defaults
    flatten_structured_array.stypy_call_varargs = varargs
    flatten_structured_array.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'flatten_structured_array', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'flatten_structured_array', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'flatten_structured_array(...)' code ##################

    str_142481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2449, (-1)), 'str', "\n    Flatten a structured array.\n\n    The data type of the output is chosen such that it can represent all of the\n    (nested) fields.\n\n    Parameters\n    ----------\n    a : structured array\n\n    Returns\n    -------\n    output : masked array or ndarray\n        A flattened masked array if the input is a masked array, otherwise a\n        standard ndarray.\n\n    Examples\n    --------\n    >>> ndtype = [('a', int), ('b', float)]\n    >>> a = np.array([(1, 1), (2, 2)], dtype=ndtype)\n    >>> flatten_structured_array(a)\n    array([[1., 1.],\n           [2., 2.]])\n\n    ")

    @norecursion
    def flatten_sequence(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flatten_sequence'
        module_type_store = module_type_store.open_function_context('flatten_sequence', 2451, 4, False)
        
        # Passed parameters checking function
        flatten_sequence.stypy_localization = localization
        flatten_sequence.stypy_type_of_self = None
        flatten_sequence.stypy_type_store = module_type_store
        flatten_sequence.stypy_function_name = 'flatten_sequence'
        flatten_sequence.stypy_param_names_list = ['iterable']
        flatten_sequence.stypy_varargs_param_name = None
        flatten_sequence.stypy_kwargs_param_name = None
        flatten_sequence.stypy_call_defaults = defaults
        flatten_sequence.stypy_call_varargs = varargs
        flatten_sequence.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'flatten_sequence', ['iterable'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flatten_sequence', localization, ['iterable'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flatten_sequence(...)' code ##################

        str_142482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2455, (-1)), 'str', '\n        Flattens a compound of nested iterables.\n\n        ')
        
        
        # Call to iter(...): (line 2456)
        # Processing the call arguments (line 2456)
        # Getting the type of 'iterable' (line 2456)
        iterable_142484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 24), 'iterable', False)
        # Processing the call keyword arguments (line 2456)
        kwargs_142485 = {}
        # Getting the type of 'iter' (line 2456)
        iter_142483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 19), 'iter', False)
        # Calling iter(args, kwargs) (line 2456)
        iter_call_result_142486 = invoke(stypy.reporting.localization.Localization(__file__, 2456, 19), iter_142483, *[iterable_142484], **kwargs_142485)
        
        # Testing the type of a for loop iterable (line 2456)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2456, 8), iter_call_result_142486)
        # Getting the type of the for loop variable (line 2456)
        for_loop_var_142487 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2456, 8), iter_call_result_142486)
        # Assigning a type to the variable 'elm' (line 2456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2456, 8), 'elm', for_loop_var_142487)
        # SSA begins for a for statement (line 2456)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 2457)
        str_142488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, 28), 'str', '__iter__')
        # Getting the type of 'elm' (line 2457)
        elm_142489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 23), 'elm')
        
        (may_be_142490, more_types_in_union_142491) = may_provide_member(str_142488, elm_142489)

        if may_be_142490:

            if more_types_in_union_142491:
                # Runtime conditional SSA (line 2457)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'elm' (line 2457)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 12), 'elm', remove_not_member_provider_from_union(elm_142489, '__iter__'))
            
            
            # Call to flatten_sequence(...): (line 2458)
            # Processing the call arguments (line 2458)
            # Getting the type of 'elm' (line 2458)
            elm_142493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 42), 'elm', False)
            # Processing the call keyword arguments (line 2458)
            kwargs_142494 = {}
            # Getting the type of 'flatten_sequence' (line 2458)
            flatten_sequence_142492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 25), 'flatten_sequence', False)
            # Calling flatten_sequence(args, kwargs) (line 2458)
            flatten_sequence_call_result_142495 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 25), flatten_sequence_142492, *[elm_142493], **kwargs_142494)
            
            # Testing the type of a for loop iterable (line 2458)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2458, 16), flatten_sequence_call_result_142495)
            # Getting the type of the for loop variable (line 2458)
            for_loop_var_142496 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2458, 16), flatten_sequence_call_result_142495)
            # Assigning a type to the variable 'f' (line 2458)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 16), 'f', for_loop_var_142496)
            # SSA begins for a for statement (line 2458)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            # Creating a generator
            # Getting the type of 'f' (line 2459)
            f_142497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 26), 'f')
            GeneratorType_142498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2459, 20), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2459, 20), GeneratorType_142498, f_142497)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2459, 20), 'stypy_return_type', GeneratorType_142498)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_142491:
                # Runtime conditional SSA for else branch (line 2457)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_142490) or more_types_in_union_142491):
            # Assigning a type to the variable 'elm' (line 2457)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 12), 'elm', remove_member_provider_from_union(elm_142489, '__iter__'))
            # Creating a generator
            # Getting the type of 'elm' (line 2461)
            elm_142499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 22), 'elm')
            GeneratorType_142500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2461, 16), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2461, 16), GeneratorType_142500, elm_142499)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2461, 16), 'stypy_return_type', GeneratorType_142500)

            if (may_be_142490 and more_types_in_union_142491):
                # SSA join for if statement (line 2457)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'flatten_sequence(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flatten_sequence' in the type store
        # Getting the type of 'stypy_return_type' (line 2451)
        stypy_return_type_142501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142501)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flatten_sequence'
        return stypy_return_type_142501

    # Assigning a type to the variable 'flatten_sequence' (line 2451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'flatten_sequence', flatten_sequence)
    
    # Assigning a Call to a Name (line 2463):
    
    # Assigning a Call to a Name (line 2463):
    
    # Call to asanyarray(...): (line 2463)
    # Processing the call arguments (line 2463)
    # Getting the type of 'a' (line 2463)
    a_142504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 22), 'a', False)
    # Processing the call keyword arguments (line 2463)
    kwargs_142505 = {}
    # Getting the type of 'np' (line 2463)
    np_142502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2463)
    asanyarray_142503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 8), np_142502, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 2463)
    asanyarray_call_result_142506 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 8), asanyarray_142503, *[a_142504], **kwargs_142505)
    
    # Assigning a type to the variable 'a' (line 2463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2463, 4), 'a', asanyarray_call_result_142506)
    
    # Assigning a Attribute to a Name (line 2464):
    
    # Assigning a Attribute to a Name (line 2464):
    # Getting the type of 'a' (line 2464)
    a_142507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 15), 'a')
    # Obtaining the member 'shape' of a type (line 2464)
    shape_142508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2464, 15), a_142507, 'shape')
    # Assigning a type to the variable 'inishape' (line 2464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2464, 4), 'inishape', shape_142508)
    
    # Assigning a Call to a Name (line 2465):
    
    # Assigning a Call to a Name (line 2465):
    
    # Call to ravel(...): (line 2465)
    # Processing the call keyword arguments (line 2465)
    kwargs_142511 = {}
    # Getting the type of 'a' (line 2465)
    a_142509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 8), 'a', False)
    # Obtaining the member 'ravel' of a type (line 2465)
    ravel_142510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2465, 8), a_142509, 'ravel')
    # Calling ravel(args, kwargs) (line 2465)
    ravel_call_result_142512 = invoke(stypy.reporting.localization.Localization(__file__, 2465, 8), ravel_142510, *[], **kwargs_142511)
    
    # Assigning a type to the variable 'a' (line 2465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2465, 4), 'a', ravel_call_result_142512)
    
    
    # Call to isinstance(...): (line 2466)
    # Processing the call arguments (line 2466)
    # Getting the type of 'a' (line 2466)
    a_142514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 18), 'a', False)
    # Getting the type of 'MaskedArray' (line 2466)
    MaskedArray_142515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 21), 'MaskedArray', False)
    # Processing the call keyword arguments (line 2466)
    kwargs_142516 = {}
    # Getting the type of 'isinstance' (line 2466)
    isinstance_142513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2466)
    isinstance_call_result_142517 = invoke(stypy.reporting.localization.Localization(__file__, 2466, 7), isinstance_142513, *[a_142514, MaskedArray_142515], **kwargs_142516)
    
    # Testing the type of an if condition (line 2466)
    if_condition_142518 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2466, 4), isinstance_call_result_142517)
    # Assigning a type to the variable 'if_condition_142518' (line 2466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2466, 4), 'if_condition_142518', if_condition_142518)
    # SSA begins for if statement (line 2466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2467):
    
    # Assigning a Call to a Name (line 2467):
    
    # Call to array(...): (line 2467)
    # Processing the call arguments (line 2467)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'a' (line 2467)
    a_142531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 67), 'a', False)
    # Obtaining the member '_data' of a type (line 2467)
    _data_142532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 67), a_142531, '_data')
    comprehension_142533 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 24), _data_142532)
    # Assigning a type to the variable 'd' (line 2467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 24), 'd', comprehension_142533)
    
    # Call to tuple(...): (line 2467)
    # Processing the call arguments (line 2467)
    
    # Call to flatten_sequence(...): (line 2467)
    # Processing the call arguments (line 2467)
    
    # Call to item(...): (line 2467)
    # Processing the call keyword arguments (line 2467)
    kwargs_142525 = {}
    # Getting the type of 'd' (line 2467)
    d_142523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 47), 'd', False)
    # Obtaining the member 'item' of a type (line 2467)
    item_142524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 47), d_142523, 'item')
    # Calling item(args, kwargs) (line 2467)
    item_call_result_142526 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 47), item_142524, *[], **kwargs_142525)
    
    # Processing the call keyword arguments (line 2467)
    kwargs_142527 = {}
    # Getting the type of 'flatten_sequence' (line 2467)
    flatten_sequence_142522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 30), 'flatten_sequence', False)
    # Calling flatten_sequence(args, kwargs) (line 2467)
    flatten_sequence_call_result_142528 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 30), flatten_sequence_142522, *[item_call_result_142526], **kwargs_142527)
    
    # Processing the call keyword arguments (line 2467)
    kwargs_142529 = {}
    # Getting the type of 'tuple' (line 2467)
    tuple_142521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 24), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2467)
    tuple_call_result_142530 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 24), tuple_142521, *[flatten_sequence_call_result_142528], **kwargs_142529)
    
    list_142534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 24), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 24), list_142534, tuple_call_result_142530)
    # Processing the call keyword arguments (line 2467)
    kwargs_142535 = {}
    # Getting the type of 'np' (line 2467)
    np_142519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 14), 'np', False)
    # Obtaining the member 'array' of a type (line 2467)
    array_142520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 14), np_142519, 'array')
    # Calling array(args, kwargs) (line 2467)
    array_call_result_142536 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 14), array_142520, *[list_142534], **kwargs_142535)
    
    # Assigning a type to the variable 'out' (line 2467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 8), 'out', array_call_result_142536)
    
    # Assigning a Call to a Name (line 2468):
    
    # Assigning a Call to a Name (line 2468):
    
    # Call to view(...): (line 2468)
    # Processing the call arguments (line 2468)
    # Getting the type of 'MaskedArray' (line 2468)
    MaskedArray_142539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 23), 'MaskedArray', False)
    # Processing the call keyword arguments (line 2468)
    kwargs_142540 = {}
    # Getting the type of 'out' (line 2468)
    out_142537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 14), 'out', False)
    # Obtaining the member 'view' of a type (line 2468)
    view_142538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2468, 14), out_142537, 'view')
    # Calling view(args, kwargs) (line 2468)
    view_call_result_142541 = invoke(stypy.reporting.localization.Localization(__file__, 2468, 14), view_142538, *[MaskedArray_142539], **kwargs_142540)
    
    # Assigning a type to the variable 'out' (line 2468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2468, 8), 'out', view_call_result_142541)
    
    # Assigning a Call to a Attribute (line 2469):
    
    # Assigning a Call to a Attribute (line 2469):
    
    # Call to array(...): (line 2469)
    # Processing the call arguments (line 2469)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to getmaskarray(...): (line 2470)
    # Processing the call arguments (line 2470)
    # Getting the type of 'a' (line 2470)
    a_142555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 52), 'a', False)
    # Processing the call keyword arguments (line 2470)
    kwargs_142556 = {}
    # Getting the type of 'getmaskarray' (line 2470)
    getmaskarray_142554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 39), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 2470)
    getmaskarray_call_result_142557 = invoke(stypy.reporting.localization.Localization(__file__, 2470, 39), getmaskarray_142554, *[a_142555], **kwargs_142556)
    
    comprehension_142558 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2469, 30), getmaskarray_call_result_142557)
    # Assigning a type to the variable 'd' (line 2469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2469, 30), 'd', comprehension_142558)
    
    # Call to tuple(...): (line 2469)
    # Processing the call arguments (line 2469)
    
    # Call to flatten_sequence(...): (line 2469)
    # Processing the call arguments (line 2469)
    
    # Call to item(...): (line 2469)
    # Processing the call keyword arguments (line 2469)
    kwargs_142548 = {}
    # Getting the type of 'd' (line 2469)
    d_142546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 53), 'd', False)
    # Obtaining the member 'item' of a type (line 2469)
    item_142547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2469, 53), d_142546, 'item')
    # Calling item(args, kwargs) (line 2469)
    item_call_result_142549 = invoke(stypy.reporting.localization.Localization(__file__, 2469, 53), item_142547, *[], **kwargs_142548)
    
    # Processing the call keyword arguments (line 2469)
    kwargs_142550 = {}
    # Getting the type of 'flatten_sequence' (line 2469)
    flatten_sequence_142545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 36), 'flatten_sequence', False)
    # Calling flatten_sequence(args, kwargs) (line 2469)
    flatten_sequence_call_result_142551 = invoke(stypy.reporting.localization.Localization(__file__, 2469, 36), flatten_sequence_142545, *[item_call_result_142549], **kwargs_142550)
    
    # Processing the call keyword arguments (line 2469)
    kwargs_142552 = {}
    # Getting the type of 'tuple' (line 2469)
    tuple_142544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 30), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2469)
    tuple_call_result_142553 = invoke(stypy.reporting.localization.Localization(__file__, 2469, 30), tuple_142544, *[flatten_sequence_call_result_142551], **kwargs_142552)
    
    list_142559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2469, 30), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2469, 30), list_142559, tuple_call_result_142553)
    # Processing the call keyword arguments (line 2469)
    kwargs_142560 = {}
    # Getting the type of 'np' (line 2469)
    np_142542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 20), 'np', False)
    # Obtaining the member 'array' of a type (line 2469)
    array_142543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2469, 20), np_142542, 'array')
    # Calling array(args, kwargs) (line 2469)
    array_call_result_142561 = invoke(stypy.reporting.localization.Localization(__file__, 2469, 20), array_142543, *[list_142559], **kwargs_142560)
    
    # Getting the type of 'out' (line 2469)
    out_142562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 8), 'out')
    # Setting the type of the member '_mask' of a type (line 2469)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2469, 8), out_142562, '_mask', array_call_result_142561)
    # SSA branch for the else part of an if statement (line 2466)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2472):
    
    # Assigning a Call to a Name (line 2472):
    
    # Call to array(...): (line 2472)
    # Processing the call arguments (line 2472)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'a' (line 2472)
    a_142575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 67), 'a', False)
    comprehension_142576 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2472, 24), a_142575)
    # Assigning a type to the variable 'd' (line 2472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2472, 24), 'd', comprehension_142576)
    
    # Call to tuple(...): (line 2472)
    # Processing the call arguments (line 2472)
    
    # Call to flatten_sequence(...): (line 2472)
    # Processing the call arguments (line 2472)
    
    # Call to item(...): (line 2472)
    # Processing the call keyword arguments (line 2472)
    kwargs_142569 = {}
    # Getting the type of 'd' (line 2472)
    d_142567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 47), 'd', False)
    # Obtaining the member 'item' of a type (line 2472)
    item_142568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2472, 47), d_142567, 'item')
    # Calling item(args, kwargs) (line 2472)
    item_call_result_142570 = invoke(stypy.reporting.localization.Localization(__file__, 2472, 47), item_142568, *[], **kwargs_142569)
    
    # Processing the call keyword arguments (line 2472)
    kwargs_142571 = {}
    # Getting the type of 'flatten_sequence' (line 2472)
    flatten_sequence_142566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 30), 'flatten_sequence', False)
    # Calling flatten_sequence(args, kwargs) (line 2472)
    flatten_sequence_call_result_142572 = invoke(stypy.reporting.localization.Localization(__file__, 2472, 30), flatten_sequence_142566, *[item_call_result_142570], **kwargs_142571)
    
    # Processing the call keyword arguments (line 2472)
    kwargs_142573 = {}
    # Getting the type of 'tuple' (line 2472)
    tuple_142565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 24), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2472)
    tuple_call_result_142574 = invoke(stypy.reporting.localization.Localization(__file__, 2472, 24), tuple_142565, *[flatten_sequence_call_result_142572], **kwargs_142573)
    
    list_142577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2472, 24), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2472, 24), list_142577, tuple_call_result_142574)
    # Processing the call keyword arguments (line 2472)
    kwargs_142578 = {}
    # Getting the type of 'np' (line 2472)
    np_142563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 14), 'np', False)
    # Obtaining the member 'array' of a type (line 2472)
    array_142564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2472, 14), np_142563, 'array')
    # Calling array(args, kwargs) (line 2472)
    array_call_result_142579 = invoke(stypy.reporting.localization.Localization(__file__, 2472, 14), array_142564, *[list_142577], **kwargs_142578)
    
    # Assigning a type to the variable 'out' (line 2472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2472, 8), 'out', array_call_result_142579)
    # SSA join for if statement (line 2466)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2473)
    # Processing the call arguments (line 2473)
    # Getting the type of 'inishape' (line 2473)
    inishape_142581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 11), 'inishape', False)
    # Processing the call keyword arguments (line 2473)
    kwargs_142582 = {}
    # Getting the type of 'len' (line 2473)
    len_142580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 7), 'len', False)
    # Calling len(args, kwargs) (line 2473)
    len_call_result_142583 = invoke(stypy.reporting.localization.Localization(__file__, 2473, 7), len_142580, *[inishape_142581], **kwargs_142582)
    
    int_142584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2473, 23), 'int')
    # Applying the binary operator '>' (line 2473)
    result_gt_142585 = python_operator(stypy.reporting.localization.Localization(__file__, 2473, 7), '>', len_call_result_142583, int_142584)
    
    # Testing the type of an if condition (line 2473)
    if_condition_142586 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2473, 4), result_gt_142585)
    # Assigning a type to the variable 'if_condition_142586' (line 2473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2473, 4), 'if_condition_142586', if_condition_142586)
    # SSA begins for if statement (line 2473)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2474):
    
    # Assigning a Call to a Name (line 2474):
    
    # Call to list(...): (line 2474)
    # Processing the call arguments (line 2474)
    # Getting the type of 'out' (line 2474)
    out_142588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 24), 'out', False)
    # Obtaining the member 'shape' of a type (line 2474)
    shape_142589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2474, 24), out_142588, 'shape')
    # Processing the call keyword arguments (line 2474)
    kwargs_142590 = {}
    # Getting the type of 'list' (line 2474)
    list_142587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 19), 'list', False)
    # Calling list(args, kwargs) (line 2474)
    list_call_result_142591 = invoke(stypy.reporting.localization.Localization(__file__, 2474, 19), list_142587, *[shape_142589], **kwargs_142590)
    
    # Assigning a type to the variable 'newshape' (line 2474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2474, 8), 'newshape', list_call_result_142591)
    
    # Assigning a Name to a Subscript (line 2475):
    
    # Assigning a Name to a Subscript (line 2475):
    # Getting the type of 'inishape' (line 2475)
    inishape_142592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 22), 'inishape')
    # Getting the type of 'newshape' (line 2475)
    newshape_142593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 8), 'newshape')
    int_142594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2475, 17), 'int')
    # Storing an element on a container (line 2475)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2475, 8), newshape_142593, (int_142594, inishape_142592))
    
    # Assigning a Call to a Attribute (line 2476):
    
    # Assigning a Call to a Attribute (line 2476):
    
    # Call to tuple(...): (line 2476)
    # Processing the call arguments (line 2476)
    
    # Call to flatten_sequence(...): (line 2476)
    # Processing the call arguments (line 2476)
    # Getting the type of 'newshape' (line 2476)
    newshape_142597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 43), 'newshape', False)
    # Processing the call keyword arguments (line 2476)
    kwargs_142598 = {}
    # Getting the type of 'flatten_sequence' (line 2476)
    flatten_sequence_142596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 26), 'flatten_sequence', False)
    # Calling flatten_sequence(args, kwargs) (line 2476)
    flatten_sequence_call_result_142599 = invoke(stypy.reporting.localization.Localization(__file__, 2476, 26), flatten_sequence_142596, *[newshape_142597], **kwargs_142598)
    
    # Processing the call keyword arguments (line 2476)
    kwargs_142600 = {}
    # Getting the type of 'tuple' (line 2476)
    tuple_142595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 20), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2476)
    tuple_call_result_142601 = invoke(stypy.reporting.localization.Localization(__file__, 2476, 20), tuple_142595, *[flatten_sequence_call_result_142599], **kwargs_142600)
    
    # Getting the type of 'out' (line 2476)
    out_142602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 8), 'out')
    # Setting the type of the member 'shape' of a type (line 2476)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2476, 8), out_142602, 'shape', tuple_call_result_142601)
    # SSA join for if statement (line 2473)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'out' (line 2477)
    out_142603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 2477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 4), 'stypy_return_type', out_142603)
    
    # ################# End of 'flatten_structured_array(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'flatten_structured_array' in the type store
    # Getting the type of 'stypy_return_type' (line 2424)
    stypy_return_type_142604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2424, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142604)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'flatten_structured_array'
    return stypy_return_type_142604

# Assigning a type to the variable 'flatten_structured_array' (line 2424)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2424, 0), 'flatten_structured_array', flatten_structured_array)

@norecursion
def _arraymethod(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 2480)
    True_142605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 34), 'True')
    defaults = [True_142605]
    # Create a new context for function '_arraymethod'
    module_type_store = module_type_store.open_function_context('_arraymethod', 2480, 0, False)
    
    # Passed parameters checking function
    _arraymethod.stypy_localization = localization
    _arraymethod.stypy_type_of_self = None
    _arraymethod.stypy_type_store = module_type_store
    _arraymethod.stypy_function_name = '_arraymethod'
    _arraymethod.stypy_param_names_list = ['funcname', 'onmask']
    _arraymethod.stypy_varargs_param_name = None
    _arraymethod.stypy_kwargs_param_name = None
    _arraymethod.stypy_call_defaults = defaults
    _arraymethod.stypy_call_varargs = varargs
    _arraymethod.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_arraymethod', ['funcname', 'onmask'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_arraymethod', localization, ['funcname', 'onmask'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_arraymethod(...)' code ##################

    str_142606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2506, (-1)), 'str', '\n    Return a class method wrapper around a basic array method.\n\n    Creates a class method which returns a masked array, where the new\n    ``_data`` array is the output of the corresponding basic method called\n    on the original ``_data``.\n\n    If `onmask` is True, the new mask is the output of the method called\n    on the initial mask. Otherwise, the new mask is just a reference\n    to the initial mask.\n\n    Parameters\n    ----------\n    funcname : str\n        Name of the function to apply on data.\n    onmask : bool\n        Whether the mask must be processed also (True) or left\n        alone (False). Default is True. Make available as `_onmask`\n        attribute.\n\n    Returns\n    -------\n    method : instancemethod\n        Class method wrapper of the specified basic array method.\n\n    ')

    @norecursion
    def wrapped_method(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'wrapped_method'
        module_type_store = module_type_store.open_function_context('wrapped_method', 2507, 4, False)
        
        # Passed parameters checking function
        wrapped_method.stypy_localization = localization
        wrapped_method.stypy_type_of_self = None
        wrapped_method.stypy_type_store = module_type_store
        wrapped_method.stypy_function_name = 'wrapped_method'
        wrapped_method.stypy_param_names_list = ['self']
        wrapped_method.stypy_varargs_param_name = 'args'
        wrapped_method.stypy_kwargs_param_name = 'params'
        wrapped_method.stypy_call_defaults = defaults
        wrapped_method.stypy_call_varargs = varargs
        wrapped_method.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'wrapped_method', ['self'], 'args', 'params', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'wrapped_method', localization, ['self'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'wrapped_method(...)' code ##################

        
        # Assigning a Call to a Name (line 2508):
        
        # Assigning a Call to a Name (line 2508):
        
        # Call to (...): (line 2508)
        # Getting the type of 'args' (line 2508)
        args_142613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 48), 'args', False)
        # Processing the call keyword arguments (line 2508)
        # Getting the type of 'params' (line 2508)
        params_142614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 56), 'params', False)
        kwargs_142615 = {'params_142614': params_142614}
        
        # Call to getattr(...): (line 2508)
        # Processing the call arguments (line 2508)
        # Getting the type of 'self' (line 2508)
        self_142608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 25), 'self', False)
        # Obtaining the member '_data' of a type (line 2508)
        _data_142609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2508, 25), self_142608, '_data')
        # Getting the type of 'funcname' (line 2508)
        funcname_142610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 37), 'funcname', False)
        # Processing the call keyword arguments (line 2508)
        kwargs_142611 = {}
        # Getting the type of 'getattr' (line 2508)
        getattr_142607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 17), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2508)
        getattr_call_result_142612 = invoke(stypy.reporting.localization.Localization(__file__, 2508, 17), getattr_142607, *[_data_142609, funcname_142610], **kwargs_142611)
        
        # Calling (args, kwargs) (line 2508)
        _call_result_142616 = invoke(stypy.reporting.localization.Localization(__file__, 2508, 17), getattr_call_result_142612, *[args_142613], **kwargs_142615)
        
        # Assigning a type to the variable 'result' (line 2508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2508, 8), 'result', _call_result_142616)
        
        # Assigning a Call to a Name (line 2509):
        
        # Assigning a Call to a Name (line 2509):
        
        # Call to view(...): (line 2509)
        # Processing the call arguments (line 2509)
        
        # Call to type(...): (line 2509)
        # Processing the call arguments (line 2509)
        # Getting the type of 'self' (line 2509)
        self_142620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 34), 'self', False)
        # Processing the call keyword arguments (line 2509)
        kwargs_142621 = {}
        # Getting the type of 'type' (line 2509)
        type_142619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 29), 'type', False)
        # Calling type(args, kwargs) (line 2509)
        type_call_result_142622 = invoke(stypy.reporting.localization.Localization(__file__, 2509, 29), type_142619, *[self_142620], **kwargs_142621)
        
        # Processing the call keyword arguments (line 2509)
        kwargs_142623 = {}
        # Getting the type of 'result' (line 2509)
        result_142617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 17), 'result', False)
        # Obtaining the member 'view' of a type (line 2509)
        view_142618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2509, 17), result_142617, 'view')
        # Calling view(args, kwargs) (line 2509)
        view_call_result_142624 = invoke(stypy.reporting.localization.Localization(__file__, 2509, 17), view_142618, *[type_call_result_142622], **kwargs_142623)
        
        # Assigning a type to the variable 'result' (line 2509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2509, 8), 'result', view_call_result_142624)
        
        # Call to _update_from(...): (line 2510)
        # Processing the call arguments (line 2510)
        # Getting the type of 'self' (line 2510)
        self_142627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 28), 'self', False)
        # Processing the call keyword arguments (line 2510)
        kwargs_142628 = {}
        # Getting the type of 'result' (line 2510)
        result_142625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 8), 'result', False)
        # Obtaining the member '_update_from' of a type (line 2510)
        _update_from_142626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2510, 8), result_142625, '_update_from')
        # Calling _update_from(args, kwargs) (line 2510)
        _update_from_call_result_142629 = invoke(stypy.reporting.localization.Localization(__file__, 2510, 8), _update_from_142626, *[self_142627], **kwargs_142628)
        
        
        # Assigning a Attribute to a Name (line 2511):
        
        # Assigning a Attribute to a Name (line 2511):
        # Getting the type of 'self' (line 2511)
        self_142630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 15), 'self')
        # Obtaining the member '_mask' of a type (line 2511)
        _mask_142631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2511, 15), self_142630, '_mask')
        # Assigning a type to the variable 'mask' (line 2511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2511, 8), 'mask', _mask_142631)
        
        # Getting the type of 'result' (line 2512)
        result_142632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 11), 'result')
        # Obtaining the member 'ndim' of a type (line 2512)
        ndim_142633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2512, 11), result_142632, 'ndim')
        # Testing the type of an if condition (line 2512)
        if_condition_142634 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2512, 8), ndim_142633)
        # Assigning a type to the variable 'if_condition_142634' (line 2512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2512, 8), 'if_condition_142634', if_condition_142634)
        # SSA begins for if statement (line 2512)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'onmask' (line 2513)
        onmask_142635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 19), 'onmask')
        # Applying the 'not' unary operator (line 2513)
        result_not__142636 = python_operator(stypy.reporting.localization.Localization(__file__, 2513, 15), 'not', onmask_142635)
        
        # Testing the type of an if condition (line 2513)
        if_condition_142637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2513, 12), result_not__142636)
        # Assigning a type to the variable 'if_condition_142637' (line 2513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2513, 12), 'if_condition_142637', if_condition_142637)
        # SSA begins for if statement (line 2513)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __setmask__(...): (line 2514)
        # Processing the call arguments (line 2514)
        # Getting the type of 'mask' (line 2514)
        mask_142640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 35), 'mask', False)
        # Processing the call keyword arguments (line 2514)
        kwargs_142641 = {}
        # Getting the type of 'result' (line 2514)
        result_142638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 16), 'result', False)
        # Obtaining the member '__setmask__' of a type (line 2514)
        setmask___142639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2514, 16), result_142638, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 2514)
        setmask___call_result_142642 = invoke(stypy.reporting.localization.Localization(__file__, 2514, 16), setmask___142639, *[mask_142640], **kwargs_142641)
        
        # SSA branch for the else part of an if statement (line 2513)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'mask' (line 2515)
        mask_142643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 17), 'mask')
        # Getting the type of 'nomask' (line 2515)
        nomask_142644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 29), 'nomask')
        # Applying the binary operator 'isnot' (line 2515)
        result_is_not_142645 = python_operator(stypy.reporting.localization.Localization(__file__, 2515, 17), 'isnot', mask_142643, nomask_142644)
        
        # Testing the type of an if condition (line 2515)
        if_condition_142646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2515, 17), result_is_not_142645)
        # Assigning a type to the variable 'if_condition_142646' (line 2515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2515, 17), 'if_condition_142646', if_condition_142646)
        # SSA begins for if statement (line 2515)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __setmask__(...): (line 2516)
        # Processing the call arguments (line 2516)
        
        # Call to (...): (line 2516)
        # Getting the type of 'args' (line 2516)
        args_142654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 60), 'args', False)
        # Processing the call keyword arguments (line 2516)
        # Getting the type of 'params' (line 2516)
        params_142655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 68), 'params', False)
        kwargs_142656 = {'params_142655': params_142655}
        
        # Call to getattr(...): (line 2516)
        # Processing the call arguments (line 2516)
        # Getting the type of 'mask' (line 2516)
        mask_142650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 43), 'mask', False)
        # Getting the type of 'funcname' (line 2516)
        funcname_142651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 49), 'funcname', False)
        # Processing the call keyword arguments (line 2516)
        kwargs_142652 = {}
        # Getting the type of 'getattr' (line 2516)
        getattr_142649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 35), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2516)
        getattr_call_result_142653 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 35), getattr_142649, *[mask_142650, funcname_142651], **kwargs_142652)
        
        # Calling (args, kwargs) (line 2516)
        _call_result_142657 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 35), getattr_call_result_142653, *[args_142654], **kwargs_142656)
        
        # Processing the call keyword arguments (line 2516)
        kwargs_142658 = {}
        # Getting the type of 'result' (line 2516)
        result_142647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 16), 'result', False)
        # Obtaining the member '__setmask__' of a type (line 2516)
        setmask___142648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 16), result_142647, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 2516)
        setmask___call_result_142659 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 16), setmask___142648, *[_call_result_142657], **kwargs_142658)
        
        # SSA join for if statement (line 2515)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2513)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2512)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'mask' (line 2518)
        mask_142660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 15), 'mask')
        # Obtaining the member 'ndim' of a type (line 2518)
        ndim_142661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 15), mask_142660, 'ndim')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'mask' (line 2518)
        mask_142662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 34), 'mask')
        # Obtaining the member 'dtype' of a type (line 2518)
        dtype_142663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 34), mask_142662, 'dtype')
        # Obtaining the member 'names' of a type (line 2518)
        names_142664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 34), dtype_142663, 'names')
        # Applying the 'not' unary operator (line 2518)
        result_not__142665 = python_operator(stypy.reporting.localization.Localization(__file__, 2518, 30), 'not', names_142664)
        
        
        # Call to all(...): (line 2518)
        # Processing the call keyword arguments (line 2518)
        kwargs_142668 = {}
        # Getting the type of 'mask' (line 2518)
        mask_142666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 55), 'mask', False)
        # Obtaining the member 'all' of a type (line 2518)
        all_142667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 55), mask_142666, 'all')
        # Calling all(args, kwargs) (line 2518)
        all_call_result_142669 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 55), all_142667, *[], **kwargs_142668)
        
        # Applying the binary operator 'and' (line 2518)
        result_and_keyword_142670 = python_operator(stypy.reporting.localization.Localization(__file__, 2518, 30), 'and', result_not__142665, all_call_result_142669)
        
        # Applying the binary operator 'and' (line 2518)
        result_and_keyword_142671 = python_operator(stypy.reporting.localization.Localization(__file__, 2518, 15), 'and', ndim_142661, result_and_keyword_142670)
        
        # Testing the type of an if condition (line 2518)
        if_condition_142672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2518, 12), result_and_keyword_142671)
        # Assigning a type to the variable 'if_condition_142672' (line 2518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 12), 'if_condition_142672', if_condition_142672)
        # SSA begins for if statement (line 2518)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 2519)
        masked_142673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 23), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 2519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2519, 16), 'stypy_return_type', masked_142673)
        # SSA join for if statement (line 2518)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2512)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 2520)
        result_142674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 2520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2520, 8), 'stypy_return_type', result_142674)
        
        # ################# End of 'wrapped_method(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'wrapped_method' in the type store
        # Getting the type of 'stypy_return_type' (line 2507)
        stypy_return_type_142675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142675)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'wrapped_method'
        return stypy_return_type_142675

    # Assigning a type to the variable 'wrapped_method' (line 2507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2507, 4), 'wrapped_method', wrapped_method)
    
    # Assigning a BoolOp to a Name (line 2521):
    
    # Assigning a BoolOp to a Name (line 2521):
    
    # Evaluating a boolean operation
    
    # Call to getattr(...): (line 2521)
    # Processing the call arguments (line 2521)
    # Getting the type of 'ndarray' (line 2521)
    ndarray_142677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 22), 'ndarray', False)
    # Getting the type of 'funcname' (line 2521)
    funcname_142678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 31), 'funcname', False)
    # Getting the type of 'None' (line 2521)
    None_142679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 41), 'None', False)
    # Processing the call keyword arguments (line 2521)
    kwargs_142680 = {}
    # Getting the type of 'getattr' (line 2521)
    getattr_142676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 14), 'getattr', False)
    # Calling getattr(args, kwargs) (line 2521)
    getattr_call_result_142681 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 14), getattr_142676, *[ndarray_142677, funcname_142678, None_142679], **kwargs_142680)
    
    
    # Call to getattr(...): (line 2521)
    # Processing the call arguments (line 2521)
    # Getting the type of 'np' (line 2521)
    np_142683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 58), 'np', False)
    # Getting the type of 'funcname' (line 2521)
    funcname_142684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 62), 'funcname', False)
    # Getting the type of 'None' (line 2521)
    None_142685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 72), 'None', False)
    # Processing the call keyword arguments (line 2521)
    kwargs_142686 = {}
    # Getting the type of 'getattr' (line 2521)
    getattr_142682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 50), 'getattr', False)
    # Calling getattr(args, kwargs) (line 2521)
    getattr_call_result_142687 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 50), getattr_142682, *[np_142683, funcname_142684, None_142685], **kwargs_142686)
    
    # Applying the binary operator 'or' (line 2521)
    result_or_keyword_142688 = python_operator(stypy.reporting.localization.Localization(__file__, 2521, 14), 'or', getattr_call_result_142681, getattr_call_result_142687)
    
    # Assigning a type to the variable 'methdoc' (line 2521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2521, 4), 'methdoc', result_or_keyword_142688)
    
    # Type idiom detected: calculating its left and rigth part (line 2522)
    # Getting the type of 'methdoc' (line 2522)
    methdoc_142689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 4), 'methdoc')
    # Getting the type of 'None' (line 2522)
    None_142690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 22), 'None')
    
    (may_be_142691, more_types_in_union_142692) = may_not_be_none(methdoc_142689, None_142690)

    if may_be_142691:

        if more_types_in_union_142692:
            # Runtime conditional SSA (line 2522)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Attribute (line 2523):
        
        # Assigning a Attribute to a Attribute (line 2523):
        # Getting the type of 'methdoc' (line 2523)
        methdoc_142693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 33), 'methdoc')
        # Obtaining the member '__doc__' of a type (line 2523)
        doc___142694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2523, 33), methdoc_142693, '__doc__')
        # Getting the type of 'wrapped_method' (line 2523)
        wrapped_method_142695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 8), 'wrapped_method')
        # Setting the type of the member '__doc__' of a type (line 2523)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2523, 8), wrapped_method_142695, '__doc__', doc___142694)

        if more_types_in_union_142692:
            # SSA join for if statement (line 2522)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Attribute (line 2524):
    
    # Assigning a Name to a Attribute (line 2524):
    # Getting the type of 'funcname' (line 2524)
    funcname_142696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 30), 'funcname')
    # Getting the type of 'wrapped_method' (line 2524)
    wrapped_method_142697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 4), 'wrapped_method')
    # Setting the type of the member '__name__' of a type (line 2524)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2524, 4), wrapped_method_142697, '__name__', funcname_142696)
    # Getting the type of 'wrapped_method' (line 2525)
    wrapped_method_142698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 11), 'wrapped_method')
    # Assigning a type to the variable 'stypy_return_type' (line 2525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 4), 'stypy_return_type', wrapped_method_142698)
    
    # ################# End of '_arraymethod(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_arraymethod' in the type store
    # Getting the type of 'stypy_return_type' (line 2480)
    stypy_return_type_142699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_142699)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_arraymethod'
    return stypy_return_type_142699

# Assigning a type to the variable '_arraymethod' (line 2480)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2480, 0), '_arraymethod', _arraymethod)
# Declaration of the 'MaskedIterator' class

class MaskedIterator(object, ):
    str_142700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, (-1)), 'str', "\n    Flat iterator object to iterate over masked arrays.\n\n    A `MaskedIterator` iterator is returned by ``x.flat`` for any masked array\n    `x`. It allows iterating over the array as if it were a 1-D array,\n    either in a for-loop or by calling its `next` method.\n\n    Iteration is done in C-contiguous style, with the last index varying the\n    fastest. The iterator can also be indexed using basic slicing or\n    advanced indexing.\n\n    See Also\n    --------\n    MaskedArray.flat : Return a flat iterator over an array.\n    MaskedArray.flatten : Returns a flattened copy of an array.\n\n    Notes\n    -----\n    `MaskedIterator` is not exported by the `ma` module. Instead of\n    instantiating a `MaskedIterator` directly, use `MaskedArray.flat`.\n\n    Examples\n    --------\n    >>> x = np.ma.array(arange(6).reshape(2, 3))\n    >>> fl = x.flat\n    >>> type(fl)\n    <class 'numpy.ma.core.MaskedIterator'>\n    >>> for item in fl:\n    ...     print(item)\n    ...\n    0\n    1\n    2\n    3\n    4\n    5\n\n    Extracting more than a single element b indexing the `MaskedIterator`\n    returns a masked array:\n\n    >>> fl[2:4]\n    masked_array(data = [2 3],\n                 mask = False,\n           fill_value = 999999)\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2576, 4, False)
        # Assigning a type to the variable 'self' (line 2577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2577, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedIterator.__init__', ['ma'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ma'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 2577):
        
        # Assigning a Name to a Attribute (line 2577):
        # Getting the type of 'ma' (line 2577)
        ma_142701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 18), 'ma')
        # Getting the type of 'self' (line 2577)
        self_142702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 8), 'self')
        # Setting the type of the member 'ma' of a type (line 2577)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2577, 8), self_142702, 'ma', ma_142701)
        
        # Assigning a Attribute to a Attribute (line 2578):
        
        # Assigning a Attribute to a Attribute (line 2578):
        # Getting the type of 'ma' (line 2578)
        ma_142703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 24), 'ma')
        # Obtaining the member '_data' of a type (line 2578)
        _data_142704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 24), ma_142703, '_data')
        # Obtaining the member 'flat' of a type (line 2578)
        flat_142705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 24), _data_142704, 'flat')
        # Getting the type of 'self' (line 2578)
        self_142706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 8), 'self')
        # Setting the type of the member 'dataiter' of a type (line 2578)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2578, 8), self_142706, 'dataiter', flat_142705)
        
        
        # Getting the type of 'ma' (line 2580)
        ma_142707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 11), 'ma')
        # Obtaining the member '_mask' of a type (line 2580)
        _mask_142708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2580, 11), ma_142707, '_mask')
        # Getting the type of 'nomask' (line 2580)
        nomask_142709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 23), 'nomask')
        # Applying the binary operator 'is' (line 2580)
        result_is__142710 = python_operator(stypy.reporting.localization.Localization(__file__, 2580, 11), 'is', _mask_142708, nomask_142709)
        
        # Testing the type of an if condition (line 2580)
        if_condition_142711 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2580, 8), result_is__142710)
        # Assigning a type to the variable 'if_condition_142711' (line 2580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2580, 8), 'if_condition_142711', if_condition_142711)
        # SSA begins for if statement (line 2580)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2581):
        
        # Assigning a Name to a Attribute (line 2581):
        # Getting the type of 'None' (line 2581)
        None_142712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 28), 'None')
        # Getting the type of 'self' (line 2581)
        self_142713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 12), 'self')
        # Setting the type of the member 'maskiter' of a type (line 2581)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2581, 12), self_142713, 'maskiter', None_142712)
        # SSA branch for the else part of an if statement (line 2580)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Attribute (line 2583):
        
        # Assigning a Attribute to a Attribute (line 2583):
        # Getting the type of 'ma' (line 2583)
        ma_142714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 28), 'ma')
        # Obtaining the member '_mask' of a type (line 2583)
        _mask_142715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 28), ma_142714, '_mask')
        # Obtaining the member 'flat' of a type (line 2583)
        flat_142716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 28), _mask_142715, 'flat')
        # Getting the type of 'self' (line 2583)
        self_142717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 12), 'self')
        # Setting the type of the member 'maskiter' of a type (line 2583)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2583, 12), self_142717, 'maskiter', flat_142716)
        # SSA join for if statement (line 2580)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __iter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__iter__'
        module_type_store = module_type_store.open_function_context('__iter__', 2585, 4, False)
        # Assigning a type to the variable 'self' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_localization', localization)
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_function_name', 'MaskedIterator.__iter__')
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedIterator.__iter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedIterator.__iter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__iter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__iter__(...)' code ##################

        # Getting the type of 'self' (line 2586)
        self_142718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 2586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 8), 'stypy_return_type', self_142718)
        
        # ################# End of '__iter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__iter__' in the type store
        # Getting the type of 'stypy_return_type' (line 2585)
        stypy_return_type_142719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142719)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__iter__'
        return stypy_return_type_142719


    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 2588, 4, False)
        # Assigning a type to the variable 'self' (line 2589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_function_name', 'MaskedIterator.__getitem__')
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['indx'])
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedIterator.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedIterator.__getitem__', ['indx'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['indx'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        
        # Assigning a Call to a Name (line 2589):
        
        # Assigning a Call to a Name (line 2589):
        
        # Call to view(...): (line 2589)
        # Processing the call arguments (line 2589)
        
        # Call to type(...): (line 2589)
        # Processing the call arguments (line 2589)
        # Getting the type of 'self' (line 2589)
        self_142728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 59), 'self', False)
        # Obtaining the member 'ma' of a type (line 2589)
        ma_142729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 59), self_142728, 'ma')
        # Processing the call keyword arguments (line 2589)
        kwargs_142730 = {}
        # Getting the type of 'type' (line 2589)
        type_142727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 54), 'type', False)
        # Calling type(args, kwargs) (line 2589)
        type_call_result_142731 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 54), type_142727, *[ma_142729], **kwargs_142730)
        
        # Processing the call keyword arguments (line 2589)
        kwargs_142732 = {}
        
        # Call to __getitem__(...): (line 2589)
        # Processing the call arguments (line 2589)
        # Getting the type of 'indx' (line 2589)
        indx_142723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 43), 'indx', False)
        # Processing the call keyword arguments (line 2589)
        kwargs_142724 = {}
        # Getting the type of 'self' (line 2589)
        self_142720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 17), 'self', False)
        # Obtaining the member 'dataiter' of a type (line 2589)
        dataiter_142721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 17), self_142720, 'dataiter')
        # Obtaining the member '__getitem__' of a type (line 2589)
        getitem___142722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 17), dataiter_142721, '__getitem__')
        # Calling __getitem__(args, kwargs) (line 2589)
        getitem___call_result_142725 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 17), getitem___142722, *[indx_142723], **kwargs_142724)
        
        # Obtaining the member 'view' of a type (line 2589)
        view_142726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 17), getitem___call_result_142725, 'view')
        # Calling view(args, kwargs) (line 2589)
        view_call_result_142733 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 17), view_142726, *[type_call_result_142731], **kwargs_142732)
        
        # Assigning a type to the variable 'result' (line 2589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 8), 'result', view_call_result_142733)
        
        
        # Getting the type of 'self' (line 2590)
        self_142734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 11), 'self')
        # Obtaining the member 'maskiter' of a type (line 2590)
        maskiter_142735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 11), self_142734, 'maskiter')
        # Getting the type of 'None' (line 2590)
        None_142736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 32), 'None')
        # Applying the binary operator 'isnot' (line 2590)
        result_is_not_142737 = python_operator(stypy.reporting.localization.Localization(__file__, 2590, 11), 'isnot', maskiter_142735, None_142736)
        
        # Testing the type of an if condition (line 2590)
        if_condition_142738 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2590, 8), result_is_not_142737)
        # Assigning a type to the variable 'if_condition_142738' (line 2590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2590, 8), 'if_condition_142738', if_condition_142738)
        # SSA begins for if statement (line 2590)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2591):
        
        # Assigning a Call to a Name (line 2591):
        
        # Call to __getitem__(...): (line 2591)
        # Processing the call arguments (line 2591)
        # Getting the type of 'indx' (line 2591)
        indx_142742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 46), 'indx', False)
        # Processing the call keyword arguments (line 2591)
        kwargs_142743 = {}
        # Getting the type of 'self' (line 2591)
        self_142739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 20), 'self', False)
        # Obtaining the member 'maskiter' of a type (line 2591)
        maskiter_142740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2591, 20), self_142739, 'maskiter')
        # Obtaining the member '__getitem__' of a type (line 2591)
        getitem___142741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2591, 20), maskiter_142740, '__getitem__')
        # Calling __getitem__(args, kwargs) (line 2591)
        getitem___call_result_142744 = invoke(stypy.reporting.localization.Localization(__file__, 2591, 20), getitem___142741, *[indx_142742], **kwargs_142743)
        
        # Assigning a type to the variable '_mask' (line 2591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2591, 12), '_mask', getitem___call_result_142744)
        
        
        # Call to isinstance(...): (line 2592)
        # Processing the call arguments (line 2592)
        # Getting the type of '_mask' (line 2592)
        _mask_142746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 26), '_mask', False)
        # Getting the type of 'ndarray' (line 2592)
        ndarray_142747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 33), 'ndarray', False)
        # Processing the call keyword arguments (line 2592)
        kwargs_142748 = {}
        # Getting the type of 'isinstance' (line 2592)
        isinstance_142745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2592)
        isinstance_call_result_142749 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 15), isinstance_142745, *[_mask_142746, ndarray_142747], **kwargs_142748)
        
        # Testing the type of an if condition (line 2592)
        if_condition_142750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2592, 12), isinstance_call_result_142749)
        # Assigning a type to the variable 'if_condition_142750' (line 2592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 12), 'if_condition_142750', if_condition_142750)
        # SSA begins for if statement (line 2592)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 2594):
        
        # Assigning a Attribute to a Attribute (line 2594):
        # Getting the type of 'result' (line 2594)
        result_142751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 30), 'result')
        # Obtaining the member 'shape' of a type (line 2594)
        shape_142752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2594, 30), result_142751, 'shape')
        # Getting the type of '_mask' (line 2594)
        _mask_142753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 16), '_mask')
        # Setting the type of the member 'shape' of a type (line 2594)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2594, 16), _mask_142753, 'shape', shape_142752)
        
        # Assigning a Name to a Attribute (line 2595):
        
        # Assigning a Name to a Attribute (line 2595):
        # Getting the type of '_mask' (line 2595)
        _mask_142754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 31), '_mask')
        # Getting the type of 'result' (line 2595)
        result_142755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 16), 'result')
        # Setting the type of the member '_mask' of a type (line 2595)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 16), result_142755, '_mask', _mask_142754)
        # SSA branch for the else part of an if statement (line 2592)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 2596)
        # Processing the call arguments (line 2596)
        # Getting the type of '_mask' (line 2596)
        _mask_142757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 28), '_mask', False)
        # Getting the type of 'np' (line 2596)
        np_142758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 35), 'np', False)
        # Obtaining the member 'void' of a type (line 2596)
        void_142759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 35), np_142758, 'void')
        # Processing the call keyword arguments (line 2596)
        kwargs_142760 = {}
        # Getting the type of 'isinstance' (line 2596)
        isinstance_142756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 17), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2596)
        isinstance_call_result_142761 = invoke(stypy.reporting.localization.Localization(__file__, 2596, 17), isinstance_142756, *[_mask_142757, void_142759], **kwargs_142760)
        
        # Testing the type of an if condition (line 2596)
        if_condition_142762 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2596, 17), isinstance_call_result_142761)
        # Assigning a type to the variable 'if_condition_142762' (line 2596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2596, 17), 'if_condition_142762', if_condition_142762)
        # SSA begins for if statement (line 2596)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to mvoid(...): (line 2597)
        # Processing the call arguments (line 2597)
        # Getting the type of 'result' (line 2597)
        result_142764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 29), 'result', False)
        # Processing the call keyword arguments (line 2597)
        # Getting the type of '_mask' (line 2597)
        _mask_142765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 42), '_mask', False)
        keyword_142766 = _mask_142765
        # Getting the type of 'self' (line 2597)
        self_142767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 58), 'self', False)
        # Obtaining the member 'ma' of a type (line 2597)
        ma_142768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 58), self_142767, 'ma')
        # Obtaining the member '_hardmask' of a type (line 2597)
        _hardmask_142769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 58), ma_142768, '_hardmask')
        keyword_142770 = _hardmask_142769
        kwargs_142771 = {'hardmask': keyword_142770, 'mask': keyword_142766}
        # Getting the type of 'mvoid' (line 2597)
        mvoid_142763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 23), 'mvoid', False)
        # Calling mvoid(args, kwargs) (line 2597)
        mvoid_call_result_142772 = invoke(stypy.reporting.localization.Localization(__file__, 2597, 23), mvoid_142763, *[result_142764], **kwargs_142771)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2597, 16), 'stypy_return_type', mvoid_call_result_142772)
        # SSA branch for the else part of an if statement (line 2596)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of '_mask' (line 2598)
        _mask_142773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 17), '_mask')
        # Testing the type of an if condition (line 2598)
        if_condition_142774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2598, 17), _mask_142773)
        # Assigning a type to the variable 'if_condition_142774' (line 2598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2598, 17), 'if_condition_142774', if_condition_142774)
        # SSA begins for if statement (line 2598)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 2599)
        masked_142775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 23), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 2599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 16), 'stypy_return_type', masked_142775)
        # SSA join for if statement (line 2598)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2596)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2592)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2590)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 2600)
        result_142776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 2600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2600, 8), 'stypy_return_type', result_142776)
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 2588)
        stypy_return_type_142777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142777)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_142777


    @norecursion
    def __setitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setitem__'
        module_type_store = module_type_store.open_function_context('__setitem__', 2603, 4, False)
        # Assigning a type to the variable 'self' (line 2604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2604, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_localization', localization)
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_function_name', 'MaskedIterator.__setitem__')
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_param_names_list', ['index', 'value'])
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedIterator.__setitem__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedIterator.__setitem__', ['index', 'value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setitem__', localization, ['index', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setitem__(...)' code ##################

        
        # Assigning a Call to a Subscript (line 2604):
        
        # Assigning a Call to a Subscript (line 2604):
        
        # Call to getdata(...): (line 2604)
        # Processing the call arguments (line 2604)
        # Getting the type of 'value' (line 2604)
        value_142779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 39), 'value', False)
        # Processing the call keyword arguments (line 2604)
        kwargs_142780 = {}
        # Getting the type of 'getdata' (line 2604)
        getdata_142778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 31), 'getdata', False)
        # Calling getdata(args, kwargs) (line 2604)
        getdata_call_result_142781 = invoke(stypy.reporting.localization.Localization(__file__, 2604, 31), getdata_142778, *[value_142779], **kwargs_142780)
        
        # Getting the type of 'self' (line 2604)
        self_142782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 8), 'self')
        # Obtaining the member 'dataiter' of a type (line 2604)
        dataiter_142783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2604, 8), self_142782, 'dataiter')
        # Getting the type of 'index' (line 2604)
        index_142784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 22), 'index')
        # Storing an element on a container (line 2604)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2604, 8), dataiter_142783, (index_142784, getdata_call_result_142781))
        
        
        # Getting the type of 'self' (line 2605)
        self_142785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 11), 'self')
        # Obtaining the member 'maskiter' of a type (line 2605)
        maskiter_142786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 11), self_142785, 'maskiter')
        # Getting the type of 'None' (line 2605)
        None_142787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 32), 'None')
        # Applying the binary operator 'isnot' (line 2605)
        result_is_not_142788 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 11), 'isnot', maskiter_142786, None_142787)
        
        # Testing the type of an if condition (line 2605)
        if_condition_142789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2605, 8), result_is_not_142788)
        # Assigning a type to the variable 'if_condition_142789' (line 2605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2605, 8), 'if_condition_142789', if_condition_142789)
        # SSA begins for if statement (line 2605)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 2606):
        
        # Assigning a Call to a Subscript (line 2606):
        
        # Call to getmaskarray(...): (line 2606)
        # Processing the call arguments (line 2606)
        # Getting the type of 'value' (line 2606)
        value_142791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 48), 'value', False)
        # Processing the call keyword arguments (line 2606)
        kwargs_142792 = {}
        # Getting the type of 'getmaskarray' (line 2606)
        getmaskarray_142790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 35), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 2606)
        getmaskarray_call_result_142793 = invoke(stypy.reporting.localization.Localization(__file__, 2606, 35), getmaskarray_142790, *[value_142791], **kwargs_142792)
        
        # Getting the type of 'self' (line 2606)
        self_142794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 12), 'self')
        # Obtaining the member 'maskiter' of a type (line 2606)
        maskiter_142795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 12), self_142794, 'maskiter')
        # Getting the type of 'index' (line 2606)
        index_142796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 26), 'index')
        # Storing an element on a container (line 2606)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2606, 12), maskiter_142795, (index_142796, getmaskarray_call_result_142793))
        # SSA join for if statement (line 2605)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__setitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 2603)
        stypy_return_type_142797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142797)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setitem__'
        return stypy_return_type_142797


    @norecursion
    def __next__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__next__'
        module_type_store = module_type_store.open_function_context('__next__', 2608, 4, False)
        # Assigning a type to the variable 'self' (line 2609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2609, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedIterator.__next__.__dict__.__setitem__('stypy_localization', localization)
        MaskedIterator.__next__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedIterator.__next__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedIterator.__next__.__dict__.__setitem__('stypy_function_name', 'MaskedIterator.__next__')
        MaskedIterator.__next__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedIterator.__next__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedIterator.__next__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedIterator.__next__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedIterator.__next__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedIterator.__next__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedIterator.__next__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedIterator.__next__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__next__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__next__(...)' code ##################

        str_142798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, (-1)), 'str', '\n        Return the next value, or raise StopIteration.\n\n        Examples\n        --------\n        >>> x = np.ma.array([3, 2], mask=[0, 1])\n        >>> fl = x.flat\n        >>> fl.next()\n        3\n        >>> fl.next()\n        masked_array(data = --,\n                     mask = True,\n               fill_value = 1e+20)\n        >>> fl.next()\n        Traceback (most recent call last):\n          File "<stdin>", line 1, in <module>\n          File "/home/ralf/python/numpy/numpy/ma/core.py", line 2243, in next\n            d = self.dataiter.next()\n        StopIteration\n\n        ')
        
        # Assigning a Call to a Name (line 2630):
        
        # Assigning a Call to a Name (line 2630):
        
        # Call to next(...): (line 2630)
        # Processing the call arguments (line 2630)
        # Getting the type of 'self' (line 2630)
        self_142800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 17), 'self', False)
        # Obtaining the member 'dataiter' of a type (line 2630)
        dataiter_142801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 17), self_142800, 'dataiter')
        # Processing the call keyword arguments (line 2630)
        kwargs_142802 = {}
        # Getting the type of 'next' (line 2630)
        next_142799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 12), 'next', False)
        # Calling next(args, kwargs) (line 2630)
        next_call_result_142803 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 12), next_142799, *[dataiter_142801], **kwargs_142802)
        
        # Assigning a type to the variable 'd' (line 2630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2630, 8), 'd', next_call_result_142803)
        
        
        # Getting the type of 'self' (line 2631)
        self_142804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 11), 'self')
        # Obtaining the member 'maskiter' of a type (line 2631)
        maskiter_142805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2631, 11), self_142804, 'maskiter')
        # Getting the type of 'None' (line 2631)
        None_142806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 32), 'None')
        # Applying the binary operator 'isnot' (line 2631)
        result_is_not_142807 = python_operator(stypy.reporting.localization.Localization(__file__, 2631, 11), 'isnot', maskiter_142805, None_142806)
        
        # Testing the type of an if condition (line 2631)
        if_condition_142808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2631, 8), result_is_not_142807)
        # Assigning a type to the variable 'if_condition_142808' (line 2631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2631, 8), 'if_condition_142808', if_condition_142808)
        # SSA begins for if statement (line 2631)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2632):
        
        # Assigning a Call to a Name (line 2632):
        
        # Call to next(...): (line 2632)
        # Processing the call arguments (line 2632)
        # Getting the type of 'self' (line 2632)
        self_142810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 21), 'self', False)
        # Obtaining the member 'maskiter' of a type (line 2632)
        maskiter_142811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2632, 21), self_142810, 'maskiter')
        # Processing the call keyword arguments (line 2632)
        kwargs_142812 = {}
        # Getting the type of 'next' (line 2632)
        next_142809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 16), 'next', False)
        # Calling next(args, kwargs) (line 2632)
        next_call_result_142813 = invoke(stypy.reporting.localization.Localization(__file__, 2632, 16), next_142809, *[maskiter_142811], **kwargs_142812)
        
        # Assigning a type to the variable 'm' (line 2632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 12), 'm', next_call_result_142813)
        
        
        # Call to isinstance(...): (line 2633)
        # Processing the call arguments (line 2633)
        # Getting the type of 'm' (line 2633)
        m_142815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 26), 'm', False)
        # Getting the type of 'np' (line 2633)
        np_142816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 29), 'np', False)
        # Obtaining the member 'void' of a type (line 2633)
        void_142817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2633, 29), np_142816, 'void')
        # Processing the call keyword arguments (line 2633)
        kwargs_142818 = {}
        # Getting the type of 'isinstance' (line 2633)
        isinstance_142814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2633)
        isinstance_call_result_142819 = invoke(stypy.reporting.localization.Localization(__file__, 2633, 15), isinstance_142814, *[m_142815, void_142817], **kwargs_142818)
        
        # Testing the type of an if condition (line 2633)
        if_condition_142820 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2633, 12), isinstance_call_result_142819)
        # Assigning a type to the variable 'if_condition_142820' (line 2633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2633, 12), 'if_condition_142820', if_condition_142820)
        # SSA begins for if statement (line 2633)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to mvoid(...): (line 2634)
        # Processing the call arguments (line 2634)
        # Getting the type of 'd' (line 2634)
        d_142822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 29), 'd', False)
        # Processing the call keyword arguments (line 2634)
        # Getting the type of 'm' (line 2634)
        m_142823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 37), 'm', False)
        keyword_142824 = m_142823
        # Getting the type of 'self' (line 2634)
        self_142825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 49), 'self', False)
        # Obtaining the member 'ma' of a type (line 2634)
        ma_142826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2634, 49), self_142825, 'ma')
        # Obtaining the member '_hardmask' of a type (line 2634)
        _hardmask_142827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2634, 49), ma_142826, '_hardmask')
        keyword_142828 = _hardmask_142827
        kwargs_142829 = {'hardmask': keyword_142828, 'mask': keyword_142824}
        # Getting the type of 'mvoid' (line 2634)
        mvoid_142821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 23), 'mvoid', False)
        # Calling mvoid(args, kwargs) (line 2634)
        mvoid_call_result_142830 = invoke(stypy.reporting.localization.Localization(__file__, 2634, 23), mvoid_142821, *[d_142822], **kwargs_142829)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2634, 16), 'stypy_return_type', mvoid_call_result_142830)
        # SSA branch for the else part of an if statement (line 2633)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'm' (line 2635)
        m_142831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 17), 'm')
        # Testing the type of an if condition (line 2635)
        if_condition_142832 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2635, 17), m_142831)
        # Assigning a type to the variable 'if_condition_142832' (line 2635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 17), 'if_condition_142832', if_condition_142832)
        # SSA begins for if statement (line 2635)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 2636)
        masked_142833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 23), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 2636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 16), 'stypy_return_type', masked_142833)
        # SSA join for if statement (line 2635)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2633)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2631)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'd' (line 2637)
        d_142834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 15), 'd')
        # Assigning a type to the variable 'stypy_return_type' (line 2637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2637, 8), 'stypy_return_type', d_142834)
        
        # ################# End of '__next__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__next__' in the type store
        # Getting the type of 'stypy_return_type' (line 2608)
        stypy_return_type_142835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_142835)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__next__'
        return stypy_return_type_142835

    
    # Assigning a Name to a Name (line 2639):

# Assigning a type to the variable 'MaskedIterator' (line 2528)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2528, 0), 'MaskedIterator', MaskedIterator)

# Assigning a Name to a Name (line 2639):
# Getting the type of 'MaskedIterator'
MaskedIterator_142836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedIterator')
# Obtaining the member '__next__' of a type
next___142837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedIterator_142836, '__next__')
# Getting the type of 'MaskedIterator'
MaskedIterator_142838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedIterator')
# Setting the type of the member 'next' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedIterator_142838, 'next', next___142837)
# Declaration of the 'MaskedArray' class
# Getting the type of 'ndarray' (line 2642)
ndarray_142839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 18), 'ndarray')

class MaskedArray(ndarray_142839, ):
    str_142840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2695, (-1)), 'str', "\n    An array class with possibly masked values.\n\n    Masked values of True exclude the corresponding element from any\n    computation.\n\n    Construction::\n\n      x = MaskedArray(data, mask=nomask, dtype=None, copy=False, subok=True,\n                      ndmin=0, fill_value=None, keep_mask=True, hard_mask=None,\n                      shrink=True, order=None)\n\n    Parameters\n    ----------\n    data : array_like\n        Input data.\n    mask : sequence, optional\n        Mask. Must be convertible to an array of booleans with the same\n        shape as `data`. True indicates a masked (i.e. invalid) data.\n    dtype : dtype, optional\n        Data type of the output.\n        If `dtype` is None, the type of the data argument (``data.dtype``)\n        is used. If `dtype` is not None and different from ``data.dtype``,\n        a copy is performed.\n    copy : bool, optional\n        Whether to copy the input data (True), or to use a reference instead.\n        Default is False.\n    subok : bool, optional\n        Whether to return a subclass of `MaskedArray` if possible (True) or a\n        plain `MaskedArray`. Default is True.\n    ndmin : int, optional\n        Minimum number of dimensions. Default is 0.\n    fill_value : scalar, optional\n        Value used to fill in the masked values when necessary.\n        If None, a default based on the data-type is used.\n    keep_mask : bool, optional\n        Whether to combine `mask` with the mask of the input data, if any\n        (True), or to use only `mask` for the output (False). Default is True.\n    hard_mask : bool, optional\n        Whether to use a hard mask or not. With a hard mask, masked values\n        cannot be unmasked. Default is False.\n    shrink : bool, optional\n        Whether to force compression of an empty mask. Default is True.\n    order : {'C', 'F', 'A'}, optional\n        Specify the order of the array.  If order is 'C', then the array\n        will be in C-contiguous order (last-index varies the fastest).\n        If order is 'F', then the returned array will be in\n        Fortran-contiguous order (first-index varies the fastest).\n        If order is 'A' (default), then the returned array may be\n        in any order (either C-, Fortran-contiguous, or even discontiguous),\n        unless a copy is required, in which case it will be C-contiguous.\n\n    ")
    
    # Assigning a Num to a Name (line 2697):
    
    # Assigning a Name to a Name (line 2698):
    
    # Assigning a Name to a Name (line 2699):
    
    # Assigning a Name to a Name (line 2700):
    
    # Assigning a Num to a Name (line 2702):

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2704)
        None_142841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 26), 'None')
        # Getting the type of 'nomask' (line 2704)
        nomask_142842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 37), 'nomask')
        # Getting the type of 'None' (line 2704)
        None_142843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 51), 'None')
        # Getting the type of 'False' (line 2704)
        False_142844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 62), 'False')
        # Getting the type of 'True' (line 2705)
        True_142845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 22), 'True')
        int_142846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, 34), 'int')
        # Getting the type of 'None' (line 2705)
        None_142847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 48), 'None')
        # Getting the type of 'True' (line 2705)
        True_142848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 64), 'True')
        # Getting the type of 'None' (line 2706)
        None_142849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 26), 'None')
        # Getting the type of 'True' (line 2706)
        True_142850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 39), 'True')
        # Getting the type of 'None' (line 2706)
        None_142851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 51), 'None')
        defaults = [None_142841, nomask_142842, None_142843, False_142844, True_142845, int_142846, None_142847, True_142848, None_142849, True_142850, None_142851]
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 2704, 4, False)
        # Assigning a type to the variable 'self' (line 2705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2705, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__new__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__new__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__new__')
        MaskedArray.__new__.__dict__.__setitem__('stypy_param_names_list', ['data', 'mask', 'dtype', 'copy', 'subok', 'ndmin', 'fill_value', 'keep_mask', 'hard_mask', 'shrink', 'order'])
        MaskedArray.__new__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__new__.__dict__.__setitem__('stypy_kwargs_param_name', 'options')
        MaskedArray.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__new__.__dict__.__setitem__('stypy_declared_arg_number', 12)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__new__', ['data', 'mask', 'dtype', 'copy', 'subok', 'ndmin', 'fill_value', 'keep_mask', 'hard_mask', 'shrink', 'order'], None, 'options', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, ['data', 'mask', 'dtype', 'copy', 'subok', 'ndmin', 'fill_value', 'keep_mask', 'hard_mask', 'shrink', 'order'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        str_142852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2714, (-1)), 'str', '\n        Create a new masked array from scratch.\n\n        Notes\n        -----\n        A masked array can also be created by taking a .view(MaskedArray).\n\n        ')
        
        # Assigning a Call to a Name (line 2716):
        
        # Assigning a Call to a Name (line 2716):
        
        # Call to array(...): (line 2716)
        # Processing the call arguments (line 2716)
        # Getting the type of 'data' (line 2716)
        data_142855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 25), 'data', False)
        # Processing the call keyword arguments (line 2716)
        # Getting the type of 'dtype' (line 2716)
        dtype_142856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 37), 'dtype', False)
        keyword_142857 = dtype_142856
        # Getting the type of 'copy' (line 2716)
        copy_142858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 49), 'copy', False)
        keyword_142859 = copy_142858
        # Getting the type of 'order' (line 2717)
        order_142860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 31), 'order', False)
        keyword_142861 = order_142860
        # Getting the type of 'True' (line 2717)
        True_142862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 44), 'True', False)
        keyword_142863 = True_142862
        # Getting the type of 'ndmin' (line 2717)
        ndmin_142864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 56), 'ndmin', False)
        keyword_142865 = ndmin_142864
        kwargs_142866 = {'ndmin': keyword_142865, 'dtype': keyword_142857, 'copy': keyword_142859, 'order': keyword_142861, 'subok': keyword_142863}
        # Getting the type of 'np' (line 2716)
        np_142853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 2716)
        array_142854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2716, 16), np_142853, 'array')
        # Calling array(args, kwargs) (line 2716)
        array_call_result_142867 = invoke(stypy.reporting.localization.Localization(__file__, 2716, 16), array_142854, *[data_142855], **kwargs_142866)
        
        # Assigning a type to the variable '_data' (line 2716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2716, 8), '_data', array_call_result_142867)
        
        # Assigning a Call to a Name (line 2718):
        
        # Assigning a Call to a Name (line 2718):
        
        # Call to getattr(...): (line 2718)
        # Processing the call arguments (line 2718)
        # Getting the type of 'data' (line 2718)
        data_142869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 29), 'data', False)
        str_142870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2718, 35), 'str', '_baseclass')
        
        # Call to type(...): (line 2718)
        # Processing the call arguments (line 2718)
        # Getting the type of '_data' (line 2718)
        _data_142872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 54), '_data', False)
        # Processing the call keyword arguments (line 2718)
        kwargs_142873 = {}
        # Getting the type of 'type' (line 2718)
        type_142871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 49), 'type', False)
        # Calling type(args, kwargs) (line 2718)
        type_call_result_142874 = invoke(stypy.reporting.localization.Localization(__file__, 2718, 49), type_142871, *[_data_142872], **kwargs_142873)
        
        # Processing the call keyword arguments (line 2718)
        kwargs_142875 = {}
        # Getting the type of 'getattr' (line 2718)
        getattr_142868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 21), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2718)
        getattr_call_result_142876 = invoke(stypy.reporting.localization.Localization(__file__, 2718, 21), getattr_142868, *[data_142869, str_142870, type_call_result_142874], **kwargs_142875)
        
        # Assigning a type to the variable '_baseclass' (line 2718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2718, 8), '_baseclass', getattr_call_result_142876)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 2720)
        # Processing the call arguments (line 2720)
        # Getting the type of 'data' (line 2720)
        data_142878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 22), 'data', False)
        # Getting the type of 'MaskedArray' (line 2720)
        MaskedArray_142879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 28), 'MaskedArray', False)
        # Processing the call keyword arguments (line 2720)
        kwargs_142880 = {}
        # Getting the type of 'isinstance' (line 2720)
        isinstance_142877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2720)
        isinstance_call_result_142881 = invoke(stypy.reporting.localization.Localization(__file__, 2720, 11), isinstance_142877, *[data_142878, MaskedArray_142879], **kwargs_142880)
        
        
        # Getting the type of 'data' (line 2720)
        data_142882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 46), 'data')
        # Obtaining the member 'shape' of a type (line 2720)
        shape_142883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2720, 46), data_142882, 'shape')
        # Getting the type of '_data' (line 2720)
        _data_142884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 60), '_data')
        # Obtaining the member 'shape' of a type (line 2720)
        shape_142885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2720, 60), _data_142884, 'shape')
        # Applying the binary operator '!=' (line 2720)
        result_ne_142886 = python_operator(stypy.reporting.localization.Localization(__file__, 2720, 46), '!=', shape_142883, shape_142885)
        
        # Applying the binary operator 'and' (line 2720)
        result_and_keyword_142887 = python_operator(stypy.reporting.localization.Localization(__file__, 2720, 11), 'and', isinstance_call_result_142881, result_ne_142886)
        
        # Testing the type of an if condition (line 2720)
        if_condition_142888 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2720, 8), result_and_keyword_142887)
        # Assigning a type to the variable 'if_condition_142888' (line 2720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2720, 8), 'if_condition_142888', if_condition_142888)
        # SSA begins for if statement (line 2720)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2721):
        
        # Assigning a Name to a Name (line 2721):
        # Getting the type of 'True' (line 2721)
        True_142889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 19), 'True')
        # Assigning a type to the variable 'copy' (line 2721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2721, 12), 'copy', True_142889)
        # SSA join for if statement (line 2720)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Call to isinstance(...): (line 2723)
        # Processing the call arguments (line 2723)
        # Getting the type of 'data' (line 2723)
        data_142891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 26), 'data', False)
        # Getting the type of 'cls' (line 2723)
        cls_142892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 32), 'cls', False)
        # Processing the call keyword arguments (line 2723)
        kwargs_142893 = {}
        # Getting the type of 'isinstance' (line 2723)
        isinstance_142890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2723)
        isinstance_call_result_142894 = invoke(stypy.reporting.localization.Localization(__file__, 2723, 15), isinstance_142890, *[data_142891, cls_142892], **kwargs_142893)
        
        # Applying the 'not' unary operator (line 2723)
        result_not__142895 = python_operator(stypy.reporting.localization.Localization(__file__, 2723, 11), 'not', isinstance_call_result_142894)
        
        
        # Getting the type of 'subok' (line 2723)
        subok_142896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 44), 'subok')
        # Applying the 'not' unary operator (line 2723)
        result_not__142897 = python_operator(stypy.reporting.localization.Localization(__file__, 2723, 40), 'not', subok_142896)
        
        # Applying the binary operator 'or' (line 2723)
        result_or_keyword_142898 = python_operator(stypy.reporting.localization.Localization(__file__, 2723, 11), 'or', result_not__142895, result_not__142897)
        
        # Testing the type of an if condition (line 2723)
        if_condition_142899 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2723, 8), result_or_keyword_142898)
        # Assigning a type to the variable 'if_condition_142899' (line 2723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2723, 8), 'if_condition_142899', if_condition_142899)
        # SSA begins for if statement (line 2723)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2724):
        
        # Assigning a Call to a Name (line 2724):
        
        # Call to view(...): (line 2724)
        # Processing the call arguments (line 2724)
        # Getting the type of '_data' (line 2724)
        _data_142902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 33), '_data', False)
        # Getting the type of 'cls' (line 2724)
        cls_142903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 40), 'cls', False)
        # Processing the call keyword arguments (line 2724)
        kwargs_142904 = {}
        # Getting the type of 'ndarray' (line 2724)
        ndarray_142900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 20), 'ndarray', False)
        # Obtaining the member 'view' of a type (line 2724)
        view_142901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2724, 20), ndarray_142900, 'view')
        # Calling view(args, kwargs) (line 2724)
        view_call_result_142905 = invoke(stypy.reporting.localization.Localization(__file__, 2724, 20), view_142901, *[_data_142902, cls_142903], **kwargs_142904)
        
        # Assigning a type to the variable '_data' (line 2724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2724, 12), '_data', view_call_result_142905)
        # SSA branch for the else part of an if statement (line 2723)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2726):
        
        # Assigning a Call to a Name (line 2726):
        
        # Call to view(...): (line 2726)
        # Processing the call arguments (line 2726)
        # Getting the type of '_data' (line 2726)
        _data_142908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 33), '_data', False)
        
        # Call to type(...): (line 2726)
        # Processing the call arguments (line 2726)
        # Getting the type of 'data' (line 2726)
        data_142910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 45), 'data', False)
        # Processing the call keyword arguments (line 2726)
        kwargs_142911 = {}
        # Getting the type of 'type' (line 2726)
        type_142909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 40), 'type', False)
        # Calling type(args, kwargs) (line 2726)
        type_call_result_142912 = invoke(stypy.reporting.localization.Localization(__file__, 2726, 40), type_142909, *[data_142910], **kwargs_142911)
        
        # Processing the call keyword arguments (line 2726)
        kwargs_142913 = {}
        # Getting the type of 'ndarray' (line 2726)
        ndarray_142906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 20), 'ndarray', False)
        # Obtaining the member 'view' of a type (line 2726)
        view_142907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2726, 20), ndarray_142906, 'view')
        # Calling view(args, kwargs) (line 2726)
        view_call_result_142914 = invoke(stypy.reporting.localization.Localization(__file__, 2726, 20), view_142907, *[_data_142908, type_call_result_142912], **kwargs_142913)
        
        # Assigning a type to the variable '_data' (line 2726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2726, 12), '_data', view_call_result_142914)
        # SSA join for if statement (line 2723)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 2728)
        # Processing the call arguments (line 2728)
        # Getting the type of 'data' (line 2728)
        data_142916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 19), 'data', False)
        str_142917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2728, 25), 'str', '_mask')
        # Processing the call keyword arguments (line 2728)
        kwargs_142918 = {}
        # Getting the type of 'hasattr' (line 2728)
        hasattr_142915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 11), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 2728)
        hasattr_call_result_142919 = invoke(stypy.reporting.localization.Localization(__file__, 2728, 11), hasattr_142915, *[data_142916, str_142917], **kwargs_142918)
        
        
        
        # Call to isinstance(...): (line 2728)
        # Processing the call arguments (line 2728)
        # Getting the type of 'data' (line 2728)
        data_142921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 53), 'data', False)
        # Getting the type of 'ndarray' (line 2728)
        ndarray_142922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 59), 'ndarray', False)
        # Processing the call keyword arguments (line 2728)
        kwargs_142923 = {}
        # Getting the type of 'isinstance' (line 2728)
        isinstance_142920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 42), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2728)
        isinstance_call_result_142924 = invoke(stypy.reporting.localization.Localization(__file__, 2728, 42), isinstance_142920, *[data_142921, ndarray_142922], **kwargs_142923)
        
        # Applying the 'not' unary operator (line 2728)
        result_not__142925 = python_operator(stypy.reporting.localization.Localization(__file__, 2728, 38), 'not', isinstance_call_result_142924)
        
        # Applying the binary operator 'and' (line 2728)
        result_and_keyword_142926 = python_operator(stypy.reporting.localization.Localization(__file__, 2728, 11), 'and', hasattr_call_result_142919, result_not__142925)
        
        # Testing the type of an if condition (line 2728)
        if_condition_142927 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2728, 8), result_and_keyword_142926)
        # Assigning a type to the variable 'if_condition_142927' (line 2728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2728, 8), 'if_condition_142927', if_condition_142927)
        # SSA begins for if statement (line 2728)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 2729):
        
        # Assigning a Attribute to a Attribute (line 2729):
        # Getting the type of 'data' (line 2729)
        data_142928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 26), 'data')
        # Obtaining the member '_mask' of a type (line 2729)
        _mask_142929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 26), data_142928, '_mask')
        # Getting the type of '_data' (line 2729)
        _data_142930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 12), '_data')
        # Setting the type of the member '_mask' of a type (line 2729)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 12), _data_142930, '_mask', _mask_142929)
        
        # Assigning a Name to a Name (line 2731):
        
        # Assigning a Name to a Name (line 2731):
        # Getting the type of 'True' (line 2731)
        True_142931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 26), 'True')
        # Assigning a type to the variable '_sharedmask' (line 2731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2731, 12), '_sharedmask', True_142931)
        # SSA join for if statement (line 2728)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BoolOp to a Name (line 2734):
        
        # Assigning a BoolOp to a Name (line 2734):
        
        # Evaluating a boolean operation
        # Getting the type of '_data' (line 2734)
        _data_142932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 17), '_data')
        # Obtaining the member 'dtype' of a type (line 2734)
        dtype_142933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2734, 17), _data_142932, 'dtype')
        # Obtaining the member 'names' of a type (line 2734)
        names_142934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2734, 17), dtype_142933, 'names')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2734)
        tuple_142935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2734, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2734)
        
        # Applying the binary operator 'or' (line 2734)
        result_or_keyword_142936 = python_operator(stypy.reporting.localization.Localization(__file__, 2734, 17), 'or', names_142934, tuple_142935)
        
        # Assigning a type to the variable 'names_' (line 2734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2734, 8), 'names_', result_or_keyword_142936)
        
        # Getting the type of 'names_' (line 2736)
        names__142937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 11), 'names_')
        # Testing the type of an if condition (line 2736)
        if_condition_142938 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2736, 8), names__142937)
        # Assigning a type to the variable 'if_condition_142938' (line 2736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'if_condition_142938', if_condition_142938)
        # SSA begins for if statement (line 2736)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2737):
        
        # Assigning a Call to a Name (line 2737):
        
        # Call to make_mask_descr(...): (line 2737)
        # Processing the call arguments (line 2737)
        # Getting the type of '_data' (line 2737)
        _data_142940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 37), '_data', False)
        # Obtaining the member 'dtype' of a type (line 2737)
        dtype_142941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2737, 37), _data_142940, 'dtype')
        # Processing the call keyword arguments (line 2737)
        kwargs_142942 = {}
        # Getting the type of 'make_mask_descr' (line 2737)
        make_mask_descr_142939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 21), 'make_mask_descr', False)
        # Calling make_mask_descr(args, kwargs) (line 2737)
        make_mask_descr_call_result_142943 = invoke(stypy.reporting.localization.Localization(__file__, 2737, 21), make_mask_descr_142939, *[dtype_142941], **kwargs_142942)
        
        # Assigning a type to the variable 'mdtype' (line 2737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2737, 12), 'mdtype', make_mask_descr_call_result_142943)
        # SSA branch for the else part of an if statement (line 2736)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2739):
        
        # Assigning a Name to a Name (line 2739):
        # Getting the type of 'MaskType' (line 2739)
        MaskType_142944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 21), 'MaskType')
        # Assigning a type to the variable 'mdtype' (line 2739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2739, 12), 'mdtype', MaskType_142944)
        # SSA join for if statement (line 2736)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'mask' (line 2741)
        mask_142945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 11), 'mask')
        # Getting the type of 'nomask' (line 2741)
        nomask_142946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 19), 'nomask')
        # Applying the binary operator 'is' (line 2741)
        result_is__142947 = python_operator(stypy.reporting.localization.Localization(__file__, 2741, 11), 'is', mask_142945, nomask_142946)
        
        # Testing the type of an if condition (line 2741)
        if_condition_142948 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2741, 8), result_is__142947)
        # Assigning a type to the variable 'if_condition_142948' (line 2741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 8), 'if_condition_142948', if_condition_142948)
        # SSA begins for if statement (line 2741)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'keep_mask' (line 2744)
        keep_mask_142949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 19), 'keep_mask')
        # Applying the 'not' unary operator (line 2744)
        result_not__142950 = python_operator(stypy.reporting.localization.Localization(__file__, 2744, 15), 'not', keep_mask_142949)
        
        # Testing the type of an if condition (line 2744)
        if_condition_142951 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2744, 12), result_not__142950)
        # Assigning a type to the variable 'if_condition_142951' (line 2744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2744, 12), 'if_condition_142951', if_condition_142951)
        # SSA begins for if statement (line 2744)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'shrink' (line 2746)
        shrink_142952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 19), 'shrink')
        # Testing the type of an if condition (line 2746)
        if_condition_142953 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2746, 16), shrink_142952)
        # Assigning a type to the variable 'if_condition_142953' (line 2746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2746, 16), 'if_condition_142953', if_condition_142953)
        # SSA begins for if statement (line 2746)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2747):
        
        # Assigning a Name to a Attribute (line 2747):
        # Getting the type of 'nomask' (line 2747)
        nomask_142954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 34), 'nomask')
        # Getting the type of '_data' (line 2747)
        _data_142955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 20), '_data')
        # Setting the type of the member '_mask' of a type (line 2747)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2747, 20), _data_142955, '_mask', nomask_142954)
        # SSA branch for the else part of an if statement (line 2746)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 2750):
        
        # Assigning a Call to a Attribute (line 2750):
        
        # Call to zeros(...): (line 2750)
        # Processing the call arguments (line 2750)
        # Getting the type of '_data' (line 2750)
        _data_142958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 43), '_data', False)
        # Obtaining the member 'shape' of a type (line 2750)
        shape_142959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 43), _data_142958, 'shape')
        # Processing the call keyword arguments (line 2750)
        # Getting the type of 'mdtype' (line 2750)
        mdtype_142960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 62), 'mdtype', False)
        keyword_142961 = mdtype_142960
        kwargs_142962 = {'dtype': keyword_142961}
        # Getting the type of 'np' (line 2750)
        np_142956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 34), 'np', False)
        # Obtaining the member 'zeros' of a type (line 2750)
        zeros_142957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 34), np_142956, 'zeros')
        # Calling zeros(args, kwargs) (line 2750)
        zeros_call_result_142963 = invoke(stypy.reporting.localization.Localization(__file__, 2750, 34), zeros_142957, *[shape_142959], **kwargs_142962)
        
        # Getting the type of '_data' (line 2750)
        _data_142964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 20), '_data')
        # Setting the type of the member '_mask' of a type (line 2750)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 20), _data_142964, '_mask', zeros_call_result_142963)
        # SSA join for if statement (line 2746)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2744)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 2752)
        # Processing the call arguments (line 2752)
        # Getting the type of 'data' (line 2752)
        data_142966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 28), 'data', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2752)
        tuple_142967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2752, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2752)
        # Adding element type (line 2752)
        # Getting the type of 'tuple' (line 2752)
        tuple_142968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 35), 'tuple', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2752, 35), tuple_142967, tuple_142968)
        # Adding element type (line 2752)
        # Getting the type of 'list' (line 2752)
        list_142969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 42), 'list', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2752, 35), tuple_142967, list_142969)
        
        # Processing the call keyword arguments (line 2752)
        kwargs_142970 = {}
        # Getting the type of 'isinstance' (line 2752)
        isinstance_142965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 17), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2752)
        isinstance_call_result_142971 = invoke(stypy.reporting.localization.Localization(__file__, 2752, 17), isinstance_142965, *[data_142966, tuple_142967], **kwargs_142970)
        
        # Testing the type of an if condition (line 2752)
        if_condition_142972 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2752, 17), isinstance_call_result_142971)
        # Assigning a type to the variable 'if_condition_142972' (line 2752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 17), 'if_condition_142972', if_condition_142972)
        # SSA begins for if statement (line 2752)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 2753)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 2755):
        
        # Assigning a Call to a Name (line 2755):
        
        # Call to array(...): (line 2755)
        # Processing the call arguments (line 2755)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'data' (line 2755)
        data_142979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 62), 'data', False)
        comprehension_142980 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2755, 37), data_142979)
        # Assigning a type to the variable 'm' (line 2755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 37), 'm', comprehension_142980)
        
        # Call to getmaskarray(...): (line 2755)
        # Processing the call arguments (line 2755)
        # Getting the type of 'm' (line 2755)
        m_142976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 50), 'm', False)
        # Processing the call keyword arguments (line 2755)
        kwargs_142977 = {}
        # Getting the type of 'getmaskarray' (line 2755)
        getmaskarray_142975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 37), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 2755)
        getmaskarray_call_result_142978 = invoke(stypy.reporting.localization.Localization(__file__, 2755, 37), getmaskarray_142975, *[m_142976], **kwargs_142977)
        
        list_142981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2755, 37), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2755, 37), list_142981, getmaskarray_call_result_142978)
        # Processing the call keyword arguments (line 2755)
        # Getting the type of 'mdtype' (line 2756)
        mdtype_142982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 42), 'mdtype', False)
        keyword_142983 = mdtype_142982
        kwargs_142984 = {'dtype': keyword_142983}
        # Getting the type of 'np' (line 2755)
        np_142973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 2755)
        array_142974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 27), np_142973, 'array')
        # Calling array(args, kwargs) (line 2755)
        array_call_result_142985 = invoke(stypy.reporting.localization.Localization(__file__, 2755, 27), array_142974, *[list_142981], **kwargs_142984)
        
        # Assigning a type to the variable 'mask' (line 2755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 20), 'mask', array_call_result_142985)
        # SSA branch for the except part of a try statement (line 2753)
        # SSA branch for the except 'ValueError' branch of a try statement (line 2753)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Name (line 2759):
        
        # Assigning a Name to a Name (line 2759):
        # Getting the type of 'nomask' (line 2759)
        nomask_142986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2759, 27), 'nomask')
        # Assigning a type to the variable 'mask' (line 2759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2759, 20), 'mask', nomask_142986)
        # SSA join for try-except statement (line 2753)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'mdtype' (line 2761)
        mdtype_142987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 20), 'mdtype')
        # Getting the type of 'MaskType' (line 2761)
        MaskType_142988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 30), 'MaskType')
        # Applying the binary operator '==' (line 2761)
        result_eq_142989 = python_operator(stypy.reporting.localization.Localization(__file__, 2761, 20), '==', mdtype_142987, MaskType_142988)
        
        
        # Call to any(...): (line 2761)
        # Processing the call keyword arguments (line 2761)
        kwargs_142992 = {}
        # Getting the type of 'mask' (line 2761)
        mask_142990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2761, 44), 'mask', False)
        # Obtaining the member 'any' of a type (line 2761)
        any_142991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2761, 44), mask_142990, 'any')
        # Calling any(args, kwargs) (line 2761)
        any_call_result_142993 = invoke(stypy.reporting.localization.Localization(__file__, 2761, 44), any_142991, *[], **kwargs_142992)
        
        # Applying the binary operator 'and' (line 2761)
        result_and_keyword_142994 = python_operator(stypy.reporting.localization.Localization(__file__, 2761, 19), 'and', result_eq_142989, any_call_result_142993)
        
        # Testing the type of an if condition (line 2761)
        if_condition_142995 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2761, 16), result_and_keyword_142994)
        # Assigning a type to the variable 'if_condition_142995' (line 2761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2761, 16), 'if_condition_142995', if_condition_142995)
        # SSA begins for if statement (line 2761)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2762):
        
        # Assigning a Name to a Attribute (line 2762):
        # Getting the type of 'mask' (line 2762)
        mask_142996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 34), 'mask')
        # Getting the type of '_data' (line 2762)
        _data_142997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 20), '_data')
        # Setting the type of the member '_mask' of a type (line 2762)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2762, 20), _data_142997, '_mask', mask_142996)
        
        # Assigning a Name to a Attribute (line 2763):
        
        # Assigning a Name to a Attribute (line 2763):
        # Getting the type of 'False' (line 2763)
        False_142998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 40), 'False')
        # Getting the type of '_data' (line 2763)
        _data_142999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 20), '_data')
        # Setting the type of the member '_sharedmask' of a type (line 2763)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2763, 20), _data_142999, '_sharedmask', False_142998)
        # SSA join for if statement (line 2761)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2752)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'copy' (line 2765)
        copy_143000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 19), 'copy')
        # Testing the type of an if condition (line 2765)
        if_condition_143001 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2765, 16), copy_143000)
        # Assigning a type to the variable 'if_condition_143001' (line 2765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2765, 16), 'if_condition_143001', if_condition_143001)
        # SSA begins for if statement (line 2765)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 2766):
        
        # Assigning a Call to a Attribute (line 2766):
        
        # Call to copy(...): (line 2766)
        # Processing the call keyword arguments (line 2766)
        kwargs_143005 = {}
        # Getting the type of '_data' (line 2766)
        _data_143002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 34), '_data', False)
        # Obtaining the member '_mask' of a type (line 2766)
        _mask_143003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2766, 34), _data_143002, '_mask')
        # Obtaining the member 'copy' of a type (line 2766)
        copy_143004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2766, 34), _mask_143003, 'copy')
        # Calling copy(args, kwargs) (line 2766)
        copy_call_result_143006 = invoke(stypy.reporting.localization.Localization(__file__, 2766, 34), copy_143004, *[], **kwargs_143005)
        
        # Getting the type of '_data' (line 2766)
        _data_143007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 20), '_data')
        # Setting the type of the member '_mask' of a type (line 2766)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2766, 20), _data_143007, '_mask', copy_call_result_143006)
        
        # Assigning a Name to a Attribute (line 2767):
        
        # Assigning a Name to a Attribute (line 2767):
        # Getting the type of 'False' (line 2767)
        False_143008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 40), 'False')
        # Getting the type of '_data' (line 2767)
        _data_143009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 20), '_data')
        # Setting the type of the member '_sharedmask' of a type (line 2767)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2767, 20), _data_143009, '_sharedmask', False_143008)
        
        
        
        # Call to getmask(...): (line 2769)
        # Processing the call arguments (line 2769)
        # Getting the type of 'data' (line 2769)
        data_143011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 31), 'data', False)
        # Processing the call keyword arguments (line 2769)
        kwargs_143012 = {}
        # Getting the type of 'getmask' (line 2769)
        getmask_143010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 23), 'getmask', False)
        # Calling getmask(args, kwargs) (line 2769)
        getmask_call_result_143013 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 23), getmask_143010, *[data_143011], **kwargs_143012)
        
        # Getting the type of 'nomask' (line 2769)
        nomask_143014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 44), 'nomask')
        # Applying the binary operator 'isnot' (line 2769)
        result_is_not_143015 = python_operator(stypy.reporting.localization.Localization(__file__, 2769, 23), 'isnot', getmask_call_result_143013, nomask_143014)
        
        # Testing the type of an if condition (line 2769)
        if_condition_143016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2769, 20), result_is_not_143015)
        # Assigning a type to the variable 'if_condition_143016' (line 2769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 20), 'if_condition_143016', if_condition_143016)
        # SSA begins for if statement (line 2769)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 2770):
        
        # Assigning a Attribute to a Attribute (line 2770):
        # Getting the type of 'data' (line 2770)
        data_143017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 43), 'data')
        # Obtaining the member 'shape' of a type (line 2770)
        shape_143018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2770, 43), data_143017, 'shape')
        # Getting the type of 'data' (line 2770)
        data_143019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 24), 'data')
        # Obtaining the member '_mask' of a type (line 2770)
        _mask_143020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2770, 24), data_143019, '_mask')
        # Setting the type of the member 'shape' of a type (line 2770)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2770, 24), _mask_143020, 'shape', shape_143018)
        # SSA join for if statement (line 2769)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2765)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 2772):
        
        # Assigning a Name to a Attribute (line 2772):
        # Getting the type of 'True' (line 2772)
        True_143021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 40), 'True')
        # Getting the type of '_data' (line 2772)
        _data_143022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 20), '_data')
        # Setting the type of the member '_sharedmask' of a type (line 2772)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2772, 20), _data_143022, '_sharedmask', True_143021)
        # SSA join for if statement (line 2765)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2752)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2744)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2741)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'mask' (line 2776)
        mask_143023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 15), 'mask')
        # Getting the type of 'True' (line 2776)
        True_143024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 23), 'True')
        # Applying the binary operator 'is' (line 2776)
        result_is__143025 = python_operator(stypy.reporting.localization.Localization(__file__, 2776, 15), 'is', mask_143023, True_143024)
        
        
        # Getting the type of 'mdtype' (line 2776)
        mdtype_143026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 32), 'mdtype')
        # Getting the type of 'MaskType' (line 2776)
        MaskType_143027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 42), 'MaskType')
        # Applying the binary operator '==' (line 2776)
        result_eq_143028 = python_operator(stypy.reporting.localization.Localization(__file__, 2776, 32), '==', mdtype_143026, MaskType_143027)
        
        # Applying the binary operator 'and' (line 2776)
        result_and_keyword_143029 = python_operator(stypy.reporting.localization.Localization(__file__, 2776, 15), 'and', result_is__143025, result_eq_143028)
        
        # Testing the type of an if condition (line 2776)
        if_condition_143030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2776, 12), result_and_keyword_143029)
        # Assigning a type to the variable 'if_condition_143030' (line 2776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2776, 12), 'if_condition_143030', if_condition_143030)
        # SSA begins for if statement (line 2776)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2777):
        
        # Assigning a Call to a Name (line 2777):
        
        # Call to ones(...): (line 2777)
        # Processing the call arguments (line 2777)
        # Getting the type of '_data' (line 2777)
        _data_143033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 31), '_data', False)
        # Obtaining the member 'shape' of a type (line 2777)
        shape_143034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2777, 31), _data_143033, 'shape')
        # Processing the call keyword arguments (line 2777)
        # Getting the type of 'mdtype' (line 2777)
        mdtype_143035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 50), 'mdtype', False)
        keyword_143036 = mdtype_143035
        kwargs_143037 = {'dtype': keyword_143036}
        # Getting the type of 'np' (line 2777)
        np_143031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 23), 'np', False)
        # Obtaining the member 'ones' of a type (line 2777)
        ones_143032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2777, 23), np_143031, 'ones')
        # Calling ones(args, kwargs) (line 2777)
        ones_call_result_143038 = invoke(stypy.reporting.localization.Localization(__file__, 2777, 23), ones_143032, *[shape_143034], **kwargs_143037)
        
        # Assigning a type to the variable 'mask' (line 2777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2777, 16), 'mask', ones_call_result_143038)
        # SSA branch for the else part of an if statement (line 2776)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'mask' (line 2778)
        mask_143039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 17), 'mask')
        # Getting the type of 'False' (line 2778)
        False_143040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 25), 'False')
        # Applying the binary operator 'is' (line 2778)
        result_is__143041 = python_operator(stypy.reporting.localization.Localization(__file__, 2778, 17), 'is', mask_143039, False_143040)
        
        
        # Getting the type of 'mdtype' (line 2778)
        mdtype_143042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 35), 'mdtype')
        # Getting the type of 'MaskType' (line 2778)
        MaskType_143043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 45), 'MaskType')
        # Applying the binary operator '==' (line 2778)
        result_eq_143044 = python_operator(stypy.reporting.localization.Localization(__file__, 2778, 35), '==', mdtype_143042, MaskType_143043)
        
        # Applying the binary operator 'and' (line 2778)
        result_and_keyword_143045 = python_operator(stypy.reporting.localization.Localization(__file__, 2778, 17), 'and', result_is__143041, result_eq_143044)
        
        # Testing the type of an if condition (line 2778)
        if_condition_143046 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2778, 17), result_and_keyword_143045)
        # Assigning a type to the variable 'if_condition_143046' (line 2778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2778, 17), 'if_condition_143046', if_condition_143046)
        # SSA begins for if statement (line 2778)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2779):
        
        # Assigning a Call to a Name (line 2779):
        
        # Call to zeros(...): (line 2779)
        # Processing the call arguments (line 2779)
        # Getting the type of '_data' (line 2779)
        _data_143049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 32), '_data', False)
        # Obtaining the member 'shape' of a type (line 2779)
        shape_143050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2779, 32), _data_143049, 'shape')
        # Processing the call keyword arguments (line 2779)
        # Getting the type of 'mdtype' (line 2779)
        mdtype_143051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 51), 'mdtype', False)
        keyword_143052 = mdtype_143051
        kwargs_143053 = {'dtype': keyword_143052}
        # Getting the type of 'np' (line 2779)
        np_143047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 23), 'np', False)
        # Obtaining the member 'zeros' of a type (line 2779)
        zeros_143048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2779, 23), np_143047, 'zeros')
        # Calling zeros(args, kwargs) (line 2779)
        zeros_call_result_143054 = invoke(stypy.reporting.localization.Localization(__file__, 2779, 23), zeros_143048, *[shape_143050], **kwargs_143053)
        
        # Assigning a type to the variable 'mask' (line 2779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2779, 16), 'mask', zeros_call_result_143054)
        # SSA branch for the else part of an if statement (line 2778)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 2782)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 2783):
        
        # Assigning a Call to a Name (line 2783):
        
        # Call to array(...): (line 2783)
        # Processing the call arguments (line 2783)
        # Getting the type of 'mask' (line 2783)
        mask_143057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 36), 'mask', False)
        # Processing the call keyword arguments (line 2783)
        # Getting the type of 'copy' (line 2783)
        copy_143058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 47), 'copy', False)
        keyword_143059 = copy_143058
        # Getting the type of 'mdtype' (line 2783)
        mdtype_143060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 59), 'mdtype', False)
        keyword_143061 = mdtype_143060
        kwargs_143062 = {'dtype': keyword_143061, 'copy': keyword_143059}
        # Getting the type of 'np' (line 2783)
        np_143055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 2783)
        array_143056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2783, 27), np_143055, 'array')
        # Calling array(args, kwargs) (line 2783)
        array_call_result_143063 = invoke(stypy.reporting.localization.Localization(__file__, 2783, 27), array_143056, *[mask_143057], **kwargs_143062)
        
        # Assigning a type to the variable 'mask' (line 2783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2783, 20), 'mask', array_call_result_143063)
        # SSA branch for the except part of a try statement (line 2782)
        # SSA branch for the except 'TypeError' branch of a try statement (line 2782)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 2786):
        
        # Assigning a Call to a Name (line 2786):
        
        # Call to array(...): (line 2786)
        # Processing the call arguments (line 2786)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'mask' (line 2786)
        mask_143076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 71), 'mask', False)
        comprehension_143077 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 37), mask_143076)
        # Assigning a type to the variable 'm' (line 2786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2786, 37), 'm', comprehension_143077)
        
        # Call to tuple(...): (line 2786)
        # Processing the call arguments (line 2786)
        
        # Obtaining an instance of the builtin type 'list' (line 2786)
        list_143067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2786)
        # Adding element type (line 2786)
        # Getting the type of 'm' (line 2786)
        m_143068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 44), 'm', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 43), list_143067, m_143068)
        
        
        # Call to len(...): (line 2786)
        # Processing the call arguments (line 2786)
        # Getting the type of 'mdtype' (line 2786)
        mdtype_143070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 53), 'mdtype', False)
        # Processing the call keyword arguments (line 2786)
        kwargs_143071 = {}
        # Getting the type of 'len' (line 2786)
        len_143069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 49), 'len', False)
        # Calling len(args, kwargs) (line 2786)
        len_call_result_143072 = invoke(stypy.reporting.localization.Localization(__file__, 2786, 49), len_143069, *[mdtype_143070], **kwargs_143071)
        
        # Applying the binary operator '*' (line 2786)
        result_mul_143073 = python_operator(stypy.reporting.localization.Localization(__file__, 2786, 43), '*', list_143067, len_call_result_143072)
        
        # Processing the call keyword arguments (line 2786)
        kwargs_143074 = {}
        # Getting the type of 'tuple' (line 2786)
        tuple_143066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 37), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2786)
        tuple_call_result_143075 = invoke(stypy.reporting.localization.Localization(__file__, 2786, 37), tuple_143066, *[result_mul_143073], **kwargs_143074)
        
        list_143078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 37), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 37), list_143078, tuple_call_result_143075)
        # Processing the call keyword arguments (line 2786)
        # Getting the type of 'mdtype' (line 2787)
        mdtype_143079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 42), 'mdtype', False)
        keyword_143080 = mdtype_143079
        kwargs_143081 = {'dtype': keyword_143080}
        # Getting the type of 'np' (line 2786)
        np_143064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 2786)
        array_143065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2786, 27), np_143064, 'array')
        # Calling array(args, kwargs) (line 2786)
        array_call_result_143082 = invoke(stypy.reporting.localization.Localization(__file__, 2786, 27), array_143065, *[list_143078], **kwargs_143081)
        
        # Assigning a type to the variable 'mask' (line 2786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2786, 20), 'mask', array_call_result_143082)
        # SSA join for try-except statement (line 2782)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2778)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2776)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'mask' (line 2789)
        mask_143083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 15), 'mask')
        # Obtaining the member 'shape' of a type (line 2789)
        shape_143084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 15), mask_143083, 'shape')
        # Getting the type of '_data' (line 2789)
        _data_143085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 29), '_data')
        # Obtaining the member 'shape' of a type (line 2789)
        shape_143086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 29), _data_143085, 'shape')
        # Applying the binary operator '!=' (line 2789)
        result_ne_143087 = python_operator(stypy.reporting.localization.Localization(__file__, 2789, 15), '!=', shape_143084, shape_143086)
        
        # Testing the type of an if condition (line 2789)
        if_condition_143088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2789, 12), result_ne_143087)
        # Assigning a type to the variable 'if_condition_143088' (line 2789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2789, 12), 'if_condition_143088', if_condition_143088)
        # SSA begins for if statement (line 2789)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 2790):
        
        # Assigning a Attribute to a Name (line 2790):
        # Getting the type of '_data' (line 2790)
        _data_143089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 28), '_data')
        # Obtaining the member 'size' of a type (line 2790)
        size_143090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 28), _data_143089, 'size')
        # Assigning a type to the variable 'tuple_assignment_139179' (line 2790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'tuple_assignment_139179', size_143090)
        
        # Assigning a Attribute to a Name (line 2790):
        # Getting the type of 'mask' (line 2790)
        mask_143091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 40), 'mask')
        # Obtaining the member 'size' of a type (line 2790)
        size_143092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 40), mask_143091, 'size')
        # Assigning a type to the variable 'tuple_assignment_139180' (line 2790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'tuple_assignment_139180', size_143092)
        
        # Assigning a Name to a Name (line 2790):
        # Getting the type of 'tuple_assignment_139179' (line 2790)
        tuple_assignment_139179_143093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'tuple_assignment_139179')
        # Assigning a type to the variable 'nd' (line 2790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 17), 'nd', tuple_assignment_139179_143093)
        
        # Assigning a Name to a Name (line 2790):
        # Getting the type of 'tuple_assignment_139180' (line 2790)
        tuple_assignment_139180_143094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 16), 'tuple_assignment_139180')
        # Assigning a type to the variable 'nm' (line 2790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 21), 'nm', tuple_assignment_139180_143094)
        
        
        # Getting the type of 'nm' (line 2791)
        nm_143095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 19), 'nm')
        int_143096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2791, 25), 'int')
        # Applying the binary operator '==' (line 2791)
        result_eq_143097 = python_operator(stypy.reporting.localization.Localization(__file__, 2791, 19), '==', nm_143095, int_143096)
        
        # Testing the type of an if condition (line 2791)
        if_condition_143098 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2791, 16), result_eq_143097)
        # Assigning a type to the variable 'if_condition_143098' (line 2791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2791, 16), 'if_condition_143098', if_condition_143098)
        # SSA begins for if statement (line 2791)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2792):
        
        # Assigning a Call to a Name (line 2792):
        
        # Call to resize(...): (line 2792)
        # Processing the call arguments (line 2792)
        # Getting the type of 'mask' (line 2792)
        mask_143101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 37), 'mask', False)
        # Getting the type of '_data' (line 2792)
        _data_143102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 43), '_data', False)
        # Obtaining the member 'shape' of a type (line 2792)
        shape_143103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2792, 43), _data_143102, 'shape')
        # Processing the call keyword arguments (line 2792)
        kwargs_143104 = {}
        # Getting the type of 'np' (line 2792)
        np_143099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 27), 'np', False)
        # Obtaining the member 'resize' of a type (line 2792)
        resize_143100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2792, 27), np_143099, 'resize')
        # Calling resize(args, kwargs) (line 2792)
        resize_call_result_143105 = invoke(stypy.reporting.localization.Localization(__file__, 2792, 27), resize_143100, *[mask_143101, shape_143103], **kwargs_143104)
        
        # Assigning a type to the variable 'mask' (line 2792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2792, 20), 'mask', resize_call_result_143105)
        # SSA branch for the else part of an if statement (line 2791)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'nm' (line 2793)
        nm_143106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 21), 'nm')
        # Getting the type of 'nd' (line 2793)
        nd_143107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 27), 'nd')
        # Applying the binary operator '==' (line 2793)
        result_eq_143108 = python_operator(stypy.reporting.localization.Localization(__file__, 2793, 21), '==', nm_143106, nd_143107)
        
        # Testing the type of an if condition (line 2793)
        if_condition_143109 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2793, 21), result_eq_143108)
        # Assigning a type to the variable 'if_condition_143109' (line 2793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2793, 21), 'if_condition_143109', if_condition_143109)
        # SSA begins for if statement (line 2793)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2794):
        
        # Assigning a Call to a Name (line 2794):
        
        # Call to reshape(...): (line 2794)
        # Processing the call arguments (line 2794)
        # Getting the type of 'mask' (line 2794)
        mask_143112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 38), 'mask', False)
        # Getting the type of '_data' (line 2794)
        _data_143113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 44), '_data', False)
        # Obtaining the member 'shape' of a type (line 2794)
        shape_143114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2794, 44), _data_143113, 'shape')
        # Processing the call keyword arguments (line 2794)
        kwargs_143115 = {}
        # Getting the type of 'np' (line 2794)
        np_143110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 27), 'np', False)
        # Obtaining the member 'reshape' of a type (line 2794)
        reshape_143111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2794, 27), np_143110, 'reshape')
        # Calling reshape(args, kwargs) (line 2794)
        reshape_call_result_143116 = invoke(stypy.reporting.localization.Localization(__file__, 2794, 27), reshape_143111, *[mask_143112, shape_143114], **kwargs_143115)
        
        # Assigning a type to the variable 'mask' (line 2794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2794, 20), 'mask', reshape_call_result_143116)
        # SSA branch for the else part of an if statement (line 2793)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 2796):
        
        # Assigning a BinOp to a Name (line 2796):
        str_143117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2796, 26), 'str', 'Mask and data not compatible: data size is %i, ')
        str_143118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2797, 26), 'str', 'mask size is %i.')
        # Applying the binary operator '+' (line 2796)
        result_add_143119 = python_operator(stypy.reporting.localization.Localization(__file__, 2796, 26), '+', str_143117, str_143118)
        
        # Assigning a type to the variable 'msg' (line 2796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2796, 20), 'msg', result_add_143119)
        
        # Call to MaskError(...): (line 2798)
        # Processing the call arguments (line 2798)
        # Getting the type of 'msg' (line 2798)
        msg_143121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 36), 'msg', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2798)
        tuple_143122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2798, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2798)
        # Adding element type (line 2798)
        # Getting the type of 'nd' (line 2798)
        nd_143123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 43), 'nd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2798, 43), tuple_143122, nd_143123)
        # Adding element type (line 2798)
        # Getting the type of 'nm' (line 2798)
        nm_143124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 47), 'nm', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2798, 43), tuple_143122, nm_143124)
        
        # Applying the binary operator '%' (line 2798)
        result_mod_143125 = python_operator(stypy.reporting.localization.Localization(__file__, 2798, 36), '%', msg_143121, tuple_143122)
        
        # Processing the call keyword arguments (line 2798)
        kwargs_143126 = {}
        # Getting the type of 'MaskError' (line 2798)
        MaskError_143120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 26), 'MaskError', False)
        # Calling MaskError(args, kwargs) (line 2798)
        MaskError_call_result_143127 = invoke(stypy.reporting.localization.Localization(__file__, 2798, 26), MaskError_143120, *[result_mod_143125], **kwargs_143126)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2798, 20), MaskError_call_result_143127, 'raise parameter', BaseException)
        # SSA join for if statement (line 2793)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2791)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 2799):
        
        # Assigning a Name to a Name (line 2799):
        # Getting the type of 'True' (line 2799)
        True_143128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 23), 'True')
        # Assigning a type to the variable 'copy' (line 2799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2799, 16), 'copy', True_143128)
        # SSA join for if statement (line 2789)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of '_data' (line 2801)
        _data_143129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2801, 15), '_data')
        # Obtaining the member '_mask' of a type (line 2801)
        _mask_143130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2801, 15), _data_143129, '_mask')
        # Getting the type of 'nomask' (line 2801)
        nomask_143131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2801, 30), 'nomask')
        # Applying the binary operator 'is' (line 2801)
        result_is__143132 = python_operator(stypy.reporting.localization.Localization(__file__, 2801, 15), 'is', _mask_143130, nomask_143131)
        
        # Testing the type of an if condition (line 2801)
        if_condition_143133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2801, 12), result_is__143132)
        # Assigning a type to the variable 'if_condition_143133' (line 2801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2801, 12), 'if_condition_143133', if_condition_143133)
        # SSA begins for if statement (line 2801)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2802):
        
        # Assigning a Name to a Attribute (line 2802):
        # Getting the type of 'mask' (line 2802)
        mask_143134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 30), 'mask')
        # Getting the type of '_data' (line 2802)
        _data_143135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 16), '_data')
        # Setting the type of the member '_mask' of a type (line 2802)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2802, 16), _data_143135, '_mask', mask_143134)
        
        # Assigning a UnaryOp to a Attribute (line 2803):
        
        # Assigning a UnaryOp to a Attribute (line 2803):
        
        # Getting the type of 'copy' (line 2803)
        copy_143136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2803, 40), 'copy')
        # Applying the 'not' unary operator (line 2803)
        result_not__143137 = python_operator(stypy.reporting.localization.Localization(__file__, 2803, 36), 'not', copy_143136)
        
        # Getting the type of '_data' (line 2803)
        _data_143138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2803, 16), '_data')
        # Setting the type of the member '_sharedmask' of a type (line 2803)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2803, 16), _data_143138, '_sharedmask', result_not__143137)
        # SSA branch for the else part of an if statement (line 2801)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'keep_mask' (line 2805)
        keep_mask_143139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2805, 23), 'keep_mask')
        # Applying the 'not' unary operator (line 2805)
        result_not__143140 = python_operator(stypy.reporting.localization.Localization(__file__, 2805, 19), 'not', keep_mask_143139)
        
        # Testing the type of an if condition (line 2805)
        if_condition_143141 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2805, 16), result_not__143140)
        # Assigning a type to the variable 'if_condition_143141' (line 2805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2805, 16), 'if_condition_143141', if_condition_143141)
        # SSA begins for if statement (line 2805)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 2806):
        
        # Assigning a Name to a Attribute (line 2806):
        # Getting the type of 'mask' (line 2806)
        mask_143142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 34), 'mask')
        # Getting the type of '_data' (line 2806)
        _data_143143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 20), '_data')
        # Setting the type of the member '_mask' of a type (line 2806)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2806, 20), _data_143143, '_mask', mask_143142)
        
        # Assigning a UnaryOp to a Attribute (line 2807):
        
        # Assigning a UnaryOp to a Attribute (line 2807):
        
        # Getting the type of 'copy' (line 2807)
        copy_143144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2807, 44), 'copy')
        # Applying the 'not' unary operator (line 2807)
        result_not__143145 = python_operator(stypy.reporting.localization.Localization(__file__, 2807, 40), 'not', copy_143144)
        
        # Getting the type of '_data' (line 2807)
        _data_143146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2807, 20), '_data')
        # Setting the type of the member '_sharedmask' of a type (line 2807)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2807, 20), _data_143146, '_sharedmask', result_not__143145)
        # SSA branch for the else part of an if statement (line 2805)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'names_' (line 2809)
        names__143147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2809, 23), 'names_')
        # Testing the type of an if condition (line 2809)
        if_condition_143148 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2809, 20), names__143147)
        # Assigning a type to the variable 'if_condition_143148' (line 2809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2809, 20), 'if_condition_143148', if_condition_143148)
        # SSA begins for if statement (line 2809)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

        @norecursion
        def _recursive_or(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_recursive_or'
            module_type_store = module_type_store.open_function_context('_recursive_or', 2810, 24, False)
            
            # Passed parameters checking function
            _recursive_or.stypy_localization = localization
            _recursive_or.stypy_type_of_self = None
            _recursive_or.stypy_type_store = module_type_store
            _recursive_or.stypy_function_name = '_recursive_or'
            _recursive_or.stypy_param_names_list = ['a', 'b']
            _recursive_or.stypy_varargs_param_name = None
            _recursive_or.stypy_kwargs_param_name = None
            _recursive_or.stypy_call_defaults = defaults
            _recursive_or.stypy_call_varargs = varargs
            _recursive_or.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_recursive_or', ['a', 'b'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_recursive_or', localization, ['a', 'b'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_recursive_or(...)' code ##################

            str_143149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2811, 28), 'str', 'do a|=b on each field of a, recursively')
            
            # Getting the type of 'a' (line 2812)
            a_143150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 40), 'a')
            # Obtaining the member 'dtype' of a type (line 2812)
            dtype_143151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2812, 40), a_143150, 'dtype')
            # Obtaining the member 'names' of a type (line 2812)
            names_143152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2812, 40), dtype_143151, 'names')
            # Testing the type of a for loop iterable (line 2812)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2812, 28), names_143152)
            # Getting the type of the for loop variable (line 2812)
            for_loop_var_143153 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2812, 28), names_143152)
            # Assigning a type to the variable 'name' (line 2812)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2812, 28), 'name', for_loop_var_143153)
            # SSA begins for a for statement (line 2812)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Tuple to a Tuple (line 2813):
            
            # Assigning a Subscript to a Name (line 2813):
            
            # Obtaining the type of the subscript
            # Getting the type of 'name' (line 2813)
            name_143154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 46), 'name')
            # Getting the type of 'a' (line 2813)
            a_143155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 44), 'a')
            # Obtaining the member '__getitem__' of a type (line 2813)
            getitem___143156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2813, 44), a_143155, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2813)
            subscript_call_result_143157 = invoke(stypy.reporting.localization.Localization(__file__, 2813, 44), getitem___143156, name_143154)
            
            # Assigning a type to the variable 'tuple_assignment_139181' (line 2813)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2813, 32), 'tuple_assignment_139181', subscript_call_result_143157)
            
            # Assigning a Subscript to a Name (line 2813):
            
            # Obtaining the type of the subscript
            # Getting the type of 'name' (line 2813)
            name_143158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 55), 'name')
            # Getting the type of 'b' (line 2813)
            b_143159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 53), 'b')
            # Obtaining the member '__getitem__' of a type (line 2813)
            getitem___143160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2813, 53), b_143159, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2813)
            subscript_call_result_143161 = invoke(stypy.reporting.localization.Localization(__file__, 2813, 53), getitem___143160, name_143158)
            
            # Assigning a type to the variable 'tuple_assignment_139182' (line 2813)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2813, 32), 'tuple_assignment_139182', subscript_call_result_143161)
            
            # Assigning a Name to a Name (line 2813):
            # Getting the type of 'tuple_assignment_139181' (line 2813)
            tuple_assignment_139181_143162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 32), 'tuple_assignment_139181')
            # Assigning a type to the variable 'af' (line 2813)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2813, 33), 'af', tuple_assignment_139181_143162)
            
            # Assigning a Name to a Name (line 2813):
            # Getting the type of 'tuple_assignment_139182' (line 2813)
            tuple_assignment_139182_143163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2813, 32), 'tuple_assignment_139182')
            # Assigning a type to the variable 'bf' (line 2813)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2813, 37), 'bf', tuple_assignment_139182_143163)
            
            # Getting the type of 'af' (line 2814)
            af_143164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2814, 35), 'af')
            # Obtaining the member 'dtype' of a type (line 2814)
            dtype_143165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2814, 35), af_143164, 'dtype')
            # Obtaining the member 'names' of a type (line 2814)
            names_143166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2814, 35), dtype_143165, 'names')
            # Testing the type of an if condition (line 2814)
            if_condition_143167 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2814, 32), names_143166)
            # Assigning a type to the variable 'if_condition_143167' (line 2814)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2814, 32), 'if_condition_143167', if_condition_143167)
            # SSA begins for if statement (line 2814)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to _recursive_or(...): (line 2815)
            # Processing the call arguments (line 2815)
            # Getting the type of 'af' (line 2815)
            af_143169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 50), 'af', False)
            # Getting the type of 'bf' (line 2815)
            bf_143170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 54), 'bf', False)
            # Processing the call keyword arguments (line 2815)
            kwargs_143171 = {}
            # Getting the type of '_recursive_or' (line 2815)
            _recursive_or_143168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 36), '_recursive_or', False)
            # Calling _recursive_or(args, kwargs) (line 2815)
            _recursive_or_call_result_143172 = invoke(stypy.reporting.localization.Localization(__file__, 2815, 36), _recursive_or_143168, *[af_143169, bf_143170], **kwargs_143171)
            
            # SSA branch for the else part of an if statement (line 2814)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'af' (line 2817)
            af_143173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2817, 36), 'af')
            # Getting the type of 'bf' (line 2817)
            bf_143174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2817, 42), 'bf')
            # Applying the binary operator '|=' (line 2817)
            result_ior_143175 = python_operator(stypy.reporting.localization.Localization(__file__, 2817, 36), '|=', af_143173, bf_143174)
            # Assigning a type to the variable 'af' (line 2817)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2817, 36), 'af', result_ior_143175)
            
            # SSA join for if statement (line 2814)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # Assigning a type to the variable 'stypy_return_type' (line 2818)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2818, 28), 'stypy_return_type', types.NoneType)
            
            # ################# End of '_recursive_or(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_recursive_or' in the type store
            # Getting the type of 'stypy_return_type' (line 2810)
            stypy_return_type_143176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2810, 24), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_143176)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_recursive_or'
            return stypy_return_type_143176

        # Assigning a type to the variable '_recursive_or' (line 2810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2810, 24), '_recursive_or', _recursive_or)
        
        # Call to _recursive_or(...): (line 2819)
        # Processing the call arguments (line 2819)
        # Getting the type of '_data' (line 2819)
        _data_143178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 38), '_data', False)
        # Obtaining the member '_mask' of a type (line 2819)
        _mask_143179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2819, 38), _data_143178, '_mask')
        # Getting the type of 'mask' (line 2819)
        mask_143180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 51), 'mask', False)
        # Processing the call keyword arguments (line 2819)
        kwargs_143181 = {}
        # Getting the type of '_recursive_or' (line 2819)
        _recursive_or_143177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 24), '_recursive_or', False)
        # Calling _recursive_or(args, kwargs) (line 2819)
        _recursive_or_call_result_143182 = invoke(stypy.reporting.localization.Localization(__file__, 2819, 24), _recursive_or_143177, *[_mask_143179, mask_143180], **kwargs_143181)
        
        # SSA branch for the else part of an if statement (line 2809)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 2821):
        
        # Assigning a Call to a Attribute (line 2821):
        
        # Call to logical_or(...): (line 2821)
        # Processing the call arguments (line 2821)
        # Getting the type of 'mask' (line 2821)
        mask_143185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 52), 'mask', False)
        # Getting the type of '_data' (line 2821)
        _data_143186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 58), '_data', False)
        # Obtaining the member '_mask' of a type (line 2821)
        _mask_143187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2821, 58), _data_143186, '_mask')
        # Processing the call keyword arguments (line 2821)
        kwargs_143188 = {}
        # Getting the type of 'np' (line 2821)
        np_143183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 38), 'np', False)
        # Obtaining the member 'logical_or' of a type (line 2821)
        logical_or_143184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2821, 38), np_143183, 'logical_or')
        # Calling logical_or(args, kwargs) (line 2821)
        logical_or_call_result_143189 = invoke(stypy.reporting.localization.Localization(__file__, 2821, 38), logical_or_143184, *[mask_143185, _mask_143187], **kwargs_143188)
        
        # Getting the type of '_data' (line 2821)
        _data_143190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 24), '_data')
        # Setting the type of the member '_mask' of a type (line 2821)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2821, 24), _data_143190, '_mask', logical_or_call_result_143189)
        # SSA join for if statement (line 2809)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2822):
        
        # Assigning a Name to a Attribute (line 2822):
        # Getting the type of 'False' (line 2822)
        False_143191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 40), 'False')
        # Getting the type of '_data' (line 2822)
        _data_143192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 20), '_data')
        # Setting the type of the member '_sharedmask' of a type (line 2822)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2822, 20), _data_143192, '_sharedmask', False_143191)
        # SSA join for if statement (line 2805)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2801)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2741)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2824)
        # Getting the type of 'fill_value' (line 2824)
        fill_value_143193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 11), 'fill_value')
        # Getting the type of 'None' (line 2824)
        None_143194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 25), 'None')
        
        (may_be_143195, more_types_in_union_143196) = may_be_none(fill_value_143193, None_143194)

        if may_be_143195:

            if more_types_in_union_143196:
                # Runtime conditional SSA (line 2824)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2825):
            
            # Assigning a Call to a Name (line 2825):
            
            # Call to getattr(...): (line 2825)
            # Processing the call arguments (line 2825)
            # Getting the type of 'data' (line 2825)
            data_143198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 33), 'data', False)
            str_143199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2825, 39), 'str', '_fill_value')
            # Getting the type of 'None' (line 2825)
            None_143200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 54), 'None', False)
            # Processing the call keyword arguments (line 2825)
            kwargs_143201 = {}
            # Getting the type of 'getattr' (line 2825)
            getattr_143197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 25), 'getattr', False)
            # Calling getattr(args, kwargs) (line 2825)
            getattr_call_result_143202 = invoke(stypy.reporting.localization.Localization(__file__, 2825, 25), getattr_143197, *[data_143198, str_143199, None_143200], **kwargs_143201)
            
            # Assigning a type to the variable 'fill_value' (line 2825)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2825, 12), 'fill_value', getattr_call_result_143202)

            if more_types_in_union_143196:
                # SSA join for if statement (line 2824)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2827)
        # Getting the type of 'fill_value' (line 2827)
        fill_value_143203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2827, 8), 'fill_value')
        # Getting the type of 'None' (line 2827)
        None_143204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2827, 29), 'None')
        
        (may_be_143205, more_types_in_union_143206) = may_not_be_none(fill_value_143203, None_143204)

        if may_be_143205:

            if more_types_in_union_143206:
                # Runtime conditional SSA (line 2827)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 2828):
            
            # Assigning a Call to a Attribute (line 2828):
            
            # Call to _check_fill_value(...): (line 2828)
            # Processing the call arguments (line 2828)
            # Getting the type of 'fill_value' (line 2828)
            fill_value_143208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 50), 'fill_value', False)
            # Getting the type of '_data' (line 2828)
            _data_143209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 62), '_data', False)
            # Obtaining the member 'dtype' of a type (line 2828)
            dtype_143210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2828, 62), _data_143209, 'dtype')
            # Processing the call keyword arguments (line 2828)
            kwargs_143211 = {}
            # Getting the type of '_check_fill_value' (line 2828)
            _check_fill_value_143207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 32), '_check_fill_value', False)
            # Calling _check_fill_value(args, kwargs) (line 2828)
            _check_fill_value_call_result_143212 = invoke(stypy.reporting.localization.Localization(__file__, 2828, 32), _check_fill_value_143207, *[fill_value_143208, dtype_143210], **kwargs_143211)
            
            # Getting the type of '_data' (line 2828)
            _data_143213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2828, 12), '_data')
            # Setting the type of the member '_fill_value' of a type (line 2828)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2828, 12), _data_143213, '_fill_value', _check_fill_value_call_result_143212)

            if more_types_in_union_143206:
                # SSA join for if statement (line 2827)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2830)
        # Getting the type of 'hard_mask' (line 2830)
        hard_mask_143214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2830, 11), 'hard_mask')
        # Getting the type of 'None' (line 2830)
        None_143215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2830, 24), 'None')
        
        (may_be_143216, more_types_in_union_143217) = may_be_none(hard_mask_143214, None_143215)

        if may_be_143216:

            if more_types_in_union_143217:
                # Runtime conditional SSA (line 2830)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 2831):
            
            # Assigning a Call to a Attribute (line 2831):
            
            # Call to getattr(...): (line 2831)
            # Processing the call arguments (line 2831)
            # Getting the type of 'data' (line 2831)
            data_143219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 38), 'data', False)
            str_143220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2831, 44), 'str', '_hardmask')
            # Getting the type of 'False' (line 2831)
            False_143221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 57), 'False', False)
            # Processing the call keyword arguments (line 2831)
            kwargs_143222 = {}
            # Getting the type of 'getattr' (line 2831)
            getattr_143218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 30), 'getattr', False)
            # Calling getattr(args, kwargs) (line 2831)
            getattr_call_result_143223 = invoke(stypy.reporting.localization.Localization(__file__, 2831, 30), getattr_143218, *[data_143219, str_143220, False_143221], **kwargs_143222)
            
            # Getting the type of '_data' (line 2831)
            _data_143224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 12), '_data')
            # Setting the type of the member '_hardmask' of a type (line 2831)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2831, 12), _data_143224, '_hardmask', getattr_call_result_143223)

            if more_types_in_union_143217:
                # Runtime conditional SSA for else branch (line 2830)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143216) or more_types_in_union_143217):
            
            # Assigning a Name to a Attribute (line 2833):
            
            # Assigning a Name to a Attribute (line 2833):
            # Getting the type of 'hard_mask' (line 2833)
            hard_mask_143225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 30), 'hard_mask')
            # Getting the type of '_data' (line 2833)
            _data_143226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 12), '_data')
            # Setting the type of the member '_hardmask' of a type (line 2833)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2833, 12), _data_143226, '_hardmask', hard_mask_143225)

            if (may_be_143216 and more_types_in_union_143217):
                # SSA join for if statement (line 2830)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 2834):
        
        # Assigning a Name to a Attribute (line 2834):
        # Getting the type of '_baseclass' (line 2834)
        _baseclass_143227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 27), '_baseclass')
        # Getting the type of '_data' (line 2834)
        _data_143228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 8), '_data')
        # Setting the type of the member '_baseclass' of a type (line 2834)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2834, 8), _data_143228, '_baseclass', _baseclass_143227)
        # Getting the type of '_data' (line 2835)
        _data_143229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 15), '_data')
        # Assigning a type to the variable 'stypy_return_type' (line 2835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2835, 8), 'stypy_return_type', _data_143229)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 2704)
        stypy_return_type_143230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143230)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_143230


    @norecursion
    def _update_from(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_from'
        module_type_store = module_type_store.open_function_context('_update_from', 2838, 4, False)
        # Assigning a type to the variable 'self' (line 2839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2839, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray._update_from.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray._update_from.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray._update_from.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray._update_from.__dict__.__setitem__('stypy_function_name', 'MaskedArray._update_from')
        MaskedArray._update_from.__dict__.__setitem__('stypy_param_names_list', ['obj'])
        MaskedArray._update_from.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray._update_from.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray._update_from.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray._update_from.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray._update_from.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray._update_from.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray._update_from', ['obj'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_from', localization, ['obj'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_from(...)' code ##################

        str_143231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2842, (-1)), 'str', '\n        Copies some attributes of obj to self.\n\n        ')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'obj' (line 2843)
        obj_143232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 11), 'obj')
        # Getting the type of 'None' (line 2843)
        None_143233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 22), 'None')
        # Applying the binary operator 'isnot' (line 2843)
        result_is_not_143234 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 11), 'isnot', obj_143232, None_143233)
        
        
        # Call to isinstance(...): (line 2843)
        # Processing the call arguments (line 2843)
        # Getting the type of 'obj' (line 2843)
        obj_143236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 42), 'obj', False)
        # Getting the type of 'ndarray' (line 2843)
        ndarray_143237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 47), 'ndarray', False)
        # Processing the call keyword arguments (line 2843)
        kwargs_143238 = {}
        # Getting the type of 'isinstance' (line 2843)
        isinstance_143235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 31), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2843)
        isinstance_call_result_143239 = invoke(stypy.reporting.localization.Localization(__file__, 2843, 31), isinstance_143235, *[obj_143236, ndarray_143237], **kwargs_143238)
        
        # Applying the binary operator 'and' (line 2843)
        result_and_keyword_143240 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 11), 'and', result_is_not_143234, isinstance_call_result_143239)
        
        # Testing the type of an if condition (line 2843)
        if_condition_143241 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2843, 8), result_and_keyword_143240)
        # Assigning a type to the variable 'if_condition_143241' (line 2843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 8), 'if_condition_143241', if_condition_143241)
        # SSA begins for if statement (line 2843)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2844):
        
        # Assigning a Call to a Name (line 2844):
        
        # Call to type(...): (line 2844)
        # Processing the call arguments (line 2844)
        # Getting the type of 'obj' (line 2844)
        obj_143243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 30), 'obj', False)
        # Processing the call keyword arguments (line 2844)
        kwargs_143244 = {}
        # Getting the type of 'type' (line 2844)
        type_143242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 25), 'type', False)
        # Calling type(args, kwargs) (line 2844)
        type_call_result_143245 = invoke(stypy.reporting.localization.Localization(__file__, 2844, 25), type_143242, *[obj_143243], **kwargs_143244)
        
        # Assigning a type to the variable '_baseclass' (line 2844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 12), '_baseclass', type_call_result_143245)
        # SSA branch for the else part of an if statement (line 2843)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2846):
        
        # Assigning a Name to a Name (line 2846):
        # Getting the type of 'ndarray' (line 2846)
        ndarray_143246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 25), 'ndarray')
        # Assigning a type to the variable '_baseclass' (line 2846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2846, 12), '_baseclass', ndarray_143246)
        # SSA join for if statement (line 2843)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Name (line 2848):
        
        # Assigning a Dict to a Name (line 2848):
        
        # Obtaining an instance of the builtin type 'dict' (line 2848)
        dict_143247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2848, 19), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2848)
        
        # Assigning a type to the variable '_optinfo' (line 2848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2848, 8), '_optinfo', dict_143247)
        
        # Call to update(...): (line 2849)
        # Processing the call arguments (line 2849)
        
        # Call to getattr(...): (line 2849)
        # Processing the call arguments (line 2849)
        # Getting the type of 'obj' (line 2849)
        obj_143251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 32), 'obj', False)
        str_143252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2849, 37), 'str', '_optinfo')
        
        # Obtaining an instance of the builtin type 'dict' (line 2849)
        dict_143253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2849, 49), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2849)
        
        # Processing the call keyword arguments (line 2849)
        kwargs_143254 = {}
        # Getting the type of 'getattr' (line 2849)
        getattr_143250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 24), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2849)
        getattr_call_result_143255 = invoke(stypy.reporting.localization.Localization(__file__, 2849, 24), getattr_143250, *[obj_143251, str_143252, dict_143253], **kwargs_143254)
        
        # Processing the call keyword arguments (line 2849)
        kwargs_143256 = {}
        # Getting the type of '_optinfo' (line 2849)
        _optinfo_143248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 8), '_optinfo', False)
        # Obtaining the member 'update' of a type (line 2849)
        update_143249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2849, 8), _optinfo_143248, 'update')
        # Calling update(args, kwargs) (line 2849)
        update_call_result_143257 = invoke(stypy.reporting.localization.Localization(__file__, 2849, 8), update_143249, *[getattr_call_result_143255], **kwargs_143256)
        
        
        # Call to update(...): (line 2850)
        # Processing the call arguments (line 2850)
        
        # Call to getattr(...): (line 2850)
        # Processing the call arguments (line 2850)
        # Getting the type of 'obj' (line 2850)
        obj_143261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 32), 'obj', False)
        str_143262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2850, 37), 'str', '_basedict')
        
        # Obtaining an instance of the builtin type 'dict' (line 2850)
        dict_143263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2850, 50), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2850)
        
        # Processing the call keyword arguments (line 2850)
        kwargs_143264 = {}
        # Getting the type of 'getattr' (line 2850)
        getattr_143260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 24), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2850)
        getattr_call_result_143265 = invoke(stypy.reporting.localization.Localization(__file__, 2850, 24), getattr_143260, *[obj_143261, str_143262, dict_143263], **kwargs_143264)
        
        # Processing the call keyword arguments (line 2850)
        kwargs_143266 = {}
        # Getting the type of '_optinfo' (line 2850)
        _optinfo_143258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 8), '_optinfo', False)
        # Obtaining the member 'update' of a type (line 2850)
        update_143259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2850, 8), _optinfo_143258, 'update')
        # Calling update(args, kwargs) (line 2850)
        update_call_result_143267 = invoke(stypy.reporting.localization.Localization(__file__, 2850, 8), update_143259, *[getattr_call_result_143265], **kwargs_143266)
        
        
        
        
        # Call to isinstance(...): (line 2851)
        # Processing the call arguments (line 2851)
        # Getting the type of 'obj' (line 2851)
        obj_143269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 26), 'obj', False)
        # Getting the type of 'MaskedArray' (line 2851)
        MaskedArray_143270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 31), 'MaskedArray', False)
        # Processing the call keyword arguments (line 2851)
        kwargs_143271 = {}
        # Getting the type of 'isinstance' (line 2851)
        isinstance_143268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2851)
        isinstance_call_result_143272 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 15), isinstance_143268, *[obj_143269, MaskedArray_143270], **kwargs_143271)
        
        # Applying the 'not' unary operator (line 2851)
        result_not__143273 = python_operator(stypy.reporting.localization.Localization(__file__, 2851, 11), 'not', isinstance_call_result_143272)
        
        # Testing the type of an if condition (line 2851)
        if_condition_143274 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2851, 8), result_not__143273)
        # Assigning a type to the variable 'if_condition_143274' (line 2851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2851, 8), 'if_condition_143274', if_condition_143274)
        # SSA begins for if statement (line 2851)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 2852)
        # Processing the call arguments (line 2852)
        
        # Call to getattr(...): (line 2852)
        # Processing the call arguments (line 2852)
        # Getting the type of 'obj' (line 2852)
        obj_143278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 36), 'obj', False)
        str_143279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 41), 'str', '__dict__')
        
        # Obtaining an instance of the builtin type 'dict' (line 2852)
        dict_143280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 53), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2852)
        
        # Processing the call keyword arguments (line 2852)
        kwargs_143281 = {}
        # Getting the type of 'getattr' (line 2852)
        getattr_143277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 28), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2852)
        getattr_call_result_143282 = invoke(stypy.reporting.localization.Localization(__file__, 2852, 28), getattr_143277, *[obj_143278, str_143279, dict_143280], **kwargs_143281)
        
        # Processing the call keyword arguments (line 2852)
        kwargs_143283 = {}
        # Getting the type of '_optinfo' (line 2852)
        _optinfo_143275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 12), '_optinfo', False)
        # Obtaining the member 'update' of a type (line 2852)
        update_143276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2852, 12), _optinfo_143275, 'update')
        # Calling update(args, kwargs) (line 2852)
        update_call_result_143284 = invoke(stypy.reporting.localization.Localization(__file__, 2852, 12), update_143276, *[getattr_call_result_143282], **kwargs_143283)
        
        # SSA join for if statement (line 2851)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2853):
        
        # Assigning a Call to a Name (line 2853):
        
        # Call to dict(...): (line 2853)
        # Processing the call keyword arguments (line 2853)
        
        # Call to getattr(...): (line 2853)
        # Processing the call arguments (line 2853)
        # Getting the type of 'obj' (line 2853)
        obj_143287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 41), 'obj', False)
        str_143288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2853, 46), 'str', '_fill_value')
        # Getting the type of 'None' (line 2853)
        None_143289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 61), 'None', False)
        # Processing the call keyword arguments (line 2853)
        kwargs_143290 = {}
        # Getting the type of 'getattr' (line 2853)
        getattr_143286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 33), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2853)
        getattr_call_result_143291 = invoke(stypy.reporting.localization.Localization(__file__, 2853, 33), getattr_143286, *[obj_143287, str_143288, None_143289], **kwargs_143290)
        
        keyword_143292 = getattr_call_result_143291
        
        # Call to getattr(...): (line 2854)
        # Processing the call arguments (line 2854)
        # Getting the type of 'obj' (line 2854)
        obj_143294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 39), 'obj', False)
        str_143295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2854, 44), 'str', '_hardmask')
        # Getting the type of 'False' (line 2854)
        False_143296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 57), 'False', False)
        # Processing the call keyword arguments (line 2854)
        kwargs_143297 = {}
        # Getting the type of 'getattr' (line 2854)
        getattr_143293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 31), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2854)
        getattr_call_result_143298 = invoke(stypy.reporting.localization.Localization(__file__, 2854, 31), getattr_143293, *[obj_143294, str_143295, False_143296], **kwargs_143297)
        
        keyword_143299 = getattr_call_result_143298
        
        # Call to getattr(...): (line 2855)
        # Processing the call arguments (line 2855)
        # Getting the type of 'obj' (line 2855)
        obj_143301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 41), 'obj', False)
        str_143302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2855, 46), 'str', '_sharedmask')
        # Getting the type of 'False' (line 2855)
        False_143303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 61), 'False', False)
        # Processing the call keyword arguments (line 2855)
        kwargs_143304 = {}
        # Getting the type of 'getattr' (line 2855)
        getattr_143300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 33), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2855)
        getattr_call_result_143305 = invoke(stypy.reporting.localization.Localization(__file__, 2855, 33), getattr_143300, *[obj_143301, str_143302, False_143303], **kwargs_143304)
        
        keyword_143306 = getattr_call_result_143305
        
        # Call to getattr(...): (line 2856)
        # Processing the call arguments (line 2856)
        # Getting the type of 'obj' (line 2856)
        obj_143308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 38), 'obj', False)
        str_143309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2856, 43), 'str', '_isfield')
        # Getting the type of 'False' (line 2856)
        False_143310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 55), 'False', False)
        # Processing the call keyword arguments (line 2856)
        kwargs_143311 = {}
        # Getting the type of 'getattr' (line 2856)
        getattr_143307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 30), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2856)
        getattr_call_result_143312 = invoke(stypy.reporting.localization.Localization(__file__, 2856, 30), getattr_143307, *[obj_143308, str_143309, False_143310], **kwargs_143311)
        
        keyword_143313 = getattr_call_result_143312
        
        # Call to getattr(...): (line 2857)
        # Processing the call arguments (line 2857)
        # Getting the type of 'obj' (line 2857)
        obj_143315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 40), 'obj', False)
        str_143316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2857, 45), 'str', '_baseclass')
        # Getting the type of '_baseclass' (line 2857)
        _baseclass_143317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 59), '_baseclass', False)
        # Processing the call keyword arguments (line 2857)
        kwargs_143318 = {}
        # Getting the type of 'getattr' (line 2857)
        getattr_143314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 32), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2857)
        getattr_call_result_143319 = invoke(stypy.reporting.localization.Localization(__file__, 2857, 32), getattr_143314, *[obj_143315, str_143316, _baseclass_143317], **kwargs_143318)
        
        keyword_143320 = getattr_call_result_143319
        # Getting the type of '_optinfo' (line 2858)
        _optinfo_143321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 30), '_optinfo', False)
        keyword_143322 = _optinfo_143321
        # Getting the type of '_optinfo' (line 2859)
        _optinfo_143323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2859, 31), '_optinfo', False)
        keyword_143324 = _optinfo_143323
        kwargs_143325 = {'_baseclass': keyword_143320, '_hardmask': keyword_143299, '_basedict': keyword_143324, '_fill_value': keyword_143292, '_sharedmask': keyword_143306, '_optinfo': keyword_143322, '_isfield': keyword_143313}
        # Getting the type of 'dict' (line 2853)
        dict_143285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 16), 'dict', False)
        # Calling dict(args, kwargs) (line 2853)
        dict_call_result_143326 = invoke(stypy.reporting.localization.Localization(__file__, 2853, 16), dict_143285, *[], **kwargs_143325)
        
        # Assigning a type to the variable '_dict' (line 2853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2853, 8), '_dict', dict_call_result_143326)
        
        # Call to update(...): (line 2860)
        # Processing the call arguments (line 2860)
        # Getting the type of '_dict' (line 2860)
        _dict_143330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 29), '_dict', False)
        # Processing the call keyword arguments (line 2860)
        kwargs_143331 = {}
        # Getting the type of 'self' (line 2860)
        self_143327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 8), 'self', False)
        # Obtaining the member '__dict__' of a type (line 2860)
        dict___143328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2860, 8), self_143327, '__dict__')
        # Obtaining the member 'update' of a type (line 2860)
        update_143329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2860, 8), dict___143328, 'update')
        # Calling update(args, kwargs) (line 2860)
        update_call_result_143332 = invoke(stypy.reporting.localization.Localization(__file__, 2860, 8), update_143329, *[_dict_143330], **kwargs_143331)
        
        
        # Call to update(...): (line 2861)
        # Processing the call arguments (line 2861)
        # Getting the type of '_optinfo' (line 2861)
        _optinfo_143336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 29), '_optinfo', False)
        # Processing the call keyword arguments (line 2861)
        kwargs_143337 = {}
        # Getting the type of 'self' (line 2861)
        self_143333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 8), 'self', False)
        # Obtaining the member '__dict__' of a type (line 2861)
        dict___143334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2861, 8), self_143333, '__dict__')
        # Obtaining the member 'update' of a type (line 2861)
        update_143335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2861, 8), dict___143334, 'update')
        # Calling update(args, kwargs) (line 2861)
        update_call_result_143338 = invoke(stypy.reporting.localization.Localization(__file__, 2861, 8), update_143335, *[_optinfo_143336], **kwargs_143337)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2862, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of '_update_from(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_from' in the type store
        # Getting the type of 'stypy_return_type' (line 2838)
        stypy_return_type_143339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2838, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143339)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_from'
        return stypy_return_type_143339


    @norecursion
    def __array_finalize__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__array_finalize__'
        module_type_store = module_type_store.open_function_context('__array_finalize__', 2864, 4, False)
        # Assigning a type to the variable 'self' (line 2865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2865, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__array_finalize__')
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_param_names_list', ['obj'])
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__array_finalize__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__array_finalize__', ['obj'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__array_finalize__', localization, ['obj'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__array_finalize__(...)' code ##################

        str_143340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, (-1)), 'str', '\n        Finalizes the masked array.\n\n        ')
        
        # Call to _update_from(...): (line 2870)
        # Processing the call arguments (line 2870)
        # Getting the type of 'obj' (line 2870)
        obj_143343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 26), 'obj', False)
        # Processing the call keyword arguments (line 2870)
        kwargs_143344 = {}
        # Getting the type of 'self' (line 2870)
        self_143341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 8), 'self', False)
        # Obtaining the member '_update_from' of a type (line 2870)
        _update_from_143342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2870, 8), self_143341, '_update_from')
        # Calling _update_from(args, kwargs) (line 2870)
        _update_from_call_result_143345 = invoke(stypy.reporting.localization.Localization(__file__, 2870, 8), _update_from_143342, *[obj_143343], **kwargs_143344)
        
        
        
        # Call to isinstance(...): (line 2898)
        # Processing the call arguments (line 2898)
        # Getting the type of 'obj' (line 2898)
        obj_143347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 22), 'obj', False)
        # Getting the type of 'ndarray' (line 2898)
        ndarray_143348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 27), 'ndarray', False)
        # Processing the call keyword arguments (line 2898)
        kwargs_143349 = {}
        # Getting the type of 'isinstance' (line 2898)
        isinstance_143346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2898)
        isinstance_call_result_143350 = invoke(stypy.reporting.localization.Localization(__file__, 2898, 11), isinstance_143346, *[obj_143347, ndarray_143348], **kwargs_143349)
        
        # Testing the type of an if condition (line 2898)
        if_condition_143351 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2898, 8), isinstance_call_result_143350)
        # Assigning a type to the variable 'if_condition_143351' (line 2898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2898, 8), 'if_condition_143351', if_condition_143351)
        # SSA begins for if statement (line 2898)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'obj' (line 2901)
        obj_143352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 15), 'obj')
        # Obtaining the member 'dtype' of a type (line 2901)
        dtype_143353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 15), obj_143352, 'dtype')
        # Obtaining the member 'names' of a type (line 2901)
        names_143354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 15), dtype_143353, 'names')
        # Testing the type of an if condition (line 2901)
        if_condition_143355 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2901, 12), names_143354)
        # Assigning a type to the variable 'if_condition_143355' (line 2901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2901, 12), 'if_condition_143355', if_condition_143355)
        # SSA begins for if statement (line 2901)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2902):
        
        # Assigning a Call to a Name (line 2902):
        
        # Call to getattr(...): (line 2902)
        # Processing the call arguments (line 2902)
        # Getting the type of 'obj' (line 2902)
        obj_143357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 32), 'obj', False)
        str_143358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2902, 37), 'str', '_mask')
        
        # Call to make_mask_none(...): (line 2903)
        # Processing the call arguments (line 2903)
        # Getting the type of 'obj' (line 2903)
        obj_143360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 47), 'obj', False)
        # Obtaining the member 'shape' of a type (line 2903)
        shape_143361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2903, 47), obj_143360, 'shape')
        # Getting the type of 'obj' (line 2903)
        obj_143362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 58), 'obj', False)
        # Obtaining the member 'dtype' of a type (line 2903)
        dtype_143363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2903, 58), obj_143362, 'dtype')
        # Processing the call keyword arguments (line 2903)
        kwargs_143364 = {}
        # Getting the type of 'make_mask_none' (line 2903)
        make_mask_none_143359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 32), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 2903)
        make_mask_none_call_result_143365 = invoke(stypy.reporting.localization.Localization(__file__, 2903, 32), make_mask_none_143359, *[shape_143361, dtype_143363], **kwargs_143364)
        
        # Processing the call keyword arguments (line 2902)
        kwargs_143366 = {}
        # Getting the type of 'getattr' (line 2902)
        getattr_143356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 24), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2902)
        getattr_call_result_143367 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 24), getattr_143356, *[obj_143357, str_143358, make_mask_none_call_result_143365], **kwargs_143366)
        
        # Assigning a type to the variable '_mask' (line 2902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 16), '_mask', getattr_call_result_143367)
        # SSA branch for the else part of an if statement (line 2901)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2905):
        
        # Assigning a Call to a Name (line 2905):
        
        # Call to getattr(...): (line 2905)
        # Processing the call arguments (line 2905)
        # Getting the type of 'obj' (line 2905)
        obj_143369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 32), 'obj', False)
        str_143370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2905, 37), 'str', '_mask')
        # Getting the type of 'nomask' (line 2905)
        nomask_143371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 46), 'nomask', False)
        # Processing the call keyword arguments (line 2905)
        kwargs_143372 = {}
        # Getting the type of 'getattr' (line 2905)
        getattr_143368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 24), 'getattr', False)
        # Calling getattr(args, kwargs) (line 2905)
        getattr_call_result_143373 = invoke(stypy.reporting.localization.Localization(__file__, 2905, 24), getattr_143368, *[obj_143369, str_143370, nomask_143371], **kwargs_143372)
        
        # Assigning a type to the variable '_mask' (line 2905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2905, 16), '_mask', getattr_call_result_143373)
        # SSA join for if statement (line 2901)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_143374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2914, 48), 'int')
        
        # Obtaining the type of the subscript
        str_143375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2914, 40), 'str', 'data')
        # Getting the type of 'obj' (line 2914)
        obj_143376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2914, 16), 'obj')
        # Obtaining the member '__array_interface__' of a type (line 2914)
        array_interface___143377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2914, 16), obj_143376, '__array_interface__')
        # Obtaining the member '__getitem__' of a type (line 2914)
        getitem___143378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2914, 16), array_interface___143377, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2914)
        subscript_call_result_143379 = invoke(stypy.reporting.localization.Localization(__file__, 2914, 16), getitem___143378, str_143375)
        
        # Obtaining the member '__getitem__' of a type (line 2914)
        getitem___143380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2914, 16), subscript_call_result_143379, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2914)
        subscript_call_result_143381 = invoke(stypy.reporting.localization.Localization(__file__, 2914, 16), getitem___143380, int_143374)
        
        
        # Obtaining the type of the subscript
        int_143382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2915, 56), 'int')
        
        # Obtaining the type of the subscript
        str_143383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2915, 48), 'str', 'data')
        # Getting the type of 'self' (line 2915)
        self_143384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 23), 'self')
        # Obtaining the member '__array_interface__' of a type (line 2915)
        array_interface___143385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2915, 23), self_143384, '__array_interface__')
        # Obtaining the member '__getitem__' of a type (line 2915)
        getitem___143386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2915, 23), array_interface___143385, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2915)
        subscript_call_result_143387 = invoke(stypy.reporting.localization.Localization(__file__, 2915, 23), getitem___143386, str_143383)
        
        # Obtaining the member '__getitem__' of a type (line 2915)
        getitem___143388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2915, 23), subscript_call_result_143387, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2915)
        subscript_call_result_143389 = invoke(stypy.reporting.localization.Localization(__file__, 2915, 23), getitem___143388, int_143382)
        
        # Applying the binary operator '!=' (line 2914)
        result_ne_143390 = python_operator(stypy.reporting.localization.Localization(__file__, 2914, 16), '!=', subscript_call_result_143381, subscript_call_result_143389)
        
        # Testing the type of an if condition (line 2914)
        if_condition_143391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2914, 12), result_ne_143390)
        # Assigning a type to the variable 'if_condition_143391' (line 2914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2914, 12), 'if_condition_143391', if_condition_143391)
        # SSA begins for if statement (line 2914)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2916):
        
        # Assigning a Call to a Name (line 2916):
        
        # Call to copy(...): (line 2916)
        # Processing the call keyword arguments (line 2916)
        kwargs_143394 = {}
        # Getting the type of '_mask' (line 2916)
        _mask_143392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 24), '_mask', False)
        # Obtaining the member 'copy' of a type (line 2916)
        copy_143393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2916, 24), _mask_143392, 'copy')
        # Calling copy(args, kwargs) (line 2916)
        copy_call_result_143395 = invoke(stypy.reporting.localization.Localization(__file__, 2916, 24), copy_143393, *[], **kwargs_143394)
        
        # Assigning a type to the variable '_mask' (line 2916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2916, 16), '_mask', copy_call_result_143395)
        # SSA join for if statement (line 2914)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2898)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2918):
        
        # Assigning a Name to a Name (line 2918):
        # Getting the type of 'nomask' (line 2918)
        nomask_143396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2918, 20), 'nomask')
        # Assigning a type to the variable '_mask' (line 2918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2918, 12), '_mask', nomask_143396)
        # SSA join for if statement (line 2898)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2919):
        
        # Assigning a Name to a Attribute (line 2919):
        # Getting the type of '_mask' (line 2919)
        _mask_143397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 21), '_mask')
        # Getting the type of 'self' (line 2919)
        self_143398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 8), 'self')
        # Setting the type of the member '_mask' of a type (line 2919)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2919, 8), self_143398, '_mask', _mask_143397)
        
        
        # Getting the type of 'self' (line 2921)
        self_143399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 11), 'self')
        # Obtaining the member '_mask' of a type (line 2921)
        _mask_143400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2921, 11), self_143399, '_mask')
        # Getting the type of 'nomask' (line 2921)
        nomask_143401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 29), 'nomask')
        # Applying the binary operator 'isnot' (line 2921)
        result_is_not_143402 = python_operator(stypy.reporting.localization.Localization(__file__, 2921, 11), 'isnot', _mask_143400, nomask_143401)
        
        # Testing the type of an if condition (line 2921)
        if_condition_143403 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2921, 8), result_is_not_143402)
        # Assigning a type to the variable 'if_condition_143403' (line 2921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2921, 8), 'if_condition_143403', if_condition_143403)
        # SSA begins for if statement (line 2921)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 2922)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Attribute to a Attribute (line 2923):
        
        # Assigning a Attribute to a Attribute (line 2923):
        # Getting the type of 'self' (line 2923)
        self_143404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 35), 'self')
        # Obtaining the member 'shape' of a type (line 2923)
        shape_143405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2923, 35), self_143404, 'shape')
        # Getting the type of 'self' (line 2923)
        self_143406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 16), 'self')
        # Obtaining the member '_mask' of a type (line 2923)
        _mask_143407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2923, 16), self_143406, '_mask')
        # Setting the type of the member 'shape' of a type (line 2923)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2923, 16), _mask_143407, 'shape', shape_143405)
        # SSA branch for the except part of a try statement (line 2922)
        # SSA branch for the except 'ValueError' branch of a try statement (line 2922)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Attribute (line 2925):
        
        # Assigning a Name to a Attribute (line 2925):
        # Getting the type of 'nomask' (line 2925)
        nomask_143408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 29), 'nomask')
        # Getting the type of 'self' (line 2925)
        self_143409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 2925)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2925, 16), self_143409, '_mask', nomask_143408)
        # SSA branch for the except 'Tuple' branch of a try statement (line 2922)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 2922)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2921)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 2930)
        self_143410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 11), 'self')
        # Obtaining the member 'dtype' of a type (line 2930)
        dtype_143411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2930, 11), self_143410, 'dtype')
        # Obtaining the member 'names' of a type (line 2930)
        names_143412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2930, 11), dtype_143411, 'names')
        # Testing the type of an if condition (line 2930)
        if_condition_143413 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2930, 8), names_143412)
        # Assigning a type to the variable 'if_condition_143413' (line 2930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2930, 8), 'if_condition_143413', if_condition_143413)
        # SSA begins for if statement (line 2930)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 2931)
        # Getting the type of 'self' (line 2931)
        self_143414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 15), 'self')
        # Obtaining the member '_fill_value' of a type (line 2931)
        _fill_value_143415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2931, 15), self_143414, '_fill_value')
        # Getting the type of 'None' (line 2931)
        None_143416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 35), 'None')
        
        (may_be_143417, more_types_in_union_143418) = may_be_none(_fill_value_143415, None_143416)

        if may_be_143417:

            if more_types_in_union_143418:
                # Runtime conditional SSA (line 2931)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 2932):
            
            # Assigning a Call to a Attribute (line 2932):
            
            # Call to _check_fill_value(...): (line 2932)
            # Processing the call arguments (line 2932)
            # Getting the type of 'None' (line 2932)
            None_143420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 53), 'None', False)
            # Getting the type of 'self' (line 2932)
            self_143421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 59), 'self', False)
            # Obtaining the member 'dtype' of a type (line 2932)
            dtype_143422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 59), self_143421, 'dtype')
            # Processing the call keyword arguments (line 2932)
            kwargs_143423 = {}
            # Getting the type of '_check_fill_value' (line 2932)
            _check_fill_value_143419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 35), '_check_fill_value', False)
            # Calling _check_fill_value(args, kwargs) (line 2932)
            _check_fill_value_call_result_143424 = invoke(stypy.reporting.localization.Localization(__file__, 2932, 35), _check_fill_value_143419, *[None_143420, dtype_143422], **kwargs_143423)
            
            # Getting the type of 'self' (line 2932)
            self_143425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 16), 'self')
            # Setting the type of the member '_fill_value' of a type (line 2932)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 16), self_143425, '_fill_value', _check_fill_value_call_result_143424)

            if more_types_in_union_143418:
                # SSA join for if statement (line 2931)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 2930)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 2933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2933, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of '__array_finalize__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__array_finalize__' in the type store
        # Getting the type of 'stypy_return_type' (line 2864)
        stypy_return_type_143426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143426)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__array_finalize__'
        return stypy_return_type_143426


    @norecursion
    def __array_wrap__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2935)
        None_143427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 42), 'None')
        defaults = [None_143427]
        # Create a new context for function '__array_wrap__'
        module_type_store = module_type_store.open_function_context('__array_wrap__', 2935, 4, False)
        # Assigning a type to the variable 'self' (line 2936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2936, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__array_wrap__')
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_param_names_list', ['obj', 'context'])
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__array_wrap__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__array_wrap__', ['obj', 'context'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__array_wrap__', localization, ['obj', 'context'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__array_wrap__(...)' code ##################

        str_143428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2941, (-1)), 'str', '\n        Special hook for ufuncs.\n\n        Wraps the numpy array and sets the mask according to context.\n\n        ')
        
        # Assigning a Call to a Name (line 2942):
        
        # Assigning a Call to a Name (line 2942):
        
        # Call to view(...): (line 2942)
        # Processing the call arguments (line 2942)
        
        # Call to type(...): (line 2942)
        # Processing the call arguments (line 2942)
        # Getting the type of 'self' (line 2942)
        self_143432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 31), 'self', False)
        # Processing the call keyword arguments (line 2942)
        kwargs_143433 = {}
        # Getting the type of 'type' (line 2942)
        type_143431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 26), 'type', False)
        # Calling type(args, kwargs) (line 2942)
        type_call_result_143434 = invoke(stypy.reporting.localization.Localization(__file__, 2942, 26), type_143431, *[self_143432], **kwargs_143433)
        
        # Processing the call keyword arguments (line 2942)
        kwargs_143435 = {}
        # Getting the type of 'obj' (line 2942)
        obj_143429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 17), 'obj', False)
        # Obtaining the member 'view' of a type (line 2942)
        view_143430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2942, 17), obj_143429, 'view')
        # Calling view(args, kwargs) (line 2942)
        view_call_result_143436 = invoke(stypy.reporting.localization.Localization(__file__, 2942, 17), view_143430, *[type_call_result_143434], **kwargs_143435)
        
        # Assigning a type to the variable 'result' (line 2942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2942, 8), 'result', view_call_result_143436)
        
        # Call to _update_from(...): (line 2943)
        # Processing the call arguments (line 2943)
        # Getting the type of 'self' (line 2943)
        self_143439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 28), 'self', False)
        # Processing the call keyword arguments (line 2943)
        kwargs_143440 = {}
        # Getting the type of 'result' (line 2943)
        result_143437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 8), 'result', False)
        # Obtaining the member '_update_from' of a type (line 2943)
        _update_from_143438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2943, 8), result_143437, '_update_from')
        # Calling _update_from(args, kwargs) (line 2943)
        _update_from_call_result_143441 = invoke(stypy.reporting.localization.Localization(__file__, 2943, 8), _update_from_143438, *[self_143439], **kwargs_143440)
        
        
        # Type idiom detected: calculating its left and rigth part (line 2945)
        # Getting the type of 'context' (line 2945)
        context_143442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 8), 'context')
        # Getting the type of 'None' (line 2945)
        None_143443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 26), 'None')
        
        (may_be_143444, more_types_in_union_143445) = may_not_be_none(context_143442, None_143443)

        if may_be_143444:

            if more_types_in_union_143445:
                # Runtime conditional SSA (line 2945)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 2946):
            
            # Assigning a Call to a Attribute (line 2946):
            
            # Call to copy(...): (line 2946)
            # Processing the call keyword arguments (line 2946)
            kwargs_143449 = {}
            # Getting the type of 'result' (line 2946)
            result_143446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 27), 'result', False)
            # Obtaining the member '_mask' of a type (line 2946)
            _mask_143447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2946, 27), result_143446, '_mask')
            # Obtaining the member 'copy' of a type (line 2946)
            copy_143448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2946, 27), _mask_143447, 'copy')
            # Calling copy(args, kwargs) (line 2946)
            copy_call_result_143450 = invoke(stypy.reporting.localization.Localization(__file__, 2946, 27), copy_143448, *[], **kwargs_143449)
            
            # Getting the type of 'result' (line 2946)
            result_143451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 12), 'result')
            # Setting the type of the member '_mask' of a type (line 2946)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2946, 12), result_143451, '_mask', copy_call_result_143450)
            
            # Assigning a Name to a Tuple (line 2947):
            
            # Assigning a Subscript to a Name (line 2947):
            
            # Obtaining the type of the subscript
            int_143452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 12), 'int')
            # Getting the type of 'context' (line 2947)
            context_143453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 30), 'context')
            # Obtaining the member '__getitem__' of a type (line 2947)
            getitem___143454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 12), context_143453, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2947)
            subscript_call_result_143455 = invoke(stypy.reporting.localization.Localization(__file__, 2947, 12), getitem___143454, int_143452)
            
            # Assigning a type to the variable 'tuple_var_assignment_139183' (line 2947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 12), 'tuple_var_assignment_139183', subscript_call_result_143455)
            
            # Assigning a Subscript to a Name (line 2947):
            
            # Obtaining the type of the subscript
            int_143456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 12), 'int')
            # Getting the type of 'context' (line 2947)
            context_143457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 30), 'context')
            # Obtaining the member '__getitem__' of a type (line 2947)
            getitem___143458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 12), context_143457, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2947)
            subscript_call_result_143459 = invoke(stypy.reporting.localization.Localization(__file__, 2947, 12), getitem___143458, int_143456)
            
            # Assigning a type to the variable 'tuple_var_assignment_139184' (line 2947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 12), 'tuple_var_assignment_139184', subscript_call_result_143459)
            
            # Assigning a Subscript to a Name (line 2947):
            
            # Obtaining the type of the subscript
            int_143460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 12), 'int')
            # Getting the type of 'context' (line 2947)
            context_143461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 30), 'context')
            # Obtaining the member '__getitem__' of a type (line 2947)
            getitem___143462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2947, 12), context_143461, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2947)
            subscript_call_result_143463 = invoke(stypy.reporting.localization.Localization(__file__, 2947, 12), getitem___143462, int_143460)
            
            # Assigning a type to the variable 'tuple_var_assignment_139185' (line 2947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 12), 'tuple_var_assignment_139185', subscript_call_result_143463)
            
            # Assigning a Name to a Name (line 2947):
            # Getting the type of 'tuple_var_assignment_139183' (line 2947)
            tuple_var_assignment_139183_143464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 12), 'tuple_var_assignment_139183')
            # Assigning a type to the variable 'func' (line 2947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 13), 'func', tuple_var_assignment_139183_143464)
            
            # Assigning a Name to a Name (line 2947):
            # Getting the type of 'tuple_var_assignment_139184' (line 2947)
            tuple_var_assignment_139184_143465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 12), 'tuple_var_assignment_139184')
            # Assigning a type to the variable 'args' (line 2947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 19), 'args', tuple_var_assignment_139184_143465)
            
            # Assigning a Name to a Name (line 2947):
            # Getting the type of 'tuple_var_assignment_139185' (line 2947)
            tuple_var_assignment_139185_143466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 12), 'tuple_var_assignment_139185')
            # Assigning a type to the variable '_' (line 2947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 25), '_', tuple_var_assignment_139185_143466)
            
            # Assigning a Call to a Name (line 2948):
            
            # Assigning a Call to a Name (line 2948):
            
            # Call to reduce(...): (line 2948)
            # Processing the call arguments (line 2948)
            # Getting the type of 'mask_or' (line 2948)
            mask_or_143468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 23), 'mask_or', False)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'args' (line 2948)
            args_143473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 62), 'args', False)
            comprehension_143474 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2948, 33), args_143473)
            # Assigning a type to the variable 'arg' (line 2948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2948, 33), 'arg', comprehension_143474)
            
            # Call to getmaskarray(...): (line 2948)
            # Processing the call arguments (line 2948)
            # Getting the type of 'arg' (line 2948)
            arg_143470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 46), 'arg', False)
            # Processing the call keyword arguments (line 2948)
            kwargs_143471 = {}
            # Getting the type of 'getmaskarray' (line 2948)
            getmaskarray_143469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 33), 'getmaskarray', False)
            # Calling getmaskarray(args, kwargs) (line 2948)
            getmaskarray_call_result_143472 = invoke(stypy.reporting.localization.Localization(__file__, 2948, 33), getmaskarray_143469, *[arg_143470], **kwargs_143471)
            
            list_143475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2948, 33), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2948, 33), list_143475, getmaskarray_call_result_143472)
            # Processing the call keyword arguments (line 2948)
            kwargs_143476 = {}
            # Getting the type of 'reduce' (line 2948)
            reduce_143467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 16), 'reduce', False)
            # Calling reduce(args, kwargs) (line 2948)
            reduce_call_result_143477 = invoke(stypy.reporting.localization.Localization(__file__, 2948, 16), reduce_143467, *[mask_or_143468, list_143475], **kwargs_143476)
            
            # Assigning a type to the variable 'm' (line 2948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2948, 12), 'm', reduce_call_result_143477)
            
            # Assigning a Call to a Name (line 2950):
            
            # Assigning a Call to a Name (line 2950):
            
            # Call to get(...): (line 2950)
            # Processing the call arguments (line 2950)
            # Getting the type of 'func' (line 2950)
            func_143480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 38), 'func', False)
            # Getting the type of 'None' (line 2950)
            None_143481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 44), 'None', False)
            # Processing the call keyword arguments (line 2950)
            kwargs_143482 = {}
            # Getting the type of 'ufunc_domain' (line 2950)
            ufunc_domain_143478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 21), 'ufunc_domain', False)
            # Obtaining the member 'get' of a type (line 2950)
            get_143479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2950, 21), ufunc_domain_143478, 'get')
            # Calling get(args, kwargs) (line 2950)
            get_call_result_143483 = invoke(stypy.reporting.localization.Localization(__file__, 2950, 21), get_143479, *[func_143480, None_143481], **kwargs_143482)
            
            # Assigning a type to the variable 'domain' (line 2950)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2950, 12), 'domain', get_call_result_143483)
            
            # Type idiom detected: calculating its left and rigth part (line 2951)
            # Getting the type of 'domain' (line 2951)
            domain_143484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 12), 'domain')
            # Getting the type of 'None' (line 2951)
            None_143485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 29), 'None')
            
            (may_be_143486, more_types_in_union_143487) = may_not_be_none(domain_143484, None_143485)

            if may_be_143486:

                if more_types_in_union_143487:
                    # Runtime conditional SSA (line 2951)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                
                
                # Call to len(...): (line 2953)
                # Processing the call arguments (line 2953)
                # Getting the type of 'args' (line 2953)
                args_143489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 23), 'args', False)
                # Processing the call keyword arguments (line 2953)
                kwargs_143490 = {}
                # Getting the type of 'len' (line 2953)
                len_143488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 19), 'len', False)
                # Calling len(args, kwargs) (line 2953)
                len_call_result_143491 = invoke(stypy.reporting.localization.Localization(__file__, 2953, 19), len_143488, *[args_143489], **kwargs_143490)
                
                int_143492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2953, 31), 'int')
                # Applying the binary operator '>' (line 2953)
                result_gt_143493 = python_operator(stypy.reporting.localization.Localization(__file__, 2953, 19), '>', len_call_result_143491, int_143492)
                
                # Testing the type of an if condition (line 2953)
                if_condition_143494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2953, 16), result_gt_143493)
                # Assigning a type to the variable 'if_condition_143494' (line 2953)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2953, 16), 'if_condition_143494', if_condition_143494)
                # SSA begins for if statement (line 2953)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 2954):
                
                # Assigning a Call to a Name (line 2954):
                
                # Call to filled(...): (line 2954)
                # Processing the call arguments (line 2954)
                
                # Call to reduce(...): (line 2954)
                # Processing the call arguments (line 2954)
                # Getting the type of 'domain' (line 2954)
                domain_143497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 38), 'domain', False)
                # Getting the type of 'args' (line 2954)
                args_143498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 46), 'args', False)
                # Processing the call keyword arguments (line 2954)
                kwargs_143499 = {}
                # Getting the type of 'reduce' (line 2954)
                reduce_143496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 31), 'reduce', False)
                # Calling reduce(args, kwargs) (line 2954)
                reduce_call_result_143500 = invoke(stypy.reporting.localization.Localization(__file__, 2954, 31), reduce_143496, *[domain_143497, args_143498], **kwargs_143499)
                
                # Getting the type of 'True' (line 2954)
                True_143501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 53), 'True', False)
                # Processing the call keyword arguments (line 2954)
                kwargs_143502 = {}
                # Getting the type of 'filled' (line 2954)
                filled_143495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 24), 'filled', False)
                # Calling filled(args, kwargs) (line 2954)
                filled_call_result_143503 = invoke(stypy.reporting.localization.Localization(__file__, 2954, 24), filled_143495, *[reduce_call_result_143500, True_143501], **kwargs_143502)
                
                # Assigning a type to the variable 'd' (line 2954)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2954, 20), 'd', filled_call_result_143503)
                # SSA branch for the else part of an if statement (line 2953)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Call to a Name (line 2956):
                
                # Assigning a Call to a Name (line 2956):
                
                # Call to filled(...): (line 2956)
                # Processing the call arguments (line 2956)
                
                # Call to domain(...): (line 2956)
                # Getting the type of 'args' (line 2956)
                args_143506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 39), 'args', False)
                # Processing the call keyword arguments (line 2956)
                kwargs_143507 = {}
                # Getting the type of 'domain' (line 2956)
                domain_143505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 31), 'domain', False)
                # Calling domain(args, kwargs) (line 2956)
                domain_call_result_143508 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 31), domain_143505, *[args_143506], **kwargs_143507)
                
                # Getting the type of 'True' (line 2956)
                True_143509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 46), 'True', False)
                # Processing the call keyword arguments (line 2956)
                kwargs_143510 = {}
                # Getting the type of 'filled' (line 2956)
                filled_143504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 24), 'filled', False)
                # Calling filled(args, kwargs) (line 2956)
                filled_call_result_143511 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 24), filled_143504, *[domain_call_result_143508, True_143509], **kwargs_143510)
                
                # Assigning a type to the variable 'd' (line 2956)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 20), 'd', filled_call_result_143511)
                # SSA join for if statement (line 2953)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # SSA begins for try-except statement (line 2958)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                # Assigning a Subscript to a Name (line 2960):
                
                # Assigning a Subscript to a Name (line 2960):
                
                # Obtaining the type of the subscript
                int_143512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2960, 51), 'int')
                
                # Obtaining the type of the subscript
                # Getting the type of 'func' (line 2960)
                func_143513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 45), 'func')
                # Getting the type of 'ufunc_fills' (line 2960)
                ufunc_fills_143514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 33), 'ufunc_fills')
                # Obtaining the member '__getitem__' of a type (line 2960)
                getitem___143515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2960, 33), ufunc_fills_143514, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 2960)
                subscript_call_result_143516 = invoke(stypy.reporting.localization.Localization(__file__, 2960, 33), getitem___143515, func_143513)
                
                # Obtaining the member '__getitem__' of a type (line 2960)
                getitem___143517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2960, 33), subscript_call_result_143516, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 2960)
                subscript_call_result_143518 = invoke(stypy.reporting.localization.Localization(__file__, 2960, 33), getitem___143517, int_143512)
                
                # Assigning a type to the variable 'fill_value' (line 2960)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2960, 20), 'fill_value', subscript_call_result_143518)
                # SSA branch for the except part of a try statement (line 2958)
                # SSA branch for the except 'TypeError' branch of a try statement (line 2958)
                module_type_store.open_ssa_branch('except')
                
                # Assigning a Subscript to a Name (line 2963):
                
                # Assigning a Subscript to a Name (line 2963):
                
                # Obtaining the type of the subscript
                # Getting the type of 'func' (line 2963)
                func_143519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2963, 45), 'func')
                # Getting the type of 'ufunc_fills' (line 2963)
                ufunc_fills_143520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2963, 33), 'ufunc_fills')
                # Obtaining the member '__getitem__' of a type (line 2963)
                getitem___143521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2963, 33), ufunc_fills_143520, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 2963)
                subscript_call_result_143522 = invoke(stypy.reporting.localization.Localization(__file__, 2963, 33), getitem___143521, func_143519)
                
                # Assigning a type to the variable 'fill_value' (line 2963)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2963, 20), 'fill_value', subscript_call_result_143522)
                # SSA branch for the except 'KeyError' branch of a try statement (line 2958)
                module_type_store.open_ssa_branch('except')
                
                # Assigning a Attribute to a Name (line 2966):
                
                # Assigning a Attribute to a Name (line 2966):
                # Getting the type of 'self' (line 2966)
                self_143523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 33), 'self')
                # Obtaining the member 'fill_value' of a type (line 2966)
                fill_value_143524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2966, 33), self_143523, 'fill_value')
                # Assigning a type to the variable 'fill_value' (line 2966)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2966, 20), 'fill_value', fill_value_143524)
                # SSA join for try-except statement (line 2958)
                module_type_store = module_type_store.join_ssa_context()
                
                
                # Assigning a Call to a Name (line 2967):
                
                # Assigning a Call to a Name (line 2967):
                
                # Call to copy(...): (line 2967)
                # Processing the call keyword arguments (line 2967)
                kwargs_143527 = {}
                # Getting the type of 'result' (line 2967)
                result_143525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 25), 'result', False)
                # Obtaining the member 'copy' of a type (line 2967)
                copy_143526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2967, 25), result_143525, 'copy')
                # Calling copy(args, kwargs) (line 2967)
                copy_call_result_143528 = invoke(stypy.reporting.localization.Localization(__file__, 2967, 25), copy_143526, *[], **kwargs_143527)
                
                # Assigning a type to the variable 'result' (line 2967)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2967, 16), 'result', copy_call_result_143528)
                
                # Call to copyto(...): (line 2968)
                # Processing the call arguments (line 2968)
                # Getting the type of 'result' (line 2968)
                result_143531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 26), 'result', False)
                # Getting the type of 'fill_value' (line 2968)
                fill_value_143532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 34), 'fill_value', False)
                # Processing the call keyword arguments (line 2968)
                # Getting the type of 'd' (line 2968)
                d_143533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 52), 'd', False)
                keyword_143534 = d_143533
                kwargs_143535 = {'where': keyword_143534}
                # Getting the type of 'np' (line 2968)
                np_143529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 16), 'np', False)
                # Obtaining the member 'copyto' of a type (line 2968)
                copyto_143530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2968, 16), np_143529, 'copyto')
                # Calling copyto(args, kwargs) (line 2968)
                copyto_call_result_143536 = invoke(stypy.reporting.localization.Localization(__file__, 2968, 16), copyto_143530, *[result_143531, fill_value_143532], **kwargs_143535)
                
                
                
                # Getting the type of 'm' (line 2970)
                m_143537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 19), 'm')
                # Getting the type of 'nomask' (line 2970)
                nomask_143538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 24), 'nomask')
                # Applying the binary operator 'is' (line 2970)
                result_is__143539 = python_operator(stypy.reporting.localization.Localization(__file__, 2970, 19), 'is', m_143537, nomask_143538)
                
                # Testing the type of an if condition (line 2970)
                if_condition_143540 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2970, 16), result_is__143539)
                # Assigning a type to the variable 'if_condition_143540' (line 2970)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2970, 16), 'if_condition_143540', if_condition_143540)
                # SSA begins for if statement (line 2970)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                
                # Getting the type of 'd' (line 2971)
                d_143541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 23), 'd')
                # Getting the type of 'nomask' (line 2971)
                nomask_143542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 32), 'nomask')
                # Applying the binary operator 'isnot' (line 2971)
                result_is_not_143543 = python_operator(stypy.reporting.localization.Localization(__file__, 2971, 23), 'isnot', d_143541, nomask_143542)
                
                # Testing the type of an if condition (line 2971)
                if_condition_143544 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2971, 20), result_is_not_143543)
                # Assigning a type to the variable 'if_condition_143544' (line 2971)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2971, 20), 'if_condition_143544', if_condition_143544)
                # SSA begins for if statement (line 2971)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Name to a Name (line 2972):
                
                # Assigning a Name to a Name (line 2972):
                # Getting the type of 'd' (line 2972)
                d_143545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 28), 'd')
                # Assigning a type to the variable 'm' (line 2972)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2972, 24), 'm', d_143545)
                # SSA join for if statement (line 2971)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA branch for the else part of an if statement (line 2970)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a BinOp to a Name (line 2975):
                
                # Assigning a BinOp to a Name (line 2975):
                # Getting the type of 'm' (line 2975)
                m_143546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 25), 'm')
                # Getting the type of 'd' (line 2975)
                d_143547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 29), 'd')
                # Applying the binary operator '|' (line 2975)
                result_or__143548 = python_operator(stypy.reporting.localization.Localization(__file__, 2975, 25), '|', m_143546, d_143547)
                
                # Assigning a type to the variable 'm' (line 2975)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2975, 20), 'm', result_or__143548)
                # SSA join for if statement (line 2970)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_143487:
                    # SSA join for if statement (line 2951)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'result' (line 2977)
            result_143549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 15), 'result')
            # Obtaining the member 'shape' of a type (line 2977)
            shape_143550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2977, 15), result_143549, 'shape')
            
            # Obtaining an instance of the builtin type 'tuple' (line 2977)
            tuple_143551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2977, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2977)
            
            # Applying the binary operator '==' (line 2977)
            result_eq_143552 = python_operator(stypy.reporting.localization.Localization(__file__, 2977, 15), '==', shape_143550, tuple_143551)
            
            # Getting the type of 'm' (line 2977)
            m_143553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 38), 'm')
            # Applying the binary operator 'and' (line 2977)
            result_and_keyword_143554 = python_operator(stypy.reporting.localization.Localization(__file__, 2977, 15), 'and', result_eq_143552, m_143553)
            
            # Testing the type of an if condition (line 2977)
            if_condition_143555 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2977, 12), result_and_keyword_143554)
            # Assigning a type to the variable 'if_condition_143555' (line 2977)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2977, 12), 'if_condition_143555', if_condition_143555)
            # SSA begins for if statement (line 2977)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 'masked' (line 2978)
            masked_143556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 23), 'masked')
            # Assigning a type to the variable 'stypy_return_type' (line 2978)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2978, 16), 'stypy_return_type', masked_143556)
            # SSA branch for the else part of an if statement (line 2977)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 2980):
            
            # Assigning a Name to a Attribute (line 2980):
            # Getting the type of 'm' (line 2980)
            m_143557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 31), 'm')
            # Getting the type of 'result' (line 2980)
            result_143558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 16), 'result')
            # Setting the type of the member '_mask' of a type (line 2980)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2980, 16), result_143558, '_mask', m_143557)
            
            # Assigning a Name to a Attribute (line 2981):
            
            # Assigning a Name to a Attribute (line 2981):
            # Getting the type of 'False' (line 2981)
            False_143559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 37), 'False')
            # Getting the type of 'result' (line 2981)
            result_143560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 16), 'result')
            # Setting the type of the member '_sharedmask' of a type (line 2981)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2981, 16), result_143560, '_sharedmask', False_143559)
            # SSA join for if statement (line 2977)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_143445:
                # SSA join for if statement (line 2945)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'result' (line 2983)
        result_143561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2983, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 2983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2983, 8), 'stypy_return_type', result_143561)
        
        # ################# End of '__array_wrap__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__array_wrap__' in the type store
        # Getting the type of 'stypy_return_type' (line 2935)
        stypy_return_type_143562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143562)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__array_wrap__'
        return stypy_return_type_143562


    @norecursion
    def view(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2985)
        None_143563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 25), 'None')
        # Getting the type of 'None' (line 2985)
        None_143564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 36), 'None')
        # Getting the type of 'None' (line 2985)
        None_143565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 53), 'None')
        defaults = [None_143563, None_143564, None_143565]
        # Create a new context for function 'view'
        module_type_store = module_type_store.open_function_context('view', 2985, 4, False)
        # Assigning a type to the variable 'self' (line 2986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2986, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.view.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.view.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.view.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.view.__dict__.__setitem__('stypy_function_name', 'MaskedArray.view')
        MaskedArray.view.__dict__.__setitem__('stypy_param_names_list', ['dtype', 'type', 'fill_value'])
        MaskedArray.view.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.view.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.view.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.view.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.view.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.view.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.view', ['dtype', 'type', 'fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'view', localization, ['dtype', 'type', 'fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'view(...)' code ##################

        str_143566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, (-1)), 'str', "\n        Return a view of the MaskedArray data\n\n        Parameters\n        ----------\n        dtype : data-type or ndarray sub-class, optional\n            Data-type descriptor of the returned view, e.g., float32 or int16.\n            The default, None, results in the view having the same data-type\n            as `a`. As with ``ndarray.view``, dtype can also be specified as\n            an ndarray sub-class, which then specifies the type of the\n            returned object (this is equivalent to setting the ``type``\n            parameter).\n        type : Python type, optional\n            Type of the returned view, e.g., ndarray or matrix.  Again, the\n            default None results in type preservation.\n\n        Notes\n        -----\n\n        ``a.view()`` is used two different ways:\n\n        ``a.view(some_dtype)`` or ``a.view(dtype=some_dtype)`` constructs a view\n        of the array's memory with a different data-type.  This can cause a\n        reinterpretation of the bytes of memory.\n\n        ``a.view(ndarray_subclass)`` or ``a.view(type=ndarray_subclass)`` just\n        returns an instance of `ndarray_subclass` that looks at the same array\n        (same shape, dtype, etc.)  This does not cause a reinterpretation of the\n        memory.\n\n        If `fill_value` is not specified, but `dtype` is specified (and is not\n        an ndarray sub-class), the `fill_value` of the MaskedArray will be\n        reset. If neither `fill_value` nor `dtype` are specified (or if\n        `dtype` is an ndarray sub-class), then the fill value is preserved.\n        Finally, if `fill_value` is specified, but `dtype` is not, the fill\n        value is set to the specified value.\n\n        For ``a.view(some_dtype)``, if ``some_dtype`` has a different number of\n        bytes per entry than the previous dtype (for example, converting a\n        regular array to a structured array), then the behavior of the view\n        cannot be predicted just from the superficial appearance of ``a`` (shown\n        by ``print(a)``). It also depends on exactly how ``a`` is stored in\n        memory. Therefore if ``a`` is C-ordered versus fortran-ordered, versus\n        defined as a slice or transpose, etc., the view may give different\n        results.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 3033)
        # Getting the type of 'dtype' (line 3033)
        dtype_143567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 11), 'dtype')
        # Getting the type of 'None' (line 3033)
        None_143568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3033, 20), 'None')
        
        (may_be_143569, more_types_in_union_143570) = may_be_none(dtype_143567, None_143568)

        if may_be_143569:

            if more_types_in_union_143570:
                # Runtime conditional SSA (line 3033)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 3034)
            # Getting the type of 'type' (line 3034)
            type_143571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3034, 15), 'type')
            # Getting the type of 'None' (line 3034)
            None_143572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3034, 23), 'None')
            
            (may_be_143573, more_types_in_union_143574) = may_be_none(type_143571, None_143572)

            if may_be_143573:

                if more_types_in_union_143574:
                    # Runtime conditional SSA (line 3034)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Call to a Name (line 3035):
                
                # Assigning a Call to a Name (line 3035):
                
                # Call to view(...): (line 3035)
                # Processing the call arguments (line 3035)
                # Getting the type of 'self' (line 3035)
                self_143577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 38), 'self', False)
                # Processing the call keyword arguments (line 3035)
                kwargs_143578 = {}
                # Getting the type of 'ndarray' (line 3035)
                ndarray_143575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 25), 'ndarray', False)
                # Obtaining the member 'view' of a type (line 3035)
                view_143576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3035, 25), ndarray_143575, 'view')
                # Calling view(args, kwargs) (line 3035)
                view_call_result_143579 = invoke(stypy.reporting.localization.Localization(__file__, 3035, 25), view_143576, *[self_143577], **kwargs_143578)
                
                # Assigning a type to the variable 'output' (line 3035)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3035, 16), 'output', view_call_result_143579)

                if more_types_in_union_143574:
                    # Runtime conditional SSA for else branch (line 3034)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_143573) or more_types_in_union_143574):
                
                # Assigning a Call to a Name (line 3037):
                
                # Assigning a Call to a Name (line 3037):
                
                # Call to view(...): (line 3037)
                # Processing the call arguments (line 3037)
                # Getting the type of 'self' (line 3037)
                self_143582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 38), 'self', False)
                # Getting the type of 'type' (line 3037)
                type_143583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 44), 'type', False)
                # Processing the call keyword arguments (line 3037)
                kwargs_143584 = {}
                # Getting the type of 'ndarray' (line 3037)
                ndarray_143580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 25), 'ndarray', False)
                # Obtaining the member 'view' of a type (line 3037)
                view_143581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3037, 25), ndarray_143580, 'view')
                # Calling view(args, kwargs) (line 3037)
                view_call_result_143585 = invoke(stypy.reporting.localization.Localization(__file__, 3037, 25), view_143581, *[self_143582, type_143583], **kwargs_143584)
                
                # Assigning a type to the variable 'output' (line 3037)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3037, 16), 'output', view_call_result_143585)

                if (may_be_143573 and more_types_in_union_143574):
                    # SSA join for if statement (line 3034)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_143570:
                # Runtime conditional SSA for else branch (line 3033)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143569) or more_types_in_union_143570):
            
            # Type idiom detected: calculating its left and rigth part (line 3038)
            # Getting the type of 'type' (line 3038)
            type_143586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3038, 13), 'type')
            # Getting the type of 'None' (line 3038)
            None_143587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3038, 21), 'None')
            
            (may_be_143588, more_types_in_union_143589) = may_be_none(type_143586, None_143587)

            if may_be_143588:

                if more_types_in_union_143589:
                    # Runtime conditional SSA (line 3038)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                
                # SSA begins for try-except statement (line 3039)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                
                # Call to issubclass(...): (line 3040)
                # Processing the call arguments (line 3040)
                # Getting the type of 'dtype' (line 3040)
                dtype_143591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 30), 'dtype', False)
                # Getting the type of 'ndarray' (line 3040)
                ndarray_143592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 37), 'ndarray', False)
                # Processing the call keyword arguments (line 3040)
                kwargs_143593 = {}
                # Getting the type of 'issubclass' (line 3040)
                issubclass_143590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3040, 19), 'issubclass', False)
                # Calling issubclass(args, kwargs) (line 3040)
                issubclass_call_result_143594 = invoke(stypy.reporting.localization.Localization(__file__, 3040, 19), issubclass_143590, *[dtype_143591, ndarray_143592], **kwargs_143593)
                
                # Testing the type of an if condition (line 3040)
                if_condition_143595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3040, 16), issubclass_call_result_143594)
                # Assigning a type to the variable 'if_condition_143595' (line 3040)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3040, 16), 'if_condition_143595', if_condition_143595)
                # SSA begins for if statement (line 3040)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 3041):
                
                # Assigning a Call to a Name (line 3041):
                
                # Call to view(...): (line 3041)
                # Processing the call arguments (line 3041)
                # Getting the type of 'self' (line 3041)
                self_143598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 42), 'self', False)
                # Getting the type of 'dtype' (line 3041)
                dtype_143599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 48), 'dtype', False)
                # Processing the call keyword arguments (line 3041)
                kwargs_143600 = {}
                # Getting the type of 'ndarray' (line 3041)
                ndarray_143596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 29), 'ndarray', False)
                # Obtaining the member 'view' of a type (line 3041)
                view_143597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3041, 29), ndarray_143596, 'view')
                # Calling view(args, kwargs) (line 3041)
                view_call_result_143601 = invoke(stypy.reporting.localization.Localization(__file__, 3041, 29), view_143597, *[self_143598, dtype_143599], **kwargs_143600)
                
                # Assigning a type to the variable 'output' (line 3041)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 20), 'output', view_call_result_143601)
                
                # Assigning a Name to a Name (line 3042):
                
                # Assigning a Name to a Name (line 3042):
                # Getting the type of 'None' (line 3042)
                None_143602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 28), 'None')
                # Assigning a type to the variable 'dtype' (line 3042)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3042, 20), 'dtype', None_143602)
                # SSA branch for the else part of an if statement (line 3040)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Call to a Name (line 3044):
                
                # Assigning a Call to a Name (line 3044):
                
                # Call to view(...): (line 3044)
                # Processing the call arguments (line 3044)
                # Getting the type of 'self' (line 3044)
                self_143605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 42), 'self', False)
                # Getting the type of 'dtype' (line 3044)
                dtype_143606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 48), 'dtype', False)
                # Processing the call keyword arguments (line 3044)
                kwargs_143607 = {}
                # Getting the type of 'ndarray' (line 3044)
                ndarray_143603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 29), 'ndarray', False)
                # Obtaining the member 'view' of a type (line 3044)
                view_143604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3044, 29), ndarray_143603, 'view')
                # Calling view(args, kwargs) (line 3044)
                view_call_result_143608 = invoke(stypy.reporting.localization.Localization(__file__, 3044, 29), view_143604, *[self_143605, dtype_143606], **kwargs_143607)
                
                # Assigning a type to the variable 'output' (line 3044)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3044, 20), 'output', view_call_result_143608)
                # SSA join for if statement (line 3040)
                module_type_store = module_type_store.join_ssa_context()
                
                # SSA branch for the except part of a try statement (line 3039)
                # SSA branch for the except 'TypeError' branch of a try statement (line 3039)
                module_type_store.open_ssa_branch('except')
                
                # Assigning a Call to a Name (line 3046):
                
                # Assigning a Call to a Name (line 3046):
                
                # Call to view(...): (line 3046)
                # Processing the call arguments (line 3046)
                # Getting the type of 'self' (line 3046)
                self_143611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 38), 'self', False)
                # Getting the type of 'dtype' (line 3046)
                dtype_143612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 44), 'dtype', False)
                # Processing the call keyword arguments (line 3046)
                kwargs_143613 = {}
                # Getting the type of 'ndarray' (line 3046)
                ndarray_143609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 25), 'ndarray', False)
                # Obtaining the member 'view' of a type (line 3046)
                view_143610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3046, 25), ndarray_143609, 'view')
                # Calling view(args, kwargs) (line 3046)
                view_call_result_143614 = invoke(stypy.reporting.localization.Localization(__file__, 3046, 25), view_143610, *[self_143611, dtype_143612], **kwargs_143613)
                
                # Assigning a type to the variable 'output' (line 3046)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3046, 16), 'output', view_call_result_143614)
                # SSA join for try-except statement (line 3039)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_143589:
                    # Runtime conditional SSA for else branch (line 3038)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_143588) or more_types_in_union_143589):
                
                # Assigning a Call to a Name (line 3048):
                
                # Assigning a Call to a Name (line 3048):
                
                # Call to view(...): (line 3048)
                # Processing the call arguments (line 3048)
                # Getting the type of 'self' (line 3048)
                self_143617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 34), 'self', False)
                # Getting the type of 'dtype' (line 3048)
                dtype_143618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 40), 'dtype', False)
                # Getting the type of 'type' (line 3048)
                type_143619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 47), 'type', False)
                # Processing the call keyword arguments (line 3048)
                kwargs_143620 = {}
                # Getting the type of 'ndarray' (line 3048)
                ndarray_143615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 21), 'ndarray', False)
                # Obtaining the member 'view' of a type (line 3048)
                view_143616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3048, 21), ndarray_143615, 'view')
                # Calling view(args, kwargs) (line 3048)
                view_call_result_143621 = invoke(stypy.reporting.localization.Localization(__file__, 3048, 21), view_143616, *[self_143617, dtype_143618, type_143619], **kwargs_143620)
                
                # Assigning a type to the variable 'output' (line 3048)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3048, 12), 'output', view_call_result_143621)

                if (may_be_143588 and more_types_in_union_143589):
                    # SSA join for if statement (line 3038)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_143569 and more_types_in_union_143570):
                # SSA join for if statement (line 3033)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to getattr(...): (line 3053)
        # Processing the call arguments (line 3053)
        # Getting the type of 'output' (line 3053)
        output_143623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 20), 'output', False)
        str_143624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3053, 28), 'str', '_mask')
        # Getting the type of 'nomask' (line 3053)
        nomask_143625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 37), 'nomask', False)
        # Processing the call keyword arguments (line 3053)
        kwargs_143626 = {}
        # Getting the type of 'getattr' (line 3053)
        getattr_143622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 12), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3053)
        getattr_call_result_143627 = invoke(stypy.reporting.localization.Localization(__file__, 3053, 12), getattr_143622, *[output_143623, str_143624, nomask_143625], **kwargs_143626)
        
        # Getting the type of 'nomask' (line 3053)
        nomask_143628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 52), 'nomask')
        # Applying the binary operator 'isnot' (line 3053)
        result_is_not_143629 = python_operator(stypy.reporting.localization.Localization(__file__, 3053, 12), 'isnot', getattr_call_result_143627, nomask_143628)
        
        # Testing the type of an if condition (line 3053)
        if_condition_143630 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3053, 8), result_is_not_143629)
        # Assigning a type to the variable 'if_condition_143630' (line 3053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3053, 8), 'if_condition_143630', if_condition_143630)
        # SSA begins for if statement (line 3053)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 3054):
        
        # Assigning a Call to a Attribute (line 3054):
        
        # Call to view(...): (line 3054)
        # Processing the call keyword arguments (line 3054)
        kwargs_143634 = {}
        # Getting the type of 'output' (line 3054)
        output_143631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 27), 'output', False)
        # Obtaining the member '_mask' of a type (line 3054)
        _mask_143632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3054, 27), output_143631, '_mask')
        # Obtaining the member 'view' of a type (line 3054)
        view_143633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3054, 27), _mask_143632, 'view')
        # Calling view(args, kwargs) (line 3054)
        view_call_result_143635 = invoke(stypy.reporting.localization.Localization(__file__, 3054, 27), view_143633, *[], **kwargs_143634)
        
        # Getting the type of 'output' (line 3054)
        output_143636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 12), 'output')
        # Setting the type of the member '_mask' of a type (line 3054)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3054, 12), output_143636, '_mask', view_call_result_143635)
        # SSA join for if statement (line 3053)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to getattr(...): (line 3057)
        # Processing the call arguments (line 3057)
        # Getting the type of 'output' (line 3057)
        output_143638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 19), 'output', False)
        str_143639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3057, 27), 'str', '_fill_value')
        # Getting the type of 'None' (line 3057)
        None_143640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 42), 'None', False)
        # Processing the call keyword arguments (line 3057)
        kwargs_143641 = {}
        # Getting the type of 'getattr' (line 3057)
        getattr_143637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 11), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3057)
        getattr_call_result_143642 = invoke(stypy.reporting.localization.Localization(__file__, 3057, 11), getattr_143637, *[output_143638, str_143639, None_143640], **kwargs_143641)
        
        # Getting the type of 'None' (line 3057)
        None_143643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 55), 'None')
        # Applying the binary operator 'isnot' (line 3057)
        result_is_not_143644 = python_operator(stypy.reporting.localization.Localization(__file__, 3057, 11), 'isnot', getattr_call_result_143642, None_143643)
        
        # Testing the type of an if condition (line 3057)
        if_condition_143645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3057, 8), result_is_not_143644)
        # Assigning a type to the variable 'if_condition_143645' (line 3057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3057, 8), 'if_condition_143645', if_condition_143645)
        # SSA begins for if statement (line 3057)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 3058)
        # Getting the type of 'fill_value' (line 3058)
        fill_value_143646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3058, 15), 'fill_value')
        # Getting the type of 'None' (line 3058)
        None_143647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3058, 29), 'None')
        
        (may_be_143648, more_types_in_union_143649) = may_be_none(fill_value_143646, None_143647)

        if may_be_143648:

            if more_types_in_union_143649:
                # Runtime conditional SSA (line 3058)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 3059)
            # Getting the type of 'dtype' (line 3059)
            dtype_143650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3059, 19), 'dtype')
            # Getting the type of 'None' (line 3059)
            None_143651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3059, 28), 'None')
            
            (may_be_143652, more_types_in_union_143653) = may_be_none(dtype_143650, None_143651)

            if may_be_143652:

                if more_types_in_union_143653:
                    # Runtime conditional SSA (line 3059)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                pass

                if more_types_in_union_143653:
                    # Runtime conditional SSA for else branch (line 3059)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_143652) or more_types_in_union_143653):
                
                # Assigning a Name to a Attribute (line 3062):
                
                # Assigning a Name to a Attribute (line 3062):
                # Getting the type of 'None' (line 3062)
                None_143654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 41), 'None')
                # Getting the type of 'output' (line 3062)
                output_143655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 20), 'output')
                # Setting the type of the member '_fill_value' of a type (line 3062)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3062, 20), output_143655, '_fill_value', None_143654)

                if (may_be_143652 and more_types_in_union_143653):
                    # SSA join for if statement (line 3059)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_143649:
                # Runtime conditional SSA for else branch (line 3058)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143648) or more_types_in_union_143649):
            
            # Assigning a Name to a Attribute (line 3064):
            
            # Assigning a Name to a Attribute (line 3064):
            # Getting the type of 'fill_value' (line 3064)
            fill_value_143656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 36), 'fill_value')
            # Getting the type of 'output' (line 3064)
            output_143657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 16), 'output')
            # Setting the type of the member 'fill_value' of a type (line 3064)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3064, 16), output_143657, 'fill_value', fill_value_143656)

            if (may_be_143648 and more_types_in_union_143649):
                # SSA join for if statement (line 3058)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 3057)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'output' (line 3065)
        output_143658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3065, 15), 'output')
        # Assigning a type to the variable 'stypy_return_type' (line 3065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3065, 8), 'stypy_return_type', output_143658)
        
        # ################# End of 'view(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'view' in the type store
        # Getting the type of 'stypy_return_type' (line 2985)
        stypy_return_type_143659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143659)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'view'
        return stypy_return_type_143659

    
    # Assigning a Attribute to a Attribute (line 3066):

    @norecursion
    def astype(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'astype'
        module_type_store = module_type_store.open_function_context('astype', 3068, 4, False)
        # Assigning a type to the variable 'self' (line 3069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3069, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.astype.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.astype.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.astype.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.astype.__dict__.__setitem__('stypy_function_name', 'MaskedArray.astype')
        MaskedArray.astype.__dict__.__setitem__('stypy_param_names_list', ['newtype'])
        MaskedArray.astype.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.astype.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.astype.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.astype.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.astype.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.astype.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.astype', ['newtype'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'astype', localization, ['newtype'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'astype(...)' code ##################

        str_143660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3090, (-1)), 'str', '\n        Returns a copy of the MaskedArray cast to given newtype.\n\n        Returns\n        -------\n        output : MaskedArray\n            A copy of self cast to input newtype.\n            The returned record shape matches self.shape.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3.1],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print(x)\n        [[1.0 -- 3.1]\n         [-- 5.0 --]\n         [7.0 -- 9.0]]\n        >>> print(x.astype(int32))\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n\n        ')
        
        # Assigning a Call to a Name (line 3091):
        
        # Assigning a Call to a Name (line 3091):
        
        # Call to dtype(...): (line 3091)
        # Processing the call arguments (line 3091)
        # Getting the type of 'newtype' (line 3091)
        newtype_143663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 27), 'newtype', False)
        # Processing the call keyword arguments (line 3091)
        kwargs_143664 = {}
        # Getting the type of 'np' (line 3091)
        np_143661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 18), 'np', False)
        # Obtaining the member 'dtype' of a type (line 3091)
        dtype_143662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 18), np_143661, 'dtype')
        # Calling dtype(args, kwargs) (line 3091)
        dtype_call_result_143665 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 18), dtype_143662, *[newtype_143663], **kwargs_143664)
        
        # Assigning a type to the variable 'newtype' (line 3091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 8), 'newtype', dtype_call_result_143665)
        
        # Assigning a Call to a Name (line 3092):
        
        # Assigning a Call to a Name (line 3092):
        
        # Call to view(...): (line 3092)
        # Processing the call arguments (line 3092)
        
        # Call to type(...): (line 3092)
        # Processing the call arguments (line 3092)
        # Getting the type of 'self' (line 3092)
        self_143674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 54), 'self', False)
        # Processing the call keyword arguments (line 3092)
        kwargs_143675 = {}
        # Getting the type of 'type' (line 3092)
        type_143673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 49), 'type', False)
        # Calling type(args, kwargs) (line 3092)
        type_call_result_143676 = invoke(stypy.reporting.localization.Localization(__file__, 3092, 49), type_143673, *[self_143674], **kwargs_143675)
        
        # Processing the call keyword arguments (line 3092)
        kwargs_143677 = {}
        
        # Call to astype(...): (line 3092)
        # Processing the call arguments (line 3092)
        # Getting the type of 'newtype' (line 3092)
        newtype_143669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 35), 'newtype', False)
        # Processing the call keyword arguments (line 3092)
        kwargs_143670 = {}
        # Getting the type of 'self' (line 3092)
        self_143666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 17), 'self', False)
        # Obtaining the member '_data' of a type (line 3092)
        _data_143667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3092, 17), self_143666, '_data')
        # Obtaining the member 'astype' of a type (line 3092)
        astype_143668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3092, 17), _data_143667, 'astype')
        # Calling astype(args, kwargs) (line 3092)
        astype_call_result_143671 = invoke(stypy.reporting.localization.Localization(__file__, 3092, 17), astype_143668, *[newtype_143669], **kwargs_143670)
        
        # Obtaining the member 'view' of a type (line 3092)
        view_143672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3092, 17), astype_call_result_143671, 'view')
        # Calling view(args, kwargs) (line 3092)
        view_call_result_143678 = invoke(stypy.reporting.localization.Localization(__file__, 3092, 17), view_143672, *[type_call_result_143676], **kwargs_143677)
        
        # Assigning a type to the variable 'output' (line 3092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3092, 8), 'output', view_call_result_143678)
        
        # Call to _update_from(...): (line 3093)
        # Processing the call arguments (line 3093)
        # Getting the type of 'self' (line 3093)
        self_143681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 28), 'self', False)
        # Processing the call keyword arguments (line 3093)
        kwargs_143682 = {}
        # Getting the type of 'output' (line 3093)
        output_143679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 8), 'output', False)
        # Obtaining the member '_update_from' of a type (line 3093)
        _update_from_143680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3093, 8), output_143679, '_update_from')
        # Calling _update_from(args, kwargs) (line 3093)
        _update_from_call_result_143683 = invoke(stypy.reporting.localization.Localization(__file__, 3093, 8), _update_from_143680, *[self_143681], **kwargs_143682)
        
        
        # Assigning a Attribute to a Name (line 3094):
        
        # Assigning a Attribute to a Name (line 3094):
        # Getting the type of 'output' (line 3094)
        output_143684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 16), 'output')
        # Obtaining the member 'dtype' of a type (line 3094)
        dtype_143685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3094, 16), output_143684, 'dtype')
        # Obtaining the member 'names' of a type (line 3094)
        names_143686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3094, 16), dtype_143685, 'names')
        # Assigning a type to the variable 'names' (line 3094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3094, 8), 'names', names_143686)
        
        # Type idiom detected: calculating its left and rigth part (line 3095)
        # Getting the type of 'names' (line 3095)
        names_143687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 11), 'names')
        # Getting the type of 'None' (line 3095)
        None_143688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 20), 'None')
        
        (may_be_143689, more_types_in_union_143690) = may_be_none(names_143687, None_143688)

        if may_be_143689:

            if more_types_in_union_143690:
                # Runtime conditional SSA (line 3095)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 3096):
            
            # Assigning a Call to a Attribute (line 3096):
            
            # Call to astype(...): (line 3096)
            # Processing the call arguments (line 3096)
            # Getting the type of 'bool' (line 3096)
            bool_143694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 45), 'bool', False)
            # Processing the call keyword arguments (line 3096)
            kwargs_143695 = {}
            # Getting the type of 'self' (line 3096)
            self_143691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 27), 'self', False)
            # Obtaining the member '_mask' of a type (line 3096)
            _mask_143692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3096, 27), self_143691, '_mask')
            # Obtaining the member 'astype' of a type (line 3096)
            astype_143693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3096, 27), _mask_143692, 'astype')
            # Calling astype(args, kwargs) (line 3096)
            astype_call_result_143696 = invoke(stypy.reporting.localization.Localization(__file__, 3096, 27), astype_143693, *[bool_143694], **kwargs_143695)
            
            # Getting the type of 'output' (line 3096)
            output_143697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 12), 'output')
            # Setting the type of the member '_mask' of a type (line 3096)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3096, 12), output_143697, '_mask', astype_call_result_143696)

            if more_types_in_union_143690:
                # Runtime conditional SSA for else branch (line 3095)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_143689) or more_types_in_union_143690):
            
            
            # Getting the type of 'self' (line 3098)
            self_143698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 15), 'self')
            # Obtaining the member '_mask' of a type (line 3098)
            _mask_143699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3098, 15), self_143698, '_mask')
            # Getting the type of 'nomask' (line 3098)
            nomask_143700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 29), 'nomask')
            # Applying the binary operator 'is' (line 3098)
            result_is__143701 = python_operator(stypy.reporting.localization.Localization(__file__, 3098, 15), 'is', _mask_143699, nomask_143700)
            
            # Testing the type of an if condition (line 3098)
            if_condition_143702 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3098, 12), result_is__143701)
            # Assigning a type to the variable 'if_condition_143702' (line 3098)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3098, 12), 'if_condition_143702', if_condition_143702)
            # SSA begins for if statement (line 3098)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 3099):
            
            # Assigning a Name to a Attribute (line 3099):
            # Getting the type of 'nomask' (line 3099)
            nomask_143703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 31), 'nomask')
            # Getting the type of 'output' (line 3099)
            output_143704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 16), 'output')
            # Setting the type of the member '_mask' of a type (line 3099)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3099, 16), output_143704, '_mask', nomask_143703)
            # SSA branch for the else part of an if statement (line 3098)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 3101):
            
            # Assigning a Call to a Attribute (line 3101):
            
            # Call to astype(...): (line 3101)
            # Processing the call arguments (line 3101)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'names' (line 3101)
            names_143711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 69), 'names', False)
            comprehension_143712 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3101, 50), names_143711)
            # Assigning a type to the variable 'n' (line 3101)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3101, 50), 'n', comprehension_143712)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3101)
            tuple_143708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3101, 51), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3101)
            # Adding element type (line 3101)
            # Getting the type of 'n' (line 3101)
            n_143709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 51), 'n', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3101, 51), tuple_143708, n_143709)
            # Adding element type (line 3101)
            # Getting the type of 'bool' (line 3101)
            bool_143710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 54), 'bool', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3101, 51), tuple_143708, bool_143710)
            
            list_143713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3101, 50), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3101, 50), list_143713, tuple_143708)
            # Processing the call keyword arguments (line 3101)
            kwargs_143714 = {}
            # Getting the type of 'self' (line 3101)
            self_143705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 31), 'self', False)
            # Obtaining the member '_mask' of a type (line 3101)
            _mask_143706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3101, 31), self_143705, '_mask')
            # Obtaining the member 'astype' of a type (line 3101)
            astype_143707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3101, 31), _mask_143706, 'astype')
            # Calling astype(args, kwargs) (line 3101)
            astype_call_result_143715 = invoke(stypy.reporting.localization.Localization(__file__, 3101, 31), astype_143707, *[list_143713], **kwargs_143714)
            
            # Getting the type of 'output' (line 3101)
            output_143716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 16), 'output')
            # Setting the type of the member '_mask' of a type (line 3101)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3101, 16), output_143716, '_mask', astype_call_result_143715)
            # SSA join for if statement (line 3098)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_143689 and more_types_in_union_143690):
                # SSA join for if statement (line 3095)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 3103)
        self_143717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 11), 'self')
        # Obtaining the member '_fill_value' of a type (line 3103)
        _fill_value_143718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3103, 11), self_143717, '_fill_value')
        # Getting the type of 'None' (line 3103)
        None_143719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 35), 'None')
        # Applying the binary operator 'isnot' (line 3103)
        result_is_not_143720 = python_operator(stypy.reporting.localization.Localization(__file__, 3103, 11), 'isnot', _fill_value_143718, None_143719)
        
        # Testing the type of an if condition (line 3103)
        if_condition_143721 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3103, 8), result_is_not_143720)
        # Assigning a type to the variable 'if_condition_143721' (line 3103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3103, 8), 'if_condition_143721', if_condition_143721)
        # SSA begins for if statement (line 3103)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 3104):
        
        # Assigning a Call to a Attribute (line 3104):
        
        # Call to _check_fill_value(...): (line 3104)
        # Processing the call arguments (line 3104)
        # Getting the type of 'self' (line 3104)
        self_143723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 51), 'self', False)
        # Obtaining the member '_fill_value' of a type (line 3104)
        _fill_value_143724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3104, 51), self_143723, '_fill_value')
        # Getting the type of 'newtype' (line 3104)
        newtype_143725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 69), 'newtype', False)
        # Processing the call keyword arguments (line 3104)
        kwargs_143726 = {}
        # Getting the type of '_check_fill_value' (line 3104)
        _check_fill_value_143722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 33), '_check_fill_value', False)
        # Calling _check_fill_value(args, kwargs) (line 3104)
        _check_fill_value_call_result_143727 = invoke(stypy.reporting.localization.Localization(__file__, 3104, 33), _check_fill_value_143722, *[_fill_value_143724, newtype_143725], **kwargs_143726)
        
        # Getting the type of 'output' (line 3104)
        output_143728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3104, 12), 'output')
        # Setting the type of the member '_fill_value' of a type (line 3104)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3104, 12), output_143728, '_fill_value', _check_fill_value_call_result_143727)
        # SSA join for if statement (line 3103)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'output' (line 3105)
        output_143729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 15), 'output')
        # Assigning a type to the variable 'stypy_return_type' (line 3105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 8), 'stypy_return_type', output_143729)
        
        # ################# End of 'astype(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'astype' in the type store
        # Getting the type of 'stypy_return_type' (line 3068)
        stypy_return_type_143730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143730)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'astype'
        return stypy_return_type_143730


    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 3107, 4, False)
        # Assigning a type to the variable 'self' (line 3108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3108, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__getitem__')
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['indx'])
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__getitem__', ['indx'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['indx'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        str_143731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3113, (-1)), 'str', '\n        x.__getitem__(y) <==> x[y]\n\n        Return the item described by i, as a masked array.\n\n        ')
        
        # Assigning a Subscript to a Name (line 3114):
        
        # Assigning a Subscript to a Name (line 3114):
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 3114)
        indx_143732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 25), 'indx')
        # Getting the type of 'self' (line 3114)
        self_143733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 15), 'self')
        # Obtaining the member 'data' of a type (line 3114)
        data_143734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3114, 15), self_143733, 'data')
        # Obtaining the member '__getitem__' of a type (line 3114)
        getitem___143735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3114, 15), data_143734, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3114)
        subscript_call_result_143736 = invoke(stypy.reporting.localization.Localization(__file__, 3114, 15), getitem___143735, indx_143732)
        
        # Assigning a type to the variable 'dout' (line 3114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3114, 8), 'dout', subscript_call_result_143736)
        
        # Assigning a Attribute to a Name (line 3119):
        
        # Assigning a Attribute to a Name (line 3119):
        # Getting the type of 'self' (line 3119)
        self_143737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 16), 'self')
        # Obtaining the member '_mask' of a type (line 3119)
        _mask_143738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3119, 16), self_143737, '_mask')
        # Assigning a type to the variable '_mask' (line 3119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 8), '_mask', _mask_143738)
        
        
        
        # Call to getattr(...): (line 3121)
        # Processing the call arguments (line 3121)
        # Getting the type of 'dout' (line 3121)
        dout_143740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 23), 'dout', False)
        str_143741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3121, 29), 'str', 'ndim')
        # Getting the type of 'False' (line 3121)
        False_143742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 37), 'False', False)
        # Processing the call keyword arguments (line 3121)
        kwargs_143743 = {}
        # Getting the type of 'getattr' (line 3121)
        getattr_143739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3121)
        getattr_call_result_143744 = invoke(stypy.reporting.localization.Localization(__file__, 3121, 15), getattr_143739, *[dout_143740, str_143741, False_143742], **kwargs_143743)
        
        # Applying the 'not' unary operator (line 3121)
        result_not__143745 = python_operator(stypy.reporting.localization.Localization(__file__, 3121, 11), 'not', getattr_call_result_143744)
        
        # Testing the type of an if condition (line 3121)
        if_condition_143746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3121, 8), result_not__143745)
        # Assigning a type to the variable 'if_condition_143746' (line 3121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3121, 8), 'if_condition_143746', if_condition_143746)
        # SSA begins for if statement (line 3121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to isinstance(...): (line 3123)
        # Processing the call arguments (line 3123)
        # Getting the type of 'dout' (line 3123)
        dout_143748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 26), 'dout', False)
        # Getting the type of 'np' (line 3123)
        np_143749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 32), 'np', False)
        # Obtaining the member 'void' of a type (line 3123)
        void_143750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3123, 32), np_143749, 'void')
        # Processing the call keyword arguments (line 3123)
        kwargs_143751 = {}
        # Getting the type of 'isinstance' (line 3123)
        isinstance_143747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 3123)
        isinstance_call_result_143752 = invoke(stypy.reporting.localization.Localization(__file__, 3123, 15), isinstance_143747, *[dout_143748, void_143750], **kwargs_143751)
        
        # Testing the type of an if condition (line 3123)
        if_condition_143753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3123, 12), isinstance_call_result_143752)
        # Assigning a type to the variable 'if_condition_143753' (line 3123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 12), 'if_condition_143753', if_condition_143753)
        # SSA begins for if statement (line 3123)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 3124):
        
        # Assigning a Subscript to a Name (line 3124):
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 3124)
        indx_143754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 29), 'indx')
        # Getting the type of '_mask' (line 3124)
        _mask_143755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 23), '_mask')
        # Obtaining the member '__getitem__' of a type (line 3124)
        getitem___143756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3124, 23), _mask_143755, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3124)
        subscript_call_result_143757 = invoke(stypy.reporting.localization.Localization(__file__, 3124, 23), getitem___143756, indx_143754)
        
        # Assigning a type to the variable 'mask' (line 3124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3124, 16), 'mask', subscript_call_result_143757)
        
        # Assigning a Call to a Name (line 3128):
        
        # Assigning a Call to a Name (line 3128):
        
        # Call to mvoid(...): (line 3128)
        # Processing the call arguments (line 3128)
        # Getting the type of 'dout' (line 3128)
        dout_143759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 29), 'dout', False)
        # Processing the call keyword arguments (line 3128)
        # Getting the type of 'mask' (line 3128)
        mask_143760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 40), 'mask', False)
        keyword_143761 = mask_143760
        # Getting the type of 'self' (line 3128)
        self_143762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 55), 'self', False)
        # Obtaining the member '_hardmask' of a type (line 3128)
        _hardmask_143763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3128, 55), self_143762, '_hardmask')
        keyword_143764 = _hardmask_143763
        kwargs_143765 = {'hardmask': keyword_143764, 'mask': keyword_143761}
        # Getting the type of 'mvoid' (line 3128)
        mvoid_143758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 23), 'mvoid', False)
        # Calling mvoid(args, kwargs) (line 3128)
        mvoid_call_result_143766 = invoke(stypy.reporting.localization.Localization(__file__, 3128, 23), mvoid_143758, *[dout_143759], **kwargs_143765)
        
        # Assigning a type to the variable 'dout' (line 3128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3128, 16), 'dout', mvoid_call_result_143766)
        # SSA branch for the else part of an if statement (line 3123)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of '_mask' (line 3130)
        _mask_143767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 17), '_mask')
        # Getting the type of 'nomask' (line 3130)
        nomask_143768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 30), 'nomask')
        # Applying the binary operator 'isnot' (line 3130)
        result_is_not_143769 = python_operator(stypy.reporting.localization.Localization(__file__, 3130, 17), 'isnot', _mask_143767, nomask_143768)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 3130)
        indx_143770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 47), 'indx')
        # Getting the type of '_mask' (line 3130)
        _mask_143771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 41), '_mask')
        # Obtaining the member '__getitem__' of a type (line 3130)
        getitem___143772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3130, 41), _mask_143771, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3130)
        subscript_call_result_143773 = invoke(stypy.reporting.localization.Localization(__file__, 3130, 41), getitem___143772, indx_143770)
        
        # Applying the binary operator 'and' (line 3130)
        result_and_keyword_143774 = python_operator(stypy.reporting.localization.Localization(__file__, 3130, 17), 'and', result_is_not_143769, subscript_call_result_143773)
        
        # Testing the type of an if condition (line 3130)
        if_condition_143775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3130, 17), result_and_keyword_143774)
        # Assigning a type to the variable 'if_condition_143775' (line 3130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3130, 17), 'if_condition_143775', if_condition_143775)
        # SSA begins for if statement (line 3130)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 3131)
        masked_143776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 23), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 3131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3131, 16), 'stypy_return_type', masked_143776)
        # SSA join for if statement (line 3130)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3123)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3121)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 3132)
        self_143777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 13), 'self')
        # Obtaining the member 'dtype' of a type (line 3132)
        dtype_143778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 13), self_143777, 'dtype')
        # Obtaining the member 'type' of a type (line 3132)
        type_143779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 13), dtype_143778, 'type')
        # Getting the type of 'np' (line 3132)
        np_143780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 32), 'np')
        # Obtaining the member 'object_' of a type (line 3132)
        object__143781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 32), np_143780, 'object_')
        # Applying the binary operator 'is' (line 3132)
        result_is__143782 = python_operator(stypy.reporting.localization.Localization(__file__, 3132, 13), 'is', type_143779, object__143781)
        
        
        # Getting the type of 'self' (line 3132)
        self_143783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 47), 'self')
        # Obtaining the member 'dtype' of a type (line 3132)
        dtype_143784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 47), self_143783, 'dtype')
        # Getting the type of 'dout' (line 3132)
        dout_143785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 65), 'dout')
        # Obtaining the member 'dtype' of a type (line 3132)
        dtype_143786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 65), dout_143785, 'dtype')
        # Applying the binary operator 'isnot' (line 3132)
        result_is_not_143787 = python_operator(stypy.reporting.localization.Localization(__file__, 3132, 47), 'isnot', dtype_143784, dtype_143786)
        
        # Applying the binary operator 'and' (line 3132)
        result_and_keyword_143788 = python_operator(stypy.reporting.localization.Localization(__file__, 3132, 13), 'and', result_is__143782, result_is_not_143787)
        
        # Testing the type of an if condition (line 3132)
        if_condition_143789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3132, 13), result_and_keyword_143788)
        # Assigning a type to the variable 'if_condition_143789' (line 3132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3132, 13), 'if_condition_143789', if_condition_143789)
        # SSA begins for if statement (line 3132)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of '_mask' (line 3135)
        _mask_143790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 15), '_mask')
        # Getting the type of 'nomask' (line 3135)
        nomask_143791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 28), 'nomask')
        # Applying the binary operator 'isnot' (line 3135)
        result_is_not_143792 = python_operator(stypy.reporting.localization.Localization(__file__, 3135, 15), 'isnot', _mask_143790, nomask_143791)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 3135)
        indx_143793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 45), 'indx')
        # Getting the type of '_mask' (line 3135)
        _mask_143794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 39), '_mask')
        # Obtaining the member '__getitem__' of a type (line 3135)
        getitem___143795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3135, 39), _mask_143794, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3135)
        subscript_call_result_143796 = invoke(stypy.reporting.localization.Localization(__file__, 3135, 39), getitem___143795, indx_143793)
        
        # Applying the binary operator 'and' (line 3135)
        result_and_keyword_143797 = python_operator(stypy.reporting.localization.Localization(__file__, 3135, 15), 'and', result_is_not_143792, subscript_call_result_143796)
        
        # Testing the type of an if condition (line 3135)
        if_condition_143798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3135, 12), result_and_keyword_143797)
        # Assigning a type to the variable 'if_condition_143798' (line 3135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3135, 12), 'if_condition_143798', if_condition_143798)
        # SSA begins for if statement (line 3135)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to MaskedArray(...): (line 3136)
        # Processing the call arguments (line 3136)
        # Getting the type of 'dout' (line 3136)
        dout_143800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 35), 'dout', False)
        # Processing the call keyword arguments (line 3136)
        # Getting the type of 'True' (line 3136)
        True_143801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 46), 'True', False)
        keyword_143802 = True_143801
        kwargs_143803 = {'mask': keyword_143802}
        # Getting the type of 'MaskedArray' (line 3136)
        MaskedArray_143799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 23), 'MaskedArray', False)
        # Calling MaskedArray(args, kwargs) (line 3136)
        MaskedArray_call_result_143804 = invoke(stypy.reporting.localization.Localization(__file__, 3136, 23), MaskedArray_143799, *[dout_143800], **kwargs_143803)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3136, 16), 'stypy_return_type', MaskedArray_call_result_143804)
        # SSA join for if statement (line 3135)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3132)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 3139):
        
        # Assigning a Call to a Name (line 3139):
        
        # Call to view(...): (line 3139)
        # Processing the call arguments (line 3139)
        
        # Call to type(...): (line 3139)
        # Processing the call arguments (line 3139)
        # Getting the type of 'self' (line 3139)
        self_143808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 34), 'self', False)
        # Processing the call keyword arguments (line 3139)
        kwargs_143809 = {}
        # Getting the type of 'type' (line 3139)
        type_143807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 29), 'type', False)
        # Calling type(args, kwargs) (line 3139)
        type_call_result_143810 = invoke(stypy.reporting.localization.Localization(__file__, 3139, 29), type_143807, *[self_143808], **kwargs_143809)
        
        # Processing the call keyword arguments (line 3139)
        kwargs_143811 = {}
        # Getting the type of 'dout' (line 3139)
        dout_143805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 19), 'dout', False)
        # Obtaining the member 'view' of a type (line 3139)
        view_143806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3139, 19), dout_143805, 'view')
        # Calling view(args, kwargs) (line 3139)
        view_call_result_143812 = invoke(stypy.reporting.localization.Localization(__file__, 3139, 19), view_143806, *[type_call_result_143810], **kwargs_143811)
        
        # Assigning a type to the variable 'dout' (line 3139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3139, 12), 'dout', view_call_result_143812)
        
        # Call to _update_from(...): (line 3141)
        # Processing the call arguments (line 3141)
        # Getting the type of 'self' (line 3141)
        self_143815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 30), 'self', False)
        # Processing the call keyword arguments (line 3141)
        kwargs_143816 = {}
        # Getting the type of 'dout' (line 3141)
        dout_143813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 12), 'dout', False)
        # Obtaining the member '_update_from' of a type (line 3141)
        _update_from_143814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 12), dout_143813, '_update_from')
        # Calling _update_from(args, kwargs) (line 3141)
        _update_from_call_result_143817 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 12), _update_from_143814, *[self_143815], **kwargs_143816)
        
        
        # Type idiom detected: calculating its left and rigth part (line 3143)
        # Getting the type of 'basestring' (line 3143)
        basestring_143818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3143, 32), 'basestring')
        # Getting the type of 'indx' (line 3143)
        indx_143819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3143, 26), 'indx')
        
        (may_be_143820, more_types_in_union_143821) = may_be_subtype(basestring_143818, indx_143819)

        if may_be_143820:

            if more_types_in_union_143821:
                # Runtime conditional SSA (line 3143)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'indx' (line 3143)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3143, 12), 'indx', remove_not_subtype_from_union(indx_143819, basestring))
            
            
            # Getting the type of 'self' (line 3144)
            self_143822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 19), 'self')
            # Obtaining the member '_fill_value' of a type (line 3144)
            _fill_value_143823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3144, 19), self_143822, '_fill_value')
            # Getting the type of 'None' (line 3144)
            None_143824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 43), 'None')
            # Applying the binary operator 'isnot' (line 3144)
            result_is_not_143825 = python_operator(stypy.reporting.localization.Localization(__file__, 3144, 19), 'isnot', _fill_value_143823, None_143824)
            
            # Testing the type of an if condition (line 3144)
            if_condition_143826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3144, 16), result_is_not_143825)
            # Assigning a type to the variable 'if_condition_143826' (line 3144)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3144, 16), 'if_condition_143826', if_condition_143826)
            # SSA begins for if statement (line 3144)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Attribute (line 3145):
            
            # Assigning a Subscript to a Attribute (line 3145):
            
            # Obtaining the type of the subscript
            # Getting the type of 'indx' (line 3145)
            indx_143827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 56), 'indx')
            # Getting the type of 'self' (line 3145)
            self_143828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 39), 'self')
            # Obtaining the member '_fill_value' of a type (line 3145)
            _fill_value_143829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3145, 39), self_143828, '_fill_value')
            # Obtaining the member '__getitem__' of a type (line 3145)
            getitem___143830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3145, 39), _fill_value_143829, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3145)
            subscript_call_result_143831 = invoke(stypy.reporting.localization.Localization(__file__, 3145, 39), getitem___143830, indx_143827)
            
            # Getting the type of 'dout' (line 3145)
            dout_143832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 20), 'dout')
            # Setting the type of the member '_fill_value' of a type (line 3145)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3145, 20), dout_143832, '_fill_value', subscript_call_result_143831)
            
            
            # Getting the type of 'dout' (line 3155)
            dout_143833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 23), 'dout')
            # Obtaining the member '_fill_value' of a type (line 3155)
            _fill_value_143834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 23), dout_143833, '_fill_value')
            # Obtaining the member 'ndim' of a type (line 3155)
            ndim_143835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 23), _fill_value_143834, 'ndim')
            int_143836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3155, 47), 'int')
            # Applying the binary operator '>' (line 3155)
            result_gt_143837 = python_operator(stypy.reporting.localization.Localization(__file__, 3155, 23), '>', ndim_143835, int_143836)
            
            # Testing the type of an if condition (line 3155)
            if_condition_143838 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3155, 20), result_gt_143837)
            # Assigning a type to the variable 'if_condition_143838' (line 3155)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3155, 20), 'if_condition_143838', if_condition_143838)
            # SSA begins for if statement (line 3155)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            
            # Call to all(...): (line 3156)
            # Processing the call keyword arguments (line 3156)
            kwargs_143849 = {}
            
            # Getting the type of 'dout' (line 3156)
            dout_143839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 32), 'dout', False)
            # Obtaining the member '_fill_value' of a type (line 3156)
            _fill_value_143840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3156, 32), dout_143839, '_fill_value')
            
            # Obtaining the type of the subscript
            int_143841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3157, 54), 'int')
            # Getting the type of 'dout' (line 3157)
            dout_143842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3157, 32), 'dout', False)
            # Obtaining the member '_fill_value' of a type (line 3157)
            _fill_value_143843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3157, 32), dout_143842, '_fill_value')
            # Obtaining the member 'flat' of a type (line 3157)
            flat_143844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3157, 32), _fill_value_143843, 'flat')
            # Obtaining the member '__getitem__' of a type (line 3157)
            getitem___143845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3157, 32), flat_143844, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3157)
            subscript_call_result_143846 = invoke(stypy.reporting.localization.Localization(__file__, 3157, 32), getitem___143845, int_143841)
            
            # Applying the binary operator '==' (line 3156)
            result_eq_143847 = python_operator(stypy.reporting.localization.Localization(__file__, 3156, 32), '==', _fill_value_143840, subscript_call_result_143846)
            
            # Obtaining the member 'all' of a type (line 3156)
            all_143848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3156, 32), result_eq_143847, 'all')
            # Calling all(args, kwargs) (line 3156)
            all_call_result_143850 = invoke(stypy.reporting.localization.Localization(__file__, 3156, 32), all_143848, *[], **kwargs_143849)
            
            # Applying the 'not' unary operator (line 3156)
            result_not__143851 = python_operator(stypy.reporting.localization.Localization(__file__, 3156, 27), 'not', all_call_result_143850)
            
            # Testing the type of an if condition (line 3156)
            if_condition_143852 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3156, 24), result_not__143851)
            # Assigning a type to the variable 'if_condition_143852' (line 3156)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3156, 24), 'if_condition_143852', if_condition_143852)
            # SSA begins for if statement (line 3156)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to warn(...): (line 3158)
            # Processing the call arguments (line 3158)
            
            # Call to format(...): (line 3159)
            # Processing the call keyword arguments (line 3159)
            # Getting the type of 'indx' (line 3163)
            indx_143857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 61), 'indx', False)
            keyword_143858 = indx_143857
            
            # Obtaining the type of the subscript
            int_143859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3164, 56), 'int')
            # Getting the type of 'dout' (line 3164)
            dout_143860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 39), 'dout', False)
            # Obtaining the member '_fill_value' of a type (line 3164)
            _fill_value_143861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3164, 39), dout_143860, '_fill_value')
            # Obtaining the member '__getitem__' of a type (line 3164)
            getitem___143862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3164, 39), _fill_value_143861, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3164)
            subscript_call_result_143863 = invoke(stypy.reporting.localization.Localization(__file__, 3164, 39), getitem___143862, int_143859)
            
            keyword_143864 = subscript_call_result_143863
            kwargs_143865 = {'indx': keyword_143858, 'fv': keyword_143864}
            str_143855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3159, 32), 'str', 'Upon accessing multidimensional field {indx:s}, need to keep dimensionality of fill_value at 0. Discarding heterogeneous fill_value and setting all to {fv!s}.')
            # Obtaining the member 'format' of a type (line 3159)
            format_143856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3159, 32), str_143855, 'format')
            # Calling format(args, kwargs) (line 3159)
            format_call_result_143866 = invoke(stypy.reporting.localization.Localization(__file__, 3159, 32), format_143856, *[], **kwargs_143865)
            
            # Processing the call keyword arguments (line 3158)
            kwargs_143867 = {}
            # Getting the type of 'warnings' (line 3158)
            warnings_143853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 28), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 3158)
            warn_143854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3158, 28), warnings_143853, 'warn')
            # Calling warn(args, kwargs) (line 3158)
            warn_call_result_143868 = invoke(stypy.reporting.localization.Localization(__file__, 3158, 28), warn_143854, *[format_call_result_143866], **kwargs_143867)
            
            # SSA join for if statement (line 3156)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Subscript to a Attribute (line 3165):
            
            # Assigning a Subscript to a Attribute (line 3165):
            
            # Obtaining the type of the subscript
            int_143869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3165, 65), 'int')
            # Getting the type of 'dout' (line 3165)
            dout_143870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 43), 'dout')
            # Obtaining the member '_fill_value' of a type (line 3165)
            _fill_value_143871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 43), dout_143870, '_fill_value')
            # Obtaining the member 'flat' of a type (line 3165)
            flat_143872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 43), _fill_value_143871, 'flat')
            # Obtaining the member '__getitem__' of a type (line 3165)
            getitem___143873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 43), flat_143872, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3165)
            subscript_call_result_143874 = invoke(stypy.reporting.localization.Localization(__file__, 3165, 43), getitem___143873, int_143869)
            
            # Getting the type of 'dout' (line 3165)
            dout_143875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 24), 'dout')
            # Setting the type of the member '_fill_value' of a type (line 3165)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 24), dout_143875, '_fill_value', subscript_call_result_143874)
            # SSA join for if statement (line 3155)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3144)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Attribute (line 3166):
            
            # Assigning a Name to a Attribute (line 3166):
            # Getting the type of 'True' (line 3166)
            True_143876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3166, 32), 'True')
            # Getting the type of 'dout' (line 3166)
            dout_143877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3166, 16), 'dout')
            # Setting the type of the member '_isfield' of a type (line 3166)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3166, 16), dout_143877, '_isfield', True_143876)

            if more_types_in_union_143821:
                # SSA join for if statement (line 3143)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of '_mask' (line 3168)
        _mask_143878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3168, 15), '_mask')
        # Getting the type of 'nomask' (line 3168)
        nomask_143879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3168, 28), 'nomask')
        # Applying the binary operator 'isnot' (line 3168)
        result_is_not_143880 = python_operator(stypy.reporting.localization.Localization(__file__, 3168, 15), 'isnot', _mask_143878, nomask_143879)
        
        # Testing the type of an if condition (line 3168)
        if_condition_143881 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3168, 12), result_is_not_143880)
        # Assigning a type to the variable 'if_condition_143881' (line 3168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3168, 12), 'if_condition_143881', if_condition_143881)
        # SSA begins for if statement (line 3168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 3169):
        
        # Assigning a Subscript to a Attribute (line 3169):
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 3169)
        indx_143882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 35), 'indx')
        # Getting the type of '_mask' (line 3169)
        _mask_143883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 29), '_mask')
        # Obtaining the member '__getitem__' of a type (line 3169)
        getitem___143884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3169, 29), _mask_143883, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3169)
        subscript_call_result_143885 = invoke(stypy.reporting.localization.Localization(__file__, 3169, 29), getitem___143884, indx_143882)
        
        # Getting the type of 'dout' (line 3169)
        dout_143886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 16), 'dout')
        # Setting the type of the member '_mask' of a type (line 3169)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3169, 16), dout_143886, '_mask', subscript_call_result_143885)
        
        # Assigning a Attribute to a Attribute (line 3171):
        
        # Assigning a Attribute to a Attribute (line 3171):
        # Getting the type of 'dout' (line 3171)
        dout_143887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 35), 'dout')
        # Obtaining the member 'shape' of a type (line 3171)
        shape_143888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 35), dout_143887, 'shape')
        # Getting the type of 'dout' (line 3171)
        dout_143889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 16), 'dout')
        # Obtaining the member '_mask' of a type (line 3171)
        _mask_143890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 16), dout_143889, '_mask')
        # Setting the type of the member 'shape' of a type (line 3171)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3171, 16), _mask_143890, 'shape', shape_143888)
        
        # Assigning a Name to a Attribute (line 3172):
        
        # Assigning a Name to a Attribute (line 3172):
        # Getting the type of 'True' (line 3172)
        True_143891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3172, 35), 'True')
        # Getting the type of 'dout' (line 3172)
        dout_143892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3172, 16), 'dout')
        # Setting the type of the member '_sharedmask' of a type (line 3172)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3172, 16), dout_143892, '_sharedmask', True_143891)
        # SSA join for if statement (line 3168)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3132)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3121)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dout' (line 3174)
        dout_143893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3174, 15), 'dout')
        # Assigning a type to the variable 'stypy_return_type' (line 3174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3174, 8), 'stypy_return_type', dout_143893)
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 3107)
        stypy_return_type_143894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_143894)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_143894


    @norecursion
    def __setitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setitem__'
        module_type_store = module_type_store.open_function_context('__setitem__', 3176, 4, False)
        # Assigning a type to the variable 'self' (line 3177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3177, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__setitem__')
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_param_names_list', ['indx', 'value'])
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__setitem__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__setitem__', ['indx', 'value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setitem__', localization, ['indx', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setitem__(...)' code ##################

        str_143895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3183, (-1)), 'str', '\n        x.__setitem__(i, y) <==> x[i]=y\n\n        Set item described by index. If value is masked, masks those\n        locations.\n\n        ')
        
        
        # Getting the type of 'self' (line 3184)
        self_143896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 11), 'self')
        # Getting the type of 'masked' (line 3184)
        masked_143897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 19), 'masked')
        # Applying the binary operator 'is' (line 3184)
        result_is__143898 = python_operator(stypy.reporting.localization.Localization(__file__, 3184, 11), 'is', self_143896, masked_143897)
        
        # Testing the type of an if condition (line 3184)
        if_condition_143899 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3184, 8), result_is__143898)
        # Assigning a type to the variable 'if_condition_143899' (line 3184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'if_condition_143899', if_condition_143899)
        # SSA begins for if statement (line 3184)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to MaskError(...): (line 3185)
        # Processing the call arguments (line 3185)
        str_143901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3185, 28), 'str', 'Cannot alter the masked element.')
        # Processing the call keyword arguments (line 3185)
        kwargs_143902 = {}
        # Getting the type of 'MaskError' (line 3185)
        MaskError_143900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3185, 18), 'MaskError', False)
        # Calling MaskError(args, kwargs) (line 3185)
        MaskError_call_result_143903 = invoke(stypy.reporting.localization.Localization(__file__, 3185, 18), MaskError_143900, *[str_143901], **kwargs_143902)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3185, 12), MaskError_call_result_143903, 'raise parameter', BaseException)
        # SSA join for if statement (line 3184)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 3186):
        
        # Assigning a Attribute to a Name (line 3186):
        # Getting the type of 'self' (line 3186)
        self_143904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3186, 16), 'self')
        # Obtaining the member '_data' of a type (line 3186)
        _data_143905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3186, 16), self_143904, '_data')
        # Assigning a type to the variable '_data' (line 3186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3186, 8), '_data', _data_143905)
        
        # Assigning a Attribute to a Name (line 3187):
        
        # Assigning a Attribute to a Name (line 3187):
        # Getting the type of 'self' (line 3187)
        self_143906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3187, 16), 'self')
        # Obtaining the member '_mask' of a type (line 3187)
        _mask_143907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3187, 16), self_143906, '_mask')
        # Assigning a type to the variable '_mask' (line 3187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3187, 8), '_mask', _mask_143907)
        
        # Type idiom detected: calculating its left and rigth part (line 3188)
        # Getting the type of 'basestring' (line 3188)
        basestring_143908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3188, 28), 'basestring')
        # Getting the type of 'indx' (line 3188)
        indx_143909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3188, 22), 'indx')
        
        (may_be_143910, more_types_in_union_143911) = may_be_subtype(basestring_143908, indx_143909)

        if may_be_143910:

            if more_types_in_union_143911:
                # Runtime conditional SSA (line 3188)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'indx' (line 3188)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3188, 8), 'indx', remove_not_subtype_from_union(indx_143909, basestring))
            
            # Assigning a Name to a Subscript (line 3189):
            
            # Assigning a Name to a Subscript (line 3189):
            # Getting the type of 'value' (line 3189)
            value_143912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 26), 'value')
            # Getting the type of '_data' (line 3189)
            _data_143913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 12), '_data')
            # Getting the type of 'indx' (line 3189)
            indx_143914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 18), 'indx')
            # Storing an element on a container (line 3189)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3189, 12), _data_143913, (indx_143914, value_143912))
            
            
            # Getting the type of '_mask' (line 3190)
            _mask_143915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 15), '_mask')
            # Getting the type of 'nomask' (line 3190)
            nomask_143916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 24), 'nomask')
            # Applying the binary operator 'is' (line 3190)
            result_is__143917 = python_operator(stypy.reporting.localization.Localization(__file__, 3190, 15), 'is', _mask_143915, nomask_143916)
            
            # Testing the type of an if condition (line 3190)
            if_condition_143918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3190, 12), result_is__143917)
            # Assigning a type to the variable 'if_condition_143918' (line 3190)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3190, 12), 'if_condition_143918', if_condition_143918)
            # SSA begins for if statement (line 3190)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Multiple assignment of 2 elements.
            
            # Assigning a Call to a Name (line 3191):
            
            # Call to make_mask_none(...): (line 3191)
            # Processing the call arguments (line 3191)
            # Getting the type of 'self' (line 3191)
            self_143920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 52), 'self', False)
            # Obtaining the member 'shape' of a type (line 3191)
            shape_143921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3191, 52), self_143920, 'shape')
            # Getting the type of 'self' (line 3191)
            self_143922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 64), 'self', False)
            # Obtaining the member 'dtype' of a type (line 3191)
            dtype_143923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3191, 64), self_143922, 'dtype')
            # Processing the call keyword arguments (line 3191)
            kwargs_143924 = {}
            # Getting the type of 'make_mask_none' (line 3191)
            make_mask_none_143919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 37), 'make_mask_none', False)
            # Calling make_mask_none(args, kwargs) (line 3191)
            make_mask_none_call_result_143925 = invoke(stypy.reporting.localization.Localization(__file__, 3191, 37), make_mask_none_143919, *[shape_143921, dtype_143923], **kwargs_143924)
            
            # Assigning a type to the variable '_mask' (line 3191)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3191, 29), '_mask', make_mask_none_call_result_143925)
            
            # Assigning a Name to a Attribute (line 3191):
            # Getting the type of '_mask' (line 3191)
            _mask_143926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 29), '_mask')
            # Getting the type of 'self' (line 3191)
            self_143927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3191, 16), 'self')
            # Setting the type of the member '_mask' of a type (line 3191)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3191, 16), self_143927, '_mask', _mask_143926)
            # SSA join for if statement (line 3190)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Subscript (line 3192):
            
            # Assigning a Call to a Subscript (line 3192):
            
            # Call to getmask(...): (line 3192)
            # Processing the call arguments (line 3192)
            # Getting the type of 'value' (line 3192)
            value_143929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 34), 'value', False)
            # Processing the call keyword arguments (line 3192)
            kwargs_143930 = {}
            # Getting the type of 'getmask' (line 3192)
            getmask_143928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 26), 'getmask', False)
            # Calling getmask(args, kwargs) (line 3192)
            getmask_call_result_143931 = invoke(stypy.reporting.localization.Localization(__file__, 3192, 26), getmask_143928, *[value_143929], **kwargs_143930)
            
            # Getting the type of '_mask' (line 3192)
            _mask_143932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 12), '_mask')
            # Getting the type of 'indx' (line 3192)
            indx_143933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 18), 'indx')
            # Storing an element on a container (line 3192)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3192, 12), _mask_143932, (indx_143933, getmask_call_result_143931))
            # Assigning a type to the variable 'stypy_return_type' (line 3193)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3193, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_143911:
                # SSA join for if statement (line 3188)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 3195):
        
        # Assigning a Attribute to a Name (line 3195):
        # Getting the type of '_data' (line 3195)
        _data_143934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3195, 17), '_data')
        # Obtaining the member 'dtype' of a type (line 3195)
        dtype_143935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3195, 17), _data_143934, 'dtype')
        # Assigning a type to the variable '_dtype' (line 3195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3195, 8), '_dtype', dtype_143935)
        
        # Assigning a Call to a Name (line 3196):
        
        # Assigning a Call to a Name (line 3196):
        
        # Call to len(...): (line 3196)
        # Processing the call arguments (line 3196)
        
        # Evaluating a boolean operation
        # Getting the type of '_dtype' (line 3196)
        _dtype_143937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3196, 23), '_dtype', False)
        # Obtaining the member 'names' of a type (line 3196)
        names_143938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3196, 23), _dtype_143937, 'names')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3196)
        tuple_143939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3196, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3196)
        
        # Applying the binary operator 'or' (line 3196)
        result_or_keyword_143940 = python_operator(stypy.reporting.localization.Localization(__file__, 3196, 23), 'or', names_143938, tuple_143939)
        
        # Processing the call keyword arguments (line 3196)
        kwargs_143941 = {}
        # Getting the type of 'len' (line 3196)
        len_143936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3196, 19), 'len', False)
        # Calling len(args, kwargs) (line 3196)
        len_call_result_143942 = invoke(stypy.reporting.localization.Localization(__file__, 3196, 19), len_143936, *[result_or_keyword_143940], **kwargs_143941)
        
        # Assigning a type to the variable 'nbfields' (line 3196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3196, 8), 'nbfields', len_call_result_143942)
        
        
        # Getting the type of 'value' (line 3198)
        value_143943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 11), 'value')
        # Getting the type of 'masked' (line 3198)
        masked_143944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 20), 'masked')
        # Applying the binary operator 'is' (line 3198)
        result_is__143945 = python_operator(stypy.reporting.localization.Localization(__file__, 3198, 11), 'is', value_143943, masked_143944)
        
        # Testing the type of an if condition (line 3198)
        if_condition_143946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3198, 8), result_is__143945)
        # Assigning a type to the variable 'if_condition_143946' (line 3198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3198, 8), 'if_condition_143946', if_condition_143946)
        # SSA begins for if statement (line 3198)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of '_mask' (line 3200)
        _mask_143947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 15), '_mask')
        # Getting the type of 'nomask' (line 3200)
        nomask_143948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 24), 'nomask')
        # Applying the binary operator 'is' (line 3200)
        result_is__143949 = python_operator(stypy.reporting.localization.Localization(__file__, 3200, 15), 'is', _mask_143947, nomask_143948)
        
        # Testing the type of an if condition (line 3200)
        if_condition_143950 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3200, 12), result_is__143949)
        # Assigning a type to the variable 'if_condition_143950' (line 3200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3200, 12), 'if_condition_143950', if_condition_143950)
        # SSA begins for if statement (line 3200)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 3201):
        
        # Call to make_mask_none(...): (line 3201)
        # Processing the call arguments (line 3201)
        # Getting the type of 'self' (line 3201)
        self_143952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 52), 'self', False)
        # Obtaining the member 'shape' of a type (line 3201)
        shape_143953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3201, 52), self_143952, 'shape')
        # Getting the type of '_dtype' (line 3201)
        _dtype_143954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 64), '_dtype', False)
        # Processing the call keyword arguments (line 3201)
        kwargs_143955 = {}
        # Getting the type of 'make_mask_none' (line 3201)
        make_mask_none_143951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 37), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 3201)
        make_mask_none_call_result_143956 = invoke(stypy.reporting.localization.Localization(__file__, 3201, 37), make_mask_none_143951, *[shape_143953, _dtype_143954], **kwargs_143955)
        
        # Getting the type of 'self' (line 3201)
        self_143957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 24), 'self')
        # Setting the type of the member '_mask' of a type (line 3201)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3201, 24), self_143957, '_mask', make_mask_none_call_result_143956)
        
        # Assigning a Attribute to a Name (line 3201):
        # Getting the type of 'self' (line 3201)
        self_143958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 24), 'self')
        # Obtaining the member '_mask' of a type (line 3201)
        _mask_143959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3201, 24), self_143958, '_mask')
        # Assigning a type to the variable '_mask' (line 3201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3201, 16), '_mask', _mask_143959)
        # SSA join for if statement (line 3200)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'nbfields' (line 3203)
        nbfields_143960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3203, 15), 'nbfields')
        # Testing the type of an if condition (line 3203)
        if_condition_143961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3203, 12), nbfields_143960)
        # Assigning a type to the variable 'if_condition_143961' (line 3203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3203, 12), 'if_condition_143961', if_condition_143961)
        # SSA begins for if statement (line 3203)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 3204):
        
        # Assigning a Call to a Subscript (line 3204):
        
        # Call to tuple(...): (line 3204)
        # Processing the call arguments (line 3204)
        
        # Obtaining an instance of the builtin type 'list' (line 3204)
        list_143963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3204, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3204)
        # Adding element type (line 3204)
        # Getting the type of 'True' (line 3204)
        True_143964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 37), 'True', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3204, 36), list_143963, True_143964)
        
        # Getting the type of 'nbfields' (line 3204)
        nbfields_143965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 45), 'nbfields', False)
        # Applying the binary operator '*' (line 3204)
        result_mul_143966 = python_operator(stypy.reporting.localization.Localization(__file__, 3204, 36), '*', list_143963, nbfields_143965)
        
        # Processing the call keyword arguments (line 3204)
        kwargs_143967 = {}
        # Getting the type of 'tuple' (line 3204)
        tuple_143962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 30), 'tuple', False)
        # Calling tuple(args, kwargs) (line 3204)
        tuple_call_result_143968 = invoke(stypy.reporting.localization.Localization(__file__, 3204, 30), tuple_143962, *[result_mul_143966], **kwargs_143967)
        
        # Getting the type of '_mask' (line 3204)
        _mask_143969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 16), '_mask')
        # Getting the type of 'indx' (line 3204)
        indx_143970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3204, 22), 'indx')
        # Storing an element on a container (line 3204)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3204, 16), _mask_143969, (indx_143970, tuple_call_result_143968))
        # SSA branch for the else part of an if statement (line 3203)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Subscript (line 3206):
        
        # Assigning a Name to a Subscript (line 3206):
        # Getting the type of 'True' (line 3206)
        True_143971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3206, 30), 'True')
        # Getting the type of '_mask' (line 3206)
        _mask_143972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3206, 16), '_mask')
        # Getting the type of 'indx' (line 3206)
        indx_143973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3206, 22), 'indx')
        # Storing an element on a container (line 3206)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3206, 16), _mask_143972, (indx_143973, True_143971))
        # SSA join for if statement (line 3203)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 3207)
        self_143974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3207, 19), 'self')
        # Obtaining the member '_isfield' of a type (line 3207)
        _isfield_143975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3207, 19), self_143974, '_isfield')
        # Applying the 'not' unary operator (line 3207)
        result_not__143976 = python_operator(stypy.reporting.localization.Localization(__file__, 3207, 15), 'not', _isfield_143975)
        
        # Testing the type of an if condition (line 3207)
        if_condition_143977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3207, 12), result_not__143976)
        # Assigning a type to the variable 'if_condition_143977' (line 3207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3207, 12), 'if_condition_143977', if_condition_143977)
        # SSA begins for if statement (line 3207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 3208):
        
        # Assigning a Name to a Attribute (line 3208):
        # Getting the type of 'False' (line 3208)
        False_143978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3208, 35), 'False')
        # Getting the type of 'self' (line 3208)
        self_143979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3208, 16), 'self')
        # Setting the type of the member '_sharedmask' of a type (line 3208)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3208, 16), self_143979, '_sharedmask', False_143978)
        # SSA join for if statement (line 3207)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 3209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3209, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 3198)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 3212):
        
        # Assigning a Name to a Name (line 3212):
        # Getting the type of 'value' (line 3212)
        value_143980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3212, 15), 'value')
        # Assigning a type to the variable 'dval' (line 3212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3212, 8), 'dval', value_143980)
        
        # Assigning a Call to a Name (line 3214):
        
        # Assigning a Call to a Name (line 3214):
        
        # Call to getattr(...): (line 3214)
        # Processing the call arguments (line 3214)
        # Getting the type of 'value' (line 3214)
        value_143982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 23), 'value', False)
        str_143983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3214, 30), 'str', '_mask')
        # Getting the type of 'nomask' (line 3214)
        nomask_143984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 39), 'nomask', False)
        # Processing the call keyword arguments (line 3214)
        kwargs_143985 = {}
        # Getting the type of 'getattr' (line 3214)
        getattr_143981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3214)
        getattr_call_result_143986 = invoke(stypy.reporting.localization.Localization(__file__, 3214, 15), getattr_143981, *[value_143982, str_143983, nomask_143984], **kwargs_143985)
        
        # Assigning a type to the variable 'mval' (line 3214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3214, 8), 'mval', getattr_call_result_143986)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'nbfields' (line 3215)
        nbfields_143987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3215, 11), 'nbfields')
        
        # Getting the type of 'mval' (line 3215)
        mval_143988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3215, 24), 'mval')
        # Getting the type of 'nomask' (line 3215)
        nomask_143989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3215, 32), 'nomask')
        # Applying the binary operator 'is' (line 3215)
        result_is__143990 = python_operator(stypy.reporting.localization.Localization(__file__, 3215, 24), 'is', mval_143988, nomask_143989)
        
        # Applying the binary operator 'and' (line 3215)
        result_and_keyword_143991 = python_operator(stypy.reporting.localization.Localization(__file__, 3215, 11), 'and', nbfields_143987, result_is__143990)
        
        # Testing the type of an if condition (line 3215)
        if_condition_143992 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3215, 8), result_and_keyword_143991)
        # Assigning a type to the variable 'if_condition_143992' (line 3215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3215, 8), 'if_condition_143992', if_condition_143992)
        # SSA begins for if statement (line 3215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3216):
        
        # Assigning a Call to a Name (line 3216):
        
        # Call to tuple(...): (line 3216)
        # Processing the call arguments (line 3216)
        
        # Obtaining an instance of the builtin type 'list' (line 3216)
        list_143994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3216, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3216)
        # Adding element type (line 3216)
        # Getting the type of 'False' (line 3216)
        False_143995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 26), 'False', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3216, 25), list_143994, False_143995)
        
        # Getting the type of 'nbfields' (line 3216)
        nbfields_143996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 35), 'nbfields', False)
        # Applying the binary operator '*' (line 3216)
        result_mul_143997 = python_operator(stypy.reporting.localization.Localization(__file__, 3216, 25), '*', list_143994, nbfields_143996)
        
        # Processing the call keyword arguments (line 3216)
        kwargs_143998 = {}
        # Getting the type of 'tuple' (line 3216)
        tuple_143993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 19), 'tuple', False)
        # Calling tuple(args, kwargs) (line 3216)
        tuple_call_result_143999 = invoke(stypy.reporting.localization.Localization(__file__, 3216, 19), tuple_143993, *[result_mul_143997], **kwargs_143998)
        
        # Assigning a type to the variable 'mval' (line 3216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3216, 12), 'mval', tuple_call_result_143999)
        # SSA join for if statement (line 3215)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of '_mask' (line 3217)
        _mask_144000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3217, 11), '_mask')
        # Getting the type of 'nomask' (line 3217)
        nomask_144001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3217, 20), 'nomask')
        # Applying the binary operator 'is' (line 3217)
        result_is__144002 = python_operator(stypy.reporting.localization.Localization(__file__, 3217, 11), 'is', _mask_144000, nomask_144001)
        
        # Testing the type of an if condition (line 3217)
        if_condition_144003 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3217, 8), result_is__144002)
        # Assigning a type to the variable 'if_condition_144003' (line 3217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3217, 8), 'if_condition_144003', if_condition_144003)
        # SSA begins for if statement (line 3217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 3219):
        
        # Assigning a Name to a Subscript (line 3219):
        # Getting the type of 'dval' (line 3219)
        dval_144004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 26), 'dval')
        # Getting the type of '_data' (line 3219)
        _data_144005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 12), '_data')
        # Getting the type of 'indx' (line 3219)
        indx_144006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 18), 'indx')
        # Storing an element on a container (line 3219)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3219, 12), _data_144005, (indx_144006, dval_144004))
        
        
        # Getting the type of 'mval' (line 3220)
        mval_144007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 15), 'mval')
        # Getting the type of 'nomask' (line 3220)
        nomask_144008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 27), 'nomask')
        # Applying the binary operator 'isnot' (line 3220)
        result_is_not_144009 = python_operator(stypy.reporting.localization.Localization(__file__, 3220, 15), 'isnot', mval_144007, nomask_144008)
        
        # Testing the type of an if condition (line 3220)
        if_condition_144010 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3220, 12), result_is_not_144009)
        # Assigning a type to the variable 'if_condition_144010' (line 3220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3220, 12), 'if_condition_144010', if_condition_144010)
        # SSA begins for if statement (line 3220)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 3221):
        
        # Call to make_mask_none(...): (line 3221)
        # Processing the call arguments (line 3221)
        # Getting the type of 'self' (line 3221)
        self_144012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 52), 'self', False)
        # Obtaining the member 'shape' of a type (line 3221)
        shape_144013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3221, 52), self_144012, 'shape')
        # Getting the type of '_dtype' (line 3221)
        _dtype_144014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 64), '_dtype', False)
        # Processing the call keyword arguments (line 3221)
        kwargs_144015 = {}
        # Getting the type of 'make_mask_none' (line 3221)
        make_mask_none_144011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 37), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 3221)
        make_mask_none_call_result_144016 = invoke(stypy.reporting.localization.Localization(__file__, 3221, 37), make_mask_none_144011, *[shape_144013, _dtype_144014], **kwargs_144015)
        
        # Getting the type of 'self' (line 3221)
        self_144017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 24), 'self')
        # Setting the type of the member '_mask' of a type (line 3221)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3221, 24), self_144017, '_mask', make_mask_none_call_result_144016)
        
        # Assigning a Attribute to a Name (line 3221):
        # Getting the type of 'self' (line 3221)
        self_144018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 24), 'self')
        # Obtaining the member '_mask' of a type (line 3221)
        _mask_144019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3221, 24), self_144018, '_mask')
        # Assigning a type to the variable '_mask' (line 3221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3221, 16), '_mask', _mask_144019)
        
        # Assigning a Name to a Subscript (line 3222):
        
        # Assigning a Name to a Subscript (line 3222):
        # Getting the type of 'mval' (line 3222)
        mval_144020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 30), 'mval')
        # Getting the type of '_mask' (line 3222)
        _mask_144021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 16), '_mask')
        # Getting the type of 'indx' (line 3222)
        indx_144022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 22), 'indx')
        # Storing an element on a container (line 3222)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3222, 16), _mask_144021, (indx_144022, mval_144020))
        # SSA join for if statement (line 3220)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3217)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 3223)
        self_144023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 17), 'self')
        # Obtaining the member '_hardmask' of a type (line 3223)
        _hardmask_144024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3223, 17), self_144023, '_hardmask')
        # Applying the 'not' unary operator (line 3223)
        result_not__144025 = python_operator(stypy.reporting.localization.Localization(__file__, 3223, 13), 'not', _hardmask_144024)
        
        # Testing the type of an if condition (line 3223)
        if_condition_144026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3223, 13), result_not__144025)
        # Assigning a type to the variable 'if_condition_144026' (line 3223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3223, 13), 'if_condition_144026', if_condition_144026)
        # SSA begins for if statement (line 3223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 3227)
        self_144027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3227, 19), 'self')
        # Obtaining the member '_isfield' of a type (line 3227)
        _isfield_144028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3227, 19), self_144027, '_isfield')
        # Applying the 'not' unary operator (line 3227)
        result_not__144029 = python_operator(stypy.reporting.localization.Localization(__file__, 3227, 15), 'not', _isfield_144028)
        
        # Testing the type of an if condition (line 3227)
        if_condition_144030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3227, 12), result_not__144029)
        # Assigning a type to the variable 'if_condition_144030' (line 3227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3227, 12), 'if_condition_144030', if_condition_144030)
        # SSA begins for if statement (line 3227)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 3228)
        self_144031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 19), 'self')
        # Obtaining the member '_sharedmask' of a type (line 3228)
        _sharedmask_144032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3228, 19), self_144031, '_sharedmask')
        
        
        # Evaluating a boolean operation
        
        
        # Call to getrefcount(...): (line 3233)
        # Processing the call arguments (line 3233)
        # Getting the type of '_mask' (line 3233)
        _mask_144035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 41), '_mask', False)
        # Processing the call keyword arguments (line 3233)
        kwargs_144036 = {}
        # Getting the type of 'sys' (line 3233)
        sys_144033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 25), 'sys', False)
        # Obtaining the member 'getrefcount' of a type (line 3233)
        getrefcount_144034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3233, 25), sys_144033, 'getrefcount')
        # Calling getrefcount(args, kwargs) (line 3233)
        getrefcount_call_result_144037 = invoke(stypy.reporting.localization.Localization(__file__, 3233, 25), getrefcount_144034, *[_mask_144035], **kwargs_144036)
        
        int_144038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3233, 51), 'int')
        # Applying the binary operator '==' (line 3233)
        result_eq_144039 = python_operator(stypy.reporting.localization.Localization(__file__, 3233, 25), '==', getrefcount_call_result_144037, int_144038)
        
        # Getting the type of '_mask' (line 3233)
        _mask_144040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 58), '_mask')
        # Obtaining the member 'flags' of a type (line 3233)
        flags_144041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3233, 58), _mask_144040, 'flags')
        # Obtaining the member 'owndata' of a type (line 3233)
        owndata_144042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3233, 58), flags_144041, 'owndata')
        # Applying the binary operator 'and' (line 3233)
        result_and_keyword_144043 = python_operator(stypy.reporting.localization.Localization(__file__, 3233, 24), 'and', result_eq_144039, owndata_144042)
        
        # Applying the 'not' unary operator (line 3228)
        result_not__144044 = python_operator(stypy.reporting.localization.Localization(__file__, 3228, 40), 'not', result_and_keyword_144043)
        
        # Applying the binary operator 'and' (line 3228)
        result_and_keyword_144045 = python_operator(stypy.reporting.localization.Localization(__file__, 3228, 19), 'and', _sharedmask_144032, result_not__144044)
        
        # Testing the type of an if condition (line 3228)
        if_condition_144046 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3228, 16), result_and_keyword_144045)
        # Assigning a type to the variable 'if_condition_144046' (line 3228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3228, 16), 'if_condition_144046', if_condition_144046)
        # SSA begins for if statement (line 3228)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 3235)
        # Processing the call arguments (line 3235)
        str_144049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3236, 23), 'str', 'setting an item on a masked array which has a shared mask will not copy the mask and also change the original mask array in the future.\nCheck the NumPy 1.11 release notes for more information.')
        # Getting the type of 'MaskedArrayFutureWarning' (line 3241)
        MaskedArrayFutureWarning_144050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 23), 'MaskedArrayFutureWarning', False)
        # Processing the call keyword arguments (line 3235)
        int_144051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3241, 60), 'int')
        keyword_144052 = int_144051
        kwargs_144053 = {'stacklevel': keyword_144052}
        # Getting the type of 'warnings' (line 3235)
        warnings_144047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 20), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3235)
        warn_144048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 20), warnings_144047, 'warn')
        # Calling warn(args, kwargs) (line 3235)
        warn_call_result_144054 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 20), warn_144048, *[str_144049, MaskedArrayFutureWarning_144050], **kwargs_144053)
        
        # SSA join for if statement (line 3228)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to unshare_mask(...): (line 3242)
        # Processing the call keyword arguments (line 3242)
        kwargs_144057 = {}
        # Getting the type of 'self' (line 3242)
        self_144055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3242, 16), 'self', False)
        # Obtaining the member 'unshare_mask' of a type (line 3242)
        unshare_mask_144056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3242, 16), self_144055, 'unshare_mask')
        # Calling unshare_mask(args, kwargs) (line 3242)
        unshare_mask_call_result_144058 = invoke(stypy.reporting.localization.Localization(__file__, 3242, 16), unshare_mask_144056, *[], **kwargs_144057)
        
        
        # Assigning a Attribute to a Name (line 3243):
        
        # Assigning a Attribute to a Name (line 3243):
        # Getting the type of 'self' (line 3243)
        self_144059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3243, 24), 'self')
        # Obtaining the member '_mask' of a type (line 3243)
        _mask_144060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3243, 24), self_144059, '_mask')
        # Assigning a type to the variable '_mask' (line 3243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3243, 16), '_mask', _mask_144060)
        # SSA join for if statement (line 3227)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 3245):
        
        # Assigning a Name to a Subscript (line 3245):
        # Getting the type of 'dval' (line 3245)
        dval_144061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 26), 'dval')
        # Getting the type of '_data' (line 3245)
        _data_144062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 12), '_data')
        # Getting the type of 'indx' (line 3245)
        indx_144063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 18), 'indx')
        # Storing an element on a container (line 3245)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3245, 12), _data_144062, (indx_144063, dval_144061))
        
        # Assigning a Name to a Subscript (line 3246):
        
        # Assigning a Name to a Subscript (line 3246):
        # Getting the type of 'mval' (line 3246)
        mval_144064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3246, 26), 'mval')
        # Getting the type of '_mask' (line 3246)
        _mask_144065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3246, 12), '_mask')
        # Getting the type of 'indx' (line 3246)
        indx_144066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3246, 18), 'indx')
        # Storing an element on a container (line 3246)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3246, 12), _mask_144065, (indx_144066, mval_144064))
        # SSA branch for the else part of an if statement (line 3223)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 3247)
        # Processing the call arguments (line 3247)
        # Getting the type of 'indx' (line 3247)
        indx_144068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 21), 'indx', False)
        str_144069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3247, 27), 'str', 'dtype')
        # Processing the call keyword arguments (line 3247)
        kwargs_144070 = {}
        # Getting the type of 'hasattr' (line 3247)
        hasattr_144067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 13), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 3247)
        hasattr_call_result_144071 = invoke(stypy.reporting.localization.Localization(__file__, 3247, 13), hasattr_144067, *[indx_144068, str_144069], **kwargs_144070)
        
        
        # Getting the type of 'indx' (line 3247)
        indx_144072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 41), 'indx')
        # Obtaining the member 'dtype' of a type (line 3247)
        dtype_144073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3247, 41), indx_144072, 'dtype')
        # Getting the type of 'MaskType' (line 3247)
        MaskType_144074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 55), 'MaskType')
        # Applying the binary operator '==' (line 3247)
        result_eq_144075 = python_operator(stypy.reporting.localization.Localization(__file__, 3247, 41), '==', dtype_144073, MaskType_144074)
        
        # Applying the binary operator 'and' (line 3247)
        result_and_keyword_144076 = python_operator(stypy.reporting.localization.Localization(__file__, 3247, 13), 'and', hasattr_call_result_144071, result_eq_144075)
        
        # Testing the type of an if condition (line 3247)
        if_condition_144077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3247, 13), result_and_keyword_144076)
        # Assigning a type to the variable 'if_condition_144077' (line 3247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3247, 13), 'if_condition_144077', if_condition_144077)
        # SSA begins for if statement (line 3247)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 3248):
        
        # Assigning a BinOp to a Name (line 3248):
        # Getting the type of 'indx' (line 3248)
        indx_144078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 19), 'indx')
        
        # Call to logical_not(...): (line 3248)
        # Processing the call arguments (line 3248)
        # Getting the type of '_mask' (line 3248)
        _mask_144081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 44), '_mask', False)
        # Processing the call keyword arguments (line 3248)
        kwargs_144082 = {}
        # Getting the type of 'umath' (line 3248)
        umath_144079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 26), 'umath', False)
        # Obtaining the member 'logical_not' of a type (line 3248)
        logical_not_144080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3248, 26), umath_144079, 'logical_not')
        # Calling logical_not(args, kwargs) (line 3248)
        logical_not_call_result_144083 = invoke(stypy.reporting.localization.Localization(__file__, 3248, 26), logical_not_144080, *[_mask_144081], **kwargs_144082)
        
        # Applying the binary operator '*' (line 3248)
        result_mul_144084 = python_operator(stypy.reporting.localization.Localization(__file__, 3248, 19), '*', indx_144078, logical_not_call_result_144083)
        
        # Assigning a type to the variable 'indx' (line 3248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3248, 12), 'indx', result_mul_144084)
        
        # Assigning a Name to a Subscript (line 3249):
        
        # Assigning a Name to a Subscript (line 3249):
        # Getting the type of 'dval' (line 3249)
        dval_144085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 26), 'dval')
        # Getting the type of '_data' (line 3249)
        _data_144086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 12), '_data')
        # Getting the type of 'indx' (line 3249)
        indx_144087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 18), 'indx')
        # Storing an element on a container (line 3249)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 12), _data_144086, (indx_144087, dval_144085))
        # SSA branch for the else part of an if statement (line 3247)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'nbfields' (line 3251)
        nbfields_144088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 15), 'nbfields')
        # Testing the type of an if condition (line 3251)
        if_condition_144089 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3251, 12), nbfields_144088)
        # Assigning a type to the variable 'if_condition_144089' (line 3251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3251, 12), 'if_condition_144089', if_condition_144089)
        # SSA begins for if statement (line 3251)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 3252):
        
        # Assigning a Str to a Name (line 3252):
        str_144090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3252, 26), 'str', "Flexible 'hard' masks are not yet supported.")
        # Assigning a type to the variable 'err_msg' (line 3252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3252, 16), 'err_msg', str_144090)
        
        # Call to NotImplementedError(...): (line 3253)
        # Processing the call arguments (line 3253)
        # Getting the type of 'err_msg' (line 3253)
        err_msg_144092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 42), 'err_msg', False)
        # Processing the call keyword arguments (line 3253)
        kwargs_144093 = {}
        # Getting the type of 'NotImplementedError' (line 3253)
        NotImplementedError_144091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 22), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 3253)
        NotImplementedError_call_result_144094 = invoke(stypy.reporting.localization.Localization(__file__, 3253, 22), NotImplementedError_144091, *[err_msg_144092], **kwargs_144093)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3253, 16), NotImplementedError_call_result_144094, 'raise parameter', BaseException)
        # SSA join for if statement (line 3251)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3254):
        
        # Assigning a Call to a Name (line 3254):
        
        # Call to mask_or(...): (line 3254)
        # Processing the call arguments (line 3254)
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 3254)
        indx_144096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 34), 'indx', False)
        # Getting the type of '_mask' (line 3254)
        _mask_144097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 28), '_mask', False)
        # Obtaining the member '__getitem__' of a type (line 3254)
        getitem___144098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3254, 28), _mask_144097, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3254)
        subscript_call_result_144099 = invoke(stypy.reporting.localization.Localization(__file__, 3254, 28), getitem___144098, indx_144096)
        
        # Getting the type of 'mval' (line 3254)
        mval_144100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 41), 'mval', False)
        # Processing the call keyword arguments (line 3254)
        # Getting the type of 'True' (line 3254)
        True_144101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 52), 'True', False)
        keyword_144102 = True_144101
        kwargs_144103 = {'copy': keyword_144102}
        # Getting the type of 'mask_or' (line 3254)
        mask_or_144095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 20), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 3254)
        mask_or_call_result_144104 = invoke(stypy.reporting.localization.Localization(__file__, 3254, 20), mask_or_144095, *[subscript_call_result_144099, mval_144100], **kwargs_144103)
        
        # Assigning a type to the variable 'mindx' (line 3254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3254, 12), 'mindx', mask_or_call_result_144104)
        
        # Assigning a Subscript to a Name (line 3255):
        
        # Assigning a Subscript to a Name (line 3255):
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 3255)
        indx_144105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 31), 'indx')
        # Getting the type of 'self' (line 3255)
        self_144106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 20), 'self')
        # Obtaining the member '_data' of a type (line 3255)
        _data_144107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 20), self_144106, '_data')
        # Obtaining the member '__getitem__' of a type (line 3255)
        getitem___144108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 20), _data_144107, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3255)
        subscript_call_result_144109 = invoke(stypy.reporting.localization.Localization(__file__, 3255, 20), getitem___144108, indx_144105)
        
        # Assigning a type to the variable 'dindx' (line 3255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3255, 12), 'dindx', subscript_call_result_144109)
        
        
        # Getting the type of 'dindx' (line 3256)
        dindx_144110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 15), 'dindx')
        # Obtaining the member 'size' of a type (line 3256)
        size_144111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3256, 15), dindx_144110, 'size')
        int_144112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3256, 28), 'int')
        # Applying the binary operator '>' (line 3256)
        result_gt_144113 = python_operator(stypy.reporting.localization.Localization(__file__, 3256, 15), '>', size_144111, int_144112)
        
        # Testing the type of an if condition (line 3256)
        if_condition_144114 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3256, 12), result_gt_144113)
        # Assigning a type to the variable 'if_condition_144114' (line 3256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3256, 12), 'if_condition_144114', if_condition_144114)
        # SSA begins for if statement (line 3256)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to copyto(...): (line 3257)
        # Processing the call arguments (line 3257)
        # Getting the type of 'dindx' (line 3257)
        dindx_144117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 26), 'dindx', False)
        # Getting the type of 'dval' (line 3257)
        dval_144118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 33), 'dval', False)
        # Processing the call keyword arguments (line 3257)
        
        # Getting the type of 'mindx' (line 3257)
        mindx_144119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 46), 'mindx', False)
        # Applying the '~' unary operator (line 3257)
        result_inv_144120 = python_operator(stypy.reporting.localization.Localization(__file__, 3257, 45), '~', mindx_144119)
        
        keyword_144121 = result_inv_144120
        kwargs_144122 = {'where': keyword_144121}
        # Getting the type of 'np' (line 3257)
        np_144115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 16), 'np', False)
        # Obtaining the member 'copyto' of a type (line 3257)
        copyto_144116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3257, 16), np_144115, 'copyto')
        # Calling copyto(args, kwargs) (line 3257)
        copyto_call_result_144123 = invoke(stypy.reporting.localization.Localization(__file__, 3257, 16), copyto_144116, *[dindx_144117, dval_144118], **kwargs_144122)
        
        # SSA branch for the else part of an if statement (line 3256)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'mindx' (line 3258)
        mindx_144124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 17), 'mindx')
        # Getting the type of 'nomask' (line 3258)
        nomask_144125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 26), 'nomask')
        # Applying the binary operator 'is' (line 3258)
        result_is__144126 = python_operator(stypy.reporting.localization.Localization(__file__, 3258, 17), 'is', mindx_144124, nomask_144125)
        
        # Testing the type of an if condition (line 3258)
        if_condition_144127 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3258, 17), result_is__144126)
        # Assigning a type to the variable 'if_condition_144127' (line 3258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3258, 17), 'if_condition_144127', if_condition_144127)
        # SSA begins for if statement (line 3258)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3259):
        
        # Assigning a Name to a Name (line 3259):
        # Getting the type of 'dval' (line 3259)
        dval_144128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3259, 24), 'dval')
        # Assigning a type to the variable 'dindx' (line 3259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3259, 16), 'dindx', dval_144128)
        # SSA join for if statement (line 3258)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3256)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 3260):
        
        # Assigning a Name to a Subscript (line 3260):
        # Getting the type of 'dindx' (line 3260)
        dindx_144129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 26), 'dindx')
        # Getting the type of '_data' (line 3260)
        _data_144130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 12), '_data')
        # Getting the type of 'indx' (line 3260)
        indx_144131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 18), 'indx')
        # Storing an element on a container (line 3260)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3260, 12), _data_144130, (indx_144131, dindx_144129))
        
        # Assigning a Name to a Subscript (line 3261):
        
        # Assigning a Name to a Subscript (line 3261):
        # Getting the type of 'mindx' (line 3261)
        mindx_144132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 26), 'mindx')
        # Getting the type of '_mask' (line 3261)
        _mask_144133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 12), '_mask')
        # Getting the type of 'indx' (line 3261)
        indx_144134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 18), 'indx')
        # Storing an element on a container (line 3261)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3261, 12), _mask_144133, (indx_144134, mindx_144132))
        # SSA join for if statement (line 3247)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3223)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3217)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 3262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3262, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of '__setitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 3176)
        stypy_return_type_144135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144135)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setitem__'
        return stypy_return_type_144135


    @norecursion
    def __setattr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setattr__'
        module_type_store = module_type_store.open_function_context('__setattr__', 3264, 4, False)
        # Assigning a type to the variable 'self' (line 3265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3265, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__setattr__')
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_param_names_list', ['attr', 'value'])
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__setattr__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__setattr__', ['attr', 'value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setattr__', localization, ['attr', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setattr__(...)' code ##################

        
        # Call to __setattr__(...): (line 3265)
        # Processing the call arguments (line 3265)
        # Getting the type of 'attr' (line 3265)
        attr_144142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 45), 'attr', False)
        # Getting the type of 'value' (line 3265)
        value_144143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 51), 'value', False)
        # Processing the call keyword arguments (line 3265)
        kwargs_144144 = {}
        
        # Call to super(...): (line 3265)
        # Processing the call arguments (line 3265)
        # Getting the type of 'MaskedArray' (line 3265)
        MaskedArray_144137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 14), 'MaskedArray', False)
        # Getting the type of 'self' (line 3265)
        self_144138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 27), 'self', False)
        # Processing the call keyword arguments (line 3265)
        kwargs_144139 = {}
        # Getting the type of 'super' (line 3265)
        super_144136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 8), 'super', False)
        # Calling super(args, kwargs) (line 3265)
        super_call_result_144140 = invoke(stypy.reporting.localization.Localization(__file__, 3265, 8), super_144136, *[MaskedArray_144137, self_144138], **kwargs_144139)
        
        # Obtaining the member '__setattr__' of a type (line 3265)
        setattr___144141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3265, 8), super_call_result_144140, '__setattr__')
        # Calling __setattr__(args, kwargs) (line 3265)
        setattr___call_result_144145 = invoke(stypy.reporting.localization.Localization(__file__, 3265, 8), setattr___144141, *[attr_144142, value_144143], **kwargs_144144)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'attr' (line 3266)
        attr_144146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 11), 'attr')
        str_144147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3266, 19), 'str', 'dtype')
        # Applying the binary operator '==' (line 3266)
        result_eq_144148 = python_operator(stypy.reporting.localization.Localization(__file__, 3266, 11), '==', attr_144146, str_144147)
        
        
        # Getting the type of 'self' (line 3266)
        self_144149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 31), 'self')
        # Obtaining the member '_mask' of a type (line 3266)
        _mask_144150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3266, 31), self_144149, '_mask')
        # Getting the type of 'nomask' (line 3266)
        nomask_144151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3266, 49), 'nomask')
        # Applying the binary operator 'isnot' (line 3266)
        result_is_not_144152 = python_operator(stypy.reporting.localization.Localization(__file__, 3266, 31), 'isnot', _mask_144150, nomask_144151)
        
        # Applying the binary operator 'and' (line 3266)
        result_and_keyword_144153 = python_operator(stypy.reporting.localization.Localization(__file__, 3266, 11), 'and', result_eq_144148, result_is_not_144152)
        
        # Testing the type of an if condition (line 3266)
        if_condition_144154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3266, 8), result_and_keyword_144153)
        # Assigning a type to the variable 'if_condition_144154' (line 3266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3266, 8), 'if_condition_144154', if_condition_144154)
        # SSA begins for if statement (line 3266)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 3267):
        
        # Assigning a Call to a Attribute (line 3267):
        
        # Call to view(...): (line 3267)
        # Processing the call arguments (line 3267)
        
        # Call to make_mask_descr(...): (line 3267)
        # Processing the call arguments (line 3267)
        # Getting the type of 'value' (line 3267)
        value_144159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3267, 57), 'value', False)
        # Processing the call keyword arguments (line 3267)
        kwargs_144160 = {}
        # Getting the type of 'make_mask_descr' (line 3267)
        make_mask_descr_144158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3267, 41), 'make_mask_descr', False)
        # Calling make_mask_descr(args, kwargs) (line 3267)
        make_mask_descr_call_result_144161 = invoke(stypy.reporting.localization.Localization(__file__, 3267, 41), make_mask_descr_144158, *[value_144159], **kwargs_144160)
        
        # Getting the type of 'ndarray' (line 3267)
        ndarray_144162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3267, 65), 'ndarray', False)
        # Processing the call keyword arguments (line 3267)
        kwargs_144163 = {}
        # Getting the type of 'self' (line 3267)
        self_144155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3267, 25), 'self', False)
        # Obtaining the member '_mask' of a type (line 3267)
        _mask_144156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3267, 25), self_144155, '_mask')
        # Obtaining the member 'view' of a type (line 3267)
        view_144157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3267, 25), _mask_144156, 'view')
        # Calling view(args, kwargs) (line 3267)
        view_call_result_144164 = invoke(stypy.reporting.localization.Localization(__file__, 3267, 25), view_144157, *[make_mask_descr_call_result_144161, ndarray_144162], **kwargs_144163)
        
        # Getting the type of 'self' (line 3267)
        self_144165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3267, 12), 'self')
        # Setting the type of the member '_mask' of a type (line 3267)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3267, 12), self_144165, '_mask', view_call_result_144164)
        
        
        # SSA begins for try-except statement (line 3270)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Attribute to a Attribute (line 3271):
        
        # Assigning a Attribute to a Attribute (line 3271):
        # Getting the type of 'self' (line 3271)
        self_144166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 35), 'self')
        # Obtaining the member 'shape' of a type (line 3271)
        shape_144167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3271, 35), self_144166, 'shape')
        # Getting the type of 'self' (line 3271)
        self_144168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 16), 'self')
        # Obtaining the member '_mask' of a type (line 3271)
        _mask_144169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3271, 16), self_144168, '_mask')
        # Setting the type of the member 'shape' of a type (line 3271)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3271, 16), _mask_144169, 'shape', shape_144167)
        # SSA branch for the except part of a try statement (line 3270)
        # SSA branch for the except 'Tuple' branch of a try statement (line 3270)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 3270)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3266)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__setattr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setattr__' in the type store
        # Getting the type of 'stypy_return_type' (line 3264)
        stypy_return_type_144170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3264, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144170)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setattr__'
        return stypy_return_type_144170


    @norecursion
    def __getslice__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getslice__'
        module_type_store = module_type_store.open_function_context('__getslice__', 3275, 4, False)
        # Assigning a type to the variable 'self' (line 3276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3276, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__getslice__')
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_param_names_list', ['i', 'j'])
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__getslice__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__getslice__', ['i', 'j'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getslice__', localization, ['i', 'j'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getslice__(...)' code ##################

        str_144171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3282, (-1)), 'str', '\n        x.__getslice__(i, j) <==> x[i:j]\n\n        Return the slice described by (i, j).  The use of negative indices\n        is not supported.\n\n        ')
        
        # Call to __getitem__(...): (line 3283)
        # Processing the call arguments (line 3283)
        
        # Call to slice(...): (line 3283)
        # Processing the call arguments (line 3283)
        # Getting the type of 'i' (line 3283)
        i_144175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 38), 'i', False)
        # Getting the type of 'j' (line 3283)
        j_144176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 41), 'j', False)
        # Processing the call keyword arguments (line 3283)
        kwargs_144177 = {}
        # Getting the type of 'slice' (line 3283)
        slice_144174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 32), 'slice', False)
        # Calling slice(args, kwargs) (line 3283)
        slice_call_result_144178 = invoke(stypy.reporting.localization.Localization(__file__, 3283, 32), slice_144174, *[i_144175, j_144176], **kwargs_144177)
        
        # Processing the call keyword arguments (line 3283)
        kwargs_144179 = {}
        # Getting the type of 'self' (line 3283)
        self_144172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 15), 'self', False)
        # Obtaining the member '__getitem__' of a type (line 3283)
        getitem___144173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3283, 15), self_144172, '__getitem__')
        # Calling __getitem__(args, kwargs) (line 3283)
        getitem___call_result_144180 = invoke(stypy.reporting.localization.Localization(__file__, 3283, 15), getitem___144173, *[slice_call_result_144178], **kwargs_144179)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3283, 8), 'stypy_return_type', getitem___call_result_144180)
        
        # ################# End of '__getslice__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getslice__' in the type store
        # Getting the type of 'stypy_return_type' (line 3275)
        stypy_return_type_144181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3275, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144181)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getslice__'
        return stypy_return_type_144181


    @norecursion
    def __setslice__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setslice__'
        module_type_store = module_type_store.open_function_context('__setslice__', 3285, 4, False)
        # Assigning a type to the variable 'self' (line 3286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3286, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__setslice__')
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_param_names_list', ['i', 'j', 'value'])
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__setslice__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__setslice__', ['i', 'j', 'value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setslice__', localization, ['i', 'j', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setslice__(...)' code ##################

        str_144182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3292, (-1)), 'str', '\n        x.__setslice__(i, j, value) <==> x[i:j]=value\n\n        Set the slice (i,j) of a to value. If value is masked, mask those\n        locations.\n\n        ')
        
        # Call to __setitem__(...): (line 3293)
        # Processing the call arguments (line 3293)
        
        # Call to slice(...): (line 3293)
        # Processing the call arguments (line 3293)
        # Getting the type of 'i' (line 3293)
        i_144186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 31), 'i', False)
        # Getting the type of 'j' (line 3293)
        j_144187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 34), 'j', False)
        # Processing the call keyword arguments (line 3293)
        kwargs_144188 = {}
        # Getting the type of 'slice' (line 3293)
        slice_144185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 25), 'slice', False)
        # Calling slice(args, kwargs) (line 3293)
        slice_call_result_144189 = invoke(stypy.reporting.localization.Localization(__file__, 3293, 25), slice_144185, *[i_144186, j_144187], **kwargs_144188)
        
        # Getting the type of 'value' (line 3293)
        value_144190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 38), 'value', False)
        # Processing the call keyword arguments (line 3293)
        kwargs_144191 = {}
        # Getting the type of 'self' (line 3293)
        self_144183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 8), 'self', False)
        # Obtaining the member '__setitem__' of a type (line 3293)
        setitem___144184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3293, 8), self_144183, '__setitem__')
        # Calling __setitem__(args, kwargs) (line 3293)
        setitem___call_result_144192 = invoke(stypy.reporting.localization.Localization(__file__, 3293, 8), setitem___144184, *[slice_call_result_144189, value_144190], **kwargs_144191)
        
        
        # ################# End of '__setslice__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setslice__' in the type store
        # Getting the type of 'stypy_return_type' (line 3285)
        stypy_return_type_144193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3285, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144193)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setslice__'
        return stypy_return_type_144193


    @norecursion
    def __setmask__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 3295)
        False_144194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 37), 'False')
        defaults = [False_144194]
        # Create a new context for function '__setmask__'
        module_type_store = module_type_store.open_function_context('__setmask__', 3295, 4, False)
        # Assigning a type to the variable 'self' (line 3296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3296, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__setmask__')
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_param_names_list', ['mask', 'copy'])
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__setmask__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__setmask__', ['mask', 'copy'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setmask__', localization, ['mask', 'copy'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setmask__(...)' code ##################

        str_144195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3299, (-1)), 'str', '\n        Set the mask.\n\n        ')
        
        # Assigning a Attribute to a Name (line 3300):
        
        # Assigning a Attribute to a Name (line 3300):
        # Getting the type of 'self' (line 3300)
        self_144196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3300, 17), 'self')
        # Obtaining the member 'dtype' of a type (line 3300)
        dtype_144197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3300, 17), self_144196, 'dtype')
        # Assigning a type to the variable 'idtype' (line 3300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3300, 8), 'idtype', dtype_144197)
        
        # Assigning a Attribute to a Name (line 3301):
        
        # Assigning a Attribute to a Name (line 3301):
        # Getting the type of 'self' (line 3301)
        self_144198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3301, 23), 'self')
        # Obtaining the member '_mask' of a type (line 3301)
        _mask_144199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3301, 23), self_144198, '_mask')
        # Assigning a type to the variable 'current_mask' (line 3301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3301, 8), 'current_mask', _mask_144199)
        
        
        # Getting the type of 'mask' (line 3302)
        mask_144200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 11), 'mask')
        # Getting the type of 'masked' (line 3302)
        masked_144201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 19), 'masked')
        # Applying the binary operator 'is' (line 3302)
        result_is__144202 = python_operator(stypy.reporting.localization.Localization(__file__, 3302, 11), 'is', mask_144200, masked_144201)
        
        # Testing the type of an if condition (line 3302)
        if_condition_144203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3302, 8), result_is__144202)
        # Assigning a type to the variable 'if_condition_144203' (line 3302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3302, 8), 'if_condition_144203', if_condition_144203)
        # SSA begins for if statement (line 3302)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3303):
        
        # Assigning a Name to a Name (line 3303):
        # Getting the type of 'True' (line 3303)
        True_144204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 19), 'True')
        # Assigning a type to the variable 'mask' (line 3303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3303, 12), 'mask', True_144204)
        # SSA join for if statement (line 3302)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'current_mask' (line 3305)
        current_mask_144205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 12), 'current_mask')
        # Getting the type of 'nomask' (line 3305)
        nomask_144206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 28), 'nomask')
        # Applying the binary operator 'is' (line 3305)
        result_is__144207 = python_operator(stypy.reporting.localization.Localization(__file__, 3305, 12), 'is', current_mask_144205, nomask_144206)
        
        # Testing the type of an if condition (line 3305)
        if_condition_144208 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3305, 8), result_is__144207)
        # Assigning a type to the variable 'if_condition_144208' (line 3305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3305, 8), 'if_condition_144208', if_condition_144208)
        # SSA begins for if statement (line 3305)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'mask' (line 3308)
        mask_144209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3308, 15), 'mask')
        # Getting the type of 'nomask' (line 3308)
        nomask_144210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3308, 23), 'nomask')
        # Applying the binary operator 'is' (line 3308)
        result_is__144211 = python_operator(stypy.reporting.localization.Localization(__file__, 3308, 15), 'is', mask_144209, nomask_144210)
        
        # Testing the type of an if condition (line 3308)
        if_condition_144212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3308, 12), result_is__144211)
        # Assigning a type to the variable 'if_condition_144212' (line 3308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3308, 12), 'if_condition_144212', if_condition_144212)
        # SSA begins for if statement (line 3308)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 3309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3309, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 3308)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 3310):
        
        # Call to make_mask_none(...): (line 3310)
        # Processing the call arguments (line 3310)
        # Getting the type of 'self' (line 3310)
        self_144214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 55), 'self', False)
        # Obtaining the member 'shape' of a type (line 3310)
        shape_144215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3310, 55), self_144214, 'shape')
        # Getting the type of 'idtype' (line 3310)
        idtype_144216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 67), 'idtype', False)
        # Processing the call keyword arguments (line 3310)
        kwargs_144217 = {}
        # Getting the type of 'make_mask_none' (line 3310)
        make_mask_none_144213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 40), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 3310)
        make_mask_none_call_result_144218 = invoke(stypy.reporting.localization.Localization(__file__, 3310, 40), make_mask_none_144213, *[shape_144215, idtype_144216], **kwargs_144217)
        
        # Getting the type of 'self' (line 3310)
        self_144219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 27), 'self')
        # Setting the type of the member '_mask' of a type (line 3310)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3310, 27), self_144219, '_mask', make_mask_none_call_result_144218)
        
        # Assigning a Attribute to a Name (line 3310):
        # Getting the type of 'self' (line 3310)
        self_144220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 27), 'self')
        # Obtaining the member '_mask' of a type (line 3310)
        _mask_144221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3310, 27), self_144220, '_mask')
        # Assigning a type to the variable 'current_mask' (line 3310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3310, 12), 'current_mask', _mask_144221)
        # SSA join for if statement (line 3305)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 3312)
        # Getting the type of 'idtype' (line 3312)
        idtype_144222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3312, 11), 'idtype')
        # Obtaining the member 'names' of a type (line 3312)
        names_144223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3312, 11), idtype_144222, 'names')
        # Getting the type of 'None' (line 3312)
        None_144224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3312, 27), 'None')
        
        (may_be_144225, more_types_in_union_144226) = may_be_none(names_144223, None_144224)

        if may_be_144225:

            if more_types_in_union_144226:
                # Runtime conditional SSA (line 3312)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'self' (line 3315)
            self_144227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3315, 15), 'self')
            # Obtaining the member '_hardmask' of a type (line 3315)
            _hardmask_144228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3315, 15), self_144227, '_hardmask')
            # Testing the type of an if condition (line 3315)
            if_condition_144229 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3315, 12), _hardmask_144228)
            # Assigning a type to the variable 'if_condition_144229' (line 3315)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3315, 12), 'if_condition_144229', if_condition_144229)
            # SSA begins for if statement (line 3315)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'current_mask' (line 3316)
            current_mask_144230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3316, 16), 'current_mask')
            # Getting the type of 'mask' (line 3316)
            mask_144231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3316, 32), 'mask')
            # Applying the binary operator '|=' (line 3316)
            result_ior_144232 = python_operator(stypy.reporting.localization.Localization(__file__, 3316, 16), '|=', current_mask_144230, mask_144231)
            # Assigning a type to the variable 'current_mask' (line 3316)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3316, 16), 'current_mask', result_ior_144232)
            
            # SSA branch for the else part of an if statement (line 3315)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isinstance(...): (line 3320)
            # Processing the call arguments (line 3320)
            # Getting the type of 'mask' (line 3320)
            mask_144234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 28), 'mask', False)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3320)
            tuple_144235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3320, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3320)
            # Adding element type (line 3320)
            # Getting the type of 'int' (line 3320)
            int_144236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 35), 'int', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3320, 35), tuple_144235, int_144236)
            # Adding element type (line 3320)
            # Getting the type of 'float' (line 3320)
            float_144237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 40), 'float', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3320, 35), tuple_144235, float_144237)
            # Adding element type (line 3320)
            # Getting the type of 'np' (line 3320)
            np_144238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 47), 'np', False)
            # Obtaining the member 'bool_' of a type (line 3320)
            bool__144239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3320, 47), np_144238, 'bool_')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3320, 35), tuple_144235, bool__144239)
            # Adding element type (line 3320)
            # Getting the type of 'np' (line 3320)
            np_144240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 57), 'np', False)
            # Obtaining the member 'number' of a type (line 3320)
            number_144241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3320, 57), np_144240, 'number')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3320, 35), tuple_144235, number_144241)
            
            # Processing the call keyword arguments (line 3320)
            kwargs_144242 = {}
            # Getting the type of 'isinstance' (line 3320)
            isinstance_144233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 17), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 3320)
            isinstance_call_result_144243 = invoke(stypy.reporting.localization.Localization(__file__, 3320, 17), isinstance_144233, *[mask_144234, tuple_144235], **kwargs_144242)
            
            # Testing the type of an if condition (line 3320)
            if_condition_144244 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3320, 17), isinstance_call_result_144243)
            # Assigning a type to the variable 'if_condition_144244' (line 3320)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3320, 17), 'if_condition_144244', if_condition_144244)
            # SSA begins for if statement (line 3320)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Subscript (line 3321):
            
            # Assigning a Name to a Subscript (line 3321):
            # Getting the type of 'mask' (line 3321)
            mask_144245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3321, 36), 'mask')
            # Getting the type of 'current_mask' (line 3321)
            current_mask_144246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3321, 16), 'current_mask')
            Ellipsis_144247 = Ellipsis
            # Storing an element on a container (line 3321)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3321, 16), current_mask_144246, (Ellipsis_144247, mask_144245))
            # SSA branch for the else part of an if statement (line 3320)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 3324):
            
            # Assigning a Name to a Attribute (line 3324):
            # Getting the type of 'mask' (line 3324)
            mask_144248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 36), 'mask')
            # Getting the type of 'current_mask' (line 3324)
            current_mask_144249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 16), 'current_mask')
            # Setting the type of the member 'flat' of a type (line 3324)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3324, 16), current_mask_144249, 'flat', mask_144248)
            # SSA join for if statement (line 3320)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3315)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_144226:
                # Runtime conditional SSA for else branch (line 3312)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_144225) or more_types_in_union_144226):
            
            # Assigning a Attribute to a Name (line 3327):
            
            # Assigning a Attribute to a Name (line 3327):
            # Getting the type of 'current_mask' (line 3327)
            current_mask_144250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3327, 21), 'current_mask')
            # Obtaining the member 'dtype' of a type (line 3327)
            dtype_144251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3327, 21), current_mask_144250, 'dtype')
            # Assigning a type to the variable 'mdtype' (line 3327)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3327, 12), 'mdtype', dtype_144251)
            
            # Assigning a Call to a Name (line 3328):
            
            # Assigning a Call to a Name (line 3328):
            
            # Call to array(...): (line 3328)
            # Processing the call arguments (line 3328)
            # Getting the type of 'mask' (line 3328)
            mask_144254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 28), 'mask', False)
            # Processing the call keyword arguments (line 3328)
            # Getting the type of 'False' (line 3328)
            False_144255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 39), 'False', False)
            keyword_144256 = False_144255
            kwargs_144257 = {'copy': keyword_144256}
            # Getting the type of 'np' (line 3328)
            np_144252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 19), 'np', False)
            # Obtaining the member 'array' of a type (line 3328)
            array_144253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3328, 19), np_144252, 'array')
            # Calling array(args, kwargs) (line 3328)
            array_call_result_144258 = invoke(stypy.reporting.localization.Localization(__file__, 3328, 19), array_144253, *[mask_144254], **kwargs_144257)
            
            # Assigning a type to the variable 'mask' (line 3328)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3328, 12), 'mask', array_call_result_144258)
            
            
            # Getting the type of 'mask' (line 3330)
            mask_144259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3330, 19), 'mask')
            # Obtaining the member 'ndim' of a type (line 3330)
            ndim_144260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3330, 19), mask_144259, 'ndim')
            # Applying the 'not' unary operator (line 3330)
            result_not__144261 = python_operator(stypy.reporting.localization.Localization(__file__, 3330, 15), 'not', ndim_144260)
            
            # Testing the type of an if condition (line 3330)
            if_condition_144262 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3330, 12), result_not__144261)
            # Assigning a type to the variable 'if_condition_144262' (line 3330)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3330, 12), 'if_condition_144262', if_condition_144262)
            # SSA begins for if statement (line 3330)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Getting the type of 'mask' (line 3332)
            mask_144263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3332, 19), 'mask')
            # Obtaining the member 'dtype' of a type (line 3332)
            dtype_144264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3332, 19), mask_144263, 'dtype')
            # Obtaining the member 'kind' of a type (line 3332)
            kind_144265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3332, 19), dtype_144264, 'kind')
            str_144266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3332, 38), 'str', 'b')
            # Applying the binary operator '==' (line 3332)
            result_eq_144267 = python_operator(stypy.reporting.localization.Localization(__file__, 3332, 19), '==', kind_144265, str_144266)
            
            # Testing the type of an if condition (line 3332)
            if_condition_144268 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3332, 16), result_eq_144267)
            # Assigning a type to the variable 'if_condition_144268' (line 3332)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3332, 16), 'if_condition_144268', if_condition_144268)
            # SSA begins for if statement (line 3332)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 3333):
            
            # Assigning a Call to a Name (line 3333):
            
            # Call to array(...): (line 3333)
            # Processing the call arguments (line 3333)
            
            # Call to tuple(...): (line 3333)
            # Processing the call arguments (line 3333)
            
            # Obtaining an instance of the builtin type 'list' (line 3333)
            list_144272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3333, 42), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3333)
            # Adding element type (line 3333)
            
            # Call to item(...): (line 3333)
            # Processing the call keyword arguments (line 3333)
            kwargs_144275 = {}
            # Getting the type of 'mask' (line 3333)
            mask_144273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 43), 'mask', False)
            # Obtaining the member 'item' of a type (line 3333)
            item_144274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3333, 43), mask_144273, 'item')
            # Calling item(args, kwargs) (line 3333)
            item_call_result_144276 = invoke(stypy.reporting.localization.Localization(__file__, 3333, 43), item_144274, *[], **kwargs_144275)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3333, 42), list_144272, item_call_result_144276)
            
            
            # Call to len(...): (line 3333)
            # Processing the call arguments (line 3333)
            # Getting the type of 'mdtype' (line 3333)
            mdtype_144278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 62), 'mdtype', False)
            # Processing the call keyword arguments (line 3333)
            kwargs_144279 = {}
            # Getting the type of 'len' (line 3333)
            len_144277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 58), 'len', False)
            # Calling len(args, kwargs) (line 3333)
            len_call_result_144280 = invoke(stypy.reporting.localization.Localization(__file__, 3333, 58), len_144277, *[mdtype_144278], **kwargs_144279)
            
            # Applying the binary operator '*' (line 3333)
            result_mul_144281 = python_operator(stypy.reporting.localization.Localization(__file__, 3333, 42), '*', list_144272, len_call_result_144280)
            
            # Processing the call keyword arguments (line 3333)
            kwargs_144282 = {}
            # Getting the type of 'tuple' (line 3333)
            tuple_144271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 36), 'tuple', False)
            # Calling tuple(args, kwargs) (line 3333)
            tuple_call_result_144283 = invoke(stypy.reporting.localization.Localization(__file__, 3333, 36), tuple_144271, *[result_mul_144281], **kwargs_144282)
            
            # Processing the call keyword arguments (line 3333)
            # Getting the type of 'mdtype' (line 3334)
            mdtype_144284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3334, 42), 'mdtype', False)
            keyword_144285 = mdtype_144284
            kwargs_144286 = {'dtype': keyword_144285}
            # Getting the type of 'np' (line 3333)
            np_144269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 27), 'np', False)
            # Obtaining the member 'array' of a type (line 3333)
            array_144270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3333, 27), np_144269, 'array')
            # Calling array(args, kwargs) (line 3333)
            array_call_result_144287 = invoke(stypy.reporting.localization.Localization(__file__, 3333, 27), array_144270, *[tuple_call_result_144283], **kwargs_144286)
            
            # Assigning a type to the variable 'mask' (line 3333)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3333, 20), 'mask', array_call_result_144287)
            # SSA branch for the else part of an if statement (line 3332)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 3337):
            
            # Assigning a Call to a Name (line 3337):
            
            # Call to astype(...): (line 3337)
            # Processing the call arguments (line 3337)
            # Getting the type of 'mdtype' (line 3337)
            mdtype_144290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 39), 'mdtype', False)
            # Processing the call keyword arguments (line 3337)
            kwargs_144291 = {}
            # Getting the type of 'mask' (line 3337)
            mask_144288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 27), 'mask', False)
            # Obtaining the member 'astype' of a type (line 3337)
            astype_144289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3337, 27), mask_144288, 'astype')
            # Calling astype(args, kwargs) (line 3337)
            astype_call_result_144292 = invoke(stypy.reporting.localization.Localization(__file__, 3337, 27), astype_144289, *[mdtype_144290], **kwargs_144291)
            
            # Assigning a type to the variable 'mask' (line 3337)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3337, 20), 'mask', astype_call_result_144292)
            # SSA join for if statement (line 3332)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 3330)
            module_type_store.open_ssa_branch('else')
            
            
            # SSA begins for try-except statement (line 3341)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Name (line 3342):
            
            # Assigning a Call to a Name (line 3342):
            
            # Call to array(...): (line 3342)
            # Processing the call arguments (line 3342)
            # Getting the type of 'mask' (line 3342)
            mask_144295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 36), 'mask', False)
            # Processing the call keyword arguments (line 3342)
            # Getting the type of 'copy' (line 3342)
            copy_144296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 47), 'copy', False)
            keyword_144297 = copy_144296
            # Getting the type of 'mdtype' (line 3342)
            mdtype_144298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 59), 'mdtype', False)
            keyword_144299 = mdtype_144298
            kwargs_144300 = {'dtype': keyword_144299, 'copy': keyword_144297}
            # Getting the type of 'np' (line 3342)
            np_144293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 27), 'np', False)
            # Obtaining the member 'array' of a type (line 3342)
            array_144294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3342, 27), np_144293, 'array')
            # Calling array(args, kwargs) (line 3342)
            array_call_result_144301 = invoke(stypy.reporting.localization.Localization(__file__, 3342, 27), array_144294, *[mask_144295], **kwargs_144300)
            
            # Assigning a type to the variable 'mask' (line 3342)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3342, 20), 'mask', array_call_result_144301)
            # SSA branch for the except part of a try statement (line 3341)
            # SSA branch for the except 'TypeError' branch of a try statement (line 3341)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Name (line 3345):
            
            # Assigning a Call to a Name (line 3345):
            
            # Call to array(...): (line 3345)
            # Processing the call arguments (line 3345)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'mask' (line 3345)
            mask_144314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 71), 'mask', False)
            comprehension_144315 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3345, 37), mask_144314)
            # Assigning a type to the variable 'm' (line 3345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3345, 37), 'm', comprehension_144315)
            
            # Call to tuple(...): (line 3345)
            # Processing the call arguments (line 3345)
            
            # Obtaining an instance of the builtin type 'list' (line 3345)
            list_144305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3345, 43), 'list')
            # Adding type elements to the builtin type 'list' instance (line 3345)
            # Adding element type (line 3345)
            # Getting the type of 'm' (line 3345)
            m_144306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 44), 'm', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3345, 43), list_144305, m_144306)
            
            
            # Call to len(...): (line 3345)
            # Processing the call arguments (line 3345)
            # Getting the type of 'mdtype' (line 3345)
            mdtype_144308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 53), 'mdtype', False)
            # Processing the call keyword arguments (line 3345)
            kwargs_144309 = {}
            # Getting the type of 'len' (line 3345)
            len_144307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 49), 'len', False)
            # Calling len(args, kwargs) (line 3345)
            len_call_result_144310 = invoke(stypy.reporting.localization.Localization(__file__, 3345, 49), len_144307, *[mdtype_144308], **kwargs_144309)
            
            # Applying the binary operator '*' (line 3345)
            result_mul_144311 = python_operator(stypy.reporting.localization.Localization(__file__, 3345, 43), '*', list_144305, len_call_result_144310)
            
            # Processing the call keyword arguments (line 3345)
            kwargs_144312 = {}
            # Getting the type of 'tuple' (line 3345)
            tuple_144304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 37), 'tuple', False)
            # Calling tuple(args, kwargs) (line 3345)
            tuple_call_result_144313 = invoke(stypy.reporting.localization.Localization(__file__, 3345, 37), tuple_144304, *[result_mul_144311], **kwargs_144312)
            
            list_144316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3345, 37), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3345, 37), list_144316, tuple_call_result_144313)
            # Processing the call keyword arguments (line 3345)
            # Getting the type of 'mdtype' (line 3346)
            mdtype_144317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3346, 42), 'mdtype', False)
            keyword_144318 = mdtype_144317
            kwargs_144319 = {'dtype': keyword_144318}
            # Getting the type of 'np' (line 3345)
            np_144302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 27), 'np', False)
            # Obtaining the member 'array' of a type (line 3345)
            array_144303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3345, 27), np_144302, 'array')
            # Calling array(args, kwargs) (line 3345)
            array_call_result_144320 = invoke(stypy.reporting.localization.Localization(__file__, 3345, 27), array_144303, *[list_144316], **kwargs_144319)
            
            # Assigning a type to the variable 'mask' (line 3345)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3345, 20), 'mask', array_call_result_144320)
            # SSA join for try-except statement (line 3341)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3330)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'self' (line 3348)
            self_144321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3348, 15), 'self')
            # Obtaining the member '_hardmask' of a type (line 3348)
            _hardmask_144322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3348, 15), self_144321, '_hardmask')
            # Testing the type of an if condition (line 3348)
            if_condition_144323 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3348, 12), _hardmask_144322)
            # Assigning a type to the variable 'if_condition_144323' (line 3348)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3348, 12), 'if_condition_144323', if_condition_144323)
            # SSA begins for if statement (line 3348)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Getting the type of 'idtype' (line 3349)
            idtype_144324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 25), 'idtype')
            # Obtaining the member 'names' of a type (line 3349)
            names_144325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3349, 25), idtype_144324, 'names')
            # Testing the type of a for loop iterable (line 3349)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3349, 16), names_144325)
            # Getting the type of the for loop variable (line 3349)
            for_loop_var_144326 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3349, 16), names_144325)
            # Assigning a type to the variable 'n' (line 3349)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3349, 16), 'n', for_loop_var_144326)
            # SSA begins for a for statement (line 3349)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Getting the type of 'current_mask' (line 3350)
            current_mask_144327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 20), 'current_mask')
            
            # Obtaining the type of the subscript
            # Getting the type of 'n' (line 3350)
            n_144328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 33), 'n')
            # Getting the type of 'current_mask' (line 3350)
            current_mask_144329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 20), 'current_mask')
            # Obtaining the member '__getitem__' of a type (line 3350)
            getitem___144330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3350, 20), current_mask_144329, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3350)
            subscript_call_result_144331 = invoke(stypy.reporting.localization.Localization(__file__, 3350, 20), getitem___144330, n_144328)
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'n' (line 3350)
            n_144332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 44), 'n')
            # Getting the type of 'mask' (line 3350)
            mask_144333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 39), 'mask')
            # Obtaining the member '__getitem__' of a type (line 3350)
            getitem___144334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3350, 39), mask_144333, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3350)
            subscript_call_result_144335 = invoke(stypy.reporting.localization.Localization(__file__, 3350, 39), getitem___144334, n_144332)
            
            # Applying the binary operator '|=' (line 3350)
            result_ior_144336 = python_operator(stypy.reporting.localization.Localization(__file__, 3350, 20), '|=', subscript_call_result_144331, subscript_call_result_144335)
            # Getting the type of 'current_mask' (line 3350)
            current_mask_144337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 20), 'current_mask')
            # Getting the type of 'n' (line 3350)
            n_144338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 33), 'n')
            # Storing an element on a container (line 3350)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3350, 20), current_mask_144337, (n_144338, result_ior_144336))
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 3348)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to isinstance(...): (line 3354)
            # Processing the call arguments (line 3354)
            # Getting the type of 'mask' (line 3354)
            mask_144340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 28), 'mask', False)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3354)
            tuple_144341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3354, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3354)
            # Adding element type (line 3354)
            # Getting the type of 'int' (line 3354)
            int_144342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 35), 'int', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3354, 35), tuple_144341, int_144342)
            # Adding element type (line 3354)
            # Getting the type of 'float' (line 3354)
            float_144343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 40), 'float', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3354, 35), tuple_144341, float_144343)
            # Adding element type (line 3354)
            # Getting the type of 'np' (line 3354)
            np_144344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 47), 'np', False)
            # Obtaining the member 'bool_' of a type (line 3354)
            bool__144345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3354, 47), np_144344, 'bool_')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3354, 35), tuple_144341, bool__144345)
            # Adding element type (line 3354)
            # Getting the type of 'np' (line 3354)
            np_144346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 57), 'np', False)
            # Obtaining the member 'number' of a type (line 3354)
            number_144347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3354, 57), np_144346, 'number')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3354, 35), tuple_144341, number_144347)
            
            # Processing the call keyword arguments (line 3354)
            kwargs_144348 = {}
            # Getting the type of 'isinstance' (line 3354)
            isinstance_144339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 17), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 3354)
            isinstance_call_result_144349 = invoke(stypy.reporting.localization.Localization(__file__, 3354, 17), isinstance_144339, *[mask_144340, tuple_144341], **kwargs_144348)
            
            # Testing the type of an if condition (line 3354)
            if_condition_144350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3354, 17), isinstance_call_result_144349)
            # Assigning a type to the variable 'if_condition_144350' (line 3354)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3354, 17), 'if_condition_144350', if_condition_144350)
            # SSA begins for if statement (line 3354)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Subscript (line 3355):
            
            # Assigning a Name to a Subscript (line 3355):
            # Getting the type of 'mask' (line 3355)
            mask_144351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 36), 'mask')
            # Getting the type of 'current_mask' (line 3355)
            current_mask_144352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 16), 'current_mask')
            Ellipsis_144353 = Ellipsis
            # Storing an element on a container (line 3355)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3355, 16), current_mask_144352, (Ellipsis_144353, mask_144351))
            # SSA branch for the else part of an if statement (line 3354)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 3358):
            
            # Assigning a Name to a Attribute (line 3358):
            # Getting the type of 'mask' (line 3358)
            mask_144354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3358, 36), 'mask')
            # Getting the type of 'current_mask' (line 3358)
            current_mask_144355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3358, 16), 'current_mask')
            # Setting the type of the member 'flat' of a type (line 3358)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3358, 16), current_mask_144355, 'flat', mask_144354)
            # SSA join for if statement (line 3354)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 3348)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_144225 and more_types_in_union_144226):
                # SSA join for if statement (line 3312)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'current_mask' (line 3360)
        current_mask_144356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3360, 11), 'current_mask')
        # Obtaining the member 'shape' of a type (line 3360)
        shape_144357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3360, 11), current_mask_144356, 'shape')
        # Testing the type of an if condition (line 3360)
        if_condition_144358 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3360, 8), shape_144357)
        # Assigning a type to the variable 'if_condition_144358' (line 3360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3360, 8), 'if_condition_144358', if_condition_144358)
        # SSA begins for if statement (line 3360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 3361):
        
        # Assigning a Attribute to a Attribute (line 3361):
        # Getting the type of 'self' (line 3361)
        self_144359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3361, 33), 'self')
        # Obtaining the member 'shape' of a type (line 3361)
        shape_144360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3361, 33), self_144359, 'shape')
        # Getting the type of 'current_mask' (line 3361)
        current_mask_144361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3361, 12), 'current_mask')
        # Setting the type of the member 'shape' of a type (line 3361)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3361, 12), current_mask_144361, 'shape', shape_144360)
        # SSA join for if statement (line 3360)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 3362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3362, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of '__setmask__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setmask__' in the type store
        # Getting the type of 'stypy_return_type' (line 3295)
        stypy_return_type_144362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144362)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setmask__'
        return stypy_return_type_144362

    
    # Assigning a Name to a Name (line 3364):

    @norecursion
    def _get_mask(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_mask'
        module_type_store = module_type_store.open_function_context('_get_mask', 3366, 4, False)
        # Assigning a type to the variable 'self' (line 3367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3367, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray._get_mask.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray._get_mask.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray._get_mask.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray._get_mask.__dict__.__setitem__('stypy_function_name', 'MaskedArray._get_mask')
        MaskedArray._get_mask.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray._get_mask.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray._get_mask.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray._get_mask.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray._get_mask.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray._get_mask.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray._get_mask.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray._get_mask', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_mask', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_mask(...)' code ##################

        str_144363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3369, (-1)), 'str', 'Return the current mask.\n\n        ')
        # Getting the type of 'self' (line 3372)
        self_144364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3372, 15), 'self')
        # Obtaining the member '_mask' of a type (line 3372)
        _mask_144365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3372, 15), self_144364, '_mask')
        # Assigning a type to the variable 'stypy_return_type' (line 3372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3372, 8), 'stypy_return_type', _mask_144365)
        
        # ################# End of '_get_mask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_mask' in the type store
        # Getting the type of 'stypy_return_type' (line 3366)
        stypy_return_type_144366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3366, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144366)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_mask'
        return stypy_return_type_144366

    
    # Assigning a Call to a Name (line 3374):

    @norecursion
    def _get_recordmask(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_recordmask'
        module_type_store = module_type_store.open_function_context('_get_recordmask', 3376, 4, False)
        # Assigning a type to the variable 'self' (line 3377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3377, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_function_name', 'MaskedArray._get_recordmask')
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray._get_recordmask.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray._get_recordmask', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_recordmask', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_recordmask(...)' code ##################

        str_144367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3382, (-1)), 'str', '\n        Return the mask of the records.\n\n        A record is masked when all the fields are masked.\n\n        ')
        
        # Assigning a Call to a Name (line 3383):
        
        # Assigning a Call to a Name (line 3383):
        
        # Call to view(...): (line 3383)
        # Processing the call arguments (line 3383)
        # Getting the type of 'ndarray' (line 3383)
        ndarray_144371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3383, 32), 'ndarray', False)
        # Processing the call keyword arguments (line 3383)
        kwargs_144372 = {}
        # Getting the type of 'self' (line 3383)
        self_144368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3383, 16), 'self', False)
        # Obtaining the member '_mask' of a type (line 3383)
        _mask_144369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3383, 16), self_144368, '_mask')
        # Obtaining the member 'view' of a type (line 3383)
        view_144370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3383, 16), _mask_144369, 'view')
        # Calling view(args, kwargs) (line 3383)
        view_call_result_144373 = invoke(stypy.reporting.localization.Localization(__file__, 3383, 16), view_144370, *[ndarray_144371], **kwargs_144372)
        
        # Assigning a type to the variable '_mask' (line 3383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3383, 8), '_mask', view_call_result_144373)
        
        # Type idiom detected: calculating its left and rigth part (line 3384)
        # Getting the type of '_mask' (line 3384)
        _mask_144374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3384, 11), '_mask')
        # Obtaining the member 'dtype' of a type (line 3384)
        dtype_144375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3384, 11), _mask_144374, 'dtype')
        # Obtaining the member 'names' of a type (line 3384)
        names_144376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3384, 11), dtype_144375, 'names')
        # Getting the type of 'None' (line 3384)
        None_144377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3384, 32), 'None')
        
        (may_be_144378, more_types_in_union_144379) = may_be_none(names_144376, None_144377)

        if may_be_144378:

            if more_types_in_union_144379:
                # Runtime conditional SSA (line 3384)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of '_mask' (line 3385)
            _mask_144380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 19), '_mask')
            # Assigning a type to the variable 'stypy_return_type' (line 3385)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3385, 12), 'stypy_return_type', _mask_144380)

            if more_types_in_union_144379:
                # SSA join for if statement (line 3384)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to all(...): (line 3386)
        # Processing the call arguments (line 3386)
        
        # Call to flatten_structured_array(...): (line 3386)
        # Processing the call arguments (line 3386)
        # Getting the type of '_mask' (line 3386)
        _mask_144384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 47), '_mask', False)
        # Processing the call keyword arguments (line 3386)
        kwargs_144385 = {}
        # Getting the type of 'flatten_structured_array' (line 3386)
        flatten_structured_array_144383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 22), 'flatten_structured_array', False)
        # Calling flatten_structured_array(args, kwargs) (line 3386)
        flatten_structured_array_call_result_144386 = invoke(stypy.reporting.localization.Localization(__file__, 3386, 22), flatten_structured_array_144383, *[_mask_144384], **kwargs_144385)
        
        # Processing the call keyword arguments (line 3386)
        int_144387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3386, 60), 'int')
        keyword_144388 = int_144387
        kwargs_144389 = {'axis': keyword_144388}
        # Getting the type of 'np' (line 3386)
        np_144381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 15), 'np', False)
        # Obtaining the member 'all' of a type (line 3386)
        all_144382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3386, 15), np_144381, 'all')
        # Calling all(args, kwargs) (line 3386)
        all_call_result_144390 = invoke(stypy.reporting.localization.Localization(__file__, 3386, 15), all_144382, *[flatten_structured_array_call_result_144386], **kwargs_144389)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3386, 8), 'stypy_return_type', all_call_result_144390)
        
        # ################# End of '_get_recordmask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_recordmask' in the type store
        # Getting the type of 'stypy_return_type' (line 3376)
        stypy_return_type_144391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3376, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144391)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_recordmask'
        return stypy_return_type_144391


    @norecursion
    def _set_recordmask(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_recordmask'
        module_type_store = module_type_store.open_function_context('_set_recordmask', 3388, 4, False)
        # Assigning a type to the variable 'self' (line 3389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3389, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_function_name', 'MaskedArray._set_recordmask')
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray._set_recordmask.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray._set_recordmask', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_recordmask', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_recordmask(...)' code ##################

        str_144392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3394, (-1)), 'str', '\n        Return the mask of the records.\n\n        A record is masked when all the fields are masked.\n\n        ')
        
        # Call to NotImplementedError(...): (line 3395)
        # Processing the call arguments (line 3395)
        str_144394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3395, 34), 'str', 'Coming soon: setting the mask per records!')
        # Processing the call keyword arguments (line 3395)
        kwargs_144395 = {}
        # Getting the type of 'NotImplementedError' (line 3395)
        NotImplementedError_144393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3395, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 3395)
        NotImplementedError_call_result_144396 = invoke(stypy.reporting.localization.Localization(__file__, 3395, 14), NotImplementedError_144393, *[str_144394], **kwargs_144395)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3395, 8), NotImplementedError_call_result_144396, 'raise parameter', BaseException)
        
        # ################# End of '_set_recordmask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_recordmask' in the type store
        # Getting the type of 'stypy_return_type' (line 3388)
        stypy_return_type_144397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144397)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_recordmask'
        return stypy_return_type_144397

    
    # Assigning a Call to a Name (line 3397):

    @norecursion
    def harden_mask(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'harden_mask'
        module_type_store = module_type_store.open_function_context('harden_mask', 3399, 4, False)
        # Assigning a type to the variable 'self' (line 3400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3400, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_function_name', 'MaskedArray.harden_mask')
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.harden_mask.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.harden_mask', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'harden_mask', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'harden_mask(...)' code ##################

        str_144398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3410, (-1)), 'str', '\n        Force the mask to hard.\n\n        Whether the mask of a masked array is hard or soft is determined by\n        its `hardmask` property. `harden_mask` sets `hardmask` to True.\n\n        See Also\n        --------\n        hardmask\n\n        ')
        
        # Assigning a Name to a Attribute (line 3411):
        
        # Assigning a Name to a Attribute (line 3411):
        # Getting the type of 'True' (line 3411)
        True_144399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 25), 'True')
        # Getting the type of 'self' (line 3411)
        self_144400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 8), 'self')
        # Setting the type of the member '_hardmask' of a type (line 3411)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3411, 8), self_144400, '_hardmask', True_144399)
        # Getting the type of 'self' (line 3412)
        self_144401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 3412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 8), 'stypy_return_type', self_144401)
        
        # ################# End of 'harden_mask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'harden_mask' in the type store
        # Getting the type of 'stypy_return_type' (line 3399)
        stypy_return_type_144402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144402)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'harden_mask'
        return stypy_return_type_144402


    @norecursion
    def soften_mask(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'soften_mask'
        module_type_store = module_type_store.open_function_context('soften_mask', 3414, 4, False)
        # Assigning a type to the variable 'self' (line 3415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3415, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_function_name', 'MaskedArray.soften_mask')
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.soften_mask.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.soften_mask', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'soften_mask', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'soften_mask(...)' code ##################

        str_144403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3425, (-1)), 'str', '\n        Force the mask to soft.\n\n        Whether the mask of a masked array is hard or soft is determined by\n        its `hardmask` property. `soften_mask` sets `hardmask` to False.\n\n        See Also\n        --------\n        hardmask\n\n        ')
        
        # Assigning a Name to a Attribute (line 3426):
        
        # Assigning a Name to a Attribute (line 3426):
        # Getting the type of 'False' (line 3426)
        False_144404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3426, 25), 'False')
        # Getting the type of 'self' (line 3426)
        self_144405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3426, 8), 'self')
        # Setting the type of the member '_hardmask' of a type (line 3426)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3426, 8), self_144405, '_hardmask', False_144404)
        # Getting the type of 'self' (line 3427)
        self_144406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 3427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3427, 8), 'stypy_return_type', self_144406)
        
        # ################# End of 'soften_mask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'soften_mask' in the type store
        # Getting the type of 'stypy_return_type' (line 3414)
        stypy_return_type_144407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144407)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'soften_mask'
        return stypy_return_type_144407

    
    # Assigning a Call to a Name (line 3429):

    @norecursion
    def unshare_mask(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'unshare_mask'
        module_type_store = module_type_store.open_function_context('unshare_mask', 3432, 4, False)
        # Assigning a type to the variable 'self' (line 3433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3433, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_function_name', 'MaskedArray.unshare_mask')
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.unshare_mask.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.unshare_mask', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'unshare_mask', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'unshare_mask(...)' code ##################

        str_144408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3444, (-1)), 'str', '\n        Copy the mask and set the sharedmask flag to False.\n\n        Whether the mask is shared between masked arrays can be seen from\n        the `sharedmask` property. `unshare_mask` ensures the mask is not shared.\n        A copy of the mask is only made if it was shared.\n\n        See Also\n        --------\n        sharedmask\n\n        ')
        
        # Getting the type of 'self' (line 3445)
        self_144409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3445, 11), 'self')
        # Obtaining the member '_sharedmask' of a type (line 3445)
        _sharedmask_144410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3445, 11), self_144409, '_sharedmask')
        # Testing the type of an if condition (line 3445)
        if_condition_144411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3445, 8), _sharedmask_144410)
        # Assigning a type to the variable 'if_condition_144411' (line 3445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3445, 8), 'if_condition_144411', if_condition_144411)
        # SSA begins for if statement (line 3445)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 3446):
        
        # Assigning a Call to a Attribute (line 3446):
        
        # Call to copy(...): (line 3446)
        # Processing the call keyword arguments (line 3446)
        kwargs_144415 = {}
        # Getting the type of 'self' (line 3446)
        self_144412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3446, 25), 'self', False)
        # Obtaining the member '_mask' of a type (line 3446)
        _mask_144413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3446, 25), self_144412, '_mask')
        # Obtaining the member 'copy' of a type (line 3446)
        copy_144414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3446, 25), _mask_144413, 'copy')
        # Calling copy(args, kwargs) (line 3446)
        copy_call_result_144416 = invoke(stypy.reporting.localization.Localization(__file__, 3446, 25), copy_144414, *[], **kwargs_144415)
        
        # Getting the type of 'self' (line 3446)
        self_144417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3446, 12), 'self')
        # Setting the type of the member '_mask' of a type (line 3446)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3446, 12), self_144417, '_mask', copy_call_result_144416)
        
        # Assigning a Name to a Attribute (line 3447):
        
        # Assigning a Name to a Attribute (line 3447):
        # Getting the type of 'False' (line 3447)
        False_144418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3447, 31), 'False')
        # Getting the type of 'self' (line 3447)
        self_144419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3447, 12), 'self')
        # Setting the type of the member '_sharedmask' of a type (line 3447)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3447, 12), self_144419, '_sharedmask', False_144418)
        # SSA join for if statement (line 3445)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 3448)
        self_144420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3448, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 3448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3448, 8), 'stypy_return_type', self_144420)
        
        # ################# End of 'unshare_mask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'unshare_mask' in the type store
        # Getting the type of 'stypy_return_type' (line 3432)
        stypy_return_type_144421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3432, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144421)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'unshare_mask'
        return stypy_return_type_144421

    
    # Assigning a Call to a Name (line 3450):

    @norecursion
    def shrink_mask(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'shrink_mask'
        module_type_store = module_type_store.open_function_context('shrink_mask', 3453, 4, False)
        # Assigning a type to the variable 'self' (line 3454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3454, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_function_name', 'MaskedArray.shrink_mask')
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.shrink_mask.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.shrink_mask', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'shrink_mask', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'shrink_mask(...)' code ##################

        str_144422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3475, (-1)), 'str', '\n        Reduce a mask to nomask when possible.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        None\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2 ], [3, 4]], mask=[0]*4)\n        >>> x.mask\n        array([[False, False],\n               [False, False]], dtype=bool)\n        >>> x.shrink_mask()\n        >>> x.mask\n        False\n\n        ')
        
        # Assigning a Attribute to a Name (line 3476):
        
        # Assigning a Attribute to a Name (line 3476):
        # Getting the type of 'self' (line 3476)
        self_144423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3476, 12), 'self')
        # Obtaining the member '_mask' of a type (line 3476)
        _mask_144424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3476, 12), self_144423, '_mask')
        # Assigning a type to the variable 'm' (line 3476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3476, 8), 'm', _mask_144424)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'm' (line 3477)
        m_144425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3477, 11), 'm')
        # Obtaining the member 'ndim' of a type (line 3477)
        ndim_144426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3477, 11), m_144425, 'ndim')
        
        
        # Call to any(...): (line 3477)
        # Processing the call keyword arguments (line 3477)
        kwargs_144429 = {}
        # Getting the type of 'm' (line 3477)
        m_144427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3477, 26), 'm', False)
        # Obtaining the member 'any' of a type (line 3477)
        any_144428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3477, 26), m_144427, 'any')
        # Calling any(args, kwargs) (line 3477)
        any_call_result_144430 = invoke(stypy.reporting.localization.Localization(__file__, 3477, 26), any_144428, *[], **kwargs_144429)
        
        # Applying the 'not' unary operator (line 3477)
        result_not__144431 = python_operator(stypy.reporting.localization.Localization(__file__, 3477, 22), 'not', any_call_result_144430)
        
        # Applying the binary operator 'and' (line 3477)
        result_and_keyword_144432 = python_operator(stypy.reporting.localization.Localization(__file__, 3477, 11), 'and', ndim_144426, result_not__144431)
        
        # Testing the type of an if condition (line 3477)
        if_condition_144433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3477, 8), result_and_keyword_144432)
        # Assigning a type to the variable 'if_condition_144433' (line 3477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3477, 8), 'if_condition_144433', if_condition_144433)
        # SSA begins for if statement (line 3477)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 3478):
        
        # Assigning a Name to a Attribute (line 3478):
        # Getting the type of 'nomask' (line 3478)
        nomask_144434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3478, 25), 'nomask')
        # Getting the type of 'self' (line 3478)
        self_144435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3478, 12), 'self')
        # Setting the type of the member '_mask' of a type (line 3478)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3478, 12), self_144435, '_mask', nomask_144434)
        # SSA join for if statement (line 3477)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 3479)
        self_144436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 3479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3479, 8), 'stypy_return_type', self_144436)
        
        # ################# End of 'shrink_mask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'shrink_mask' in the type store
        # Getting the type of 'stypy_return_type' (line 3453)
        stypy_return_type_144437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3453, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144437)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'shrink_mask'
        return stypy_return_type_144437

    
    # Assigning a Call to a Name (line 3481):

    @norecursion
    def _get_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_data'
        module_type_store = module_type_store.open_function_context('_get_data', 3484, 4, False)
        # Assigning a type to the variable 'self' (line 3485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3485, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray._get_data.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray._get_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray._get_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray._get_data.__dict__.__setitem__('stypy_function_name', 'MaskedArray._get_data')
        MaskedArray._get_data.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray._get_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray._get_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray._get_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray._get_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray._get_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray._get_data.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray._get_data', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_data', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_data(...)' code ##################

        str_144438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3488, (-1)), 'str', 'Return the current data, as a view of the original\n        underlying data.\n\n        ')
        
        # Call to view(...): (line 3489)
        # Processing the call arguments (line 3489)
        # Getting the type of 'self' (line 3489)
        self_144441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3489, 28), 'self', False)
        # Getting the type of 'self' (line 3489)
        self_144442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3489, 34), 'self', False)
        # Obtaining the member '_baseclass' of a type (line 3489)
        _baseclass_144443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3489, 34), self_144442, '_baseclass')
        # Processing the call keyword arguments (line 3489)
        kwargs_144444 = {}
        # Getting the type of 'ndarray' (line 3489)
        ndarray_144439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3489, 15), 'ndarray', False)
        # Obtaining the member 'view' of a type (line 3489)
        view_144440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3489, 15), ndarray_144439, 'view')
        # Calling view(args, kwargs) (line 3489)
        view_call_result_144445 = invoke(stypy.reporting.localization.Localization(__file__, 3489, 15), view_144440, *[self_144441, _baseclass_144443], **kwargs_144444)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3489, 8), 'stypy_return_type', view_call_result_144445)
        
        # ################# End of '_get_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_data' in the type store
        # Getting the type of 'stypy_return_type' (line 3484)
        stypy_return_type_144446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_data'
        return stypy_return_type_144446

    
    # Assigning a Call to a Name (line 3491):
    
    # Assigning a Call to a Name (line 3492):

    @norecursion
    def _get_flat(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_flat'
        module_type_store = module_type_store.open_function_context('_get_flat', 3494, 4, False)
        # Assigning a type to the variable 'self' (line 3495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3495, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray._get_flat.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray._get_flat.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray._get_flat.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray._get_flat.__dict__.__setitem__('stypy_function_name', 'MaskedArray._get_flat')
        MaskedArray._get_flat.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray._get_flat.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray._get_flat.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray._get_flat.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray._get_flat.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray._get_flat.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray._get_flat.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray._get_flat', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_flat', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_flat(...)' code ##################

        str_144447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3495, 8), 'str', 'Return a flat iterator.')
        
        # Call to MaskedIterator(...): (line 3496)
        # Processing the call arguments (line 3496)
        # Getting the type of 'self' (line 3496)
        self_144449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3496, 30), 'self', False)
        # Processing the call keyword arguments (line 3496)
        kwargs_144450 = {}
        # Getting the type of 'MaskedIterator' (line 3496)
        MaskedIterator_144448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3496, 15), 'MaskedIterator', False)
        # Calling MaskedIterator(args, kwargs) (line 3496)
        MaskedIterator_call_result_144451 = invoke(stypy.reporting.localization.Localization(__file__, 3496, 15), MaskedIterator_144448, *[self_144449], **kwargs_144450)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3496, 8), 'stypy_return_type', MaskedIterator_call_result_144451)
        
        # ################# End of '_get_flat(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_flat' in the type store
        # Getting the type of 'stypy_return_type' (line 3494)
        stypy_return_type_144452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144452)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_flat'
        return stypy_return_type_144452


    @norecursion
    def _set_flat(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_flat'
        module_type_store = module_type_store.open_function_context('_set_flat', 3498, 4, False)
        # Assigning a type to the variable 'self' (line 3499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray._set_flat.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray._set_flat.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray._set_flat.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray._set_flat.__dict__.__setitem__('stypy_function_name', 'MaskedArray._set_flat')
        MaskedArray._set_flat.__dict__.__setitem__('stypy_param_names_list', ['value'])
        MaskedArray._set_flat.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray._set_flat.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray._set_flat.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray._set_flat.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray._set_flat.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray._set_flat.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray._set_flat', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_flat', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_flat(...)' code ##################

        str_144453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3499, 8), 'str', 'Set a flattened version of self to value.')
        
        # Assigning a Call to a Name (line 3500):
        
        # Assigning a Call to a Name (line 3500):
        
        # Call to ravel(...): (line 3500)
        # Processing the call keyword arguments (line 3500)
        kwargs_144456 = {}
        # Getting the type of 'self' (line 3500)
        self_144454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3500, 12), 'self', False)
        # Obtaining the member 'ravel' of a type (line 3500)
        ravel_144455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3500, 12), self_144454, 'ravel')
        # Calling ravel(args, kwargs) (line 3500)
        ravel_call_result_144457 = invoke(stypy.reporting.localization.Localization(__file__, 3500, 12), ravel_144455, *[], **kwargs_144456)
        
        # Assigning a type to the variable 'y' (line 3500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3500, 8), 'y', ravel_call_result_144457)
        
        # Assigning a Name to a Subscript (line 3501):
        
        # Assigning a Name to a Subscript (line 3501):
        # Getting the type of 'value' (line 3501)
        value_144458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 15), 'value')
        # Getting the type of 'y' (line 3501)
        y_144459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 8), 'y')
        slice_144460 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3501, 8), None, None, None)
        # Storing an element on a container (line 3501)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3501, 8), y_144459, (slice_144460, value_144458))
        
        # ################# End of '_set_flat(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_flat' in the type store
        # Getting the type of 'stypy_return_type' (line 3498)
        stypy_return_type_144461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3498, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144461)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_flat'
        return stypy_return_type_144461

    
    # Assigning a Call to a Name (line 3503):

    @norecursion
    def get_fill_value(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_fill_value'
        module_type_store = module_type_store.open_function_context('get_fill_value', 3506, 4, False)
        # Assigning a type to the variable 'self' (line 3507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3507, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_function_name', 'MaskedArray.get_fill_value')
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.get_fill_value.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.get_fill_value', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_fill_value', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_fill_value(...)' code ##################

        str_144462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3529, (-1)), 'str', '\n        Return the filling value of the masked array.\n\n        Returns\n        -------\n        fill_value : scalar\n            The filling value.\n\n        Examples\n        --------\n        >>> for dt in [np.int32, np.int64, np.float64, np.complex128]:\n        ...     np.ma.array([0, 1], dtype=dt).get_fill_value()\n        ...\n        999999\n        999999\n        1e+20\n        (1e+20+0j)\n\n        >>> x = np.ma.array([0, 1.], fill_value=-np.inf)\n        >>> x.get_fill_value()\n        -inf\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 3530)
        # Getting the type of 'self' (line 3530)
        self_144463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 11), 'self')
        # Obtaining the member '_fill_value' of a type (line 3530)
        _fill_value_144464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3530, 11), self_144463, '_fill_value')
        # Getting the type of 'None' (line 3530)
        None_144465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 31), 'None')
        
        (may_be_144466, more_types_in_union_144467) = may_be_none(_fill_value_144464, None_144465)

        if may_be_144466:

            if more_types_in_union_144467:
                # Runtime conditional SSA (line 3530)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 3531):
            
            # Assigning a Call to a Attribute (line 3531):
            
            # Call to _check_fill_value(...): (line 3531)
            # Processing the call arguments (line 3531)
            # Getting the type of 'None' (line 3531)
            None_144469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 49), 'None', False)
            # Getting the type of 'self' (line 3531)
            self_144470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 55), 'self', False)
            # Obtaining the member 'dtype' of a type (line 3531)
            dtype_144471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3531, 55), self_144470, 'dtype')
            # Processing the call keyword arguments (line 3531)
            kwargs_144472 = {}
            # Getting the type of '_check_fill_value' (line 3531)
            _check_fill_value_144468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 31), '_check_fill_value', False)
            # Calling _check_fill_value(args, kwargs) (line 3531)
            _check_fill_value_call_result_144473 = invoke(stypy.reporting.localization.Localization(__file__, 3531, 31), _check_fill_value_144468, *[None_144469, dtype_144471], **kwargs_144472)
            
            # Getting the type of 'self' (line 3531)
            self_144474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 12), 'self')
            # Setting the type of the member '_fill_value' of a type (line 3531)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3531, 12), self_144474, '_fill_value', _check_fill_value_call_result_144473)

            if more_types_in_union_144467:
                # SSA join for if statement (line 3530)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 3532)
        tuple_144475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3532, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3532)
        
        # Getting the type of 'self' (line 3532)
        self_144476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 15), 'self')
        # Obtaining the member '_fill_value' of a type (line 3532)
        _fill_value_144477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3532, 15), self_144476, '_fill_value')
        # Obtaining the member '__getitem__' of a type (line 3532)
        getitem___144478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3532, 15), _fill_value_144477, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3532)
        subscript_call_result_144479 = invoke(stypy.reporting.localization.Localization(__file__, 3532, 15), getitem___144478, tuple_144475)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3532, 8), 'stypy_return_type', subscript_call_result_144479)
        
        # ################# End of 'get_fill_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_fill_value' in the type store
        # Getting the type of 'stypy_return_type' (line 3506)
        stypy_return_type_144480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3506, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144480)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_fill_value'
        return stypy_return_type_144480


    @norecursion
    def set_fill_value(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3534)
        None_144481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 35), 'None')
        defaults = [None_144481]
        # Create a new context for function 'set_fill_value'
        module_type_store = module_type_store.open_function_context('set_fill_value', 3534, 4, False)
        # Assigning a type to the variable 'self' (line 3535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3535, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_function_name', 'MaskedArray.set_fill_value')
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_param_names_list', ['value'])
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.set_fill_value.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.set_fill_value', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_fill_value', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_fill_value(...)' code ##################

        str_144482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3563, (-1)), 'str', '\n        Set the filling value of the masked array.\n\n        Parameters\n        ----------\n        value : scalar, optional\n            The new filling value. Default is None, in which case a default\n            based on the data type is used.\n\n        See Also\n        --------\n        ma.set_fill_value : Equivalent function.\n\n        Examples\n        --------\n        >>> x = np.ma.array([0, 1.], fill_value=-np.inf)\n        >>> x.fill_value\n        -inf\n        >>> x.set_fill_value(np.pi)\n        >>> x.fill_value\n        3.1415926535897931\n\n        Reset to default:\n\n        >>> x.set_fill_value()\n        >>> x.fill_value\n        1e+20\n\n        ')
        
        # Assigning a Call to a Name (line 3564):
        
        # Assigning a Call to a Name (line 3564):
        
        # Call to _check_fill_value(...): (line 3564)
        # Processing the call arguments (line 3564)
        # Getting the type of 'value' (line 3564)
        value_144484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3564, 35), 'value', False)
        # Getting the type of 'self' (line 3564)
        self_144485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3564, 42), 'self', False)
        # Obtaining the member 'dtype' of a type (line 3564)
        dtype_144486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3564, 42), self_144485, 'dtype')
        # Processing the call keyword arguments (line 3564)
        kwargs_144487 = {}
        # Getting the type of '_check_fill_value' (line 3564)
        _check_fill_value_144483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3564, 17), '_check_fill_value', False)
        # Calling _check_fill_value(args, kwargs) (line 3564)
        _check_fill_value_call_result_144488 = invoke(stypy.reporting.localization.Localization(__file__, 3564, 17), _check_fill_value_144483, *[value_144484, dtype_144486], **kwargs_144487)
        
        # Assigning a type to the variable 'target' (line 3564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3564, 8), 'target', _check_fill_value_call_result_144488)
        
        # Assigning a Attribute to a Name (line 3565):
        
        # Assigning a Attribute to a Name (line 3565):
        # Getting the type of 'self' (line 3565)
        self_144489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3565, 22), 'self')
        # Obtaining the member '_fill_value' of a type (line 3565)
        _fill_value_144490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3565, 22), self_144489, '_fill_value')
        # Assigning a type to the variable '_fill_value' (line 3565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3565, 8), '_fill_value', _fill_value_144490)
        
        # Type idiom detected: calculating its left and rigth part (line 3566)
        # Getting the type of '_fill_value' (line 3566)
        _fill_value_144491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 11), '_fill_value')
        # Getting the type of 'None' (line 3566)
        None_144492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 26), 'None')
        
        (may_be_144493, more_types_in_union_144494) = may_be_none(_fill_value_144491, None_144492)

        if may_be_144493:

            if more_types_in_union_144494:
                # Runtime conditional SSA (line 3566)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 3568):
            
            # Assigning a Name to a Attribute (line 3568):
            # Getting the type of 'target' (line 3568)
            target_144495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 31), 'target')
            # Getting the type of 'self' (line 3568)
            self_144496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 12), 'self')
            # Setting the type of the member '_fill_value' of a type (line 3568)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3568, 12), self_144496, '_fill_value', target_144495)

            if more_types_in_union_144494:
                # Runtime conditional SSA for else branch (line 3566)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_144493) or more_types_in_union_144494):
            
            # Assigning a Name to a Subscript (line 3571):
            
            # Assigning a Name to a Subscript (line 3571):
            # Getting the type of 'target' (line 3571)
            target_144497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 30), 'target')
            # Getting the type of '_fill_value' (line 3571)
            _fill_value_144498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 12), '_fill_value')
            
            # Obtaining an instance of the builtin type 'tuple' (line 3571)
            tuple_144499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3571, 24), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3571)
            
            # Storing an element on a container (line 3571)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3571, 12), _fill_value_144498, (tuple_144499, target_144497))

            if (may_be_144493 and more_types_in_union_144494):
                # SSA join for if statement (line 3566)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'set_fill_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_fill_value' in the type store
        # Getting the type of 'stypy_return_type' (line 3534)
        stypy_return_type_144500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144500)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_fill_value'
        return stypy_return_type_144500

    
    # Assigning a Call to a Name (line 3573):

    @norecursion
    def filled(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3576)
        None_144501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 32), 'None')
        defaults = [None_144501]
        # Create a new context for function 'filled'
        module_type_store = module_type_store.open_function_context('filled', 3576, 4, False)
        # Assigning a type to the variable 'self' (line 3577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3577, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.filled.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.filled.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.filled.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.filled.__dict__.__setitem__('stypy_function_name', 'MaskedArray.filled')
        MaskedArray.filled.__dict__.__setitem__('stypy_param_names_list', ['fill_value'])
        MaskedArray.filled.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.filled.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.filled.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.filled.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.filled.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.filled.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.filled', ['fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'filled', localization, ['fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'filled(...)' code ##################

        str_144502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3616, (-1)), 'str', "\n        Return a copy of self, with masked values filled with a given value.\n        **However**, if there are no masked values to fill, self will be\n        returned instead as an ndarray.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            The value to use for invalid entries (None by default).\n            If None, the `fill_value` attribute of the array is used instead.\n\n        Returns\n        -------\n        filled_array : ndarray\n            A copy of ``self`` with invalid entries replaced by *fill_value*\n            (be it the function argument or the attribute of ``self``), or\n            ``self`` itself as an ndarray if there are no invalid entries to\n            be replaced.\n\n        Notes\n        -----\n        The result is **not** a MaskedArray!\n\n        Examples\n        --------\n        >>> x = np.ma.array([1,2,3,4,5], mask=[0,0,1,0,1], fill_value=-999)\n        >>> x.filled()\n        array([1, 2, -999, 4, -999])\n        >>> type(x.filled())\n        <type 'numpy.ndarray'>\n\n        Subclassing is preserved. This means that if the data part of the masked\n        array is a matrix, `filled` returns a matrix:\n\n        >>> x = np.ma.array(np.matrix([[1, 2], [3, 4]]), mask=[[0, 1], [1, 0]])\n        >>> x.filled()\n        matrix([[     1, 999999],\n                [999999,      4]])\n\n        ")
        
        # Assigning a Attribute to a Name (line 3617):
        
        # Assigning a Attribute to a Name (line 3617):
        # Getting the type of 'self' (line 3617)
        self_144503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 12), 'self')
        # Obtaining the member '_mask' of a type (line 3617)
        _mask_144504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3617, 12), self_144503, '_mask')
        # Assigning a type to the variable 'm' (line 3617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3617, 8), 'm', _mask_144504)
        
        
        # Getting the type of 'm' (line 3618)
        m_144505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3618, 11), 'm')
        # Getting the type of 'nomask' (line 3618)
        nomask_144506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3618, 16), 'nomask')
        # Applying the binary operator 'is' (line 3618)
        result_is__144507 = python_operator(stypy.reporting.localization.Localization(__file__, 3618, 11), 'is', m_144505, nomask_144506)
        
        # Testing the type of an if condition (line 3618)
        if_condition_144508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3618, 8), result_is__144507)
        # Assigning a type to the variable 'if_condition_144508' (line 3618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3618, 8), 'if_condition_144508', if_condition_144508)
        # SSA begins for if statement (line 3618)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 3619)
        self_144509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3619, 19), 'self')
        # Obtaining the member '_data' of a type (line 3619)
        _data_144510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3619, 19), self_144509, '_data')
        # Assigning a type to the variable 'stypy_return_type' (line 3619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3619, 12), 'stypy_return_type', _data_144510)
        # SSA join for if statement (line 3618)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 3621)
        # Getting the type of 'fill_value' (line 3621)
        fill_value_144511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3621, 11), 'fill_value')
        # Getting the type of 'None' (line 3621)
        None_144512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3621, 25), 'None')
        
        (may_be_144513, more_types_in_union_144514) = may_be_none(fill_value_144511, None_144512)

        if may_be_144513:

            if more_types_in_union_144514:
                # Runtime conditional SSA (line 3621)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 3622):
            
            # Assigning a Attribute to a Name (line 3622):
            # Getting the type of 'self' (line 3622)
            self_144515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3622, 25), 'self')
            # Obtaining the member 'fill_value' of a type (line 3622)
            fill_value_144516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3622, 25), self_144515, 'fill_value')
            # Assigning a type to the variable 'fill_value' (line 3622)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3622, 12), 'fill_value', fill_value_144516)

            if more_types_in_union_144514:
                # Runtime conditional SSA for else branch (line 3621)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_144513) or more_types_in_union_144514):
            
            # Assigning a Call to a Name (line 3624):
            
            # Assigning a Call to a Name (line 3624):
            
            # Call to _check_fill_value(...): (line 3624)
            # Processing the call arguments (line 3624)
            # Getting the type of 'fill_value' (line 3624)
            fill_value_144518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3624, 43), 'fill_value', False)
            # Getting the type of 'self' (line 3624)
            self_144519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3624, 55), 'self', False)
            # Obtaining the member 'dtype' of a type (line 3624)
            dtype_144520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3624, 55), self_144519, 'dtype')
            # Processing the call keyword arguments (line 3624)
            kwargs_144521 = {}
            # Getting the type of '_check_fill_value' (line 3624)
            _check_fill_value_144517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3624, 25), '_check_fill_value', False)
            # Calling _check_fill_value(args, kwargs) (line 3624)
            _check_fill_value_call_result_144522 = invoke(stypy.reporting.localization.Localization(__file__, 3624, 25), _check_fill_value_144517, *[fill_value_144518, dtype_144520], **kwargs_144521)
            
            # Assigning a type to the variable 'fill_value' (line 3624)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3624, 12), 'fill_value', _check_fill_value_call_result_144522)

            if (may_be_144513 and more_types_in_union_144514):
                # SSA join for if statement (line 3621)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 3626)
        self_144523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3626, 11), 'self')
        # Getting the type of 'masked_singleton' (line 3626)
        masked_singleton_144524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3626, 19), 'masked_singleton')
        # Applying the binary operator 'is' (line 3626)
        result_is__144525 = python_operator(stypy.reporting.localization.Localization(__file__, 3626, 11), 'is', self_144523, masked_singleton_144524)
        
        # Testing the type of an if condition (line 3626)
        if_condition_144526 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3626, 8), result_is__144525)
        # Assigning a type to the variable 'if_condition_144526' (line 3626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3626, 8), 'if_condition_144526', if_condition_144526)
        # SSA begins for if statement (line 3626)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to asanyarray(...): (line 3627)
        # Processing the call arguments (line 3627)
        # Getting the type of 'fill_value' (line 3627)
        fill_value_144529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 33), 'fill_value', False)
        # Processing the call keyword arguments (line 3627)
        kwargs_144530 = {}
        # Getting the type of 'np' (line 3627)
        np_144527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 19), 'np', False)
        # Obtaining the member 'asanyarray' of a type (line 3627)
        asanyarray_144528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3627, 19), np_144527, 'asanyarray')
        # Calling asanyarray(args, kwargs) (line 3627)
        asanyarray_call_result_144531 = invoke(stypy.reporting.localization.Localization(__file__, 3627, 19), asanyarray_144528, *[fill_value_144529], **kwargs_144530)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 12), 'stypy_return_type', asanyarray_call_result_144531)
        # SSA join for if statement (line 3626)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'm' (line 3629)
        m_144532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 11), 'm')
        # Obtaining the member 'dtype' of a type (line 3629)
        dtype_144533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3629, 11), m_144532, 'dtype')
        # Obtaining the member 'names' of a type (line 3629)
        names_144534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3629, 11), dtype_144533, 'names')
        # Testing the type of an if condition (line 3629)
        if_condition_144535 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3629, 8), names_144534)
        # Assigning a type to the variable 'if_condition_144535' (line 3629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3629, 8), 'if_condition_144535', if_condition_144535)
        # SSA begins for if statement (line 3629)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3630):
        
        # Assigning a Call to a Name (line 3630):
        
        # Call to copy(...): (line 3630)
        # Processing the call arguments (line 3630)
        str_144539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3630, 37), 'str', 'K')
        # Processing the call keyword arguments (line 3630)
        kwargs_144540 = {}
        # Getting the type of 'self' (line 3630)
        self_144536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 21), 'self', False)
        # Obtaining the member '_data' of a type (line 3630)
        _data_144537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3630, 21), self_144536, '_data')
        # Obtaining the member 'copy' of a type (line 3630)
        copy_144538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3630, 21), _data_144537, 'copy')
        # Calling copy(args, kwargs) (line 3630)
        copy_call_result_144541 = invoke(stypy.reporting.localization.Localization(__file__, 3630, 21), copy_144538, *[str_144539], **kwargs_144540)
        
        # Assigning a type to the variable 'result' (line 3630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3630, 12), 'result', copy_call_result_144541)
        
        # Call to _recursive_filled(...): (line 3631)
        # Processing the call arguments (line 3631)
        # Getting the type of 'result' (line 3631)
        result_144543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 30), 'result', False)
        # Getting the type of 'self' (line 3631)
        self_144544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 38), 'self', False)
        # Obtaining the member '_mask' of a type (line 3631)
        _mask_144545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3631, 38), self_144544, '_mask')
        # Getting the type of 'fill_value' (line 3631)
        fill_value_144546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 50), 'fill_value', False)
        # Processing the call keyword arguments (line 3631)
        kwargs_144547 = {}
        # Getting the type of '_recursive_filled' (line 3631)
        _recursive_filled_144542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 12), '_recursive_filled', False)
        # Calling _recursive_filled(args, kwargs) (line 3631)
        _recursive_filled_call_result_144548 = invoke(stypy.reporting.localization.Localization(__file__, 3631, 12), _recursive_filled_144542, *[result_144543, _mask_144545, fill_value_144546], **kwargs_144547)
        
        # SSA branch for the else part of an if statement (line 3629)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to any(...): (line 3632)
        # Processing the call keyword arguments (line 3632)
        kwargs_144551 = {}
        # Getting the type of 'm' (line 3632)
        m_144549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3632, 17), 'm', False)
        # Obtaining the member 'any' of a type (line 3632)
        any_144550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3632, 17), m_144549, 'any')
        # Calling any(args, kwargs) (line 3632)
        any_call_result_144552 = invoke(stypy.reporting.localization.Localization(__file__, 3632, 17), any_144550, *[], **kwargs_144551)
        
        # Applying the 'not' unary operator (line 3632)
        result_not__144553 = python_operator(stypy.reporting.localization.Localization(__file__, 3632, 13), 'not', any_call_result_144552)
        
        # Testing the type of an if condition (line 3632)
        if_condition_144554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3632, 13), result_not__144553)
        # Assigning a type to the variable 'if_condition_144554' (line 3632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3632, 13), 'if_condition_144554', if_condition_144554)
        # SSA begins for if statement (line 3632)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 3633)
        self_144555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3633, 19), 'self')
        # Obtaining the member '_data' of a type (line 3633)
        _data_144556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3633, 19), self_144555, '_data')
        # Assigning a type to the variable 'stypy_return_type' (line 3633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3633, 12), 'stypy_return_type', _data_144556)
        # SSA branch for the else part of an if statement (line 3632)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 3635):
        
        # Assigning a Call to a Name (line 3635):
        
        # Call to copy(...): (line 3635)
        # Processing the call arguments (line 3635)
        str_144560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3635, 37), 'str', 'K')
        # Processing the call keyword arguments (line 3635)
        kwargs_144561 = {}
        # Getting the type of 'self' (line 3635)
        self_144557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 21), 'self', False)
        # Obtaining the member '_data' of a type (line 3635)
        _data_144558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3635, 21), self_144557, '_data')
        # Obtaining the member 'copy' of a type (line 3635)
        copy_144559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3635, 21), _data_144558, 'copy')
        # Calling copy(args, kwargs) (line 3635)
        copy_call_result_144562 = invoke(stypy.reporting.localization.Localization(__file__, 3635, 21), copy_144559, *[str_144560], **kwargs_144561)
        
        # Assigning a type to the variable 'result' (line 3635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3635, 12), 'result', copy_call_result_144562)
        
        
        # SSA begins for try-except statement (line 3636)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to copyto(...): (line 3637)
        # Processing the call arguments (line 3637)
        # Getting the type of 'result' (line 3637)
        result_144565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3637, 26), 'result', False)
        # Getting the type of 'fill_value' (line 3637)
        fill_value_144566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3637, 34), 'fill_value', False)
        # Processing the call keyword arguments (line 3637)
        # Getting the type of 'm' (line 3637)
        m_144567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3637, 52), 'm', False)
        keyword_144568 = m_144567
        kwargs_144569 = {'where': keyword_144568}
        # Getting the type of 'np' (line 3637)
        np_144563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3637, 16), 'np', False)
        # Obtaining the member 'copyto' of a type (line 3637)
        copyto_144564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3637, 16), np_144563, 'copyto')
        # Calling copyto(args, kwargs) (line 3637)
        copyto_call_result_144570 = invoke(stypy.reporting.localization.Localization(__file__, 3637, 16), copyto_144564, *[result_144565, fill_value_144566], **kwargs_144569)
        
        # SSA branch for the except part of a try statement (line 3636)
        # SSA branch for the except 'Tuple' branch of a try statement (line 3636)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 3639):
        
        # Assigning a Call to a Name (line 3639):
        
        # Call to narray(...): (line 3639)
        # Processing the call arguments (line 3639)
        # Getting the type of 'fill_value' (line 3639)
        fill_value_144572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 36), 'fill_value', False)
        # Processing the call keyword arguments (line 3639)
        # Getting the type of 'object' (line 3639)
        object_144573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 54), 'object', False)
        keyword_144574 = object_144573
        kwargs_144575 = {'dtype': keyword_144574}
        # Getting the type of 'narray' (line 3639)
        narray_144571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 29), 'narray', False)
        # Calling narray(args, kwargs) (line 3639)
        narray_call_result_144576 = invoke(stypy.reporting.localization.Localization(__file__, 3639, 29), narray_144571, *[fill_value_144572], **kwargs_144575)
        
        # Assigning a type to the variable 'fill_value' (line 3639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3639, 16), 'fill_value', narray_call_result_144576)
        
        # Assigning a Call to a Name (line 3640):
        
        # Assigning a Call to a Name (line 3640):
        
        # Call to astype(...): (line 3640)
        # Processing the call arguments (line 3640)
        # Getting the type of 'object' (line 3640)
        object_144579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3640, 34), 'object', False)
        # Processing the call keyword arguments (line 3640)
        kwargs_144580 = {}
        # Getting the type of 'result' (line 3640)
        result_144577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3640, 20), 'result', False)
        # Obtaining the member 'astype' of a type (line 3640)
        astype_144578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3640, 20), result_144577, 'astype')
        # Calling astype(args, kwargs) (line 3640)
        astype_call_result_144581 = invoke(stypy.reporting.localization.Localization(__file__, 3640, 20), astype_144578, *[object_144579], **kwargs_144580)
        
        # Assigning a type to the variable 'd' (line 3640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3640, 16), 'd', astype_call_result_144581)
        
        # Assigning a Call to a Name (line 3641):
        
        # Assigning a Call to a Name (line 3641):
        
        # Call to choose(...): (line 3641)
        # Processing the call arguments (line 3641)
        # Getting the type of 'm' (line 3641)
        m_144584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3641, 35), 'm', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3641)
        tuple_144585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3641, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3641)
        # Adding element type (line 3641)
        # Getting the type of 'd' (line 3641)
        d_144586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3641, 39), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3641, 39), tuple_144585, d_144586)
        # Adding element type (line 3641)
        # Getting the type of 'fill_value' (line 3641)
        fill_value_144587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3641, 42), 'fill_value', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3641, 39), tuple_144585, fill_value_144587)
        
        # Processing the call keyword arguments (line 3641)
        kwargs_144588 = {}
        # Getting the type of 'np' (line 3641)
        np_144582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3641, 25), 'np', False)
        # Obtaining the member 'choose' of a type (line 3641)
        choose_144583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3641, 25), np_144582, 'choose')
        # Calling choose(args, kwargs) (line 3641)
        choose_call_result_144589 = invoke(stypy.reporting.localization.Localization(__file__, 3641, 25), choose_144583, *[m_144584, tuple_144585], **kwargs_144588)
        
        # Assigning a type to the variable 'result' (line 3641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3641, 16), 'result', choose_call_result_144589)
        # SSA branch for the except 'IndexError' branch of a try statement (line 3636)
        module_type_store.open_ssa_branch('except')
        
        # Getting the type of 'self' (line 3644)
        self_144590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3644, 19), 'self')
        # Obtaining the member '_data' of a type (line 3644)
        _data_144591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3644, 19), self_144590, '_data')
        # Obtaining the member 'shape' of a type (line 3644)
        shape_144592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3644, 19), _data_144591, 'shape')
        # Testing the type of an if condition (line 3644)
        if_condition_144593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3644, 16), shape_144592)
        # Assigning a type to the variable 'if_condition_144593' (line 3644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3644, 16), 'if_condition_144593', if_condition_144593)
        # SSA begins for if statement (line 3644)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA branch for the else part of an if statement (line 3644)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'm' (line 3646)
        m_144594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3646, 21), 'm')
        # Testing the type of an if condition (line 3646)
        if_condition_144595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3646, 21), m_144594)
        # Assigning a type to the variable 'if_condition_144595' (line 3646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3646, 21), 'if_condition_144595', if_condition_144595)
        # SSA begins for if statement (line 3646)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3647):
        
        # Assigning a Call to a Name (line 3647):
        
        # Call to array(...): (line 3647)
        # Processing the call arguments (line 3647)
        # Getting the type of 'fill_value' (line 3647)
        fill_value_144598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 38), 'fill_value', False)
        # Processing the call keyword arguments (line 3647)
        # Getting the type of 'self' (line 3647)
        self_144599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 56), 'self', False)
        # Obtaining the member 'dtype' of a type (line 3647)
        dtype_144600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3647, 56), self_144599, 'dtype')
        keyword_144601 = dtype_144600
        kwargs_144602 = {'dtype': keyword_144601}
        # Getting the type of 'np' (line 3647)
        np_144596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 29), 'np', False)
        # Obtaining the member 'array' of a type (line 3647)
        array_144597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3647, 29), np_144596, 'array')
        # Calling array(args, kwargs) (line 3647)
        array_call_result_144603 = invoke(stypy.reporting.localization.Localization(__file__, 3647, 29), array_144597, *[fill_value_144598], **kwargs_144602)
        
        # Assigning a type to the variable 'result' (line 3647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3647, 20), 'result', array_call_result_144603)
        # SSA branch for the else part of an if statement (line 3646)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 3649):
        
        # Assigning a Attribute to a Name (line 3649):
        # Getting the type of 'self' (line 3649)
        self_144604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3649, 29), 'self')
        # Obtaining the member '_data' of a type (line 3649)
        _data_144605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3649, 29), self_144604, '_data')
        # Assigning a type to the variable 'result' (line 3649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3649, 20), 'result', _data_144605)
        # SSA join for if statement (line 3646)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3644)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 3636)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3632)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3629)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 3650)
        result_144606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 3650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3650, 8), 'stypy_return_type', result_144606)
        
        # ################# End of 'filled(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'filled' in the type store
        # Getting the type of 'stypy_return_type' (line 3576)
        stypy_return_type_144607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144607)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'filled'
        return stypy_return_type_144607


    @norecursion
    def compressed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'compressed'
        module_type_store = module_type_store.open_function_context('compressed', 3652, 4, False)
        # Assigning a type to the variable 'self' (line 3653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3653, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.compressed.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.compressed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.compressed.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.compressed.__dict__.__setitem__('stypy_function_name', 'MaskedArray.compressed')
        MaskedArray.compressed.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.compressed.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.compressed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.compressed.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.compressed.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.compressed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.compressed.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.compressed', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'compressed', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'compressed(...)' code ##################

        str_144608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3673, (-1)), 'str', "\n        Return all the non-masked data as a 1-D array.\n\n        Returns\n        -------\n        data : ndarray\n            A new `ndarray` holding the non-masked data is returned.\n\n        Notes\n        -----\n        The result is **not** a MaskedArray!\n\n        Examples\n        --------\n        >>> x = np.ma.array(np.arange(5), mask=[0]*2 + [1]*3)\n        >>> x.compressed()\n        array([0, 1])\n        >>> type(x.compressed())\n        <type 'numpy.ndarray'>\n\n        ")
        
        # Assigning a Call to a Name (line 3674):
        
        # Assigning a Call to a Name (line 3674):
        
        # Call to ravel(...): (line 3674)
        # Processing the call arguments (line 3674)
        # Getting the type of 'self' (line 3674)
        self_144611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 29), 'self', False)
        # Obtaining the member '_data' of a type (line 3674)
        _data_144612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3674, 29), self_144611, '_data')
        # Processing the call keyword arguments (line 3674)
        kwargs_144613 = {}
        # Getting the type of 'ndarray' (line 3674)
        ndarray_144609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 15), 'ndarray', False)
        # Obtaining the member 'ravel' of a type (line 3674)
        ravel_144610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3674, 15), ndarray_144609, 'ravel')
        # Calling ravel(args, kwargs) (line 3674)
        ravel_call_result_144614 = invoke(stypy.reporting.localization.Localization(__file__, 3674, 15), ravel_144610, *[_data_144612], **kwargs_144613)
        
        # Assigning a type to the variable 'data' (line 3674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3674, 8), 'data', ravel_call_result_144614)
        
        
        # Getting the type of 'self' (line 3675)
        self_144615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3675, 11), 'self')
        # Obtaining the member '_mask' of a type (line 3675)
        _mask_144616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3675, 11), self_144615, '_mask')
        # Getting the type of 'nomask' (line 3675)
        nomask_144617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3675, 29), 'nomask')
        # Applying the binary operator 'isnot' (line 3675)
        result_is_not_144618 = python_operator(stypy.reporting.localization.Localization(__file__, 3675, 11), 'isnot', _mask_144616, nomask_144617)
        
        # Testing the type of an if condition (line 3675)
        if_condition_144619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3675, 8), result_is_not_144618)
        # Assigning a type to the variable 'if_condition_144619' (line 3675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3675, 8), 'if_condition_144619', if_condition_144619)
        # SSA begins for if statement (line 3675)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3676):
        
        # Assigning a Call to a Name (line 3676):
        
        # Call to compress(...): (line 3676)
        # Processing the call arguments (line 3676)
        
        # Call to logical_not(...): (line 3676)
        # Processing the call arguments (line 3676)
        
        # Call to ravel(...): (line 3676)
        # Processing the call arguments (line 3676)
        # Getting the type of 'self' (line 3676)
        self_144626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 62), 'self', False)
        # Obtaining the member '_mask' of a type (line 3676)
        _mask_144627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3676, 62), self_144626, '_mask')
        # Processing the call keyword arguments (line 3676)
        kwargs_144628 = {}
        # Getting the type of 'ndarray' (line 3676)
        ndarray_144624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 48), 'ndarray', False)
        # Obtaining the member 'ravel' of a type (line 3676)
        ravel_144625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3676, 48), ndarray_144624, 'ravel')
        # Calling ravel(args, kwargs) (line 3676)
        ravel_call_result_144629 = invoke(stypy.reporting.localization.Localization(__file__, 3676, 48), ravel_144625, *[_mask_144627], **kwargs_144628)
        
        # Processing the call keyword arguments (line 3676)
        kwargs_144630 = {}
        # Getting the type of 'np' (line 3676)
        np_144622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 33), 'np', False)
        # Obtaining the member 'logical_not' of a type (line 3676)
        logical_not_144623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3676, 33), np_144622, 'logical_not')
        # Calling logical_not(args, kwargs) (line 3676)
        logical_not_call_result_144631 = invoke(stypy.reporting.localization.Localization(__file__, 3676, 33), logical_not_144623, *[ravel_call_result_144629], **kwargs_144630)
        
        # Processing the call keyword arguments (line 3676)
        kwargs_144632 = {}
        # Getting the type of 'data' (line 3676)
        data_144620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 19), 'data', False)
        # Obtaining the member 'compress' of a type (line 3676)
        compress_144621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3676, 19), data_144620, 'compress')
        # Calling compress(args, kwargs) (line 3676)
        compress_call_result_144633 = invoke(stypy.reporting.localization.Localization(__file__, 3676, 19), compress_144621, *[logical_not_call_result_144631], **kwargs_144632)
        
        # Assigning a type to the variable 'data' (line 3676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3676, 12), 'data', compress_call_result_144633)
        # SSA join for if statement (line 3675)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'data' (line 3677)
        data_144634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3677, 15), 'data')
        # Assigning a type to the variable 'stypy_return_type' (line 3677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3677, 8), 'stypy_return_type', data_144634)
        
        # ################# End of 'compressed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'compressed' in the type store
        # Getting the type of 'stypy_return_type' (line 3652)
        stypy_return_type_144635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144635)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'compressed'
        return stypy_return_type_144635


    @norecursion
    def compress(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 3679)
        None_144636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3679, 39), 'None')
        # Getting the type of 'None' (line 3679)
        None_144637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3679, 49), 'None')
        defaults = [None_144636, None_144637]
        # Create a new context for function 'compress'
        module_type_store = module_type_store.open_function_context('compress', 3679, 4, False)
        # Assigning a type to the variable 'self' (line 3680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3680, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.compress.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.compress.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.compress.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.compress.__dict__.__setitem__('stypy_function_name', 'MaskedArray.compress')
        MaskedArray.compress.__dict__.__setitem__('stypy_param_names_list', ['condition', 'axis', 'out'])
        MaskedArray.compress.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.compress.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.compress.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.compress.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.compress.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.compress.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.compress', ['condition', 'axis', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'compress', localization, ['condition', 'axis', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'compress(...)' code ##################

        str_144638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3733, (-1)), 'str', '\n        Return `a` where condition is ``True``.\n\n        If condition is a `MaskedArray`, missing values are considered\n        as ``False``.\n\n        Parameters\n        ----------\n        condition : var\n            Boolean 1-d array selecting which entries to return. If len(condition)\n            is less than the size of a along the axis, then output is truncated\n            to length of condition array.\n        axis : {None, int}, optional\n            Axis along which the operation must be performed.\n        out : {None, ndarray}, optional\n            Alternative output array in which to place the result. It must have\n            the same shape as the expected output but the type will be cast if\n            necessary.\n\n        Returns\n        -------\n        result : MaskedArray\n            A :class:`MaskedArray` object.\n\n        Notes\n        -----\n        Please note the difference with :meth:`compressed` !\n        The output of :meth:`compress` has a mask, the output of\n        :meth:`compressed` does not.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print(x)\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> x.compress([1, 0, 1])\n        masked_array(data = [1 3],\n              mask = [False False],\n              fill_value=999999)\n\n        >>> x.compress([1, 0, 1], axis=1)\n        masked_array(data =\n         [[1 3]\n         [-- --]\n         [7 9]],\n              mask =\n         [[False False]\n         [ True  True]\n         [False False]],\n              fill_value=999999)\n\n        ')
        
        # Assigning a Tuple to a Tuple (line 3735):
        
        # Assigning a Attribute to a Name (line 3735):
        # Getting the type of 'self' (line 3735)
        self_144639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 26), 'self')
        # Obtaining the member '_data' of a type (line 3735)
        _data_144640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3735, 26), self_144639, '_data')
        # Assigning a type to the variable 'tuple_assignment_139186' (line 3735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3735, 8), 'tuple_assignment_139186', _data_144640)
        
        # Assigning a Attribute to a Name (line 3735):
        # Getting the type of 'self' (line 3735)
        self_144641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 38), 'self')
        # Obtaining the member '_mask' of a type (line 3735)
        _mask_144642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3735, 38), self_144641, '_mask')
        # Assigning a type to the variable 'tuple_assignment_139187' (line 3735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3735, 8), 'tuple_assignment_139187', _mask_144642)
        
        # Assigning a Name to a Name (line 3735):
        # Getting the type of 'tuple_assignment_139186' (line 3735)
        tuple_assignment_139186_144643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 8), 'tuple_assignment_139186')
        # Assigning a type to the variable '_data' (line 3735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3735, 9), '_data', tuple_assignment_139186_144643)
        
        # Assigning a Name to a Name (line 3735):
        # Getting the type of 'tuple_assignment_139187' (line 3735)
        tuple_assignment_139187_144644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 8), 'tuple_assignment_139187')
        # Assigning a type to the variable '_mask' (line 3735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3735, 16), '_mask', tuple_assignment_139187_144644)
        
        # Assigning a Call to a Name (line 3739):
        
        # Assigning a Call to a Name (line 3739):
        
        # Call to array(...): (line 3739)
        # Processing the call arguments (line 3739)
        # Getting the type of 'condition' (line 3739)
        condition_144647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 29), 'condition', False)
        # Processing the call keyword arguments (line 3739)
        # Getting the type of 'False' (line 3739)
        False_144648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 45), 'False', False)
        keyword_144649 = False_144648
        # Getting the type of 'False' (line 3739)
        False_144650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 58), 'False', False)
        keyword_144651 = False_144650
        kwargs_144652 = {'subok': keyword_144651, 'copy': keyword_144649}
        # Getting the type of 'np' (line 3739)
        np_144645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 3739)
        array_144646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3739, 20), np_144645, 'array')
        # Calling array(args, kwargs) (line 3739)
        array_call_result_144653 = invoke(stypy.reporting.localization.Localization(__file__, 3739, 20), array_144646, *[condition_144647], **kwargs_144652)
        
        # Assigning a type to the variable 'condition' (line 3739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3739, 8), 'condition', array_call_result_144653)
        
        # Assigning a Call to a Name (line 3741):
        
        # Assigning a Call to a Name (line 3741):
        
        # Call to view(...): (line 3741)
        # Processing the call arguments (line 3741)
        
        # Call to type(...): (line 3741)
        # Processing the call arguments (line 3741)
        # Getting the type of 'self' (line 3741)
        self_144665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 71), 'self', False)
        # Processing the call keyword arguments (line 3741)
        kwargs_144666 = {}
        # Getting the type of 'type' (line 3741)
        type_144664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 66), 'type', False)
        # Calling type(args, kwargs) (line 3741)
        type_call_result_144667 = invoke(stypy.reporting.localization.Localization(__file__, 3741, 66), type_144664, *[self_144665], **kwargs_144666)
        
        # Processing the call keyword arguments (line 3741)
        kwargs_144668 = {}
        
        # Call to compress(...): (line 3741)
        # Processing the call arguments (line 3741)
        # Getting the type of 'condition' (line 3741)
        condition_144656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 30), 'condition', False)
        # Processing the call keyword arguments (line 3741)
        # Getting the type of 'axis' (line 3741)
        axis_144657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 46), 'axis', False)
        keyword_144658 = axis_144657
        # Getting the type of 'out' (line 3741)
        out_144659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 56), 'out', False)
        keyword_144660 = out_144659
        kwargs_144661 = {'out': keyword_144660, 'axis': keyword_144658}
        # Getting the type of '_data' (line 3741)
        _data_144654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 15), '_data', False)
        # Obtaining the member 'compress' of a type (line 3741)
        compress_144655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3741, 15), _data_144654, 'compress')
        # Calling compress(args, kwargs) (line 3741)
        compress_call_result_144662 = invoke(stypy.reporting.localization.Localization(__file__, 3741, 15), compress_144655, *[condition_144656], **kwargs_144661)
        
        # Obtaining the member 'view' of a type (line 3741)
        view_144663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3741, 15), compress_call_result_144662, 'view')
        # Calling view(args, kwargs) (line 3741)
        view_call_result_144669 = invoke(stypy.reporting.localization.Localization(__file__, 3741, 15), view_144663, *[type_call_result_144667], **kwargs_144668)
        
        # Assigning a type to the variable '_new' (line 3741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3741, 8), '_new', view_call_result_144669)
        
        # Call to _update_from(...): (line 3742)
        # Processing the call arguments (line 3742)
        # Getting the type of 'self' (line 3742)
        self_144672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3742, 26), 'self', False)
        # Processing the call keyword arguments (line 3742)
        kwargs_144673 = {}
        # Getting the type of '_new' (line 3742)
        _new_144670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3742, 8), '_new', False)
        # Obtaining the member '_update_from' of a type (line 3742)
        _update_from_144671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3742, 8), _new_144670, '_update_from')
        # Calling _update_from(args, kwargs) (line 3742)
        _update_from_call_result_144674 = invoke(stypy.reporting.localization.Localization(__file__, 3742, 8), _update_from_144671, *[self_144672], **kwargs_144673)
        
        
        
        # Getting the type of '_mask' (line 3743)
        _mask_144675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3743, 11), '_mask')
        # Getting the type of 'nomask' (line 3743)
        nomask_144676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3743, 24), 'nomask')
        # Applying the binary operator 'isnot' (line 3743)
        result_is_not_144677 = python_operator(stypy.reporting.localization.Localization(__file__, 3743, 11), 'isnot', _mask_144675, nomask_144676)
        
        # Testing the type of an if condition (line 3743)
        if_condition_144678 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3743, 8), result_is_not_144677)
        # Assigning a type to the variable 'if_condition_144678' (line 3743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3743, 8), 'if_condition_144678', if_condition_144678)
        # SSA begins for if statement (line 3743)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 3744):
        
        # Assigning a Call to a Attribute (line 3744):
        
        # Call to compress(...): (line 3744)
        # Processing the call arguments (line 3744)
        # Getting the type of 'condition' (line 3744)
        condition_144681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 40), 'condition', False)
        # Processing the call keyword arguments (line 3744)
        # Getting the type of 'axis' (line 3744)
        axis_144682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 56), 'axis', False)
        keyword_144683 = axis_144682
        kwargs_144684 = {'axis': keyword_144683}
        # Getting the type of '_mask' (line 3744)
        _mask_144679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 25), '_mask', False)
        # Obtaining the member 'compress' of a type (line 3744)
        compress_144680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3744, 25), _mask_144679, 'compress')
        # Calling compress(args, kwargs) (line 3744)
        compress_call_result_144685 = invoke(stypy.reporting.localization.Localization(__file__, 3744, 25), compress_144680, *[condition_144681], **kwargs_144684)
        
        # Getting the type of '_new' (line 3744)
        _new_144686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 12), '_new')
        # Setting the type of the member '_mask' of a type (line 3744)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3744, 12), _new_144686, '_mask', compress_call_result_144685)
        # SSA join for if statement (line 3743)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of '_new' (line 3745)
        _new_144687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 15), '_new')
        # Assigning a type to the variable 'stypy_return_type' (line 3745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3745, 8), 'stypy_return_type', _new_144687)
        
        # ################# End of 'compress(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'compress' in the type store
        # Getting the type of 'stypy_return_type' (line 3679)
        stypy_return_type_144688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3679, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144688)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'compress'
        return stypy_return_type_144688


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 3747, 4, False)
        # Assigning a type to the variable 'self' (line 3748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3748, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__str__')
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        str_144689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3751, (-1)), 'str', '\n        String representation.\n\n        ')
        
        
        # Call to enabled(...): (line 3752)
        # Processing the call keyword arguments (line 3752)
        kwargs_144692 = {}
        # Getting the type of 'masked_print_option' (line 3752)
        masked_print_option_144690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3752, 11), 'masked_print_option', False)
        # Obtaining the member 'enabled' of a type (line 3752)
        enabled_144691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3752, 11), masked_print_option_144690, 'enabled')
        # Calling enabled(args, kwargs) (line 3752)
        enabled_call_result_144693 = invoke(stypy.reporting.localization.Localization(__file__, 3752, 11), enabled_144691, *[], **kwargs_144692)
        
        # Testing the type of an if condition (line 3752)
        if_condition_144694 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3752, 8), enabled_call_result_144693)
        # Assigning a type to the variable 'if_condition_144694' (line 3752)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3752, 8), 'if_condition_144694', if_condition_144694)
        # SSA begins for if statement (line 3752)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 3753):
        
        # Assigning a Name to a Name (line 3753):
        # Getting the type of 'masked_print_option' (line 3753)
        masked_print_option_144695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3753, 16), 'masked_print_option')
        # Assigning a type to the variable 'f' (line 3753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3753, 12), 'f', masked_print_option_144695)
        
        
        # Getting the type of 'self' (line 3754)
        self_144696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3754, 15), 'self')
        # Getting the type of 'masked' (line 3754)
        masked_144697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3754, 23), 'masked')
        # Applying the binary operator 'is' (line 3754)
        result_is__144698 = python_operator(stypy.reporting.localization.Localization(__file__, 3754, 15), 'is', self_144696, masked_144697)
        
        # Testing the type of an if condition (line 3754)
        if_condition_144699 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3754, 12), result_is__144698)
        # Assigning a type to the variable 'if_condition_144699' (line 3754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3754, 12), 'if_condition_144699', if_condition_144699)
        # SSA begins for if statement (line 3754)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to str(...): (line 3755)
        # Processing the call arguments (line 3755)
        # Getting the type of 'f' (line 3755)
        f_144701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 27), 'f', False)
        # Processing the call keyword arguments (line 3755)
        kwargs_144702 = {}
        # Getting the type of 'str' (line 3755)
        str_144700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 23), 'str', False)
        # Calling str(args, kwargs) (line 3755)
        str_call_result_144703 = invoke(stypy.reporting.localization.Localization(__file__, 3755, 23), str_144700, *[f_144701], **kwargs_144702)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3755, 16), 'stypy_return_type', str_call_result_144703)
        # SSA join for if statement (line 3754)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 3756):
        
        # Assigning a Attribute to a Name (line 3756):
        # Getting the type of 'self' (line 3756)
        self_144704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3756, 16), 'self')
        # Obtaining the member '_mask' of a type (line 3756)
        _mask_144705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3756, 16), self_144704, '_mask')
        # Assigning a type to the variable 'm' (line 3756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3756, 12), 'm', _mask_144705)
        
        
        # Getting the type of 'm' (line 3757)
        m_144706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 15), 'm')
        # Getting the type of 'nomask' (line 3757)
        nomask_144707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 20), 'nomask')
        # Applying the binary operator 'is' (line 3757)
        result_is__144708 = python_operator(stypy.reporting.localization.Localization(__file__, 3757, 15), 'is', m_144706, nomask_144707)
        
        # Testing the type of an if condition (line 3757)
        if_condition_144709 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3757, 12), result_is__144708)
        # Assigning a type to the variable 'if_condition_144709' (line 3757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3757, 12), 'if_condition_144709', if_condition_144709)
        # SSA begins for if statement (line 3757)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 3758):
        
        # Assigning a Attribute to a Name (line 3758):
        # Getting the type of 'self' (line 3758)
        self_144710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 22), 'self')
        # Obtaining the member '_data' of a type (line 3758)
        _data_144711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3758, 22), self_144710, '_data')
        # Assigning a type to the variable 'res' (line 3758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3758, 16), 'res', _data_144711)
        # SSA branch for the else part of an if statement (line 3757)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 3760)
        m_144712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 19), 'm')
        # Obtaining the member 'shape' of a type (line 3760)
        shape_144713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3760, 19), m_144712, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3760)
        tuple_144714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3760, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3760)
        
        # Applying the binary operator '==' (line 3760)
        result_eq_144715 = python_operator(stypy.reporting.localization.Localization(__file__, 3760, 19), '==', shape_144713, tuple_144714)
        
        
        # Getting the type of 'm' (line 3760)
        m_144716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 37), 'm')
        # Obtaining the member 'itemsize' of a type (line 3760)
        itemsize_144717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3760, 37), m_144716, 'itemsize')
        
        # Call to len(...): (line 3760)
        # Processing the call arguments (line 3760)
        # Getting the type of 'm' (line 3760)
        m_144719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 53), 'm', False)
        # Obtaining the member 'dtype' of a type (line 3760)
        dtype_144720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3760, 53), m_144719, 'dtype')
        # Processing the call keyword arguments (line 3760)
        kwargs_144721 = {}
        # Getting the type of 'len' (line 3760)
        len_144718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 49), 'len', False)
        # Calling len(args, kwargs) (line 3760)
        len_call_result_144722 = invoke(stypy.reporting.localization.Localization(__file__, 3760, 49), len_144718, *[dtype_144720], **kwargs_144721)
        
        # Applying the binary operator '==' (line 3760)
        result_eq_144723 = python_operator(stypy.reporting.localization.Localization(__file__, 3760, 37), '==', itemsize_144717, len_call_result_144722)
        
        # Applying the binary operator 'and' (line 3760)
        result_and_keyword_144724 = python_operator(stypy.reporting.localization.Localization(__file__, 3760, 19), 'and', result_eq_144715, result_eq_144723)
        
        # Testing the type of an if condition (line 3760)
        if_condition_144725 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3760, 16), result_and_keyword_144724)
        # Assigning a type to the variable 'if_condition_144725' (line 3760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3760, 16), 'if_condition_144725', if_condition_144725)
        # SSA begins for if statement (line 3760)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'm' (line 3761)
        m_144726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3761, 23), 'm')
        # Obtaining the member 'dtype' of a type (line 3761)
        dtype_144727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3761, 23), m_144726, 'dtype')
        # Obtaining the member 'names' of a type (line 3761)
        names_144728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3761, 23), dtype_144727, 'names')
        # Testing the type of an if condition (line 3761)
        if_condition_144729 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3761, 20), names_144728)
        # Assigning a type to the variable 'if_condition_144729' (line 3761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3761, 20), 'if_condition_144729', if_condition_144729)
        # SSA begins for if statement (line 3761)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3762):
        
        # Assigning a Call to a Name (line 3762):
        
        # Call to view(...): (line 3762)
        # Processing the call arguments (line 3762)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3762)
        tuple_144732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3762, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3762)
        # Adding element type (line 3762)
        # Getting the type of 'bool' (line 3762)
        bool_144733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3762, 36), 'bool', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3762, 36), tuple_144732, bool_144733)
        # Adding element type (line 3762)
        
        # Call to len(...): (line 3762)
        # Processing the call arguments (line 3762)
        # Getting the type of 'm' (line 3762)
        m_144735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3762, 46), 'm', False)
        # Obtaining the member 'dtype' of a type (line 3762)
        dtype_144736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3762, 46), m_144735, 'dtype')
        # Processing the call keyword arguments (line 3762)
        kwargs_144737 = {}
        # Getting the type of 'len' (line 3762)
        len_144734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3762, 42), 'len', False)
        # Calling len(args, kwargs) (line 3762)
        len_call_result_144738 = invoke(stypy.reporting.localization.Localization(__file__, 3762, 42), len_144734, *[dtype_144736], **kwargs_144737)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3762, 36), tuple_144732, len_call_result_144738)
        
        # Processing the call keyword arguments (line 3762)
        kwargs_144739 = {}
        # Getting the type of 'm' (line 3762)
        m_144730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3762, 28), 'm', False)
        # Obtaining the member 'view' of a type (line 3762)
        view_144731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3762, 28), m_144730, 'view')
        # Calling view(args, kwargs) (line 3762)
        view_call_result_144740 = invoke(stypy.reporting.localization.Localization(__file__, 3762, 28), view_144731, *[tuple_144732], **kwargs_144739)
        
        # Assigning a type to the variable 'm' (line 3762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3762, 24), 'm', view_call_result_144740)
        
        
        # Call to any(...): (line 3763)
        # Processing the call keyword arguments (line 3763)
        kwargs_144743 = {}
        # Getting the type of 'm' (line 3763)
        m_144741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3763, 27), 'm', False)
        # Obtaining the member 'any' of a type (line 3763)
        any_144742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3763, 27), m_144741, 'any')
        # Calling any(args, kwargs) (line 3763)
        any_call_result_144744 = invoke(stypy.reporting.localization.Localization(__file__, 3763, 27), any_144742, *[], **kwargs_144743)
        
        # Testing the type of an if condition (line 3763)
        if_condition_144745 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3763, 24), any_call_result_144744)
        # Assigning a type to the variable 'if_condition_144745' (line 3763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3763, 24), 'if_condition_144745', if_condition_144745)
        # SSA begins for if statement (line 3763)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to str(...): (line 3764)
        # Processing the call arguments (line 3764)
        
        # Call to tuple(...): (line 3764)
        # Processing the call arguments (line 3764)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 3764, 45, True)
        # Calculating comprehension expression
        
        # Call to zip(...): (line 3765)
        # Processing the call arguments (line 3765)
        
        # Call to tolist(...): (line 3765)
        # Processing the call keyword arguments (line 3765)
        kwargs_144756 = {}
        # Getting the type of 'self' (line 3765)
        self_144753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3765, 49), 'self', False)
        # Obtaining the member '_data' of a type (line 3765)
        _data_144754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3765, 49), self_144753, '_data')
        # Obtaining the member 'tolist' of a type (line 3765)
        tolist_144755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3765, 49), _data_144754, 'tolist')
        # Calling tolist(args, kwargs) (line 3765)
        tolist_call_result_144757 = invoke(stypy.reporting.localization.Localization(__file__, 3765, 49), tolist_144755, *[], **kwargs_144756)
        
        # Getting the type of 'm' (line 3765)
        m_144758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3765, 70), 'm', False)
        # Processing the call keyword arguments (line 3765)
        kwargs_144759 = {}
        # Getting the type of 'zip' (line 3765)
        zip_144752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3765, 45), 'zip', False)
        # Calling zip(args, kwargs) (line 3765)
        zip_call_result_144760 = invoke(stypy.reporting.localization.Localization(__file__, 3765, 45), zip_144752, *[tolist_call_result_144757, m_144758], **kwargs_144759)
        
        comprehension_144761 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3764, 45), zip_call_result_144760)
        # Assigning a type to the variable '_d' (line 3764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3764, 45), '_d', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3764, 45), comprehension_144761))
        # Assigning a type to the variable '_m' (line 3764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3764, 45), '_m', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3764, 45), comprehension_144761))
        
        # Getting the type of '_m' (line 3764)
        _m_144748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3764, 51), '_m', False)
        # Testing the type of an if expression (line 3764)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3764, 46), _m_144748)
        # SSA begins for if expression (line 3764)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'f' (line 3764)
        f_144749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3764, 46), 'f', False)
        # SSA branch for the else part of an if expression (line 3764)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of '_d' (line 3764)
        _d_144750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3764, 59), '_d', False)
        # SSA join for if expression (line 3764)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_144751 = union_type.UnionType.add(f_144749, _d_144750)
        
        list_144762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3764, 45), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3764, 45), list_144762, if_exp_144751)
        # Processing the call keyword arguments (line 3764)
        kwargs_144763 = {}
        # Getting the type of 'tuple' (line 3764)
        tuple_144747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3764, 39), 'tuple', False)
        # Calling tuple(args, kwargs) (line 3764)
        tuple_call_result_144764 = invoke(stypy.reporting.localization.Localization(__file__, 3764, 39), tuple_144747, *[list_144762], **kwargs_144763)
        
        # Processing the call keyword arguments (line 3764)
        kwargs_144765 = {}
        # Getting the type of 'str' (line 3764)
        str_144746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3764, 35), 'str', False)
        # Calling str(args, kwargs) (line 3764)
        str_call_result_144766 = invoke(stypy.reporting.localization.Localization(__file__, 3764, 35), str_144746, *[tuple_call_result_144764], **kwargs_144765)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3764, 28), 'stypy_return_type', str_call_result_144766)
        # SSA branch for the else part of an if statement (line 3763)
        module_type_store.open_ssa_branch('else')
        
        # Call to str(...): (line 3767)
        # Processing the call arguments (line 3767)
        # Getting the type of 'self' (line 3767)
        self_144768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3767, 39), 'self', False)
        # Obtaining the member '_data' of a type (line 3767)
        _data_144769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3767, 39), self_144768, '_data')
        # Processing the call keyword arguments (line 3767)
        kwargs_144770 = {}
        # Getting the type of 'str' (line 3767)
        str_144767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3767, 35), 'str', False)
        # Calling str(args, kwargs) (line 3767)
        str_call_result_144771 = invoke(stypy.reporting.localization.Localization(__file__, 3767, 35), str_144767, *[_data_144769], **kwargs_144770)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3767, 28), 'stypy_return_type', str_call_result_144771)
        # SSA join for if statement (line 3763)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3761)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'm' (line 3768)
        m_144772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3768, 25), 'm')
        # Testing the type of an if condition (line 3768)
        if_condition_144773 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3768, 25), m_144772)
        # Assigning a type to the variable 'if_condition_144773' (line 3768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3768, 25), 'if_condition_144773', if_condition_144773)
        # SSA begins for if statement (line 3768)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to str(...): (line 3769)
        # Processing the call arguments (line 3769)
        # Getting the type of 'f' (line 3769)
        f_144775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 35), 'f', False)
        # Processing the call keyword arguments (line 3769)
        kwargs_144776 = {}
        # Getting the type of 'str' (line 3769)
        str_144774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 31), 'str', False)
        # Calling str(args, kwargs) (line 3769)
        str_call_result_144777 = invoke(stypy.reporting.localization.Localization(__file__, 3769, 31), str_144774, *[f_144775], **kwargs_144776)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3769, 24), 'stypy_return_type', str_call_result_144777)
        # SSA branch for the else part of an if statement (line 3768)
        module_type_store.open_ssa_branch('else')
        
        # Call to str(...): (line 3771)
        # Processing the call arguments (line 3771)
        # Getting the type of 'self' (line 3771)
        self_144779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3771, 35), 'self', False)
        # Obtaining the member '_data' of a type (line 3771)
        _data_144780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3771, 35), self_144779, '_data')
        # Processing the call keyword arguments (line 3771)
        kwargs_144781 = {}
        # Getting the type of 'str' (line 3771)
        str_144778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3771, 31), 'str', False)
        # Calling str(args, kwargs) (line 3771)
        str_call_result_144782 = invoke(stypy.reporting.localization.Localization(__file__, 3771, 31), str_144778, *[_data_144780], **kwargs_144781)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3771, 24), 'stypy_return_type', str_call_result_144782)
        # SSA join for if statement (line 3768)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3761)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3760)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 3773):
        
        # Assigning a Attribute to a Name (line 3773):
        # Getting the type of 'self' (line 3773)
        self_144783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3773, 24), 'self')
        # Obtaining the member 'dtype' of a type (line 3773)
        dtype_144784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3773, 24), self_144783, 'dtype')
        # Obtaining the member 'names' of a type (line 3773)
        names_144785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3773, 24), dtype_144784, 'names')
        # Assigning a type to the variable 'names' (line 3773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3773, 16), 'names', names_144785)
        
        # Type idiom detected: calculating its left and rigth part (line 3774)
        # Getting the type of 'names' (line 3774)
        names_144786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3774, 19), 'names')
        # Getting the type of 'None' (line 3774)
        None_144787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3774, 28), 'None')
        
        (may_be_144788, more_types_in_union_144789) = may_be_none(names_144786, None_144787)

        if may_be_144788:

            if more_types_in_union_144789:
                # Runtime conditional SSA (line 3774)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 3775):
            
            # Assigning a Attribute to a Name (line 3775):
            # Getting the type of 'self' (line 3775)
            self_144790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3775, 27), 'self')
            # Obtaining the member '_data' of a type (line 3775)
            _data_144791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3775, 27), self_144790, '_data')
            # Assigning a type to the variable 'data' (line 3775)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3775, 20), 'data', _data_144791)
            
            # Assigning a Name to a Name (line 3776):
            
            # Assigning a Name to a Name (line 3776):
            # Getting the type of 'm' (line 3776)
            m_144792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3776, 27), 'm')
            # Assigning a type to the variable 'mask' (line 3776)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3776, 20), 'mask', m_144792)
            
            
            # Call to range(...): (line 3779)
            # Processing the call arguments (line 3779)
            # Getting the type of 'self' (line 3779)
            self_144794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3779, 38), 'self', False)
            # Obtaining the member 'ndim' of a type (line 3779)
            ndim_144795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3779, 38), self_144794, 'ndim')
            # Processing the call keyword arguments (line 3779)
            kwargs_144796 = {}
            # Getting the type of 'range' (line 3779)
            range_144793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3779, 32), 'range', False)
            # Calling range(args, kwargs) (line 3779)
            range_call_result_144797 = invoke(stypy.reporting.localization.Localization(__file__, 3779, 32), range_144793, *[ndim_144795], **kwargs_144796)
            
            # Testing the type of a for loop iterable (line 3779)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3779, 20), range_call_result_144797)
            # Getting the type of the for loop variable (line 3779)
            for_loop_var_144798 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3779, 20), range_call_result_144797)
            # Assigning a type to the variable 'axis' (line 3779)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3779, 20), 'axis', for_loop_var_144798)
            # SSA begins for a for statement (line 3779)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'axis' (line 3780)
            axis_144799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3780, 38), 'axis')
            # Getting the type of 'data' (line 3780)
            data_144800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3780, 27), 'data')
            # Obtaining the member 'shape' of a type (line 3780)
            shape_144801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3780, 27), data_144800, 'shape')
            # Obtaining the member '__getitem__' of a type (line 3780)
            getitem___144802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3780, 27), shape_144801, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3780)
            subscript_call_result_144803 = invoke(stypy.reporting.localization.Localization(__file__, 3780, 27), getitem___144802, axis_144799)
            
            # Getting the type of 'self' (line 3780)
            self_144804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3780, 46), 'self')
            # Obtaining the member '_print_width' of a type (line 3780)
            _print_width_144805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3780, 46), self_144804, '_print_width')
            # Applying the binary operator '>' (line 3780)
            result_gt_144806 = python_operator(stypy.reporting.localization.Localization(__file__, 3780, 27), '>', subscript_call_result_144803, _print_width_144805)
            
            # Testing the type of an if condition (line 3780)
            if_condition_144807 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3780, 24), result_gt_144806)
            # Assigning a type to the variable 'if_condition_144807' (line 3780)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3780, 24), 'if_condition_144807', if_condition_144807)
            # SSA begins for if statement (line 3780)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 3781):
            
            # Assigning a BinOp to a Name (line 3781):
            # Getting the type of 'self' (line 3781)
            self_144808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 34), 'self')
            # Obtaining the member '_print_width' of a type (line 3781)
            _print_width_144809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 34), self_144808, '_print_width')
            int_144810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3781, 55), 'int')
            # Applying the binary operator '//' (line 3781)
            result_floordiv_144811 = python_operator(stypy.reporting.localization.Localization(__file__, 3781, 34), '//', _print_width_144809, int_144810)
            
            # Assigning a type to the variable 'ind' (line 3781)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3781, 28), 'ind', result_floordiv_144811)
            
            # Assigning a Call to a Name (line 3782):
            
            # Assigning a Call to a Name (line 3782):
            
            # Call to split(...): (line 3782)
            # Processing the call arguments (line 3782)
            # Getting the type of 'data' (line 3782)
            data_144814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 43), 'data', False)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3782)
            tuple_144815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3782, 50), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3782)
            # Adding element type (line 3782)
            # Getting the type of 'ind' (line 3782)
            ind_144816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 50), 'ind', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3782, 50), tuple_144815, ind_144816)
            # Adding element type (line 3782)
            
            # Getting the type of 'ind' (line 3782)
            ind_144817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 56), 'ind', False)
            # Applying the 'usub' unary operator (line 3782)
            result___neg___144818 = python_operator(stypy.reporting.localization.Localization(__file__, 3782, 55), 'usub', ind_144817)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3782, 50), tuple_144815, result___neg___144818)
            
            # Processing the call keyword arguments (line 3782)
            # Getting the type of 'axis' (line 3782)
            axis_144819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 67), 'axis', False)
            keyword_144820 = axis_144819
            kwargs_144821 = {'axis': keyword_144820}
            # Getting the type of 'np' (line 3782)
            np_144812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 34), 'np', False)
            # Obtaining the member 'split' of a type (line 3782)
            split_144813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3782, 34), np_144812, 'split')
            # Calling split(args, kwargs) (line 3782)
            split_call_result_144822 = invoke(stypy.reporting.localization.Localization(__file__, 3782, 34), split_144813, *[data_144814, tuple_144815], **kwargs_144821)
            
            # Assigning a type to the variable 'arr' (line 3782)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3782, 28), 'arr', split_call_result_144822)
            
            # Assigning a Call to a Name (line 3783):
            
            # Assigning a Call to a Name (line 3783):
            
            # Call to concatenate(...): (line 3783)
            # Processing the call arguments (line 3783)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3783)
            tuple_144825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3783, 51), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3783)
            # Adding element type (line 3783)
            
            # Obtaining the type of the subscript
            int_144826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3783, 55), 'int')
            # Getting the type of 'arr' (line 3783)
            arr_144827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 51), 'arr', False)
            # Obtaining the member '__getitem__' of a type (line 3783)
            getitem___144828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3783, 51), arr_144827, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3783)
            subscript_call_result_144829 = invoke(stypy.reporting.localization.Localization(__file__, 3783, 51), getitem___144828, int_144826)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3783, 51), tuple_144825, subscript_call_result_144829)
            # Adding element type (line 3783)
            
            # Obtaining the type of the subscript
            int_144830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3783, 63), 'int')
            # Getting the type of 'arr' (line 3783)
            arr_144831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 59), 'arr', False)
            # Obtaining the member '__getitem__' of a type (line 3783)
            getitem___144832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3783, 59), arr_144831, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3783)
            subscript_call_result_144833 = invoke(stypy.reporting.localization.Localization(__file__, 3783, 59), getitem___144832, int_144830)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3783, 51), tuple_144825, subscript_call_result_144833)
            
            # Processing the call keyword arguments (line 3783)
            # Getting the type of 'axis' (line 3783)
            axis_144834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 73), 'axis', False)
            keyword_144835 = axis_144834
            kwargs_144836 = {'axis': keyword_144835}
            # Getting the type of 'np' (line 3783)
            np_144823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 35), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3783)
            concatenate_144824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3783, 35), np_144823, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3783)
            concatenate_call_result_144837 = invoke(stypy.reporting.localization.Localization(__file__, 3783, 35), concatenate_144824, *[tuple_144825], **kwargs_144836)
            
            # Assigning a type to the variable 'data' (line 3783)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3783, 28), 'data', concatenate_call_result_144837)
            
            # Assigning a Call to a Name (line 3784):
            
            # Assigning a Call to a Name (line 3784):
            
            # Call to split(...): (line 3784)
            # Processing the call arguments (line 3784)
            # Getting the type of 'mask' (line 3784)
            mask_144840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 43), 'mask', False)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3784)
            tuple_144841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3784, 50), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3784)
            # Adding element type (line 3784)
            # Getting the type of 'ind' (line 3784)
            ind_144842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 50), 'ind', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3784, 50), tuple_144841, ind_144842)
            # Adding element type (line 3784)
            
            # Getting the type of 'ind' (line 3784)
            ind_144843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 56), 'ind', False)
            # Applying the 'usub' unary operator (line 3784)
            result___neg___144844 = python_operator(stypy.reporting.localization.Localization(__file__, 3784, 55), 'usub', ind_144843)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3784, 50), tuple_144841, result___neg___144844)
            
            # Processing the call keyword arguments (line 3784)
            # Getting the type of 'axis' (line 3784)
            axis_144845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 67), 'axis', False)
            keyword_144846 = axis_144845
            kwargs_144847 = {'axis': keyword_144846}
            # Getting the type of 'np' (line 3784)
            np_144838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 34), 'np', False)
            # Obtaining the member 'split' of a type (line 3784)
            split_144839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3784, 34), np_144838, 'split')
            # Calling split(args, kwargs) (line 3784)
            split_call_result_144848 = invoke(stypy.reporting.localization.Localization(__file__, 3784, 34), split_144839, *[mask_144840, tuple_144841], **kwargs_144847)
            
            # Assigning a type to the variable 'arr' (line 3784)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3784, 28), 'arr', split_call_result_144848)
            
            # Assigning a Call to a Name (line 3785):
            
            # Assigning a Call to a Name (line 3785):
            
            # Call to concatenate(...): (line 3785)
            # Processing the call arguments (line 3785)
            
            # Obtaining an instance of the builtin type 'tuple' (line 3785)
            tuple_144851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3785, 51), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 3785)
            # Adding element type (line 3785)
            
            # Obtaining the type of the subscript
            int_144852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3785, 55), 'int')
            # Getting the type of 'arr' (line 3785)
            arr_144853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3785, 51), 'arr', False)
            # Obtaining the member '__getitem__' of a type (line 3785)
            getitem___144854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3785, 51), arr_144853, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3785)
            subscript_call_result_144855 = invoke(stypy.reporting.localization.Localization(__file__, 3785, 51), getitem___144854, int_144852)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3785, 51), tuple_144851, subscript_call_result_144855)
            # Adding element type (line 3785)
            
            # Obtaining the type of the subscript
            int_144856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3785, 63), 'int')
            # Getting the type of 'arr' (line 3785)
            arr_144857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3785, 59), 'arr', False)
            # Obtaining the member '__getitem__' of a type (line 3785)
            getitem___144858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3785, 59), arr_144857, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3785)
            subscript_call_result_144859 = invoke(stypy.reporting.localization.Localization(__file__, 3785, 59), getitem___144858, int_144856)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3785, 51), tuple_144851, subscript_call_result_144859)
            
            # Processing the call keyword arguments (line 3785)
            # Getting the type of 'axis' (line 3785)
            axis_144860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3785, 73), 'axis', False)
            keyword_144861 = axis_144860
            kwargs_144862 = {'axis': keyword_144861}
            # Getting the type of 'np' (line 3785)
            np_144849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3785, 35), 'np', False)
            # Obtaining the member 'concatenate' of a type (line 3785)
            concatenate_144850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3785, 35), np_144849, 'concatenate')
            # Calling concatenate(args, kwargs) (line 3785)
            concatenate_call_result_144863 = invoke(stypy.reporting.localization.Localization(__file__, 3785, 35), concatenate_144850, *[tuple_144851], **kwargs_144862)
            
            # Assigning a type to the variable 'mask' (line 3785)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3785, 28), 'mask', concatenate_call_result_144863)
            # SSA join for if statement (line 3780)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 3786):
            
            # Assigning a Call to a Name (line 3786):
            
            # Call to astype(...): (line 3786)
            # Processing the call arguments (line 3786)
            str_144866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3786, 38), 'str', 'O')
            # Processing the call keyword arguments (line 3786)
            kwargs_144867 = {}
            # Getting the type of 'data' (line 3786)
            data_144864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3786, 26), 'data', False)
            # Obtaining the member 'astype' of a type (line 3786)
            astype_144865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3786, 26), data_144864, 'astype')
            # Calling astype(args, kwargs) (line 3786)
            astype_call_result_144868 = invoke(stypy.reporting.localization.Localization(__file__, 3786, 26), astype_144865, *[str_144866], **kwargs_144867)
            
            # Assigning a type to the variable 'res' (line 3786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3786, 20), 'res', astype_call_result_144868)
            
            # Assigning a Name to a Subscript (line 3787):
            
            # Assigning a Name to a Subscript (line 3787):
            # Getting the type of 'f' (line 3787)
            f_144869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 46), 'f')
            
            # Call to view(...): (line 3787)
            # Processing the call arguments (line 3787)
            # Getting the type of 'ndarray' (line 3787)
            ndarray_144872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 29), 'ndarray', False)
            # Processing the call keyword arguments (line 3787)
            kwargs_144873 = {}
            # Getting the type of 'res' (line 3787)
            res_144870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 20), 'res', False)
            # Obtaining the member 'view' of a type (line 3787)
            view_144871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 20), res_144870, 'view')
            # Calling view(args, kwargs) (line 3787)
            view_call_result_144874 = invoke(stypy.reporting.localization.Localization(__file__, 3787, 20), view_144871, *[ndarray_144872], **kwargs_144873)
            
            # Getting the type of 'mask' (line 3787)
            mask_144875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 38), 'mask')
            # Storing an element on a container (line 3787)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3787, 20), view_call_result_144874, (mask_144875, f_144869))

            if more_types_in_union_144789:
                # Runtime conditional SSA for else branch (line 3774)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_144788) or more_types_in_union_144789):
            
            # Assigning a Call to a Name (line 3789):
            
            # Assigning a Call to a Name (line 3789):
            
            # Call to _recursive_make_descr(...): (line 3789)
            # Processing the call arguments (line 3789)
            # Getting the type of 'self' (line 3789)
            self_144877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 51), 'self', False)
            # Obtaining the member 'dtype' of a type (line 3789)
            dtype_144878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3789, 51), self_144877, 'dtype')
            str_144879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3789, 63), 'str', 'O')
            # Processing the call keyword arguments (line 3789)
            kwargs_144880 = {}
            # Getting the type of '_recursive_make_descr' (line 3789)
            _recursive_make_descr_144876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 29), '_recursive_make_descr', False)
            # Calling _recursive_make_descr(args, kwargs) (line 3789)
            _recursive_make_descr_call_result_144881 = invoke(stypy.reporting.localization.Localization(__file__, 3789, 29), _recursive_make_descr_144876, *[dtype_144878, str_144879], **kwargs_144880)
            
            # Assigning a type to the variable 'rdtype' (line 3789)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3789, 20), 'rdtype', _recursive_make_descr_call_result_144881)
            
            # Assigning a Call to a Name (line 3790):
            
            # Assigning a Call to a Name (line 3790):
            
            # Call to astype(...): (line 3790)
            # Processing the call arguments (line 3790)
            # Getting the type of 'rdtype' (line 3790)
            rdtype_144885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 44), 'rdtype', False)
            # Processing the call keyword arguments (line 3790)
            kwargs_144886 = {}
            # Getting the type of 'self' (line 3790)
            self_144882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 26), 'self', False)
            # Obtaining the member '_data' of a type (line 3790)
            _data_144883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3790, 26), self_144882, '_data')
            # Obtaining the member 'astype' of a type (line 3790)
            astype_144884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3790, 26), _data_144883, 'astype')
            # Calling astype(args, kwargs) (line 3790)
            astype_call_result_144887 = invoke(stypy.reporting.localization.Localization(__file__, 3790, 26), astype_144884, *[rdtype_144885], **kwargs_144886)
            
            # Assigning a type to the variable 'res' (line 3790)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3790, 20), 'res', astype_call_result_144887)
            
            # Call to _recursive_printoption(...): (line 3791)
            # Processing the call arguments (line 3791)
            # Getting the type of 'res' (line 3791)
            res_144889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3791, 43), 'res', False)
            # Getting the type of 'm' (line 3791)
            m_144890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3791, 48), 'm', False)
            # Getting the type of 'f' (line 3791)
            f_144891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3791, 51), 'f', False)
            # Processing the call keyword arguments (line 3791)
            kwargs_144892 = {}
            # Getting the type of '_recursive_printoption' (line 3791)
            _recursive_printoption_144888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3791, 20), '_recursive_printoption', False)
            # Calling _recursive_printoption(args, kwargs) (line 3791)
            _recursive_printoption_call_result_144893 = invoke(stypy.reporting.localization.Localization(__file__, 3791, 20), _recursive_printoption_144888, *[res_144889, m_144890, f_144891], **kwargs_144892)
            

            if (may_be_144788 and more_types_in_union_144789):
                # SSA join for if statement (line 3774)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 3757)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3752)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 3793):
        
        # Assigning a Call to a Name (line 3793):
        
        # Call to filled(...): (line 3793)
        # Processing the call arguments (line 3793)
        # Getting the type of 'self' (line 3793)
        self_144896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3793, 30), 'self', False)
        # Obtaining the member 'fill_value' of a type (line 3793)
        fill_value_144897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3793, 30), self_144896, 'fill_value')
        # Processing the call keyword arguments (line 3793)
        kwargs_144898 = {}
        # Getting the type of 'self' (line 3793)
        self_144894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3793, 18), 'self', False)
        # Obtaining the member 'filled' of a type (line 3793)
        filled_144895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3793, 18), self_144894, 'filled')
        # Calling filled(args, kwargs) (line 3793)
        filled_call_result_144899 = invoke(stypy.reporting.localization.Localization(__file__, 3793, 18), filled_144895, *[fill_value_144897], **kwargs_144898)
        
        # Assigning a type to the variable 'res' (line 3793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3793, 12), 'res', filled_call_result_144899)
        # SSA join for if statement (line 3752)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to str(...): (line 3794)
        # Processing the call arguments (line 3794)
        # Getting the type of 'res' (line 3794)
        res_144901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3794, 19), 'res', False)
        # Processing the call keyword arguments (line 3794)
        kwargs_144902 = {}
        # Getting the type of 'str' (line 3794)
        str_144900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3794, 15), 'str', False)
        # Calling str(args, kwargs) (line 3794)
        str_call_result_144903 = invoke(stypy.reporting.localization.Localization(__file__, 3794, 15), str_144900, *[res_144901], **kwargs_144902)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3794, 8), 'stypy_return_type', str_call_result_144903)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 3747)
        stypy_return_type_144904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3747, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144904)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_144904


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 3796, 4, False)
        # Assigning a type to the variable 'self' (line 3797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3797, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__repr__')
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_144905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3800, (-1)), 'str', '\n        Literal string representation.\n\n        ')
        
        # Assigning a Call to a Name (line 3801):
        
        # Assigning a Call to a Name (line 3801):
        
        # Call to len(...): (line 3801)
        # Processing the call arguments (line 3801)
        # Getting the type of 'self' (line 3801)
        self_144907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3801, 16), 'self', False)
        # Obtaining the member 'shape' of a type (line 3801)
        shape_144908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3801, 16), self_144907, 'shape')
        # Processing the call keyword arguments (line 3801)
        kwargs_144909 = {}
        # Getting the type of 'len' (line 3801)
        len_144906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3801, 12), 'len', False)
        # Calling len(args, kwargs) (line 3801)
        len_call_result_144910 = invoke(stypy.reporting.localization.Localization(__file__, 3801, 12), len_144906, *[shape_144908], **kwargs_144909)
        
        # Assigning a type to the variable 'n' (line 3801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3801, 8), 'n', len_call_result_144910)
        
        
        # Getting the type of 'self' (line 3802)
        self_144911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3802, 11), 'self')
        # Obtaining the member '_baseclass' of a type (line 3802)
        _baseclass_144912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3802, 11), self_144911, '_baseclass')
        # Getting the type of 'np' (line 3802)
        np_144913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3802, 30), 'np')
        # Obtaining the member 'ndarray' of a type (line 3802)
        ndarray_144914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3802, 30), np_144913, 'ndarray')
        # Applying the binary operator 'is' (line 3802)
        result_is__144915 = python_operator(stypy.reporting.localization.Localization(__file__, 3802, 11), 'is', _baseclass_144912, ndarray_144914)
        
        # Testing the type of an if condition (line 3802)
        if_condition_144916 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3802, 8), result_is__144915)
        # Assigning a type to the variable 'if_condition_144916' (line 3802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3802, 8), 'if_condition_144916', if_condition_144916)
        # SSA begins for if statement (line 3802)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 3803):
        
        # Assigning a Str to a Name (line 3803):
        str_144917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3803, 19), 'str', 'array')
        # Assigning a type to the variable 'name' (line 3803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3803, 12), 'name', str_144917)
        # SSA branch for the else part of an if statement (line 3802)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 3805):
        
        # Assigning a Attribute to a Name (line 3805):
        # Getting the type of 'self' (line 3805)
        self_144918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 19), 'self')
        # Obtaining the member '_baseclass' of a type (line 3805)
        _baseclass_144919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3805, 19), self_144918, '_baseclass')
        # Obtaining the member '__name__' of a type (line 3805)
        name___144920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3805, 19), _baseclass_144919, '__name__')
        # Assigning a type to the variable 'name' (line 3805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3805, 12), 'name', name___144920)
        # SSA join for if statement (line 3802)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3807):
        
        # Assigning a Call to a Name (line 3807):
        
        # Call to dict(...): (line 3807)
        # Processing the call keyword arguments (line 3807)
        # Getting the type of 'name' (line 3807)
        name_144922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 31), 'name', False)
        keyword_144923 = name_144922
        str_144924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3807, 42), 'str', ' ')
        
        # Call to len(...): (line 3807)
        # Processing the call arguments (line 3807)
        # Getting the type of 'name' (line 3807)
        name_144926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 52), 'name', False)
        # Processing the call keyword arguments (line 3807)
        kwargs_144927 = {}
        # Getting the type of 'len' (line 3807)
        len_144925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 48), 'len', False)
        # Calling len(args, kwargs) (line 3807)
        len_call_result_144928 = invoke(stypy.reporting.localization.Localization(__file__, 3807, 48), len_144925, *[name_144926], **kwargs_144927)
        
        # Applying the binary operator '*' (line 3807)
        result_mul_144929 = python_operator(stypy.reporting.localization.Localization(__file__, 3807, 42), '*', str_144924, len_call_result_144928)
        
        keyword_144930 = result_mul_144929
        
        # Call to str(...): (line 3808)
        # Processing the call arguments (line 3808)
        # Getting the type of 'self' (line 3808)
        self_144932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3808, 35), 'self', False)
        # Processing the call keyword arguments (line 3808)
        kwargs_144933 = {}
        # Getting the type of 'str' (line 3808)
        str_144931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3808, 31), 'str', False)
        # Calling str(args, kwargs) (line 3808)
        str_call_result_144934 = invoke(stypy.reporting.localization.Localization(__file__, 3808, 31), str_144931, *[self_144932], **kwargs_144933)
        
        keyword_144935 = str_call_result_144934
        
        # Call to str(...): (line 3808)
        # Processing the call arguments (line 3808)
        # Getting the type of 'self' (line 3808)
        self_144937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3808, 51), 'self', False)
        # Obtaining the member '_mask' of a type (line 3808)
        _mask_144938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3808, 51), self_144937, '_mask')
        # Processing the call keyword arguments (line 3808)
        kwargs_144939 = {}
        # Getting the type of 'str' (line 3808)
        str_144936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3808, 47), 'str', False)
        # Calling str(args, kwargs) (line 3808)
        str_call_result_144940 = invoke(stypy.reporting.localization.Localization(__file__, 3808, 47), str_144936, *[_mask_144938], **kwargs_144939)
        
        keyword_144941 = str_call_result_144940
        
        # Call to str(...): (line 3809)
        # Processing the call arguments (line 3809)
        # Getting the type of 'self' (line 3809)
        self_144943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 35), 'self', False)
        # Obtaining the member 'fill_value' of a type (line 3809)
        fill_value_144944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3809, 35), self_144943, 'fill_value')
        # Processing the call keyword arguments (line 3809)
        kwargs_144945 = {}
        # Getting the type of 'str' (line 3809)
        str_144942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 31), 'str', False)
        # Calling str(args, kwargs) (line 3809)
        str_call_result_144946 = invoke(stypy.reporting.localization.Localization(__file__, 3809, 31), str_144942, *[fill_value_144944], **kwargs_144945)
        
        keyword_144947 = str_call_result_144946
        
        # Call to str(...): (line 3809)
        # Processing the call arguments (line 3809)
        # Getting the type of 'self' (line 3809)
        self_144949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 63), 'self', False)
        # Obtaining the member 'dtype' of a type (line 3809)
        dtype_144950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3809, 63), self_144949, 'dtype')
        # Processing the call keyword arguments (line 3809)
        kwargs_144951 = {}
        # Getting the type of 'str' (line 3809)
        str_144948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 59), 'str', False)
        # Calling str(args, kwargs) (line 3809)
        str_call_result_144952 = invoke(stypy.reporting.localization.Localization(__file__, 3809, 59), str_144948, *[dtype_144950], **kwargs_144951)
        
        keyword_144953 = str_call_result_144952
        kwargs_144954 = {'name': keyword_144923, 'dtype': keyword_144953, 'mask': keyword_144941, 'nlen': keyword_144930, 'data': keyword_144935, 'fill': keyword_144947}
        # Getting the type of 'dict' (line 3807)
        dict_144921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 21), 'dict', False)
        # Calling dict(args, kwargs) (line 3807)
        dict_call_result_144955 = invoke(stypy.reporting.localization.Localization(__file__, 3807, 21), dict_144921, *[], **kwargs_144954)
        
        # Assigning a type to the variable 'parameters' (line 3807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3807, 8), 'parameters', dict_call_result_144955)
        
        # Getting the type of 'self' (line 3810)
        self_144956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 11), 'self')
        # Obtaining the member 'dtype' of a type (line 3810)
        dtype_144957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3810, 11), self_144956, 'dtype')
        # Obtaining the member 'names' of a type (line 3810)
        names_144958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3810, 11), dtype_144957, 'names')
        # Testing the type of an if condition (line 3810)
        if_condition_144959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3810, 8), names_144958)
        # Assigning a type to the variable 'if_condition_144959' (line 3810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3810, 8), 'if_condition_144959', if_condition_144959)
        # SSA begins for if statement (line 3810)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'n' (line 3811)
        n_144960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3811, 15), 'n')
        int_144961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3811, 20), 'int')
        # Applying the binary operator '<=' (line 3811)
        result_le_144962 = python_operator(stypy.reporting.localization.Localization(__file__, 3811, 15), '<=', n_144960, int_144961)
        
        # Testing the type of an if condition (line 3811)
        if_condition_144963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3811, 12), result_le_144962)
        # Assigning a type to the variable 'if_condition_144963' (line 3811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3811, 12), 'if_condition_144963', if_condition_144963)
        # SSA begins for if statement (line 3811)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        str_144964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3812, 40), 'str', 'short_flx')
        # Getting the type of '_print_templates' (line 3812)
        _print_templates_144965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3812, 23), '_print_templates')
        # Obtaining the member '__getitem__' of a type (line 3812)
        getitem___144966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3812, 23), _print_templates_144965, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3812)
        subscript_call_result_144967 = invoke(stypy.reporting.localization.Localization(__file__, 3812, 23), getitem___144966, str_144964)
        
        # Getting the type of 'parameters' (line 3812)
        parameters_144968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3812, 55), 'parameters')
        # Applying the binary operator '%' (line 3812)
        result_mod_144969 = python_operator(stypy.reporting.localization.Localization(__file__, 3812, 23), '%', subscript_call_result_144967, parameters_144968)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3812, 16), 'stypy_return_type', result_mod_144969)
        # SSA join for if statement (line 3811)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        str_144970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3813, 36), 'str', 'long_flx')
        # Getting the type of '_print_templates' (line 3813)
        _print_templates_144971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 19), '_print_templates')
        # Obtaining the member '__getitem__' of a type (line 3813)
        getitem___144972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3813, 19), _print_templates_144971, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3813)
        subscript_call_result_144973 = invoke(stypy.reporting.localization.Localization(__file__, 3813, 19), getitem___144972, str_144970)
        
        # Getting the type of 'parameters' (line 3813)
        parameters_144974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 50), 'parameters')
        # Applying the binary operator '%' (line 3813)
        result_mod_144975 = python_operator(stypy.reporting.localization.Localization(__file__, 3813, 19), '%', subscript_call_result_144973, parameters_144974)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3813, 12), 'stypy_return_type', result_mod_144975)
        # SSA branch for the else part of an if statement (line 3810)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'n' (line 3814)
        n_144976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 13), 'n')
        int_144977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3814, 18), 'int')
        # Applying the binary operator '<=' (line 3814)
        result_le_144978 = python_operator(stypy.reporting.localization.Localization(__file__, 3814, 13), '<=', n_144976, int_144977)
        
        # Testing the type of an if condition (line 3814)
        if_condition_144979 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3814, 13), result_le_144978)
        # Assigning a type to the variable 'if_condition_144979' (line 3814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3814, 13), 'if_condition_144979', if_condition_144979)
        # SSA begins for if statement (line 3814)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        str_144980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3815, 36), 'str', 'short_std')
        # Getting the type of '_print_templates' (line 3815)
        _print_templates_144981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 19), '_print_templates')
        # Obtaining the member '__getitem__' of a type (line 3815)
        getitem___144982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3815, 19), _print_templates_144981, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3815)
        subscript_call_result_144983 = invoke(stypy.reporting.localization.Localization(__file__, 3815, 19), getitem___144982, str_144980)
        
        # Getting the type of 'parameters' (line 3815)
        parameters_144984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 51), 'parameters')
        # Applying the binary operator '%' (line 3815)
        result_mod_144985 = python_operator(stypy.reporting.localization.Localization(__file__, 3815, 19), '%', subscript_call_result_144983, parameters_144984)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3815, 12), 'stypy_return_type', result_mod_144985)
        # SSA join for if statement (line 3814)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3810)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        str_144986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3816, 32), 'str', 'long_std')
        # Getting the type of '_print_templates' (line 3816)
        _print_templates_144987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3816, 15), '_print_templates')
        # Obtaining the member '__getitem__' of a type (line 3816)
        getitem___144988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3816, 15), _print_templates_144987, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3816)
        subscript_call_result_144989 = invoke(stypy.reporting.localization.Localization(__file__, 3816, 15), getitem___144988, str_144986)
        
        # Getting the type of 'parameters' (line 3816)
        parameters_144990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3816, 46), 'parameters')
        # Applying the binary operator '%' (line 3816)
        result_mod_144991 = python_operator(stypy.reporting.localization.Localization(__file__, 3816, 15), '%', subscript_call_result_144989, parameters_144990)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3816, 8), 'stypy_return_type', result_mod_144991)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 3796)
        stypy_return_type_144992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3796, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_144992)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_144992


    @norecursion
    def _delegate_binop(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_delegate_binop'
        module_type_store = module_type_store.open_function_context('_delegate_binop', 3818, 4, False)
        # Assigning a type to the variable 'self' (line 3819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3819, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_function_name', 'MaskedArray._delegate_binop')
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray._delegate_binop.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray._delegate_binop', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_delegate_binop', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_delegate_binop(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        
        # Call to isinstance(...): (line 3821)
        # Processing the call arguments (line 3821)
        # Getting the type of 'other' (line 3821)
        other_144994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 27), 'other', False)
        # Getting the type of 'np' (line 3821)
        np_144995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 34), 'np', False)
        # Obtaining the member 'ndarray' of a type (line 3821)
        ndarray_144996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 34), np_144995, 'ndarray')
        # Processing the call keyword arguments (line 3821)
        kwargs_144997 = {}
        # Getting the type of 'isinstance' (line 3821)
        isinstance_144993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 16), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 3821)
        isinstance_call_result_144998 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 16), isinstance_144993, *[other_144994, ndarray_144996], **kwargs_144997)
        
        # Applying the 'not' unary operator (line 3821)
        result_not__144999 = python_operator(stypy.reporting.localization.Localization(__file__, 3821, 12), 'not', isinstance_call_result_144998)
        
        
        
        # Call to hasattr(...): (line 3822)
        # Processing the call arguments (line 3822)
        # Getting the type of 'other' (line 3822)
        other_145001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 32), 'other', False)
        str_145002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3822, 39), 'str', '__numpy_ufunc__')
        # Processing the call keyword arguments (line 3822)
        kwargs_145003 = {}
        # Getting the type of 'hasattr' (line 3822)
        hasattr_145000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 24), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 3822)
        hasattr_call_result_145004 = invoke(stypy.reporting.localization.Localization(__file__, 3822, 24), hasattr_145000, *[other_145001, str_145002], **kwargs_145003)
        
        # Applying the 'not' unary operator (line 3822)
        result_not__145005 = python_operator(stypy.reporting.localization.Localization(__file__, 3822, 20), 'not', hasattr_call_result_145004)
        
        # Applying the binary operator 'and' (line 3821)
        result_and_keyword_145006 = python_operator(stypy.reporting.localization.Localization(__file__, 3821, 12), 'and', result_not__144999, result_not__145005)
        
        # Testing the type of an if condition (line 3821)
        if_condition_145007 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3821, 8), result_and_keyword_145006)
        # Assigning a type to the variable 'if_condition_145007' (line 3821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 8), 'if_condition_145007', if_condition_145007)
        # SSA begins for if statement (line 3821)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3823):
        
        # Assigning a Call to a Name (line 3823):
        
        # Call to getattr(...): (line 3823)
        # Processing the call arguments (line 3823)
        # Getting the type of 'other' (line 3823)
        other_145009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3823, 37), 'other', False)
        str_145010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3823, 44), 'str', '__array_priority__')
        int_145011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3823, 66), 'int')
        # Processing the call keyword arguments (line 3823)
        kwargs_145012 = {}
        # Getting the type of 'getattr' (line 3823)
        getattr_145008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3823, 29), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3823)
        getattr_call_result_145013 = invoke(stypy.reporting.localization.Localization(__file__, 3823, 29), getattr_145008, *[other_145009, str_145010, int_145011], **kwargs_145012)
        
        # Assigning a type to the variable 'other_priority' (line 3823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3823, 12), 'other_priority', getattr_call_result_145013)
        
        
        # Getting the type of 'self' (line 3824)
        self_145014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3824, 15), 'self')
        # Obtaining the member '__array_priority__' of a type (line 3824)
        array_priority___145015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3824, 15), self_145014, '__array_priority__')
        # Getting the type of 'other_priority' (line 3824)
        other_priority_145016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3824, 41), 'other_priority')
        # Applying the binary operator '<' (line 3824)
        result_lt_145017 = python_operator(stypy.reporting.localization.Localization(__file__, 3824, 15), '<', array_priority___145015, other_priority_145016)
        
        # Testing the type of an if condition (line 3824)
        if_condition_145018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3824, 12), result_lt_145017)
        # Assigning a type to the variable 'if_condition_145018' (line 3824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3824, 12), 'if_condition_145018', if_condition_145018)
        # SSA begins for if statement (line 3824)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 3825)
        True_145019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 23), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 3825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3825, 16), 'stypy_return_type', True_145019)
        # SSA join for if statement (line 3824)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3821)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 3826)
        False_145020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 3826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3826, 8), 'stypy_return_type', False_145020)
        
        # ################# End of '_delegate_binop(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_delegate_binop' in the type store
        # Getting the type of 'stypy_return_type' (line 3818)
        stypy_return_type_145021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3818, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145021)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_delegate_binop'
        return stypy_return_type_145021


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 3828, 4, False)
        # Assigning a type to the variable 'self' (line 3829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3829, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__eq__')
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        str_145022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3832, (-1)), 'str', '\n        Check whether other equals self elementwise.\n\n        ')
        
        
        # Getting the type of 'self' (line 3833)
        self_145023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3833, 11), 'self')
        # Getting the type of 'masked' (line 3833)
        masked_145024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3833, 19), 'masked')
        # Applying the binary operator 'is' (line 3833)
        result_is__145025 = python_operator(stypy.reporting.localization.Localization(__file__, 3833, 11), 'is', self_145023, masked_145024)
        
        # Testing the type of an if condition (line 3833)
        if_condition_145026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3833, 8), result_is__145025)
        # Assigning a type to the variable 'if_condition_145026' (line 3833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3833, 8), 'if_condition_145026', if_condition_145026)
        # SSA begins for if statement (line 3833)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 3834)
        masked_145027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3834, 19), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 3834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3834, 12), 'stypy_return_type', masked_145027)
        # SSA join for if statement (line 3833)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3835):
        
        # Assigning a Call to a Name (line 3835):
        
        # Call to getattr(...): (line 3835)
        # Processing the call arguments (line 3835)
        # Getting the type of 'other' (line 3835)
        other_145029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 24), 'other', False)
        str_145030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3835, 31), 'str', '_mask')
        # Getting the type of 'nomask' (line 3835)
        nomask_145031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 40), 'nomask', False)
        # Processing the call keyword arguments (line 3835)
        kwargs_145032 = {}
        # Getting the type of 'getattr' (line 3835)
        getattr_145028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 16), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3835)
        getattr_call_result_145033 = invoke(stypy.reporting.localization.Localization(__file__, 3835, 16), getattr_145028, *[other_145029, str_145030, nomask_145031], **kwargs_145032)
        
        # Assigning a type to the variable 'omask' (line 3835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3835, 8), 'omask', getattr_call_result_145033)
        
        
        # Getting the type of 'omask' (line 3836)
        omask_145034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3836, 11), 'omask')
        # Getting the type of 'nomask' (line 3836)
        nomask_145035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3836, 20), 'nomask')
        # Applying the binary operator 'is' (line 3836)
        result_is__145036 = python_operator(stypy.reporting.localization.Localization(__file__, 3836, 11), 'is', omask_145034, nomask_145035)
        
        # Testing the type of an if condition (line 3836)
        if_condition_145037 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3836, 8), result_is__145036)
        # Assigning a type to the variable 'if_condition_145037' (line 3836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3836, 8), 'if_condition_145037', if_condition_145037)
        # SSA begins for if statement (line 3836)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3837):
        
        # Assigning a Call to a Name (line 3837):
        
        # Call to __eq__(...): (line 3837)
        # Processing the call arguments (line 3837)
        # Getting the type of 'other' (line 3837)
        other_145044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 42), 'other', False)
        # Processing the call keyword arguments (line 3837)
        kwargs_145045 = {}
        
        # Call to filled(...): (line 3837)
        # Processing the call arguments (line 3837)
        int_145040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3837, 32), 'int')
        # Processing the call keyword arguments (line 3837)
        kwargs_145041 = {}
        # Getting the type of 'self' (line 3837)
        self_145038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 20), 'self', False)
        # Obtaining the member 'filled' of a type (line 3837)
        filled_145039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 20), self_145038, 'filled')
        # Calling filled(args, kwargs) (line 3837)
        filled_call_result_145042 = invoke(stypy.reporting.localization.Localization(__file__, 3837, 20), filled_145039, *[int_145040], **kwargs_145041)
        
        # Obtaining the member '__eq__' of a type (line 3837)
        eq___145043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 20), filled_call_result_145042, '__eq__')
        # Calling __eq__(args, kwargs) (line 3837)
        eq___call_result_145046 = invoke(stypy.reporting.localization.Localization(__file__, 3837, 20), eq___145043, *[other_145044], **kwargs_145045)
        
        # Assigning a type to the variable 'check' (line 3837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3837, 12), 'check', eq___call_result_145046)
        
        
        # SSA begins for try-except statement (line 3838)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 3839):
        
        # Assigning a Call to a Name (line 3839):
        
        # Call to view(...): (line 3839)
        # Processing the call arguments (line 3839)
        
        # Call to type(...): (line 3839)
        # Processing the call arguments (line 3839)
        # Getting the type of 'self' (line 3839)
        self_145050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3839, 40), 'self', False)
        # Processing the call keyword arguments (line 3839)
        kwargs_145051 = {}
        # Getting the type of 'type' (line 3839)
        type_145049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3839, 35), 'type', False)
        # Calling type(args, kwargs) (line 3839)
        type_call_result_145052 = invoke(stypy.reporting.localization.Localization(__file__, 3839, 35), type_145049, *[self_145050], **kwargs_145051)
        
        # Processing the call keyword arguments (line 3839)
        kwargs_145053 = {}
        # Getting the type of 'check' (line 3839)
        check_145047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3839, 24), 'check', False)
        # Obtaining the member 'view' of a type (line 3839)
        view_145048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3839, 24), check_145047, 'view')
        # Calling view(args, kwargs) (line 3839)
        view_call_result_145054 = invoke(stypy.reporting.localization.Localization(__file__, 3839, 24), view_145048, *[type_call_result_145052], **kwargs_145053)
        
        # Assigning a type to the variable 'check' (line 3839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3839, 16), 'check', view_call_result_145054)
        
        # Assigning a Attribute to a Attribute (line 3840):
        
        # Assigning a Attribute to a Attribute (line 3840):
        # Getting the type of 'self' (line 3840)
        self_145055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3840, 30), 'self')
        # Obtaining the member '_mask' of a type (line 3840)
        _mask_145056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3840, 30), self_145055, '_mask')
        # Getting the type of 'check' (line 3840)
        check_145057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3840, 16), 'check')
        # Setting the type of the member '_mask' of a type (line 3840)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3840, 16), check_145057, '_mask', _mask_145056)
        # SSA branch for the except part of a try statement (line 3838)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 3838)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'check' (line 3843)
        check_145058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3843, 23), 'check')
        # Assigning a type to the variable 'stypy_return_type' (line 3843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3843, 16), 'stypy_return_type', check_145058)
        # SSA join for try-except statement (line 3838)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3836)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 3845):
        
        # Assigning a Call to a Name (line 3845):
        
        # Call to filled(...): (line 3845)
        # Processing the call arguments (line 3845)
        # Getting the type of 'other' (line 3845)
        other_145060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 27), 'other', False)
        int_145061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3845, 34), 'int')
        # Processing the call keyword arguments (line 3845)
        kwargs_145062 = {}
        # Getting the type of 'filled' (line 3845)
        filled_145059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 20), 'filled', False)
        # Calling filled(args, kwargs) (line 3845)
        filled_call_result_145063 = invoke(stypy.reporting.localization.Localization(__file__, 3845, 20), filled_145059, *[other_145060, int_145061], **kwargs_145062)
        
        # Assigning a type to the variable 'odata' (line 3845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3845, 12), 'odata', filled_call_result_145063)
        
        # Assigning a Call to a Name (line 3846):
        
        # Assigning a Call to a Name (line 3846):
        
        # Call to view(...): (line 3846)
        # Processing the call arguments (line 3846)
        
        # Call to type(...): (line 3846)
        # Processing the call arguments (line 3846)
        # Getting the type of 'self' (line 3846)
        self_145075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3846, 59), 'self', False)
        # Processing the call keyword arguments (line 3846)
        kwargs_145076 = {}
        # Getting the type of 'type' (line 3846)
        type_145074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3846, 54), 'type', False)
        # Calling type(args, kwargs) (line 3846)
        type_call_result_145077 = invoke(stypy.reporting.localization.Localization(__file__, 3846, 54), type_145074, *[self_145075], **kwargs_145076)
        
        # Processing the call keyword arguments (line 3846)
        kwargs_145078 = {}
        
        # Call to __eq__(...): (line 3846)
        # Processing the call arguments (line 3846)
        # Getting the type of 'odata' (line 3846)
        odata_145070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3846, 42), 'odata', False)
        # Processing the call keyword arguments (line 3846)
        kwargs_145071 = {}
        
        # Call to filled(...): (line 3846)
        # Processing the call arguments (line 3846)
        int_145066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3846, 32), 'int')
        # Processing the call keyword arguments (line 3846)
        kwargs_145067 = {}
        # Getting the type of 'self' (line 3846)
        self_145064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3846, 20), 'self', False)
        # Obtaining the member 'filled' of a type (line 3846)
        filled_145065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3846, 20), self_145064, 'filled')
        # Calling filled(args, kwargs) (line 3846)
        filled_call_result_145068 = invoke(stypy.reporting.localization.Localization(__file__, 3846, 20), filled_145065, *[int_145066], **kwargs_145067)
        
        # Obtaining the member '__eq__' of a type (line 3846)
        eq___145069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3846, 20), filled_call_result_145068, '__eq__')
        # Calling __eq__(args, kwargs) (line 3846)
        eq___call_result_145072 = invoke(stypy.reporting.localization.Localization(__file__, 3846, 20), eq___145069, *[odata_145070], **kwargs_145071)
        
        # Obtaining the member 'view' of a type (line 3846)
        view_145073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3846, 20), eq___call_result_145072, 'view')
        # Calling view(args, kwargs) (line 3846)
        view_call_result_145079 = invoke(stypy.reporting.localization.Localization(__file__, 3846, 20), view_145073, *[type_call_result_145077], **kwargs_145078)
        
        # Assigning a type to the variable 'check' (line 3846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3846, 12), 'check', view_call_result_145079)
        
        
        # Getting the type of 'self' (line 3847)
        self_145080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 15), 'self')
        # Obtaining the member '_mask' of a type (line 3847)
        _mask_145081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3847, 15), self_145080, '_mask')
        # Getting the type of 'nomask' (line 3847)
        nomask_145082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3847, 29), 'nomask')
        # Applying the binary operator 'is' (line 3847)
        result_is__145083 = python_operator(stypy.reporting.localization.Localization(__file__, 3847, 15), 'is', _mask_145081, nomask_145082)
        
        # Testing the type of an if condition (line 3847)
        if_condition_145084 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3847, 12), result_is__145083)
        # Assigning a type to the variable 'if_condition_145084' (line 3847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3847, 12), 'if_condition_145084', if_condition_145084)
        # SSA begins for if statement (line 3847)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 3848):
        
        # Assigning a Name to a Attribute (line 3848):
        # Getting the type of 'omask' (line 3848)
        omask_145085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3848, 30), 'omask')
        # Getting the type of 'check' (line 3848)
        check_145086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3848, 16), 'check')
        # Setting the type of the member '_mask' of a type (line 3848)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3848, 16), check_145086, '_mask', omask_145085)
        # SSA branch for the else part of an if statement (line 3847)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 3850):
        
        # Assigning a Call to a Name (line 3850):
        
        # Call to mask_or(...): (line 3850)
        # Processing the call arguments (line 3850)
        # Getting the type of 'self' (line 3850)
        self_145088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3850, 31), 'self', False)
        # Obtaining the member '_mask' of a type (line 3850)
        _mask_145089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3850, 31), self_145088, '_mask')
        # Getting the type of 'omask' (line 3850)
        omask_145090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3850, 43), 'omask', False)
        # Processing the call keyword arguments (line 3850)
        kwargs_145091 = {}
        # Getting the type of 'mask_or' (line 3850)
        mask_or_145087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3850, 23), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 3850)
        mask_or_call_result_145092 = invoke(stypy.reporting.localization.Localization(__file__, 3850, 23), mask_or_145087, *[_mask_145089, omask_145090], **kwargs_145091)
        
        # Assigning a type to the variable 'mask' (line 3850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3850, 16), 'mask', mask_or_call_result_145092)
        
        # Getting the type of 'mask' (line 3851)
        mask_145093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3851, 19), 'mask')
        # Obtaining the member 'dtype' of a type (line 3851)
        dtype_145094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3851, 19), mask_145093, 'dtype')
        # Obtaining the member 'names' of a type (line 3851)
        names_145095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3851, 19), dtype_145094, 'names')
        # Testing the type of an if condition (line 3851)
        if_condition_145096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3851, 16), names_145095)
        # Assigning a type to the variable 'if_condition_145096' (line 3851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3851, 16), 'if_condition_145096', if_condition_145096)
        # SSA begins for if statement (line 3851)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'mask' (line 3852)
        mask_145097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3852, 23), 'mask')
        # Obtaining the member 'size' of a type (line 3852)
        size_145098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3852, 23), mask_145097, 'size')
        int_145099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3852, 35), 'int')
        # Applying the binary operator '>' (line 3852)
        result_gt_145100 = python_operator(stypy.reporting.localization.Localization(__file__, 3852, 23), '>', size_145098, int_145099)
        
        # Testing the type of an if condition (line 3852)
        if_condition_145101 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3852, 20), result_gt_145100)
        # Assigning a type to the variable 'if_condition_145101' (line 3852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3852, 20), 'if_condition_145101', if_condition_145101)
        # SSA begins for if statement (line 3852)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 3853):
        
        # Assigning a Num to a Name (line 3853):
        int_145102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3853, 31), 'int')
        # Assigning a type to the variable 'axis' (line 3853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3853, 24), 'axis', int_145102)
        # SSA branch for the else part of an if statement (line 3852)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 3855):
        
        # Assigning a Name to a Name (line 3855):
        # Getting the type of 'None' (line 3855)
        None_145103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3855, 31), 'None')
        # Assigning a type to the variable 'axis' (line 3855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3855, 24), 'axis', None_145103)
        # SSA join for if statement (line 3852)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 3856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 3857):
        
        # Assigning a Call to a Name (line 3857):
        
        # Call to all(...): (line 3857)
        # Processing the call arguments (line 3857)
        # Getting the type of 'axis' (line 3857)
        axis_145116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3857, 71), 'axis', False)
        # Processing the call keyword arguments (line 3857)
        kwargs_145117 = {}
        
        # Call to view(...): (line 3857)
        # Processing the call arguments (line 3857)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3857)
        tuple_145106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3857, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3857)
        # Adding element type (line 3857)
        # Getting the type of 'bool_' (line 3857)
        bool__145107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3857, 42), 'bool_', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3857, 42), tuple_145106, bool__145107)
        # Adding element type (line 3857)
        
        # Call to len(...): (line 3857)
        # Processing the call arguments (line 3857)
        # Getting the type of 'self' (line 3857)
        self_145109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3857, 53), 'self', False)
        # Obtaining the member 'dtype' of a type (line 3857)
        dtype_145110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3857, 53), self_145109, 'dtype')
        # Processing the call keyword arguments (line 3857)
        kwargs_145111 = {}
        # Getting the type of 'len' (line 3857)
        len_145108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3857, 49), 'len', False)
        # Calling len(args, kwargs) (line 3857)
        len_call_result_145112 = invoke(stypy.reporting.localization.Localization(__file__, 3857, 49), len_145108, *[dtype_145110], **kwargs_145111)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3857, 42), tuple_145106, len_call_result_145112)
        
        # Processing the call keyword arguments (line 3857)
        kwargs_145113 = {}
        # Getting the type of 'mask' (line 3857)
        mask_145104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3857, 31), 'mask', False)
        # Obtaining the member 'view' of a type (line 3857)
        view_145105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3857, 31), mask_145104, 'view')
        # Calling view(args, kwargs) (line 3857)
        view_call_result_145114 = invoke(stypy.reporting.localization.Localization(__file__, 3857, 31), view_145105, *[tuple_145106], **kwargs_145113)
        
        # Obtaining the member 'all' of a type (line 3857)
        all_145115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3857, 31), view_call_result_145114, 'all')
        # Calling all(args, kwargs) (line 3857)
        all_call_result_145118 = invoke(stypy.reporting.localization.Localization(__file__, 3857, 31), all_145115, *[axis_145116], **kwargs_145117)
        
        # Assigning a type to the variable 'mask' (line 3857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3857, 24), 'mask', all_call_result_145118)
        # SSA branch for the except part of a try statement (line 3856)
        # SSA branch for the except 'ValueError' branch of a try statement (line 3856)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 3859):
        
        # Assigning a Call to a Name (line 3859):
        
        # Call to all(...): (line 3859)
        # Processing the call arguments (line 3859)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'mask' (line 3860)
        mask_145133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3860, 48), 'mask', False)
        comprehension_145134 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3859, 39), mask_145133)
        # Assigning a type to the variable 'f' (line 3859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3859, 39), 'f', comprehension_145134)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'mask' (line 3859)
        mask_145128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3859, 60), 'mask', False)
        # Obtaining the member 'dtype' of a type (line 3859)
        dtype_145129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3859, 60), mask_145128, 'dtype')
        # Obtaining the member 'names' of a type (line 3859)
        names_145130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3859, 60), dtype_145129, 'names')
        comprehension_145131 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3859, 40), names_145130)
        # Assigning a type to the variable 'n' (line 3859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3859, 40), 'n', comprehension_145131)
        
        # Call to all(...): (line 3859)
        # Processing the call keyword arguments (line 3859)
        kwargs_145126 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 3859)
        n_145121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3859, 42), 'n', False)
        # Getting the type of 'f' (line 3859)
        f_145122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3859, 40), 'f', False)
        # Obtaining the member '__getitem__' of a type (line 3859)
        getitem___145123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3859, 40), f_145122, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3859)
        subscript_call_result_145124 = invoke(stypy.reporting.localization.Localization(__file__, 3859, 40), getitem___145123, n_145121)
        
        # Obtaining the member 'all' of a type (line 3859)
        all_145125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3859, 40), subscript_call_result_145124, 'all')
        # Calling all(args, kwargs) (line 3859)
        all_call_result_145127 = invoke(stypy.reporting.localization.Localization(__file__, 3859, 40), all_145125, *[], **kwargs_145126)
        
        list_145132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3859, 40), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3859, 40), list_145132, all_call_result_145127)
        list_145135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3859, 39), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3859, 39), list_145135, list_145132)
        # Processing the call keyword arguments (line 3859)
        # Getting the type of 'axis' (line 3860)
        axis_145136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3860, 60), 'axis', False)
        keyword_145137 = axis_145136
        kwargs_145138 = {'axis': keyword_145137}
        # Getting the type of 'np' (line 3859)
        np_145119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3859, 31), 'np', False)
        # Obtaining the member 'all' of a type (line 3859)
        all_145120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3859, 31), np_145119, 'all')
        # Calling all(args, kwargs) (line 3859)
        all_call_result_145139 = invoke(stypy.reporting.localization.Localization(__file__, 3859, 31), all_145120, *[list_145135], **kwargs_145138)
        
        # Assigning a type to the variable 'mask' (line 3859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3859, 24), 'mask', all_call_result_145139)
        # SSA join for try-except statement (line 3856)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3851)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 3861):
        
        # Assigning a Name to a Attribute (line 3861):
        # Getting the type of 'mask' (line 3861)
        mask_145140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3861, 30), 'mask')
        # Getting the type of 'check' (line 3861)
        check_145141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3861, 16), 'check')
        # Setting the type of the member '_mask' of a type (line 3861)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3861, 16), check_145141, '_mask', mask_145140)
        # SSA join for if statement (line 3847)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3836)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'check' (line 3862)
        check_145142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3862, 15), 'check')
        # Assigning a type to the variable 'stypy_return_type' (line 3862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3862, 8), 'stypy_return_type', check_145142)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 3828)
        stypy_return_type_145143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145143)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_145143


    @norecursion
    def __ne__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ne__'
        module_type_store = module_type_store.open_function_context('__ne__', 3864, 4, False)
        # Assigning a type to the variable 'self' (line 3865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3865, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__ne__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__ne__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__ne__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__ne__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__ne__')
        MaskedArray.__ne__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__ne__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__ne__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__ne__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__ne__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__ne__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__ne__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__ne__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ne__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ne__(...)' code ##################

        str_145144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3868, (-1)), 'str', "\n        Check whether other doesn't equal self elementwise\n\n        ")
        
        
        # Getting the type of 'self' (line 3869)
        self_145145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 11), 'self')
        # Getting the type of 'masked' (line 3869)
        masked_145146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3869, 19), 'masked')
        # Applying the binary operator 'is' (line 3869)
        result_is__145147 = python_operator(stypy.reporting.localization.Localization(__file__, 3869, 11), 'is', self_145145, masked_145146)
        
        # Testing the type of an if condition (line 3869)
        if_condition_145148 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3869, 8), result_is__145147)
        # Assigning a type to the variable 'if_condition_145148' (line 3869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3869, 8), 'if_condition_145148', if_condition_145148)
        # SSA begins for if statement (line 3869)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 3870)
        masked_145149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3870, 19), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 3870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3870, 12), 'stypy_return_type', masked_145149)
        # SSA join for if statement (line 3869)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3871):
        
        # Assigning a Call to a Name (line 3871):
        
        # Call to getattr(...): (line 3871)
        # Processing the call arguments (line 3871)
        # Getting the type of 'other' (line 3871)
        other_145151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3871, 24), 'other', False)
        str_145152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3871, 31), 'str', '_mask')
        # Getting the type of 'nomask' (line 3871)
        nomask_145153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3871, 40), 'nomask', False)
        # Processing the call keyword arguments (line 3871)
        kwargs_145154 = {}
        # Getting the type of 'getattr' (line 3871)
        getattr_145150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3871, 16), 'getattr', False)
        # Calling getattr(args, kwargs) (line 3871)
        getattr_call_result_145155 = invoke(stypy.reporting.localization.Localization(__file__, 3871, 16), getattr_145150, *[other_145151, str_145152, nomask_145153], **kwargs_145154)
        
        # Assigning a type to the variable 'omask' (line 3871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3871, 8), 'omask', getattr_call_result_145155)
        
        
        # Getting the type of 'omask' (line 3872)
        omask_145156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3872, 11), 'omask')
        # Getting the type of 'nomask' (line 3872)
        nomask_145157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3872, 20), 'nomask')
        # Applying the binary operator 'is' (line 3872)
        result_is__145158 = python_operator(stypy.reporting.localization.Localization(__file__, 3872, 11), 'is', omask_145156, nomask_145157)
        
        # Testing the type of an if condition (line 3872)
        if_condition_145159 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3872, 8), result_is__145158)
        # Assigning a type to the variable 'if_condition_145159' (line 3872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3872, 8), 'if_condition_145159', if_condition_145159)
        # SSA begins for if statement (line 3872)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3873):
        
        # Assigning a Call to a Name (line 3873):
        
        # Call to __ne__(...): (line 3873)
        # Processing the call arguments (line 3873)
        # Getting the type of 'other' (line 3873)
        other_145166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3873, 42), 'other', False)
        # Processing the call keyword arguments (line 3873)
        kwargs_145167 = {}
        
        # Call to filled(...): (line 3873)
        # Processing the call arguments (line 3873)
        int_145162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3873, 32), 'int')
        # Processing the call keyword arguments (line 3873)
        kwargs_145163 = {}
        # Getting the type of 'self' (line 3873)
        self_145160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3873, 20), 'self', False)
        # Obtaining the member 'filled' of a type (line 3873)
        filled_145161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3873, 20), self_145160, 'filled')
        # Calling filled(args, kwargs) (line 3873)
        filled_call_result_145164 = invoke(stypy.reporting.localization.Localization(__file__, 3873, 20), filled_145161, *[int_145162], **kwargs_145163)
        
        # Obtaining the member '__ne__' of a type (line 3873)
        ne___145165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3873, 20), filled_call_result_145164, '__ne__')
        # Calling __ne__(args, kwargs) (line 3873)
        ne___call_result_145168 = invoke(stypy.reporting.localization.Localization(__file__, 3873, 20), ne___145165, *[other_145166], **kwargs_145167)
        
        # Assigning a type to the variable 'check' (line 3873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3873, 12), 'check', ne___call_result_145168)
        
        
        # SSA begins for try-except statement (line 3874)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 3875):
        
        # Assigning a Call to a Name (line 3875):
        
        # Call to view(...): (line 3875)
        # Processing the call arguments (line 3875)
        
        # Call to type(...): (line 3875)
        # Processing the call arguments (line 3875)
        # Getting the type of 'self' (line 3875)
        self_145172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3875, 40), 'self', False)
        # Processing the call keyword arguments (line 3875)
        kwargs_145173 = {}
        # Getting the type of 'type' (line 3875)
        type_145171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3875, 35), 'type', False)
        # Calling type(args, kwargs) (line 3875)
        type_call_result_145174 = invoke(stypy.reporting.localization.Localization(__file__, 3875, 35), type_145171, *[self_145172], **kwargs_145173)
        
        # Processing the call keyword arguments (line 3875)
        kwargs_145175 = {}
        # Getting the type of 'check' (line 3875)
        check_145169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3875, 24), 'check', False)
        # Obtaining the member 'view' of a type (line 3875)
        view_145170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3875, 24), check_145169, 'view')
        # Calling view(args, kwargs) (line 3875)
        view_call_result_145176 = invoke(stypy.reporting.localization.Localization(__file__, 3875, 24), view_145170, *[type_call_result_145174], **kwargs_145175)
        
        # Assigning a type to the variable 'check' (line 3875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3875, 16), 'check', view_call_result_145176)
        
        # Assigning a Attribute to a Attribute (line 3876):
        
        # Assigning a Attribute to a Attribute (line 3876):
        # Getting the type of 'self' (line 3876)
        self_145177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3876, 30), 'self')
        # Obtaining the member '_mask' of a type (line 3876)
        _mask_145178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3876, 30), self_145177, '_mask')
        # Getting the type of 'check' (line 3876)
        check_145179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3876, 16), 'check')
        # Setting the type of the member '_mask' of a type (line 3876)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3876, 16), check_145179, '_mask', _mask_145178)
        # SSA branch for the except part of a try statement (line 3874)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 3874)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'check' (line 3879)
        check_145180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3879, 23), 'check')
        # Assigning a type to the variable 'stypy_return_type' (line 3879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3879, 16), 'stypy_return_type', check_145180)
        # SSA join for try-except statement (line 3874)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 3872)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 3881):
        
        # Assigning a Call to a Name (line 3881):
        
        # Call to filled(...): (line 3881)
        # Processing the call arguments (line 3881)
        # Getting the type of 'other' (line 3881)
        other_145182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3881, 27), 'other', False)
        int_145183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3881, 34), 'int')
        # Processing the call keyword arguments (line 3881)
        kwargs_145184 = {}
        # Getting the type of 'filled' (line 3881)
        filled_145181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3881, 20), 'filled', False)
        # Calling filled(args, kwargs) (line 3881)
        filled_call_result_145185 = invoke(stypy.reporting.localization.Localization(__file__, 3881, 20), filled_145181, *[other_145182, int_145183], **kwargs_145184)
        
        # Assigning a type to the variable 'odata' (line 3881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3881, 12), 'odata', filled_call_result_145185)
        
        # Assigning a Call to a Name (line 3882):
        
        # Assigning a Call to a Name (line 3882):
        
        # Call to view(...): (line 3882)
        # Processing the call arguments (line 3882)
        
        # Call to type(...): (line 3882)
        # Processing the call arguments (line 3882)
        # Getting the type of 'self' (line 3882)
        self_145197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3882, 59), 'self', False)
        # Processing the call keyword arguments (line 3882)
        kwargs_145198 = {}
        # Getting the type of 'type' (line 3882)
        type_145196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3882, 54), 'type', False)
        # Calling type(args, kwargs) (line 3882)
        type_call_result_145199 = invoke(stypy.reporting.localization.Localization(__file__, 3882, 54), type_145196, *[self_145197], **kwargs_145198)
        
        # Processing the call keyword arguments (line 3882)
        kwargs_145200 = {}
        
        # Call to __ne__(...): (line 3882)
        # Processing the call arguments (line 3882)
        # Getting the type of 'odata' (line 3882)
        odata_145192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3882, 42), 'odata', False)
        # Processing the call keyword arguments (line 3882)
        kwargs_145193 = {}
        
        # Call to filled(...): (line 3882)
        # Processing the call arguments (line 3882)
        int_145188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3882, 32), 'int')
        # Processing the call keyword arguments (line 3882)
        kwargs_145189 = {}
        # Getting the type of 'self' (line 3882)
        self_145186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3882, 20), 'self', False)
        # Obtaining the member 'filled' of a type (line 3882)
        filled_145187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3882, 20), self_145186, 'filled')
        # Calling filled(args, kwargs) (line 3882)
        filled_call_result_145190 = invoke(stypy.reporting.localization.Localization(__file__, 3882, 20), filled_145187, *[int_145188], **kwargs_145189)
        
        # Obtaining the member '__ne__' of a type (line 3882)
        ne___145191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3882, 20), filled_call_result_145190, '__ne__')
        # Calling __ne__(args, kwargs) (line 3882)
        ne___call_result_145194 = invoke(stypy.reporting.localization.Localization(__file__, 3882, 20), ne___145191, *[odata_145192], **kwargs_145193)
        
        # Obtaining the member 'view' of a type (line 3882)
        view_145195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3882, 20), ne___call_result_145194, 'view')
        # Calling view(args, kwargs) (line 3882)
        view_call_result_145201 = invoke(stypy.reporting.localization.Localization(__file__, 3882, 20), view_145195, *[type_call_result_145199], **kwargs_145200)
        
        # Assigning a type to the variable 'check' (line 3882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3882, 12), 'check', view_call_result_145201)
        
        
        # Getting the type of 'self' (line 3883)
        self_145202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 15), 'self')
        # Obtaining the member '_mask' of a type (line 3883)
        _mask_145203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3883, 15), self_145202, '_mask')
        # Getting the type of 'nomask' (line 3883)
        nomask_145204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3883, 29), 'nomask')
        # Applying the binary operator 'is' (line 3883)
        result_is__145205 = python_operator(stypy.reporting.localization.Localization(__file__, 3883, 15), 'is', _mask_145203, nomask_145204)
        
        # Testing the type of an if condition (line 3883)
        if_condition_145206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3883, 12), result_is__145205)
        # Assigning a type to the variable 'if_condition_145206' (line 3883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3883, 12), 'if_condition_145206', if_condition_145206)
        # SSA begins for if statement (line 3883)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 3884):
        
        # Assigning a Name to a Attribute (line 3884):
        # Getting the type of 'omask' (line 3884)
        omask_145207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 30), 'omask')
        # Getting the type of 'check' (line 3884)
        check_145208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3884, 16), 'check')
        # Setting the type of the member '_mask' of a type (line 3884)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3884, 16), check_145208, '_mask', omask_145207)
        # SSA branch for the else part of an if statement (line 3883)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 3886):
        
        # Assigning a Call to a Name (line 3886):
        
        # Call to mask_or(...): (line 3886)
        # Processing the call arguments (line 3886)
        # Getting the type of 'self' (line 3886)
        self_145210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3886, 31), 'self', False)
        # Obtaining the member '_mask' of a type (line 3886)
        _mask_145211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3886, 31), self_145210, '_mask')
        # Getting the type of 'omask' (line 3886)
        omask_145212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3886, 43), 'omask', False)
        # Processing the call keyword arguments (line 3886)
        kwargs_145213 = {}
        # Getting the type of 'mask_or' (line 3886)
        mask_or_145209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3886, 23), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 3886)
        mask_or_call_result_145214 = invoke(stypy.reporting.localization.Localization(__file__, 3886, 23), mask_or_145209, *[_mask_145211, omask_145212], **kwargs_145213)
        
        # Assigning a type to the variable 'mask' (line 3886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3886, 16), 'mask', mask_or_call_result_145214)
        
        # Getting the type of 'mask' (line 3887)
        mask_145215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3887, 19), 'mask')
        # Obtaining the member 'dtype' of a type (line 3887)
        dtype_145216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3887, 19), mask_145215, 'dtype')
        # Obtaining the member 'names' of a type (line 3887)
        names_145217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3887, 19), dtype_145216, 'names')
        # Testing the type of an if condition (line 3887)
        if_condition_145218 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3887, 16), names_145217)
        # Assigning a type to the variable 'if_condition_145218' (line 3887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3887, 16), 'if_condition_145218', if_condition_145218)
        # SSA begins for if statement (line 3887)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'mask' (line 3888)
        mask_145219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3888, 23), 'mask')
        # Obtaining the member 'size' of a type (line 3888)
        size_145220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3888, 23), mask_145219, 'size')
        int_145221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3888, 35), 'int')
        # Applying the binary operator '>' (line 3888)
        result_gt_145222 = python_operator(stypy.reporting.localization.Localization(__file__, 3888, 23), '>', size_145220, int_145221)
        
        # Testing the type of an if condition (line 3888)
        if_condition_145223 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3888, 20), result_gt_145222)
        # Assigning a type to the variable 'if_condition_145223' (line 3888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3888, 20), 'if_condition_145223', if_condition_145223)
        # SSA begins for if statement (line 3888)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 3889):
        
        # Assigning a Num to a Name (line 3889):
        int_145224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3889, 31), 'int')
        # Assigning a type to the variable 'axis' (line 3889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3889, 24), 'axis', int_145224)
        # SSA branch for the else part of an if statement (line 3888)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 3891):
        
        # Assigning a Name to a Name (line 3891):
        # Getting the type of 'None' (line 3891)
        None_145225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3891, 31), 'None')
        # Assigning a type to the variable 'axis' (line 3891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3891, 24), 'axis', None_145225)
        # SSA join for if statement (line 3888)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 3892)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 3893):
        
        # Assigning a Call to a Name (line 3893):
        
        # Call to all(...): (line 3893)
        # Processing the call arguments (line 3893)
        # Getting the type of 'axis' (line 3893)
        axis_145238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 71), 'axis', False)
        # Processing the call keyword arguments (line 3893)
        kwargs_145239 = {}
        
        # Call to view(...): (line 3893)
        # Processing the call arguments (line 3893)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3893)
        tuple_145228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3893, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3893)
        # Adding element type (line 3893)
        # Getting the type of 'bool_' (line 3893)
        bool__145229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 42), 'bool_', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3893, 42), tuple_145228, bool__145229)
        # Adding element type (line 3893)
        
        # Call to len(...): (line 3893)
        # Processing the call arguments (line 3893)
        # Getting the type of 'self' (line 3893)
        self_145231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 53), 'self', False)
        # Obtaining the member 'dtype' of a type (line 3893)
        dtype_145232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3893, 53), self_145231, 'dtype')
        # Processing the call keyword arguments (line 3893)
        kwargs_145233 = {}
        # Getting the type of 'len' (line 3893)
        len_145230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 49), 'len', False)
        # Calling len(args, kwargs) (line 3893)
        len_call_result_145234 = invoke(stypy.reporting.localization.Localization(__file__, 3893, 49), len_145230, *[dtype_145232], **kwargs_145233)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3893, 42), tuple_145228, len_call_result_145234)
        
        # Processing the call keyword arguments (line 3893)
        kwargs_145235 = {}
        # Getting the type of 'mask' (line 3893)
        mask_145226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3893, 31), 'mask', False)
        # Obtaining the member 'view' of a type (line 3893)
        view_145227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3893, 31), mask_145226, 'view')
        # Calling view(args, kwargs) (line 3893)
        view_call_result_145236 = invoke(stypy.reporting.localization.Localization(__file__, 3893, 31), view_145227, *[tuple_145228], **kwargs_145235)
        
        # Obtaining the member 'all' of a type (line 3893)
        all_145237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3893, 31), view_call_result_145236, 'all')
        # Calling all(args, kwargs) (line 3893)
        all_call_result_145240 = invoke(stypy.reporting.localization.Localization(__file__, 3893, 31), all_145237, *[axis_145238], **kwargs_145239)
        
        # Assigning a type to the variable 'mask' (line 3893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3893, 24), 'mask', all_call_result_145240)
        # SSA branch for the except part of a try statement (line 3892)
        # SSA branch for the except 'ValueError' branch of a try statement (line 3892)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 3895):
        
        # Assigning a Call to a Name (line 3895):
        
        # Call to all(...): (line 3895)
        # Processing the call arguments (line 3895)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'mask' (line 3896)
        mask_145255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3896, 48), 'mask', False)
        comprehension_145256 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 39), mask_145255)
        # Assigning a type to the variable 'f' (line 3895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3895, 39), 'f', comprehension_145256)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'mask' (line 3895)
        mask_145250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 60), 'mask', False)
        # Obtaining the member 'dtype' of a type (line 3895)
        dtype_145251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3895, 60), mask_145250, 'dtype')
        # Obtaining the member 'names' of a type (line 3895)
        names_145252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3895, 60), dtype_145251, 'names')
        comprehension_145253 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 40), names_145252)
        # Assigning a type to the variable 'n' (line 3895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3895, 40), 'n', comprehension_145253)
        
        # Call to all(...): (line 3895)
        # Processing the call keyword arguments (line 3895)
        kwargs_145248 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 3895)
        n_145243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 42), 'n', False)
        # Getting the type of 'f' (line 3895)
        f_145244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 40), 'f', False)
        # Obtaining the member '__getitem__' of a type (line 3895)
        getitem___145245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3895, 40), f_145244, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3895)
        subscript_call_result_145246 = invoke(stypy.reporting.localization.Localization(__file__, 3895, 40), getitem___145245, n_145243)
        
        # Obtaining the member 'all' of a type (line 3895)
        all_145247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3895, 40), subscript_call_result_145246, 'all')
        # Calling all(args, kwargs) (line 3895)
        all_call_result_145249 = invoke(stypy.reporting.localization.Localization(__file__, 3895, 40), all_145247, *[], **kwargs_145248)
        
        list_145254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3895, 40), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 40), list_145254, all_call_result_145249)
        list_145257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3895, 39), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3895, 39), list_145257, list_145254)
        # Processing the call keyword arguments (line 3895)
        # Getting the type of 'axis' (line 3896)
        axis_145258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3896, 60), 'axis', False)
        keyword_145259 = axis_145258
        kwargs_145260 = {'axis': keyword_145259}
        # Getting the type of 'np' (line 3895)
        np_145241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3895, 31), 'np', False)
        # Obtaining the member 'all' of a type (line 3895)
        all_145242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3895, 31), np_145241, 'all')
        # Calling all(args, kwargs) (line 3895)
        all_call_result_145261 = invoke(stypy.reporting.localization.Localization(__file__, 3895, 31), all_145242, *[list_145257], **kwargs_145260)
        
        # Assigning a type to the variable 'mask' (line 3895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3895, 24), 'mask', all_call_result_145261)
        # SSA join for try-except statement (line 3892)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3887)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 3897):
        
        # Assigning a Name to a Attribute (line 3897):
        # Getting the type of 'mask' (line 3897)
        mask_145262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3897, 30), 'mask')
        # Getting the type of 'check' (line 3897)
        check_145263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3897, 16), 'check')
        # Setting the type of the member '_mask' of a type (line 3897)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3897, 16), check_145263, '_mask', mask_145262)
        # SSA join for if statement (line 3883)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 3872)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'check' (line 3898)
        check_145264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3898, 15), 'check')
        # Assigning a type to the variable 'stypy_return_type' (line 3898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3898, 8), 'stypy_return_type', check_145264)
        
        # ################# End of '__ne__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ne__' in the type store
        # Getting the type of 'stypy_return_type' (line 3864)
        stypy_return_type_145265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3864, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145265)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ne__'
        return stypy_return_type_145265


    @norecursion
    def __add__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__add__'
        module_type_store = module_type_store.open_function_context('__add__', 3900, 4, False)
        # Assigning a type to the variable 'self' (line 3901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3901, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__add__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__add__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__add__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__add__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__add__')
        MaskedArray.__add__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__add__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__add__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__add__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__add__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__add__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__add__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__add__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__add__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__add__(...)' code ##################

        str_145266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3904, (-1)), 'str', '\n        Add self to other, and return a new masked array.\n\n        ')
        
        
        # Call to _delegate_binop(...): (line 3905)
        # Processing the call arguments (line 3905)
        # Getting the type of 'other' (line 3905)
        other_145269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 32), 'other', False)
        # Processing the call keyword arguments (line 3905)
        kwargs_145270 = {}
        # Getting the type of 'self' (line 3905)
        self_145267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 11), 'self', False)
        # Obtaining the member '_delegate_binop' of a type (line 3905)
        _delegate_binop_145268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3905, 11), self_145267, '_delegate_binop')
        # Calling _delegate_binop(args, kwargs) (line 3905)
        _delegate_binop_call_result_145271 = invoke(stypy.reporting.localization.Localization(__file__, 3905, 11), _delegate_binop_145268, *[other_145269], **kwargs_145270)
        
        # Testing the type of an if condition (line 3905)
        if_condition_145272 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3905, 8), _delegate_binop_call_result_145271)
        # Assigning a type to the variable 'if_condition_145272' (line 3905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3905, 8), 'if_condition_145272', if_condition_145272)
        # SSA begins for if statement (line 3905)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 3906)
        NotImplemented_145273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3906, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 3906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3906, 12), 'stypy_return_type', NotImplemented_145273)
        # SSA join for if statement (line 3905)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to add(...): (line 3907)
        # Processing the call arguments (line 3907)
        # Getting the type of 'self' (line 3907)
        self_145275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3907, 19), 'self', False)
        # Getting the type of 'other' (line 3907)
        other_145276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3907, 25), 'other', False)
        # Processing the call keyword arguments (line 3907)
        kwargs_145277 = {}
        # Getting the type of 'add' (line 3907)
        add_145274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3907, 15), 'add', False)
        # Calling add(args, kwargs) (line 3907)
        add_call_result_145278 = invoke(stypy.reporting.localization.Localization(__file__, 3907, 15), add_145274, *[self_145275, other_145276], **kwargs_145277)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3907, 8), 'stypy_return_type', add_call_result_145278)
        
        # ################# End of '__add__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__add__' in the type store
        # Getting the type of 'stypy_return_type' (line 3900)
        stypy_return_type_145279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3900, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145279)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__add__'
        return stypy_return_type_145279


    @norecursion
    def __radd__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__radd__'
        module_type_store = module_type_store.open_function_context('__radd__', 3909, 4, False)
        # Assigning a type to the variable 'self' (line 3910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3910, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__radd__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__radd__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__radd__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__radd__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__radd__')
        MaskedArray.__radd__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__radd__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__radd__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__radd__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__radd__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__radd__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__radd__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__radd__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__radd__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__radd__(...)' code ##################

        str_145280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3913, (-1)), 'str', '\n        Add other to self, and return a new masked array.\n\n        ')
        
        # Call to add(...): (line 3916)
        # Processing the call arguments (line 3916)
        # Getting the type of 'other' (line 3916)
        other_145282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 19), 'other', False)
        # Getting the type of 'self' (line 3916)
        self_145283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 26), 'self', False)
        # Processing the call keyword arguments (line 3916)
        kwargs_145284 = {}
        # Getting the type of 'add' (line 3916)
        add_145281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 15), 'add', False)
        # Calling add(args, kwargs) (line 3916)
        add_call_result_145285 = invoke(stypy.reporting.localization.Localization(__file__, 3916, 15), add_145281, *[other_145282, self_145283], **kwargs_145284)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3916, 8), 'stypy_return_type', add_call_result_145285)
        
        # ################# End of '__radd__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__radd__' in the type store
        # Getting the type of 'stypy_return_type' (line 3909)
        stypy_return_type_145286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3909, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145286)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__radd__'
        return stypy_return_type_145286


    @norecursion
    def __sub__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__sub__'
        module_type_store = module_type_store.open_function_context('__sub__', 3918, 4, False)
        # Assigning a type to the variable 'self' (line 3919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3919, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__sub__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__sub__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__sub__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__sub__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__sub__')
        MaskedArray.__sub__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__sub__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__sub__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__sub__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__sub__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__sub__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__sub__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__sub__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__sub__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__sub__(...)' code ##################

        str_145287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3922, (-1)), 'str', '\n        Subtract other from self, and return a new masked array.\n\n        ')
        
        
        # Call to _delegate_binop(...): (line 3923)
        # Processing the call arguments (line 3923)
        # Getting the type of 'other' (line 3923)
        other_145290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 32), 'other', False)
        # Processing the call keyword arguments (line 3923)
        kwargs_145291 = {}
        # Getting the type of 'self' (line 3923)
        self_145288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 11), 'self', False)
        # Obtaining the member '_delegate_binop' of a type (line 3923)
        _delegate_binop_145289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3923, 11), self_145288, '_delegate_binop')
        # Calling _delegate_binop(args, kwargs) (line 3923)
        _delegate_binop_call_result_145292 = invoke(stypy.reporting.localization.Localization(__file__, 3923, 11), _delegate_binop_145289, *[other_145290], **kwargs_145291)
        
        # Testing the type of an if condition (line 3923)
        if_condition_145293 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3923, 8), _delegate_binop_call_result_145292)
        # Assigning a type to the variable 'if_condition_145293' (line 3923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3923, 8), 'if_condition_145293', if_condition_145293)
        # SSA begins for if statement (line 3923)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 3924)
        NotImplemented_145294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3924, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 3924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3924, 12), 'stypy_return_type', NotImplemented_145294)
        # SSA join for if statement (line 3923)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to subtract(...): (line 3925)
        # Processing the call arguments (line 3925)
        # Getting the type of 'self' (line 3925)
        self_145296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 24), 'self', False)
        # Getting the type of 'other' (line 3925)
        other_145297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 30), 'other', False)
        # Processing the call keyword arguments (line 3925)
        kwargs_145298 = {}
        # Getting the type of 'subtract' (line 3925)
        subtract_145295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3925, 15), 'subtract', False)
        # Calling subtract(args, kwargs) (line 3925)
        subtract_call_result_145299 = invoke(stypy.reporting.localization.Localization(__file__, 3925, 15), subtract_145295, *[self_145296, other_145297], **kwargs_145298)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3925, 8), 'stypy_return_type', subtract_call_result_145299)
        
        # ################# End of '__sub__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__sub__' in the type store
        # Getting the type of 'stypy_return_type' (line 3918)
        stypy_return_type_145300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3918, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145300)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__sub__'
        return stypy_return_type_145300


    @norecursion
    def __rsub__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__rsub__'
        module_type_store = module_type_store.open_function_context('__rsub__', 3927, 4, False)
        # Assigning a type to the variable 'self' (line 3928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3928, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__rsub__')
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__rsub__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__rsub__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__rsub__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__rsub__(...)' code ##################

        str_145301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3931, (-1)), 'str', '\n        Subtract self from other, and return a new masked array.\n\n        ')
        
        # Call to subtract(...): (line 3932)
        # Processing the call arguments (line 3932)
        # Getting the type of 'other' (line 3932)
        other_145303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 24), 'other', False)
        # Getting the type of 'self' (line 3932)
        self_145304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 31), 'self', False)
        # Processing the call keyword arguments (line 3932)
        kwargs_145305 = {}
        # Getting the type of 'subtract' (line 3932)
        subtract_145302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 15), 'subtract', False)
        # Calling subtract(args, kwargs) (line 3932)
        subtract_call_result_145306 = invoke(stypy.reporting.localization.Localization(__file__, 3932, 15), subtract_145302, *[other_145303, self_145304], **kwargs_145305)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3932, 8), 'stypy_return_type', subtract_call_result_145306)
        
        # ################# End of '__rsub__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__rsub__' in the type store
        # Getting the type of 'stypy_return_type' (line 3927)
        stypy_return_type_145307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145307)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__rsub__'
        return stypy_return_type_145307


    @norecursion
    def __mul__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__mul__'
        module_type_store = module_type_store.open_function_context('__mul__', 3934, 4, False)
        # Assigning a type to the variable 'self' (line 3935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3935, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__mul__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__mul__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__mul__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__mul__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__mul__')
        MaskedArray.__mul__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__mul__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__mul__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__mul__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__mul__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__mul__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__mul__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__mul__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__mul__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__mul__(...)' code ##################

        str_145308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3935, 8), 'str', 'Multiply self by other, and return a new masked array.')
        
        
        # Call to _delegate_binop(...): (line 3936)
        # Processing the call arguments (line 3936)
        # Getting the type of 'other' (line 3936)
        other_145311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3936, 32), 'other', False)
        # Processing the call keyword arguments (line 3936)
        kwargs_145312 = {}
        # Getting the type of 'self' (line 3936)
        self_145309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3936, 11), 'self', False)
        # Obtaining the member '_delegate_binop' of a type (line 3936)
        _delegate_binop_145310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3936, 11), self_145309, '_delegate_binop')
        # Calling _delegate_binop(args, kwargs) (line 3936)
        _delegate_binop_call_result_145313 = invoke(stypy.reporting.localization.Localization(__file__, 3936, 11), _delegate_binop_145310, *[other_145311], **kwargs_145312)
        
        # Testing the type of an if condition (line 3936)
        if_condition_145314 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3936, 8), _delegate_binop_call_result_145313)
        # Assigning a type to the variable 'if_condition_145314' (line 3936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3936, 8), 'if_condition_145314', if_condition_145314)
        # SSA begins for if statement (line 3936)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 3937)
        NotImplemented_145315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3937, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 3937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3937, 12), 'stypy_return_type', NotImplemented_145315)
        # SSA join for if statement (line 3936)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to multiply(...): (line 3938)
        # Processing the call arguments (line 3938)
        # Getting the type of 'self' (line 3938)
        self_145317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3938, 24), 'self', False)
        # Getting the type of 'other' (line 3938)
        other_145318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3938, 30), 'other', False)
        # Processing the call keyword arguments (line 3938)
        kwargs_145319 = {}
        # Getting the type of 'multiply' (line 3938)
        multiply_145316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3938, 15), 'multiply', False)
        # Calling multiply(args, kwargs) (line 3938)
        multiply_call_result_145320 = invoke(stypy.reporting.localization.Localization(__file__, 3938, 15), multiply_145316, *[self_145317, other_145318], **kwargs_145319)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3938, 8), 'stypy_return_type', multiply_call_result_145320)
        
        # ################# End of '__mul__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__mul__' in the type store
        # Getting the type of 'stypy_return_type' (line 3934)
        stypy_return_type_145321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3934, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145321)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__mul__'
        return stypy_return_type_145321


    @norecursion
    def __rmul__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__rmul__'
        module_type_store = module_type_store.open_function_context('__rmul__', 3940, 4, False)
        # Assigning a type to the variable 'self' (line 3941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3941, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__rmul__')
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__rmul__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__rmul__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__rmul__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__rmul__(...)' code ##################

        str_145322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3944, (-1)), 'str', '\n        Multiply other by self, and return a new masked array.\n\n        ')
        
        # Call to multiply(...): (line 3947)
        # Processing the call arguments (line 3947)
        # Getting the type of 'other' (line 3947)
        other_145324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3947, 24), 'other', False)
        # Getting the type of 'self' (line 3947)
        self_145325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3947, 31), 'self', False)
        # Processing the call keyword arguments (line 3947)
        kwargs_145326 = {}
        # Getting the type of 'multiply' (line 3947)
        multiply_145323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3947, 15), 'multiply', False)
        # Calling multiply(args, kwargs) (line 3947)
        multiply_call_result_145327 = invoke(stypy.reporting.localization.Localization(__file__, 3947, 15), multiply_145323, *[other_145324, self_145325], **kwargs_145326)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3947, 8), 'stypy_return_type', multiply_call_result_145327)
        
        # ################# End of '__rmul__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__rmul__' in the type store
        # Getting the type of 'stypy_return_type' (line 3940)
        stypy_return_type_145328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3940, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145328)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__rmul__'
        return stypy_return_type_145328


    @norecursion
    def __div__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__div__'
        module_type_store = module_type_store.open_function_context('__div__', 3949, 4, False)
        # Assigning a type to the variable 'self' (line 3950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3950, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__div__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__div__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__div__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__div__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__div__')
        MaskedArray.__div__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__div__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__div__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__div__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__div__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__div__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__div__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__div__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__div__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__div__(...)' code ##################

        str_145329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3953, (-1)), 'str', '\n        Divide other into self, and return a new masked array.\n\n        ')
        
        
        # Call to _delegate_binop(...): (line 3954)
        # Processing the call arguments (line 3954)
        # Getting the type of 'other' (line 3954)
        other_145332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 32), 'other', False)
        # Processing the call keyword arguments (line 3954)
        kwargs_145333 = {}
        # Getting the type of 'self' (line 3954)
        self_145330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3954, 11), 'self', False)
        # Obtaining the member '_delegate_binop' of a type (line 3954)
        _delegate_binop_145331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3954, 11), self_145330, '_delegate_binop')
        # Calling _delegate_binop(args, kwargs) (line 3954)
        _delegate_binop_call_result_145334 = invoke(stypy.reporting.localization.Localization(__file__, 3954, 11), _delegate_binop_145331, *[other_145332], **kwargs_145333)
        
        # Testing the type of an if condition (line 3954)
        if_condition_145335 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3954, 8), _delegate_binop_call_result_145334)
        # Assigning a type to the variable 'if_condition_145335' (line 3954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3954, 8), 'if_condition_145335', if_condition_145335)
        # SSA begins for if statement (line 3954)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 3955)
        NotImplemented_145336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3955, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 3955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3955, 12), 'stypy_return_type', NotImplemented_145336)
        # SSA join for if statement (line 3954)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to divide(...): (line 3956)
        # Processing the call arguments (line 3956)
        # Getting the type of 'self' (line 3956)
        self_145338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 22), 'self', False)
        # Getting the type of 'other' (line 3956)
        other_145339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 28), 'other', False)
        # Processing the call keyword arguments (line 3956)
        kwargs_145340 = {}
        # Getting the type of 'divide' (line 3956)
        divide_145337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 15), 'divide', False)
        # Calling divide(args, kwargs) (line 3956)
        divide_call_result_145341 = invoke(stypy.reporting.localization.Localization(__file__, 3956, 15), divide_145337, *[self_145338, other_145339], **kwargs_145340)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3956, 8), 'stypy_return_type', divide_call_result_145341)
        
        # ################# End of '__div__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__div__' in the type store
        # Getting the type of 'stypy_return_type' (line 3949)
        stypy_return_type_145342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3949, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145342)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__div__'
        return stypy_return_type_145342


    @norecursion
    def __truediv__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__truediv__'
        module_type_store = module_type_store.open_function_context('__truediv__', 3958, 4, False)
        # Assigning a type to the variable 'self' (line 3959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3959, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__truediv__')
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__truediv__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__truediv__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__truediv__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__truediv__(...)' code ##################

        str_145343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3962, (-1)), 'str', '\n        Divide other into self, and return a new masked array.\n\n        ')
        
        
        # Call to _delegate_binop(...): (line 3963)
        # Processing the call arguments (line 3963)
        # Getting the type of 'other' (line 3963)
        other_145346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 32), 'other', False)
        # Processing the call keyword arguments (line 3963)
        kwargs_145347 = {}
        # Getting the type of 'self' (line 3963)
        self_145344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3963, 11), 'self', False)
        # Obtaining the member '_delegate_binop' of a type (line 3963)
        _delegate_binop_145345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3963, 11), self_145344, '_delegate_binop')
        # Calling _delegate_binop(args, kwargs) (line 3963)
        _delegate_binop_call_result_145348 = invoke(stypy.reporting.localization.Localization(__file__, 3963, 11), _delegate_binop_145345, *[other_145346], **kwargs_145347)
        
        # Testing the type of an if condition (line 3963)
        if_condition_145349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3963, 8), _delegate_binop_call_result_145348)
        # Assigning a type to the variable 'if_condition_145349' (line 3963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3963, 8), 'if_condition_145349', if_condition_145349)
        # SSA begins for if statement (line 3963)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 3964)
        NotImplemented_145350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3964, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 3964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3964, 12), 'stypy_return_type', NotImplemented_145350)
        # SSA join for if statement (line 3963)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to true_divide(...): (line 3965)
        # Processing the call arguments (line 3965)
        # Getting the type of 'self' (line 3965)
        self_145352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3965, 27), 'self', False)
        # Getting the type of 'other' (line 3965)
        other_145353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3965, 33), 'other', False)
        # Processing the call keyword arguments (line 3965)
        kwargs_145354 = {}
        # Getting the type of 'true_divide' (line 3965)
        true_divide_145351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3965, 15), 'true_divide', False)
        # Calling true_divide(args, kwargs) (line 3965)
        true_divide_call_result_145355 = invoke(stypy.reporting.localization.Localization(__file__, 3965, 15), true_divide_145351, *[self_145352, other_145353], **kwargs_145354)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3965, 8), 'stypy_return_type', true_divide_call_result_145355)
        
        # ################# End of '__truediv__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__truediv__' in the type store
        # Getting the type of 'stypy_return_type' (line 3958)
        stypy_return_type_145356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3958, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145356)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__truediv__'
        return stypy_return_type_145356


    @norecursion
    def __rtruediv__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__rtruediv__'
        module_type_store = module_type_store.open_function_context('__rtruediv__', 3967, 4, False)
        # Assigning a type to the variable 'self' (line 3968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3968, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__rtruediv__')
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__rtruediv__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__rtruediv__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__rtruediv__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__rtruediv__(...)' code ##################

        str_145357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3971, (-1)), 'str', '\n        Divide self into other, and return a new masked array.\n\n        ')
        
        # Call to true_divide(...): (line 3972)
        # Processing the call arguments (line 3972)
        # Getting the type of 'other' (line 3972)
        other_145359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3972, 27), 'other', False)
        # Getting the type of 'self' (line 3972)
        self_145360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3972, 34), 'self', False)
        # Processing the call keyword arguments (line 3972)
        kwargs_145361 = {}
        # Getting the type of 'true_divide' (line 3972)
        true_divide_145358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3972, 15), 'true_divide', False)
        # Calling true_divide(args, kwargs) (line 3972)
        true_divide_call_result_145362 = invoke(stypy.reporting.localization.Localization(__file__, 3972, 15), true_divide_145358, *[other_145359, self_145360], **kwargs_145361)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3972, 8), 'stypy_return_type', true_divide_call_result_145362)
        
        # ################# End of '__rtruediv__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__rtruediv__' in the type store
        # Getting the type of 'stypy_return_type' (line 3967)
        stypy_return_type_145363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3967, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145363)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__rtruediv__'
        return stypy_return_type_145363


    @norecursion
    def __floordiv__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__floordiv__'
        module_type_store = module_type_store.open_function_context('__floordiv__', 3974, 4, False)
        # Assigning a type to the variable 'self' (line 3975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3975, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__floordiv__')
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__floordiv__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__floordiv__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__floordiv__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__floordiv__(...)' code ##################

        str_145364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3978, (-1)), 'str', '\n        Divide other into self, and return a new masked array.\n\n        ')
        
        
        # Call to _delegate_binop(...): (line 3979)
        # Processing the call arguments (line 3979)
        # Getting the type of 'other' (line 3979)
        other_145367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3979, 32), 'other', False)
        # Processing the call keyword arguments (line 3979)
        kwargs_145368 = {}
        # Getting the type of 'self' (line 3979)
        self_145365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3979, 11), 'self', False)
        # Obtaining the member '_delegate_binop' of a type (line 3979)
        _delegate_binop_145366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3979, 11), self_145365, '_delegate_binop')
        # Calling _delegate_binop(args, kwargs) (line 3979)
        _delegate_binop_call_result_145369 = invoke(stypy.reporting.localization.Localization(__file__, 3979, 11), _delegate_binop_145366, *[other_145367], **kwargs_145368)
        
        # Testing the type of an if condition (line 3979)
        if_condition_145370 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3979, 8), _delegate_binop_call_result_145369)
        # Assigning a type to the variable 'if_condition_145370' (line 3979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3979, 8), 'if_condition_145370', if_condition_145370)
        # SSA begins for if statement (line 3979)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 3980)
        NotImplemented_145371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3980, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 3980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3980, 12), 'stypy_return_type', NotImplemented_145371)
        # SSA join for if statement (line 3979)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to floor_divide(...): (line 3981)
        # Processing the call arguments (line 3981)
        # Getting the type of 'self' (line 3981)
        self_145373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 28), 'self', False)
        # Getting the type of 'other' (line 3981)
        other_145374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 34), 'other', False)
        # Processing the call keyword arguments (line 3981)
        kwargs_145375 = {}
        # Getting the type of 'floor_divide' (line 3981)
        floor_divide_145372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3981, 15), 'floor_divide', False)
        # Calling floor_divide(args, kwargs) (line 3981)
        floor_divide_call_result_145376 = invoke(stypy.reporting.localization.Localization(__file__, 3981, 15), floor_divide_145372, *[self_145373, other_145374], **kwargs_145375)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3981, 8), 'stypy_return_type', floor_divide_call_result_145376)
        
        # ################# End of '__floordiv__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__floordiv__' in the type store
        # Getting the type of 'stypy_return_type' (line 3974)
        stypy_return_type_145377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3974, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145377)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__floordiv__'
        return stypy_return_type_145377


    @norecursion
    def __rfloordiv__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__rfloordiv__'
        module_type_store = module_type_store.open_function_context('__rfloordiv__', 3983, 4, False)
        # Assigning a type to the variable 'self' (line 3984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3984, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__rfloordiv__')
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__rfloordiv__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__rfloordiv__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__rfloordiv__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__rfloordiv__(...)' code ##################

        str_145378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3987, (-1)), 'str', '\n        Divide self into other, and return a new masked array.\n\n        ')
        
        # Call to floor_divide(...): (line 3988)
        # Processing the call arguments (line 3988)
        # Getting the type of 'other' (line 3988)
        other_145380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3988, 28), 'other', False)
        # Getting the type of 'self' (line 3988)
        self_145381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3988, 35), 'self', False)
        # Processing the call keyword arguments (line 3988)
        kwargs_145382 = {}
        # Getting the type of 'floor_divide' (line 3988)
        floor_divide_145379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3988, 15), 'floor_divide', False)
        # Calling floor_divide(args, kwargs) (line 3988)
        floor_divide_call_result_145383 = invoke(stypy.reporting.localization.Localization(__file__, 3988, 15), floor_divide_145379, *[other_145380, self_145381], **kwargs_145382)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3988, 8), 'stypy_return_type', floor_divide_call_result_145383)
        
        # ################# End of '__rfloordiv__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__rfloordiv__' in the type store
        # Getting the type of 'stypy_return_type' (line 3983)
        stypy_return_type_145384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3983, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145384)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__rfloordiv__'
        return stypy_return_type_145384


    @norecursion
    def __pow__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__pow__'
        module_type_store = module_type_store.open_function_context('__pow__', 3990, 4, False)
        # Assigning a type to the variable 'self' (line 3991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3991, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__pow__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__pow__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__pow__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__pow__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__pow__')
        MaskedArray.__pow__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__pow__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__pow__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__pow__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__pow__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__pow__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__pow__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__pow__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__pow__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__pow__(...)' code ##################

        str_145385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3994, (-1)), 'str', '\n        Raise self to the power other, masking the potential NaNs/Infs\n\n        ')
        
        
        # Call to _delegate_binop(...): (line 3995)
        # Processing the call arguments (line 3995)
        # Getting the type of 'other' (line 3995)
        other_145388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3995, 32), 'other', False)
        # Processing the call keyword arguments (line 3995)
        kwargs_145389 = {}
        # Getting the type of 'self' (line 3995)
        self_145386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3995, 11), 'self', False)
        # Obtaining the member '_delegate_binop' of a type (line 3995)
        _delegate_binop_145387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3995, 11), self_145386, '_delegate_binop')
        # Calling _delegate_binop(args, kwargs) (line 3995)
        _delegate_binop_call_result_145390 = invoke(stypy.reporting.localization.Localization(__file__, 3995, 11), _delegate_binop_145387, *[other_145388], **kwargs_145389)
        
        # Testing the type of an if condition (line 3995)
        if_condition_145391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3995, 8), _delegate_binop_call_result_145390)
        # Assigning a type to the variable 'if_condition_145391' (line 3995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3995, 8), 'if_condition_145391', if_condition_145391)
        # SSA begins for if statement (line 3995)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 3996)
        NotImplemented_145392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3996, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 3996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3996, 12), 'stypy_return_type', NotImplemented_145392)
        # SSA join for if statement (line 3995)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to power(...): (line 3997)
        # Processing the call arguments (line 3997)
        # Getting the type of 'self' (line 3997)
        self_145394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3997, 21), 'self', False)
        # Getting the type of 'other' (line 3997)
        other_145395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3997, 27), 'other', False)
        # Processing the call keyword arguments (line 3997)
        kwargs_145396 = {}
        # Getting the type of 'power' (line 3997)
        power_145393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3997, 15), 'power', False)
        # Calling power(args, kwargs) (line 3997)
        power_call_result_145397 = invoke(stypy.reporting.localization.Localization(__file__, 3997, 15), power_145393, *[self_145394, other_145395], **kwargs_145396)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3997, 8), 'stypy_return_type', power_call_result_145397)
        
        # ################# End of '__pow__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__pow__' in the type store
        # Getting the type of 'stypy_return_type' (line 3990)
        stypy_return_type_145398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3990, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145398)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__pow__'
        return stypy_return_type_145398


    @norecursion
    def __rpow__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__rpow__'
        module_type_store = module_type_store.open_function_context('__rpow__', 3999, 4, False)
        # Assigning a type to the variable 'self' (line 4000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4000, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__rpow__')
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__rpow__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__rpow__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__rpow__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__rpow__(...)' code ##################

        str_145399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4003, (-1)), 'str', '\n        Raise other to the power self, masking the potential NaNs/Infs\n\n        ')
        
        # Call to power(...): (line 4004)
        # Processing the call arguments (line 4004)
        # Getting the type of 'other' (line 4004)
        other_145401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4004, 21), 'other', False)
        # Getting the type of 'self' (line 4004)
        self_145402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4004, 28), 'self', False)
        # Processing the call keyword arguments (line 4004)
        kwargs_145403 = {}
        # Getting the type of 'power' (line 4004)
        power_145400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4004, 15), 'power', False)
        # Calling power(args, kwargs) (line 4004)
        power_call_result_145404 = invoke(stypy.reporting.localization.Localization(__file__, 4004, 15), power_145400, *[other_145401, self_145402], **kwargs_145403)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4004, 8), 'stypy_return_type', power_call_result_145404)
        
        # ################# End of '__rpow__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__rpow__' in the type store
        # Getting the type of 'stypy_return_type' (line 3999)
        stypy_return_type_145405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3999, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145405)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__rpow__'
        return stypy_return_type_145405


    @norecursion
    def __iadd__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__iadd__'
        module_type_store = module_type_store.open_function_context('__iadd__', 4006, 4, False)
        # Assigning a type to the variable 'self' (line 4007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4007, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__iadd__')
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__iadd__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__iadd__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__iadd__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__iadd__(...)' code ##################

        str_145406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4010, (-1)), 'str', '\n        Add other to self in-place.\n\n        ')
        
        # Assigning a Call to a Name (line 4011):
        
        # Assigning a Call to a Name (line 4011):
        
        # Call to getmask(...): (line 4011)
        # Processing the call arguments (line 4011)
        # Getting the type of 'other' (line 4011)
        other_145408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4011, 20), 'other', False)
        # Processing the call keyword arguments (line 4011)
        kwargs_145409 = {}
        # Getting the type of 'getmask' (line 4011)
        getmask_145407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4011, 12), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4011)
        getmask_call_result_145410 = invoke(stypy.reporting.localization.Localization(__file__, 4011, 12), getmask_145407, *[other_145408], **kwargs_145409)
        
        # Assigning a type to the variable 'm' (line 4011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4011, 8), 'm', getmask_call_result_145410)
        
        
        # Getting the type of 'self' (line 4012)
        self_145411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4012, 11), 'self')
        # Obtaining the member '_mask' of a type (line 4012)
        _mask_145412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4012, 11), self_145411, '_mask')
        # Getting the type of 'nomask' (line 4012)
        nomask_145413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4012, 25), 'nomask')
        # Applying the binary operator 'is' (line 4012)
        result_is__145414 = python_operator(stypy.reporting.localization.Localization(__file__, 4012, 11), 'is', _mask_145412, nomask_145413)
        
        # Testing the type of an if condition (line 4012)
        if_condition_145415 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4012, 8), result_is__145414)
        # Assigning a type to the variable 'if_condition_145415' (line 4012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4012, 8), 'if_condition_145415', if_condition_145415)
        # SSA begins for if statement (line 4012)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 4013)
        m_145416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4013, 15), 'm')
        # Getting the type of 'nomask' (line 4013)
        nomask_145417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4013, 24), 'nomask')
        # Applying the binary operator 'isnot' (line 4013)
        result_is_not_145418 = python_operator(stypy.reporting.localization.Localization(__file__, 4013, 15), 'isnot', m_145416, nomask_145417)
        
        
        # Call to any(...): (line 4013)
        # Processing the call keyword arguments (line 4013)
        kwargs_145421 = {}
        # Getting the type of 'm' (line 4013)
        m_145419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4013, 35), 'm', False)
        # Obtaining the member 'any' of a type (line 4013)
        any_145420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4013, 35), m_145419, 'any')
        # Calling any(args, kwargs) (line 4013)
        any_call_result_145422 = invoke(stypy.reporting.localization.Localization(__file__, 4013, 35), any_145420, *[], **kwargs_145421)
        
        # Applying the binary operator 'and' (line 4013)
        result_and_keyword_145423 = python_operator(stypy.reporting.localization.Localization(__file__, 4013, 15), 'and', result_is_not_145418, any_call_result_145422)
        
        # Testing the type of an if condition (line 4013)
        if_condition_145424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4013, 12), result_and_keyword_145423)
        # Assigning a type to the variable 'if_condition_145424' (line 4013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4013, 12), 'if_condition_145424', if_condition_145424)
        # SSA begins for if statement (line 4013)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 4014):
        
        # Assigning a Call to a Attribute (line 4014):
        
        # Call to make_mask_none(...): (line 4014)
        # Processing the call arguments (line 4014)
        # Getting the type of 'self' (line 4014)
        self_145426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4014, 44), 'self', False)
        # Obtaining the member 'shape' of a type (line 4014)
        shape_145427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4014, 44), self_145426, 'shape')
        # Getting the type of 'self' (line 4014)
        self_145428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4014, 56), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4014)
        dtype_145429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4014, 56), self_145428, 'dtype')
        # Processing the call keyword arguments (line 4014)
        kwargs_145430 = {}
        # Getting the type of 'make_mask_none' (line 4014)
        make_mask_none_145425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4014, 29), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 4014)
        make_mask_none_call_result_145431 = invoke(stypy.reporting.localization.Localization(__file__, 4014, 29), make_mask_none_145425, *[shape_145427, dtype_145429], **kwargs_145430)
        
        # Getting the type of 'self' (line 4014)
        self_145432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4014, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4014)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4014, 16), self_145432, '_mask', make_mask_none_call_result_145431)
        
        # Getting the type of 'self' (line 4015)
        self_145433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4015, 16), 'self')
        # Obtaining the member '_mask' of a type (line 4015)
        _mask_145434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4015, 16), self_145433, '_mask')
        # Getting the type of 'm' (line 4015)
        m_145435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4015, 30), 'm')
        # Applying the binary operator '+=' (line 4015)
        result_iadd_145436 = python_operator(stypy.reporting.localization.Localization(__file__, 4015, 16), '+=', _mask_145434, m_145435)
        # Getting the type of 'self' (line 4015)
        self_145437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4015, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4015)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4015, 16), self_145437, '_mask', result_iadd_145436)
        
        # SSA join for if statement (line 4013)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 4012)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'm' (line 4017)
        m_145438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4017, 15), 'm')
        # Getting the type of 'nomask' (line 4017)
        nomask_145439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4017, 24), 'nomask')
        # Applying the binary operator 'isnot' (line 4017)
        result_is_not_145440 = python_operator(stypy.reporting.localization.Localization(__file__, 4017, 15), 'isnot', m_145438, nomask_145439)
        
        # Testing the type of an if condition (line 4017)
        if_condition_145441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4017, 12), result_is_not_145440)
        # Assigning a type to the variable 'if_condition_145441' (line 4017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4017, 12), 'if_condition_145441', if_condition_145441)
        # SSA begins for if statement (line 4017)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 4018)
        self_145442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4018, 16), 'self')
        # Obtaining the member '_mask' of a type (line 4018)
        _mask_145443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4018, 16), self_145442, '_mask')
        # Getting the type of 'm' (line 4018)
        m_145444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4018, 30), 'm')
        # Applying the binary operator '+=' (line 4018)
        result_iadd_145445 = python_operator(stypy.reporting.localization.Localization(__file__, 4018, 16), '+=', _mask_145443, m_145444)
        # Getting the type of 'self' (line 4018)
        self_145446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4018, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4018)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4018, 16), self_145446, '_mask', result_iadd_145445)
        
        # SSA join for if statement (line 4017)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4012)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __iadd__(...): (line 4019)
        # Processing the call arguments (line 4019)
        
        # Call to where(...): (line 4019)
        # Processing the call arguments (line 4019)
        # Getting the type of 'self' (line 4019)
        self_145452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4019, 37), 'self', False)
        # Obtaining the member '_mask' of a type (line 4019)
        _mask_145453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4019, 37), self_145452, '_mask')
        
        # Call to type(...): (line 4019)
        # Processing the call arguments (line 4019)
        int_145457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4019, 65), 'int')
        # Processing the call keyword arguments (line 4019)
        kwargs_145458 = {}
        # Getting the type of 'self' (line 4019)
        self_145454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4019, 49), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4019)
        dtype_145455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4019, 49), self_145454, 'dtype')
        # Obtaining the member 'type' of a type (line 4019)
        type_145456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4019, 49), dtype_145455, 'type')
        # Calling type(args, kwargs) (line 4019)
        type_call_result_145459 = invoke(stypy.reporting.localization.Localization(__file__, 4019, 49), type_145456, *[int_145457], **kwargs_145458)
        
        
        # Call to getdata(...): (line 4020)
        # Processing the call arguments (line 4020)
        # Getting the type of 'other' (line 4020)
        other_145461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4020, 45), 'other', False)
        # Processing the call keyword arguments (line 4020)
        kwargs_145462 = {}
        # Getting the type of 'getdata' (line 4020)
        getdata_145460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4020, 37), 'getdata', False)
        # Calling getdata(args, kwargs) (line 4020)
        getdata_call_result_145463 = invoke(stypy.reporting.localization.Localization(__file__, 4020, 37), getdata_145460, *[other_145461], **kwargs_145462)
        
        # Processing the call keyword arguments (line 4019)
        kwargs_145464 = {}
        # Getting the type of 'np' (line 4019)
        np_145450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4019, 28), 'np', False)
        # Obtaining the member 'where' of a type (line 4019)
        where_145451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4019, 28), np_145450, 'where')
        # Calling where(args, kwargs) (line 4019)
        where_call_result_145465 = invoke(stypy.reporting.localization.Localization(__file__, 4019, 28), where_145451, *[_mask_145453, type_call_result_145459, getdata_call_result_145463], **kwargs_145464)
        
        # Processing the call keyword arguments (line 4019)
        kwargs_145466 = {}
        # Getting the type of 'self' (line 4019)
        self_145447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4019, 8), 'self', False)
        # Obtaining the member '_data' of a type (line 4019)
        _data_145448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4019, 8), self_145447, '_data')
        # Obtaining the member '__iadd__' of a type (line 4019)
        iadd___145449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4019, 8), _data_145448, '__iadd__')
        # Calling __iadd__(args, kwargs) (line 4019)
        iadd___call_result_145467 = invoke(stypy.reporting.localization.Localization(__file__, 4019, 8), iadd___145449, *[where_call_result_145465], **kwargs_145466)
        
        # Getting the type of 'self' (line 4021)
        self_145468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4021, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 4021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4021, 8), 'stypy_return_type', self_145468)
        
        # ################# End of '__iadd__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__iadd__' in the type store
        # Getting the type of 'stypy_return_type' (line 4006)
        stypy_return_type_145469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4006, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145469)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__iadd__'
        return stypy_return_type_145469


    @norecursion
    def __isub__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__isub__'
        module_type_store = module_type_store.open_function_context('__isub__', 4023, 4, False)
        # Assigning a type to the variable 'self' (line 4024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4024, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__isub__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__isub__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__isub__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__isub__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__isub__')
        MaskedArray.__isub__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__isub__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__isub__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__isub__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__isub__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__isub__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__isub__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__isub__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__isub__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__isub__(...)' code ##################

        str_145470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4027, (-1)), 'str', '\n        Subtract other from self in-place.\n\n        ')
        
        # Assigning a Call to a Name (line 4028):
        
        # Assigning a Call to a Name (line 4028):
        
        # Call to getmask(...): (line 4028)
        # Processing the call arguments (line 4028)
        # Getting the type of 'other' (line 4028)
        other_145472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4028, 20), 'other', False)
        # Processing the call keyword arguments (line 4028)
        kwargs_145473 = {}
        # Getting the type of 'getmask' (line 4028)
        getmask_145471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4028, 12), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4028)
        getmask_call_result_145474 = invoke(stypy.reporting.localization.Localization(__file__, 4028, 12), getmask_145471, *[other_145472], **kwargs_145473)
        
        # Assigning a type to the variable 'm' (line 4028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4028, 8), 'm', getmask_call_result_145474)
        
        
        # Getting the type of 'self' (line 4029)
        self_145475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4029, 11), 'self')
        # Obtaining the member '_mask' of a type (line 4029)
        _mask_145476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4029, 11), self_145475, '_mask')
        # Getting the type of 'nomask' (line 4029)
        nomask_145477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4029, 25), 'nomask')
        # Applying the binary operator 'is' (line 4029)
        result_is__145478 = python_operator(stypy.reporting.localization.Localization(__file__, 4029, 11), 'is', _mask_145476, nomask_145477)
        
        # Testing the type of an if condition (line 4029)
        if_condition_145479 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4029, 8), result_is__145478)
        # Assigning a type to the variable 'if_condition_145479' (line 4029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4029, 8), 'if_condition_145479', if_condition_145479)
        # SSA begins for if statement (line 4029)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 4030)
        m_145480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4030, 15), 'm')
        # Getting the type of 'nomask' (line 4030)
        nomask_145481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4030, 24), 'nomask')
        # Applying the binary operator 'isnot' (line 4030)
        result_is_not_145482 = python_operator(stypy.reporting.localization.Localization(__file__, 4030, 15), 'isnot', m_145480, nomask_145481)
        
        
        # Call to any(...): (line 4030)
        # Processing the call keyword arguments (line 4030)
        kwargs_145485 = {}
        # Getting the type of 'm' (line 4030)
        m_145483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4030, 35), 'm', False)
        # Obtaining the member 'any' of a type (line 4030)
        any_145484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4030, 35), m_145483, 'any')
        # Calling any(args, kwargs) (line 4030)
        any_call_result_145486 = invoke(stypy.reporting.localization.Localization(__file__, 4030, 35), any_145484, *[], **kwargs_145485)
        
        # Applying the binary operator 'and' (line 4030)
        result_and_keyword_145487 = python_operator(stypy.reporting.localization.Localization(__file__, 4030, 15), 'and', result_is_not_145482, any_call_result_145486)
        
        # Testing the type of an if condition (line 4030)
        if_condition_145488 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4030, 12), result_and_keyword_145487)
        # Assigning a type to the variable 'if_condition_145488' (line 4030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4030, 12), 'if_condition_145488', if_condition_145488)
        # SSA begins for if statement (line 4030)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 4031):
        
        # Assigning a Call to a Attribute (line 4031):
        
        # Call to make_mask_none(...): (line 4031)
        # Processing the call arguments (line 4031)
        # Getting the type of 'self' (line 4031)
        self_145490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4031, 44), 'self', False)
        # Obtaining the member 'shape' of a type (line 4031)
        shape_145491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4031, 44), self_145490, 'shape')
        # Getting the type of 'self' (line 4031)
        self_145492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4031, 56), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4031)
        dtype_145493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4031, 56), self_145492, 'dtype')
        # Processing the call keyword arguments (line 4031)
        kwargs_145494 = {}
        # Getting the type of 'make_mask_none' (line 4031)
        make_mask_none_145489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4031, 29), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 4031)
        make_mask_none_call_result_145495 = invoke(stypy.reporting.localization.Localization(__file__, 4031, 29), make_mask_none_145489, *[shape_145491, dtype_145493], **kwargs_145494)
        
        # Getting the type of 'self' (line 4031)
        self_145496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4031, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4031)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4031, 16), self_145496, '_mask', make_mask_none_call_result_145495)
        
        # Getting the type of 'self' (line 4032)
        self_145497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4032, 16), 'self')
        # Obtaining the member '_mask' of a type (line 4032)
        _mask_145498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4032, 16), self_145497, '_mask')
        # Getting the type of 'm' (line 4032)
        m_145499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4032, 30), 'm')
        # Applying the binary operator '+=' (line 4032)
        result_iadd_145500 = python_operator(stypy.reporting.localization.Localization(__file__, 4032, 16), '+=', _mask_145498, m_145499)
        # Getting the type of 'self' (line 4032)
        self_145501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4032, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4032)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4032, 16), self_145501, '_mask', result_iadd_145500)
        
        # SSA join for if statement (line 4030)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 4029)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'm' (line 4033)
        m_145502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4033, 13), 'm')
        # Getting the type of 'nomask' (line 4033)
        nomask_145503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4033, 22), 'nomask')
        # Applying the binary operator 'isnot' (line 4033)
        result_is_not_145504 = python_operator(stypy.reporting.localization.Localization(__file__, 4033, 13), 'isnot', m_145502, nomask_145503)
        
        # Testing the type of an if condition (line 4033)
        if_condition_145505 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4033, 13), result_is_not_145504)
        # Assigning a type to the variable 'if_condition_145505' (line 4033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4033, 13), 'if_condition_145505', if_condition_145505)
        # SSA begins for if statement (line 4033)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 4034)
        self_145506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4034, 12), 'self')
        # Obtaining the member '_mask' of a type (line 4034)
        _mask_145507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4034, 12), self_145506, '_mask')
        # Getting the type of 'm' (line 4034)
        m_145508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4034, 26), 'm')
        # Applying the binary operator '+=' (line 4034)
        result_iadd_145509 = python_operator(stypy.reporting.localization.Localization(__file__, 4034, 12), '+=', _mask_145507, m_145508)
        # Getting the type of 'self' (line 4034)
        self_145510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4034, 12), 'self')
        # Setting the type of the member '_mask' of a type (line 4034)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4034, 12), self_145510, '_mask', result_iadd_145509)
        
        # SSA join for if statement (line 4033)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4029)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __isub__(...): (line 4035)
        # Processing the call arguments (line 4035)
        
        # Call to where(...): (line 4035)
        # Processing the call arguments (line 4035)
        # Getting the type of 'self' (line 4035)
        self_145516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4035, 37), 'self', False)
        # Obtaining the member '_mask' of a type (line 4035)
        _mask_145517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4035, 37), self_145516, '_mask')
        
        # Call to type(...): (line 4035)
        # Processing the call arguments (line 4035)
        int_145521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4035, 65), 'int')
        # Processing the call keyword arguments (line 4035)
        kwargs_145522 = {}
        # Getting the type of 'self' (line 4035)
        self_145518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4035, 49), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4035)
        dtype_145519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4035, 49), self_145518, 'dtype')
        # Obtaining the member 'type' of a type (line 4035)
        type_145520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4035, 49), dtype_145519, 'type')
        # Calling type(args, kwargs) (line 4035)
        type_call_result_145523 = invoke(stypy.reporting.localization.Localization(__file__, 4035, 49), type_145520, *[int_145521], **kwargs_145522)
        
        
        # Call to getdata(...): (line 4036)
        # Processing the call arguments (line 4036)
        # Getting the type of 'other' (line 4036)
        other_145525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4036, 45), 'other', False)
        # Processing the call keyword arguments (line 4036)
        kwargs_145526 = {}
        # Getting the type of 'getdata' (line 4036)
        getdata_145524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4036, 37), 'getdata', False)
        # Calling getdata(args, kwargs) (line 4036)
        getdata_call_result_145527 = invoke(stypy.reporting.localization.Localization(__file__, 4036, 37), getdata_145524, *[other_145525], **kwargs_145526)
        
        # Processing the call keyword arguments (line 4035)
        kwargs_145528 = {}
        # Getting the type of 'np' (line 4035)
        np_145514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4035, 28), 'np', False)
        # Obtaining the member 'where' of a type (line 4035)
        where_145515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4035, 28), np_145514, 'where')
        # Calling where(args, kwargs) (line 4035)
        where_call_result_145529 = invoke(stypy.reporting.localization.Localization(__file__, 4035, 28), where_145515, *[_mask_145517, type_call_result_145523, getdata_call_result_145527], **kwargs_145528)
        
        # Processing the call keyword arguments (line 4035)
        kwargs_145530 = {}
        # Getting the type of 'self' (line 4035)
        self_145511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4035, 8), 'self', False)
        # Obtaining the member '_data' of a type (line 4035)
        _data_145512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4035, 8), self_145511, '_data')
        # Obtaining the member '__isub__' of a type (line 4035)
        isub___145513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4035, 8), _data_145512, '__isub__')
        # Calling __isub__(args, kwargs) (line 4035)
        isub___call_result_145531 = invoke(stypy.reporting.localization.Localization(__file__, 4035, 8), isub___145513, *[where_call_result_145529], **kwargs_145530)
        
        # Getting the type of 'self' (line 4037)
        self_145532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4037, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 4037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4037, 8), 'stypy_return_type', self_145532)
        
        # ################# End of '__isub__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__isub__' in the type store
        # Getting the type of 'stypy_return_type' (line 4023)
        stypy_return_type_145533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4023, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145533)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__isub__'
        return stypy_return_type_145533


    @norecursion
    def __imul__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__imul__'
        module_type_store = module_type_store.open_function_context('__imul__', 4039, 4, False)
        # Assigning a type to the variable 'self' (line 4040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4040, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__imul__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__imul__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__imul__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__imul__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__imul__')
        MaskedArray.__imul__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__imul__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__imul__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__imul__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__imul__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__imul__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__imul__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__imul__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__imul__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__imul__(...)' code ##################

        str_145534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4043, (-1)), 'str', '\n        Multiply self by other in-place.\n\n        ')
        
        # Assigning a Call to a Name (line 4044):
        
        # Assigning a Call to a Name (line 4044):
        
        # Call to getmask(...): (line 4044)
        # Processing the call arguments (line 4044)
        # Getting the type of 'other' (line 4044)
        other_145536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4044, 20), 'other', False)
        # Processing the call keyword arguments (line 4044)
        kwargs_145537 = {}
        # Getting the type of 'getmask' (line 4044)
        getmask_145535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4044, 12), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4044)
        getmask_call_result_145538 = invoke(stypy.reporting.localization.Localization(__file__, 4044, 12), getmask_145535, *[other_145536], **kwargs_145537)
        
        # Assigning a type to the variable 'm' (line 4044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4044, 8), 'm', getmask_call_result_145538)
        
        
        # Getting the type of 'self' (line 4045)
        self_145539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4045, 11), 'self')
        # Obtaining the member '_mask' of a type (line 4045)
        _mask_145540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4045, 11), self_145539, '_mask')
        # Getting the type of 'nomask' (line 4045)
        nomask_145541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4045, 25), 'nomask')
        # Applying the binary operator 'is' (line 4045)
        result_is__145542 = python_operator(stypy.reporting.localization.Localization(__file__, 4045, 11), 'is', _mask_145540, nomask_145541)
        
        # Testing the type of an if condition (line 4045)
        if_condition_145543 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4045, 8), result_is__145542)
        # Assigning a type to the variable 'if_condition_145543' (line 4045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4045, 8), 'if_condition_145543', if_condition_145543)
        # SSA begins for if statement (line 4045)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 4046)
        m_145544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4046, 15), 'm')
        # Getting the type of 'nomask' (line 4046)
        nomask_145545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4046, 24), 'nomask')
        # Applying the binary operator 'isnot' (line 4046)
        result_is_not_145546 = python_operator(stypy.reporting.localization.Localization(__file__, 4046, 15), 'isnot', m_145544, nomask_145545)
        
        
        # Call to any(...): (line 4046)
        # Processing the call keyword arguments (line 4046)
        kwargs_145549 = {}
        # Getting the type of 'm' (line 4046)
        m_145547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4046, 35), 'm', False)
        # Obtaining the member 'any' of a type (line 4046)
        any_145548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4046, 35), m_145547, 'any')
        # Calling any(args, kwargs) (line 4046)
        any_call_result_145550 = invoke(stypy.reporting.localization.Localization(__file__, 4046, 35), any_145548, *[], **kwargs_145549)
        
        # Applying the binary operator 'and' (line 4046)
        result_and_keyword_145551 = python_operator(stypy.reporting.localization.Localization(__file__, 4046, 15), 'and', result_is_not_145546, any_call_result_145550)
        
        # Testing the type of an if condition (line 4046)
        if_condition_145552 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4046, 12), result_and_keyword_145551)
        # Assigning a type to the variable 'if_condition_145552' (line 4046)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4046, 12), 'if_condition_145552', if_condition_145552)
        # SSA begins for if statement (line 4046)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 4047):
        
        # Assigning a Call to a Attribute (line 4047):
        
        # Call to make_mask_none(...): (line 4047)
        # Processing the call arguments (line 4047)
        # Getting the type of 'self' (line 4047)
        self_145554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4047, 44), 'self', False)
        # Obtaining the member 'shape' of a type (line 4047)
        shape_145555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4047, 44), self_145554, 'shape')
        # Getting the type of 'self' (line 4047)
        self_145556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4047, 56), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4047)
        dtype_145557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4047, 56), self_145556, 'dtype')
        # Processing the call keyword arguments (line 4047)
        kwargs_145558 = {}
        # Getting the type of 'make_mask_none' (line 4047)
        make_mask_none_145553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4047, 29), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 4047)
        make_mask_none_call_result_145559 = invoke(stypy.reporting.localization.Localization(__file__, 4047, 29), make_mask_none_145553, *[shape_145555, dtype_145557], **kwargs_145558)
        
        # Getting the type of 'self' (line 4047)
        self_145560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4047, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4047)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4047, 16), self_145560, '_mask', make_mask_none_call_result_145559)
        
        # Getting the type of 'self' (line 4048)
        self_145561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4048, 16), 'self')
        # Obtaining the member '_mask' of a type (line 4048)
        _mask_145562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4048, 16), self_145561, '_mask')
        # Getting the type of 'm' (line 4048)
        m_145563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4048, 30), 'm')
        # Applying the binary operator '+=' (line 4048)
        result_iadd_145564 = python_operator(stypy.reporting.localization.Localization(__file__, 4048, 16), '+=', _mask_145562, m_145563)
        # Getting the type of 'self' (line 4048)
        self_145565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4048, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4048)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4048, 16), self_145565, '_mask', result_iadd_145564)
        
        # SSA join for if statement (line 4046)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 4045)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'm' (line 4049)
        m_145566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4049, 13), 'm')
        # Getting the type of 'nomask' (line 4049)
        nomask_145567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4049, 22), 'nomask')
        # Applying the binary operator 'isnot' (line 4049)
        result_is_not_145568 = python_operator(stypy.reporting.localization.Localization(__file__, 4049, 13), 'isnot', m_145566, nomask_145567)
        
        # Testing the type of an if condition (line 4049)
        if_condition_145569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4049, 13), result_is_not_145568)
        # Assigning a type to the variable 'if_condition_145569' (line 4049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4049, 13), 'if_condition_145569', if_condition_145569)
        # SSA begins for if statement (line 4049)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 4050)
        self_145570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4050, 12), 'self')
        # Obtaining the member '_mask' of a type (line 4050)
        _mask_145571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4050, 12), self_145570, '_mask')
        # Getting the type of 'm' (line 4050)
        m_145572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4050, 26), 'm')
        # Applying the binary operator '+=' (line 4050)
        result_iadd_145573 = python_operator(stypy.reporting.localization.Localization(__file__, 4050, 12), '+=', _mask_145571, m_145572)
        # Getting the type of 'self' (line 4050)
        self_145574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4050, 12), 'self')
        # Setting the type of the member '_mask' of a type (line 4050)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4050, 12), self_145574, '_mask', result_iadd_145573)
        
        # SSA join for if statement (line 4049)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4045)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __imul__(...): (line 4051)
        # Processing the call arguments (line 4051)
        
        # Call to where(...): (line 4051)
        # Processing the call arguments (line 4051)
        # Getting the type of 'self' (line 4051)
        self_145580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4051, 37), 'self', False)
        # Obtaining the member '_mask' of a type (line 4051)
        _mask_145581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4051, 37), self_145580, '_mask')
        
        # Call to type(...): (line 4051)
        # Processing the call arguments (line 4051)
        int_145585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4051, 65), 'int')
        # Processing the call keyword arguments (line 4051)
        kwargs_145586 = {}
        # Getting the type of 'self' (line 4051)
        self_145582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4051, 49), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4051)
        dtype_145583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4051, 49), self_145582, 'dtype')
        # Obtaining the member 'type' of a type (line 4051)
        type_145584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4051, 49), dtype_145583, 'type')
        # Calling type(args, kwargs) (line 4051)
        type_call_result_145587 = invoke(stypy.reporting.localization.Localization(__file__, 4051, 49), type_145584, *[int_145585], **kwargs_145586)
        
        
        # Call to getdata(...): (line 4052)
        # Processing the call arguments (line 4052)
        # Getting the type of 'other' (line 4052)
        other_145589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4052, 45), 'other', False)
        # Processing the call keyword arguments (line 4052)
        kwargs_145590 = {}
        # Getting the type of 'getdata' (line 4052)
        getdata_145588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4052, 37), 'getdata', False)
        # Calling getdata(args, kwargs) (line 4052)
        getdata_call_result_145591 = invoke(stypy.reporting.localization.Localization(__file__, 4052, 37), getdata_145588, *[other_145589], **kwargs_145590)
        
        # Processing the call keyword arguments (line 4051)
        kwargs_145592 = {}
        # Getting the type of 'np' (line 4051)
        np_145578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4051, 28), 'np', False)
        # Obtaining the member 'where' of a type (line 4051)
        where_145579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4051, 28), np_145578, 'where')
        # Calling where(args, kwargs) (line 4051)
        where_call_result_145593 = invoke(stypy.reporting.localization.Localization(__file__, 4051, 28), where_145579, *[_mask_145581, type_call_result_145587, getdata_call_result_145591], **kwargs_145592)
        
        # Processing the call keyword arguments (line 4051)
        kwargs_145594 = {}
        # Getting the type of 'self' (line 4051)
        self_145575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4051, 8), 'self', False)
        # Obtaining the member '_data' of a type (line 4051)
        _data_145576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4051, 8), self_145575, '_data')
        # Obtaining the member '__imul__' of a type (line 4051)
        imul___145577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4051, 8), _data_145576, '__imul__')
        # Calling __imul__(args, kwargs) (line 4051)
        imul___call_result_145595 = invoke(stypy.reporting.localization.Localization(__file__, 4051, 8), imul___145577, *[where_call_result_145593], **kwargs_145594)
        
        # Getting the type of 'self' (line 4053)
        self_145596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4053, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 4053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4053, 8), 'stypy_return_type', self_145596)
        
        # ################# End of '__imul__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__imul__' in the type store
        # Getting the type of 'stypy_return_type' (line 4039)
        stypy_return_type_145597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4039, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145597)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__imul__'
        return stypy_return_type_145597


    @norecursion
    def __idiv__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__idiv__'
        module_type_store = module_type_store.open_function_context('__idiv__', 4055, 4, False)
        # Assigning a type to the variable 'self' (line 4056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4056, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__idiv__')
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__idiv__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__idiv__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__idiv__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__idiv__(...)' code ##################

        str_145598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4059, (-1)), 'str', '\n        Divide self by other in-place.\n\n        ')
        
        # Assigning a Call to a Name (line 4060):
        
        # Assigning a Call to a Name (line 4060):
        
        # Call to getdata(...): (line 4060)
        # Processing the call arguments (line 4060)
        # Getting the type of 'other' (line 4060)
        other_145600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4060, 29), 'other', False)
        # Processing the call keyword arguments (line 4060)
        kwargs_145601 = {}
        # Getting the type of 'getdata' (line 4060)
        getdata_145599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4060, 21), 'getdata', False)
        # Calling getdata(args, kwargs) (line 4060)
        getdata_call_result_145602 = invoke(stypy.reporting.localization.Localization(__file__, 4060, 21), getdata_145599, *[other_145600], **kwargs_145601)
        
        # Assigning a type to the variable 'other_data' (line 4060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4060, 8), 'other_data', getdata_call_result_145602)
        
        # Assigning a Call to a Name (line 4061):
        
        # Assigning a Call to a Name (line 4061):
        
        # Call to __call__(...): (line 4061)
        # Processing the call arguments (line 4061)
        # Getting the type of 'self' (line 4061)
        self_145607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4061, 48), 'self', False)
        # Obtaining the member '_data' of a type (line 4061)
        _data_145608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4061, 48), self_145607, '_data')
        # Getting the type of 'other_data' (line 4061)
        other_data_145609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4061, 60), 'other_data', False)
        # Processing the call keyword arguments (line 4061)
        kwargs_145610 = {}
        
        # Call to _DomainSafeDivide(...): (line 4061)
        # Processing the call keyword arguments (line 4061)
        kwargs_145604 = {}
        # Getting the type of '_DomainSafeDivide' (line 4061)
        _DomainSafeDivide_145603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4061, 19), '_DomainSafeDivide', False)
        # Calling _DomainSafeDivide(args, kwargs) (line 4061)
        _DomainSafeDivide_call_result_145605 = invoke(stypy.reporting.localization.Localization(__file__, 4061, 19), _DomainSafeDivide_145603, *[], **kwargs_145604)
        
        # Obtaining the member '__call__' of a type (line 4061)
        call___145606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4061, 19), _DomainSafeDivide_call_result_145605, '__call__')
        # Calling __call__(args, kwargs) (line 4061)
        call___call_result_145611 = invoke(stypy.reporting.localization.Localization(__file__, 4061, 19), call___145606, *[_data_145608, other_data_145609], **kwargs_145610)
        
        # Assigning a type to the variable 'dom_mask' (line 4061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4061, 8), 'dom_mask', call___call_result_145611)
        
        # Assigning a Call to a Name (line 4062):
        
        # Assigning a Call to a Name (line 4062):
        
        # Call to getmask(...): (line 4062)
        # Processing the call arguments (line 4062)
        # Getting the type of 'other' (line 4062)
        other_145613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4062, 29), 'other', False)
        # Processing the call keyword arguments (line 4062)
        kwargs_145614 = {}
        # Getting the type of 'getmask' (line 4062)
        getmask_145612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4062, 21), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4062)
        getmask_call_result_145615 = invoke(stypy.reporting.localization.Localization(__file__, 4062, 21), getmask_145612, *[other_145613], **kwargs_145614)
        
        # Assigning a type to the variable 'other_mask' (line 4062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4062, 8), 'other_mask', getmask_call_result_145615)
        
        # Assigning a Call to a Name (line 4063):
        
        # Assigning a Call to a Name (line 4063):
        
        # Call to mask_or(...): (line 4063)
        # Processing the call arguments (line 4063)
        # Getting the type of 'other_mask' (line 4063)
        other_mask_145617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4063, 27), 'other_mask', False)
        # Getting the type of 'dom_mask' (line 4063)
        dom_mask_145618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4063, 39), 'dom_mask', False)
        # Processing the call keyword arguments (line 4063)
        kwargs_145619 = {}
        # Getting the type of 'mask_or' (line 4063)
        mask_or_145616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4063, 19), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 4063)
        mask_or_call_result_145620 = invoke(stypy.reporting.localization.Localization(__file__, 4063, 19), mask_or_145616, *[other_mask_145617, dom_mask_145618], **kwargs_145619)
        
        # Assigning a type to the variable 'new_mask' (line 4063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4063, 8), 'new_mask', mask_or_call_result_145620)
        
        
        # Call to any(...): (line 4065)
        # Processing the call keyword arguments (line 4065)
        kwargs_145623 = {}
        # Getting the type of 'dom_mask' (line 4065)
        dom_mask_145621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4065, 11), 'dom_mask', False)
        # Obtaining the member 'any' of a type (line 4065)
        any_145622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4065, 11), dom_mask_145621, 'any')
        # Calling any(args, kwargs) (line 4065)
        any_call_result_145624 = invoke(stypy.reporting.localization.Localization(__file__, 4065, 11), any_145622, *[], **kwargs_145623)
        
        # Testing the type of an if condition (line 4065)
        if_condition_145625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4065, 8), any_call_result_145624)
        # Assigning a type to the variable 'if_condition_145625' (line 4065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4065, 8), 'if_condition_145625', if_condition_145625)
        # SSA begins for if statement (line 4065)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 4066):
        
        # Assigning a Subscript to a Name (line 4066):
        
        # Obtaining the type of the subscript
        int_145626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4066, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 4066)
        np_145627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4066, 36), 'np')
        # Obtaining the member 'divide' of a type (line 4066)
        divide_145628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4066, 36), np_145627, 'divide')
        # Getting the type of 'ufunc_fills' (line 4066)
        ufunc_fills_145629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4066, 24), 'ufunc_fills')
        # Obtaining the member '__getitem__' of a type (line 4066)
        getitem___145630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4066, 24), ufunc_fills_145629, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4066)
        subscript_call_result_145631 = invoke(stypy.reporting.localization.Localization(__file__, 4066, 24), getitem___145630, divide_145628)
        
        # Obtaining the member '__getitem__' of a type (line 4066)
        getitem___145632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4066, 12), subscript_call_result_145631, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4066)
        subscript_call_result_145633 = invoke(stypy.reporting.localization.Localization(__file__, 4066, 12), getitem___145632, int_145626)
        
        # Assigning a type to the variable 'tuple_var_assignment_139188' (line 4066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4066, 12), 'tuple_var_assignment_139188', subscript_call_result_145633)
        
        # Assigning a Subscript to a Name (line 4066):
        
        # Obtaining the type of the subscript
        int_145634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4066, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 4066)
        np_145635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4066, 36), 'np')
        # Obtaining the member 'divide' of a type (line 4066)
        divide_145636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4066, 36), np_145635, 'divide')
        # Getting the type of 'ufunc_fills' (line 4066)
        ufunc_fills_145637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4066, 24), 'ufunc_fills')
        # Obtaining the member '__getitem__' of a type (line 4066)
        getitem___145638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4066, 24), ufunc_fills_145637, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4066)
        subscript_call_result_145639 = invoke(stypy.reporting.localization.Localization(__file__, 4066, 24), getitem___145638, divide_145636)
        
        # Obtaining the member '__getitem__' of a type (line 4066)
        getitem___145640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4066, 12), subscript_call_result_145639, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4066)
        subscript_call_result_145641 = invoke(stypy.reporting.localization.Localization(__file__, 4066, 12), getitem___145640, int_145634)
        
        # Assigning a type to the variable 'tuple_var_assignment_139189' (line 4066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4066, 12), 'tuple_var_assignment_139189', subscript_call_result_145641)
        
        # Assigning a Name to a Name (line 4066):
        # Getting the type of 'tuple_var_assignment_139188' (line 4066)
        tuple_var_assignment_139188_145642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4066, 12), 'tuple_var_assignment_139188')
        # Assigning a type to the variable '_' (line 4066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4066, 13), '_', tuple_var_assignment_139188_145642)
        
        # Assigning a Name to a Name (line 4066):
        # Getting the type of 'tuple_var_assignment_139189' (line 4066)
        tuple_var_assignment_139189_145643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4066, 12), 'tuple_var_assignment_139189')
        # Assigning a type to the variable 'fval' (line 4066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4066, 16), 'fval', tuple_var_assignment_139189_145643)
        
        # Assigning a Call to a Name (line 4067):
        
        # Assigning a Call to a Name (line 4067):
        
        # Call to where(...): (line 4067)
        # Processing the call arguments (line 4067)
        # Getting the type of 'dom_mask' (line 4067)
        dom_mask_145646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4067, 34), 'dom_mask', False)
        # Getting the type of 'fval' (line 4067)
        fval_145647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4067, 44), 'fval', False)
        # Getting the type of 'other_data' (line 4067)
        other_data_145648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4067, 50), 'other_data', False)
        # Processing the call keyword arguments (line 4067)
        kwargs_145649 = {}
        # Getting the type of 'np' (line 4067)
        np_145644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4067, 25), 'np', False)
        # Obtaining the member 'where' of a type (line 4067)
        where_145645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4067, 25), np_145644, 'where')
        # Calling where(args, kwargs) (line 4067)
        where_call_result_145650 = invoke(stypy.reporting.localization.Localization(__file__, 4067, 25), where_145645, *[dom_mask_145646, fval_145647, other_data_145648], **kwargs_145649)
        
        # Assigning a type to the variable 'other_data' (line 4067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4067, 12), 'other_data', where_call_result_145650)
        # SSA join for if statement (line 4065)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 4068)
        self_145651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4068, 8), 'self')
        # Obtaining the member '_mask' of a type (line 4068)
        _mask_145652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4068, 8), self_145651, '_mask')
        # Getting the type of 'new_mask' (line 4068)
        new_mask_145653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4068, 22), 'new_mask')
        # Applying the binary operator '|=' (line 4068)
        result_ior_145654 = python_operator(stypy.reporting.localization.Localization(__file__, 4068, 8), '|=', _mask_145652, new_mask_145653)
        # Getting the type of 'self' (line 4068)
        self_145655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4068, 8), 'self')
        # Setting the type of the member '_mask' of a type (line 4068)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4068, 8), self_145655, '_mask', result_ior_145654)
        
        
        # Call to __idiv__(...): (line 4069)
        # Processing the call arguments (line 4069)
        
        # Call to where(...): (line 4069)
        # Processing the call arguments (line 4069)
        # Getting the type of 'self' (line 4069)
        self_145661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4069, 37), 'self', False)
        # Obtaining the member '_mask' of a type (line 4069)
        _mask_145662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4069, 37), self_145661, '_mask')
        
        # Call to type(...): (line 4069)
        # Processing the call arguments (line 4069)
        int_145666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4069, 65), 'int')
        # Processing the call keyword arguments (line 4069)
        kwargs_145667 = {}
        # Getting the type of 'self' (line 4069)
        self_145663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4069, 49), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4069)
        dtype_145664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4069, 49), self_145663, 'dtype')
        # Obtaining the member 'type' of a type (line 4069)
        type_145665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4069, 49), dtype_145664, 'type')
        # Calling type(args, kwargs) (line 4069)
        type_call_result_145668 = invoke(stypy.reporting.localization.Localization(__file__, 4069, 49), type_145665, *[int_145666], **kwargs_145667)
        
        # Getting the type of 'other_data' (line 4070)
        other_data_145669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4070, 37), 'other_data', False)
        # Processing the call keyword arguments (line 4069)
        kwargs_145670 = {}
        # Getting the type of 'np' (line 4069)
        np_145659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4069, 28), 'np', False)
        # Obtaining the member 'where' of a type (line 4069)
        where_145660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4069, 28), np_145659, 'where')
        # Calling where(args, kwargs) (line 4069)
        where_call_result_145671 = invoke(stypy.reporting.localization.Localization(__file__, 4069, 28), where_145660, *[_mask_145662, type_call_result_145668, other_data_145669], **kwargs_145670)
        
        # Processing the call keyword arguments (line 4069)
        kwargs_145672 = {}
        # Getting the type of 'self' (line 4069)
        self_145656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4069, 8), 'self', False)
        # Obtaining the member '_data' of a type (line 4069)
        _data_145657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4069, 8), self_145656, '_data')
        # Obtaining the member '__idiv__' of a type (line 4069)
        idiv___145658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4069, 8), _data_145657, '__idiv__')
        # Calling __idiv__(args, kwargs) (line 4069)
        idiv___call_result_145673 = invoke(stypy.reporting.localization.Localization(__file__, 4069, 8), idiv___145658, *[where_call_result_145671], **kwargs_145672)
        
        # Getting the type of 'self' (line 4071)
        self_145674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4071, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 4071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4071, 8), 'stypy_return_type', self_145674)
        
        # ################# End of '__idiv__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__idiv__' in the type store
        # Getting the type of 'stypy_return_type' (line 4055)
        stypy_return_type_145675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4055, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145675)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__idiv__'
        return stypy_return_type_145675


    @norecursion
    def __ifloordiv__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ifloordiv__'
        module_type_store = module_type_store.open_function_context('__ifloordiv__', 4073, 4, False)
        # Assigning a type to the variable 'self' (line 4074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4074, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__ifloordiv__')
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__ifloordiv__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__ifloordiv__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ifloordiv__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ifloordiv__(...)' code ##################

        str_145676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4077, (-1)), 'str', '\n        Floor divide self by other in-place.\n\n        ')
        
        # Assigning a Call to a Name (line 4078):
        
        # Assigning a Call to a Name (line 4078):
        
        # Call to getdata(...): (line 4078)
        # Processing the call arguments (line 4078)
        # Getting the type of 'other' (line 4078)
        other_145678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 29), 'other', False)
        # Processing the call keyword arguments (line 4078)
        kwargs_145679 = {}
        # Getting the type of 'getdata' (line 4078)
        getdata_145677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 21), 'getdata', False)
        # Calling getdata(args, kwargs) (line 4078)
        getdata_call_result_145680 = invoke(stypy.reporting.localization.Localization(__file__, 4078, 21), getdata_145677, *[other_145678], **kwargs_145679)
        
        # Assigning a type to the variable 'other_data' (line 4078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4078, 8), 'other_data', getdata_call_result_145680)
        
        # Assigning a Call to a Name (line 4079):
        
        # Assigning a Call to a Name (line 4079):
        
        # Call to __call__(...): (line 4079)
        # Processing the call arguments (line 4079)
        # Getting the type of 'self' (line 4079)
        self_145685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4079, 48), 'self', False)
        # Obtaining the member '_data' of a type (line 4079)
        _data_145686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4079, 48), self_145685, '_data')
        # Getting the type of 'other_data' (line 4079)
        other_data_145687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4079, 60), 'other_data', False)
        # Processing the call keyword arguments (line 4079)
        kwargs_145688 = {}
        
        # Call to _DomainSafeDivide(...): (line 4079)
        # Processing the call keyword arguments (line 4079)
        kwargs_145682 = {}
        # Getting the type of '_DomainSafeDivide' (line 4079)
        _DomainSafeDivide_145681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4079, 19), '_DomainSafeDivide', False)
        # Calling _DomainSafeDivide(args, kwargs) (line 4079)
        _DomainSafeDivide_call_result_145683 = invoke(stypy.reporting.localization.Localization(__file__, 4079, 19), _DomainSafeDivide_145681, *[], **kwargs_145682)
        
        # Obtaining the member '__call__' of a type (line 4079)
        call___145684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4079, 19), _DomainSafeDivide_call_result_145683, '__call__')
        # Calling __call__(args, kwargs) (line 4079)
        call___call_result_145689 = invoke(stypy.reporting.localization.Localization(__file__, 4079, 19), call___145684, *[_data_145686, other_data_145687], **kwargs_145688)
        
        # Assigning a type to the variable 'dom_mask' (line 4079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4079, 8), 'dom_mask', call___call_result_145689)
        
        # Assigning a Call to a Name (line 4080):
        
        # Assigning a Call to a Name (line 4080):
        
        # Call to getmask(...): (line 4080)
        # Processing the call arguments (line 4080)
        # Getting the type of 'other' (line 4080)
        other_145691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 29), 'other', False)
        # Processing the call keyword arguments (line 4080)
        kwargs_145692 = {}
        # Getting the type of 'getmask' (line 4080)
        getmask_145690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 21), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4080)
        getmask_call_result_145693 = invoke(stypy.reporting.localization.Localization(__file__, 4080, 21), getmask_145690, *[other_145691], **kwargs_145692)
        
        # Assigning a type to the variable 'other_mask' (line 4080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4080, 8), 'other_mask', getmask_call_result_145693)
        
        # Assigning a Call to a Name (line 4081):
        
        # Assigning a Call to a Name (line 4081):
        
        # Call to mask_or(...): (line 4081)
        # Processing the call arguments (line 4081)
        # Getting the type of 'other_mask' (line 4081)
        other_mask_145695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4081, 27), 'other_mask', False)
        # Getting the type of 'dom_mask' (line 4081)
        dom_mask_145696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4081, 39), 'dom_mask', False)
        # Processing the call keyword arguments (line 4081)
        kwargs_145697 = {}
        # Getting the type of 'mask_or' (line 4081)
        mask_or_145694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4081, 19), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 4081)
        mask_or_call_result_145698 = invoke(stypy.reporting.localization.Localization(__file__, 4081, 19), mask_or_145694, *[other_mask_145695, dom_mask_145696], **kwargs_145697)
        
        # Assigning a type to the variable 'new_mask' (line 4081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4081, 8), 'new_mask', mask_or_call_result_145698)
        
        
        # Call to any(...): (line 4083)
        # Processing the call keyword arguments (line 4083)
        kwargs_145701 = {}
        # Getting the type of 'dom_mask' (line 4083)
        dom_mask_145699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4083, 11), 'dom_mask', False)
        # Obtaining the member 'any' of a type (line 4083)
        any_145700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4083, 11), dom_mask_145699, 'any')
        # Calling any(args, kwargs) (line 4083)
        any_call_result_145702 = invoke(stypy.reporting.localization.Localization(__file__, 4083, 11), any_145700, *[], **kwargs_145701)
        
        # Testing the type of an if condition (line 4083)
        if_condition_145703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4083, 8), any_call_result_145702)
        # Assigning a type to the variable 'if_condition_145703' (line 4083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4083, 8), 'if_condition_145703', if_condition_145703)
        # SSA begins for if statement (line 4083)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 4084):
        
        # Assigning a Subscript to a Name (line 4084):
        
        # Obtaining the type of the subscript
        int_145704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4084, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 4084)
        np_145705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4084, 36), 'np')
        # Obtaining the member 'floor_divide' of a type (line 4084)
        floor_divide_145706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4084, 36), np_145705, 'floor_divide')
        # Getting the type of 'ufunc_fills' (line 4084)
        ufunc_fills_145707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4084, 24), 'ufunc_fills')
        # Obtaining the member '__getitem__' of a type (line 4084)
        getitem___145708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4084, 24), ufunc_fills_145707, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4084)
        subscript_call_result_145709 = invoke(stypy.reporting.localization.Localization(__file__, 4084, 24), getitem___145708, floor_divide_145706)
        
        # Obtaining the member '__getitem__' of a type (line 4084)
        getitem___145710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4084, 12), subscript_call_result_145709, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4084)
        subscript_call_result_145711 = invoke(stypy.reporting.localization.Localization(__file__, 4084, 12), getitem___145710, int_145704)
        
        # Assigning a type to the variable 'tuple_var_assignment_139190' (line 4084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4084, 12), 'tuple_var_assignment_139190', subscript_call_result_145711)
        
        # Assigning a Subscript to a Name (line 4084):
        
        # Obtaining the type of the subscript
        int_145712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4084, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 4084)
        np_145713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4084, 36), 'np')
        # Obtaining the member 'floor_divide' of a type (line 4084)
        floor_divide_145714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4084, 36), np_145713, 'floor_divide')
        # Getting the type of 'ufunc_fills' (line 4084)
        ufunc_fills_145715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4084, 24), 'ufunc_fills')
        # Obtaining the member '__getitem__' of a type (line 4084)
        getitem___145716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4084, 24), ufunc_fills_145715, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4084)
        subscript_call_result_145717 = invoke(stypy.reporting.localization.Localization(__file__, 4084, 24), getitem___145716, floor_divide_145714)
        
        # Obtaining the member '__getitem__' of a type (line 4084)
        getitem___145718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4084, 12), subscript_call_result_145717, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4084)
        subscript_call_result_145719 = invoke(stypy.reporting.localization.Localization(__file__, 4084, 12), getitem___145718, int_145712)
        
        # Assigning a type to the variable 'tuple_var_assignment_139191' (line 4084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4084, 12), 'tuple_var_assignment_139191', subscript_call_result_145719)
        
        # Assigning a Name to a Name (line 4084):
        # Getting the type of 'tuple_var_assignment_139190' (line 4084)
        tuple_var_assignment_139190_145720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4084, 12), 'tuple_var_assignment_139190')
        # Assigning a type to the variable '_' (line 4084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4084, 13), '_', tuple_var_assignment_139190_145720)
        
        # Assigning a Name to a Name (line 4084):
        # Getting the type of 'tuple_var_assignment_139191' (line 4084)
        tuple_var_assignment_139191_145721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4084, 12), 'tuple_var_assignment_139191')
        # Assigning a type to the variable 'fval' (line 4084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4084, 16), 'fval', tuple_var_assignment_139191_145721)
        
        # Assigning a Call to a Name (line 4085):
        
        # Assigning a Call to a Name (line 4085):
        
        # Call to where(...): (line 4085)
        # Processing the call arguments (line 4085)
        # Getting the type of 'dom_mask' (line 4085)
        dom_mask_145724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 34), 'dom_mask', False)
        # Getting the type of 'fval' (line 4085)
        fval_145725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 44), 'fval', False)
        # Getting the type of 'other_data' (line 4085)
        other_data_145726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 50), 'other_data', False)
        # Processing the call keyword arguments (line 4085)
        kwargs_145727 = {}
        # Getting the type of 'np' (line 4085)
        np_145722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 25), 'np', False)
        # Obtaining the member 'where' of a type (line 4085)
        where_145723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4085, 25), np_145722, 'where')
        # Calling where(args, kwargs) (line 4085)
        where_call_result_145728 = invoke(stypy.reporting.localization.Localization(__file__, 4085, 25), where_145723, *[dom_mask_145724, fval_145725, other_data_145726], **kwargs_145727)
        
        # Assigning a type to the variable 'other_data' (line 4085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4085, 12), 'other_data', where_call_result_145728)
        # SSA join for if statement (line 4083)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 4086)
        self_145729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4086, 8), 'self')
        # Obtaining the member '_mask' of a type (line 4086)
        _mask_145730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4086, 8), self_145729, '_mask')
        # Getting the type of 'new_mask' (line 4086)
        new_mask_145731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4086, 22), 'new_mask')
        # Applying the binary operator '|=' (line 4086)
        result_ior_145732 = python_operator(stypy.reporting.localization.Localization(__file__, 4086, 8), '|=', _mask_145730, new_mask_145731)
        # Getting the type of 'self' (line 4086)
        self_145733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4086, 8), 'self')
        # Setting the type of the member '_mask' of a type (line 4086)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4086, 8), self_145733, '_mask', result_ior_145732)
        
        
        # Call to __ifloordiv__(...): (line 4087)
        # Processing the call arguments (line 4087)
        
        # Call to where(...): (line 4087)
        # Processing the call arguments (line 4087)
        # Getting the type of 'self' (line 4087)
        self_145739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4087, 42), 'self', False)
        # Obtaining the member '_mask' of a type (line 4087)
        _mask_145740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4087, 42), self_145739, '_mask')
        
        # Call to type(...): (line 4087)
        # Processing the call arguments (line 4087)
        int_145744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4087, 70), 'int')
        # Processing the call keyword arguments (line 4087)
        kwargs_145745 = {}
        # Getting the type of 'self' (line 4087)
        self_145741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4087, 54), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4087)
        dtype_145742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4087, 54), self_145741, 'dtype')
        # Obtaining the member 'type' of a type (line 4087)
        type_145743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4087, 54), dtype_145742, 'type')
        # Calling type(args, kwargs) (line 4087)
        type_call_result_145746 = invoke(stypy.reporting.localization.Localization(__file__, 4087, 54), type_145743, *[int_145744], **kwargs_145745)
        
        # Getting the type of 'other_data' (line 4088)
        other_data_145747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4088, 42), 'other_data', False)
        # Processing the call keyword arguments (line 4087)
        kwargs_145748 = {}
        # Getting the type of 'np' (line 4087)
        np_145737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4087, 33), 'np', False)
        # Obtaining the member 'where' of a type (line 4087)
        where_145738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4087, 33), np_145737, 'where')
        # Calling where(args, kwargs) (line 4087)
        where_call_result_145749 = invoke(stypy.reporting.localization.Localization(__file__, 4087, 33), where_145738, *[_mask_145740, type_call_result_145746, other_data_145747], **kwargs_145748)
        
        # Processing the call keyword arguments (line 4087)
        kwargs_145750 = {}
        # Getting the type of 'self' (line 4087)
        self_145734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4087, 8), 'self', False)
        # Obtaining the member '_data' of a type (line 4087)
        _data_145735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4087, 8), self_145734, '_data')
        # Obtaining the member '__ifloordiv__' of a type (line 4087)
        ifloordiv___145736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4087, 8), _data_145735, '__ifloordiv__')
        # Calling __ifloordiv__(args, kwargs) (line 4087)
        ifloordiv___call_result_145751 = invoke(stypy.reporting.localization.Localization(__file__, 4087, 8), ifloordiv___145736, *[where_call_result_145749], **kwargs_145750)
        
        # Getting the type of 'self' (line 4089)
        self_145752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4089, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 4089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4089, 8), 'stypy_return_type', self_145752)
        
        # ################# End of '__ifloordiv__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ifloordiv__' in the type store
        # Getting the type of 'stypy_return_type' (line 4073)
        stypy_return_type_145753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4073, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145753)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ifloordiv__'
        return stypy_return_type_145753


    @norecursion
    def __itruediv__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__itruediv__'
        module_type_store = module_type_store.open_function_context('__itruediv__', 4091, 4, False)
        # Assigning a type to the variable 'self' (line 4092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4092, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__itruediv__')
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__itruediv__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__itruediv__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__itruediv__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__itruediv__(...)' code ##################

        str_145754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4095, (-1)), 'str', '\n        True divide self by other in-place.\n\n        ')
        
        # Assigning a Call to a Name (line 4096):
        
        # Assigning a Call to a Name (line 4096):
        
        # Call to getdata(...): (line 4096)
        # Processing the call arguments (line 4096)
        # Getting the type of 'other' (line 4096)
        other_145756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4096, 29), 'other', False)
        # Processing the call keyword arguments (line 4096)
        kwargs_145757 = {}
        # Getting the type of 'getdata' (line 4096)
        getdata_145755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4096, 21), 'getdata', False)
        # Calling getdata(args, kwargs) (line 4096)
        getdata_call_result_145758 = invoke(stypy.reporting.localization.Localization(__file__, 4096, 21), getdata_145755, *[other_145756], **kwargs_145757)
        
        # Assigning a type to the variable 'other_data' (line 4096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4096, 8), 'other_data', getdata_call_result_145758)
        
        # Assigning a Call to a Name (line 4097):
        
        # Assigning a Call to a Name (line 4097):
        
        # Call to __call__(...): (line 4097)
        # Processing the call arguments (line 4097)
        # Getting the type of 'self' (line 4097)
        self_145763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4097, 48), 'self', False)
        # Obtaining the member '_data' of a type (line 4097)
        _data_145764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4097, 48), self_145763, '_data')
        # Getting the type of 'other_data' (line 4097)
        other_data_145765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4097, 60), 'other_data', False)
        # Processing the call keyword arguments (line 4097)
        kwargs_145766 = {}
        
        # Call to _DomainSafeDivide(...): (line 4097)
        # Processing the call keyword arguments (line 4097)
        kwargs_145760 = {}
        # Getting the type of '_DomainSafeDivide' (line 4097)
        _DomainSafeDivide_145759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4097, 19), '_DomainSafeDivide', False)
        # Calling _DomainSafeDivide(args, kwargs) (line 4097)
        _DomainSafeDivide_call_result_145761 = invoke(stypy.reporting.localization.Localization(__file__, 4097, 19), _DomainSafeDivide_145759, *[], **kwargs_145760)
        
        # Obtaining the member '__call__' of a type (line 4097)
        call___145762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4097, 19), _DomainSafeDivide_call_result_145761, '__call__')
        # Calling __call__(args, kwargs) (line 4097)
        call___call_result_145767 = invoke(stypy.reporting.localization.Localization(__file__, 4097, 19), call___145762, *[_data_145764, other_data_145765], **kwargs_145766)
        
        # Assigning a type to the variable 'dom_mask' (line 4097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4097, 8), 'dom_mask', call___call_result_145767)
        
        # Assigning a Call to a Name (line 4098):
        
        # Assigning a Call to a Name (line 4098):
        
        # Call to getmask(...): (line 4098)
        # Processing the call arguments (line 4098)
        # Getting the type of 'other' (line 4098)
        other_145769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4098, 29), 'other', False)
        # Processing the call keyword arguments (line 4098)
        kwargs_145770 = {}
        # Getting the type of 'getmask' (line 4098)
        getmask_145768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4098, 21), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4098)
        getmask_call_result_145771 = invoke(stypy.reporting.localization.Localization(__file__, 4098, 21), getmask_145768, *[other_145769], **kwargs_145770)
        
        # Assigning a type to the variable 'other_mask' (line 4098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4098, 8), 'other_mask', getmask_call_result_145771)
        
        # Assigning a Call to a Name (line 4099):
        
        # Assigning a Call to a Name (line 4099):
        
        # Call to mask_or(...): (line 4099)
        # Processing the call arguments (line 4099)
        # Getting the type of 'other_mask' (line 4099)
        other_mask_145773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4099, 27), 'other_mask', False)
        # Getting the type of 'dom_mask' (line 4099)
        dom_mask_145774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4099, 39), 'dom_mask', False)
        # Processing the call keyword arguments (line 4099)
        kwargs_145775 = {}
        # Getting the type of 'mask_or' (line 4099)
        mask_or_145772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4099, 19), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 4099)
        mask_or_call_result_145776 = invoke(stypy.reporting.localization.Localization(__file__, 4099, 19), mask_or_145772, *[other_mask_145773, dom_mask_145774], **kwargs_145775)
        
        # Assigning a type to the variable 'new_mask' (line 4099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4099, 8), 'new_mask', mask_or_call_result_145776)
        
        
        # Call to any(...): (line 4101)
        # Processing the call keyword arguments (line 4101)
        kwargs_145779 = {}
        # Getting the type of 'dom_mask' (line 4101)
        dom_mask_145777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4101, 11), 'dom_mask', False)
        # Obtaining the member 'any' of a type (line 4101)
        any_145778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4101, 11), dom_mask_145777, 'any')
        # Calling any(args, kwargs) (line 4101)
        any_call_result_145780 = invoke(stypy.reporting.localization.Localization(__file__, 4101, 11), any_145778, *[], **kwargs_145779)
        
        # Testing the type of an if condition (line 4101)
        if_condition_145781 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4101, 8), any_call_result_145780)
        # Assigning a type to the variable 'if_condition_145781' (line 4101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4101, 8), 'if_condition_145781', if_condition_145781)
        # SSA begins for if statement (line 4101)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Tuple (line 4102):
        
        # Assigning a Subscript to a Name (line 4102):
        
        # Obtaining the type of the subscript
        int_145782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4102, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 4102)
        np_145783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4102, 36), 'np')
        # Obtaining the member 'true_divide' of a type (line 4102)
        true_divide_145784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4102, 36), np_145783, 'true_divide')
        # Getting the type of 'ufunc_fills' (line 4102)
        ufunc_fills_145785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4102, 24), 'ufunc_fills')
        # Obtaining the member '__getitem__' of a type (line 4102)
        getitem___145786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4102, 24), ufunc_fills_145785, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4102)
        subscript_call_result_145787 = invoke(stypy.reporting.localization.Localization(__file__, 4102, 24), getitem___145786, true_divide_145784)
        
        # Obtaining the member '__getitem__' of a type (line 4102)
        getitem___145788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4102, 12), subscript_call_result_145787, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4102)
        subscript_call_result_145789 = invoke(stypy.reporting.localization.Localization(__file__, 4102, 12), getitem___145788, int_145782)
        
        # Assigning a type to the variable 'tuple_var_assignment_139192' (line 4102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4102, 12), 'tuple_var_assignment_139192', subscript_call_result_145789)
        
        # Assigning a Subscript to a Name (line 4102):
        
        # Obtaining the type of the subscript
        int_145790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4102, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'np' (line 4102)
        np_145791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4102, 36), 'np')
        # Obtaining the member 'true_divide' of a type (line 4102)
        true_divide_145792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4102, 36), np_145791, 'true_divide')
        # Getting the type of 'ufunc_fills' (line 4102)
        ufunc_fills_145793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4102, 24), 'ufunc_fills')
        # Obtaining the member '__getitem__' of a type (line 4102)
        getitem___145794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4102, 24), ufunc_fills_145793, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4102)
        subscript_call_result_145795 = invoke(stypy.reporting.localization.Localization(__file__, 4102, 24), getitem___145794, true_divide_145792)
        
        # Obtaining the member '__getitem__' of a type (line 4102)
        getitem___145796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4102, 12), subscript_call_result_145795, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4102)
        subscript_call_result_145797 = invoke(stypy.reporting.localization.Localization(__file__, 4102, 12), getitem___145796, int_145790)
        
        # Assigning a type to the variable 'tuple_var_assignment_139193' (line 4102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4102, 12), 'tuple_var_assignment_139193', subscript_call_result_145797)
        
        # Assigning a Name to a Name (line 4102):
        # Getting the type of 'tuple_var_assignment_139192' (line 4102)
        tuple_var_assignment_139192_145798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4102, 12), 'tuple_var_assignment_139192')
        # Assigning a type to the variable '_' (line 4102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4102, 13), '_', tuple_var_assignment_139192_145798)
        
        # Assigning a Name to a Name (line 4102):
        # Getting the type of 'tuple_var_assignment_139193' (line 4102)
        tuple_var_assignment_139193_145799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4102, 12), 'tuple_var_assignment_139193')
        # Assigning a type to the variable 'fval' (line 4102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4102, 16), 'fval', tuple_var_assignment_139193_145799)
        
        # Assigning a Call to a Name (line 4103):
        
        # Assigning a Call to a Name (line 4103):
        
        # Call to where(...): (line 4103)
        # Processing the call arguments (line 4103)
        # Getting the type of 'dom_mask' (line 4103)
        dom_mask_145802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4103, 34), 'dom_mask', False)
        # Getting the type of 'fval' (line 4103)
        fval_145803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4103, 44), 'fval', False)
        # Getting the type of 'other_data' (line 4103)
        other_data_145804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4103, 50), 'other_data', False)
        # Processing the call keyword arguments (line 4103)
        kwargs_145805 = {}
        # Getting the type of 'np' (line 4103)
        np_145800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4103, 25), 'np', False)
        # Obtaining the member 'where' of a type (line 4103)
        where_145801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4103, 25), np_145800, 'where')
        # Calling where(args, kwargs) (line 4103)
        where_call_result_145806 = invoke(stypy.reporting.localization.Localization(__file__, 4103, 25), where_145801, *[dom_mask_145802, fval_145803, other_data_145804], **kwargs_145805)
        
        # Assigning a type to the variable 'other_data' (line 4103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4103, 12), 'other_data', where_call_result_145806)
        # SSA join for if statement (line 4101)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 4104)
        self_145807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4104, 8), 'self')
        # Obtaining the member '_mask' of a type (line 4104)
        _mask_145808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4104, 8), self_145807, '_mask')
        # Getting the type of 'new_mask' (line 4104)
        new_mask_145809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4104, 22), 'new_mask')
        # Applying the binary operator '|=' (line 4104)
        result_ior_145810 = python_operator(stypy.reporting.localization.Localization(__file__, 4104, 8), '|=', _mask_145808, new_mask_145809)
        # Getting the type of 'self' (line 4104)
        self_145811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4104, 8), 'self')
        # Setting the type of the member '_mask' of a type (line 4104)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4104, 8), self_145811, '_mask', result_ior_145810)
        
        
        # Call to __itruediv__(...): (line 4105)
        # Processing the call arguments (line 4105)
        
        # Call to where(...): (line 4105)
        # Processing the call arguments (line 4105)
        # Getting the type of 'self' (line 4105)
        self_145817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4105, 41), 'self', False)
        # Obtaining the member '_mask' of a type (line 4105)
        _mask_145818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4105, 41), self_145817, '_mask')
        
        # Call to type(...): (line 4105)
        # Processing the call arguments (line 4105)
        int_145822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4105, 69), 'int')
        # Processing the call keyword arguments (line 4105)
        kwargs_145823 = {}
        # Getting the type of 'self' (line 4105)
        self_145819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4105, 53), 'self', False)
        # Obtaining the member 'dtype' of a type (line 4105)
        dtype_145820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4105, 53), self_145819, 'dtype')
        # Obtaining the member 'type' of a type (line 4105)
        type_145821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4105, 53), dtype_145820, 'type')
        # Calling type(args, kwargs) (line 4105)
        type_call_result_145824 = invoke(stypy.reporting.localization.Localization(__file__, 4105, 53), type_145821, *[int_145822], **kwargs_145823)
        
        # Getting the type of 'other_data' (line 4106)
        other_data_145825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4106, 41), 'other_data', False)
        # Processing the call keyword arguments (line 4105)
        kwargs_145826 = {}
        # Getting the type of 'np' (line 4105)
        np_145815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4105, 32), 'np', False)
        # Obtaining the member 'where' of a type (line 4105)
        where_145816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4105, 32), np_145815, 'where')
        # Calling where(args, kwargs) (line 4105)
        where_call_result_145827 = invoke(stypy.reporting.localization.Localization(__file__, 4105, 32), where_145816, *[_mask_145818, type_call_result_145824, other_data_145825], **kwargs_145826)
        
        # Processing the call keyword arguments (line 4105)
        kwargs_145828 = {}
        # Getting the type of 'self' (line 4105)
        self_145812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4105, 8), 'self', False)
        # Obtaining the member '_data' of a type (line 4105)
        _data_145813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4105, 8), self_145812, '_data')
        # Obtaining the member '__itruediv__' of a type (line 4105)
        itruediv___145814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4105, 8), _data_145813, '__itruediv__')
        # Calling __itruediv__(args, kwargs) (line 4105)
        itruediv___call_result_145829 = invoke(stypy.reporting.localization.Localization(__file__, 4105, 8), itruediv___145814, *[where_call_result_145827], **kwargs_145828)
        
        # Getting the type of 'self' (line 4107)
        self_145830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4107, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 4107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4107, 8), 'stypy_return_type', self_145830)
        
        # ################# End of '__itruediv__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__itruediv__' in the type store
        # Getting the type of 'stypy_return_type' (line 4091)
        stypy_return_type_145831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4091, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145831)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__itruediv__'
        return stypy_return_type_145831


    @norecursion
    def __ipow__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ipow__'
        module_type_store = module_type_store.open_function_context('__ipow__', 4109, 4, False)
        # Assigning a type to the variable 'self' (line 4110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4110, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__ipow__')
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__ipow__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__ipow__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ipow__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ipow__(...)' code ##################

        str_145832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4113, (-1)), 'str', '\n        Raise self to the power other, in place.\n\n        ')
        
        # Assigning a Call to a Name (line 4114):
        
        # Assigning a Call to a Name (line 4114):
        
        # Call to getdata(...): (line 4114)
        # Processing the call arguments (line 4114)
        # Getting the type of 'other' (line 4114)
        other_145834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4114, 29), 'other', False)
        # Processing the call keyword arguments (line 4114)
        kwargs_145835 = {}
        # Getting the type of 'getdata' (line 4114)
        getdata_145833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4114, 21), 'getdata', False)
        # Calling getdata(args, kwargs) (line 4114)
        getdata_call_result_145836 = invoke(stypy.reporting.localization.Localization(__file__, 4114, 21), getdata_145833, *[other_145834], **kwargs_145835)
        
        # Assigning a type to the variable 'other_data' (line 4114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4114, 8), 'other_data', getdata_call_result_145836)
        
        # Assigning a Call to a Name (line 4115):
        
        # Assigning a Call to a Name (line 4115):
        
        # Call to getmask(...): (line 4115)
        # Processing the call arguments (line 4115)
        # Getting the type of 'other' (line 4115)
        other_145838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4115, 29), 'other', False)
        # Processing the call keyword arguments (line 4115)
        kwargs_145839 = {}
        # Getting the type of 'getmask' (line 4115)
        getmask_145837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4115, 21), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4115)
        getmask_call_result_145840 = invoke(stypy.reporting.localization.Localization(__file__, 4115, 21), getmask_145837, *[other_145838], **kwargs_145839)
        
        # Assigning a type to the variable 'other_mask' (line 4115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4115, 8), 'other_mask', getmask_call_result_145840)
        
        # Call to errstate(...): (line 4116)
        # Processing the call keyword arguments (line 4116)
        str_145843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4116, 32), 'str', 'ignore')
        keyword_145844 = str_145843
        str_145845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4116, 50), 'str', 'ignore')
        keyword_145846 = str_145845
        kwargs_145847 = {'divide': keyword_145844, 'invalid': keyword_145846}
        # Getting the type of 'np' (line 4116)
        np_145841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4116, 13), 'np', False)
        # Obtaining the member 'errstate' of a type (line 4116)
        errstate_145842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4116, 13), np_145841, 'errstate')
        # Calling errstate(args, kwargs) (line 4116)
        errstate_call_result_145848 = invoke(stypy.reporting.localization.Localization(__file__, 4116, 13), errstate_145842, *[], **kwargs_145847)
        
        with_145849 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 4116, 13), errstate_call_result_145848, 'with parameter', '__enter__', '__exit__')

        if with_145849:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 4116)
            enter___145850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4116, 13), errstate_call_result_145848, '__enter__')
            with_enter_145851 = invoke(stypy.reporting.localization.Localization(__file__, 4116, 13), enter___145850)
            
            # Call to __ipow__(...): (line 4117)
            # Processing the call arguments (line 4117)
            
            # Call to where(...): (line 4117)
            # Processing the call arguments (line 4117)
            # Getting the type of 'self' (line 4117)
            self_145857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 41), 'self', False)
            # Obtaining the member '_mask' of a type (line 4117)
            _mask_145858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4117, 41), self_145857, '_mask')
            
            # Call to type(...): (line 4117)
            # Processing the call arguments (line 4117)
            int_145862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4117, 69), 'int')
            # Processing the call keyword arguments (line 4117)
            kwargs_145863 = {}
            # Getting the type of 'self' (line 4117)
            self_145859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 53), 'self', False)
            # Obtaining the member 'dtype' of a type (line 4117)
            dtype_145860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4117, 53), self_145859, 'dtype')
            # Obtaining the member 'type' of a type (line 4117)
            type_145861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4117, 53), dtype_145860, 'type')
            # Calling type(args, kwargs) (line 4117)
            type_call_result_145864 = invoke(stypy.reporting.localization.Localization(__file__, 4117, 53), type_145861, *[int_145862], **kwargs_145863)
            
            # Getting the type of 'other_data' (line 4118)
            other_data_145865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4118, 41), 'other_data', False)
            # Processing the call keyword arguments (line 4117)
            kwargs_145866 = {}
            # Getting the type of 'np' (line 4117)
            np_145855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 32), 'np', False)
            # Obtaining the member 'where' of a type (line 4117)
            where_145856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4117, 32), np_145855, 'where')
            # Calling where(args, kwargs) (line 4117)
            where_call_result_145867 = invoke(stypy.reporting.localization.Localization(__file__, 4117, 32), where_145856, *[_mask_145858, type_call_result_145864, other_data_145865], **kwargs_145866)
            
            # Processing the call keyword arguments (line 4117)
            kwargs_145868 = {}
            # Getting the type of 'self' (line 4117)
            self_145852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4117, 12), 'self', False)
            # Obtaining the member '_data' of a type (line 4117)
            _data_145853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4117, 12), self_145852, '_data')
            # Obtaining the member '__ipow__' of a type (line 4117)
            ipow___145854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4117, 12), _data_145853, '__ipow__')
            # Calling __ipow__(args, kwargs) (line 4117)
            ipow___call_result_145869 = invoke(stypy.reporting.localization.Localization(__file__, 4117, 12), ipow___145854, *[where_call_result_145867], **kwargs_145868)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 4116)
            exit___145870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4116, 13), errstate_call_result_145848, '__exit__')
            with_exit_145871 = invoke(stypy.reporting.localization.Localization(__file__, 4116, 13), exit___145870, None, None, None)

        
        # Assigning a Call to a Name (line 4119):
        
        # Assigning a Call to a Name (line 4119):
        
        # Call to logical_not(...): (line 4119)
        # Processing the call arguments (line 4119)
        
        # Call to isfinite(...): (line 4119)
        # Processing the call arguments (line 4119)
        # Getting the type of 'self' (line 4119)
        self_145876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4119, 45), 'self', False)
        # Obtaining the member '_data' of a type (line 4119)
        _data_145877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4119, 45), self_145876, '_data')
        # Processing the call keyword arguments (line 4119)
        kwargs_145878 = {}
        # Getting the type of 'np' (line 4119)
        np_145874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4119, 33), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 4119)
        isfinite_145875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4119, 33), np_145874, 'isfinite')
        # Calling isfinite(args, kwargs) (line 4119)
        isfinite_call_result_145879 = invoke(stypy.reporting.localization.Localization(__file__, 4119, 33), isfinite_145875, *[_data_145877], **kwargs_145878)
        
        # Processing the call keyword arguments (line 4119)
        kwargs_145880 = {}
        # Getting the type of 'np' (line 4119)
        np_145872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4119, 18), 'np', False)
        # Obtaining the member 'logical_not' of a type (line 4119)
        logical_not_145873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4119, 18), np_145872, 'logical_not')
        # Calling logical_not(args, kwargs) (line 4119)
        logical_not_call_result_145881 = invoke(stypy.reporting.localization.Localization(__file__, 4119, 18), logical_not_145873, *[isfinite_call_result_145879], **kwargs_145880)
        
        # Assigning a type to the variable 'invalid' (line 4119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4119, 8), 'invalid', logical_not_call_result_145881)
        
        
        # Call to any(...): (line 4120)
        # Processing the call keyword arguments (line 4120)
        kwargs_145884 = {}
        # Getting the type of 'invalid' (line 4120)
        invalid_145882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4120, 11), 'invalid', False)
        # Obtaining the member 'any' of a type (line 4120)
        any_145883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4120, 11), invalid_145882, 'any')
        # Calling any(args, kwargs) (line 4120)
        any_call_result_145885 = invoke(stypy.reporting.localization.Localization(__file__, 4120, 11), any_145883, *[], **kwargs_145884)
        
        # Testing the type of an if condition (line 4120)
        if_condition_145886 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4120, 8), any_call_result_145885)
        # Assigning a type to the variable 'if_condition_145886' (line 4120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4120, 8), 'if_condition_145886', if_condition_145886)
        # SSA begins for if statement (line 4120)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 4121)
        self_145887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4121, 15), 'self')
        # Obtaining the member '_mask' of a type (line 4121)
        _mask_145888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4121, 15), self_145887, '_mask')
        # Getting the type of 'nomask' (line 4121)
        nomask_145889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4121, 33), 'nomask')
        # Applying the binary operator 'isnot' (line 4121)
        result_is_not_145890 = python_operator(stypy.reporting.localization.Localization(__file__, 4121, 15), 'isnot', _mask_145888, nomask_145889)
        
        # Testing the type of an if condition (line 4121)
        if_condition_145891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4121, 12), result_is_not_145890)
        # Assigning a type to the variable 'if_condition_145891' (line 4121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4121, 12), 'if_condition_145891', if_condition_145891)
        # SSA begins for if statement (line 4121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 4122)
        self_145892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4122, 16), 'self')
        # Obtaining the member '_mask' of a type (line 4122)
        _mask_145893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4122, 16), self_145892, '_mask')
        # Getting the type of 'invalid' (line 4122)
        invalid_145894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4122, 30), 'invalid')
        # Applying the binary operator '|=' (line 4122)
        result_ior_145895 = python_operator(stypy.reporting.localization.Localization(__file__, 4122, 16), '|=', _mask_145893, invalid_145894)
        # Getting the type of 'self' (line 4122)
        self_145896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4122, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4122)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4122, 16), self_145896, '_mask', result_ior_145895)
        
        # SSA branch for the else part of an if statement (line 4121)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 4124):
        
        # Assigning a Name to a Attribute (line 4124):
        # Getting the type of 'invalid' (line 4124)
        invalid_145897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4124, 29), 'invalid')
        # Getting the type of 'self' (line 4124)
        self_145898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4124, 16), 'self')
        # Setting the type of the member '_mask' of a type (line 4124)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4124, 16), self_145898, '_mask', invalid_145897)
        # SSA join for if statement (line 4121)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to copyto(...): (line 4125)
        # Processing the call arguments (line 4125)
        # Getting the type of 'self' (line 4125)
        self_145901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4125, 22), 'self', False)
        # Obtaining the member '_data' of a type (line 4125)
        _data_145902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4125, 22), self_145901, '_data')
        # Getting the type of 'self' (line 4125)
        self_145903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4125, 34), 'self', False)
        # Obtaining the member 'fill_value' of a type (line 4125)
        fill_value_145904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4125, 34), self_145903, 'fill_value')
        # Processing the call keyword arguments (line 4125)
        # Getting the type of 'invalid' (line 4125)
        invalid_145905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4125, 57), 'invalid', False)
        keyword_145906 = invalid_145905
        kwargs_145907 = {'where': keyword_145906}
        # Getting the type of 'np' (line 4125)
        np_145899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4125, 12), 'np', False)
        # Obtaining the member 'copyto' of a type (line 4125)
        copyto_145900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4125, 12), np_145899, 'copyto')
        # Calling copyto(args, kwargs) (line 4125)
        copyto_call_result_145908 = invoke(stypy.reporting.localization.Localization(__file__, 4125, 12), copyto_145900, *[_data_145902, fill_value_145904], **kwargs_145907)
        
        # SSA join for if statement (line 4120)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 4126):
        
        # Assigning a Call to a Name (line 4126):
        
        # Call to mask_or(...): (line 4126)
        # Processing the call arguments (line 4126)
        # Getting the type of 'other_mask' (line 4126)
        other_mask_145910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4126, 27), 'other_mask', False)
        # Getting the type of 'invalid' (line 4126)
        invalid_145911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4126, 39), 'invalid', False)
        # Processing the call keyword arguments (line 4126)
        kwargs_145912 = {}
        # Getting the type of 'mask_or' (line 4126)
        mask_or_145909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4126, 19), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 4126)
        mask_or_call_result_145913 = invoke(stypy.reporting.localization.Localization(__file__, 4126, 19), mask_or_145909, *[other_mask_145910, invalid_145911], **kwargs_145912)
        
        # Assigning a type to the variable 'new_mask' (line 4126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4126, 8), 'new_mask', mask_or_call_result_145913)
        
        # Assigning a Call to a Attribute (line 4127):
        
        # Assigning a Call to a Attribute (line 4127):
        
        # Call to mask_or(...): (line 4127)
        # Processing the call arguments (line 4127)
        # Getting the type of 'self' (line 4127)
        self_145915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4127, 29), 'self', False)
        # Obtaining the member '_mask' of a type (line 4127)
        _mask_145916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4127, 29), self_145915, '_mask')
        # Getting the type of 'new_mask' (line 4127)
        new_mask_145917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4127, 41), 'new_mask', False)
        # Processing the call keyword arguments (line 4127)
        kwargs_145918 = {}
        # Getting the type of 'mask_or' (line 4127)
        mask_or_145914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4127, 21), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 4127)
        mask_or_call_result_145919 = invoke(stypy.reporting.localization.Localization(__file__, 4127, 21), mask_or_145914, *[_mask_145916, new_mask_145917], **kwargs_145918)
        
        # Getting the type of 'self' (line 4127)
        self_145920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4127, 8), 'self')
        # Setting the type of the member '_mask' of a type (line 4127)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4127, 8), self_145920, '_mask', mask_or_call_result_145919)
        # Getting the type of 'self' (line 4128)
        self_145921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4128, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 4128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4128, 8), 'stypy_return_type', self_145921)
        
        # ################# End of '__ipow__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ipow__' in the type store
        # Getting the type of 'stypy_return_type' (line 4109)
        stypy_return_type_145922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4109, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145922)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ipow__'
        return stypy_return_type_145922


    @norecursion
    def __float__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__float__'
        module_type_store = module_type_store.open_function_context('__float__', 4130, 4, False)
        # Assigning a type to the variable 'self' (line 4131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4131, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__float__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__float__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__float__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__float__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__float__')
        MaskedArray.__float__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.__float__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__float__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__float__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__float__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__float__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__float__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__float__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__float__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__float__(...)' code ##################

        str_145923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4134, (-1)), 'str', '\n        Convert to float.\n\n        ')
        
        
        # Getting the type of 'self' (line 4135)
        self_145924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4135, 11), 'self')
        # Obtaining the member 'size' of a type (line 4135)
        size_145925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4135, 11), self_145924, 'size')
        int_145926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4135, 23), 'int')
        # Applying the binary operator '>' (line 4135)
        result_gt_145927 = python_operator(stypy.reporting.localization.Localization(__file__, 4135, 11), '>', size_145925, int_145926)
        
        # Testing the type of an if condition (line 4135)
        if_condition_145928 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4135, 8), result_gt_145927)
        # Assigning a type to the variable 'if_condition_145928' (line 4135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4135, 8), 'if_condition_145928', if_condition_145928)
        # SSA begins for if statement (line 4135)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 4136)
        # Processing the call arguments (line 4136)
        str_145930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4136, 28), 'str', 'Only length-1 arrays can be converted to Python scalars')
        # Processing the call keyword arguments (line 4136)
        kwargs_145931 = {}
        # Getting the type of 'TypeError' (line 4136)
        TypeError_145929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4136, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 4136)
        TypeError_call_result_145932 = invoke(stypy.reporting.localization.Localization(__file__, 4136, 18), TypeError_145929, *[str_145930], **kwargs_145931)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4136, 12), TypeError_call_result_145932, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 4135)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 4138)
        self_145933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4138, 13), 'self')
        # Obtaining the member '_mask' of a type (line 4138)
        _mask_145934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4138, 13), self_145933, '_mask')
        # Testing the type of an if condition (line 4138)
        if_condition_145935 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4138, 13), _mask_145934)
        # Assigning a type to the variable 'if_condition_145935' (line 4138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4138, 13), 'if_condition_145935', if_condition_145935)
        # SSA begins for if statement (line 4138)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 4139)
        # Processing the call arguments (line 4139)
        str_145938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4139, 26), 'str', 'Warning: converting a masked element to nan.')
        # Processing the call keyword arguments (line 4139)
        kwargs_145939 = {}
        # Getting the type of 'warnings' (line 4139)
        warnings_145936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4139, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 4139)
        warn_145937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4139, 12), warnings_145936, 'warn')
        # Calling warn(args, kwargs) (line 4139)
        warn_call_result_145940 = invoke(stypy.reporting.localization.Localization(__file__, 4139, 12), warn_145937, *[str_145938], **kwargs_145939)
        
        # Getting the type of 'np' (line 4140)
        np_145941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4140, 19), 'np')
        # Obtaining the member 'nan' of a type (line 4140)
        nan_145942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4140, 19), np_145941, 'nan')
        # Assigning a type to the variable 'stypy_return_type' (line 4140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4140, 12), 'stypy_return_type', nan_145942)
        # SSA join for if statement (line 4138)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4135)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to float(...): (line 4141)
        # Processing the call arguments (line 4141)
        
        # Call to item(...): (line 4141)
        # Processing the call keyword arguments (line 4141)
        kwargs_145946 = {}
        # Getting the type of 'self' (line 4141)
        self_145944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4141, 21), 'self', False)
        # Obtaining the member 'item' of a type (line 4141)
        item_145945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4141, 21), self_145944, 'item')
        # Calling item(args, kwargs) (line 4141)
        item_call_result_145947 = invoke(stypy.reporting.localization.Localization(__file__, 4141, 21), item_145945, *[], **kwargs_145946)
        
        # Processing the call keyword arguments (line 4141)
        kwargs_145948 = {}
        # Getting the type of 'float' (line 4141)
        float_145943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4141, 15), 'float', False)
        # Calling float(args, kwargs) (line 4141)
        float_call_result_145949 = invoke(stypy.reporting.localization.Localization(__file__, 4141, 15), float_145943, *[item_call_result_145947], **kwargs_145948)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4141, 8), 'stypy_return_type', float_call_result_145949)
        
        # ################# End of '__float__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__float__' in the type store
        # Getting the type of 'stypy_return_type' (line 4130)
        stypy_return_type_145950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4130, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145950)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__float__'
        return stypy_return_type_145950


    @norecursion
    def __int__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__int__'
        module_type_store = module_type_store.open_function_context('__int__', 4143, 4, False)
        # Assigning a type to the variable 'self' (line 4144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4144, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__int__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__int__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__int__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__int__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__int__')
        MaskedArray.__int__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.__int__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__int__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__int__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__int__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__int__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__int__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__int__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__int__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__int__(...)' code ##################

        str_145951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4147, (-1)), 'str', '\n        Convert to int.\n\n        ')
        
        
        # Getting the type of 'self' (line 4148)
        self_145952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 11), 'self')
        # Obtaining the member 'size' of a type (line 4148)
        size_145953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4148, 11), self_145952, 'size')
        int_145954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4148, 23), 'int')
        # Applying the binary operator '>' (line 4148)
        result_gt_145955 = python_operator(stypy.reporting.localization.Localization(__file__, 4148, 11), '>', size_145953, int_145954)
        
        # Testing the type of an if condition (line 4148)
        if_condition_145956 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4148, 8), result_gt_145955)
        # Assigning a type to the variable 'if_condition_145956' (line 4148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4148, 8), 'if_condition_145956', if_condition_145956)
        # SSA begins for if statement (line 4148)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 4149)
        # Processing the call arguments (line 4149)
        str_145958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4149, 28), 'str', 'Only length-1 arrays can be converted to Python scalars')
        # Processing the call keyword arguments (line 4149)
        kwargs_145959 = {}
        # Getting the type of 'TypeError' (line 4149)
        TypeError_145957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4149, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 4149)
        TypeError_call_result_145960 = invoke(stypy.reporting.localization.Localization(__file__, 4149, 18), TypeError_145957, *[str_145958], **kwargs_145959)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4149, 12), TypeError_call_result_145960, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 4148)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 4151)
        self_145961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4151, 13), 'self')
        # Obtaining the member '_mask' of a type (line 4151)
        _mask_145962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4151, 13), self_145961, '_mask')
        # Testing the type of an if condition (line 4151)
        if_condition_145963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4151, 13), _mask_145962)
        # Assigning a type to the variable 'if_condition_145963' (line 4151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4151, 13), 'if_condition_145963', if_condition_145963)
        # SSA begins for if statement (line 4151)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to MaskError(...): (line 4152)
        # Processing the call arguments (line 4152)
        str_145965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4152, 28), 'str', 'Cannot convert masked element to a Python int.')
        # Processing the call keyword arguments (line 4152)
        kwargs_145966 = {}
        # Getting the type of 'MaskError' (line 4152)
        MaskError_145964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4152, 18), 'MaskError', False)
        # Calling MaskError(args, kwargs) (line 4152)
        MaskError_call_result_145967 = invoke(stypy.reporting.localization.Localization(__file__, 4152, 18), MaskError_145964, *[str_145965], **kwargs_145966)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4152, 12), MaskError_call_result_145967, 'raise parameter', BaseException)
        # SSA join for if statement (line 4151)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4148)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to int(...): (line 4153)
        # Processing the call arguments (line 4153)
        
        # Call to item(...): (line 4153)
        # Processing the call keyword arguments (line 4153)
        kwargs_145971 = {}
        # Getting the type of 'self' (line 4153)
        self_145969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4153, 19), 'self', False)
        # Obtaining the member 'item' of a type (line 4153)
        item_145970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4153, 19), self_145969, 'item')
        # Calling item(args, kwargs) (line 4153)
        item_call_result_145972 = invoke(stypy.reporting.localization.Localization(__file__, 4153, 19), item_145970, *[], **kwargs_145971)
        
        # Processing the call keyword arguments (line 4153)
        kwargs_145973 = {}
        # Getting the type of 'int' (line 4153)
        int_145968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4153, 15), 'int', False)
        # Calling int(args, kwargs) (line 4153)
        int_call_result_145974 = invoke(stypy.reporting.localization.Localization(__file__, 4153, 15), int_145968, *[item_call_result_145972], **kwargs_145973)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4153, 8), 'stypy_return_type', int_call_result_145974)
        
        # ################# End of '__int__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__int__' in the type store
        # Getting the type of 'stypy_return_type' (line 4143)
        stypy_return_type_145975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4143, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145975)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__int__'
        return stypy_return_type_145975


    @norecursion
    def get_imag(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_imag'
        module_type_store = module_type_store.open_function_context('get_imag', 4155, 4, False)
        # Assigning a type to the variable 'self' (line 4156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4156, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.get_imag.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.get_imag.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.get_imag.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.get_imag.__dict__.__setitem__('stypy_function_name', 'MaskedArray.get_imag')
        MaskedArray.get_imag.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.get_imag.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.get_imag.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.get_imag.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.get_imag.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.get_imag.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.get_imag.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.get_imag', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_imag', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_imag(...)' code ##################

        str_145976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4183, (-1)), 'str', '\n        Return the imaginary part of the masked array.\n\n        The returned array is a view on the imaginary part of the `MaskedArray`\n        whose `get_imag` method is called.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        result : MaskedArray\n            The imaginary part of the masked array.\n\n        See Also\n        --------\n        get_real, real, imag\n\n        Examples\n        --------\n        >>> x = np.ma.array([1+1.j, -2j, 3.45+1.6j], mask=[False, True, False])\n        >>> x.get_imag()\n        masked_array(data = [1.0 -- 1.6],\n                     mask = [False  True False],\n               fill_value = 1e+20)\n\n        ')
        
        # Assigning a Call to a Name (line 4184):
        
        # Assigning a Call to a Name (line 4184):
        
        # Call to view(...): (line 4184)
        # Processing the call arguments (line 4184)
        
        # Call to type(...): (line 4184)
        # Processing the call arguments (line 4184)
        # Getting the type of 'self' (line 4184)
        self_145982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4184, 43), 'self', False)
        # Processing the call keyword arguments (line 4184)
        kwargs_145983 = {}
        # Getting the type of 'type' (line 4184)
        type_145981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4184, 38), 'type', False)
        # Calling type(args, kwargs) (line 4184)
        type_call_result_145984 = invoke(stypy.reporting.localization.Localization(__file__, 4184, 38), type_145981, *[self_145982], **kwargs_145983)
        
        # Processing the call keyword arguments (line 4184)
        kwargs_145985 = {}
        # Getting the type of 'self' (line 4184)
        self_145977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4184, 17), 'self', False)
        # Obtaining the member '_data' of a type (line 4184)
        _data_145978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4184, 17), self_145977, '_data')
        # Obtaining the member 'imag' of a type (line 4184)
        imag_145979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4184, 17), _data_145978, 'imag')
        # Obtaining the member 'view' of a type (line 4184)
        view_145980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4184, 17), imag_145979, 'view')
        # Calling view(args, kwargs) (line 4184)
        view_call_result_145986 = invoke(stypy.reporting.localization.Localization(__file__, 4184, 17), view_145980, *[type_call_result_145984], **kwargs_145985)
        
        # Assigning a type to the variable 'result' (line 4184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4184, 8), 'result', view_call_result_145986)
        
        # Call to __setmask__(...): (line 4185)
        # Processing the call arguments (line 4185)
        # Getting the type of 'self' (line 4185)
        self_145989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4185, 27), 'self', False)
        # Obtaining the member '_mask' of a type (line 4185)
        _mask_145990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4185, 27), self_145989, '_mask')
        # Processing the call keyword arguments (line 4185)
        kwargs_145991 = {}
        # Getting the type of 'result' (line 4185)
        result_145987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4185, 8), 'result', False)
        # Obtaining the member '__setmask__' of a type (line 4185)
        setmask___145988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4185, 8), result_145987, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 4185)
        setmask___call_result_145992 = invoke(stypy.reporting.localization.Localization(__file__, 4185, 8), setmask___145988, *[_mask_145990], **kwargs_145991)
        
        # Getting the type of 'result' (line 4186)
        result_145993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4186, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 4186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4186, 8), 'stypy_return_type', result_145993)
        
        # ################# End of 'get_imag(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_imag' in the type store
        # Getting the type of 'stypy_return_type' (line 4155)
        stypy_return_type_145994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4155, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_145994)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_imag'
        return stypy_return_type_145994

    
    # Assigning a Call to a Name (line 4188):

    @norecursion
    def get_real(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_real'
        module_type_store = module_type_store.open_function_context('get_real', 4190, 4, False)
        # Assigning a type to the variable 'self' (line 4191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.get_real.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.get_real.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.get_real.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.get_real.__dict__.__setitem__('stypy_function_name', 'MaskedArray.get_real')
        MaskedArray.get_real.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.get_real.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.get_real.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.get_real.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.get_real.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.get_real.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.get_real.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.get_real', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_real', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_real(...)' code ##################

        str_145995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4218, (-1)), 'str', '\n        Return the real part of the masked array.\n\n        The returned array is a view on the real part of the `MaskedArray`\n        whose `get_real` method is called.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        result : MaskedArray\n            The real part of the masked array.\n\n        See Also\n        --------\n        get_imag, real, imag\n\n        Examples\n        --------\n        >>> x = np.ma.array([1+1.j, -2j, 3.45+1.6j], mask=[False, True, False])\n        >>> x.get_real()\n        masked_array(data = [1.0 -- 3.45],\n                     mask = [False  True False],\n               fill_value = 1e+20)\n\n        ')
        
        # Assigning a Call to a Name (line 4219):
        
        # Assigning a Call to a Name (line 4219):
        
        # Call to view(...): (line 4219)
        # Processing the call arguments (line 4219)
        
        # Call to type(...): (line 4219)
        # Processing the call arguments (line 4219)
        # Getting the type of 'self' (line 4219)
        self_146001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4219, 43), 'self', False)
        # Processing the call keyword arguments (line 4219)
        kwargs_146002 = {}
        # Getting the type of 'type' (line 4219)
        type_146000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4219, 38), 'type', False)
        # Calling type(args, kwargs) (line 4219)
        type_call_result_146003 = invoke(stypy.reporting.localization.Localization(__file__, 4219, 38), type_146000, *[self_146001], **kwargs_146002)
        
        # Processing the call keyword arguments (line 4219)
        kwargs_146004 = {}
        # Getting the type of 'self' (line 4219)
        self_145996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4219, 17), 'self', False)
        # Obtaining the member '_data' of a type (line 4219)
        _data_145997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4219, 17), self_145996, '_data')
        # Obtaining the member 'real' of a type (line 4219)
        real_145998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4219, 17), _data_145997, 'real')
        # Obtaining the member 'view' of a type (line 4219)
        view_145999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4219, 17), real_145998, 'view')
        # Calling view(args, kwargs) (line 4219)
        view_call_result_146005 = invoke(stypy.reporting.localization.Localization(__file__, 4219, 17), view_145999, *[type_call_result_146003], **kwargs_146004)
        
        # Assigning a type to the variable 'result' (line 4219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4219, 8), 'result', view_call_result_146005)
        
        # Call to __setmask__(...): (line 4220)
        # Processing the call arguments (line 4220)
        # Getting the type of 'self' (line 4220)
        self_146008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4220, 27), 'self', False)
        # Obtaining the member '_mask' of a type (line 4220)
        _mask_146009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4220, 27), self_146008, '_mask')
        # Processing the call keyword arguments (line 4220)
        kwargs_146010 = {}
        # Getting the type of 'result' (line 4220)
        result_146006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4220, 8), 'result', False)
        # Obtaining the member '__setmask__' of a type (line 4220)
        setmask___146007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4220, 8), result_146006, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 4220)
        setmask___call_result_146011 = invoke(stypy.reporting.localization.Localization(__file__, 4220, 8), setmask___146007, *[_mask_146009], **kwargs_146010)
        
        # Getting the type of 'result' (line 4221)
        result_146012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4221, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 4221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4221, 8), 'stypy_return_type', result_146012)
        
        # ################# End of 'get_real(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_real' in the type store
        # Getting the type of 'stypy_return_type' (line 4190)
        stypy_return_type_146013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4190, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146013)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_real'
        return stypy_return_type_146013

    
    # Assigning a Call to a Name (line 4222):

    @norecursion
    def count(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4224)
        None_146014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4224, 25), 'None')
        defaults = [None_146014]
        # Create a new context for function 'count'
        module_type_store = module_type_store.open_function_context('count', 4224, 4, False)
        # Assigning a type to the variable 'self' (line 4225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4225, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.count.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.count.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.count.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.count.__dict__.__setitem__('stypy_function_name', 'MaskedArray.count')
        MaskedArray.count.__dict__.__setitem__('stypy_param_names_list', ['axis'])
        MaskedArray.count.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.count.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.count.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.count.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.count.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.count.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.count', ['axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'count', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'count(...)' code ##################

        str_146015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4269, (-1)), 'str', '\n        Count the non-masked elements of the array along the given axis.\n\n        Parameters\n        ----------\n        axis : int, optional\n            Axis along which to count the non-masked elements. If `axis` is\n            `None`, all non-masked elements are counted.\n\n        Returns\n        -------\n        result : int or ndarray\n            If `axis` is `None`, an integer count is returned. When `axis` is\n            not `None`, an array with shape determined by the lengths of the\n            remaining axes, is returned.\n\n        See Also\n        --------\n        count_masked : Count masked elements in array or along a given axis.\n\n        Examples\n        --------\n        >>> import numpy.ma as ma\n        >>> a = ma.arange(6).reshape((2, 3))\n        >>> a[1, :] = ma.masked\n        >>> a\n        masked_array(data =\n         [[0 1 2]\n         [-- -- --]],\n                     mask =\n         [[False False False]\n         [ True  True  True]],\n               fill_value = 999999)\n        >>> a.count()\n        3\n\n        When the `axis` keyword is specified an array of appropriate size is\n        returned.\n\n        >>> a.count(axis=0)\n        array([1, 1, 1])\n        >>> a.count(axis=1)\n        array([3, 0])\n\n        ')
        
        # Assigning a Attribute to a Name (line 4270):
        
        # Assigning a Attribute to a Name (line 4270):
        # Getting the type of 'self' (line 4270)
        self_146016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4270, 12), 'self')
        # Obtaining the member '_mask' of a type (line 4270)
        _mask_146017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4270, 12), self_146016, '_mask')
        # Assigning a type to the variable 'm' (line 4270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4270, 8), 'm', _mask_146017)
        
        # Assigning a Attribute to a Name (line 4271):
        
        # Assigning a Attribute to a Name (line 4271):
        # Getting the type of 'self' (line 4271)
        self_146018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4271, 12), 'self')
        # Obtaining the member 'shape' of a type (line 4271)
        shape_146019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4271, 12), self_146018, 'shape')
        # Assigning a type to the variable 's' (line 4271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4271, 8), 's', shape_146019)
        
        
        # Getting the type of 'm' (line 4272)
        m_146020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4272, 11), 'm')
        # Getting the type of 'nomask' (line 4272)
        nomask_146021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4272, 16), 'nomask')
        # Applying the binary operator 'is' (line 4272)
        result_is__146022 = python_operator(stypy.reporting.localization.Localization(__file__, 4272, 11), 'is', m_146020, nomask_146021)
        
        # Testing the type of an if condition (line 4272)
        if_condition_146023 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4272, 8), result_is__146022)
        # Assigning a type to the variable 'if_condition_146023' (line 4272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4272, 8), 'if_condition_146023', if_condition_146023)
        # SSA begins for if statement (line 4272)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 4273)
        # Getting the type of 'axis' (line 4273)
        axis_146024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4273, 15), 'axis')
        # Getting the type of 'None' (line 4273)
        None_146025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4273, 23), 'None')
        
        (may_be_146026, more_types_in_union_146027) = may_be_none(axis_146024, None_146025)

        if may_be_146026:

            if more_types_in_union_146027:
                # Runtime conditional SSA (line 4273)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 4274)
            self_146028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4274, 23), 'self')
            # Obtaining the member 'size' of a type (line 4274)
            size_146029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4274, 23), self_146028, 'size')
            # Assigning a type to the variable 'stypy_return_type' (line 4274)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4274, 16), 'stypy_return_type', size_146029)

            if more_types_in_union_146027:
                # Runtime conditional SSA for else branch (line 4273)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_146026) or more_types_in_union_146027):
            
            # Assigning a Subscript to a Name (line 4276):
            
            # Assigning a Subscript to a Name (line 4276):
            
            # Obtaining the type of the subscript
            # Getting the type of 'axis' (line 4276)
            axis_146030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4276, 22), 'axis')
            # Getting the type of 's' (line 4276)
            s_146031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4276, 20), 's')
            # Obtaining the member '__getitem__' of a type (line 4276)
            getitem___146032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4276, 20), s_146031, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 4276)
            subscript_call_result_146033 = invoke(stypy.reporting.localization.Localization(__file__, 4276, 20), getitem___146032, axis_146030)
            
            # Assigning a type to the variable 'n' (line 4276)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4276, 16), 'n', subscript_call_result_146033)
            
            # Assigning a Call to a Name (line 4277):
            
            # Assigning a Call to a Name (line 4277):
            
            # Call to list(...): (line 4277)
            # Processing the call arguments (line 4277)
            # Getting the type of 's' (line 4277)
            s_146035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4277, 25), 's', False)
            # Processing the call keyword arguments (line 4277)
            kwargs_146036 = {}
            # Getting the type of 'list' (line 4277)
            list_146034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4277, 20), 'list', False)
            # Calling list(args, kwargs) (line 4277)
            list_call_result_146037 = invoke(stypy.reporting.localization.Localization(__file__, 4277, 20), list_146034, *[s_146035], **kwargs_146036)
            
            # Assigning a type to the variable 't' (line 4277)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4277, 16), 't', list_call_result_146037)
            # Deleting a member
            # Getting the type of 't' (line 4278)
            t_146038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4278, 20), 't')
            
            # Obtaining the type of the subscript
            # Getting the type of 'axis' (line 4278)
            axis_146039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4278, 22), 'axis')
            # Getting the type of 't' (line 4278)
            t_146040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4278, 20), 't')
            # Obtaining the member '__getitem__' of a type (line 4278)
            getitem___146041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4278, 20), t_146040, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 4278)
            subscript_call_result_146042 = invoke(stypy.reporting.localization.Localization(__file__, 4278, 20), getitem___146041, axis_146039)
            
            del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4278, 16), t_146038, subscript_call_result_146042)
            
            # Call to full(...): (line 4279)
            # Processing the call arguments (line 4279)
            # Getting the type of 't' (line 4279)
            t_146045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4279, 31), 't', False)
            # Getting the type of 'n' (line 4279)
            n_146046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4279, 34), 'n', False)
            # Processing the call keyword arguments (line 4279)
            # Getting the type of 'np' (line 4279)
            np_146047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4279, 43), 'np', False)
            # Obtaining the member 'intp' of a type (line 4279)
            intp_146048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4279, 43), np_146047, 'intp')
            keyword_146049 = intp_146048
            kwargs_146050 = {'dtype': keyword_146049}
            # Getting the type of 'np' (line 4279)
            np_146043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4279, 23), 'np', False)
            # Obtaining the member 'full' of a type (line 4279)
            full_146044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4279, 23), np_146043, 'full')
            # Calling full(args, kwargs) (line 4279)
            full_call_result_146051 = invoke(stypy.reporting.localization.Localization(__file__, 4279, 23), full_146044, *[t_146045, n_146046], **kwargs_146050)
            
            # Assigning a type to the variable 'stypy_return_type' (line 4279)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4279, 16), 'stypy_return_type', full_call_result_146051)

            if (may_be_146026 and more_types_in_union_146027):
                # SSA join for if statement (line 4273)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 4272)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 4280):
        
        # Assigning a Call to a Name (line 4280):
        
        # Call to size(...): (line 4280)
        # Processing the call arguments (line 4280)
        # Getting the type of 'm' (line 4280)
        m_146054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4280, 21), 'm', False)
        # Getting the type of 'axis' (line 4280)
        axis_146055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4280, 24), 'axis', False)
        # Processing the call keyword arguments (line 4280)
        kwargs_146056 = {}
        # Getting the type of 'np' (line 4280)
        np_146052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4280, 13), 'np', False)
        # Obtaining the member 'size' of a type (line 4280)
        size_146053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4280, 13), np_146052, 'size')
        # Calling size(args, kwargs) (line 4280)
        size_call_result_146057 = invoke(stypy.reporting.localization.Localization(__file__, 4280, 13), size_146053, *[m_146054, axis_146055], **kwargs_146056)
        
        # Assigning a type to the variable 'n1' (line 4280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4280, 8), 'n1', size_call_result_146057)
        
        # Assigning a Call to a Name (line 4281):
        
        # Assigning a Call to a Name (line 4281):
        
        # Call to sum(...): (line 4281)
        # Processing the call arguments (line 4281)
        # Getting the type of 'm' (line 4281)
        m_146060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4281, 20), 'm', False)
        # Processing the call keyword arguments (line 4281)
        # Getting the type of 'axis' (line 4281)
        axis_146061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4281, 28), 'axis', False)
        keyword_146062 = axis_146061
        # Getting the type of 'np' (line 4281)
        np_146063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4281, 40), 'np', False)
        # Obtaining the member 'intp' of a type (line 4281)
        intp_146064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4281, 40), np_146063, 'intp')
        keyword_146065 = intp_146064
        kwargs_146066 = {'dtype': keyword_146065, 'axis': keyword_146062}
        # Getting the type of 'np' (line 4281)
        np_146058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4281, 13), 'np', False)
        # Obtaining the member 'sum' of a type (line 4281)
        sum_146059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4281, 13), np_146058, 'sum')
        # Calling sum(args, kwargs) (line 4281)
        sum_call_result_146067 = invoke(stypy.reporting.localization.Localization(__file__, 4281, 13), sum_146059, *[m_146060], **kwargs_146066)
        
        # Assigning a type to the variable 'n2' (line 4281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4281, 8), 'n2', sum_call_result_146067)
        
        # Type idiom detected: calculating its left and rigth part (line 4282)
        # Getting the type of 'axis' (line 4282)
        axis_146068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4282, 11), 'axis')
        # Getting the type of 'None' (line 4282)
        None_146069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4282, 19), 'None')
        
        (may_be_146070, more_types_in_union_146071) = may_be_none(axis_146068, None_146069)

        if may_be_146070:

            if more_types_in_union_146071:
                # Runtime conditional SSA (line 4282)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'n1' (line 4283)
            n1_146072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4283, 20), 'n1')
            # Getting the type of 'n2' (line 4283)
            n2_146073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4283, 25), 'n2')
            # Applying the binary operator '-' (line 4283)
            result_sub_146074 = python_operator(stypy.reporting.localization.Localization(__file__, 4283, 20), '-', n1_146072, n2_146073)
            
            # Assigning a type to the variable 'stypy_return_type' (line 4283)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4283, 12), 'stypy_return_type', result_sub_146074)

            if more_types_in_union_146071:
                # Runtime conditional SSA for else branch (line 4282)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_146070) or more_types_in_union_146071):
            
            # Call to narray(...): (line 4285)
            # Processing the call arguments (line 4285)
            # Getting the type of 'n1' (line 4285)
            n1_146076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4285, 26), 'n1', False)
            # Getting the type of 'n2' (line 4285)
            n2_146077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4285, 31), 'n2', False)
            # Applying the binary operator '-' (line 4285)
            result_sub_146078 = python_operator(stypy.reporting.localization.Localization(__file__, 4285, 26), '-', n1_146076, n2_146077)
            
            # Processing the call keyword arguments (line 4285)
            kwargs_146079 = {}
            # Getting the type of 'narray' (line 4285)
            narray_146075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4285, 19), 'narray', False)
            # Calling narray(args, kwargs) (line 4285)
            narray_call_result_146080 = invoke(stypy.reporting.localization.Localization(__file__, 4285, 19), narray_146075, *[result_sub_146078], **kwargs_146079)
            
            # Assigning a type to the variable 'stypy_return_type' (line 4285)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4285, 12), 'stypy_return_type', narray_call_result_146080)

            if (may_be_146070 and more_types_in_union_146071):
                # SSA join for if statement (line 4282)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'count(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'count' in the type store
        # Getting the type of 'stypy_return_type' (line 4224)
        stypy_return_type_146081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4224, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'count'
        return stypy_return_type_146081

    
    # Assigning a Call to a Name (line 4287):

    @norecursion
    def ravel(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_146082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4289, 26), 'str', 'C')
        defaults = [str_146082]
        # Create a new context for function 'ravel'
        module_type_store = module_type_store.open_function_context('ravel', 4289, 4, False)
        # Assigning a type to the variable 'self' (line 4290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4290, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.ravel.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.ravel.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.ravel.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.ravel.__dict__.__setitem__('stypy_function_name', 'MaskedArray.ravel')
        MaskedArray.ravel.__dict__.__setitem__('stypy_param_names_list', ['order'])
        MaskedArray.ravel.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.ravel.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.ravel.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.ravel.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.ravel.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.ravel.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.ravel', ['order'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ravel', localization, ['order'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ravel(...)' code ##################

        str_146083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4325, (-1)), 'str', "\n        Returns a 1D version of self, as a view.\n\n        Parameters\n        ----------\n        order : {'C', 'F', 'A', 'K'}, optional\n            The elements of `a` are read using this index order. 'C' means to\n            index the elements in C-like order, with the last axis index\n            changing fastest, back to the first axis index changing slowest.\n            'F' means to index the elements in Fortran-like index order, with\n            the first index changing fastest, and the last index changing\n            slowest. Note that the 'C' and 'F' options take no account of the\n            memory layout of the underlying array, and only refer to the order\n            of axis indexing.  'A' means to read the elements in Fortran-like\n            index order if `m` is Fortran *contiguous* in memory, C-like order\n            otherwise.  'K' means to read the elements in the order they occur\n            in memory, except for reversing the data when strides are negative.\n            By default, 'C' index order is used.\n\n        Returns\n        -------\n        MaskedArray\n            Output view is of shape ``(self.size,)`` (or\n            ``(np.ma.product(self.shape),)``).\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print(x)\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> print(x.ravel())\n        [1 -- 3 -- 5 -- 7 -- 9]\n\n        ")
        
        # Assigning a Call to a Name (line 4326):
        
        # Assigning a Call to a Name (line 4326):
        
        # Call to view(...): (line 4326)
        # Processing the call arguments (line 4326)
        
        # Call to type(...): (line 4326)
        # Processing the call arguments (line 4326)
        # Getting the type of 'self' (line 4326)
        self_146094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 61), 'self', False)
        # Processing the call keyword arguments (line 4326)
        kwargs_146095 = {}
        # Getting the type of 'type' (line 4326)
        type_146093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 56), 'type', False)
        # Calling type(args, kwargs) (line 4326)
        type_call_result_146096 = invoke(stypy.reporting.localization.Localization(__file__, 4326, 56), type_146093, *[self_146094], **kwargs_146095)
        
        # Processing the call keyword arguments (line 4326)
        kwargs_146097 = {}
        
        # Call to ravel(...): (line 4326)
        # Processing the call arguments (line 4326)
        # Getting the type of 'self' (line 4326)
        self_146086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 26), 'self', False)
        # Obtaining the member '_data' of a type (line 4326)
        _data_146087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4326, 26), self_146086, '_data')
        # Processing the call keyword arguments (line 4326)
        # Getting the type of 'order' (line 4326)
        order_146088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 44), 'order', False)
        keyword_146089 = order_146088
        kwargs_146090 = {'order': keyword_146089}
        # Getting the type of 'ndarray' (line 4326)
        ndarray_146084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4326, 12), 'ndarray', False)
        # Obtaining the member 'ravel' of a type (line 4326)
        ravel_146085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4326, 12), ndarray_146084, 'ravel')
        # Calling ravel(args, kwargs) (line 4326)
        ravel_call_result_146091 = invoke(stypy.reporting.localization.Localization(__file__, 4326, 12), ravel_146085, *[_data_146087], **kwargs_146090)
        
        # Obtaining the member 'view' of a type (line 4326)
        view_146092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4326, 12), ravel_call_result_146091, 'view')
        # Calling view(args, kwargs) (line 4326)
        view_call_result_146098 = invoke(stypy.reporting.localization.Localization(__file__, 4326, 12), view_146092, *[type_call_result_146096], **kwargs_146097)
        
        # Assigning a type to the variable 'r' (line 4326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4326, 8), 'r', view_call_result_146098)
        
        # Call to _update_from(...): (line 4327)
        # Processing the call arguments (line 4327)
        # Getting the type of 'self' (line 4327)
        self_146101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4327, 23), 'self', False)
        # Processing the call keyword arguments (line 4327)
        kwargs_146102 = {}
        # Getting the type of 'r' (line 4327)
        r_146099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4327, 8), 'r', False)
        # Obtaining the member '_update_from' of a type (line 4327)
        _update_from_146100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4327, 8), r_146099, '_update_from')
        # Calling _update_from(args, kwargs) (line 4327)
        _update_from_call_result_146103 = invoke(stypy.reporting.localization.Localization(__file__, 4327, 8), _update_from_146100, *[self_146101], **kwargs_146102)
        
        
        
        # Getting the type of 'self' (line 4328)
        self_146104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4328, 11), 'self')
        # Obtaining the member '_mask' of a type (line 4328)
        _mask_146105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4328, 11), self_146104, '_mask')
        # Getting the type of 'nomask' (line 4328)
        nomask_146106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4328, 29), 'nomask')
        # Applying the binary operator 'isnot' (line 4328)
        result_is_not_146107 = python_operator(stypy.reporting.localization.Localization(__file__, 4328, 11), 'isnot', _mask_146105, nomask_146106)
        
        # Testing the type of an if condition (line 4328)
        if_condition_146108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4328, 8), result_is_not_146107)
        # Assigning a type to the variable 'if_condition_146108' (line 4328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4328, 8), 'if_condition_146108', if_condition_146108)
        # SSA begins for if statement (line 4328)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 4329):
        
        # Assigning a Call to a Attribute (line 4329):
        
        # Call to reshape(...): (line 4329)
        # Processing the call arguments (line 4329)
        # Getting the type of 'r' (line 4329)
        r_146118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4329, 69), 'r', False)
        # Obtaining the member 'shape' of a type (line 4329)
        shape_146119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4329, 69), r_146118, 'shape')
        # Processing the call keyword arguments (line 4329)
        kwargs_146120 = {}
        
        # Call to ravel(...): (line 4329)
        # Processing the call arguments (line 4329)
        # Getting the type of 'self' (line 4329)
        self_146111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4329, 36), 'self', False)
        # Obtaining the member '_mask' of a type (line 4329)
        _mask_146112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4329, 36), self_146111, '_mask')
        # Processing the call keyword arguments (line 4329)
        # Getting the type of 'order' (line 4329)
        order_146113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4329, 54), 'order', False)
        keyword_146114 = order_146113
        kwargs_146115 = {'order': keyword_146114}
        # Getting the type of 'ndarray' (line 4329)
        ndarray_146109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4329, 22), 'ndarray', False)
        # Obtaining the member 'ravel' of a type (line 4329)
        ravel_146110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4329, 22), ndarray_146109, 'ravel')
        # Calling ravel(args, kwargs) (line 4329)
        ravel_call_result_146116 = invoke(stypy.reporting.localization.Localization(__file__, 4329, 22), ravel_146110, *[_mask_146112], **kwargs_146115)
        
        # Obtaining the member 'reshape' of a type (line 4329)
        reshape_146117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4329, 22), ravel_call_result_146116, 'reshape')
        # Calling reshape(args, kwargs) (line 4329)
        reshape_call_result_146121 = invoke(stypy.reporting.localization.Localization(__file__, 4329, 22), reshape_146117, *[shape_146119], **kwargs_146120)
        
        # Getting the type of 'r' (line 4329)
        r_146122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4329, 12), 'r')
        # Setting the type of the member '_mask' of a type (line 4329)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4329, 12), r_146122, '_mask', reshape_call_result_146121)
        # SSA branch for the else part of an if statement (line 4328)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 4331):
        
        # Assigning a Name to a Attribute (line 4331):
        # Getting the type of 'nomask' (line 4331)
        nomask_146123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4331, 22), 'nomask')
        # Getting the type of 'r' (line 4331)
        r_146124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4331, 12), 'r')
        # Setting the type of the member '_mask' of a type (line 4331)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4331, 12), r_146124, '_mask', nomask_146123)
        # SSA join for if statement (line 4328)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'r' (line 4332)
        r_146125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4332, 15), 'r')
        # Assigning a type to the variable 'stypy_return_type' (line 4332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4332, 8), 'stypy_return_type', r_146125)
        
        # ################# End of 'ravel(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ravel' in the type store
        # Getting the type of 'stypy_return_type' (line 4289)
        stypy_return_type_146126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146126)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ravel'
        return stypy_return_type_146126

    
    # Assigning a Call to a Name (line 4334):

    @norecursion
    def reshape(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'reshape'
        module_type_store = module_type_store.open_function_context('reshape', 4337, 4, False)
        # Assigning a type to the variable 'self' (line 4338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4338, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.reshape.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.reshape.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.reshape.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.reshape.__dict__.__setitem__('stypy_function_name', 'MaskedArray.reshape')
        MaskedArray.reshape.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.reshape.__dict__.__setitem__('stypy_varargs_param_name', 's')
        MaskedArray.reshape.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        MaskedArray.reshape.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.reshape.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.reshape.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.reshape.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.reshape', [], 's', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reshape', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reshape(...)' code ##################

        str_146127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4384, (-1)), 'str', "\n        Give a new shape to the array without changing its data.\n\n        Returns a masked array containing the same data, but with a new shape.\n        The result is a view on the original array; if this is not possible, a\n        ValueError is raised.\n\n        Parameters\n        ----------\n        shape : int or tuple of ints\n            The new shape should be compatible with the original shape. If an\n            integer is supplied, then the result will be a 1-D array of that\n            length.\n        order : {'C', 'F'}, optional\n            Determines whether the array data should be viewed as in C\n            (row-major) or FORTRAN (column-major) order.\n\n        Returns\n        -------\n        reshaped_array : array\n            A new view on the array.\n\n        See Also\n        --------\n        reshape : Equivalent function in the masked array module.\n        numpy.ndarray.reshape : Equivalent method on ndarray object.\n        numpy.reshape : Equivalent function in the NumPy module.\n\n        Notes\n        -----\n        The reshaping operation cannot guarantee that a copy will not be made,\n        to modify the shape in place, use ``a.shape = s``\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2],[3,4]], mask=[1,0,0,1])\n        >>> print(x)\n        [[-- 2]\n         [3 --]]\n        >>> x = x.reshape((4,1))\n        >>> print(x)\n        [[--]\n         [2]\n         [3]\n         [--]]\n\n        ")
        
        # Call to update(...): (line 4385)
        # Processing the call keyword arguments (line 4385)
        
        # Call to get(...): (line 4385)
        # Processing the call arguments (line 4385)
        str_146132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4385, 39), 'str', 'order')
        str_146133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4385, 48), 'str', 'C')
        # Processing the call keyword arguments (line 4385)
        kwargs_146134 = {}
        # Getting the type of 'kwargs' (line 4385)
        kwargs_146130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4385, 28), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 4385)
        get_146131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4385, 28), kwargs_146130, 'get')
        # Calling get(args, kwargs) (line 4385)
        get_call_result_146135 = invoke(stypy.reporting.localization.Localization(__file__, 4385, 28), get_146131, *[str_146132, str_146133], **kwargs_146134)
        
        keyword_146136 = get_call_result_146135
        kwargs_146137 = {'order': keyword_146136}
        # Getting the type of 'kwargs' (line 4385)
        kwargs_146128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4385, 8), 'kwargs', False)
        # Obtaining the member 'update' of a type (line 4385)
        update_146129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4385, 8), kwargs_146128, 'update')
        # Calling update(args, kwargs) (line 4385)
        update_call_result_146138 = invoke(stypy.reporting.localization.Localization(__file__, 4385, 8), update_146129, *[], **kwargs_146137)
        
        
        # Assigning a Call to a Name (line 4386):
        
        # Assigning a Call to a Name (line 4386):
        
        # Call to view(...): (line 4386)
        # Processing the call arguments (line 4386)
        
        # Call to type(...): (line 4386)
        # Processing the call arguments (line 4386)
        # Getting the type of 'self' (line 4386)
        self_146148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4386, 60), 'self', False)
        # Processing the call keyword arguments (line 4386)
        kwargs_146149 = {}
        # Getting the type of 'type' (line 4386)
        type_146147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4386, 55), 'type', False)
        # Calling type(args, kwargs) (line 4386)
        type_call_result_146150 = invoke(stypy.reporting.localization.Localization(__file__, 4386, 55), type_146147, *[self_146148], **kwargs_146149)
        
        # Processing the call keyword arguments (line 4386)
        kwargs_146151 = {}
        
        # Call to reshape(...): (line 4386)
        # Getting the type of 's' (line 4386)
        s_146142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4386, 37), 's', False)
        # Processing the call keyword arguments (line 4386)
        # Getting the type of 'kwargs' (line 4386)
        kwargs_146143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4386, 42), 'kwargs', False)
        kwargs_146144 = {'kwargs_146143': kwargs_146143}
        # Getting the type of 'self' (line 4386)
        self_146139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4386, 17), 'self', False)
        # Obtaining the member '_data' of a type (line 4386)
        _data_146140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4386, 17), self_146139, '_data')
        # Obtaining the member 'reshape' of a type (line 4386)
        reshape_146141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4386, 17), _data_146140, 'reshape')
        # Calling reshape(args, kwargs) (line 4386)
        reshape_call_result_146145 = invoke(stypy.reporting.localization.Localization(__file__, 4386, 17), reshape_146141, *[s_146142], **kwargs_146144)
        
        # Obtaining the member 'view' of a type (line 4386)
        view_146146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4386, 17), reshape_call_result_146145, 'view')
        # Calling view(args, kwargs) (line 4386)
        view_call_result_146152 = invoke(stypy.reporting.localization.Localization(__file__, 4386, 17), view_146146, *[type_call_result_146150], **kwargs_146151)
        
        # Assigning a type to the variable 'result' (line 4386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4386, 8), 'result', view_call_result_146152)
        
        # Call to _update_from(...): (line 4387)
        # Processing the call arguments (line 4387)
        # Getting the type of 'self' (line 4387)
        self_146155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4387, 28), 'self', False)
        # Processing the call keyword arguments (line 4387)
        kwargs_146156 = {}
        # Getting the type of 'result' (line 4387)
        result_146153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4387, 8), 'result', False)
        # Obtaining the member '_update_from' of a type (line 4387)
        _update_from_146154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4387, 8), result_146153, '_update_from')
        # Calling _update_from(args, kwargs) (line 4387)
        _update_from_call_result_146157 = invoke(stypy.reporting.localization.Localization(__file__, 4387, 8), _update_from_146154, *[self_146155], **kwargs_146156)
        
        
        # Assigning a Attribute to a Name (line 4388):
        
        # Assigning a Attribute to a Name (line 4388):
        # Getting the type of 'self' (line 4388)
        self_146158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4388, 15), 'self')
        # Obtaining the member '_mask' of a type (line 4388)
        _mask_146159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4388, 15), self_146158, '_mask')
        # Assigning a type to the variable 'mask' (line 4388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4388, 8), 'mask', _mask_146159)
        
        
        # Getting the type of 'mask' (line 4389)
        mask_146160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4389, 11), 'mask')
        # Getting the type of 'nomask' (line 4389)
        nomask_146161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4389, 23), 'nomask')
        # Applying the binary operator 'isnot' (line 4389)
        result_is_not_146162 = python_operator(stypy.reporting.localization.Localization(__file__, 4389, 11), 'isnot', mask_146160, nomask_146161)
        
        # Testing the type of an if condition (line 4389)
        if_condition_146163 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4389, 8), result_is_not_146162)
        # Assigning a type to the variable 'if_condition_146163' (line 4389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4389, 8), 'if_condition_146163', if_condition_146163)
        # SSA begins for if statement (line 4389)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 4390):
        
        # Assigning a Call to a Attribute (line 4390):
        
        # Call to reshape(...): (line 4390)
        # Getting the type of 's' (line 4390)
        s_146166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4390, 41), 's', False)
        # Processing the call keyword arguments (line 4390)
        # Getting the type of 'kwargs' (line 4390)
        kwargs_146167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4390, 46), 'kwargs', False)
        kwargs_146168 = {'kwargs_146167': kwargs_146167}
        # Getting the type of 'mask' (line 4390)
        mask_146164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4390, 27), 'mask', False)
        # Obtaining the member 'reshape' of a type (line 4390)
        reshape_146165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4390, 27), mask_146164, 'reshape')
        # Calling reshape(args, kwargs) (line 4390)
        reshape_call_result_146169 = invoke(stypy.reporting.localization.Localization(__file__, 4390, 27), reshape_146165, *[s_146166], **kwargs_146168)
        
        # Getting the type of 'result' (line 4390)
        result_146170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4390, 12), 'result')
        # Setting the type of the member '_mask' of a type (line 4390)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4390, 12), result_146170, '_mask', reshape_call_result_146169)
        # SSA join for if statement (line 4389)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 4391)
        result_146171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4391, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 4391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4391, 8), 'stypy_return_type', result_146171)
        
        # ################# End of 'reshape(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reshape' in the type store
        # Getting the type of 'stypy_return_type' (line 4337)
        stypy_return_type_146172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4337, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146172)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reshape'
        return stypy_return_type_146172


    @norecursion
    def resize(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 4393)
        True_146173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4393, 40), 'True')
        # Getting the type of 'False' (line 4393)
        False_146174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4393, 52), 'False')
        defaults = [True_146173, False_146174]
        # Create a new context for function 'resize'
        module_type_store = module_type_store.open_function_context('resize', 4393, 4, False)
        # Assigning a type to the variable 'self' (line 4394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4394, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.resize.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.resize.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.resize.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.resize.__dict__.__setitem__('stypy_function_name', 'MaskedArray.resize')
        MaskedArray.resize.__dict__.__setitem__('stypy_param_names_list', ['newshape', 'refcheck', 'order'])
        MaskedArray.resize.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.resize.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.resize.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.resize.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.resize.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.resize.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.resize', ['newshape', 'refcheck', 'order'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'resize', localization, ['newshape', 'refcheck', 'order'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'resize(...)' code ##################

        str_146175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4404, (-1)), 'str', '\n        .. warning::\n\n            This method does nothing, except raise a ValueError exception. A\n            masked array does not own its data and therefore cannot safely be\n            resized in place. Use the `numpy.ma.resize` function instead.\n\n        This method is difficult to implement safely and may be deprecated in\n        future releases of NumPy.\n\n        ')
        
        # Assigning a Str to a Name (line 4406):
        
        # Assigning a Str to a Name (line 4406):
        str_146176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4406, 17), 'str', 'A masked array does not own its data and therefore cannot be resized.\nUse the numpy.ma.resize function instead.')
        # Assigning a type to the variable 'errmsg' (line 4406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4406, 8), 'errmsg', str_146176)
        
        # Call to ValueError(...): (line 4409)
        # Processing the call arguments (line 4409)
        # Getting the type of 'errmsg' (line 4409)
        errmsg_146178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4409, 25), 'errmsg', False)
        # Processing the call keyword arguments (line 4409)
        kwargs_146179 = {}
        # Getting the type of 'ValueError' (line 4409)
        ValueError_146177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4409, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 4409)
        ValueError_call_result_146180 = invoke(stypy.reporting.localization.Localization(__file__, 4409, 14), ValueError_146177, *[errmsg_146178], **kwargs_146179)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4409, 8), ValueError_call_result_146180, 'raise parameter', BaseException)
        
        # ################# End of 'resize(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'resize' in the type store
        # Getting the type of 'stypy_return_type' (line 4393)
        stypy_return_type_146181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4393, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146181)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'resize'
        return stypy_return_type_146181


    @norecursion
    def put(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_146182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4411, 40), 'str', 'raise')
        defaults = [str_146182]
        # Create a new context for function 'put'
        module_type_store = module_type_store.open_function_context('put', 4411, 4, False)
        # Assigning a type to the variable 'self' (line 4412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4412, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.put.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.put.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.put.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.put.__dict__.__setitem__('stypy_function_name', 'MaskedArray.put')
        MaskedArray.put.__dict__.__setitem__('stypy_param_names_list', ['indices', 'values', 'mode'])
        MaskedArray.put.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.put.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.put.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.put.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.put.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.put.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.put', ['indices', 'values', 'mode'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'put', localization, ['indices', 'values', 'mode'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'put(...)' code ##################

        str_146183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4455, (-1)), 'str', "\n        Set storage-indexed locations to corresponding values.\n\n        Sets self._data.flat[n] = values[n] for each n in indices.\n        If `values` is shorter than `indices` then it will repeat.\n        If `values` has some masked values, the initial mask is updated\n        in consequence, else the corresponding values are unmasked.\n\n        Parameters\n        ----------\n        indices : 1-D array_like\n            Target indices, interpreted as integers.\n        values : array_like\n            Values to place in self._data copy at target indices.\n        mode : {'raise', 'wrap', 'clip'}, optional\n            Specifies how out-of-bounds indices will behave.\n            'raise' : raise an error.\n            'wrap' : wrap around.\n            'clip' : clip to the range.\n\n        Notes\n        -----\n        `values` can be a scalar or length 1 array.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print(x)\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> x.put([0,4,8],[10,20,30])\n        >>> print(x)\n        [[10 -- 3]\n         [-- 20 --]\n         [7 -- 30]]\n\n        >>> x.put(4,999)\n        >>> print(x)\n        [[10 -- 3]\n         [-- 999 --]\n         [7 -- 30]]\n\n        ")
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 4457)
        self_146184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4457, 11), 'self')
        # Obtaining the member '_hardmask' of a type (line 4457)
        _hardmask_146185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4457, 11), self_146184, '_hardmask')
        
        # Getting the type of 'self' (line 4457)
        self_146186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4457, 30), 'self')
        # Obtaining the member '_mask' of a type (line 4457)
        _mask_146187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4457, 30), self_146186, '_mask')
        # Getting the type of 'nomask' (line 4457)
        nomask_146188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4457, 48), 'nomask')
        # Applying the binary operator 'isnot' (line 4457)
        result_is_not_146189 = python_operator(stypy.reporting.localization.Localization(__file__, 4457, 30), 'isnot', _mask_146187, nomask_146188)
        
        # Applying the binary operator 'and' (line 4457)
        result_and_keyword_146190 = python_operator(stypy.reporting.localization.Localization(__file__, 4457, 11), 'and', _hardmask_146185, result_is_not_146189)
        
        # Testing the type of an if condition (line 4457)
        if_condition_146191 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4457, 8), result_and_keyword_146190)
        # Assigning a type to the variable 'if_condition_146191' (line 4457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4457, 8), 'if_condition_146191', if_condition_146191)
        # SSA begins for if statement (line 4457)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 4458):
        
        # Assigning a Subscript to a Name (line 4458):
        
        # Obtaining the type of the subscript
        # Getting the type of 'indices' (line 4458)
        indices_146192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4458, 30), 'indices')
        # Getting the type of 'self' (line 4458)
        self_146193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4458, 19), 'self')
        # Obtaining the member '_mask' of a type (line 4458)
        _mask_146194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4458, 19), self_146193, '_mask')
        # Obtaining the member '__getitem__' of a type (line 4458)
        getitem___146195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4458, 19), _mask_146194, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4458)
        subscript_call_result_146196 = invoke(stypy.reporting.localization.Localization(__file__, 4458, 19), getitem___146195, indices_146192)
        
        # Assigning a type to the variable 'mask' (line 4458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4458, 12), 'mask', subscript_call_result_146196)
        
        # Assigning a Call to a Name (line 4459):
        
        # Assigning a Call to a Name (line 4459):
        
        # Call to narray(...): (line 4459)
        # Processing the call arguments (line 4459)
        # Getting the type of 'indices' (line 4459)
        indices_146198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4459, 29), 'indices', False)
        # Processing the call keyword arguments (line 4459)
        # Getting the type of 'False' (line 4459)
        False_146199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4459, 43), 'False', False)
        keyword_146200 = False_146199
        kwargs_146201 = {'copy': keyword_146200}
        # Getting the type of 'narray' (line 4459)
        narray_146197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4459, 22), 'narray', False)
        # Calling narray(args, kwargs) (line 4459)
        narray_call_result_146202 = invoke(stypy.reporting.localization.Localization(__file__, 4459, 22), narray_146197, *[indices_146198], **kwargs_146201)
        
        # Assigning a type to the variable 'indices' (line 4459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4459, 12), 'indices', narray_call_result_146202)
        
        # Assigning a Call to a Name (line 4460):
        
        # Assigning a Call to a Name (line 4460):
        
        # Call to narray(...): (line 4460)
        # Processing the call arguments (line 4460)
        # Getting the type of 'values' (line 4460)
        values_146204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4460, 28), 'values', False)
        # Processing the call keyword arguments (line 4460)
        # Getting the type of 'False' (line 4460)
        False_146205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4460, 41), 'False', False)
        keyword_146206 = False_146205
        # Getting the type of 'True' (line 4460)
        True_146207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4460, 54), 'True', False)
        keyword_146208 = True_146207
        kwargs_146209 = {'subok': keyword_146208, 'copy': keyword_146206}
        # Getting the type of 'narray' (line 4460)
        narray_146203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4460, 21), 'narray', False)
        # Calling narray(args, kwargs) (line 4460)
        narray_call_result_146210 = invoke(stypy.reporting.localization.Localization(__file__, 4460, 21), narray_146203, *[values_146204], **kwargs_146209)
        
        # Assigning a type to the variable 'values' (line 4460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4460, 12), 'values', narray_call_result_146210)
        
        # Call to resize(...): (line 4461)
        # Processing the call arguments (line 4461)
        # Getting the type of 'indices' (line 4461)
        indices_146213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4461, 26), 'indices', False)
        # Obtaining the member 'shape' of a type (line 4461)
        shape_146214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4461, 26), indices_146213, 'shape')
        # Processing the call keyword arguments (line 4461)
        kwargs_146215 = {}
        # Getting the type of 'values' (line 4461)
        values_146211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4461, 12), 'values', False)
        # Obtaining the member 'resize' of a type (line 4461)
        resize_146212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4461, 12), values_146211, 'resize')
        # Calling resize(args, kwargs) (line 4461)
        resize_call_result_146216 = invoke(stypy.reporting.localization.Localization(__file__, 4461, 12), resize_146212, *[shape_146214], **kwargs_146215)
        
        
        # Assigning a Subscript to a Name (line 4462):
        
        # Assigning a Subscript to a Name (line 4462):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'mask' (line 4462)
        mask_146217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4462, 31), 'mask')
        # Applying the '~' unary operator (line 4462)
        result_inv_146218 = python_operator(stypy.reporting.localization.Localization(__file__, 4462, 30), '~', mask_146217)
        
        # Getting the type of 'indices' (line 4462)
        indices_146219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4462, 22), 'indices')
        # Obtaining the member '__getitem__' of a type (line 4462)
        getitem___146220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4462, 22), indices_146219, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4462)
        subscript_call_result_146221 = invoke(stypy.reporting.localization.Localization(__file__, 4462, 22), getitem___146220, result_inv_146218)
        
        # Assigning a type to the variable 'indices' (line 4462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4462, 12), 'indices', subscript_call_result_146221)
        
        # Assigning a Subscript to a Name (line 4463):
        
        # Assigning a Subscript to a Name (line 4463):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'mask' (line 4463)
        mask_146222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4463, 29), 'mask')
        # Applying the '~' unary operator (line 4463)
        result_inv_146223 = python_operator(stypy.reporting.localization.Localization(__file__, 4463, 28), '~', mask_146222)
        
        # Getting the type of 'values' (line 4463)
        values_146224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4463, 21), 'values')
        # Obtaining the member '__getitem__' of a type (line 4463)
        getitem___146225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4463, 21), values_146224, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4463)
        subscript_call_result_146226 = invoke(stypy.reporting.localization.Localization(__file__, 4463, 21), getitem___146225, result_inv_146223)
        
        # Assigning a type to the variable 'values' (line 4463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4463, 12), 'values', subscript_call_result_146226)
        # SSA join for if statement (line 4457)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to put(...): (line 4465)
        # Processing the call arguments (line 4465)
        # Getting the type of 'indices' (line 4465)
        indices_146230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4465, 23), 'indices', False)
        # Getting the type of 'values' (line 4465)
        values_146231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4465, 32), 'values', False)
        # Processing the call keyword arguments (line 4465)
        # Getting the type of 'mode' (line 4465)
        mode_146232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4465, 45), 'mode', False)
        keyword_146233 = mode_146232
        kwargs_146234 = {'mode': keyword_146233}
        # Getting the type of 'self' (line 4465)
        self_146227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4465, 8), 'self', False)
        # Obtaining the member '_data' of a type (line 4465)
        _data_146228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4465, 8), self_146227, '_data')
        # Obtaining the member 'put' of a type (line 4465)
        put_146229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4465, 8), _data_146228, 'put')
        # Calling put(args, kwargs) (line 4465)
        put_call_result_146235 = invoke(stypy.reporting.localization.Localization(__file__, 4465, 8), put_146229, *[indices_146230, values_146231], **kwargs_146234)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 4468)
        self_146236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4468, 11), 'self')
        # Obtaining the member '_mask' of a type (line 4468)
        _mask_146237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4468, 11), self_146236, '_mask')
        # Getting the type of 'nomask' (line 4468)
        nomask_146238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4468, 25), 'nomask')
        # Applying the binary operator 'is' (line 4468)
        result_is__146239 = python_operator(stypy.reporting.localization.Localization(__file__, 4468, 11), 'is', _mask_146237, nomask_146238)
        
        
        
        # Call to getmask(...): (line 4468)
        # Processing the call arguments (line 4468)
        # Getting the type of 'values' (line 4468)
        values_146241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4468, 44), 'values', False)
        # Processing the call keyword arguments (line 4468)
        kwargs_146242 = {}
        # Getting the type of 'getmask' (line 4468)
        getmask_146240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4468, 36), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4468)
        getmask_call_result_146243 = invoke(stypy.reporting.localization.Localization(__file__, 4468, 36), getmask_146240, *[values_146241], **kwargs_146242)
        
        # Getting the type of 'nomask' (line 4468)
        nomask_146244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4468, 55), 'nomask')
        # Applying the binary operator 'is' (line 4468)
        result_is__146245 = python_operator(stypy.reporting.localization.Localization(__file__, 4468, 36), 'is', getmask_call_result_146243, nomask_146244)
        
        # Applying the binary operator 'and' (line 4468)
        result_and_keyword_146246 = python_operator(stypy.reporting.localization.Localization(__file__, 4468, 11), 'and', result_is__146239, result_is__146245)
        
        # Testing the type of an if condition (line 4468)
        if_condition_146247 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4468, 8), result_and_keyword_146246)
        # Assigning a type to the variable 'if_condition_146247' (line 4468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4468, 8), 'if_condition_146247', if_condition_146247)
        # SSA begins for if statement (line 4468)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 4469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4469, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 4468)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 4471):
        
        # Assigning a Call to a Name (line 4471):
        
        # Call to copy(...): (line 4471)
        # Processing the call keyword arguments (line 4471)
        kwargs_146253 = {}
        
        # Call to getmaskarray(...): (line 4471)
        # Processing the call arguments (line 4471)
        # Getting the type of 'self' (line 4471)
        self_146249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4471, 25), 'self', False)
        # Processing the call keyword arguments (line 4471)
        kwargs_146250 = {}
        # Getting the type of 'getmaskarray' (line 4471)
        getmaskarray_146248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4471, 12), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 4471)
        getmaskarray_call_result_146251 = invoke(stypy.reporting.localization.Localization(__file__, 4471, 12), getmaskarray_146248, *[self_146249], **kwargs_146250)
        
        # Obtaining the member 'copy' of a type (line 4471)
        copy_146252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4471, 12), getmaskarray_call_result_146251, 'copy')
        # Calling copy(args, kwargs) (line 4471)
        copy_call_result_146254 = invoke(stypy.reporting.localization.Localization(__file__, 4471, 12), copy_146252, *[], **kwargs_146253)
        
        # Assigning a type to the variable 'm' (line 4471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4471, 8), 'm', copy_call_result_146254)
        
        
        
        # Call to getmask(...): (line 4473)
        # Processing the call arguments (line 4473)
        # Getting the type of 'values' (line 4473)
        values_146256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4473, 19), 'values', False)
        # Processing the call keyword arguments (line 4473)
        kwargs_146257 = {}
        # Getting the type of 'getmask' (line 4473)
        getmask_146255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4473, 11), 'getmask', False)
        # Calling getmask(args, kwargs) (line 4473)
        getmask_call_result_146258 = invoke(stypy.reporting.localization.Localization(__file__, 4473, 11), getmask_146255, *[values_146256], **kwargs_146257)
        
        # Getting the type of 'nomask' (line 4473)
        nomask_146259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4473, 30), 'nomask')
        # Applying the binary operator 'is' (line 4473)
        result_is__146260 = python_operator(stypy.reporting.localization.Localization(__file__, 4473, 11), 'is', getmask_call_result_146258, nomask_146259)
        
        # Testing the type of an if condition (line 4473)
        if_condition_146261 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4473, 8), result_is__146260)
        # Assigning a type to the variable 'if_condition_146261' (line 4473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4473, 8), 'if_condition_146261', if_condition_146261)
        # SSA begins for if statement (line 4473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to put(...): (line 4474)
        # Processing the call arguments (line 4474)
        # Getting the type of 'indices' (line 4474)
        indices_146264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4474, 18), 'indices', False)
        # Getting the type of 'False' (line 4474)
        False_146265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4474, 27), 'False', False)
        # Processing the call keyword arguments (line 4474)
        # Getting the type of 'mode' (line 4474)
        mode_146266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4474, 39), 'mode', False)
        keyword_146267 = mode_146266
        kwargs_146268 = {'mode': keyword_146267}
        # Getting the type of 'm' (line 4474)
        m_146262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4474, 12), 'm', False)
        # Obtaining the member 'put' of a type (line 4474)
        put_146263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4474, 12), m_146262, 'put')
        # Calling put(args, kwargs) (line 4474)
        put_call_result_146269 = invoke(stypy.reporting.localization.Localization(__file__, 4474, 12), put_146263, *[indices_146264, False_146265], **kwargs_146268)
        
        # SSA branch for the else part of an if statement (line 4473)
        module_type_store.open_ssa_branch('else')
        
        # Call to put(...): (line 4476)
        # Processing the call arguments (line 4476)
        # Getting the type of 'indices' (line 4476)
        indices_146272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4476, 18), 'indices', False)
        # Getting the type of 'values' (line 4476)
        values_146273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4476, 27), 'values', False)
        # Obtaining the member '_mask' of a type (line 4476)
        _mask_146274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4476, 27), values_146273, '_mask')
        # Processing the call keyword arguments (line 4476)
        # Getting the type of 'mode' (line 4476)
        mode_146275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4476, 46), 'mode', False)
        keyword_146276 = mode_146275
        kwargs_146277 = {'mode': keyword_146276}
        # Getting the type of 'm' (line 4476)
        m_146270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4476, 12), 'm', False)
        # Obtaining the member 'put' of a type (line 4476)
        put_146271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4476, 12), m_146270, 'put')
        # Calling put(args, kwargs) (line 4476)
        put_call_result_146278 = invoke(stypy.reporting.localization.Localization(__file__, 4476, 12), put_146271, *[indices_146272, _mask_146274], **kwargs_146277)
        
        # SSA join for if statement (line 4473)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 4477):
        
        # Assigning a Call to a Name (line 4477):
        
        # Call to make_mask(...): (line 4477)
        # Processing the call arguments (line 4477)
        # Getting the type of 'm' (line 4477)
        m_146280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 22), 'm', False)
        # Processing the call keyword arguments (line 4477)
        # Getting the type of 'False' (line 4477)
        False_146281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 30), 'False', False)
        keyword_146282 = False_146281
        # Getting the type of 'True' (line 4477)
        True_146283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 44), 'True', False)
        keyword_146284 = True_146283
        kwargs_146285 = {'copy': keyword_146282, 'shrink': keyword_146284}
        # Getting the type of 'make_mask' (line 4477)
        make_mask_146279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 12), 'make_mask', False)
        # Calling make_mask(args, kwargs) (line 4477)
        make_mask_call_result_146286 = invoke(stypy.reporting.localization.Localization(__file__, 4477, 12), make_mask_146279, *[m_146280], **kwargs_146285)
        
        # Assigning a type to the variable 'm' (line 4477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4477, 8), 'm', make_mask_call_result_146286)
        
        # Assigning a Name to a Attribute (line 4478):
        
        # Assigning a Name to a Attribute (line 4478):
        # Getting the type of 'm' (line 4478)
        m_146287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4478, 21), 'm')
        # Getting the type of 'self' (line 4478)
        self_146288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4478, 8), 'self')
        # Setting the type of the member '_mask' of a type (line 4478)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4478, 8), self_146288, '_mask', m_146287)
        # Assigning a type to the variable 'stypy_return_type' (line 4479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4479, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'put(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'put' in the type store
        # Getting the type of 'stypy_return_type' (line 4411)
        stypy_return_type_146289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4411, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146289)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'put'
        return stypy_return_type_146289


    @norecursion
    def ids(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ids'
        module_type_store = module_type_store.open_function_context('ids', 4481, 4, False)
        # Assigning a type to the variable 'self' (line 4482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4482, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.ids.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.ids.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.ids.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.ids.__dict__.__setitem__('stypy_function_name', 'MaskedArray.ids')
        MaskedArray.ids.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.ids.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.ids.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.ids.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.ids.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.ids.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.ids.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.ids', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ids', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ids(...)' code ##################

        str_146290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4502, (-1)), 'str', '\n        Return the addresses of the data and mask areas.\n\n        Parameters\n        ----------\n        None\n\n        Examples\n        --------\n        >>> x = np.ma.array([1, 2, 3], mask=[0, 1, 1])\n        >>> x.ids()\n        (166670640, 166659832)\n\n        If the array has no mask, the address of `nomask` is returned. This address\n        is typically not close to the data in memory:\n\n        >>> x = np.ma.array([1, 2, 3])\n        >>> x.ids()\n        (166691080, 3083169284L)\n\n        ')
        
        
        # Getting the type of 'self' (line 4503)
        self_146291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4503, 11), 'self')
        # Obtaining the member '_mask' of a type (line 4503)
        _mask_146292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4503, 11), self_146291, '_mask')
        # Getting the type of 'nomask' (line 4503)
        nomask_146293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4503, 25), 'nomask')
        # Applying the binary operator 'is' (line 4503)
        result_is__146294 = python_operator(stypy.reporting.localization.Localization(__file__, 4503, 11), 'is', _mask_146292, nomask_146293)
        
        # Testing the type of an if condition (line 4503)
        if_condition_146295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4503, 8), result_is__146294)
        # Assigning a type to the variable 'if_condition_146295' (line 4503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4503, 8), 'if_condition_146295', if_condition_146295)
        # SSA begins for if statement (line 4503)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 4504)
        tuple_146296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4504, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4504)
        # Adding element type (line 4504)
        # Getting the type of 'self' (line 4504)
        self_146297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4504, 20), 'self')
        # Obtaining the member 'ctypes' of a type (line 4504)
        ctypes_146298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4504, 20), self_146297, 'ctypes')
        # Obtaining the member 'data' of a type (line 4504)
        data_146299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4504, 20), ctypes_146298, 'data')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4504, 20), tuple_146296, data_146299)
        # Adding element type (line 4504)
        
        # Call to id(...): (line 4504)
        # Processing the call arguments (line 4504)
        # Getting the type of 'nomask' (line 4504)
        nomask_146301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4504, 41), 'nomask', False)
        # Processing the call keyword arguments (line 4504)
        kwargs_146302 = {}
        # Getting the type of 'id' (line 4504)
        id_146300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4504, 38), 'id', False)
        # Calling id(args, kwargs) (line 4504)
        id_call_result_146303 = invoke(stypy.reporting.localization.Localization(__file__, 4504, 38), id_146300, *[nomask_146301], **kwargs_146302)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4504, 20), tuple_146296, id_call_result_146303)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4504, 12), 'stypy_return_type', tuple_146296)
        # SSA join for if statement (line 4503)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 4505)
        tuple_146304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4505, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4505)
        # Adding element type (line 4505)
        # Getting the type of 'self' (line 4505)
        self_146305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 16), 'self')
        # Obtaining the member 'ctypes' of a type (line 4505)
        ctypes_146306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4505, 16), self_146305, 'ctypes')
        # Obtaining the member 'data' of a type (line 4505)
        data_146307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4505, 16), ctypes_146306, 'data')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4505, 16), tuple_146304, data_146307)
        # Adding element type (line 4505)
        # Getting the type of 'self' (line 4505)
        self_146308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 34), 'self')
        # Obtaining the member '_mask' of a type (line 4505)
        _mask_146309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4505, 34), self_146308, '_mask')
        # Obtaining the member 'ctypes' of a type (line 4505)
        ctypes_146310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4505, 34), _mask_146309, 'ctypes')
        # Obtaining the member 'data' of a type (line 4505)
        data_146311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4505, 34), ctypes_146310, 'data')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4505, 16), tuple_146304, data_146311)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4505, 8), 'stypy_return_type', tuple_146304)
        
        # ################# End of 'ids(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ids' in the type store
        # Getting the type of 'stypy_return_type' (line 4481)
        stypy_return_type_146312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4481, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146312)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ids'
        return stypy_return_type_146312


    @norecursion
    def iscontiguous(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'iscontiguous'
        module_type_store = module_type_store.open_function_context('iscontiguous', 4507, 4, False)
        # Assigning a type to the variable 'self' (line 4508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4508, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_function_name', 'MaskedArray.iscontiguous')
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.iscontiguous.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.iscontiguous', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'iscontiguous', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'iscontiguous(...)' code ##################

        str_146313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4531, (-1)), 'str', '\n        Return a boolean indicating whether the data is contiguous.\n\n        Parameters\n        ----------\n        None\n\n        Examples\n        --------\n        >>> x = np.ma.array([1, 2, 3])\n        >>> x.iscontiguous()\n        True\n\n        `iscontiguous` returns one of the flags of the masked array:\n\n        >>> x.flags\n          C_CONTIGUOUS : True\n          F_CONTIGUOUS : True\n          OWNDATA : False\n          WRITEABLE : True\n          ALIGNED : True\n          UPDATEIFCOPY : False\n\n        ')
        
        # Obtaining the type of the subscript
        str_146314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4532, 26), 'str', 'CONTIGUOUS')
        # Getting the type of 'self' (line 4532)
        self_146315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4532, 15), 'self')
        # Obtaining the member 'flags' of a type (line 4532)
        flags_146316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4532, 15), self_146315, 'flags')
        # Obtaining the member '__getitem__' of a type (line 4532)
        getitem___146317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4532, 15), flags_146316, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4532)
        subscript_call_result_146318 = invoke(stypy.reporting.localization.Localization(__file__, 4532, 15), getitem___146317, str_146314)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4532, 8), 'stypy_return_type', subscript_call_result_146318)
        
        # ################# End of 'iscontiguous(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'iscontiguous' in the type store
        # Getting the type of 'stypy_return_type' (line 4507)
        stypy_return_type_146319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146319)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'iscontiguous'
        return stypy_return_type_146319


    @norecursion
    def all(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4534)
        None_146320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4534, 23), 'None')
        # Getting the type of 'None' (line 4534)
        None_146321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4534, 33), 'None')
        defaults = [None_146320, None_146321]
        # Create a new context for function 'all'
        module_type_store = module_type_store.open_function_context('all', 4534, 4, False)
        # Assigning a type to the variable 'self' (line 4535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4535, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.all.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.all.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.all.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.all.__dict__.__setitem__('stypy_function_name', 'MaskedArray.all')
        MaskedArray.all.__dict__.__setitem__('stypy_param_names_list', ['axis', 'out'])
        MaskedArray.all.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.all.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.all.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.all.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.all.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.all.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.all', ['axis', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'all', localization, ['axis', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'all(...)' code ##################

        str_146322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4565, (-1)), 'str', '\n        Check if all of the elements of `a` are true.\n\n        Performs a :func:`logical_and` over the given axis and returns the result.\n        Masked values are considered as True during computation.\n        For convenience, the output array is masked where ALL the values along the\n        current axis are masked: if the output would have been a scalar and that\n        all the values are masked, then the output is `masked`.\n\n        Parameters\n        ----------\n        axis : {None, integer}\n            Axis to perform the operation over.\n            If None, perform over flattened array.\n        out : {None, array}, optional\n            Array into which the result can be placed. Its type is preserved\n            and it must be of the right shape to hold the output.\n\n        See Also\n        --------\n        all : equivalent function\n\n        Examples\n        --------\n        >>> np.ma.array([1,2,3]).all()\n        True\n        >>> a = np.ma.array([1,2,3], mask=True)\n        >>> (a.all() is np.ma.masked)\n        True\n\n        ')
        
        # Assigning a Call to a Name (line 4566):
        
        # Assigning a Call to a Name (line 4566):
        
        # Call to _check_mask_axis(...): (line 4566)
        # Processing the call arguments (line 4566)
        # Getting the type of 'self' (line 4566)
        self_146324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4566, 32), 'self', False)
        # Obtaining the member '_mask' of a type (line 4566)
        _mask_146325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4566, 32), self_146324, '_mask')
        # Getting the type of 'axis' (line 4566)
        axis_146326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4566, 44), 'axis', False)
        # Processing the call keyword arguments (line 4566)
        kwargs_146327 = {}
        # Getting the type of '_check_mask_axis' (line 4566)
        _check_mask_axis_146323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4566, 15), '_check_mask_axis', False)
        # Calling _check_mask_axis(args, kwargs) (line 4566)
        _check_mask_axis_call_result_146328 = invoke(stypy.reporting.localization.Localization(__file__, 4566, 15), _check_mask_axis_146323, *[_mask_146325, axis_146326], **kwargs_146327)
        
        # Assigning a type to the variable 'mask' (line 4566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4566, 8), 'mask', _check_mask_axis_call_result_146328)
        
        # Type idiom detected: calculating its left and rigth part (line 4567)
        # Getting the type of 'out' (line 4567)
        out_146329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4567, 11), 'out')
        # Getting the type of 'None' (line 4567)
        None_146330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4567, 18), 'None')
        
        (may_be_146331, more_types_in_union_146332) = may_be_none(out_146329, None_146330)

        if may_be_146331:

            if more_types_in_union_146332:
                # Runtime conditional SSA (line 4567)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 4568):
            
            # Assigning a Call to a Name (line 4568):
            
            # Call to view(...): (line 4568)
            # Processing the call arguments (line 4568)
            
            # Call to type(...): (line 4568)
            # Processing the call arguments (line 4568)
            # Getting the type of 'self' (line 4568)
            self_146345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 59), 'self', False)
            # Processing the call keyword arguments (line 4568)
            kwargs_146346 = {}
            # Getting the type of 'type' (line 4568)
            type_146344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 54), 'type', False)
            # Calling type(args, kwargs) (line 4568)
            type_call_result_146347 = invoke(stypy.reporting.localization.Localization(__file__, 4568, 54), type_146344, *[self_146345], **kwargs_146346)
            
            # Processing the call keyword arguments (line 4568)
            kwargs_146348 = {}
            
            # Call to all(...): (line 4568)
            # Processing the call keyword arguments (line 4568)
            # Getting the type of 'axis' (line 4568)
            axis_146339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 43), 'axis', False)
            keyword_146340 = axis_146339
            kwargs_146341 = {'axis': keyword_146340}
            
            # Call to filled(...): (line 4568)
            # Processing the call arguments (line 4568)
            # Getting the type of 'True' (line 4568)
            True_146335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 28), 'True', False)
            # Processing the call keyword arguments (line 4568)
            kwargs_146336 = {}
            # Getting the type of 'self' (line 4568)
            self_146333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4568, 16), 'self', False)
            # Obtaining the member 'filled' of a type (line 4568)
            filled_146334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4568, 16), self_146333, 'filled')
            # Calling filled(args, kwargs) (line 4568)
            filled_call_result_146337 = invoke(stypy.reporting.localization.Localization(__file__, 4568, 16), filled_146334, *[True_146335], **kwargs_146336)
            
            # Obtaining the member 'all' of a type (line 4568)
            all_146338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4568, 16), filled_call_result_146337, 'all')
            # Calling all(args, kwargs) (line 4568)
            all_call_result_146342 = invoke(stypy.reporting.localization.Localization(__file__, 4568, 16), all_146338, *[], **kwargs_146341)
            
            # Obtaining the member 'view' of a type (line 4568)
            view_146343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4568, 16), all_call_result_146342, 'view')
            # Calling view(args, kwargs) (line 4568)
            view_call_result_146349 = invoke(stypy.reporting.localization.Localization(__file__, 4568, 16), view_146343, *[type_call_result_146347], **kwargs_146348)
            
            # Assigning a type to the variable 'd' (line 4568)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4568, 12), 'd', view_call_result_146349)
            
            # Getting the type of 'd' (line 4569)
            d_146350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4569, 15), 'd')
            # Obtaining the member 'ndim' of a type (line 4569)
            ndim_146351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4569, 15), d_146350, 'ndim')
            # Testing the type of an if condition (line 4569)
            if_condition_146352 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4569, 12), ndim_146351)
            # Assigning a type to the variable 'if_condition_146352' (line 4569)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4569, 12), 'if_condition_146352', if_condition_146352)
            # SSA begins for if statement (line 4569)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __setmask__(...): (line 4570)
            # Processing the call arguments (line 4570)
            # Getting the type of 'mask' (line 4570)
            mask_146355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 30), 'mask', False)
            # Processing the call keyword arguments (line 4570)
            kwargs_146356 = {}
            # Getting the type of 'd' (line 4570)
            d_146353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 16), 'd', False)
            # Obtaining the member '__setmask__' of a type (line 4570)
            setmask___146354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4570, 16), d_146353, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 4570)
            setmask___call_result_146357 = invoke(stypy.reporting.localization.Localization(__file__, 4570, 16), setmask___146354, *[mask_146355], **kwargs_146356)
            
            # SSA branch for the else part of an if statement (line 4569)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'mask' (line 4571)
            mask_146358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 17), 'mask')
            # Testing the type of an if condition (line 4571)
            if_condition_146359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4571, 17), mask_146358)
            # Assigning a type to the variable 'if_condition_146359' (line 4571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 17), 'if_condition_146359', if_condition_146359)
            # SSA begins for if statement (line 4571)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 'masked' (line 4572)
            masked_146360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4572, 23), 'masked')
            # Assigning a type to the variable 'stypy_return_type' (line 4572)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4572, 16), 'stypy_return_type', masked_146360)
            # SSA join for if statement (line 4571)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 4569)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'd' (line 4573)
            d_146361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4573, 19), 'd')
            # Assigning a type to the variable 'stypy_return_type' (line 4573)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4573, 12), 'stypy_return_type', d_146361)

            if more_types_in_union_146332:
                # SSA join for if statement (line 4567)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to all(...): (line 4574)
        # Processing the call keyword arguments (line 4574)
        # Getting the type of 'axis' (line 4574)
        axis_146368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4574, 35), 'axis', False)
        keyword_146369 = axis_146368
        # Getting the type of 'out' (line 4574)
        out_146370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4574, 45), 'out', False)
        keyword_146371 = out_146370
        kwargs_146372 = {'out': keyword_146371, 'axis': keyword_146369}
        
        # Call to filled(...): (line 4574)
        # Processing the call arguments (line 4574)
        # Getting the type of 'True' (line 4574)
        True_146364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4574, 20), 'True', False)
        # Processing the call keyword arguments (line 4574)
        kwargs_146365 = {}
        # Getting the type of 'self' (line 4574)
        self_146362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4574, 8), 'self', False)
        # Obtaining the member 'filled' of a type (line 4574)
        filled_146363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4574, 8), self_146362, 'filled')
        # Calling filled(args, kwargs) (line 4574)
        filled_call_result_146366 = invoke(stypy.reporting.localization.Localization(__file__, 4574, 8), filled_146363, *[True_146364], **kwargs_146365)
        
        # Obtaining the member 'all' of a type (line 4574)
        all_146367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4574, 8), filled_call_result_146366, 'all')
        # Calling all(args, kwargs) (line 4574)
        all_call_result_146373 = invoke(stypy.reporting.localization.Localization(__file__, 4574, 8), all_146367, *[], **kwargs_146372)
        
        
        
        # Call to isinstance(...): (line 4575)
        # Processing the call arguments (line 4575)
        # Getting the type of 'out' (line 4575)
        out_146375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 4575)
        MaskedArray_146376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 4575)
        kwargs_146377 = {}
        # Getting the type of 'isinstance' (line 4575)
        isinstance_146374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 4575)
        isinstance_call_result_146378 = invoke(stypy.reporting.localization.Localization(__file__, 4575, 11), isinstance_146374, *[out_146375, MaskedArray_146376], **kwargs_146377)
        
        # Testing the type of an if condition (line 4575)
        if_condition_146379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4575, 8), isinstance_call_result_146378)
        # Assigning a type to the variable 'if_condition_146379' (line 4575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4575, 8), 'if_condition_146379', if_condition_146379)
        # SSA begins for if statement (line 4575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'out' (line 4576)
        out_146380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4576, 15), 'out')
        # Obtaining the member 'ndim' of a type (line 4576)
        ndim_146381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4576, 15), out_146380, 'ndim')
        # Getting the type of 'mask' (line 4576)
        mask_146382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4576, 27), 'mask')
        # Applying the binary operator 'or' (line 4576)
        result_or_keyword_146383 = python_operator(stypy.reporting.localization.Localization(__file__, 4576, 15), 'or', ndim_146381, mask_146382)
        
        # Testing the type of an if condition (line 4576)
        if_condition_146384 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4576, 12), result_or_keyword_146383)
        # Assigning a type to the variable 'if_condition_146384' (line 4576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4576, 12), 'if_condition_146384', if_condition_146384)
        # SSA begins for if statement (line 4576)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __setmask__(...): (line 4577)
        # Processing the call arguments (line 4577)
        # Getting the type of 'mask' (line 4577)
        mask_146387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4577, 32), 'mask', False)
        # Processing the call keyword arguments (line 4577)
        kwargs_146388 = {}
        # Getting the type of 'out' (line 4577)
        out_146385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4577, 16), 'out', False)
        # Obtaining the member '__setmask__' of a type (line 4577)
        setmask___146386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4577, 16), out_146385, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 4577)
        setmask___call_result_146389 = invoke(stypy.reporting.localization.Localization(__file__, 4577, 16), setmask___146386, *[mask_146387], **kwargs_146388)
        
        # SSA join for if statement (line 4576)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4575)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 4578)
        out_146390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4578, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 4578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4578, 8), 'stypy_return_type', out_146390)
        
        # ################# End of 'all(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'all' in the type store
        # Getting the type of 'stypy_return_type' (line 4534)
        stypy_return_type_146391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4534, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146391)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'all'
        return stypy_return_type_146391


    @norecursion
    def any(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4580)
        None_146392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4580, 23), 'None')
        # Getting the type of 'None' (line 4580)
        None_146393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4580, 33), 'None')
        defaults = [None_146392, None_146393]
        # Create a new context for function 'any'
        module_type_store = module_type_store.open_function_context('any', 4580, 4, False)
        # Assigning a type to the variable 'self' (line 4581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.any.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.any.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.any.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.any.__dict__.__setitem__('stypy_function_name', 'MaskedArray.any')
        MaskedArray.any.__dict__.__setitem__('stypy_param_names_list', ['axis', 'out'])
        MaskedArray.any.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.any.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.any.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.any.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.any.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.any.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.any', ['axis', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'any', localization, ['axis', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'any(...)' code ##################

        str_146394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4600, (-1)), 'str', '\n        Check if any of the elements of `a` are true.\n\n        Performs a logical_or over the given axis and returns the result.\n        Masked values are considered as False during computation.\n\n        Parameters\n        ----------\n        axis : {None, integer}\n            Axis to perform the operation over.\n            If None, perform over flattened array and return a scalar.\n        out : {None, array}, optional\n            Array into which the result can be placed. Its type is preserved\n            and it must be of the right shape to hold the output.\n\n        See Also\n        --------\n        any : equivalent function\n\n        ')
        
        # Assigning a Call to a Name (line 4601):
        
        # Assigning a Call to a Name (line 4601):
        
        # Call to _check_mask_axis(...): (line 4601)
        # Processing the call arguments (line 4601)
        # Getting the type of 'self' (line 4601)
        self_146396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4601, 32), 'self', False)
        # Obtaining the member '_mask' of a type (line 4601)
        _mask_146397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4601, 32), self_146396, '_mask')
        # Getting the type of 'axis' (line 4601)
        axis_146398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4601, 44), 'axis', False)
        # Processing the call keyword arguments (line 4601)
        kwargs_146399 = {}
        # Getting the type of '_check_mask_axis' (line 4601)
        _check_mask_axis_146395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4601, 15), '_check_mask_axis', False)
        # Calling _check_mask_axis(args, kwargs) (line 4601)
        _check_mask_axis_call_result_146400 = invoke(stypy.reporting.localization.Localization(__file__, 4601, 15), _check_mask_axis_146395, *[_mask_146397, axis_146398], **kwargs_146399)
        
        # Assigning a type to the variable 'mask' (line 4601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4601, 8), 'mask', _check_mask_axis_call_result_146400)
        
        # Type idiom detected: calculating its left and rigth part (line 4602)
        # Getting the type of 'out' (line 4602)
        out_146401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4602, 11), 'out')
        # Getting the type of 'None' (line 4602)
        None_146402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4602, 18), 'None')
        
        (may_be_146403, more_types_in_union_146404) = may_be_none(out_146401, None_146402)

        if may_be_146403:

            if more_types_in_union_146404:
                # Runtime conditional SSA (line 4602)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 4603):
            
            # Assigning a Call to a Name (line 4603):
            
            # Call to view(...): (line 4603)
            # Processing the call arguments (line 4603)
            
            # Call to type(...): (line 4603)
            # Processing the call arguments (line 4603)
            # Getting the type of 'self' (line 4603)
            self_146417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4603, 60), 'self', False)
            # Processing the call keyword arguments (line 4603)
            kwargs_146418 = {}
            # Getting the type of 'type' (line 4603)
            type_146416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4603, 55), 'type', False)
            # Calling type(args, kwargs) (line 4603)
            type_call_result_146419 = invoke(stypy.reporting.localization.Localization(__file__, 4603, 55), type_146416, *[self_146417], **kwargs_146418)
            
            # Processing the call keyword arguments (line 4603)
            kwargs_146420 = {}
            
            # Call to any(...): (line 4603)
            # Processing the call keyword arguments (line 4603)
            # Getting the type of 'axis' (line 4603)
            axis_146411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4603, 44), 'axis', False)
            keyword_146412 = axis_146411
            kwargs_146413 = {'axis': keyword_146412}
            
            # Call to filled(...): (line 4603)
            # Processing the call arguments (line 4603)
            # Getting the type of 'False' (line 4603)
            False_146407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4603, 28), 'False', False)
            # Processing the call keyword arguments (line 4603)
            kwargs_146408 = {}
            # Getting the type of 'self' (line 4603)
            self_146405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4603, 16), 'self', False)
            # Obtaining the member 'filled' of a type (line 4603)
            filled_146406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4603, 16), self_146405, 'filled')
            # Calling filled(args, kwargs) (line 4603)
            filled_call_result_146409 = invoke(stypy.reporting.localization.Localization(__file__, 4603, 16), filled_146406, *[False_146407], **kwargs_146408)
            
            # Obtaining the member 'any' of a type (line 4603)
            any_146410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4603, 16), filled_call_result_146409, 'any')
            # Calling any(args, kwargs) (line 4603)
            any_call_result_146414 = invoke(stypy.reporting.localization.Localization(__file__, 4603, 16), any_146410, *[], **kwargs_146413)
            
            # Obtaining the member 'view' of a type (line 4603)
            view_146415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4603, 16), any_call_result_146414, 'view')
            # Calling view(args, kwargs) (line 4603)
            view_call_result_146421 = invoke(stypy.reporting.localization.Localization(__file__, 4603, 16), view_146415, *[type_call_result_146419], **kwargs_146420)
            
            # Assigning a type to the variable 'd' (line 4603)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4603, 12), 'd', view_call_result_146421)
            
            # Getting the type of 'd' (line 4604)
            d_146422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4604, 15), 'd')
            # Obtaining the member 'ndim' of a type (line 4604)
            ndim_146423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4604, 15), d_146422, 'ndim')
            # Testing the type of an if condition (line 4604)
            if_condition_146424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4604, 12), ndim_146423)
            # Assigning a type to the variable 'if_condition_146424' (line 4604)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4604, 12), 'if_condition_146424', if_condition_146424)
            # SSA begins for if statement (line 4604)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __setmask__(...): (line 4605)
            # Processing the call arguments (line 4605)
            # Getting the type of 'mask' (line 4605)
            mask_146427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4605, 30), 'mask', False)
            # Processing the call keyword arguments (line 4605)
            kwargs_146428 = {}
            # Getting the type of 'd' (line 4605)
            d_146425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4605, 16), 'd', False)
            # Obtaining the member '__setmask__' of a type (line 4605)
            setmask___146426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4605, 16), d_146425, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 4605)
            setmask___call_result_146429 = invoke(stypy.reporting.localization.Localization(__file__, 4605, 16), setmask___146426, *[mask_146427], **kwargs_146428)
            
            # SSA branch for the else part of an if statement (line 4604)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'mask' (line 4606)
            mask_146430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4606, 17), 'mask')
            # Testing the type of an if condition (line 4606)
            if_condition_146431 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4606, 17), mask_146430)
            # Assigning a type to the variable 'if_condition_146431' (line 4606)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4606, 17), 'if_condition_146431', if_condition_146431)
            # SSA begins for if statement (line 4606)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 4607):
            
            # Assigning a Name to a Name (line 4607):
            # Getting the type of 'masked' (line 4607)
            masked_146432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4607, 20), 'masked')
            # Assigning a type to the variable 'd' (line 4607)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4607, 16), 'd', masked_146432)
            # SSA join for if statement (line 4606)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 4604)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'd' (line 4608)
            d_146433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4608, 19), 'd')
            # Assigning a type to the variable 'stypy_return_type' (line 4608)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4608, 12), 'stypy_return_type', d_146433)

            if more_types_in_union_146404:
                # SSA join for if statement (line 4602)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to any(...): (line 4609)
        # Processing the call keyword arguments (line 4609)
        # Getting the type of 'axis' (line 4609)
        axis_146440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4609, 36), 'axis', False)
        keyword_146441 = axis_146440
        # Getting the type of 'out' (line 4609)
        out_146442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4609, 46), 'out', False)
        keyword_146443 = out_146442
        kwargs_146444 = {'out': keyword_146443, 'axis': keyword_146441}
        
        # Call to filled(...): (line 4609)
        # Processing the call arguments (line 4609)
        # Getting the type of 'False' (line 4609)
        False_146436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4609, 20), 'False', False)
        # Processing the call keyword arguments (line 4609)
        kwargs_146437 = {}
        # Getting the type of 'self' (line 4609)
        self_146434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4609, 8), 'self', False)
        # Obtaining the member 'filled' of a type (line 4609)
        filled_146435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4609, 8), self_146434, 'filled')
        # Calling filled(args, kwargs) (line 4609)
        filled_call_result_146438 = invoke(stypy.reporting.localization.Localization(__file__, 4609, 8), filled_146435, *[False_146436], **kwargs_146437)
        
        # Obtaining the member 'any' of a type (line 4609)
        any_146439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4609, 8), filled_call_result_146438, 'any')
        # Calling any(args, kwargs) (line 4609)
        any_call_result_146445 = invoke(stypy.reporting.localization.Localization(__file__, 4609, 8), any_146439, *[], **kwargs_146444)
        
        
        
        # Call to isinstance(...): (line 4610)
        # Processing the call arguments (line 4610)
        # Getting the type of 'out' (line 4610)
        out_146447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4610, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 4610)
        MaskedArray_146448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4610, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 4610)
        kwargs_146449 = {}
        # Getting the type of 'isinstance' (line 4610)
        isinstance_146446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4610, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 4610)
        isinstance_call_result_146450 = invoke(stypy.reporting.localization.Localization(__file__, 4610, 11), isinstance_146446, *[out_146447, MaskedArray_146448], **kwargs_146449)
        
        # Testing the type of an if condition (line 4610)
        if_condition_146451 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4610, 8), isinstance_call_result_146450)
        # Assigning a type to the variable 'if_condition_146451' (line 4610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4610, 8), 'if_condition_146451', if_condition_146451)
        # SSA begins for if statement (line 4610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'out' (line 4611)
        out_146452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4611, 15), 'out')
        # Obtaining the member 'ndim' of a type (line 4611)
        ndim_146453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4611, 15), out_146452, 'ndim')
        # Getting the type of 'mask' (line 4611)
        mask_146454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4611, 27), 'mask')
        # Applying the binary operator 'or' (line 4611)
        result_or_keyword_146455 = python_operator(stypy.reporting.localization.Localization(__file__, 4611, 15), 'or', ndim_146453, mask_146454)
        
        # Testing the type of an if condition (line 4611)
        if_condition_146456 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4611, 12), result_or_keyword_146455)
        # Assigning a type to the variable 'if_condition_146456' (line 4611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4611, 12), 'if_condition_146456', if_condition_146456)
        # SSA begins for if statement (line 4611)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __setmask__(...): (line 4612)
        # Processing the call arguments (line 4612)
        # Getting the type of 'mask' (line 4612)
        mask_146459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4612, 32), 'mask', False)
        # Processing the call keyword arguments (line 4612)
        kwargs_146460 = {}
        # Getting the type of 'out' (line 4612)
        out_146457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4612, 16), 'out', False)
        # Obtaining the member '__setmask__' of a type (line 4612)
        setmask___146458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4612, 16), out_146457, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 4612)
        setmask___call_result_146461 = invoke(stypy.reporting.localization.Localization(__file__, 4612, 16), setmask___146458, *[mask_146459], **kwargs_146460)
        
        # SSA join for if statement (line 4611)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4610)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 4613)
        out_146462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4613, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 4613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4613, 8), 'stypy_return_type', out_146462)
        
        # ################# End of 'any(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'any' in the type store
        # Getting the type of 'stypy_return_type' (line 4580)
        stypy_return_type_146463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146463)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'any'
        return stypy_return_type_146463


    @norecursion
    def nonzero(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'nonzero'
        module_type_store = module_type_store.open_function_context('nonzero', 4615, 4, False)
        # Assigning a type to the variable 'self' (line 4616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4616, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.nonzero.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.nonzero.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.nonzero.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.nonzero.__dict__.__setitem__('stypy_function_name', 'MaskedArray.nonzero')
        MaskedArray.nonzero.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.nonzero.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.nonzero.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.nonzero.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.nonzero.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.nonzero.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.nonzero.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.nonzero', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'nonzero', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'nonzero(...)' code ##################

        str_146464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4713, (-1)), 'str', '\n        Return the indices of unmasked elements that are not zero.\n\n        Returns a tuple of arrays, one for each dimension, containing the\n        indices of the non-zero elements in that dimension. The corresponding\n        non-zero values can be obtained with::\n\n            a[a.nonzero()]\n\n        To group the indices by element, rather than dimension, use\n        instead::\n\n            np.transpose(a.nonzero())\n\n        The result of this is always a 2d array, with a row for each non-zero\n        element.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        tuple_of_arrays : tuple\n            Indices of elements that are non-zero.\n\n        See Also\n        --------\n        numpy.nonzero :\n            Function operating on ndarrays.\n        flatnonzero :\n            Return indices that are non-zero in the flattened version of the input\n            array.\n        ndarray.nonzero :\n            Equivalent ndarray method.\n        count_nonzero :\n            Counts the number of non-zero elements in the input array.\n\n        Examples\n        --------\n        >>> import numpy.ma as ma\n        >>> x = ma.array(np.eye(3))\n        >>> x\n        masked_array(data =\n         [[ 1.  0.  0.]\n         [ 0.  1.  0.]\n         [ 0.  0.  1.]],\n              mask =\n         False,\n              fill_value=1e+20)\n        >>> x.nonzero()\n        (array([0, 1, 2]), array([0, 1, 2]))\n\n        Masked elements are ignored.\n\n        >>> x[1, 1] = ma.masked\n        >>> x\n        masked_array(data =\n         [[1.0 0.0 0.0]\n         [0.0 -- 0.0]\n         [0.0 0.0 1.0]],\n              mask =\n         [[False False False]\n         [False  True False]\n         [False False False]],\n              fill_value=1e+20)\n        >>> x.nonzero()\n        (array([0, 2]), array([0, 2]))\n\n        Indices can also be grouped by element.\n\n        >>> np.transpose(x.nonzero())\n        array([[0, 0],\n               [2, 2]])\n\n        A common use for ``nonzero`` is to find the indices of an array, where\n        a condition is True.  Given an array `a`, the condition `a` > 3 is a\n        boolean array and since False is interpreted as 0, ma.nonzero(a > 3)\n        yields the indices of the `a` where the condition is true.\n\n        >>> a = ma.array([[1,2,3],[4,5,6],[7,8,9]])\n        >>> a > 3\n        masked_array(data =\n         [[False False False]\n         [ True  True  True]\n         [ True  True  True]],\n              mask =\n         False,\n              fill_value=999999)\n        >>> ma.nonzero(a > 3)\n        (array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))\n\n        The ``nonzero`` method of the condition array can also be called.\n\n        >>> (a > 3).nonzero()\n        (array([1, 1, 1, 2, 2, 2]), array([0, 1, 2, 0, 1, 2]))\n\n        ')
        
        # Call to nonzero(...): (line 4714)
        # Processing the call keyword arguments (line 4714)
        kwargs_146476 = {}
        
        # Call to narray(...): (line 4714)
        # Processing the call arguments (line 4714)
        
        # Call to filled(...): (line 4714)
        # Processing the call arguments (line 4714)
        int_146468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4714, 34), 'int')
        # Processing the call keyword arguments (line 4714)
        kwargs_146469 = {}
        # Getting the type of 'self' (line 4714)
        self_146466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4714, 22), 'self', False)
        # Obtaining the member 'filled' of a type (line 4714)
        filled_146467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4714, 22), self_146466, 'filled')
        # Calling filled(args, kwargs) (line 4714)
        filled_call_result_146470 = invoke(stypy.reporting.localization.Localization(__file__, 4714, 22), filled_146467, *[int_146468], **kwargs_146469)
        
        # Processing the call keyword arguments (line 4714)
        # Getting the type of 'False' (line 4714)
        False_146471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4714, 43), 'False', False)
        keyword_146472 = False_146471
        kwargs_146473 = {'copy': keyword_146472}
        # Getting the type of 'narray' (line 4714)
        narray_146465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4714, 15), 'narray', False)
        # Calling narray(args, kwargs) (line 4714)
        narray_call_result_146474 = invoke(stypy.reporting.localization.Localization(__file__, 4714, 15), narray_146465, *[filled_call_result_146470], **kwargs_146473)
        
        # Obtaining the member 'nonzero' of a type (line 4714)
        nonzero_146475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4714, 15), narray_call_result_146474, 'nonzero')
        # Calling nonzero(args, kwargs) (line 4714)
        nonzero_call_result_146477 = invoke(stypy.reporting.localization.Localization(__file__, 4714, 15), nonzero_146475, *[], **kwargs_146476)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4714, 8), 'stypy_return_type', nonzero_call_result_146477)
        
        # ################# End of 'nonzero(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'nonzero' in the type store
        # Getting the type of 'stypy_return_type' (line 4615)
        stypy_return_type_146478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4615, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146478)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'nonzero'
        return stypy_return_type_146478


    @norecursion
    def trace(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_146479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4716, 27), 'int')
        int_146480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4716, 36), 'int')
        int_146481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4716, 45), 'int')
        # Getting the type of 'None' (line 4716)
        None_146482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4716, 54), 'None')
        # Getting the type of 'None' (line 4716)
        None_146483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4716, 64), 'None')
        defaults = [int_146479, int_146480, int_146481, None_146482, None_146483]
        # Create a new context for function 'trace'
        module_type_store = module_type_store.open_function_context('trace', 4716, 4, False)
        # Assigning a type to the variable 'self' (line 4717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4717, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.trace.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.trace.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.trace.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.trace.__dict__.__setitem__('stypy_function_name', 'MaskedArray.trace')
        MaskedArray.trace.__dict__.__setitem__('stypy_param_names_list', ['offset', 'axis1', 'axis2', 'dtype', 'out'])
        MaskedArray.trace.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.trace.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.trace.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.trace.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.trace.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.trace.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.trace', ['offset', 'axis1', 'axis2', 'dtype', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'trace', localization, ['offset', 'axis1', 'axis2', 'dtype', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'trace(...)' code ##################

        str_146484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4719, (-1)), 'str', '\n        (this docstring should be overwritten)\n        ')
        
        # Assigning a Attribute to a Name (line 4721):
        
        # Assigning a Attribute to a Name (line 4721):
        # Getting the type of 'self' (line 4721)
        self_146485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4721, 12), 'self')
        # Obtaining the member '_mask' of a type (line 4721)
        _mask_146486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4721, 12), self_146485, '_mask')
        # Assigning a type to the variable 'm' (line 4721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4721, 8), 'm', _mask_146486)
        
        
        # Getting the type of 'm' (line 4722)
        m_146487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4722, 11), 'm')
        # Getting the type of 'nomask' (line 4722)
        nomask_146488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4722, 16), 'nomask')
        # Applying the binary operator 'is' (line 4722)
        result_is__146489 = python_operator(stypy.reporting.localization.Localization(__file__, 4722, 11), 'is', m_146487, nomask_146488)
        
        # Testing the type of an if condition (line 4722)
        if_condition_146490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4722, 8), result_is__146489)
        # Assigning a type to the variable 'if_condition_146490' (line 4722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4722, 8), 'if_condition_146490', if_condition_146490)
        # SSA begins for if statement (line 4722)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4723):
        
        # Assigning a Call to a Name (line 4723):
        
        # Call to trace(...): (line 4723)
        # Processing the call keyword arguments (line 4723)
        # Getting the type of 'offset' (line 4723)
        offset_146497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4723, 59), 'offset', False)
        keyword_146498 = offset_146497
        # Getting the type of 'axis1' (line 4723)
        axis1_146499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4723, 73), 'axis1', False)
        keyword_146500 = axis1_146499
        # Getting the type of 'axis2' (line 4724)
        axis2_146501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4724, 58), 'axis2', False)
        keyword_146502 = axis2_146501
        # Getting the type of 'out' (line 4724)
        out_146503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4724, 69), 'out', False)
        keyword_146504 = out_146503
        kwargs_146505 = {'out': keyword_146504, 'axis1': keyword_146500, 'axis2': keyword_146502, 'offset': keyword_146498}
        
        # Call to super(...): (line 4723)
        # Processing the call arguments (line 4723)
        # Getting the type of 'MaskedArray' (line 4723)
        MaskedArray_146492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4723, 27), 'MaskedArray', False)
        # Getting the type of 'self' (line 4723)
        self_146493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4723, 40), 'self', False)
        # Processing the call keyword arguments (line 4723)
        kwargs_146494 = {}
        # Getting the type of 'super' (line 4723)
        super_146491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4723, 21), 'super', False)
        # Calling super(args, kwargs) (line 4723)
        super_call_result_146495 = invoke(stypy.reporting.localization.Localization(__file__, 4723, 21), super_146491, *[MaskedArray_146492, self_146493], **kwargs_146494)
        
        # Obtaining the member 'trace' of a type (line 4723)
        trace_146496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4723, 21), super_call_result_146495, 'trace')
        # Calling trace(args, kwargs) (line 4723)
        trace_call_result_146506 = invoke(stypy.reporting.localization.Localization(__file__, 4723, 21), trace_146496, *[], **kwargs_146505)
        
        # Assigning a type to the variable 'result' (line 4723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4723, 12), 'result', trace_call_result_146506)
        
        # Call to astype(...): (line 4725)
        # Processing the call arguments (line 4725)
        # Getting the type of 'dtype' (line 4725)
        dtype_146509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4725, 33), 'dtype', False)
        # Processing the call keyword arguments (line 4725)
        kwargs_146510 = {}
        # Getting the type of 'result' (line 4725)
        result_146507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4725, 19), 'result', False)
        # Obtaining the member 'astype' of a type (line 4725)
        astype_146508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4725, 19), result_146507, 'astype')
        # Calling astype(args, kwargs) (line 4725)
        astype_call_result_146511 = invoke(stypy.reporting.localization.Localization(__file__, 4725, 19), astype_146508, *[dtype_146509], **kwargs_146510)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4725, 12), 'stypy_return_type', astype_call_result_146511)
        # SSA branch for the else part of an if statement (line 4722)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 4727):
        
        # Assigning a Call to a Name (line 4727):
        
        # Call to diagonal(...): (line 4727)
        # Processing the call keyword arguments (line 4727)
        # Getting the type of 'offset' (line 4727)
        offset_146514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4727, 37), 'offset', False)
        keyword_146515 = offset_146514
        # Getting the type of 'axis1' (line 4727)
        axis1_146516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4727, 51), 'axis1', False)
        keyword_146517 = axis1_146516
        # Getting the type of 'axis2' (line 4727)
        axis2_146518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4727, 64), 'axis2', False)
        keyword_146519 = axis2_146518
        kwargs_146520 = {'axis1': keyword_146517, 'axis2': keyword_146519, 'offset': keyword_146515}
        # Getting the type of 'self' (line 4727)
        self_146512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4727, 16), 'self', False)
        # Obtaining the member 'diagonal' of a type (line 4727)
        diagonal_146513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4727, 16), self_146512, 'diagonal')
        # Calling diagonal(args, kwargs) (line 4727)
        diagonal_call_result_146521 = invoke(stypy.reporting.localization.Localization(__file__, 4727, 16), diagonal_146513, *[], **kwargs_146520)
        
        # Assigning a type to the variable 'D' (line 4727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4727, 12), 'D', diagonal_call_result_146521)
        
        # Call to sum(...): (line 4728)
        # Processing the call keyword arguments (line 4728)
        # Getting the type of 'None' (line 4728)
        None_146532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4728, 54), 'None', False)
        keyword_146533 = None_146532
        # Getting the type of 'out' (line 4728)
        out_146534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4728, 64), 'out', False)
        keyword_146535 = out_146534
        kwargs_146536 = {'out': keyword_146535, 'axis': keyword_146533}
        
        # Call to filled(...): (line 4728)
        # Processing the call arguments (line 4728)
        int_146528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4728, 42), 'int')
        # Processing the call keyword arguments (line 4728)
        kwargs_146529 = {}
        
        # Call to astype(...): (line 4728)
        # Processing the call arguments (line 4728)
        # Getting the type of 'dtype' (line 4728)
        dtype_146524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4728, 28), 'dtype', False)
        # Processing the call keyword arguments (line 4728)
        kwargs_146525 = {}
        # Getting the type of 'D' (line 4728)
        D_146522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4728, 19), 'D', False)
        # Obtaining the member 'astype' of a type (line 4728)
        astype_146523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4728, 19), D_146522, 'astype')
        # Calling astype(args, kwargs) (line 4728)
        astype_call_result_146526 = invoke(stypy.reporting.localization.Localization(__file__, 4728, 19), astype_146523, *[dtype_146524], **kwargs_146525)
        
        # Obtaining the member 'filled' of a type (line 4728)
        filled_146527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4728, 19), astype_call_result_146526, 'filled')
        # Calling filled(args, kwargs) (line 4728)
        filled_call_result_146530 = invoke(stypy.reporting.localization.Localization(__file__, 4728, 19), filled_146527, *[int_146528], **kwargs_146529)
        
        # Obtaining the member 'sum' of a type (line 4728)
        sum_146531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4728, 19), filled_call_result_146530, 'sum')
        # Calling sum(args, kwargs) (line 4728)
        sum_call_result_146537 = invoke(stypy.reporting.localization.Localization(__file__, 4728, 19), sum_146531, *[], **kwargs_146536)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4728, 12), 'stypy_return_type', sum_call_result_146537)
        # SSA join for if statement (line 4722)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'trace(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'trace' in the type store
        # Getting the type of 'stypy_return_type' (line 4716)
        stypy_return_type_146538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4716, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146538)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'trace'
        return stypy_return_type_146538

    
    # Assigning a Attribute to a Attribute (line 4729):

    @norecursion
    def dot(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4731)
        None_146539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4731, 25), 'None')
        # Getting the type of 'False' (line 4731)
        False_146540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4731, 38), 'False')
        defaults = [None_146539, False_146540]
        # Create a new context for function 'dot'
        module_type_store = module_type_store.open_function_context('dot', 4731, 4, False)
        # Assigning a type to the variable 'self' (line 4732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4732, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.dot.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.dot.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.dot.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.dot.__dict__.__setitem__('stypy_function_name', 'MaskedArray.dot')
        MaskedArray.dot.__dict__.__setitem__('stypy_param_names_list', ['b', 'out', 'strict'])
        MaskedArray.dot.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.dot.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.dot.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.dot.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.dot.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.dot.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.dot', ['b', 'out', 'strict'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dot', localization, ['b', 'out', 'strict'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dot(...)' code ##################

        str_146541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4767, (-1)), 'str', '\n        a.dot(b, out=None)\n\n        Masked dot product of two arrays. Note that `out` and `strict` are\n        located in different positions than in `ma.dot`. In order to\n        maintain compatibility with the functional version, it is\n        recommended that the optional arguments be treated as keyword only.\n        At some point that may be mandatory.\n\n        .. versionadded:: 1.10.0\n\n        Parameters\n        ----------\n        b : masked_array_like\n            Inputs array.\n        out : masked_array, optional\n            Output argument. This must have the exact kind that would be\n            returned if it was not used. In particular, it must have the\n            right type, must be C-contiguous, and its dtype must be the\n            dtype that would be returned for `ma.dot(a,b)`. This is a\n            performance feature. Therefore, if these conditions are not\n            met, an exception is raised, instead of attempting to be\n            flexible.\n        strict : bool, optional\n            Whether masked data are propagated (True) or set to 0 (False)\n            for the computation. Default is False.  Propagating the mask\n            means that if a masked value appears in a row or column, the\n            whole row or column is considered masked.\n\n            .. versionadded:: 1.10.2\n\n        See Also\n        --------\n        numpy.ma.dot : equivalent function\n\n        ')
        
        # Call to dot(...): (line 4768)
        # Processing the call arguments (line 4768)
        # Getting the type of 'self' (line 4768)
        self_146543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4768, 19), 'self', False)
        # Getting the type of 'b' (line 4768)
        b_146544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4768, 25), 'b', False)
        # Processing the call keyword arguments (line 4768)
        # Getting the type of 'out' (line 4768)
        out_146545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4768, 32), 'out', False)
        keyword_146546 = out_146545
        # Getting the type of 'strict' (line 4768)
        strict_146547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4768, 44), 'strict', False)
        keyword_146548 = strict_146547
        kwargs_146549 = {'strict': keyword_146548, 'out': keyword_146546}
        # Getting the type of 'dot' (line 4768)
        dot_146542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4768, 15), 'dot', False)
        # Calling dot(args, kwargs) (line 4768)
        dot_call_result_146550 = invoke(stypy.reporting.localization.Localization(__file__, 4768, 15), dot_146542, *[self_146543, b_146544], **kwargs_146549)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4768, 8), 'stypy_return_type', dot_call_result_146550)
        
        # ################# End of 'dot(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dot' in the type store
        # Getting the type of 'stypy_return_type' (line 4731)
        stypy_return_type_146551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4731, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146551)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dot'
        return stypy_return_type_146551


    @norecursion
    def sum(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4770)
        None_146552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4770, 23), 'None')
        # Getting the type of 'None' (line 4770)
        None_146553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4770, 35), 'None')
        # Getting the type of 'None' (line 4770)
        None_146554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4770, 45), 'None')
        defaults = [None_146552, None_146553, None_146554]
        # Create a new context for function 'sum'
        module_type_store = module_type_store.open_function_context('sum', 4770, 4, False)
        # Assigning a type to the variable 'self' (line 4771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4771, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.sum.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.sum.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.sum.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.sum.__dict__.__setitem__('stypy_function_name', 'MaskedArray.sum')
        MaskedArray.sum.__dict__.__setitem__('stypy_param_names_list', ['axis', 'dtype', 'out'])
        MaskedArray.sum.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.sum.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.sum.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.sum.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.sum.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.sum.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.sum', ['axis', 'dtype', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'sum', localization, ['axis', 'dtype', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'sum(...)' code ##################

        str_146555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4815, (-1)), 'str', "\n        Return the sum of the array elements over the given axis.\n        Masked elements are set to 0 internally.\n\n        Parameters\n        ----------\n        axis : {None, -1, int}, optional\n            Axis along which the sum is computed. The default\n            (`axis` = None) is to compute over the flattened array.\n        dtype : {None, dtype}, optional\n            Determines the type of the returned array and of the accumulator\n            where the elements are summed. If dtype has the value None and\n            the type of a is an integer type of precision less than the default\n            platform integer, then the default platform integer precision is\n            used.  Otherwise, the dtype is the same as that of a.\n        out :  {None, ndarray}, optional\n            Alternative output array in which to place the result. It must\n            have the same shape and buffer length as the expected output\n            but the type will be cast if necessary.\n\n        Returns\n        -------\n        sum_along_axis : MaskedArray or scalar\n            An array with the same shape as self, with the specified\n            axis removed.   If self is a 0-d array, or if `axis` is None, a scalar\n            is returned.  If an output array is specified, a reference to\n            `out` is returned.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print(x)\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> print(x.sum())\n        25\n        >>> print(x.sum(axis=1))\n        [4 5 16]\n        >>> print(x.sum(axis=0))\n        [8 5 12]\n        >>> print(type(x.sum(axis=0, dtype=np.int64)[0]))\n        <type 'numpy.int64'>\n\n        ")
        
        # Assigning a Attribute to a Name (line 4816):
        
        # Assigning a Attribute to a Name (line 4816):
        # Getting the type of 'self' (line 4816)
        self_146556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4816, 16), 'self')
        # Obtaining the member '_mask' of a type (line 4816)
        _mask_146557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4816, 16), self_146556, '_mask')
        # Assigning a type to the variable '_mask' (line 4816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4816, 8), '_mask', _mask_146557)
        
        # Assigning a Call to a Name (line 4817):
        
        # Assigning a Call to a Name (line 4817):
        
        # Call to _check_mask_axis(...): (line 4817)
        # Processing the call arguments (line 4817)
        # Getting the type of '_mask' (line 4817)
        _mask_146559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4817, 35), '_mask', False)
        # Getting the type of 'axis' (line 4817)
        axis_146560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4817, 42), 'axis', False)
        # Processing the call keyword arguments (line 4817)
        kwargs_146561 = {}
        # Getting the type of '_check_mask_axis' (line 4817)
        _check_mask_axis_146558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4817, 18), '_check_mask_axis', False)
        # Calling _check_mask_axis(args, kwargs) (line 4817)
        _check_mask_axis_call_result_146562 = invoke(stypy.reporting.localization.Localization(__file__, 4817, 18), _check_mask_axis_146558, *[_mask_146559, axis_146560], **kwargs_146561)
        
        # Assigning a type to the variable 'newmask' (line 4817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4817, 8), 'newmask', _check_mask_axis_call_result_146562)
        
        # Type idiom detected: calculating its left and rigth part (line 4819)
        # Getting the type of 'out' (line 4819)
        out_146563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4819, 11), 'out')
        # Getting the type of 'None' (line 4819)
        None_146564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4819, 18), 'None')
        
        (may_be_146565, more_types_in_union_146566) = may_be_none(out_146563, None_146564)

        if may_be_146565:

            if more_types_in_union_146566:
                # Runtime conditional SSA (line 4819)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 4820):
            
            # Assigning a Call to a Name (line 4820):
            
            # Call to sum(...): (line 4820)
            # Processing the call arguments (line 4820)
            # Getting the type of 'axis' (line 4820)
            axis_146573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4820, 40), 'axis', False)
            # Processing the call keyword arguments (line 4820)
            # Getting the type of 'dtype' (line 4820)
            dtype_146574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4820, 52), 'dtype', False)
            keyword_146575 = dtype_146574
            kwargs_146576 = {'dtype': keyword_146575}
            
            # Call to filled(...): (line 4820)
            # Processing the call arguments (line 4820)
            int_146569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4820, 33), 'int')
            # Processing the call keyword arguments (line 4820)
            kwargs_146570 = {}
            # Getting the type of 'self' (line 4820)
            self_146567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4820, 21), 'self', False)
            # Obtaining the member 'filled' of a type (line 4820)
            filled_146568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4820, 21), self_146567, 'filled')
            # Calling filled(args, kwargs) (line 4820)
            filled_call_result_146571 = invoke(stypy.reporting.localization.Localization(__file__, 4820, 21), filled_146568, *[int_146569], **kwargs_146570)
            
            # Obtaining the member 'sum' of a type (line 4820)
            sum_146572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4820, 21), filled_call_result_146571, 'sum')
            # Calling sum(args, kwargs) (line 4820)
            sum_call_result_146577 = invoke(stypy.reporting.localization.Localization(__file__, 4820, 21), sum_146572, *[axis_146573], **kwargs_146576)
            
            # Assigning a type to the variable 'result' (line 4820)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4820, 12), 'result', sum_call_result_146577)
            
            # Assigning a Call to a Name (line 4821):
            
            # Assigning a Call to a Name (line 4821):
            
            # Call to getattr(...): (line 4821)
            # Processing the call arguments (line 4821)
            # Getting the type of 'result' (line 4821)
            result_146579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4821, 28), 'result', False)
            str_146580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4821, 36), 'str', 'ndim')
            int_146581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4821, 44), 'int')
            # Processing the call keyword arguments (line 4821)
            kwargs_146582 = {}
            # Getting the type of 'getattr' (line 4821)
            getattr_146578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4821, 20), 'getattr', False)
            # Calling getattr(args, kwargs) (line 4821)
            getattr_call_result_146583 = invoke(stypy.reporting.localization.Localization(__file__, 4821, 20), getattr_146578, *[result_146579, str_146580, int_146581], **kwargs_146582)
            
            # Assigning a type to the variable 'rndim' (line 4821)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4821, 12), 'rndim', getattr_call_result_146583)
            
            # Getting the type of 'rndim' (line 4822)
            rndim_146584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4822, 15), 'rndim')
            # Testing the type of an if condition (line 4822)
            if_condition_146585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4822, 12), rndim_146584)
            # Assigning a type to the variable 'if_condition_146585' (line 4822)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4822, 12), 'if_condition_146585', if_condition_146585)
            # SSA begins for if statement (line 4822)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 4823):
            
            # Assigning a Call to a Name (line 4823):
            
            # Call to view(...): (line 4823)
            # Processing the call arguments (line 4823)
            
            # Call to type(...): (line 4823)
            # Processing the call arguments (line 4823)
            # Getting the type of 'self' (line 4823)
            self_146589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4823, 42), 'self', False)
            # Processing the call keyword arguments (line 4823)
            kwargs_146590 = {}
            # Getting the type of 'type' (line 4823)
            type_146588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4823, 37), 'type', False)
            # Calling type(args, kwargs) (line 4823)
            type_call_result_146591 = invoke(stypy.reporting.localization.Localization(__file__, 4823, 37), type_146588, *[self_146589], **kwargs_146590)
            
            # Processing the call keyword arguments (line 4823)
            kwargs_146592 = {}
            # Getting the type of 'result' (line 4823)
            result_146586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4823, 25), 'result', False)
            # Obtaining the member 'view' of a type (line 4823)
            view_146587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4823, 25), result_146586, 'view')
            # Calling view(args, kwargs) (line 4823)
            view_call_result_146593 = invoke(stypy.reporting.localization.Localization(__file__, 4823, 25), view_146587, *[type_call_result_146591], **kwargs_146592)
            
            # Assigning a type to the variable 'result' (line 4823)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4823, 16), 'result', view_call_result_146593)
            
            # Call to __setmask__(...): (line 4824)
            # Processing the call arguments (line 4824)
            # Getting the type of 'newmask' (line 4824)
            newmask_146596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4824, 35), 'newmask', False)
            # Processing the call keyword arguments (line 4824)
            kwargs_146597 = {}
            # Getting the type of 'result' (line 4824)
            result_146594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4824, 16), 'result', False)
            # Obtaining the member '__setmask__' of a type (line 4824)
            setmask___146595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4824, 16), result_146594, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 4824)
            setmask___call_result_146598 = invoke(stypy.reporting.localization.Localization(__file__, 4824, 16), setmask___146595, *[newmask_146596], **kwargs_146597)
            
            # SSA branch for the else part of an if statement (line 4822)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'newmask' (line 4825)
            newmask_146599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4825, 17), 'newmask')
            # Testing the type of an if condition (line 4825)
            if_condition_146600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4825, 17), newmask_146599)
            # Assigning a type to the variable 'if_condition_146600' (line 4825)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4825, 17), 'if_condition_146600', if_condition_146600)
            # SSA begins for if statement (line 4825)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 4826):
            
            # Assigning a Name to a Name (line 4826):
            # Getting the type of 'masked' (line 4826)
            masked_146601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4826, 25), 'masked')
            # Assigning a type to the variable 'result' (line 4826)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4826, 16), 'result', masked_146601)
            # SSA join for if statement (line 4825)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 4822)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'result' (line 4827)
            result_146602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4827, 19), 'result')
            # Assigning a type to the variable 'stypy_return_type' (line 4827)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4827, 12), 'stypy_return_type', result_146602)

            if more_types_in_union_146566:
                # SSA join for if statement (line 4819)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 4829):
        
        # Assigning a Call to a Name (line 4829):
        
        # Call to sum(...): (line 4829)
        # Processing the call arguments (line 4829)
        # Getting the type of 'axis' (line 4829)
        axis_146609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4829, 36), 'axis', False)
        # Processing the call keyword arguments (line 4829)
        # Getting the type of 'dtype' (line 4829)
        dtype_146610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4829, 48), 'dtype', False)
        keyword_146611 = dtype_146610
        # Getting the type of 'out' (line 4829)
        out_146612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4829, 59), 'out', False)
        keyword_146613 = out_146612
        kwargs_146614 = {'dtype': keyword_146611, 'out': keyword_146613}
        
        # Call to filled(...): (line 4829)
        # Processing the call arguments (line 4829)
        int_146605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4829, 29), 'int')
        # Processing the call keyword arguments (line 4829)
        kwargs_146606 = {}
        # Getting the type of 'self' (line 4829)
        self_146603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4829, 17), 'self', False)
        # Obtaining the member 'filled' of a type (line 4829)
        filled_146604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4829, 17), self_146603, 'filled')
        # Calling filled(args, kwargs) (line 4829)
        filled_call_result_146607 = invoke(stypy.reporting.localization.Localization(__file__, 4829, 17), filled_146604, *[int_146605], **kwargs_146606)
        
        # Obtaining the member 'sum' of a type (line 4829)
        sum_146608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4829, 17), filled_call_result_146607, 'sum')
        # Calling sum(args, kwargs) (line 4829)
        sum_call_result_146615 = invoke(stypy.reporting.localization.Localization(__file__, 4829, 17), sum_146608, *[axis_146609], **kwargs_146614)
        
        # Assigning a type to the variable 'result' (line 4829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4829, 8), 'result', sum_call_result_146615)
        
        
        # Call to isinstance(...): (line 4830)
        # Processing the call arguments (line 4830)
        # Getting the type of 'out' (line 4830)
        out_146617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4830, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 4830)
        MaskedArray_146618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4830, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 4830)
        kwargs_146619 = {}
        # Getting the type of 'isinstance' (line 4830)
        isinstance_146616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4830, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 4830)
        isinstance_call_result_146620 = invoke(stypy.reporting.localization.Localization(__file__, 4830, 11), isinstance_146616, *[out_146617, MaskedArray_146618], **kwargs_146619)
        
        # Testing the type of an if condition (line 4830)
        if_condition_146621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4830, 8), isinstance_call_result_146620)
        # Assigning a type to the variable 'if_condition_146621' (line 4830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4830, 8), 'if_condition_146621', if_condition_146621)
        # SSA begins for if statement (line 4830)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4831):
        
        # Assigning a Call to a Name (line 4831):
        
        # Call to getattr(...): (line 4831)
        # Processing the call arguments (line 4831)
        # Getting the type of 'out' (line 4831)
        out_146623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4831, 30), 'out', False)
        str_146624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4831, 35), 'str', '_mask')
        # Getting the type of 'nomask' (line 4831)
        nomask_146625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4831, 44), 'nomask', False)
        # Processing the call keyword arguments (line 4831)
        kwargs_146626 = {}
        # Getting the type of 'getattr' (line 4831)
        getattr_146622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4831, 22), 'getattr', False)
        # Calling getattr(args, kwargs) (line 4831)
        getattr_call_result_146627 = invoke(stypy.reporting.localization.Localization(__file__, 4831, 22), getattr_146622, *[out_146623, str_146624, nomask_146625], **kwargs_146626)
        
        # Assigning a type to the variable 'outmask' (line 4831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4831, 12), 'outmask', getattr_call_result_146627)
        
        
        # Getting the type of 'outmask' (line 4832)
        outmask_146628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4832, 16), 'outmask')
        # Getting the type of 'nomask' (line 4832)
        nomask_146629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4832, 27), 'nomask')
        # Applying the binary operator 'is' (line 4832)
        result_is__146630 = python_operator(stypy.reporting.localization.Localization(__file__, 4832, 16), 'is', outmask_146628, nomask_146629)
        
        # Testing the type of an if condition (line 4832)
        if_condition_146631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4832, 12), result_is__146630)
        # Assigning a type to the variable 'if_condition_146631' (line 4832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4832, 12), 'if_condition_146631', if_condition_146631)
        # SSA begins for if statement (line 4832)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 4833):
        
        # Call to make_mask_none(...): (line 4833)
        # Processing the call arguments (line 4833)
        # Getting the type of 'out' (line 4833)
        out_146633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4833, 53), 'out', False)
        # Obtaining the member 'shape' of a type (line 4833)
        shape_146634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4833, 53), out_146633, 'shape')
        # Processing the call keyword arguments (line 4833)
        kwargs_146635 = {}
        # Getting the type of 'make_mask_none' (line 4833)
        make_mask_none_146632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4833, 38), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 4833)
        make_mask_none_call_result_146636 = invoke(stypy.reporting.localization.Localization(__file__, 4833, 38), make_mask_none_146632, *[shape_146634], **kwargs_146635)
        
        # Getting the type of 'out' (line 4833)
        out_146637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4833, 26), 'out')
        # Setting the type of the member '_mask' of a type (line 4833)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4833, 26), out_146637, '_mask', make_mask_none_call_result_146636)
        
        # Assigning a Attribute to a Name (line 4833):
        # Getting the type of 'out' (line 4833)
        out_146638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4833, 26), 'out')
        # Obtaining the member '_mask' of a type (line 4833)
        _mask_146639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4833, 26), out_146638, '_mask')
        # Assigning a type to the variable 'outmask' (line 4833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4833, 16), 'outmask', _mask_146639)
        # SSA join for if statement (line 4832)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 4834):
        
        # Assigning a Name to a Attribute (line 4834):
        # Getting the type of 'newmask' (line 4834)
        newmask_146640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4834, 27), 'newmask')
        # Getting the type of 'outmask' (line 4834)
        outmask_146641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4834, 12), 'outmask')
        # Setting the type of the member 'flat' of a type (line 4834)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4834, 12), outmask_146641, 'flat', newmask_146640)
        # SSA join for if statement (line 4830)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 4835)
        out_146642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4835, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 4835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4835, 8), 'stypy_return_type', out_146642)
        
        # ################# End of 'sum(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'sum' in the type store
        # Getting the type of 'stypy_return_type' (line 4770)
        stypy_return_type_146643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4770, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146643)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'sum'
        return stypy_return_type_146643


    @norecursion
    def cumsum(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4837)
        None_146644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4837, 26), 'None')
        # Getting the type of 'None' (line 4837)
        None_146645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4837, 38), 'None')
        # Getting the type of 'None' (line 4837)
        None_146646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4837, 48), 'None')
        defaults = [None_146644, None_146645, None_146646]
        # Create a new context for function 'cumsum'
        module_type_store = module_type_store.open_function_context('cumsum', 4837, 4, False)
        # Assigning a type to the variable 'self' (line 4838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4838, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.cumsum.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.cumsum.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.cumsum.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.cumsum.__dict__.__setitem__('stypy_function_name', 'MaskedArray.cumsum')
        MaskedArray.cumsum.__dict__.__setitem__('stypy_param_names_list', ['axis', 'dtype', 'out'])
        MaskedArray.cumsum.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.cumsum.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.cumsum.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.cumsum.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.cumsum.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.cumsum.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.cumsum', ['axis', 'dtype', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cumsum', localization, ['axis', 'dtype', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cumsum(...)' code ##################

        str_146647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4883, (-1)), 'str', '\n        Return the cumulative sum of the elements along the given axis.\n        The cumulative sum is calculated over the flattened array by\n        default, otherwise over the specified axis.\n\n        Masked values are set to 0 internally during the computation.\n        However, their position is saved, and the result will be masked at\n        the same locations.\n\n        Parameters\n        ----------\n        axis : {None, -1, int}, optional\n            Axis along which the sum is computed. The default (`axis` = None) is to\n            compute over the flattened array. `axis` may be negative, in which case\n            it counts from the   last to the first axis.\n        dtype : {None, dtype}, optional\n            Type of the returned array and of the accumulator in which the\n            elements are summed.  If `dtype` is not specified, it defaults\n            to the dtype of `a`, unless `a` has an integer dtype with a\n            precision less than that of the default platform integer.  In\n            that case, the default platform integer is used.\n        out : ndarray, optional\n            Alternative output array in which to place the result. It must\n            have the same shape and buffer length as the expected output\n            but the type will be cast if necessary.\n\n        Returns\n        -------\n        cumsum : ndarray.\n            A new array holding the result is returned unless ``out`` is\n            specified, in which case a reference to ``out`` is returned.\n\n        Notes\n        -----\n        The mask is lost if `out` is not a valid :class:`MaskedArray` !\n\n        Arithmetic is modular when using integer types, and no error is\n        raised on overflow.\n\n        Examples\n        --------\n        >>> marr = np.ma.array(np.arange(10), mask=[0,0,0,1,1,1,0,0,0,0])\n        >>> print(marr.cumsum())\n        [0 1 3 -- -- -- 9 16 24 33]\n\n        ')
        
        # Assigning a Call to a Name (line 4884):
        
        # Assigning a Call to a Name (line 4884):
        
        # Call to cumsum(...): (line 4884)
        # Processing the call keyword arguments (line 4884)
        # Getting the type of 'axis' (line 4884)
        axis_146654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 44), 'axis', False)
        keyword_146655 = axis_146654
        # Getting the type of 'dtype' (line 4884)
        dtype_146656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 56), 'dtype', False)
        keyword_146657 = dtype_146656
        # Getting the type of 'out' (line 4884)
        out_146658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 67), 'out', False)
        keyword_146659 = out_146658
        kwargs_146660 = {'dtype': keyword_146657, 'out': keyword_146659, 'axis': keyword_146655}
        
        # Call to filled(...): (line 4884)
        # Processing the call arguments (line 4884)
        int_146650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4884, 29), 'int')
        # Processing the call keyword arguments (line 4884)
        kwargs_146651 = {}
        # Getting the type of 'self' (line 4884)
        self_146648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4884, 17), 'self', False)
        # Obtaining the member 'filled' of a type (line 4884)
        filled_146649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4884, 17), self_146648, 'filled')
        # Calling filled(args, kwargs) (line 4884)
        filled_call_result_146652 = invoke(stypy.reporting.localization.Localization(__file__, 4884, 17), filled_146649, *[int_146650], **kwargs_146651)
        
        # Obtaining the member 'cumsum' of a type (line 4884)
        cumsum_146653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4884, 17), filled_call_result_146652, 'cumsum')
        # Calling cumsum(args, kwargs) (line 4884)
        cumsum_call_result_146661 = invoke(stypy.reporting.localization.Localization(__file__, 4884, 17), cumsum_146653, *[], **kwargs_146660)
        
        # Assigning a type to the variable 'result' (line 4884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4884, 8), 'result', cumsum_call_result_146661)
        
        # Type idiom detected: calculating its left and rigth part (line 4885)
        # Getting the type of 'out' (line 4885)
        out_146662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4885, 8), 'out')
        # Getting the type of 'None' (line 4885)
        None_146663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4885, 22), 'None')
        
        (may_be_146664, more_types_in_union_146665) = may_not_be_none(out_146662, None_146663)

        if may_be_146664:

            if more_types_in_union_146665:
                # Runtime conditional SSA (line 4885)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Call to isinstance(...): (line 4886)
            # Processing the call arguments (line 4886)
            # Getting the type of 'out' (line 4886)
            out_146667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4886, 26), 'out', False)
            # Getting the type of 'MaskedArray' (line 4886)
            MaskedArray_146668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4886, 31), 'MaskedArray', False)
            # Processing the call keyword arguments (line 4886)
            kwargs_146669 = {}
            # Getting the type of 'isinstance' (line 4886)
            isinstance_146666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4886, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 4886)
            isinstance_call_result_146670 = invoke(stypy.reporting.localization.Localization(__file__, 4886, 15), isinstance_146666, *[out_146667, MaskedArray_146668], **kwargs_146669)
            
            # Testing the type of an if condition (line 4886)
            if_condition_146671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4886, 12), isinstance_call_result_146670)
            # Assigning a type to the variable 'if_condition_146671' (line 4886)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4886, 12), 'if_condition_146671', if_condition_146671)
            # SSA begins for if statement (line 4886)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __setmask__(...): (line 4887)
            # Processing the call arguments (line 4887)
            # Getting the type of 'self' (line 4887)
            self_146674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4887, 32), 'self', False)
            # Obtaining the member 'mask' of a type (line 4887)
            mask_146675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4887, 32), self_146674, 'mask')
            # Processing the call keyword arguments (line 4887)
            kwargs_146676 = {}
            # Getting the type of 'out' (line 4887)
            out_146672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4887, 16), 'out', False)
            # Obtaining the member '__setmask__' of a type (line 4887)
            setmask___146673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4887, 16), out_146672, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 4887)
            setmask___call_result_146677 = invoke(stypy.reporting.localization.Localization(__file__, 4887, 16), setmask___146673, *[mask_146675], **kwargs_146676)
            
            # SSA join for if statement (line 4886)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'out' (line 4888)
            out_146678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4888, 19), 'out')
            # Assigning a type to the variable 'stypy_return_type' (line 4888)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4888, 12), 'stypy_return_type', out_146678)

            if more_types_in_union_146665:
                # SSA join for if statement (line 4885)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 4889):
        
        # Assigning a Call to a Name (line 4889):
        
        # Call to view(...): (line 4889)
        # Processing the call arguments (line 4889)
        
        # Call to type(...): (line 4889)
        # Processing the call arguments (line 4889)
        # Getting the type of 'self' (line 4889)
        self_146682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4889, 34), 'self', False)
        # Processing the call keyword arguments (line 4889)
        kwargs_146683 = {}
        # Getting the type of 'type' (line 4889)
        type_146681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4889, 29), 'type', False)
        # Calling type(args, kwargs) (line 4889)
        type_call_result_146684 = invoke(stypy.reporting.localization.Localization(__file__, 4889, 29), type_146681, *[self_146682], **kwargs_146683)
        
        # Processing the call keyword arguments (line 4889)
        kwargs_146685 = {}
        # Getting the type of 'result' (line 4889)
        result_146679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4889, 17), 'result', False)
        # Obtaining the member 'view' of a type (line 4889)
        view_146680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4889, 17), result_146679, 'view')
        # Calling view(args, kwargs) (line 4889)
        view_call_result_146686 = invoke(stypy.reporting.localization.Localization(__file__, 4889, 17), view_146680, *[type_call_result_146684], **kwargs_146685)
        
        # Assigning a type to the variable 'result' (line 4889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4889, 8), 'result', view_call_result_146686)
        
        # Call to __setmask__(...): (line 4890)
        # Processing the call arguments (line 4890)
        # Getting the type of 'self' (line 4890)
        self_146689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4890, 27), 'self', False)
        # Obtaining the member '_mask' of a type (line 4890)
        _mask_146690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4890, 27), self_146689, '_mask')
        # Processing the call keyword arguments (line 4890)
        kwargs_146691 = {}
        # Getting the type of 'result' (line 4890)
        result_146687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4890, 8), 'result', False)
        # Obtaining the member '__setmask__' of a type (line 4890)
        setmask___146688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4890, 8), result_146687, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 4890)
        setmask___call_result_146692 = invoke(stypy.reporting.localization.Localization(__file__, 4890, 8), setmask___146688, *[_mask_146690], **kwargs_146691)
        
        # Getting the type of 'result' (line 4891)
        result_146693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4891, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 4891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4891, 8), 'stypy_return_type', result_146693)
        
        # ################# End of 'cumsum(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cumsum' in the type store
        # Getting the type of 'stypy_return_type' (line 4837)
        stypy_return_type_146694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4837, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146694)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cumsum'
        return stypy_return_type_146694


    @norecursion
    def prod(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4893)
        None_146695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4893, 24), 'None')
        # Getting the type of 'None' (line 4893)
        None_146696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4893, 36), 'None')
        # Getting the type of 'None' (line 4893)
        None_146697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4893, 46), 'None')
        defaults = [None_146695, None_146696, None_146697]
        # Create a new context for function 'prod'
        module_type_store = module_type_store.open_function_context('prod', 4893, 4, False)
        # Assigning a type to the variable 'self' (line 4894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4894, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.prod.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.prod.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.prod.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.prod.__dict__.__setitem__('stypy_function_name', 'MaskedArray.prod')
        MaskedArray.prod.__dict__.__setitem__('stypy_param_names_list', ['axis', 'dtype', 'out'])
        MaskedArray.prod.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.prod.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.prod.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.prod.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.prod.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.prod.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.prod', ['axis', 'dtype', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'prod', localization, ['axis', 'dtype', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'prod(...)' code ##################

        str_146698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4941, (-1)), 'str', '\n        Return the product of the array elements over the given axis.\n        Masked elements are set to 1 internally for computation.\n\n        Parameters\n        ----------\n        axis : {None, int}, optional\n            Axis over which the product is taken. If None is used, then the\n            product is over all the array elements.\n        dtype : {None, dtype}, optional\n            Determines the type of the returned array and of the accumulator\n            where the elements are multiplied. If ``dtype`` has the value ``None``\n            and the type of a is an integer type of precision less than the default\n            platform integer, then the default platform integer precision is\n            used.  Otherwise, the dtype is the same as that of a.\n        out : {None, array}, optional\n            Alternative output array in which to place the result. It must have\n            the same shape as the expected output but the type will be cast if\n            necessary.\n\n        Returns\n        -------\n        product_along_axis : {array, scalar}, see dtype parameter above.\n            Returns an array whose shape is the same as a with the specified\n            axis removed. Returns a 0d array when a is 1d or axis=None.\n            Returns a reference to the specified output array if specified.\n\n        See Also\n        --------\n        prod : equivalent function\n\n        Notes\n        -----\n        Arithmetic is modular when using integer types, and no error is raised\n        on overflow.\n\n        Examples\n        --------\n        >>> np.prod([1.,2.])\n        2.0\n        >>> np.prod([1.,2.], dtype=np.int32)\n        2\n        >>> np.prod([[1.,2.],[3.,4.]])\n        24.0\n        >>> np.prod([[1.,2.],[3.,4.]], axis=1)\n        array([  2.,  12.])\n\n        ')
        
        # Assigning a Attribute to a Name (line 4942):
        
        # Assigning a Attribute to a Name (line 4942):
        # Getting the type of 'self' (line 4942)
        self_146699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4942, 16), 'self')
        # Obtaining the member '_mask' of a type (line 4942)
        _mask_146700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4942, 16), self_146699, '_mask')
        # Assigning a type to the variable '_mask' (line 4942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4942, 8), '_mask', _mask_146700)
        
        # Assigning a Call to a Name (line 4943):
        
        # Assigning a Call to a Name (line 4943):
        
        # Call to _check_mask_axis(...): (line 4943)
        # Processing the call arguments (line 4943)
        # Getting the type of '_mask' (line 4943)
        _mask_146702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4943, 35), '_mask', False)
        # Getting the type of 'axis' (line 4943)
        axis_146703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4943, 42), 'axis', False)
        # Processing the call keyword arguments (line 4943)
        kwargs_146704 = {}
        # Getting the type of '_check_mask_axis' (line 4943)
        _check_mask_axis_146701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4943, 18), '_check_mask_axis', False)
        # Calling _check_mask_axis(args, kwargs) (line 4943)
        _check_mask_axis_call_result_146705 = invoke(stypy.reporting.localization.Localization(__file__, 4943, 18), _check_mask_axis_146701, *[_mask_146702, axis_146703], **kwargs_146704)
        
        # Assigning a type to the variable 'newmask' (line 4943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4943, 8), 'newmask', _check_mask_axis_call_result_146705)
        
        # Type idiom detected: calculating its left and rigth part (line 4945)
        # Getting the type of 'out' (line 4945)
        out_146706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4945, 11), 'out')
        # Getting the type of 'None' (line 4945)
        None_146707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4945, 18), 'None')
        
        (may_be_146708, more_types_in_union_146709) = may_be_none(out_146706, None_146707)

        if may_be_146708:

            if more_types_in_union_146709:
                # Runtime conditional SSA (line 4945)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 4946):
            
            # Assigning a Call to a Name (line 4946):
            
            # Call to prod(...): (line 4946)
            # Processing the call arguments (line 4946)
            # Getting the type of 'axis' (line 4946)
            axis_146716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4946, 41), 'axis', False)
            # Processing the call keyword arguments (line 4946)
            # Getting the type of 'dtype' (line 4946)
            dtype_146717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4946, 53), 'dtype', False)
            keyword_146718 = dtype_146717
            kwargs_146719 = {'dtype': keyword_146718}
            
            # Call to filled(...): (line 4946)
            # Processing the call arguments (line 4946)
            int_146712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4946, 33), 'int')
            # Processing the call keyword arguments (line 4946)
            kwargs_146713 = {}
            # Getting the type of 'self' (line 4946)
            self_146710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4946, 21), 'self', False)
            # Obtaining the member 'filled' of a type (line 4946)
            filled_146711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4946, 21), self_146710, 'filled')
            # Calling filled(args, kwargs) (line 4946)
            filled_call_result_146714 = invoke(stypy.reporting.localization.Localization(__file__, 4946, 21), filled_146711, *[int_146712], **kwargs_146713)
            
            # Obtaining the member 'prod' of a type (line 4946)
            prod_146715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4946, 21), filled_call_result_146714, 'prod')
            # Calling prod(args, kwargs) (line 4946)
            prod_call_result_146720 = invoke(stypy.reporting.localization.Localization(__file__, 4946, 21), prod_146715, *[axis_146716], **kwargs_146719)
            
            # Assigning a type to the variable 'result' (line 4946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4946, 12), 'result', prod_call_result_146720)
            
            # Assigning a Call to a Name (line 4947):
            
            # Assigning a Call to a Name (line 4947):
            
            # Call to getattr(...): (line 4947)
            # Processing the call arguments (line 4947)
            # Getting the type of 'result' (line 4947)
            result_146722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4947, 28), 'result', False)
            str_146723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4947, 36), 'str', 'ndim')
            int_146724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4947, 44), 'int')
            # Processing the call keyword arguments (line 4947)
            kwargs_146725 = {}
            # Getting the type of 'getattr' (line 4947)
            getattr_146721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4947, 20), 'getattr', False)
            # Calling getattr(args, kwargs) (line 4947)
            getattr_call_result_146726 = invoke(stypy.reporting.localization.Localization(__file__, 4947, 20), getattr_146721, *[result_146722, str_146723, int_146724], **kwargs_146725)
            
            # Assigning a type to the variable 'rndim' (line 4947)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4947, 12), 'rndim', getattr_call_result_146726)
            
            # Getting the type of 'rndim' (line 4948)
            rndim_146727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4948, 15), 'rndim')
            # Testing the type of an if condition (line 4948)
            if_condition_146728 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4948, 12), rndim_146727)
            # Assigning a type to the variable 'if_condition_146728' (line 4948)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4948, 12), 'if_condition_146728', if_condition_146728)
            # SSA begins for if statement (line 4948)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 4949):
            
            # Assigning a Call to a Name (line 4949):
            
            # Call to view(...): (line 4949)
            # Processing the call arguments (line 4949)
            
            # Call to type(...): (line 4949)
            # Processing the call arguments (line 4949)
            # Getting the type of 'self' (line 4949)
            self_146732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4949, 42), 'self', False)
            # Processing the call keyword arguments (line 4949)
            kwargs_146733 = {}
            # Getting the type of 'type' (line 4949)
            type_146731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4949, 37), 'type', False)
            # Calling type(args, kwargs) (line 4949)
            type_call_result_146734 = invoke(stypy.reporting.localization.Localization(__file__, 4949, 37), type_146731, *[self_146732], **kwargs_146733)
            
            # Processing the call keyword arguments (line 4949)
            kwargs_146735 = {}
            # Getting the type of 'result' (line 4949)
            result_146729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4949, 25), 'result', False)
            # Obtaining the member 'view' of a type (line 4949)
            view_146730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4949, 25), result_146729, 'view')
            # Calling view(args, kwargs) (line 4949)
            view_call_result_146736 = invoke(stypy.reporting.localization.Localization(__file__, 4949, 25), view_146730, *[type_call_result_146734], **kwargs_146735)
            
            # Assigning a type to the variable 'result' (line 4949)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4949, 16), 'result', view_call_result_146736)
            
            # Call to __setmask__(...): (line 4950)
            # Processing the call arguments (line 4950)
            # Getting the type of 'newmask' (line 4950)
            newmask_146739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4950, 35), 'newmask', False)
            # Processing the call keyword arguments (line 4950)
            kwargs_146740 = {}
            # Getting the type of 'result' (line 4950)
            result_146737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4950, 16), 'result', False)
            # Obtaining the member '__setmask__' of a type (line 4950)
            setmask___146738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4950, 16), result_146737, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 4950)
            setmask___call_result_146741 = invoke(stypy.reporting.localization.Localization(__file__, 4950, 16), setmask___146738, *[newmask_146739], **kwargs_146740)
            
            # SSA branch for the else part of an if statement (line 4948)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'newmask' (line 4951)
            newmask_146742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4951, 17), 'newmask')
            # Testing the type of an if condition (line 4951)
            if_condition_146743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4951, 17), newmask_146742)
            # Assigning a type to the variable 'if_condition_146743' (line 4951)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4951, 17), 'if_condition_146743', if_condition_146743)
            # SSA begins for if statement (line 4951)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 4952):
            
            # Assigning a Name to a Name (line 4952):
            # Getting the type of 'masked' (line 4952)
            masked_146744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4952, 25), 'masked')
            # Assigning a type to the variable 'result' (line 4952)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4952, 16), 'result', masked_146744)
            # SSA join for if statement (line 4951)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 4948)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'result' (line 4953)
            result_146745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4953, 19), 'result')
            # Assigning a type to the variable 'stypy_return_type' (line 4953)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4953, 12), 'stypy_return_type', result_146745)

            if more_types_in_union_146709:
                # SSA join for if statement (line 4945)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 4955):
        
        # Assigning a Call to a Name (line 4955):
        
        # Call to prod(...): (line 4955)
        # Processing the call arguments (line 4955)
        # Getting the type of 'axis' (line 4955)
        axis_146752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4955, 37), 'axis', False)
        # Processing the call keyword arguments (line 4955)
        # Getting the type of 'dtype' (line 4955)
        dtype_146753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4955, 49), 'dtype', False)
        keyword_146754 = dtype_146753
        # Getting the type of 'out' (line 4955)
        out_146755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4955, 60), 'out', False)
        keyword_146756 = out_146755
        kwargs_146757 = {'dtype': keyword_146754, 'out': keyword_146756}
        
        # Call to filled(...): (line 4955)
        # Processing the call arguments (line 4955)
        int_146748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4955, 29), 'int')
        # Processing the call keyword arguments (line 4955)
        kwargs_146749 = {}
        # Getting the type of 'self' (line 4955)
        self_146746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4955, 17), 'self', False)
        # Obtaining the member 'filled' of a type (line 4955)
        filled_146747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4955, 17), self_146746, 'filled')
        # Calling filled(args, kwargs) (line 4955)
        filled_call_result_146750 = invoke(stypy.reporting.localization.Localization(__file__, 4955, 17), filled_146747, *[int_146748], **kwargs_146749)
        
        # Obtaining the member 'prod' of a type (line 4955)
        prod_146751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4955, 17), filled_call_result_146750, 'prod')
        # Calling prod(args, kwargs) (line 4955)
        prod_call_result_146758 = invoke(stypy.reporting.localization.Localization(__file__, 4955, 17), prod_146751, *[axis_146752], **kwargs_146757)
        
        # Assigning a type to the variable 'result' (line 4955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4955, 8), 'result', prod_call_result_146758)
        
        
        # Call to isinstance(...): (line 4956)
        # Processing the call arguments (line 4956)
        # Getting the type of 'out' (line 4956)
        out_146760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 4956)
        MaskedArray_146761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 4956)
        kwargs_146762 = {}
        # Getting the type of 'isinstance' (line 4956)
        isinstance_146759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4956, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 4956)
        isinstance_call_result_146763 = invoke(stypy.reporting.localization.Localization(__file__, 4956, 11), isinstance_146759, *[out_146760, MaskedArray_146761], **kwargs_146762)
        
        # Testing the type of an if condition (line 4956)
        if_condition_146764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4956, 8), isinstance_call_result_146763)
        # Assigning a type to the variable 'if_condition_146764' (line 4956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4956, 8), 'if_condition_146764', if_condition_146764)
        # SSA begins for if statement (line 4956)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4957):
        
        # Assigning a Call to a Name (line 4957):
        
        # Call to getattr(...): (line 4957)
        # Processing the call arguments (line 4957)
        # Getting the type of 'out' (line 4957)
        out_146766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4957, 30), 'out', False)
        str_146767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4957, 35), 'str', '_mask')
        # Getting the type of 'nomask' (line 4957)
        nomask_146768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4957, 44), 'nomask', False)
        # Processing the call keyword arguments (line 4957)
        kwargs_146769 = {}
        # Getting the type of 'getattr' (line 4957)
        getattr_146765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4957, 22), 'getattr', False)
        # Calling getattr(args, kwargs) (line 4957)
        getattr_call_result_146770 = invoke(stypy.reporting.localization.Localization(__file__, 4957, 22), getattr_146765, *[out_146766, str_146767, nomask_146768], **kwargs_146769)
        
        # Assigning a type to the variable 'outmask' (line 4957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4957, 12), 'outmask', getattr_call_result_146770)
        
        
        # Getting the type of 'outmask' (line 4958)
        outmask_146771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4958, 16), 'outmask')
        # Getting the type of 'nomask' (line 4958)
        nomask_146772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4958, 27), 'nomask')
        # Applying the binary operator 'is' (line 4958)
        result_is__146773 = python_operator(stypy.reporting.localization.Localization(__file__, 4958, 16), 'is', outmask_146771, nomask_146772)
        
        # Testing the type of an if condition (line 4958)
        if_condition_146774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4958, 12), result_is__146773)
        # Assigning a type to the variable 'if_condition_146774' (line 4958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4958, 12), 'if_condition_146774', if_condition_146774)
        # SSA begins for if statement (line 4958)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 4959):
        
        # Call to make_mask_none(...): (line 4959)
        # Processing the call arguments (line 4959)
        # Getting the type of 'out' (line 4959)
        out_146776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4959, 53), 'out', False)
        # Obtaining the member 'shape' of a type (line 4959)
        shape_146777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4959, 53), out_146776, 'shape')
        # Processing the call keyword arguments (line 4959)
        kwargs_146778 = {}
        # Getting the type of 'make_mask_none' (line 4959)
        make_mask_none_146775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4959, 38), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 4959)
        make_mask_none_call_result_146779 = invoke(stypy.reporting.localization.Localization(__file__, 4959, 38), make_mask_none_146775, *[shape_146777], **kwargs_146778)
        
        # Getting the type of 'out' (line 4959)
        out_146780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4959, 26), 'out')
        # Setting the type of the member '_mask' of a type (line 4959)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4959, 26), out_146780, '_mask', make_mask_none_call_result_146779)
        
        # Assigning a Attribute to a Name (line 4959):
        # Getting the type of 'out' (line 4959)
        out_146781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4959, 26), 'out')
        # Obtaining the member '_mask' of a type (line 4959)
        _mask_146782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4959, 26), out_146781, '_mask')
        # Assigning a type to the variable 'outmask' (line 4959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4959, 16), 'outmask', _mask_146782)
        # SSA join for if statement (line 4958)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 4960):
        
        # Assigning a Name to a Attribute (line 4960):
        # Getting the type of 'newmask' (line 4960)
        newmask_146783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4960, 27), 'newmask')
        # Getting the type of 'outmask' (line 4960)
        outmask_146784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4960, 12), 'outmask')
        # Setting the type of the member 'flat' of a type (line 4960)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4960, 12), outmask_146784, 'flat', newmask_146783)
        # SSA join for if statement (line 4956)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 4961)
        out_146785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4961, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 4961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4961, 8), 'stypy_return_type', out_146785)
        
        # ################# End of 'prod(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'prod' in the type store
        # Getting the type of 'stypy_return_type' (line 4893)
        stypy_return_type_146786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4893, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146786)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'prod'
        return stypy_return_type_146786

    
    # Assigning a Name to a Name (line 4963):

    @norecursion
    def cumprod(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 4965)
        None_146787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4965, 27), 'None')
        # Getting the type of 'None' (line 4965)
        None_146788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4965, 39), 'None')
        # Getting the type of 'None' (line 4965)
        None_146789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4965, 49), 'None')
        defaults = [None_146787, None_146788, None_146789]
        # Create a new context for function 'cumprod'
        module_type_store = module_type_store.open_function_context('cumprod', 4965, 4, False)
        # Assigning a type to the variable 'self' (line 4966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4966, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.cumprod.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.cumprod.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.cumprod.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.cumprod.__dict__.__setitem__('stypy_function_name', 'MaskedArray.cumprod')
        MaskedArray.cumprod.__dict__.__setitem__('stypy_param_names_list', ['axis', 'dtype', 'out'])
        MaskedArray.cumprod.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.cumprod.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.cumprod.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.cumprod.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.cumprod.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.cumprod.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.cumprod', ['axis', 'dtype', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cumprod', localization, ['axis', 'dtype', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cumprod(...)' code ##################

        str_146790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5004, (-1)), 'str', '\n        Return the cumulative product of the elements along the given axis.\n        The cumulative product is taken over the flattened array by\n        default, otherwise over the specified axis.\n\n        Masked values are set to 1 internally during the computation.\n        However, their position is saved, and the result will be masked at\n        the same locations.\n\n        Parameters\n        ----------\n        axis : {None, -1, int}, optional\n            Axis along which the product is computed. The default\n            (`axis` = None) is to compute over the flattened array.\n        dtype : {None, dtype}, optional\n            Determines the type of the returned array and of the accumulator\n            where the elements are multiplied. If ``dtype`` has the value ``None``\n            and the type of ``a`` is an integer type of precision less than the\n            default platform integer, then the default platform integer precision\n            is used.  Otherwise, the dtype is the same as that of ``a``.\n        out : ndarray, optional\n            Alternative output array in which to place the result. It must\n            have the same shape and buffer length as the expected output\n            but the type will be cast if necessary.\n\n        Returns\n        -------\n        cumprod : ndarray\n            A new array holding the result is returned unless out is specified,\n            in which case a reference to out is returned.\n\n        Notes\n        -----\n        The mask is lost if `out` is not a valid MaskedArray !\n\n        Arithmetic is modular when using integer types, and no error is\n        raised on overflow.\n\n        ')
        
        # Assigning a Call to a Name (line 5005):
        
        # Assigning a Call to a Name (line 5005):
        
        # Call to cumprod(...): (line 5005)
        # Processing the call keyword arguments (line 5005)
        # Getting the type of 'axis' (line 5005)
        axis_146797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5005, 45), 'axis', False)
        keyword_146798 = axis_146797
        # Getting the type of 'dtype' (line 5005)
        dtype_146799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5005, 57), 'dtype', False)
        keyword_146800 = dtype_146799
        # Getting the type of 'out' (line 5005)
        out_146801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5005, 68), 'out', False)
        keyword_146802 = out_146801
        kwargs_146803 = {'dtype': keyword_146800, 'out': keyword_146802, 'axis': keyword_146798}
        
        # Call to filled(...): (line 5005)
        # Processing the call arguments (line 5005)
        int_146793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5005, 29), 'int')
        # Processing the call keyword arguments (line 5005)
        kwargs_146794 = {}
        # Getting the type of 'self' (line 5005)
        self_146791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5005, 17), 'self', False)
        # Obtaining the member 'filled' of a type (line 5005)
        filled_146792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5005, 17), self_146791, 'filled')
        # Calling filled(args, kwargs) (line 5005)
        filled_call_result_146795 = invoke(stypy.reporting.localization.Localization(__file__, 5005, 17), filled_146792, *[int_146793], **kwargs_146794)
        
        # Obtaining the member 'cumprod' of a type (line 5005)
        cumprod_146796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5005, 17), filled_call_result_146795, 'cumprod')
        # Calling cumprod(args, kwargs) (line 5005)
        cumprod_call_result_146804 = invoke(stypy.reporting.localization.Localization(__file__, 5005, 17), cumprod_146796, *[], **kwargs_146803)
        
        # Assigning a type to the variable 'result' (line 5005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5005, 8), 'result', cumprod_call_result_146804)
        
        # Type idiom detected: calculating its left and rigth part (line 5006)
        # Getting the type of 'out' (line 5006)
        out_146805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5006, 8), 'out')
        # Getting the type of 'None' (line 5006)
        None_146806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5006, 22), 'None')
        
        (may_be_146807, more_types_in_union_146808) = may_not_be_none(out_146805, None_146806)

        if may_be_146807:

            if more_types_in_union_146808:
                # Runtime conditional SSA (line 5006)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Call to isinstance(...): (line 5007)
            # Processing the call arguments (line 5007)
            # Getting the type of 'out' (line 5007)
            out_146810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5007, 26), 'out', False)
            # Getting the type of 'MaskedArray' (line 5007)
            MaskedArray_146811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5007, 31), 'MaskedArray', False)
            # Processing the call keyword arguments (line 5007)
            kwargs_146812 = {}
            # Getting the type of 'isinstance' (line 5007)
            isinstance_146809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5007, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 5007)
            isinstance_call_result_146813 = invoke(stypy.reporting.localization.Localization(__file__, 5007, 15), isinstance_146809, *[out_146810, MaskedArray_146811], **kwargs_146812)
            
            # Testing the type of an if condition (line 5007)
            if_condition_146814 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5007, 12), isinstance_call_result_146813)
            # Assigning a type to the variable 'if_condition_146814' (line 5007)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5007, 12), 'if_condition_146814', if_condition_146814)
            # SSA begins for if statement (line 5007)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __setmask__(...): (line 5008)
            # Processing the call arguments (line 5008)
            # Getting the type of 'self' (line 5008)
            self_146817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5008, 32), 'self', False)
            # Obtaining the member '_mask' of a type (line 5008)
            _mask_146818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5008, 32), self_146817, '_mask')
            # Processing the call keyword arguments (line 5008)
            kwargs_146819 = {}
            # Getting the type of 'out' (line 5008)
            out_146815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5008, 16), 'out', False)
            # Obtaining the member '__setmask__' of a type (line 5008)
            setmask___146816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5008, 16), out_146815, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 5008)
            setmask___call_result_146820 = invoke(stypy.reporting.localization.Localization(__file__, 5008, 16), setmask___146816, *[_mask_146818], **kwargs_146819)
            
            # SSA join for if statement (line 5007)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'out' (line 5009)
            out_146821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5009, 19), 'out')
            # Assigning a type to the variable 'stypy_return_type' (line 5009)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5009, 12), 'stypy_return_type', out_146821)

            if more_types_in_union_146808:
                # SSA join for if statement (line 5006)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 5010):
        
        # Assigning a Call to a Name (line 5010):
        
        # Call to view(...): (line 5010)
        # Processing the call arguments (line 5010)
        
        # Call to type(...): (line 5010)
        # Processing the call arguments (line 5010)
        # Getting the type of 'self' (line 5010)
        self_146825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5010, 34), 'self', False)
        # Processing the call keyword arguments (line 5010)
        kwargs_146826 = {}
        # Getting the type of 'type' (line 5010)
        type_146824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5010, 29), 'type', False)
        # Calling type(args, kwargs) (line 5010)
        type_call_result_146827 = invoke(stypy.reporting.localization.Localization(__file__, 5010, 29), type_146824, *[self_146825], **kwargs_146826)
        
        # Processing the call keyword arguments (line 5010)
        kwargs_146828 = {}
        # Getting the type of 'result' (line 5010)
        result_146822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5010, 17), 'result', False)
        # Obtaining the member 'view' of a type (line 5010)
        view_146823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5010, 17), result_146822, 'view')
        # Calling view(args, kwargs) (line 5010)
        view_call_result_146829 = invoke(stypy.reporting.localization.Localization(__file__, 5010, 17), view_146823, *[type_call_result_146827], **kwargs_146828)
        
        # Assigning a type to the variable 'result' (line 5010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5010, 8), 'result', view_call_result_146829)
        
        # Call to __setmask__(...): (line 5011)
        # Processing the call arguments (line 5011)
        # Getting the type of 'self' (line 5011)
        self_146832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5011, 27), 'self', False)
        # Obtaining the member '_mask' of a type (line 5011)
        _mask_146833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5011, 27), self_146832, '_mask')
        # Processing the call keyword arguments (line 5011)
        kwargs_146834 = {}
        # Getting the type of 'result' (line 5011)
        result_146830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5011, 8), 'result', False)
        # Obtaining the member '__setmask__' of a type (line 5011)
        setmask___146831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5011, 8), result_146830, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 5011)
        setmask___call_result_146835 = invoke(stypy.reporting.localization.Localization(__file__, 5011, 8), setmask___146831, *[_mask_146833], **kwargs_146834)
        
        # Getting the type of 'result' (line 5012)
        result_146836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5012, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 5012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5012, 8), 'stypy_return_type', result_146836)
        
        # ################# End of 'cumprod(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cumprod' in the type store
        # Getting the type of 'stypy_return_type' (line 4965)
        stypy_return_type_146837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4965, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146837)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cumprod'
        return stypy_return_type_146837


    @norecursion
    def mean(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5014)
        None_146838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5014, 24), 'None')
        # Getting the type of 'None' (line 5014)
        None_146839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5014, 36), 'None')
        # Getting the type of 'None' (line 5014)
        None_146840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5014, 46), 'None')
        defaults = [None_146838, None_146839, None_146840]
        # Create a new context for function 'mean'
        module_type_store = module_type_store.open_function_context('mean', 5014, 4, False)
        # Assigning a type to the variable 'self' (line 5015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5015, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.mean.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.mean.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.mean.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.mean.__dict__.__setitem__('stypy_function_name', 'MaskedArray.mean')
        MaskedArray.mean.__dict__.__setitem__('stypy_param_names_list', ['axis', 'dtype', 'out'])
        MaskedArray.mean.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.mean.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.mean.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.mean.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.mean.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.mean.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.mean', ['axis', 'dtype', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mean', localization, ['axis', 'dtype', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mean(...)' code ##################

        str_146841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5061, (-1)), 'str', '\n        Returns the average of the array elements.\n\n        Masked entries are ignored.\n        The average is taken over the flattened array by default, otherwise over\n        the specified axis. Refer to `numpy.mean` for the full documentation.\n\n        Parameters\n        ----------\n        a : array_like\n            Array containing numbers whose mean is desired. If `a` is not an\n            array, a conversion is attempted.\n        axis : int, optional\n            Axis along which the means are computed. The default is to compute\n            the mean of the flattened array.\n        dtype : dtype, optional\n            Type to use in computing the mean. For integer inputs, the default\n            is float64; for floating point, inputs it is the same as the input\n            dtype.\n        out : ndarray, optional\n            Alternative output array in which to place the result. It must have\n            the same shape as the expected output but the type will be cast if\n            necessary.\n\n        Returns\n        -------\n        mean : ndarray, see dtype parameter above\n            If `out=None`, returns a new array containing the mean values,\n            otherwise a reference to the output array is returned.\n\n        See Also\n        --------\n        numpy.ma.mean : Equivalent function.\n        numpy.mean : Equivalent function on non-masked arrays.\n        numpy.ma.average: Weighted average.\n\n        Examples\n        --------\n        >>> a = np.ma.array([1,2,3], mask=[False, False, True])\n        >>> a\n        masked_array(data = [1 2 --],\n                     mask = [False False  True],\n               fill_value = 999999)\n        >>> a.mean()\n        1.5\n\n        ')
        
        
        # Getting the type of 'self' (line 5062)
        self_146842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5062, 11), 'self')
        # Obtaining the member '_mask' of a type (line 5062)
        _mask_146843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5062, 11), self_146842, '_mask')
        # Getting the type of 'nomask' (line 5062)
        nomask_146844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5062, 25), 'nomask')
        # Applying the binary operator 'is' (line 5062)
        result_is__146845 = python_operator(stypy.reporting.localization.Localization(__file__, 5062, 11), 'is', _mask_146843, nomask_146844)
        
        # Testing the type of an if condition (line 5062)
        if_condition_146846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5062, 8), result_is__146845)
        # Assigning a type to the variable 'if_condition_146846' (line 5062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5062, 8), 'if_condition_146846', if_condition_146846)
        # SSA begins for if statement (line 5062)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 5063):
        
        # Assigning a Call to a Name (line 5063):
        
        # Call to mean(...): (line 5063)
        # Processing the call keyword arguments (line 5063)
        # Getting the type of 'axis' (line 5063)
        axis_146853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5063, 56), 'axis', False)
        keyword_146854 = axis_146853
        # Getting the type of 'dtype' (line 5063)
        dtype_146855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5063, 68), 'dtype', False)
        keyword_146856 = dtype_146855
        kwargs_146857 = {'dtype': keyword_146856, 'axis': keyword_146854}
        
        # Call to super(...): (line 5063)
        # Processing the call arguments (line 5063)
        # Getting the type of 'MaskedArray' (line 5063)
        MaskedArray_146848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5063, 27), 'MaskedArray', False)
        # Getting the type of 'self' (line 5063)
        self_146849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5063, 40), 'self', False)
        # Processing the call keyword arguments (line 5063)
        kwargs_146850 = {}
        # Getting the type of 'super' (line 5063)
        super_146847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5063, 21), 'super', False)
        # Calling super(args, kwargs) (line 5063)
        super_call_result_146851 = invoke(stypy.reporting.localization.Localization(__file__, 5063, 21), super_146847, *[MaskedArray_146848, self_146849], **kwargs_146850)
        
        # Obtaining the member 'mean' of a type (line 5063)
        mean_146852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5063, 21), super_call_result_146851, 'mean')
        # Calling mean(args, kwargs) (line 5063)
        mean_call_result_146858 = invoke(stypy.reporting.localization.Localization(__file__, 5063, 21), mean_146852, *[], **kwargs_146857)
        
        # Assigning a type to the variable 'result' (line 5063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5063, 12), 'result', mean_call_result_146858)
        # SSA branch for the else part of an if statement (line 5062)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 5065):
        
        # Assigning a Call to a Name (line 5065):
        
        # Call to sum(...): (line 5065)
        # Processing the call keyword arguments (line 5065)
        # Getting the type of 'axis' (line 5065)
        axis_146861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5065, 33), 'axis', False)
        keyword_146862 = axis_146861
        # Getting the type of 'dtype' (line 5065)
        dtype_146863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5065, 45), 'dtype', False)
        keyword_146864 = dtype_146863
        kwargs_146865 = {'dtype': keyword_146864, 'axis': keyword_146862}
        # Getting the type of 'self' (line 5065)
        self_146859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5065, 19), 'self', False)
        # Obtaining the member 'sum' of a type (line 5065)
        sum_146860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5065, 19), self_146859, 'sum')
        # Calling sum(args, kwargs) (line 5065)
        sum_call_result_146866 = invoke(stypy.reporting.localization.Localization(__file__, 5065, 19), sum_146860, *[], **kwargs_146865)
        
        # Assigning a type to the variable 'dsum' (line 5065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5065, 12), 'dsum', sum_call_result_146866)
        
        # Assigning a Call to a Name (line 5066):
        
        # Assigning a Call to a Name (line 5066):
        
        # Call to count(...): (line 5066)
        # Processing the call keyword arguments (line 5066)
        # Getting the type of 'axis' (line 5066)
        axis_146869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5066, 34), 'axis', False)
        keyword_146870 = axis_146869
        kwargs_146871 = {'axis': keyword_146870}
        # Getting the type of 'self' (line 5066)
        self_146867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5066, 18), 'self', False)
        # Obtaining the member 'count' of a type (line 5066)
        count_146868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5066, 18), self_146867, 'count')
        # Calling count(args, kwargs) (line 5066)
        count_call_result_146872 = invoke(stypy.reporting.localization.Localization(__file__, 5066, 18), count_146868, *[], **kwargs_146871)
        
        # Assigning a type to the variable 'cnt' (line 5066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5066, 12), 'cnt', count_call_result_146872)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'cnt' (line 5067)
        cnt_146873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5067, 15), 'cnt')
        # Obtaining the member 'shape' of a type (line 5067)
        shape_146874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5067, 15), cnt_146873, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 5067)
        tuple_146875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5067, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5067)
        
        # Applying the binary operator '==' (line 5067)
        result_eq_146876 = python_operator(stypy.reporting.localization.Localization(__file__, 5067, 15), '==', shape_146874, tuple_146875)
        
        
        # Getting the type of 'cnt' (line 5067)
        cnt_146877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5067, 36), 'cnt')
        int_146878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5067, 43), 'int')
        # Applying the binary operator '==' (line 5067)
        result_eq_146879 = python_operator(stypy.reporting.localization.Localization(__file__, 5067, 36), '==', cnt_146877, int_146878)
        
        # Applying the binary operator 'and' (line 5067)
        result_and_keyword_146880 = python_operator(stypy.reporting.localization.Localization(__file__, 5067, 15), 'and', result_eq_146876, result_eq_146879)
        
        # Testing the type of an if condition (line 5067)
        if_condition_146881 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5067, 12), result_and_keyword_146880)
        # Assigning a type to the variable 'if_condition_146881' (line 5067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5067, 12), 'if_condition_146881', if_condition_146881)
        # SSA begins for if statement (line 5067)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 5068):
        
        # Assigning a Name to a Name (line 5068):
        # Getting the type of 'masked' (line 5068)
        masked_146882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5068, 25), 'masked')
        # Assigning a type to the variable 'result' (line 5068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5068, 16), 'result', masked_146882)
        # SSA branch for the else part of an if statement (line 5067)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 5070):
        
        # Assigning a BinOp to a Name (line 5070):
        # Getting the type of 'dsum' (line 5070)
        dsum_146883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5070, 25), 'dsum')
        float_146884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5070, 32), 'float')
        # Applying the binary operator '*' (line 5070)
        result_mul_146885 = python_operator(stypy.reporting.localization.Localization(__file__, 5070, 25), '*', dsum_146883, float_146884)
        
        # Getting the type of 'cnt' (line 5070)
        cnt_146886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5070, 37), 'cnt')
        # Applying the binary operator 'div' (line 5070)
        result_div_146887 = python_operator(stypy.reporting.localization.Localization(__file__, 5070, 35), 'div', result_mul_146885, cnt_146886)
        
        # Assigning a type to the variable 'result' (line 5070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5070, 16), 'result', result_div_146887)
        # SSA join for if statement (line 5067)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 5062)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 5071)
        # Getting the type of 'out' (line 5071)
        out_146888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 8), 'out')
        # Getting the type of 'None' (line 5071)
        None_146889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5071, 22), 'None')
        
        (may_be_146890, more_types_in_union_146891) = may_not_be_none(out_146888, None_146889)

        if may_be_146890:

            if more_types_in_union_146891:
                # Runtime conditional SSA (line 5071)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 5072):
            
            # Assigning a Name to a Attribute (line 5072):
            # Getting the type of 'result' (line 5072)
            result_146892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5072, 23), 'result')
            # Getting the type of 'out' (line 5072)
            out_146893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5072, 12), 'out')
            # Setting the type of the member 'flat' of a type (line 5072)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5072, 12), out_146893, 'flat', result_146892)
            
            
            # Call to isinstance(...): (line 5073)
            # Processing the call arguments (line 5073)
            # Getting the type of 'out' (line 5073)
            out_146895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5073, 26), 'out', False)
            # Getting the type of 'MaskedArray' (line 5073)
            MaskedArray_146896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5073, 31), 'MaskedArray', False)
            # Processing the call keyword arguments (line 5073)
            kwargs_146897 = {}
            # Getting the type of 'isinstance' (line 5073)
            isinstance_146894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5073, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 5073)
            isinstance_call_result_146898 = invoke(stypy.reporting.localization.Localization(__file__, 5073, 15), isinstance_146894, *[out_146895, MaskedArray_146896], **kwargs_146897)
            
            # Testing the type of an if condition (line 5073)
            if_condition_146899 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5073, 12), isinstance_call_result_146898)
            # Assigning a type to the variable 'if_condition_146899' (line 5073)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5073, 12), 'if_condition_146899', if_condition_146899)
            # SSA begins for if statement (line 5073)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 5074):
            
            # Assigning a Call to a Name (line 5074):
            
            # Call to getattr(...): (line 5074)
            # Processing the call arguments (line 5074)
            # Getting the type of 'out' (line 5074)
            out_146901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5074, 34), 'out', False)
            str_146902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5074, 39), 'str', '_mask')
            # Getting the type of 'nomask' (line 5074)
            nomask_146903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5074, 48), 'nomask', False)
            # Processing the call keyword arguments (line 5074)
            kwargs_146904 = {}
            # Getting the type of 'getattr' (line 5074)
            getattr_146900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5074, 26), 'getattr', False)
            # Calling getattr(args, kwargs) (line 5074)
            getattr_call_result_146905 = invoke(stypy.reporting.localization.Localization(__file__, 5074, 26), getattr_146900, *[out_146901, str_146902, nomask_146903], **kwargs_146904)
            
            # Assigning a type to the variable 'outmask' (line 5074)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5074, 16), 'outmask', getattr_call_result_146905)
            
            
            # Getting the type of 'outmask' (line 5075)
            outmask_146906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5075, 20), 'outmask')
            # Getting the type of 'nomask' (line 5075)
            nomask_146907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5075, 31), 'nomask')
            # Applying the binary operator 'is' (line 5075)
            result_is__146908 = python_operator(stypy.reporting.localization.Localization(__file__, 5075, 20), 'is', outmask_146906, nomask_146907)
            
            # Testing the type of an if condition (line 5075)
            if_condition_146909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5075, 16), result_is__146908)
            # Assigning a type to the variable 'if_condition_146909' (line 5075)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5075, 16), 'if_condition_146909', if_condition_146909)
            # SSA begins for if statement (line 5075)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Multiple assignment of 2 elements.
            
            # Assigning a Call to a Attribute (line 5076):
            
            # Call to make_mask_none(...): (line 5076)
            # Processing the call arguments (line 5076)
            # Getting the type of 'out' (line 5076)
            out_146911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5076, 57), 'out', False)
            # Obtaining the member 'shape' of a type (line 5076)
            shape_146912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5076, 57), out_146911, 'shape')
            # Processing the call keyword arguments (line 5076)
            kwargs_146913 = {}
            # Getting the type of 'make_mask_none' (line 5076)
            make_mask_none_146910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5076, 42), 'make_mask_none', False)
            # Calling make_mask_none(args, kwargs) (line 5076)
            make_mask_none_call_result_146914 = invoke(stypy.reporting.localization.Localization(__file__, 5076, 42), make_mask_none_146910, *[shape_146912], **kwargs_146913)
            
            # Getting the type of 'out' (line 5076)
            out_146915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5076, 30), 'out')
            # Setting the type of the member '_mask' of a type (line 5076)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5076, 30), out_146915, '_mask', make_mask_none_call_result_146914)
            
            # Assigning a Attribute to a Name (line 5076):
            # Getting the type of 'out' (line 5076)
            out_146916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5076, 30), 'out')
            # Obtaining the member '_mask' of a type (line 5076)
            _mask_146917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5076, 30), out_146916, '_mask')
            # Assigning a type to the variable 'outmask' (line 5076)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5076, 20), 'outmask', _mask_146917)
            # SSA join for if statement (line 5075)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 5077):
            
            # Assigning a Call to a Attribute (line 5077):
            
            # Call to getattr(...): (line 5077)
            # Processing the call arguments (line 5077)
            # Getting the type of 'result' (line 5077)
            result_146919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5077, 39), 'result', False)
            str_146920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5077, 47), 'str', '_mask')
            # Getting the type of 'nomask' (line 5077)
            nomask_146921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5077, 56), 'nomask', False)
            # Processing the call keyword arguments (line 5077)
            kwargs_146922 = {}
            # Getting the type of 'getattr' (line 5077)
            getattr_146918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5077, 31), 'getattr', False)
            # Calling getattr(args, kwargs) (line 5077)
            getattr_call_result_146923 = invoke(stypy.reporting.localization.Localization(__file__, 5077, 31), getattr_146918, *[result_146919, str_146920, nomask_146921], **kwargs_146922)
            
            # Getting the type of 'outmask' (line 5077)
            outmask_146924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5077, 16), 'outmask')
            # Setting the type of the member 'flat' of a type (line 5077)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5077, 16), outmask_146924, 'flat', getattr_call_result_146923)
            # SSA join for if statement (line 5073)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'out' (line 5078)
            out_146925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5078, 19), 'out')
            # Assigning a type to the variable 'stypy_return_type' (line 5078)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5078, 12), 'stypy_return_type', out_146925)

            if more_types_in_union_146891:
                # SSA join for if statement (line 5071)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'result' (line 5079)
        result_146926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5079, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 5079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5079, 8), 'stypy_return_type', result_146926)
        
        # ################# End of 'mean(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mean' in the type store
        # Getting the type of 'stypy_return_type' (line 5014)
        stypy_return_type_146927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5014, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146927)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mean'
        return stypy_return_type_146927


    @norecursion
    def anom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5081)
        None_146928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5081, 24), 'None')
        # Getting the type of 'None' (line 5081)
        None_146929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5081, 36), 'None')
        defaults = [None_146928, None_146929]
        # Create a new context for function 'anom'
        module_type_store = module_type_store.open_function_context('anom', 5081, 4, False)
        # Assigning a type to the variable 'self' (line 5082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5082, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.anom.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.anom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.anom.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.anom.__dict__.__setitem__('stypy_function_name', 'MaskedArray.anom')
        MaskedArray.anom.__dict__.__setitem__('stypy_param_names_list', ['axis', 'dtype'])
        MaskedArray.anom.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.anom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.anom.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.anom.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.anom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.anom.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.anom', ['axis', 'dtype'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'anom', localization, ['axis', 'dtype'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'anom(...)' code ##################

        str_146930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5111, (-1)), 'str', '\n        Compute the anomalies (deviations from the arithmetic mean)\n        along the given axis.\n\n        Returns an array of anomalies, with the same shape as the input and\n        where the arithmetic mean is computed along the given axis.\n\n        Parameters\n        ----------\n        axis : int, optional\n            Axis over which the anomalies are taken.\n            The default is to use the mean of the flattened array as reference.\n        dtype : dtype, optional\n            Type to use in computing the variance. For arrays of integer type\n             the default is float32; for arrays of float types it is the same as\n             the array type.\n\n        See Also\n        --------\n        mean : Compute the mean of the array.\n\n        Examples\n        --------\n        >>> a = np.ma.array([1,2,3])\n        >>> a.anom()\n        masked_array(data = [-1.  0.  1.],\n                     mask = False,\n               fill_value = 1e+20)\n\n        ')
        
        # Assigning a Call to a Name (line 5112):
        
        # Assigning a Call to a Name (line 5112):
        
        # Call to mean(...): (line 5112)
        # Processing the call arguments (line 5112)
        # Getting the type of 'axis' (line 5112)
        axis_146933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5112, 22), 'axis', False)
        # Getting the type of 'dtype' (line 5112)
        dtype_146934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5112, 28), 'dtype', False)
        # Processing the call keyword arguments (line 5112)
        kwargs_146935 = {}
        # Getting the type of 'self' (line 5112)
        self_146931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5112, 12), 'self', False)
        # Obtaining the member 'mean' of a type (line 5112)
        mean_146932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5112, 12), self_146931, 'mean')
        # Calling mean(args, kwargs) (line 5112)
        mean_call_result_146936 = invoke(stypy.reporting.localization.Localization(__file__, 5112, 12), mean_146932, *[axis_146933, dtype_146934], **kwargs_146935)
        
        # Assigning a type to the variable 'm' (line 5112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5112, 8), 'm', mean_call_result_146936)
        
        
        # Getting the type of 'm' (line 5113)
        m_146937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5113, 11), 'm')
        # Getting the type of 'masked' (line 5113)
        masked_146938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5113, 16), 'masked')
        # Applying the binary operator 'is' (line 5113)
        result_is__146939 = python_operator(stypy.reporting.localization.Localization(__file__, 5113, 11), 'is', m_146937, masked_146938)
        
        # Testing the type of an if condition (line 5113)
        if_condition_146940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5113, 8), result_is__146939)
        # Assigning a type to the variable 'if_condition_146940' (line 5113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5113, 8), 'if_condition_146940', if_condition_146940)
        # SSA begins for if statement (line 5113)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'm' (line 5114)
        m_146941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5114, 19), 'm')
        # Assigning a type to the variable 'stypy_return_type' (line 5114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5114, 12), 'stypy_return_type', m_146941)
        # SSA join for if statement (line 5113)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'axis' (line 5116)
        axis_146942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5116, 15), 'axis')
        # Applying the 'not' unary operator (line 5116)
        result_not__146943 = python_operator(stypy.reporting.localization.Localization(__file__, 5116, 11), 'not', axis_146942)
        
        # Testing the type of an if condition (line 5116)
        if_condition_146944 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5116, 8), result_not__146943)
        # Assigning a type to the variable 'if_condition_146944' (line 5116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5116, 8), 'if_condition_146944', if_condition_146944)
        # SSA begins for if statement (line 5116)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 5117)
        self_146945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5117, 20), 'self')
        # Getting the type of 'm' (line 5117)
        m_146946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5117, 27), 'm')
        # Applying the binary operator '-' (line 5117)
        result_sub_146947 = python_operator(stypy.reporting.localization.Localization(__file__, 5117, 20), '-', self_146945, m_146946)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5117, 12), 'stypy_return_type', result_sub_146947)
        # SSA branch for the else part of an if statement (line 5116)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 5119)
        self_146948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5119, 20), 'self')
        
        # Call to expand_dims(...): (line 5119)
        # Processing the call arguments (line 5119)
        # Getting the type of 'm' (line 5119)
        m_146950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5119, 39), 'm', False)
        # Getting the type of 'axis' (line 5119)
        axis_146951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5119, 42), 'axis', False)
        # Processing the call keyword arguments (line 5119)
        kwargs_146952 = {}
        # Getting the type of 'expand_dims' (line 5119)
        expand_dims_146949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5119, 27), 'expand_dims', False)
        # Calling expand_dims(args, kwargs) (line 5119)
        expand_dims_call_result_146953 = invoke(stypy.reporting.localization.Localization(__file__, 5119, 27), expand_dims_146949, *[m_146950, axis_146951], **kwargs_146952)
        
        # Applying the binary operator '-' (line 5119)
        result_sub_146954 = python_operator(stypy.reporting.localization.Localization(__file__, 5119, 20), '-', self_146948, expand_dims_call_result_146953)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5119, 12), 'stypy_return_type', result_sub_146954)
        # SSA join for if statement (line 5116)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'anom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'anom' in the type store
        # Getting the type of 'stypy_return_type' (line 5081)
        stypy_return_type_146955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5081, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_146955)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'anom'
        return stypy_return_type_146955


    @norecursion
    def var(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5121)
        None_146956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5121, 23), 'None')
        # Getting the type of 'None' (line 5121)
        None_146957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5121, 35), 'None')
        # Getting the type of 'None' (line 5121)
        None_146958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5121, 45), 'None')
        int_146959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5121, 56), 'int')
        defaults = [None_146956, None_146957, None_146958, int_146959]
        # Create a new context for function 'var'
        module_type_store = module_type_store.open_function_context('var', 5121, 4, False)
        # Assigning a type to the variable 'self' (line 5122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5122, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.var.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.var.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.var.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.var.__dict__.__setitem__('stypy_function_name', 'MaskedArray.var')
        MaskedArray.var.__dict__.__setitem__('stypy_param_names_list', ['axis', 'dtype', 'out', 'ddof'])
        MaskedArray.var.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.var.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.var.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.var.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.var.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.var.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.var', ['axis', 'dtype', 'out', 'ddof'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'var', localization, ['axis', 'dtype', 'out', 'ddof'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'var(...)' code ##################

        str_146960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5122, 8), 'str', '')
        
        
        # Getting the type of 'self' (line 5124)
        self_146961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5124, 11), 'self')
        # Obtaining the member '_mask' of a type (line 5124)
        _mask_146962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5124, 11), self_146961, '_mask')
        # Getting the type of 'nomask' (line 5124)
        nomask_146963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5124, 25), 'nomask')
        # Applying the binary operator 'is' (line 5124)
        result_is__146964 = python_operator(stypy.reporting.localization.Localization(__file__, 5124, 11), 'is', _mask_146962, nomask_146963)
        
        # Testing the type of an if condition (line 5124)
        if_condition_146965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5124, 8), result_is__146964)
        # Assigning a type to the variable 'if_condition_146965' (line 5124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5124, 8), 'if_condition_146965', if_condition_146965)
        # SSA begins for if statement (line 5124)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to var(...): (line 5125)
        # Processing the call keyword arguments (line 5125)
        # Getting the type of 'axis' (line 5125)
        axis_146969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5125, 39), 'axis', False)
        keyword_146970 = axis_146969
        # Getting the type of 'dtype' (line 5125)
        dtype_146971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5125, 51), 'dtype', False)
        keyword_146972 = dtype_146971
        # Getting the type of 'out' (line 5125)
        out_146973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5125, 62), 'out', False)
        keyword_146974 = out_146973
        # Getting the type of 'ddof' (line 5125)
        ddof_146975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5125, 72), 'ddof', False)
        keyword_146976 = ddof_146975
        kwargs_146977 = {'dtype': keyword_146972, 'out': keyword_146974, 'ddof': keyword_146976, 'axis': keyword_146970}
        # Getting the type of 'self' (line 5125)
        self_146966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5125, 19), 'self', False)
        # Obtaining the member '_data' of a type (line 5125)
        _data_146967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5125, 19), self_146966, '_data')
        # Obtaining the member 'var' of a type (line 5125)
        var_146968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5125, 19), _data_146967, 'var')
        # Calling var(args, kwargs) (line 5125)
        var_call_result_146978 = invoke(stypy.reporting.localization.Localization(__file__, 5125, 19), var_146968, *[], **kwargs_146977)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5125, 12), 'stypy_return_type', var_call_result_146978)
        # SSA join for if statement (line 5124)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 5127):
        
        # Assigning a BinOp to a Name (line 5127):
        
        # Call to count(...): (line 5127)
        # Processing the call keyword arguments (line 5127)
        # Getting the type of 'axis' (line 5127)
        axis_146981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5127, 30), 'axis', False)
        keyword_146982 = axis_146981
        kwargs_146983 = {'axis': keyword_146982}
        # Getting the type of 'self' (line 5127)
        self_146979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5127, 14), 'self', False)
        # Obtaining the member 'count' of a type (line 5127)
        count_146980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5127, 14), self_146979, 'count')
        # Calling count(args, kwargs) (line 5127)
        count_call_result_146984 = invoke(stypy.reporting.localization.Localization(__file__, 5127, 14), count_146980, *[], **kwargs_146983)
        
        # Getting the type of 'ddof' (line 5127)
        ddof_146985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5127, 38), 'ddof')
        # Applying the binary operator '-' (line 5127)
        result_sub_146986 = python_operator(stypy.reporting.localization.Localization(__file__, 5127, 14), '-', count_call_result_146984, ddof_146985)
        
        # Assigning a type to the variable 'cnt' (line 5127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5127, 8), 'cnt', result_sub_146986)
        
        # Assigning a Call to a Name (line 5128):
        
        # Assigning a Call to a Name (line 5128):
        
        # Call to anom(...): (line 5128)
        # Processing the call keyword arguments (line 5128)
        # Getting the type of 'axis' (line 5128)
        axis_146989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5128, 31), 'axis', False)
        keyword_146990 = axis_146989
        # Getting the type of 'dtype' (line 5128)
        dtype_146991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5128, 43), 'dtype', False)
        keyword_146992 = dtype_146991
        kwargs_146993 = {'dtype': keyword_146992, 'axis': keyword_146990}
        # Getting the type of 'self' (line 5128)
        self_146987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5128, 16), 'self', False)
        # Obtaining the member 'anom' of a type (line 5128)
        anom_146988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5128, 16), self_146987, 'anom')
        # Calling anom(args, kwargs) (line 5128)
        anom_call_result_146994 = invoke(stypy.reporting.localization.Localization(__file__, 5128, 16), anom_146988, *[], **kwargs_146993)
        
        # Assigning a type to the variable 'danom' (line 5128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5128, 8), 'danom', anom_call_result_146994)
        
        
        # Call to iscomplexobj(...): (line 5129)
        # Processing the call arguments (line 5129)
        # Getting the type of 'self' (line 5129)
        self_146996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5129, 24), 'self', False)
        # Processing the call keyword arguments (line 5129)
        kwargs_146997 = {}
        # Getting the type of 'iscomplexobj' (line 5129)
        iscomplexobj_146995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5129, 11), 'iscomplexobj', False)
        # Calling iscomplexobj(args, kwargs) (line 5129)
        iscomplexobj_call_result_146998 = invoke(stypy.reporting.localization.Localization(__file__, 5129, 11), iscomplexobj_146995, *[self_146996], **kwargs_146997)
        
        # Testing the type of an if condition (line 5129)
        if_condition_146999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5129, 8), iscomplexobj_call_result_146998)
        # Assigning a type to the variable 'if_condition_146999' (line 5129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5129, 8), 'if_condition_146999', if_condition_146999)
        # SSA begins for if statement (line 5129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 5130):
        
        # Assigning a BinOp to a Name (line 5130):
        
        # Call to absolute(...): (line 5130)
        # Processing the call arguments (line 5130)
        # Getting the type of 'danom' (line 5130)
        danom_147002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5130, 35), 'danom', False)
        # Processing the call keyword arguments (line 5130)
        kwargs_147003 = {}
        # Getting the type of 'umath' (line 5130)
        umath_147000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5130, 20), 'umath', False)
        # Obtaining the member 'absolute' of a type (line 5130)
        absolute_147001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5130, 20), umath_147000, 'absolute')
        # Calling absolute(args, kwargs) (line 5130)
        absolute_call_result_147004 = invoke(stypy.reporting.localization.Localization(__file__, 5130, 20), absolute_147001, *[danom_147002], **kwargs_147003)
        
        int_147005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5130, 45), 'int')
        # Applying the binary operator '**' (line 5130)
        result_pow_147006 = python_operator(stypy.reporting.localization.Localization(__file__, 5130, 20), '**', absolute_call_result_147004, int_147005)
        
        # Assigning a type to the variable 'danom' (line 5130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5130, 12), 'danom', result_pow_147006)
        # SSA branch for the else part of an if statement (line 5129)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'danom' (line 5132)
        danom_147007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5132, 12), 'danom')
        # Getting the type of 'danom' (line 5132)
        danom_147008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5132, 21), 'danom')
        # Applying the binary operator '*=' (line 5132)
        result_imul_147009 = python_operator(stypy.reporting.localization.Localization(__file__, 5132, 12), '*=', danom_147007, danom_147008)
        # Assigning a type to the variable 'danom' (line 5132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5132, 12), 'danom', result_imul_147009)
        
        # SSA join for if statement (line 5129)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 5133):
        
        # Assigning a Call to a Name (line 5133):
        
        # Call to view(...): (line 5133)
        # Processing the call arguments (line 5133)
        
        # Call to type(...): (line 5133)
        # Processing the call arguments (line 5133)
        # Getting the type of 'self' (line 5133)
        self_147021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 54), 'self', False)
        # Processing the call keyword arguments (line 5133)
        kwargs_147022 = {}
        # Getting the type of 'type' (line 5133)
        type_147020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 49), 'type', False)
        # Calling type(args, kwargs) (line 5133)
        type_call_result_147023 = invoke(stypy.reporting.localization.Localization(__file__, 5133, 49), type_147020, *[self_147021], **kwargs_147022)
        
        # Processing the call keyword arguments (line 5133)
        kwargs_147024 = {}
        
        # Call to divide(...): (line 5133)
        # Processing the call arguments (line 5133)
        
        # Call to sum(...): (line 5133)
        # Processing the call arguments (line 5133)
        # Getting the type of 'axis' (line 5133)
        axis_147013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 32), 'axis', False)
        # Processing the call keyword arguments (line 5133)
        kwargs_147014 = {}
        # Getting the type of 'danom' (line 5133)
        danom_147011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 22), 'danom', False)
        # Obtaining the member 'sum' of a type (line 5133)
        sum_147012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5133, 22), danom_147011, 'sum')
        # Calling sum(args, kwargs) (line 5133)
        sum_call_result_147015 = invoke(stypy.reporting.localization.Localization(__file__, 5133, 22), sum_147012, *[axis_147013], **kwargs_147014)
        
        # Getting the type of 'cnt' (line 5133)
        cnt_147016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 39), 'cnt', False)
        # Processing the call keyword arguments (line 5133)
        kwargs_147017 = {}
        # Getting the type of 'divide' (line 5133)
        divide_147010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5133, 15), 'divide', False)
        # Calling divide(args, kwargs) (line 5133)
        divide_call_result_147018 = invoke(stypy.reporting.localization.Localization(__file__, 5133, 15), divide_147010, *[sum_call_result_147015, cnt_147016], **kwargs_147017)
        
        # Obtaining the member 'view' of a type (line 5133)
        view_147019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5133, 15), divide_call_result_147018, 'view')
        # Calling view(args, kwargs) (line 5133)
        view_call_result_147025 = invoke(stypy.reporting.localization.Localization(__file__, 5133, 15), view_147019, *[type_call_result_147023], **kwargs_147024)
        
        # Assigning a type to the variable 'dvar' (line 5133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5133, 8), 'dvar', view_call_result_147025)
        
        # Getting the type of 'dvar' (line 5135)
        dvar_147026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5135, 11), 'dvar')
        # Obtaining the member 'ndim' of a type (line 5135)
        ndim_147027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5135, 11), dvar_147026, 'ndim')
        # Testing the type of an if condition (line 5135)
        if_condition_147028 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5135, 8), ndim_147027)
        # Assigning a type to the variable 'if_condition_147028' (line 5135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5135, 8), 'if_condition_147028', if_condition_147028)
        # SSA begins for if statement (line 5135)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 5136):
        
        # Assigning a Call to a Attribute (line 5136):
        
        # Call to mask_or(...): (line 5136)
        # Processing the call arguments (line 5136)
        
        # Call to all(...): (line 5136)
        # Processing the call arguments (line 5136)
        # Getting the type of 'axis' (line 5136)
        axis_147033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5136, 48), 'axis', False)
        # Processing the call keyword arguments (line 5136)
        kwargs_147034 = {}
        # Getting the type of 'self' (line 5136)
        self_147030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5136, 33), 'self', False)
        # Obtaining the member '_mask' of a type (line 5136)
        _mask_147031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5136, 33), self_147030, '_mask')
        # Obtaining the member 'all' of a type (line 5136)
        all_147032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5136, 33), _mask_147031, 'all')
        # Calling all(args, kwargs) (line 5136)
        all_call_result_147035 = invoke(stypy.reporting.localization.Localization(__file__, 5136, 33), all_147032, *[axis_147033], **kwargs_147034)
        
        
        # Getting the type of 'cnt' (line 5136)
        cnt_147036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5136, 56), 'cnt', False)
        int_147037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5136, 63), 'int')
        # Applying the binary operator '<=' (line 5136)
        result_le_147038 = python_operator(stypy.reporting.localization.Localization(__file__, 5136, 56), '<=', cnt_147036, int_147037)
        
        # Processing the call keyword arguments (line 5136)
        kwargs_147039 = {}
        # Getting the type of 'mask_or' (line 5136)
        mask_or_147029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5136, 25), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 5136)
        mask_or_call_result_147040 = invoke(stypy.reporting.localization.Localization(__file__, 5136, 25), mask_or_147029, *[all_call_result_147035, result_le_147038], **kwargs_147039)
        
        # Getting the type of 'dvar' (line 5136)
        dvar_147041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5136, 12), 'dvar')
        # Setting the type of the member '_mask' of a type (line 5136)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5136, 12), dvar_147041, '_mask', mask_or_call_result_147040)
        
        # Call to _update_from(...): (line 5137)
        # Processing the call arguments (line 5137)
        # Getting the type of 'self' (line 5137)
        self_147044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5137, 30), 'self', False)
        # Processing the call keyword arguments (line 5137)
        kwargs_147045 = {}
        # Getting the type of 'dvar' (line 5137)
        dvar_147042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5137, 12), 'dvar', False)
        # Obtaining the member '_update_from' of a type (line 5137)
        _update_from_147043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5137, 12), dvar_147042, '_update_from')
        # Calling _update_from(args, kwargs) (line 5137)
        _update_from_call_result_147046 = invoke(stypy.reporting.localization.Localization(__file__, 5137, 12), _update_from_147043, *[self_147044], **kwargs_147045)
        
        # SSA branch for the else part of an if statement (line 5135)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to getattr(...): (line 5138)
        # Processing the call arguments (line 5138)
        # Getting the type of 'dvar' (line 5138)
        dvar_147048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5138, 21), 'dvar', False)
        str_147049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5138, 27), 'str', '_mask')
        # Getting the type of 'False' (line 5138)
        False_147050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5138, 36), 'False', False)
        # Processing the call keyword arguments (line 5138)
        kwargs_147051 = {}
        # Getting the type of 'getattr' (line 5138)
        getattr_147047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5138, 13), 'getattr', False)
        # Calling getattr(args, kwargs) (line 5138)
        getattr_call_result_147052 = invoke(stypy.reporting.localization.Localization(__file__, 5138, 13), getattr_147047, *[dvar_147048, str_147049, False_147050], **kwargs_147051)
        
        # Testing the type of an if condition (line 5138)
        if_condition_147053 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5138, 13), getattr_call_result_147052)
        # Assigning a type to the variable 'if_condition_147053' (line 5138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5138, 13), 'if_condition_147053', if_condition_147053)
        # SSA begins for if statement (line 5138)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 5140):
        
        # Assigning a Name to a Name (line 5140):
        # Getting the type of 'masked' (line 5140)
        masked_147054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5140, 19), 'masked')
        # Assigning a type to the variable 'dvar' (line 5140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5140, 12), 'dvar', masked_147054)
        
        # Type idiom detected: calculating its left and rigth part (line 5141)
        # Getting the type of 'out' (line 5141)
        out_147055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5141, 12), 'out')
        # Getting the type of 'None' (line 5141)
        None_147056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5141, 26), 'None')
        
        (may_be_147057, more_types_in_union_147058) = may_not_be_none(out_147055, None_147056)

        if may_be_147057:

            if more_types_in_union_147058:
                # Runtime conditional SSA (line 5141)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Call to isinstance(...): (line 5142)
            # Processing the call arguments (line 5142)
            # Getting the type of 'out' (line 5142)
            out_147060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 30), 'out', False)
            # Getting the type of 'MaskedArray' (line 5142)
            MaskedArray_147061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 35), 'MaskedArray', False)
            # Processing the call keyword arguments (line 5142)
            kwargs_147062 = {}
            # Getting the type of 'isinstance' (line 5142)
            isinstance_147059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5142, 19), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 5142)
            isinstance_call_result_147063 = invoke(stypy.reporting.localization.Localization(__file__, 5142, 19), isinstance_147059, *[out_147060, MaskedArray_147061], **kwargs_147062)
            
            # Testing the type of an if condition (line 5142)
            if_condition_147064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5142, 16), isinstance_call_result_147063)
            # Assigning a type to the variable 'if_condition_147064' (line 5142)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5142, 16), 'if_condition_147064', if_condition_147064)
            # SSA begins for if statement (line 5142)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Num to a Attribute (line 5143):
            
            # Assigning a Num to a Attribute (line 5143):
            int_147065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5143, 31), 'int')
            # Getting the type of 'out' (line 5143)
            out_147066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5143, 20), 'out')
            # Setting the type of the member 'flat' of a type (line 5143)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5143, 20), out_147066, 'flat', int_147065)
            
            # Call to __setmask__(...): (line 5144)
            # Processing the call arguments (line 5144)
            # Getting the type of 'True' (line 5144)
            True_147069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5144, 36), 'True', False)
            # Processing the call keyword arguments (line 5144)
            kwargs_147070 = {}
            # Getting the type of 'out' (line 5144)
            out_147067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5144, 20), 'out', False)
            # Obtaining the member '__setmask__' of a type (line 5144)
            setmask___147068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5144, 20), out_147067, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 5144)
            setmask___call_result_147071 = invoke(stypy.reporting.localization.Localization(__file__, 5144, 20), setmask___147068, *[True_147069], **kwargs_147070)
            
            # SSA branch for the else part of an if statement (line 5142)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'out' (line 5145)
            out_147072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5145, 21), 'out')
            # Obtaining the member 'dtype' of a type (line 5145)
            dtype_147073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5145, 21), out_147072, 'dtype')
            # Obtaining the member 'kind' of a type (line 5145)
            kind_147074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5145, 21), dtype_147073, 'kind')
            str_147075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5145, 39), 'str', 'biu')
            # Applying the binary operator 'in' (line 5145)
            result_contains_147076 = python_operator(stypy.reporting.localization.Localization(__file__, 5145, 21), 'in', kind_147074, str_147075)
            
            # Testing the type of an if condition (line 5145)
            if_condition_147077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5145, 21), result_contains_147076)
            # Assigning a type to the variable 'if_condition_147077' (line 5145)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5145, 21), 'if_condition_147077', if_condition_147077)
            # SSA begins for if statement (line 5145)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Str to a Name (line 5146):
            
            # Assigning a Str to a Name (line 5146):
            str_147078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5146, 29), 'str', 'Masked data information would be lost in one or more location.')
            # Assigning a type to the variable 'errmsg' (line 5146)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5146, 20), 'errmsg', str_147078)
            
            # Call to MaskError(...): (line 5148)
            # Processing the call arguments (line 5148)
            # Getting the type of 'errmsg' (line 5148)
            errmsg_147080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5148, 36), 'errmsg', False)
            # Processing the call keyword arguments (line 5148)
            kwargs_147081 = {}
            # Getting the type of 'MaskError' (line 5148)
            MaskError_147079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5148, 26), 'MaskError', False)
            # Calling MaskError(args, kwargs) (line 5148)
            MaskError_call_result_147082 = invoke(stypy.reporting.localization.Localization(__file__, 5148, 26), MaskError_147079, *[errmsg_147080], **kwargs_147081)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5148, 20), MaskError_call_result_147082, 'raise parameter', BaseException)
            # SSA branch for the else part of an if statement (line 5145)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Attribute to a Attribute (line 5150):
            
            # Assigning a Attribute to a Attribute (line 5150):
            # Getting the type of 'np' (line 5150)
            np_147083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5150, 31), 'np')
            # Obtaining the member 'nan' of a type (line 5150)
            nan_147084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5150, 31), np_147083, 'nan')
            # Getting the type of 'out' (line 5150)
            out_147085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5150, 20), 'out')
            # Setting the type of the member 'flat' of a type (line 5150)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5150, 20), out_147085, 'flat', nan_147084)
            # SSA join for if statement (line 5145)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 5142)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'out' (line 5151)
            out_147086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5151, 23), 'out')
            # Assigning a type to the variable 'stypy_return_type' (line 5151)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5151, 16), 'stypy_return_type', out_147086)

            if more_types_in_union_147058:
                # SSA join for if statement (line 5141)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 5138)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 5135)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 5153)
        # Getting the type of 'out' (line 5153)
        out_147087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5153, 8), 'out')
        # Getting the type of 'None' (line 5153)
        None_147088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5153, 22), 'None')
        
        (may_be_147089, more_types_in_union_147090) = may_not_be_none(out_147087, None_147088)

        if may_be_147089:

            if more_types_in_union_147090:
                # Runtime conditional SSA (line 5153)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 5155):
            
            # Assigning a Name to a Attribute (line 5155):
            # Getting the type of 'dvar' (line 5155)
            dvar_147091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5155, 23), 'dvar')
            # Getting the type of 'out' (line 5155)
            out_147092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5155, 12), 'out')
            # Setting the type of the member 'flat' of a type (line 5155)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5155, 12), out_147092, 'flat', dvar_147091)
            
            
            # Call to isinstance(...): (line 5157)
            # Processing the call arguments (line 5157)
            # Getting the type of 'out' (line 5157)
            out_147094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5157, 26), 'out', False)
            # Getting the type of 'MaskedArray' (line 5157)
            MaskedArray_147095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5157, 31), 'MaskedArray', False)
            # Processing the call keyword arguments (line 5157)
            kwargs_147096 = {}
            # Getting the type of 'isinstance' (line 5157)
            isinstance_147093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5157, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 5157)
            isinstance_call_result_147097 = invoke(stypy.reporting.localization.Localization(__file__, 5157, 15), isinstance_147093, *[out_147094, MaskedArray_147095], **kwargs_147096)
            
            # Testing the type of an if condition (line 5157)
            if_condition_147098 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5157, 12), isinstance_call_result_147097)
            # Assigning a type to the variable 'if_condition_147098' (line 5157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5157, 12), 'if_condition_147098', if_condition_147098)
            # SSA begins for if statement (line 5157)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __setmask__(...): (line 5158)
            # Processing the call arguments (line 5158)
            # Getting the type of 'dvar' (line 5158)
            dvar_147101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5158, 32), 'dvar', False)
            # Obtaining the member 'mask' of a type (line 5158)
            mask_147102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5158, 32), dvar_147101, 'mask')
            # Processing the call keyword arguments (line 5158)
            kwargs_147103 = {}
            # Getting the type of 'out' (line 5158)
            out_147099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5158, 16), 'out', False)
            # Obtaining the member '__setmask__' of a type (line 5158)
            setmask___147100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5158, 16), out_147099, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 5158)
            setmask___call_result_147104 = invoke(stypy.reporting.localization.Localization(__file__, 5158, 16), setmask___147100, *[mask_147102], **kwargs_147103)
            
            # SSA join for if statement (line 5157)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'out' (line 5159)
            out_147105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5159, 19), 'out')
            # Assigning a type to the variable 'stypy_return_type' (line 5159)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5159, 12), 'stypy_return_type', out_147105)

            if more_types_in_union_147090:
                # SSA join for if statement (line 5153)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'dvar' (line 5160)
        dvar_147106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5160, 15), 'dvar')
        # Assigning a type to the variable 'stypy_return_type' (line 5160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5160, 8), 'stypy_return_type', dvar_147106)
        
        # ################# End of 'var(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'var' in the type store
        # Getting the type of 'stypy_return_type' (line 5121)
        stypy_return_type_147107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5121, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147107)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'var'
        return stypy_return_type_147107

    
    # Assigning a Attribute to a Attribute (line 5161):

    @norecursion
    def std(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5163)
        None_147108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5163, 23), 'None')
        # Getting the type of 'None' (line 5163)
        None_147109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5163, 35), 'None')
        # Getting the type of 'None' (line 5163)
        None_147110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5163, 45), 'None')
        int_147111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5163, 56), 'int')
        defaults = [None_147108, None_147109, None_147110, int_147111]
        # Create a new context for function 'std'
        module_type_store = module_type_store.open_function_context('std', 5163, 4, False)
        # Assigning a type to the variable 'self' (line 5164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5164, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.std.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.std.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.std.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.std.__dict__.__setitem__('stypy_function_name', 'MaskedArray.std')
        MaskedArray.std.__dict__.__setitem__('stypy_param_names_list', ['axis', 'dtype', 'out', 'ddof'])
        MaskedArray.std.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.std.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.std.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.std.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.std.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.std.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.std', ['axis', 'dtype', 'out', 'ddof'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'std', localization, ['axis', 'dtype', 'out', 'ddof'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'std(...)' code ##################

        str_147112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5164, 8), 'str', '')
        
        # Assigning a Call to a Name (line 5165):
        
        # Assigning a Call to a Name (line 5165):
        
        # Call to var(...): (line 5165)
        # Processing the call keyword arguments (line 5165)
        # Getting the type of 'axis' (line 5165)
        axis_147115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5165, 29), 'axis', False)
        keyword_147116 = axis_147115
        # Getting the type of 'dtype' (line 5165)
        dtype_147117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5165, 41), 'dtype', False)
        keyword_147118 = dtype_147117
        # Getting the type of 'out' (line 5165)
        out_147119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5165, 52), 'out', False)
        keyword_147120 = out_147119
        # Getting the type of 'ddof' (line 5165)
        ddof_147121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5165, 62), 'ddof', False)
        keyword_147122 = ddof_147121
        kwargs_147123 = {'dtype': keyword_147118, 'out': keyword_147120, 'ddof': keyword_147122, 'axis': keyword_147116}
        # Getting the type of 'self' (line 5165)
        self_147113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5165, 15), 'self', False)
        # Obtaining the member 'var' of a type (line 5165)
        var_147114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5165, 15), self_147113, 'var')
        # Calling var(args, kwargs) (line 5165)
        var_call_result_147124 = invoke(stypy.reporting.localization.Localization(__file__, 5165, 15), var_147114, *[], **kwargs_147123)
        
        # Assigning a type to the variable 'dvar' (line 5165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5165, 8), 'dvar', var_call_result_147124)
        
        
        # Getting the type of 'dvar' (line 5166)
        dvar_147125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5166, 11), 'dvar')
        # Getting the type of 'masked' (line 5166)
        masked_147126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5166, 23), 'masked')
        # Applying the binary operator 'isnot' (line 5166)
        result_is_not_147127 = python_operator(stypy.reporting.localization.Localization(__file__, 5166, 11), 'isnot', dvar_147125, masked_147126)
        
        # Testing the type of an if condition (line 5166)
        if_condition_147128 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5166, 8), result_is_not_147127)
        # Assigning a type to the variable 'if_condition_147128' (line 5166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5166, 8), 'if_condition_147128', if_condition_147128)
        # SSA begins for if statement (line 5166)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 5167)
        # Getting the type of 'out' (line 5167)
        out_147129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5167, 12), 'out')
        # Getting the type of 'None' (line 5167)
        None_147130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5167, 26), 'None')
        
        (may_be_147131, more_types_in_union_147132) = may_not_be_none(out_147129, None_147130)

        if may_be_147131:

            if more_types_in_union_147132:
                # Runtime conditional SSA (line 5167)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to power(...): (line 5168)
            # Processing the call arguments (line 5168)
            # Getting the type of 'out' (line 5168)
            out_147135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5168, 25), 'out', False)
            float_147136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5168, 30), 'float')
            # Processing the call keyword arguments (line 5168)
            # Getting the type of 'out' (line 5168)
            out_147137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5168, 39), 'out', False)
            keyword_147138 = out_147137
            str_147139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5168, 52), 'str', 'unsafe')
            keyword_147140 = str_147139
            kwargs_147141 = {'casting': keyword_147140, 'out': keyword_147138}
            # Getting the type of 'np' (line 5168)
            np_147133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5168, 16), 'np', False)
            # Obtaining the member 'power' of a type (line 5168)
            power_147134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5168, 16), np_147133, 'power')
            # Calling power(args, kwargs) (line 5168)
            power_call_result_147142 = invoke(stypy.reporting.localization.Localization(__file__, 5168, 16), power_147134, *[out_147135, float_147136], **kwargs_147141)
            
            # Getting the type of 'out' (line 5169)
            out_147143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5169, 23), 'out')
            # Assigning a type to the variable 'stypy_return_type' (line 5169)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5169, 16), 'stypy_return_type', out_147143)

            if more_types_in_union_147132:
                # SSA join for if statement (line 5167)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 5170):
        
        # Assigning a Call to a Name (line 5170):
        
        # Call to sqrt(...): (line 5170)
        # Processing the call arguments (line 5170)
        # Getting the type of 'dvar' (line 5170)
        dvar_147145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5170, 24), 'dvar', False)
        # Processing the call keyword arguments (line 5170)
        kwargs_147146 = {}
        # Getting the type of 'sqrt' (line 5170)
        sqrt_147144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5170, 19), 'sqrt', False)
        # Calling sqrt(args, kwargs) (line 5170)
        sqrt_call_result_147147 = invoke(stypy.reporting.localization.Localization(__file__, 5170, 19), sqrt_147144, *[dvar_147145], **kwargs_147146)
        
        # Assigning a type to the variable 'dvar' (line 5170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5170, 12), 'dvar', sqrt_call_result_147147)
        # SSA join for if statement (line 5166)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dvar' (line 5171)
        dvar_147148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5171, 15), 'dvar')
        # Assigning a type to the variable 'stypy_return_type' (line 5171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5171, 8), 'stypy_return_type', dvar_147148)
        
        # ################# End of 'std(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'std' in the type store
        # Getting the type of 'stypy_return_type' (line 5163)
        stypy_return_type_147149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5163, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147149)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'std'
        return stypy_return_type_147149

    
    # Assigning a Attribute to a Attribute (line 5172):

    @norecursion
    def round(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_147150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5174, 29), 'int')
        # Getting the type of 'None' (line 5174)
        None_147151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5174, 36), 'None')
        defaults = [int_147150, None_147151]
        # Create a new context for function 'round'
        module_type_store = module_type_store.open_function_context('round', 5174, 4, False)
        # Assigning a type to the variable 'self' (line 5175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5175, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.round.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.round.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.round.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.round.__dict__.__setitem__('stypy_function_name', 'MaskedArray.round')
        MaskedArray.round.__dict__.__setitem__('stypy_param_names_list', ['decimals', 'out'])
        MaskedArray.round.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.round.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.round.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.round.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.round.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.round.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.round', ['decimals', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'round', localization, ['decimals', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'round(...)' code ##################

        str_147152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5184, (-1)), 'str', '\n        Return an array rounded a to the given number of decimals.\n\n        Refer to `numpy.around` for full documentation.\n\n        See Also\n        --------\n        numpy.around : equivalent function\n\n        ')
        
        # Assigning a Call to a Name (line 5185):
        
        # Assigning a Call to a Name (line 5185):
        
        # Call to view(...): (line 5185)
        # Processing the call arguments (line 5185)
        
        # Call to type(...): (line 5185)
        # Processing the call arguments (line 5185)
        # Getting the type of 'self' (line 5185)
        self_147164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5185, 72), 'self', False)
        # Processing the call keyword arguments (line 5185)
        kwargs_147165 = {}
        # Getting the type of 'type' (line 5185)
        type_147163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5185, 67), 'type', False)
        # Calling type(args, kwargs) (line 5185)
        type_call_result_147166 = invoke(stypy.reporting.localization.Localization(__file__, 5185, 67), type_147163, *[self_147164], **kwargs_147165)
        
        # Processing the call keyword arguments (line 5185)
        kwargs_147167 = {}
        
        # Call to round(...): (line 5185)
        # Processing the call keyword arguments (line 5185)
        # Getting the type of 'decimals' (line 5185)
        decimals_147156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5185, 43), 'decimals', False)
        keyword_147157 = decimals_147156
        # Getting the type of 'out' (line 5185)
        out_147158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5185, 57), 'out', False)
        keyword_147159 = out_147158
        kwargs_147160 = {'decimals': keyword_147157, 'out': keyword_147159}
        # Getting the type of 'self' (line 5185)
        self_147153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5185, 17), 'self', False)
        # Obtaining the member '_data' of a type (line 5185)
        _data_147154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5185, 17), self_147153, '_data')
        # Obtaining the member 'round' of a type (line 5185)
        round_147155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5185, 17), _data_147154, 'round')
        # Calling round(args, kwargs) (line 5185)
        round_call_result_147161 = invoke(stypy.reporting.localization.Localization(__file__, 5185, 17), round_147155, *[], **kwargs_147160)
        
        # Obtaining the member 'view' of a type (line 5185)
        view_147162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5185, 17), round_call_result_147161, 'view')
        # Calling view(args, kwargs) (line 5185)
        view_call_result_147168 = invoke(stypy.reporting.localization.Localization(__file__, 5185, 17), view_147162, *[type_call_result_147166], **kwargs_147167)
        
        # Assigning a type to the variable 'result' (line 5185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5185, 8), 'result', view_call_result_147168)
        
        
        # Getting the type of 'result' (line 5186)
        result_147169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5186, 11), 'result')
        # Obtaining the member 'ndim' of a type (line 5186)
        ndim_147170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5186, 11), result_147169, 'ndim')
        int_147171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5186, 25), 'int')
        # Applying the binary operator '>' (line 5186)
        result_gt_147172 = python_operator(stypy.reporting.localization.Localization(__file__, 5186, 11), '>', ndim_147170, int_147171)
        
        # Testing the type of an if condition (line 5186)
        if_condition_147173 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5186, 8), result_gt_147172)
        # Assigning a type to the variable 'if_condition_147173' (line 5186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5186, 8), 'if_condition_147173', if_condition_147173)
        # SSA begins for if statement (line 5186)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 5187):
        
        # Assigning a Attribute to a Attribute (line 5187):
        # Getting the type of 'self' (line 5187)
        self_147174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5187, 27), 'self')
        # Obtaining the member '_mask' of a type (line 5187)
        _mask_147175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5187, 27), self_147174, '_mask')
        # Getting the type of 'result' (line 5187)
        result_147176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5187, 12), 'result')
        # Setting the type of the member '_mask' of a type (line 5187)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5187, 12), result_147176, '_mask', _mask_147175)
        
        # Call to _update_from(...): (line 5188)
        # Processing the call arguments (line 5188)
        # Getting the type of 'self' (line 5188)
        self_147179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5188, 32), 'self', False)
        # Processing the call keyword arguments (line 5188)
        kwargs_147180 = {}
        # Getting the type of 'result' (line 5188)
        result_147177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5188, 12), 'result', False)
        # Obtaining the member '_update_from' of a type (line 5188)
        _update_from_147178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5188, 12), result_147177, '_update_from')
        # Calling _update_from(args, kwargs) (line 5188)
        _update_from_call_result_147181 = invoke(stypy.reporting.localization.Localization(__file__, 5188, 12), _update_from_147178, *[self_147179], **kwargs_147180)
        
        # SSA branch for the else part of an if statement (line 5186)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 5189)
        self_147182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5189, 13), 'self')
        # Obtaining the member '_mask' of a type (line 5189)
        _mask_147183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5189, 13), self_147182, '_mask')
        # Testing the type of an if condition (line 5189)
        if_condition_147184 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5189, 13), _mask_147183)
        # Assigning a type to the variable 'if_condition_147184' (line 5189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5189, 13), 'if_condition_147184', if_condition_147184)
        # SSA begins for if statement (line 5189)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 5191):
        
        # Assigning a Name to a Name (line 5191):
        # Getting the type of 'masked' (line 5191)
        masked_147185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5191, 21), 'masked')
        # Assigning a type to the variable 'result' (line 5191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5191, 12), 'result', masked_147185)
        # SSA join for if statement (line 5189)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 5186)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 5193)
        # Getting the type of 'out' (line 5193)
        out_147186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5193, 11), 'out')
        # Getting the type of 'None' (line 5193)
        None_147187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5193, 18), 'None')
        
        (may_be_147188, more_types_in_union_147189) = may_be_none(out_147186, None_147187)

        if may_be_147188:

            if more_types_in_union_147189:
                # Runtime conditional SSA (line 5193)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'result' (line 5194)
            result_147190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5194, 19), 'result')
            # Assigning a type to the variable 'stypy_return_type' (line 5194)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5194, 12), 'stypy_return_type', result_147190)

            if more_types_in_union_147189:
                # SSA join for if statement (line 5193)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to isinstance(...): (line 5195)
        # Processing the call arguments (line 5195)
        # Getting the type of 'out' (line 5195)
        out_147192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5195, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 5195)
        MaskedArray_147193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5195, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 5195)
        kwargs_147194 = {}
        # Getting the type of 'isinstance' (line 5195)
        isinstance_147191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5195, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 5195)
        isinstance_call_result_147195 = invoke(stypy.reporting.localization.Localization(__file__, 5195, 11), isinstance_147191, *[out_147192, MaskedArray_147193], **kwargs_147194)
        
        # Testing the type of an if condition (line 5195)
        if_condition_147196 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5195, 8), isinstance_call_result_147195)
        # Assigning a type to the variable 'if_condition_147196' (line 5195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5195, 8), 'if_condition_147196', if_condition_147196)
        # SSA begins for if statement (line 5195)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __setmask__(...): (line 5196)
        # Processing the call arguments (line 5196)
        # Getting the type of 'self' (line 5196)
        self_147199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5196, 28), 'self', False)
        # Obtaining the member '_mask' of a type (line 5196)
        _mask_147200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5196, 28), self_147199, '_mask')
        # Processing the call keyword arguments (line 5196)
        kwargs_147201 = {}
        # Getting the type of 'out' (line 5196)
        out_147197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5196, 12), 'out', False)
        # Obtaining the member '__setmask__' of a type (line 5196)
        setmask___147198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5196, 12), out_147197, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 5196)
        setmask___call_result_147202 = invoke(stypy.reporting.localization.Localization(__file__, 5196, 12), setmask___147198, *[_mask_147200], **kwargs_147201)
        
        # SSA join for if statement (line 5195)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 5197)
        out_147203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5197, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 5197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5197, 8), 'stypy_return_type', out_147203)
        
        # ################# End of 'round(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'round' in the type store
        # Getting the type of 'stypy_return_type' (line 5174)
        stypy_return_type_147204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5174, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147204)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'round'
        return stypy_return_type_147204

    
    # Assigning a Attribute to a Attribute (line 5198):

    @norecursion
    def argsort(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5200)
        None_147205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5200, 27), 'None')
        str_147206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5200, 38), 'str', 'quicksort')
        # Getting the type of 'None' (line 5200)
        None_147207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5200, 57), 'None')
        # Getting the type of 'None' (line 5200)
        None_147208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5200, 74), 'None')
        defaults = [None_147205, str_147206, None_147207, None_147208]
        # Create a new context for function 'argsort'
        module_type_store = module_type_store.open_function_context('argsort', 5200, 4, False)
        # Assigning a type to the variable 'self' (line 5201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.argsort.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.argsort.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.argsort.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.argsort.__dict__.__setitem__('stypy_function_name', 'MaskedArray.argsort')
        MaskedArray.argsort.__dict__.__setitem__('stypy_param_names_list', ['axis', 'kind', 'order', 'fill_value'])
        MaskedArray.argsort.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.argsort.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.argsort.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.argsort.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.argsort.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.argsort.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.argsort', ['axis', 'kind', 'order', 'fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'argsort', localization, ['axis', 'kind', 'order', 'fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'argsort(...)' code ##################

        str_147209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5247, (-1)), 'str', "\n        Return an ndarray of indices that sort the array along the\n        specified axis.  Masked values are filled beforehand to\n        `fill_value`.\n\n        Parameters\n        ----------\n        axis : int, optional\n            Axis along which to sort.  The default is -1 (last axis).\n            If None, the flattened array is used.\n        fill_value : var, optional\n            Value used to fill the array before sorting.\n            The default is the `fill_value` attribute of the input array.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm.\n        order : list, optional\n            When `a` is an array with fields defined, this argument specifies\n            which fields to compare first, second, etc.  Not all fields need be\n            specified.\n\n        Returns\n        -------\n        index_array : ndarray, int\n            Array of indices that sort `a` along the specified axis.\n            In other words, ``a[index_array]`` yields a sorted `a`.\n\n        See Also\n        --------\n        sort : Describes sorting algorithms used.\n        lexsort : Indirect stable sort with multiple keys.\n        ndarray.sort : Inplace sort.\n\n        Notes\n        -----\n        See `sort` for notes on the different sorting algorithms.\n\n        Examples\n        --------\n        >>> a = np.ma.array([3,2,1], mask=[False, False, True])\n        >>> a\n        masked_array(data = [3 2 --],\n                     mask = [False False  True],\n               fill_value = 999999)\n        >>> a.argsort()\n        array([1, 0, 2])\n\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 5248)
        # Getting the type of 'fill_value' (line 5248)
        fill_value_147210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5248, 11), 'fill_value')
        # Getting the type of 'None' (line 5248)
        None_147211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5248, 25), 'None')
        
        (may_be_147212, more_types_in_union_147213) = may_be_none(fill_value_147210, None_147211)

        if may_be_147212:

            if more_types_in_union_147213:
                # Runtime conditional SSA (line 5248)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5249):
            
            # Assigning a Call to a Name (line 5249):
            
            # Call to default_fill_value(...): (line 5249)
            # Processing the call arguments (line 5249)
            # Getting the type of 'self' (line 5249)
            self_147215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5249, 44), 'self', False)
            # Processing the call keyword arguments (line 5249)
            kwargs_147216 = {}
            # Getting the type of 'default_fill_value' (line 5249)
            default_fill_value_147214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5249, 25), 'default_fill_value', False)
            # Calling default_fill_value(args, kwargs) (line 5249)
            default_fill_value_call_result_147217 = invoke(stypy.reporting.localization.Localization(__file__, 5249, 25), default_fill_value_147214, *[self_147215], **kwargs_147216)
            
            # Assigning a type to the variable 'fill_value' (line 5249)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5249, 12), 'fill_value', default_fill_value_call_result_147217)

            if more_types_in_union_147213:
                # SSA join for if statement (line 5248)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 5250):
        
        # Assigning a Call to a Name (line 5250):
        
        # Call to view(...): (line 5250)
        # Processing the call arguments (line 5250)
        # Getting the type of 'ndarray' (line 5250)
        ndarray_147224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5250, 41), 'ndarray', False)
        # Processing the call keyword arguments (line 5250)
        kwargs_147225 = {}
        
        # Call to filled(...): (line 5250)
        # Processing the call arguments (line 5250)
        # Getting the type of 'fill_value' (line 5250)
        fill_value_147220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5250, 24), 'fill_value', False)
        # Processing the call keyword arguments (line 5250)
        kwargs_147221 = {}
        # Getting the type of 'self' (line 5250)
        self_147218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5250, 12), 'self', False)
        # Obtaining the member 'filled' of a type (line 5250)
        filled_147219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5250, 12), self_147218, 'filled')
        # Calling filled(args, kwargs) (line 5250)
        filled_call_result_147222 = invoke(stypy.reporting.localization.Localization(__file__, 5250, 12), filled_147219, *[fill_value_147220], **kwargs_147221)
        
        # Obtaining the member 'view' of a type (line 5250)
        view_147223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5250, 12), filled_call_result_147222, 'view')
        # Calling view(args, kwargs) (line 5250)
        view_call_result_147226 = invoke(stypy.reporting.localization.Localization(__file__, 5250, 12), view_147223, *[ndarray_147224], **kwargs_147225)
        
        # Assigning a type to the variable 'd' (line 5250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5250, 8), 'd', view_call_result_147226)
        
        # Call to argsort(...): (line 5251)
        # Processing the call keyword arguments (line 5251)
        # Getting the type of 'axis' (line 5251)
        axis_147229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5251, 30), 'axis', False)
        keyword_147230 = axis_147229
        # Getting the type of 'kind' (line 5251)
        kind_147231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5251, 41), 'kind', False)
        keyword_147232 = kind_147231
        # Getting the type of 'order' (line 5251)
        order_147233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5251, 53), 'order', False)
        keyword_147234 = order_147233
        kwargs_147235 = {'kind': keyword_147232, 'order': keyword_147234, 'axis': keyword_147230}
        # Getting the type of 'd' (line 5251)
        d_147227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5251, 15), 'd', False)
        # Obtaining the member 'argsort' of a type (line 5251)
        argsort_147228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5251, 15), d_147227, 'argsort')
        # Calling argsort(args, kwargs) (line 5251)
        argsort_call_result_147236 = invoke(stypy.reporting.localization.Localization(__file__, 5251, 15), argsort_147228, *[], **kwargs_147235)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5251, 8), 'stypy_return_type', argsort_call_result_147236)
        
        # ################# End of 'argsort(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'argsort' in the type store
        # Getting the type of 'stypy_return_type' (line 5200)
        stypy_return_type_147237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147237)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'argsort'
        return stypy_return_type_147237


    @norecursion
    def argmin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5253)
        None_147238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5253, 26), 'None')
        # Getting the type of 'None' (line 5253)
        None_147239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5253, 43), 'None')
        # Getting the type of 'None' (line 5253)
        None_147240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5253, 53), 'None')
        defaults = [None_147238, None_147239, None_147240]
        # Create a new context for function 'argmin'
        module_type_store = module_type_store.open_function_context('argmin', 5253, 4, False)
        # Assigning a type to the variable 'self' (line 5254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5254, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.argmin.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.argmin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.argmin.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.argmin.__dict__.__setitem__('stypy_function_name', 'MaskedArray.argmin')
        MaskedArray.argmin.__dict__.__setitem__('stypy_param_names_list', ['axis', 'fill_value', 'out'])
        MaskedArray.argmin.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.argmin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.argmin.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.argmin.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.argmin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.argmin.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.argmin', ['axis', 'fill_value', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'argmin', localization, ['axis', 'fill_value', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'argmin(...)' code ##################

        str_147241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5288, (-1)), 'str', '\n        Return array of indices to the minimum values along the given axis.\n\n        Parameters\n        ----------\n        axis : {None, integer}\n            If None, the index is into the flattened array, otherwise along\n            the specified axis\n        fill_value : {var}, optional\n            Value used to fill in the masked values.  If None, the output of\n            minimum_fill_value(self._data) is used instead.\n        out : {None, array}, optional\n            Array into which the result can be placed. Its type is preserved\n            and it must be of the right shape to hold the output.\n\n        Returns\n        -------\n        ndarray or scalar\n            If multi-dimension input, returns a new ndarray of indices to the\n            minimum values along the given axis.  Otherwise, returns a scalar\n            of index to the minimum values along the given axis.\n\n        Examples\n        --------\n        >>> x = np.ma.array(arange(4), mask=[1,1,0,0])\n        >>> x.shape = (2,2)\n        >>> print(x)\n        [[-- --]\n         [2 3]]\n        >>> print(x.argmin(axis=0, fill_value=-1))\n        [0 0]\n        >>> print(x.argmin(axis=0, fill_value=9))\n        [1 1]\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 5289)
        # Getting the type of 'fill_value' (line 5289)
        fill_value_147242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5289, 11), 'fill_value')
        # Getting the type of 'None' (line 5289)
        None_147243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5289, 25), 'None')
        
        (may_be_147244, more_types_in_union_147245) = may_be_none(fill_value_147242, None_147243)

        if may_be_147244:

            if more_types_in_union_147245:
                # Runtime conditional SSA (line 5289)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5290):
            
            # Assigning a Call to a Name (line 5290):
            
            # Call to minimum_fill_value(...): (line 5290)
            # Processing the call arguments (line 5290)
            # Getting the type of 'self' (line 5290)
            self_147247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5290, 44), 'self', False)
            # Processing the call keyword arguments (line 5290)
            kwargs_147248 = {}
            # Getting the type of 'minimum_fill_value' (line 5290)
            minimum_fill_value_147246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5290, 25), 'minimum_fill_value', False)
            # Calling minimum_fill_value(args, kwargs) (line 5290)
            minimum_fill_value_call_result_147249 = invoke(stypy.reporting.localization.Localization(__file__, 5290, 25), minimum_fill_value_147246, *[self_147247], **kwargs_147248)
            
            # Assigning a type to the variable 'fill_value' (line 5290)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5290, 12), 'fill_value', minimum_fill_value_call_result_147249)

            if more_types_in_union_147245:
                # SSA join for if statement (line 5289)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 5291):
        
        # Assigning a Call to a Name (line 5291):
        
        # Call to view(...): (line 5291)
        # Processing the call arguments (line 5291)
        # Getting the type of 'ndarray' (line 5291)
        ndarray_147256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5291, 41), 'ndarray', False)
        # Processing the call keyword arguments (line 5291)
        kwargs_147257 = {}
        
        # Call to filled(...): (line 5291)
        # Processing the call arguments (line 5291)
        # Getting the type of 'fill_value' (line 5291)
        fill_value_147252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5291, 24), 'fill_value', False)
        # Processing the call keyword arguments (line 5291)
        kwargs_147253 = {}
        # Getting the type of 'self' (line 5291)
        self_147250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5291, 12), 'self', False)
        # Obtaining the member 'filled' of a type (line 5291)
        filled_147251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5291, 12), self_147250, 'filled')
        # Calling filled(args, kwargs) (line 5291)
        filled_call_result_147254 = invoke(stypy.reporting.localization.Localization(__file__, 5291, 12), filled_147251, *[fill_value_147252], **kwargs_147253)
        
        # Obtaining the member 'view' of a type (line 5291)
        view_147255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5291, 12), filled_call_result_147254, 'view')
        # Calling view(args, kwargs) (line 5291)
        view_call_result_147258 = invoke(stypy.reporting.localization.Localization(__file__, 5291, 12), view_147255, *[ndarray_147256], **kwargs_147257)
        
        # Assigning a type to the variable 'd' (line 5291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5291, 8), 'd', view_call_result_147258)
        
        # Call to argmin(...): (line 5292)
        # Processing the call arguments (line 5292)
        # Getting the type of 'axis' (line 5292)
        axis_147261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5292, 24), 'axis', False)
        # Processing the call keyword arguments (line 5292)
        # Getting the type of 'out' (line 5292)
        out_147262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5292, 34), 'out', False)
        keyword_147263 = out_147262
        kwargs_147264 = {'out': keyword_147263}
        # Getting the type of 'd' (line 5292)
        d_147259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5292, 15), 'd', False)
        # Obtaining the member 'argmin' of a type (line 5292)
        argmin_147260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5292, 15), d_147259, 'argmin')
        # Calling argmin(args, kwargs) (line 5292)
        argmin_call_result_147265 = invoke(stypy.reporting.localization.Localization(__file__, 5292, 15), argmin_147260, *[axis_147261], **kwargs_147264)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5292, 8), 'stypy_return_type', argmin_call_result_147265)
        
        # ################# End of 'argmin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'argmin' in the type store
        # Getting the type of 'stypy_return_type' (line 5253)
        stypy_return_type_147266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147266)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'argmin'
        return stypy_return_type_147266


    @norecursion
    def argmax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5294)
        None_147267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5294, 26), 'None')
        # Getting the type of 'None' (line 5294)
        None_147268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5294, 43), 'None')
        # Getting the type of 'None' (line 5294)
        None_147269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5294, 53), 'None')
        defaults = [None_147267, None_147268, None_147269]
        # Create a new context for function 'argmax'
        module_type_store = module_type_store.open_function_context('argmax', 5294, 4, False)
        # Assigning a type to the variable 'self' (line 5295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5295, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.argmax.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.argmax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.argmax.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.argmax.__dict__.__setitem__('stypy_function_name', 'MaskedArray.argmax')
        MaskedArray.argmax.__dict__.__setitem__('stypy_param_names_list', ['axis', 'fill_value', 'out'])
        MaskedArray.argmax.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.argmax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.argmax.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.argmax.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.argmax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.argmax.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.argmax', ['axis', 'fill_value', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'argmax', localization, ['axis', 'fill_value', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'argmax(...)' code ##################

        str_147270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5325, (-1)), 'str', '\n        Returns array of indices of the maximum values along the given axis.\n        Masked values are treated as if they had the value fill_value.\n\n        Parameters\n        ----------\n        axis : {None, integer}\n            If None, the index is into the flattened array, otherwise along\n            the specified axis\n        fill_value : {var}, optional\n            Value used to fill in the masked values.  If None, the output of\n            maximum_fill_value(self._data) is used instead.\n        out : {None, array}, optional\n            Array into which the result can be placed. Its type is preserved\n            and it must be of the right shape to hold the output.\n\n        Returns\n        -------\n        index_array : {integer_array}\n\n        Examples\n        --------\n        >>> a = np.arange(6).reshape(2,3)\n        >>> a.argmax()\n        5\n        >>> a.argmax(0)\n        array([1, 1, 1])\n        >>> a.argmax(1)\n        array([2, 2])\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 5326)
        # Getting the type of 'fill_value' (line 5326)
        fill_value_147271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5326, 11), 'fill_value')
        # Getting the type of 'None' (line 5326)
        None_147272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5326, 25), 'None')
        
        (may_be_147273, more_types_in_union_147274) = may_be_none(fill_value_147271, None_147272)

        if may_be_147273:

            if more_types_in_union_147274:
                # Runtime conditional SSA (line 5326)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5327):
            
            # Assigning a Call to a Name (line 5327):
            
            # Call to maximum_fill_value(...): (line 5327)
            # Processing the call arguments (line 5327)
            # Getting the type of 'self' (line 5327)
            self_147276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5327, 44), 'self', False)
            # Obtaining the member '_data' of a type (line 5327)
            _data_147277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5327, 44), self_147276, '_data')
            # Processing the call keyword arguments (line 5327)
            kwargs_147278 = {}
            # Getting the type of 'maximum_fill_value' (line 5327)
            maximum_fill_value_147275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5327, 25), 'maximum_fill_value', False)
            # Calling maximum_fill_value(args, kwargs) (line 5327)
            maximum_fill_value_call_result_147279 = invoke(stypy.reporting.localization.Localization(__file__, 5327, 25), maximum_fill_value_147275, *[_data_147277], **kwargs_147278)
            
            # Assigning a type to the variable 'fill_value' (line 5327)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5327, 12), 'fill_value', maximum_fill_value_call_result_147279)

            if more_types_in_union_147274:
                # SSA join for if statement (line 5326)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 5328):
        
        # Assigning a Call to a Name (line 5328):
        
        # Call to view(...): (line 5328)
        # Processing the call arguments (line 5328)
        # Getting the type of 'ndarray' (line 5328)
        ndarray_147286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5328, 41), 'ndarray', False)
        # Processing the call keyword arguments (line 5328)
        kwargs_147287 = {}
        
        # Call to filled(...): (line 5328)
        # Processing the call arguments (line 5328)
        # Getting the type of 'fill_value' (line 5328)
        fill_value_147282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5328, 24), 'fill_value', False)
        # Processing the call keyword arguments (line 5328)
        kwargs_147283 = {}
        # Getting the type of 'self' (line 5328)
        self_147280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5328, 12), 'self', False)
        # Obtaining the member 'filled' of a type (line 5328)
        filled_147281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5328, 12), self_147280, 'filled')
        # Calling filled(args, kwargs) (line 5328)
        filled_call_result_147284 = invoke(stypy.reporting.localization.Localization(__file__, 5328, 12), filled_147281, *[fill_value_147282], **kwargs_147283)
        
        # Obtaining the member 'view' of a type (line 5328)
        view_147285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5328, 12), filled_call_result_147284, 'view')
        # Calling view(args, kwargs) (line 5328)
        view_call_result_147288 = invoke(stypy.reporting.localization.Localization(__file__, 5328, 12), view_147285, *[ndarray_147286], **kwargs_147287)
        
        # Assigning a type to the variable 'd' (line 5328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5328, 8), 'd', view_call_result_147288)
        
        # Call to argmax(...): (line 5329)
        # Processing the call arguments (line 5329)
        # Getting the type of 'axis' (line 5329)
        axis_147291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5329, 24), 'axis', False)
        # Processing the call keyword arguments (line 5329)
        # Getting the type of 'out' (line 5329)
        out_147292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5329, 34), 'out', False)
        keyword_147293 = out_147292
        kwargs_147294 = {'out': keyword_147293}
        # Getting the type of 'd' (line 5329)
        d_147289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5329, 15), 'd', False)
        # Obtaining the member 'argmax' of a type (line 5329)
        argmax_147290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5329, 15), d_147289, 'argmax')
        # Calling argmax(args, kwargs) (line 5329)
        argmax_call_result_147295 = invoke(stypy.reporting.localization.Localization(__file__, 5329, 15), argmax_147290, *[axis_147291], **kwargs_147294)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5329, 8), 'stypy_return_type', argmax_call_result_147295)
        
        # ################# End of 'argmax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'argmax' in the type store
        # Getting the type of 'stypy_return_type' (line 5294)
        stypy_return_type_147296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5294, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147296)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'argmax'
        return stypy_return_type_147296


    @norecursion
    def sort(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_147297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5331, 24), 'int')
        str_147298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5331, 33), 'str', 'quicksort')
        # Getting the type of 'None' (line 5331)
        None_147299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5331, 52), 'None')
        # Getting the type of 'True' (line 5332)
        True_147300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5332, 21), 'True')
        # Getting the type of 'None' (line 5332)
        None_147301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5332, 38), 'None')
        defaults = [int_147297, str_147298, None_147299, True_147300, None_147301]
        # Create a new context for function 'sort'
        module_type_store = module_type_store.open_function_context('sort', 5331, 4, False)
        # Assigning a type to the variable 'self' (line 5332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5332, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.sort.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.sort.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.sort.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.sort.__dict__.__setitem__('stypy_function_name', 'MaskedArray.sort')
        MaskedArray.sort.__dict__.__setitem__('stypy_param_names_list', ['axis', 'kind', 'order', 'endwith', 'fill_value'])
        MaskedArray.sort.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.sort.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.sort.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.sort.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.sort.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.sort.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.sort', ['axis', 'kind', 'order', 'endwith', 'fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'sort', localization, ['axis', 'kind', 'order', 'endwith', 'fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'sort(...)' code ##################

        str_147302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5396, (-1)), 'str', "\n        Sort the array, in-place\n\n        Parameters\n        ----------\n        a : array_like\n            Array to be sorted.\n        axis : int, optional\n            Axis along which to sort. If None, the array is flattened before\n            sorting. The default is -1, which sorts along the last axis.\n        kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n            Sorting algorithm. Default is 'quicksort'.\n        order : list, optional\n            When `a` is a structured array, this argument specifies which fields\n            to compare first, second, and so on.  This list does not need to\n            include all of the fields.\n        endwith : {True, False}, optional\n            Whether missing values (if any) should be forced in the upper indices\n            (at the end of the array) (True) or lower indices (at the beginning).\n            When the array contains unmasked values of the largest (or smallest if\n            False) representable value of the datatype the ordering of these values\n            and the masked values is undefined.  To enforce the masked values are\n            at the end (beginning) in this case one must sort the mask.\n        fill_value : {var}, optional\n            Value used internally for the masked values.\n            If ``fill_value`` is not None, it supersedes ``endwith``.\n\n        Returns\n        -------\n        sorted_array : ndarray\n            Array of the same type and shape as `a`.\n\n        See Also\n        --------\n        ndarray.sort : Method to sort an array in-place.\n        argsort : Indirect sort.\n        lexsort : Indirect stable sort on multiple keys.\n        searchsorted : Find elements in a sorted array.\n\n        Notes\n        -----\n        See ``sort`` for notes on the different sorting algorithms.\n\n        Examples\n        --------\n        >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])\n        >>> # Default\n        >>> a.sort()\n        >>> print(a)\n        [1 3 5 -- --]\n\n        >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])\n        >>> # Put missing values in the front\n        >>> a.sort(endwith=False)\n        >>> print(a)\n        [-- -- 1 3 5]\n\n        >>> a = ma.array([1, 2, 5, 4, 3],mask=[0, 1, 0, 1, 0])\n        >>> # fill_value takes over endwith\n        >>> a.sort(endwith=False, fill_value=3)\n        >>> print(a)\n        [1 -- -- 3 5]\n\n        ")
        
        
        # Getting the type of 'self' (line 5397)
        self_147303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5397, 11), 'self')
        # Obtaining the member '_mask' of a type (line 5397)
        _mask_147304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5397, 11), self_147303, '_mask')
        # Getting the type of 'nomask' (line 5397)
        nomask_147305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5397, 25), 'nomask')
        # Applying the binary operator 'is' (line 5397)
        result_is__147306 = python_operator(stypy.reporting.localization.Localization(__file__, 5397, 11), 'is', _mask_147304, nomask_147305)
        
        # Testing the type of an if condition (line 5397)
        if_condition_147307 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5397, 8), result_is__147306)
        # Assigning a type to the variable 'if_condition_147307' (line 5397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5397, 8), 'if_condition_147307', if_condition_147307)
        # SSA begins for if statement (line 5397)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to sort(...): (line 5398)
        # Processing the call arguments (line 5398)
        # Getting the type of 'self' (line 5398)
        self_147310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5398, 25), 'self', False)
        # Processing the call keyword arguments (line 5398)
        # Getting the type of 'axis' (line 5398)
        axis_147311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5398, 36), 'axis', False)
        keyword_147312 = axis_147311
        # Getting the type of 'kind' (line 5398)
        kind_147313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5398, 47), 'kind', False)
        keyword_147314 = kind_147313
        # Getting the type of 'order' (line 5398)
        order_147315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5398, 59), 'order', False)
        keyword_147316 = order_147315
        kwargs_147317 = {'kind': keyword_147314, 'order': keyword_147316, 'axis': keyword_147312}
        # Getting the type of 'ndarray' (line 5398)
        ndarray_147308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5398, 12), 'ndarray', False)
        # Obtaining the member 'sort' of a type (line 5398)
        sort_147309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5398, 12), ndarray_147308, 'sort')
        # Calling sort(args, kwargs) (line 5398)
        sort_call_result_147318 = invoke(stypy.reporting.localization.Localization(__file__, 5398, 12), sort_147309, *[self_147310], **kwargs_147317)
        
        # SSA branch for the else part of an if statement (line 5397)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 5400)
        self_147319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5400, 15), 'self')
        # Getting the type of 'masked' (line 5400)
        masked_147320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5400, 23), 'masked')
        # Applying the binary operator 'is' (line 5400)
        result_is__147321 = python_operator(stypy.reporting.localization.Localization(__file__, 5400, 15), 'is', self_147319, masked_147320)
        
        # Testing the type of an if condition (line 5400)
        if_condition_147322 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5400, 12), result_is__147321)
        # Assigning a type to the variable 'if_condition_147322' (line 5400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5400, 12), 'if_condition_147322', if_condition_147322)
        # SSA begins for if statement (line 5400)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 5401)
        self_147323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5401, 23), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 5401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5401, 16), 'stypy_return_type', self_147323)
        # SSA join for if statement (line 5400)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 5402)
        # Getting the type of 'fill_value' (line 5402)
        fill_value_147324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5402, 15), 'fill_value')
        # Getting the type of 'None' (line 5402)
        None_147325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5402, 29), 'None')
        
        (may_be_147326, more_types_in_union_147327) = may_be_none(fill_value_147324, None_147325)

        if may_be_147326:

            if more_types_in_union_147327:
                # Runtime conditional SSA (line 5402)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'endwith' (line 5403)
            endwith_147328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5403, 19), 'endwith')
            # Testing the type of an if condition (line 5403)
            if_condition_147329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5403, 16), endwith_147328)
            # Assigning a type to the variable 'if_condition_147329' (line 5403)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5403, 16), 'if_condition_147329', if_condition_147329)
            # SSA begins for if statement (line 5403)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Call to issubdtype(...): (line 5405)
            # Processing the call arguments (line 5405)
            # Getting the type of 'self' (line 5405)
            self_147332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5405, 37), 'self', False)
            # Obtaining the member 'dtype' of a type (line 5405)
            dtype_147333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5405, 37), self_147332, 'dtype')
            # Getting the type of 'np' (line 5405)
            np_147334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5405, 49), 'np', False)
            # Obtaining the member 'floating' of a type (line 5405)
            floating_147335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5405, 49), np_147334, 'floating')
            # Processing the call keyword arguments (line 5405)
            kwargs_147336 = {}
            # Getting the type of 'np' (line 5405)
            np_147330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5405, 23), 'np', False)
            # Obtaining the member 'issubdtype' of a type (line 5405)
            issubdtype_147331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5405, 23), np_147330, 'issubdtype')
            # Calling issubdtype(args, kwargs) (line 5405)
            issubdtype_call_result_147337 = invoke(stypy.reporting.localization.Localization(__file__, 5405, 23), issubdtype_147331, *[dtype_147333, floating_147335], **kwargs_147336)
            
            # Testing the type of an if condition (line 5405)
            if_condition_147338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5405, 20), issubdtype_call_result_147337)
            # Assigning a type to the variable 'if_condition_147338' (line 5405)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5405, 20), 'if_condition_147338', if_condition_147338)
            # SSA begins for if statement (line 5405)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Attribute to a Name (line 5406):
            
            # Assigning a Attribute to a Name (line 5406):
            # Getting the type of 'np' (line 5406)
            np_147339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5406, 33), 'np')
            # Obtaining the member 'nan' of a type (line 5406)
            nan_147340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5406, 33), np_147339, 'nan')
            # Assigning a type to the variable 'filler' (line 5406)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5406, 24), 'filler', nan_147340)
            # SSA branch for the else part of an if statement (line 5405)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 5408):
            
            # Assigning a Call to a Name (line 5408):
            
            # Call to minimum_fill_value(...): (line 5408)
            # Processing the call arguments (line 5408)
            # Getting the type of 'self' (line 5408)
            self_147342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5408, 52), 'self', False)
            # Processing the call keyword arguments (line 5408)
            kwargs_147343 = {}
            # Getting the type of 'minimum_fill_value' (line 5408)
            minimum_fill_value_147341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5408, 33), 'minimum_fill_value', False)
            # Calling minimum_fill_value(args, kwargs) (line 5408)
            minimum_fill_value_call_result_147344 = invoke(stypy.reporting.localization.Localization(__file__, 5408, 33), minimum_fill_value_147341, *[self_147342], **kwargs_147343)
            
            # Assigning a type to the variable 'filler' (line 5408)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5408, 24), 'filler', minimum_fill_value_call_result_147344)
            # SSA join for if statement (line 5405)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 5403)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 5410):
            
            # Assigning a Call to a Name (line 5410):
            
            # Call to maximum_fill_value(...): (line 5410)
            # Processing the call arguments (line 5410)
            # Getting the type of 'self' (line 5410)
            self_147346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5410, 48), 'self', False)
            # Processing the call keyword arguments (line 5410)
            kwargs_147347 = {}
            # Getting the type of 'maximum_fill_value' (line 5410)
            maximum_fill_value_147345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5410, 29), 'maximum_fill_value', False)
            # Calling maximum_fill_value(args, kwargs) (line 5410)
            maximum_fill_value_call_result_147348 = invoke(stypy.reporting.localization.Localization(__file__, 5410, 29), maximum_fill_value_147345, *[self_147346], **kwargs_147347)
            
            # Assigning a type to the variable 'filler' (line 5410)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5410, 20), 'filler', maximum_fill_value_call_result_147348)
            # SSA join for if statement (line 5403)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_147327:
                # Runtime conditional SSA for else branch (line 5402)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_147326) or more_types_in_union_147327):
            
            # Assigning a Name to a Name (line 5412):
            
            # Assigning a Name to a Name (line 5412):
            # Getting the type of 'fill_value' (line 5412)
            fill_value_147349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5412, 25), 'fill_value')
            # Assigning a type to the variable 'filler' (line 5412)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5412, 16), 'filler', fill_value_147349)

            if (may_be_147326 and more_types_in_union_147327):
                # SSA join for if statement (line 5402)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 5414):
        
        # Assigning a Call to a Name (line 5414):
        
        # Call to argsort(...): (line 5414)
        # Processing the call keyword arguments (line 5414)
        # Getting the type of 'axis' (line 5414)
        axis_147356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5414, 52), 'axis', False)
        keyword_147357 = axis_147356
        # Getting the type of 'kind' (line 5414)
        kind_147358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5414, 63), 'kind', False)
        keyword_147359 = kind_147358
        # Getting the type of 'order' (line 5415)
        order_147360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5415, 53), 'order', False)
        keyword_147361 = order_147360
        kwargs_147362 = {'kind': keyword_147359, 'order': keyword_147361, 'axis': keyword_147357}
        
        # Call to filled(...): (line 5414)
        # Processing the call arguments (line 5414)
        # Getting the type of 'filler' (line 5414)
        filler_147352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5414, 31), 'filler', False)
        # Processing the call keyword arguments (line 5414)
        kwargs_147353 = {}
        # Getting the type of 'self' (line 5414)
        self_147350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5414, 19), 'self', False)
        # Obtaining the member 'filled' of a type (line 5414)
        filled_147351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5414, 19), self_147350, 'filled')
        # Calling filled(args, kwargs) (line 5414)
        filled_call_result_147354 = invoke(stypy.reporting.localization.Localization(__file__, 5414, 19), filled_147351, *[filler_147352], **kwargs_147353)
        
        # Obtaining the member 'argsort' of a type (line 5414)
        argsort_147355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5414, 19), filled_call_result_147354, 'argsort')
        # Calling argsort(args, kwargs) (line 5414)
        argsort_call_result_147363 = invoke(stypy.reporting.localization.Localization(__file__, 5414, 19), argsort_147355, *[], **kwargs_147362)
        
        # Assigning a type to the variable 'sidx' (line 5414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5414, 12), 'sidx', argsort_call_result_147363)
        
        
        # Getting the type of 'self' (line 5417)
        self_147364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5417, 15), 'self')
        # Obtaining the member 'ndim' of a type (line 5417)
        ndim_147365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5417, 15), self_147364, 'ndim')
        int_147366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5417, 28), 'int')
        # Applying the binary operator '==' (line 5417)
        result_eq_147367 = python_operator(stypy.reporting.localization.Localization(__file__, 5417, 15), '==', ndim_147365, int_147366)
        
        # Testing the type of an if condition (line 5417)
        if_condition_147368 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5417, 12), result_eq_147367)
        # Assigning a type to the variable 'if_condition_147368' (line 5417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5417, 12), 'if_condition_147368', if_condition_147368)
        # SSA begins for if statement (line 5417)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 5418):
        
        # Assigning a Name to a Name (line 5418):
        # Getting the type of 'sidx' (line 5418)
        sidx_147369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5418, 22), 'sidx')
        # Assigning a type to the variable 'idx' (line 5418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5418, 16), 'idx', sidx_147369)
        # SSA branch for the else part of an if statement (line 5417)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 5420):
        
        # Assigning a Call to a Name (line 5420):
        
        # Call to meshgrid(...): (line 5420)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 5420)
        self_147377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5420, 58), 'self', False)
        # Obtaining the member 'shape' of a type (line 5420)
        shape_147378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5420, 58), self_147377, 'shape')
        comprehension_147379 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5420, 36), shape_147378)
        # Assigning a type to the variable 'x' (line 5420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5420, 36), 'x', comprehension_147379)
        
        # Call to arange(...): (line 5420)
        # Processing the call arguments (line 5420)
        # Getting the type of 'x' (line 5420)
        x_147374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5420, 46), 'x', False)
        # Processing the call keyword arguments (line 5420)
        kwargs_147375 = {}
        # Getting the type of 'np' (line 5420)
        np_147372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5420, 36), 'np', False)
        # Obtaining the member 'arange' of a type (line 5420)
        arange_147373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5420, 36), np_147372, 'arange')
        # Calling arange(args, kwargs) (line 5420)
        arange_call_result_147376 = invoke(stypy.reporting.localization.Localization(__file__, 5420, 36), arange_147373, *[x_147374], **kwargs_147375)
        
        list_147380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5420, 36), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5420, 36), list_147380, arange_call_result_147376)
        # Processing the call keyword arguments (line 5420)
        # Getting the type of 'True' (line 5420)
        True_147381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5420, 78), 'True', False)
        keyword_147382 = True_147381
        str_147383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5421, 43), 'str', 'ij')
        keyword_147384 = str_147383
        kwargs_147385 = {'indexing': keyword_147384, 'sparse': keyword_147382}
        # Getting the type of 'np' (line 5420)
        np_147370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5420, 22), 'np', False)
        # Obtaining the member 'meshgrid' of a type (line 5420)
        meshgrid_147371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5420, 22), np_147370, 'meshgrid')
        # Calling meshgrid(args, kwargs) (line 5420)
        meshgrid_call_result_147386 = invoke(stypy.reporting.localization.Localization(__file__, 5420, 22), meshgrid_147371, *[list_147380], **kwargs_147385)
        
        # Assigning a type to the variable 'idx' (line 5420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5420, 16), 'idx', meshgrid_call_result_147386)
        
        # Assigning a Name to a Subscript (line 5422):
        
        # Assigning a Name to a Subscript (line 5422):
        # Getting the type of 'sidx' (line 5422)
        sidx_147387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5422, 28), 'sidx')
        # Getting the type of 'idx' (line 5422)
        idx_147388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5422, 16), 'idx')
        # Getting the type of 'axis' (line 5422)
        axis_147389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5422, 20), 'axis')
        # Storing an element on a container (line 5422)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5422, 16), idx_147388, (axis_147389, sidx_147387))
        # SSA join for if statement (line 5417)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 5423):
        
        # Assigning a Attribute to a Name (line 5423):
        
        # Obtaining the type of the subscript
        # Getting the type of 'idx' (line 5423)
        idx_147390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5423, 34), 'idx')
        # Getting the type of 'self' (line 5423)
        self_147391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5423, 23), 'self')
        # Obtaining the member '_mask' of a type (line 5423)
        _mask_147392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5423, 23), self_147391, '_mask')
        # Obtaining the member '__getitem__' of a type (line 5423)
        getitem___147393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5423, 23), _mask_147392, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5423)
        subscript_call_result_147394 = invoke(stypy.reporting.localization.Localization(__file__, 5423, 23), getitem___147393, idx_147390)
        
        # Obtaining the member 'flat' of a type (line 5423)
        flat_147395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5423, 23), subscript_call_result_147394, 'flat')
        # Assigning a type to the variable 'tmp_mask' (line 5423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5423, 12), 'tmp_mask', flat_147395)
        
        # Assigning a Attribute to a Name (line 5424):
        
        # Assigning a Attribute to a Name (line 5424):
        
        # Obtaining the type of the subscript
        # Getting the type of 'idx' (line 5424)
        idx_147396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5424, 34), 'idx')
        # Getting the type of 'self' (line 5424)
        self_147397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5424, 23), 'self')
        # Obtaining the member '_data' of a type (line 5424)
        _data_147398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5424, 23), self_147397, '_data')
        # Obtaining the member '__getitem__' of a type (line 5424)
        getitem___147399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5424, 23), _data_147398, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5424)
        subscript_call_result_147400 = invoke(stypy.reporting.localization.Localization(__file__, 5424, 23), getitem___147399, idx_147396)
        
        # Obtaining the member 'flat' of a type (line 5424)
        flat_147401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5424, 23), subscript_call_result_147400, 'flat')
        # Assigning a type to the variable 'tmp_data' (line 5424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5424, 12), 'tmp_data', flat_147401)
        
        # Assigning a Name to a Attribute (line 5425):
        
        # Assigning a Name to a Attribute (line 5425):
        # Getting the type of 'tmp_data' (line 5425)
        tmp_data_147402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5425, 30), 'tmp_data')
        # Getting the type of 'self' (line 5425)
        self_147403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5425, 12), 'self')
        # Obtaining the member '_data' of a type (line 5425)
        _data_147404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5425, 12), self_147403, '_data')
        # Setting the type of the member 'flat' of a type (line 5425)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5425, 12), _data_147404, 'flat', tmp_data_147402)
        
        # Assigning a Name to a Attribute (line 5426):
        
        # Assigning a Name to a Attribute (line 5426):
        # Getting the type of 'tmp_mask' (line 5426)
        tmp_mask_147405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5426, 30), 'tmp_mask')
        # Getting the type of 'self' (line 5426)
        self_147406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5426, 12), 'self')
        # Obtaining the member '_mask' of a type (line 5426)
        _mask_147407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5426, 12), self_147406, '_mask')
        # Setting the type of the member 'flat' of a type (line 5426)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5426, 12), _mask_147407, 'flat', tmp_mask_147405)
        # SSA join for if statement (line 5397)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 5427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5427, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'sort(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'sort' in the type store
        # Getting the type of 'stypy_return_type' (line 5331)
        stypy_return_type_147408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5331, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147408)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'sort'
        return stypy_return_type_147408


    @norecursion
    def min(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5429)
        None_147409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5429, 23), 'None')
        # Getting the type of 'None' (line 5429)
        None_147410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5429, 33), 'None')
        # Getting the type of 'None' (line 5429)
        None_147411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5429, 50), 'None')
        defaults = [None_147409, None_147410, None_147411]
        # Create a new context for function 'min'
        module_type_store = module_type_store.open_function_context('min', 5429, 4, False)
        # Assigning a type to the variable 'self' (line 5430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5430, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.min.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.min.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.min.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.min.__dict__.__setitem__('stypy_function_name', 'MaskedArray.min')
        MaskedArray.min.__dict__.__setitem__('stypy_param_names_list', ['axis', 'out', 'fill_value'])
        MaskedArray.min.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.min.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.min.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.min.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.min.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.min.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.min', ['axis', 'out', 'fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'min', localization, ['axis', 'out', 'fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'min(...)' code ##################

        str_147412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5456, (-1)), 'str', '\n        Return the minimum along a given axis.\n\n        Parameters\n        ----------\n        axis : {None, int}, optional\n            Axis along which to operate.  By default, ``axis`` is None and the\n            flattened input is used.\n        out : array_like, optional\n            Alternative output array in which to place the result.  Must be of\n            the same shape and buffer length as the expected output.\n        fill_value : {var}, optional\n            Value used to fill in the masked values.\n            If None, use the output of `minimum_fill_value`.\n\n        Returns\n        -------\n        amin : array_like\n            New array holding the result.\n            If ``out`` was specified, ``out`` is returned.\n\n        See Also\n        --------\n        minimum_fill_value\n            Returns the minimum filling value for a given datatype.\n\n        ')
        
        # Assigning a Attribute to a Name (line 5457):
        
        # Assigning a Attribute to a Name (line 5457):
        # Getting the type of 'self' (line 5457)
        self_147413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5457, 16), 'self')
        # Obtaining the member '_mask' of a type (line 5457)
        _mask_147414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5457, 16), self_147413, '_mask')
        # Assigning a type to the variable '_mask' (line 5457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5457, 8), '_mask', _mask_147414)
        
        # Assigning a Call to a Name (line 5458):
        
        # Assigning a Call to a Name (line 5458):
        
        # Call to _check_mask_axis(...): (line 5458)
        # Processing the call arguments (line 5458)
        # Getting the type of '_mask' (line 5458)
        _mask_147416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5458, 35), '_mask', False)
        # Getting the type of 'axis' (line 5458)
        axis_147417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5458, 42), 'axis', False)
        # Processing the call keyword arguments (line 5458)
        kwargs_147418 = {}
        # Getting the type of '_check_mask_axis' (line 5458)
        _check_mask_axis_147415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5458, 18), '_check_mask_axis', False)
        # Calling _check_mask_axis(args, kwargs) (line 5458)
        _check_mask_axis_call_result_147419 = invoke(stypy.reporting.localization.Localization(__file__, 5458, 18), _check_mask_axis_147415, *[_mask_147416, axis_147417], **kwargs_147418)
        
        # Assigning a type to the variable 'newmask' (line 5458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5458, 8), 'newmask', _check_mask_axis_call_result_147419)
        
        # Type idiom detected: calculating its left and rigth part (line 5459)
        # Getting the type of 'fill_value' (line 5459)
        fill_value_147420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5459, 11), 'fill_value')
        # Getting the type of 'None' (line 5459)
        None_147421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5459, 25), 'None')
        
        (may_be_147422, more_types_in_union_147423) = may_be_none(fill_value_147420, None_147421)

        if may_be_147422:

            if more_types_in_union_147423:
                # Runtime conditional SSA (line 5459)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5460):
            
            # Assigning a Call to a Name (line 5460):
            
            # Call to minimum_fill_value(...): (line 5460)
            # Processing the call arguments (line 5460)
            # Getting the type of 'self' (line 5460)
            self_147425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5460, 44), 'self', False)
            # Processing the call keyword arguments (line 5460)
            kwargs_147426 = {}
            # Getting the type of 'minimum_fill_value' (line 5460)
            minimum_fill_value_147424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5460, 25), 'minimum_fill_value', False)
            # Calling minimum_fill_value(args, kwargs) (line 5460)
            minimum_fill_value_call_result_147427 = invoke(stypy.reporting.localization.Localization(__file__, 5460, 25), minimum_fill_value_147424, *[self_147425], **kwargs_147426)
            
            # Assigning a type to the variable 'fill_value' (line 5460)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5460, 12), 'fill_value', minimum_fill_value_call_result_147427)

            if more_types_in_union_147423:
                # SSA join for if statement (line 5459)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 5462)
        # Getting the type of 'out' (line 5462)
        out_147428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5462, 11), 'out')
        # Getting the type of 'None' (line 5462)
        None_147429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5462, 18), 'None')
        
        (may_be_147430, more_types_in_union_147431) = may_be_none(out_147428, None_147429)

        if may_be_147430:

            if more_types_in_union_147431:
                # Runtime conditional SSA (line 5462)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5463):
            
            # Assigning a Call to a Name (line 5463):
            
            # Call to view(...): (line 5463)
            # Processing the call arguments (line 5463)
            
            # Call to type(...): (line 5464)
            # Processing the call arguments (line 5464)
            # Getting the type of 'self' (line 5464)
            self_147446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5464, 46), 'self', False)
            # Processing the call keyword arguments (line 5464)
            kwargs_147447 = {}
            # Getting the type of 'type' (line 5464)
            type_147445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5464, 41), 'type', False)
            # Calling type(args, kwargs) (line 5464)
            type_call_result_147448 = invoke(stypy.reporting.localization.Localization(__file__, 5464, 41), type_147445, *[self_147446], **kwargs_147447)
            
            # Processing the call keyword arguments (line 5463)
            kwargs_147449 = {}
            
            # Call to min(...): (line 5463)
            # Processing the call keyword arguments (line 5463)
            # Getting the type of 'axis' (line 5464)
            axis_147438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5464, 21), 'axis', False)
            keyword_147439 = axis_147438
            # Getting the type of 'out' (line 5464)
            out_147440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5464, 31), 'out', False)
            keyword_147441 = out_147440
            kwargs_147442 = {'out': keyword_147441, 'axis': keyword_147439}
            
            # Call to filled(...): (line 5463)
            # Processing the call arguments (line 5463)
            # Getting the type of 'fill_value' (line 5463)
            fill_value_147434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5463, 33), 'fill_value', False)
            # Processing the call keyword arguments (line 5463)
            kwargs_147435 = {}
            # Getting the type of 'self' (line 5463)
            self_147432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5463, 21), 'self', False)
            # Obtaining the member 'filled' of a type (line 5463)
            filled_147433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5463, 21), self_147432, 'filled')
            # Calling filled(args, kwargs) (line 5463)
            filled_call_result_147436 = invoke(stypy.reporting.localization.Localization(__file__, 5463, 21), filled_147433, *[fill_value_147434], **kwargs_147435)
            
            # Obtaining the member 'min' of a type (line 5463)
            min_147437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5463, 21), filled_call_result_147436, 'min')
            # Calling min(args, kwargs) (line 5463)
            min_call_result_147443 = invoke(stypy.reporting.localization.Localization(__file__, 5463, 21), min_147437, *[], **kwargs_147442)
            
            # Obtaining the member 'view' of a type (line 5463)
            view_147444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5463, 21), min_call_result_147443, 'view')
            # Calling view(args, kwargs) (line 5463)
            view_call_result_147450 = invoke(stypy.reporting.localization.Localization(__file__, 5463, 21), view_147444, *[type_call_result_147448], **kwargs_147449)
            
            # Assigning a type to the variable 'result' (line 5463)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5463, 12), 'result', view_call_result_147450)
            
            # Getting the type of 'result' (line 5465)
            result_147451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5465, 15), 'result')
            # Obtaining the member 'ndim' of a type (line 5465)
            ndim_147452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5465, 15), result_147451, 'ndim')
            # Testing the type of an if condition (line 5465)
            if_condition_147453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5465, 12), ndim_147452)
            # Assigning a type to the variable 'if_condition_147453' (line 5465)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5465, 12), 'if_condition_147453', if_condition_147453)
            # SSA begins for if statement (line 5465)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __setmask__(...): (line 5467)
            # Processing the call arguments (line 5467)
            # Getting the type of 'newmask' (line 5467)
            newmask_147456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5467, 35), 'newmask', False)
            # Processing the call keyword arguments (line 5467)
            kwargs_147457 = {}
            # Getting the type of 'result' (line 5467)
            result_147454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5467, 16), 'result', False)
            # Obtaining the member '__setmask__' of a type (line 5467)
            setmask___147455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5467, 16), result_147454, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 5467)
            setmask___call_result_147458 = invoke(stypy.reporting.localization.Localization(__file__, 5467, 16), setmask___147455, *[newmask_147456], **kwargs_147457)
            
            
            # Getting the type of 'newmask' (line 5469)
            newmask_147459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5469, 19), 'newmask')
            # Obtaining the member 'ndim' of a type (line 5469)
            ndim_147460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5469, 19), newmask_147459, 'ndim')
            # Testing the type of an if condition (line 5469)
            if_condition_147461 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5469, 16), ndim_147460)
            # Assigning a type to the variable 'if_condition_147461' (line 5469)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5469, 16), 'if_condition_147461', if_condition_147461)
            # SSA begins for if statement (line 5469)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to copyto(...): (line 5470)
            # Processing the call arguments (line 5470)
            # Getting the type of 'result' (line 5470)
            result_147464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5470, 30), 'result', False)
            # Getting the type of 'result' (line 5470)
            result_147465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5470, 38), 'result', False)
            # Obtaining the member 'fill_value' of a type (line 5470)
            fill_value_147466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5470, 38), result_147465, 'fill_value')
            # Processing the call keyword arguments (line 5470)
            # Getting the type of 'newmask' (line 5470)
            newmask_147467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5470, 63), 'newmask', False)
            keyword_147468 = newmask_147467
            kwargs_147469 = {'where': keyword_147468}
            # Getting the type of 'np' (line 5470)
            np_147462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5470, 20), 'np', False)
            # Obtaining the member 'copyto' of a type (line 5470)
            copyto_147463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5470, 20), np_147462, 'copyto')
            # Calling copyto(args, kwargs) (line 5470)
            copyto_call_result_147470 = invoke(stypy.reporting.localization.Localization(__file__, 5470, 20), copyto_147463, *[result_147464, fill_value_147466], **kwargs_147469)
            
            # SSA join for if statement (line 5469)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 5465)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'newmask' (line 5471)
            newmask_147471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5471, 17), 'newmask')
            # Testing the type of an if condition (line 5471)
            if_condition_147472 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5471, 17), newmask_147471)
            # Assigning a type to the variable 'if_condition_147472' (line 5471)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5471, 17), 'if_condition_147472', if_condition_147472)
            # SSA begins for if statement (line 5471)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 5472):
            
            # Assigning a Name to a Name (line 5472):
            # Getting the type of 'masked' (line 5472)
            masked_147473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5472, 25), 'masked')
            # Assigning a type to the variable 'result' (line 5472)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5472, 16), 'result', masked_147473)
            # SSA join for if statement (line 5471)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 5465)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'result' (line 5473)
            result_147474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5473, 19), 'result')
            # Assigning a type to the variable 'stypy_return_type' (line 5473)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5473, 12), 'stypy_return_type', result_147474)

            if more_types_in_union_147431:
                # SSA join for if statement (line 5462)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 5475):
        
        # Assigning a Call to a Name (line 5475):
        
        # Call to min(...): (line 5475)
        # Processing the call keyword arguments (line 5475)
        # Getting the type of 'axis' (line 5475)
        axis_147481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5475, 50), 'axis', False)
        keyword_147482 = axis_147481
        # Getting the type of 'out' (line 5475)
        out_147483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5475, 60), 'out', False)
        keyword_147484 = out_147483
        kwargs_147485 = {'out': keyword_147484, 'axis': keyword_147482}
        
        # Call to filled(...): (line 5475)
        # Processing the call arguments (line 5475)
        # Getting the type of 'fill_value' (line 5475)
        fill_value_147477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5475, 29), 'fill_value', False)
        # Processing the call keyword arguments (line 5475)
        kwargs_147478 = {}
        # Getting the type of 'self' (line 5475)
        self_147475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5475, 17), 'self', False)
        # Obtaining the member 'filled' of a type (line 5475)
        filled_147476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5475, 17), self_147475, 'filled')
        # Calling filled(args, kwargs) (line 5475)
        filled_call_result_147479 = invoke(stypy.reporting.localization.Localization(__file__, 5475, 17), filled_147476, *[fill_value_147477], **kwargs_147478)
        
        # Obtaining the member 'min' of a type (line 5475)
        min_147480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5475, 17), filled_call_result_147479, 'min')
        # Calling min(args, kwargs) (line 5475)
        min_call_result_147486 = invoke(stypy.reporting.localization.Localization(__file__, 5475, 17), min_147480, *[], **kwargs_147485)
        
        # Assigning a type to the variable 'result' (line 5475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5475, 8), 'result', min_call_result_147486)
        
        
        # Call to isinstance(...): (line 5476)
        # Processing the call arguments (line 5476)
        # Getting the type of 'out' (line 5476)
        out_147488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5476, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 5476)
        MaskedArray_147489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5476, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 5476)
        kwargs_147490 = {}
        # Getting the type of 'isinstance' (line 5476)
        isinstance_147487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5476, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 5476)
        isinstance_call_result_147491 = invoke(stypy.reporting.localization.Localization(__file__, 5476, 11), isinstance_147487, *[out_147488, MaskedArray_147489], **kwargs_147490)
        
        # Testing the type of an if condition (line 5476)
        if_condition_147492 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5476, 8), isinstance_call_result_147491)
        # Assigning a type to the variable 'if_condition_147492' (line 5476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5476, 8), 'if_condition_147492', if_condition_147492)
        # SSA begins for if statement (line 5476)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 5477):
        
        # Assigning a Call to a Name (line 5477):
        
        # Call to getattr(...): (line 5477)
        # Processing the call arguments (line 5477)
        # Getting the type of 'out' (line 5477)
        out_147494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5477, 30), 'out', False)
        str_147495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5477, 35), 'str', '_mask')
        # Getting the type of 'nomask' (line 5477)
        nomask_147496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5477, 44), 'nomask', False)
        # Processing the call keyword arguments (line 5477)
        kwargs_147497 = {}
        # Getting the type of 'getattr' (line 5477)
        getattr_147493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5477, 22), 'getattr', False)
        # Calling getattr(args, kwargs) (line 5477)
        getattr_call_result_147498 = invoke(stypy.reporting.localization.Localization(__file__, 5477, 22), getattr_147493, *[out_147494, str_147495, nomask_147496], **kwargs_147497)
        
        # Assigning a type to the variable 'outmask' (line 5477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5477, 12), 'outmask', getattr_call_result_147498)
        
        
        # Getting the type of 'outmask' (line 5478)
        outmask_147499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5478, 16), 'outmask')
        # Getting the type of 'nomask' (line 5478)
        nomask_147500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5478, 27), 'nomask')
        # Applying the binary operator 'is' (line 5478)
        result_is__147501 = python_operator(stypy.reporting.localization.Localization(__file__, 5478, 16), 'is', outmask_147499, nomask_147500)
        
        # Testing the type of an if condition (line 5478)
        if_condition_147502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5478, 12), result_is__147501)
        # Assigning a type to the variable 'if_condition_147502' (line 5478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5478, 12), 'if_condition_147502', if_condition_147502)
        # SSA begins for if statement (line 5478)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 5479):
        
        # Call to make_mask_none(...): (line 5479)
        # Processing the call arguments (line 5479)
        # Getting the type of 'out' (line 5479)
        out_147504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5479, 53), 'out', False)
        # Obtaining the member 'shape' of a type (line 5479)
        shape_147505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5479, 53), out_147504, 'shape')
        # Processing the call keyword arguments (line 5479)
        kwargs_147506 = {}
        # Getting the type of 'make_mask_none' (line 5479)
        make_mask_none_147503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5479, 38), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 5479)
        make_mask_none_call_result_147507 = invoke(stypy.reporting.localization.Localization(__file__, 5479, 38), make_mask_none_147503, *[shape_147505], **kwargs_147506)
        
        # Getting the type of 'out' (line 5479)
        out_147508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5479, 26), 'out')
        # Setting the type of the member '_mask' of a type (line 5479)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5479, 26), out_147508, '_mask', make_mask_none_call_result_147507)
        
        # Assigning a Attribute to a Name (line 5479):
        # Getting the type of 'out' (line 5479)
        out_147509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5479, 26), 'out')
        # Obtaining the member '_mask' of a type (line 5479)
        _mask_147510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5479, 26), out_147509, '_mask')
        # Assigning a type to the variable 'outmask' (line 5479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5479, 16), 'outmask', _mask_147510)
        # SSA join for if statement (line 5478)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 5480):
        
        # Assigning a Name to a Attribute (line 5480):
        # Getting the type of 'newmask' (line 5480)
        newmask_147511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5480, 27), 'newmask')
        # Getting the type of 'outmask' (line 5480)
        outmask_147512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5480, 12), 'outmask')
        # Setting the type of the member 'flat' of a type (line 5480)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5480, 12), outmask_147512, 'flat', newmask_147511)
        # SSA branch for the else part of an if statement (line 5476)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'out' (line 5482)
        out_147513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5482, 15), 'out')
        # Obtaining the member 'dtype' of a type (line 5482)
        dtype_147514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5482, 15), out_147513, 'dtype')
        # Obtaining the member 'kind' of a type (line 5482)
        kind_147515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5482, 15), dtype_147514, 'kind')
        str_147516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5482, 33), 'str', 'biu')
        # Applying the binary operator 'in' (line 5482)
        result_contains_147517 = python_operator(stypy.reporting.localization.Localization(__file__, 5482, 15), 'in', kind_147515, str_147516)
        
        # Testing the type of an if condition (line 5482)
        if_condition_147518 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5482, 12), result_contains_147517)
        # Assigning a type to the variable 'if_condition_147518' (line 5482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5482, 12), 'if_condition_147518', if_condition_147518)
        # SSA begins for if statement (line 5482)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 5483):
        
        # Assigning a Str to a Name (line 5483):
        str_147519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5483, 25), 'str', 'Masked data information would be lost in one or more location.')
        # Assigning a type to the variable 'errmsg' (line 5483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5483, 16), 'errmsg', str_147519)
        
        # Call to MaskError(...): (line 5485)
        # Processing the call arguments (line 5485)
        # Getting the type of 'errmsg' (line 5485)
        errmsg_147521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5485, 32), 'errmsg', False)
        # Processing the call keyword arguments (line 5485)
        kwargs_147522 = {}
        # Getting the type of 'MaskError' (line 5485)
        MaskError_147520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5485, 22), 'MaskError', False)
        # Calling MaskError(args, kwargs) (line 5485)
        MaskError_call_result_147523 = invoke(stypy.reporting.localization.Localization(__file__, 5485, 22), MaskError_147520, *[errmsg_147521], **kwargs_147522)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5485, 16), MaskError_call_result_147523, 'raise parameter', BaseException)
        # SSA join for if statement (line 5482)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to copyto(...): (line 5486)
        # Processing the call arguments (line 5486)
        # Getting the type of 'out' (line 5486)
        out_147526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5486, 22), 'out', False)
        # Getting the type of 'np' (line 5486)
        np_147527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5486, 27), 'np', False)
        # Obtaining the member 'nan' of a type (line 5486)
        nan_147528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5486, 27), np_147527, 'nan')
        # Processing the call keyword arguments (line 5486)
        # Getting the type of 'newmask' (line 5486)
        newmask_147529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5486, 41), 'newmask', False)
        keyword_147530 = newmask_147529
        kwargs_147531 = {'where': keyword_147530}
        # Getting the type of 'np' (line 5486)
        np_147524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5486, 12), 'np', False)
        # Obtaining the member 'copyto' of a type (line 5486)
        copyto_147525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5486, 12), np_147524, 'copyto')
        # Calling copyto(args, kwargs) (line 5486)
        copyto_call_result_147532 = invoke(stypy.reporting.localization.Localization(__file__, 5486, 12), copyto_147525, *[out_147526, nan_147528], **kwargs_147531)
        
        # SSA join for if statement (line 5476)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 5487)
        out_147533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5487, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 5487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5487, 8), 'stypy_return_type', out_147533)
        
        # ################# End of 'min(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'min' in the type store
        # Getting the type of 'stypy_return_type' (line 5429)
        stypy_return_type_147534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5429, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147534)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'min'
        return stypy_return_type_147534


    @norecursion
    def mini(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5489)
        None_147535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5489, 24), 'None')
        defaults = [None_147535]
        # Create a new context for function 'mini'
        module_type_store = module_type_store.open_function_context('mini', 5489, 4, False)
        # Assigning a type to the variable 'self' (line 5490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5490, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.mini.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.mini.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.mini.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.mini.__dict__.__setitem__('stypy_function_name', 'MaskedArray.mini')
        MaskedArray.mini.__dict__.__setitem__('stypy_param_names_list', ['axis'])
        MaskedArray.mini.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.mini.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.mini.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.mini.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.mini.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.mini.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.mini', ['axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mini', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mini(...)' code ##################

        str_147536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5522, (-1)), 'str', '\n        Return the array minimum along the specified axis.\n\n        Parameters\n        ----------\n        axis : int, optional\n            The axis along which to find the minima. Default is None, in which case\n            the minimum value in the whole array is returned.\n\n        Returns\n        -------\n        min : scalar or MaskedArray\n            If `axis` is None, the result is a scalar. Otherwise, if `axis` is\n            given and the array is at least 2-D, the result is a masked array with\n            dimension one smaller than the array on which `mini` is called.\n\n        Examples\n        --------\n        >>> x = np.ma.array(np.arange(6), mask=[0 ,1, 0, 0, 0 ,1]).reshape(3, 2)\n        >>> print(x)\n        [[0 --]\n         [2 3]\n         [4 --]]\n        >>> x.mini()\n        0\n        >>> x.mini(axis=0)\n        masked_array(data = [0 3],\n                     mask = [False False],\n               fill_value = 999999)\n        >>> print(x.mini(axis=1))\n        [0 2 4]\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 5523)
        # Getting the type of 'axis' (line 5523)
        axis_147537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5523, 11), 'axis')
        # Getting the type of 'None' (line 5523)
        None_147538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5523, 19), 'None')
        
        (may_be_147539, more_types_in_union_147540) = may_be_none(axis_147537, None_147538)

        if may_be_147539:

            if more_types_in_union_147540:
                # Runtime conditional SSA (line 5523)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to minimum(...): (line 5524)
            # Processing the call arguments (line 5524)
            # Getting the type of 'self' (line 5524)
            self_147542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5524, 27), 'self', False)
            # Processing the call keyword arguments (line 5524)
            kwargs_147543 = {}
            # Getting the type of 'minimum' (line 5524)
            minimum_147541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5524, 19), 'minimum', False)
            # Calling minimum(args, kwargs) (line 5524)
            minimum_call_result_147544 = invoke(stypy.reporting.localization.Localization(__file__, 5524, 19), minimum_147541, *[self_147542], **kwargs_147543)
            
            # Assigning a type to the variable 'stypy_return_type' (line 5524)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5524, 12), 'stypy_return_type', minimum_call_result_147544)

            if more_types_in_union_147540:
                # Runtime conditional SSA for else branch (line 5523)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_147539) or more_types_in_union_147540):
            
            # Call to reduce(...): (line 5526)
            # Processing the call arguments (line 5526)
            # Getting the type of 'self' (line 5526)
            self_147547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5526, 34), 'self', False)
            # Getting the type of 'axis' (line 5526)
            axis_147548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5526, 40), 'axis', False)
            # Processing the call keyword arguments (line 5526)
            kwargs_147549 = {}
            # Getting the type of 'minimum' (line 5526)
            minimum_147545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5526, 19), 'minimum', False)
            # Obtaining the member 'reduce' of a type (line 5526)
            reduce_147546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5526, 19), minimum_147545, 'reduce')
            # Calling reduce(args, kwargs) (line 5526)
            reduce_call_result_147550 = invoke(stypy.reporting.localization.Localization(__file__, 5526, 19), reduce_147546, *[self_147547, axis_147548], **kwargs_147549)
            
            # Assigning a type to the variable 'stypy_return_type' (line 5526)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5526, 12), 'stypy_return_type', reduce_call_result_147550)

            if (may_be_147539 and more_types_in_union_147540):
                # SSA join for if statement (line 5523)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'mini(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mini' in the type store
        # Getting the type of 'stypy_return_type' (line 5489)
        stypy_return_type_147551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5489, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147551)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mini'
        return stypy_return_type_147551


    @norecursion
    def max(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5528)
        None_147552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5528, 23), 'None')
        # Getting the type of 'None' (line 5528)
        None_147553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5528, 33), 'None')
        # Getting the type of 'None' (line 5528)
        None_147554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5528, 50), 'None')
        defaults = [None_147552, None_147553, None_147554]
        # Create a new context for function 'max'
        module_type_store = module_type_store.open_function_context('max', 5528, 4, False)
        # Assigning a type to the variable 'self' (line 5529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5529, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.max.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.max.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.max.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.max.__dict__.__setitem__('stypy_function_name', 'MaskedArray.max')
        MaskedArray.max.__dict__.__setitem__('stypy_param_names_list', ['axis', 'out', 'fill_value'])
        MaskedArray.max.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.max.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.max.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.max.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.max.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.max.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.max', ['axis', 'out', 'fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'max', localization, ['axis', 'out', 'fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'max(...)' code ##################

        str_147555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5555, (-1)), 'str', '\n        Return the maximum along a given axis.\n\n        Parameters\n        ----------\n        axis : {None, int}, optional\n            Axis along which to operate.  By default, ``axis`` is None and the\n            flattened input is used.\n        out : array_like, optional\n            Alternative output array in which to place the result.  Must\n            be of the same shape and buffer length as the expected output.\n        fill_value : {var}, optional\n            Value used to fill in the masked values.\n            If None, use the output of maximum_fill_value().\n\n        Returns\n        -------\n        amax : array_like\n            New array holding the result.\n            If ``out`` was specified, ``out`` is returned.\n\n        See Also\n        --------\n        maximum_fill_value\n            Returns the maximum filling value for a given datatype.\n\n        ')
        
        # Assigning a Attribute to a Name (line 5556):
        
        # Assigning a Attribute to a Name (line 5556):
        # Getting the type of 'self' (line 5556)
        self_147556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5556, 16), 'self')
        # Obtaining the member '_mask' of a type (line 5556)
        _mask_147557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5556, 16), self_147556, '_mask')
        # Assigning a type to the variable '_mask' (line 5556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5556, 8), '_mask', _mask_147557)
        
        # Assigning a Call to a Name (line 5557):
        
        # Assigning a Call to a Name (line 5557):
        
        # Call to _check_mask_axis(...): (line 5557)
        # Processing the call arguments (line 5557)
        # Getting the type of '_mask' (line 5557)
        _mask_147559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5557, 35), '_mask', False)
        # Getting the type of 'axis' (line 5557)
        axis_147560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5557, 42), 'axis', False)
        # Processing the call keyword arguments (line 5557)
        kwargs_147561 = {}
        # Getting the type of '_check_mask_axis' (line 5557)
        _check_mask_axis_147558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5557, 18), '_check_mask_axis', False)
        # Calling _check_mask_axis(args, kwargs) (line 5557)
        _check_mask_axis_call_result_147562 = invoke(stypy.reporting.localization.Localization(__file__, 5557, 18), _check_mask_axis_147558, *[_mask_147559, axis_147560], **kwargs_147561)
        
        # Assigning a type to the variable 'newmask' (line 5557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5557, 8), 'newmask', _check_mask_axis_call_result_147562)
        
        # Type idiom detected: calculating its left and rigth part (line 5558)
        # Getting the type of 'fill_value' (line 5558)
        fill_value_147563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5558, 11), 'fill_value')
        # Getting the type of 'None' (line 5558)
        None_147564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5558, 25), 'None')
        
        (may_be_147565, more_types_in_union_147566) = may_be_none(fill_value_147563, None_147564)

        if may_be_147565:

            if more_types_in_union_147566:
                # Runtime conditional SSA (line 5558)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5559):
            
            # Assigning a Call to a Name (line 5559):
            
            # Call to maximum_fill_value(...): (line 5559)
            # Processing the call arguments (line 5559)
            # Getting the type of 'self' (line 5559)
            self_147568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5559, 44), 'self', False)
            # Processing the call keyword arguments (line 5559)
            kwargs_147569 = {}
            # Getting the type of 'maximum_fill_value' (line 5559)
            maximum_fill_value_147567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5559, 25), 'maximum_fill_value', False)
            # Calling maximum_fill_value(args, kwargs) (line 5559)
            maximum_fill_value_call_result_147570 = invoke(stypy.reporting.localization.Localization(__file__, 5559, 25), maximum_fill_value_147567, *[self_147568], **kwargs_147569)
            
            # Assigning a type to the variable 'fill_value' (line 5559)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5559, 12), 'fill_value', maximum_fill_value_call_result_147570)

            if more_types_in_union_147566:
                # SSA join for if statement (line 5558)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 5561)
        # Getting the type of 'out' (line 5561)
        out_147571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5561, 11), 'out')
        # Getting the type of 'None' (line 5561)
        None_147572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5561, 18), 'None')
        
        (may_be_147573, more_types_in_union_147574) = may_be_none(out_147571, None_147572)

        if may_be_147573:

            if more_types_in_union_147574:
                # Runtime conditional SSA (line 5561)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5562):
            
            # Assigning a Call to a Name (line 5562):
            
            # Call to view(...): (line 5562)
            # Processing the call arguments (line 5562)
            
            # Call to type(...): (line 5563)
            # Processing the call arguments (line 5563)
            # Getting the type of 'self' (line 5563)
            self_147589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5563, 46), 'self', False)
            # Processing the call keyword arguments (line 5563)
            kwargs_147590 = {}
            # Getting the type of 'type' (line 5563)
            type_147588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5563, 41), 'type', False)
            # Calling type(args, kwargs) (line 5563)
            type_call_result_147591 = invoke(stypy.reporting.localization.Localization(__file__, 5563, 41), type_147588, *[self_147589], **kwargs_147590)
            
            # Processing the call keyword arguments (line 5562)
            kwargs_147592 = {}
            
            # Call to max(...): (line 5562)
            # Processing the call keyword arguments (line 5562)
            # Getting the type of 'axis' (line 5563)
            axis_147581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5563, 21), 'axis', False)
            keyword_147582 = axis_147581
            # Getting the type of 'out' (line 5563)
            out_147583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5563, 31), 'out', False)
            keyword_147584 = out_147583
            kwargs_147585 = {'out': keyword_147584, 'axis': keyword_147582}
            
            # Call to filled(...): (line 5562)
            # Processing the call arguments (line 5562)
            # Getting the type of 'fill_value' (line 5562)
            fill_value_147577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5562, 33), 'fill_value', False)
            # Processing the call keyword arguments (line 5562)
            kwargs_147578 = {}
            # Getting the type of 'self' (line 5562)
            self_147575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5562, 21), 'self', False)
            # Obtaining the member 'filled' of a type (line 5562)
            filled_147576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5562, 21), self_147575, 'filled')
            # Calling filled(args, kwargs) (line 5562)
            filled_call_result_147579 = invoke(stypy.reporting.localization.Localization(__file__, 5562, 21), filled_147576, *[fill_value_147577], **kwargs_147578)
            
            # Obtaining the member 'max' of a type (line 5562)
            max_147580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5562, 21), filled_call_result_147579, 'max')
            # Calling max(args, kwargs) (line 5562)
            max_call_result_147586 = invoke(stypy.reporting.localization.Localization(__file__, 5562, 21), max_147580, *[], **kwargs_147585)
            
            # Obtaining the member 'view' of a type (line 5562)
            view_147587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5562, 21), max_call_result_147586, 'view')
            # Calling view(args, kwargs) (line 5562)
            view_call_result_147593 = invoke(stypy.reporting.localization.Localization(__file__, 5562, 21), view_147587, *[type_call_result_147591], **kwargs_147592)
            
            # Assigning a type to the variable 'result' (line 5562)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5562, 12), 'result', view_call_result_147593)
            
            # Getting the type of 'result' (line 5564)
            result_147594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5564, 15), 'result')
            # Obtaining the member 'ndim' of a type (line 5564)
            ndim_147595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5564, 15), result_147594, 'ndim')
            # Testing the type of an if condition (line 5564)
            if_condition_147596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5564, 12), ndim_147595)
            # Assigning a type to the variable 'if_condition_147596' (line 5564)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5564, 12), 'if_condition_147596', if_condition_147596)
            # SSA begins for if statement (line 5564)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to __setmask__(...): (line 5566)
            # Processing the call arguments (line 5566)
            # Getting the type of 'newmask' (line 5566)
            newmask_147599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5566, 35), 'newmask', False)
            # Processing the call keyword arguments (line 5566)
            kwargs_147600 = {}
            # Getting the type of 'result' (line 5566)
            result_147597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5566, 16), 'result', False)
            # Obtaining the member '__setmask__' of a type (line 5566)
            setmask___147598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5566, 16), result_147597, '__setmask__')
            # Calling __setmask__(args, kwargs) (line 5566)
            setmask___call_result_147601 = invoke(stypy.reporting.localization.Localization(__file__, 5566, 16), setmask___147598, *[newmask_147599], **kwargs_147600)
            
            
            # Getting the type of 'newmask' (line 5568)
            newmask_147602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5568, 19), 'newmask')
            # Obtaining the member 'ndim' of a type (line 5568)
            ndim_147603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5568, 19), newmask_147602, 'ndim')
            # Testing the type of an if condition (line 5568)
            if_condition_147604 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5568, 16), ndim_147603)
            # Assigning a type to the variable 'if_condition_147604' (line 5568)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5568, 16), 'if_condition_147604', if_condition_147604)
            # SSA begins for if statement (line 5568)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to copyto(...): (line 5569)
            # Processing the call arguments (line 5569)
            # Getting the type of 'result' (line 5569)
            result_147607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5569, 30), 'result', False)
            # Getting the type of 'result' (line 5569)
            result_147608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5569, 38), 'result', False)
            # Obtaining the member 'fill_value' of a type (line 5569)
            fill_value_147609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5569, 38), result_147608, 'fill_value')
            # Processing the call keyword arguments (line 5569)
            # Getting the type of 'newmask' (line 5569)
            newmask_147610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5569, 63), 'newmask', False)
            keyword_147611 = newmask_147610
            kwargs_147612 = {'where': keyword_147611}
            # Getting the type of 'np' (line 5569)
            np_147605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5569, 20), 'np', False)
            # Obtaining the member 'copyto' of a type (line 5569)
            copyto_147606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5569, 20), np_147605, 'copyto')
            # Calling copyto(args, kwargs) (line 5569)
            copyto_call_result_147613 = invoke(stypy.reporting.localization.Localization(__file__, 5569, 20), copyto_147606, *[result_147607, fill_value_147609], **kwargs_147612)
            
            # SSA join for if statement (line 5568)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 5564)
            module_type_store.open_ssa_branch('else')
            
            # Getting the type of 'newmask' (line 5570)
            newmask_147614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5570, 17), 'newmask')
            # Testing the type of an if condition (line 5570)
            if_condition_147615 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5570, 17), newmask_147614)
            # Assigning a type to the variable 'if_condition_147615' (line 5570)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5570, 17), 'if_condition_147615', if_condition_147615)
            # SSA begins for if statement (line 5570)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 5571):
            
            # Assigning a Name to a Name (line 5571):
            # Getting the type of 'masked' (line 5571)
            masked_147616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5571, 25), 'masked')
            # Assigning a type to the variable 'result' (line 5571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5571, 16), 'result', masked_147616)
            # SSA join for if statement (line 5570)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 5564)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'result' (line 5572)
            result_147617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5572, 19), 'result')
            # Assigning a type to the variable 'stypy_return_type' (line 5572)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5572, 12), 'stypy_return_type', result_147617)

            if more_types_in_union_147574:
                # SSA join for if statement (line 5561)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 5574):
        
        # Assigning a Call to a Name (line 5574):
        
        # Call to max(...): (line 5574)
        # Processing the call keyword arguments (line 5574)
        # Getting the type of 'axis' (line 5574)
        axis_147624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 50), 'axis', False)
        keyword_147625 = axis_147624
        # Getting the type of 'out' (line 5574)
        out_147626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 60), 'out', False)
        keyword_147627 = out_147626
        kwargs_147628 = {'out': keyword_147627, 'axis': keyword_147625}
        
        # Call to filled(...): (line 5574)
        # Processing the call arguments (line 5574)
        # Getting the type of 'fill_value' (line 5574)
        fill_value_147620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 29), 'fill_value', False)
        # Processing the call keyword arguments (line 5574)
        kwargs_147621 = {}
        # Getting the type of 'self' (line 5574)
        self_147618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5574, 17), 'self', False)
        # Obtaining the member 'filled' of a type (line 5574)
        filled_147619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5574, 17), self_147618, 'filled')
        # Calling filled(args, kwargs) (line 5574)
        filled_call_result_147622 = invoke(stypy.reporting.localization.Localization(__file__, 5574, 17), filled_147619, *[fill_value_147620], **kwargs_147621)
        
        # Obtaining the member 'max' of a type (line 5574)
        max_147623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5574, 17), filled_call_result_147622, 'max')
        # Calling max(args, kwargs) (line 5574)
        max_call_result_147629 = invoke(stypy.reporting.localization.Localization(__file__, 5574, 17), max_147623, *[], **kwargs_147628)
        
        # Assigning a type to the variable 'result' (line 5574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5574, 8), 'result', max_call_result_147629)
        
        
        # Call to isinstance(...): (line 5575)
        # Processing the call arguments (line 5575)
        # Getting the type of 'out' (line 5575)
        out_147631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5575, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 5575)
        MaskedArray_147632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5575, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 5575)
        kwargs_147633 = {}
        # Getting the type of 'isinstance' (line 5575)
        isinstance_147630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5575, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 5575)
        isinstance_call_result_147634 = invoke(stypy.reporting.localization.Localization(__file__, 5575, 11), isinstance_147630, *[out_147631, MaskedArray_147632], **kwargs_147633)
        
        # Testing the type of an if condition (line 5575)
        if_condition_147635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5575, 8), isinstance_call_result_147634)
        # Assigning a type to the variable 'if_condition_147635' (line 5575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5575, 8), 'if_condition_147635', if_condition_147635)
        # SSA begins for if statement (line 5575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 5576):
        
        # Assigning a Call to a Name (line 5576):
        
        # Call to getattr(...): (line 5576)
        # Processing the call arguments (line 5576)
        # Getting the type of 'out' (line 5576)
        out_147637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5576, 30), 'out', False)
        str_147638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5576, 35), 'str', '_mask')
        # Getting the type of 'nomask' (line 5576)
        nomask_147639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5576, 44), 'nomask', False)
        # Processing the call keyword arguments (line 5576)
        kwargs_147640 = {}
        # Getting the type of 'getattr' (line 5576)
        getattr_147636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5576, 22), 'getattr', False)
        # Calling getattr(args, kwargs) (line 5576)
        getattr_call_result_147641 = invoke(stypy.reporting.localization.Localization(__file__, 5576, 22), getattr_147636, *[out_147637, str_147638, nomask_147639], **kwargs_147640)
        
        # Assigning a type to the variable 'outmask' (line 5576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5576, 12), 'outmask', getattr_call_result_147641)
        
        
        # Getting the type of 'outmask' (line 5577)
        outmask_147642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5577, 16), 'outmask')
        # Getting the type of 'nomask' (line 5577)
        nomask_147643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5577, 27), 'nomask')
        # Applying the binary operator 'is' (line 5577)
        result_is__147644 = python_operator(stypy.reporting.localization.Localization(__file__, 5577, 16), 'is', outmask_147642, nomask_147643)
        
        # Testing the type of an if condition (line 5577)
        if_condition_147645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5577, 12), result_is__147644)
        # Assigning a type to the variable 'if_condition_147645' (line 5577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5577, 12), 'if_condition_147645', if_condition_147645)
        # SSA begins for if statement (line 5577)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 5578):
        
        # Call to make_mask_none(...): (line 5578)
        # Processing the call arguments (line 5578)
        # Getting the type of 'out' (line 5578)
        out_147647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5578, 53), 'out', False)
        # Obtaining the member 'shape' of a type (line 5578)
        shape_147648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5578, 53), out_147647, 'shape')
        # Processing the call keyword arguments (line 5578)
        kwargs_147649 = {}
        # Getting the type of 'make_mask_none' (line 5578)
        make_mask_none_147646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5578, 38), 'make_mask_none', False)
        # Calling make_mask_none(args, kwargs) (line 5578)
        make_mask_none_call_result_147650 = invoke(stypy.reporting.localization.Localization(__file__, 5578, 38), make_mask_none_147646, *[shape_147648], **kwargs_147649)
        
        # Getting the type of 'out' (line 5578)
        out_147651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5578, 26), 'out')
        # Setting the type of the member '_mask' of a type (line 5578)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5578, 26), out_147651, '_mask', make_mask_none_call_result_147650)
        
        # Assigning a Attribute to a Name (line 5578):
        # Getting the type of 'out' (line 5578)
        out_147652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5578, 26), 'out')
        # Obtaining the member '_mask' of a type (line 5578)
        _mask_147653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5578, 26), out_147652, '_mask')
        # Assigning a type to the variable 'outmask' (line 5578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5578, 16), 'outmask', _mask_147653)
        # SSA join for if statement (line 5577)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 5579):
        
        # Assigning a Name to a Attribute (line 5579):
        # Getting the type of 'newmask' (line 5579)
        newmask_147654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5579, 27), 'newmask')
        # Getting the type of 'outmask' (line 5579)
        outmask_147655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5579, 12), 'outmask')
        # Setting the type of the member 'flat' of a type (line 5579)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5579, 12), outmask_147655, 'flat', newmask_147654)
        # SSA branch for the else part of an if statement (line 5575)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'out' (line 5582)
        out_147656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5582, 15), 'out')
        # Obtaining the member 'dtype' of a type (line 5582)
        dtype_147657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5582, 15), out_147656, 'dtype')
        # Obtaining the member 'kind' of a type (line 5582)
        kind_147658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5582, 15), dtype_147657, 'kind')
        str_147659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5582, 33), 'str', 'biu')
        # Applying the binary operator 'in' (line 5582)
        result_contains_147660 = python_operator(stypy.reporting.localization.Localization(__file__, 5582, 15), 'in', kind_147658, str_147659)
        
        # Testing the type of an if condition (line 5582)
        if_condition_147661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5582, 12), result_contains_147660)
        # Assigning a type to the variable 'if_condition_147661' (line 5582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5582, 12), 'if_condition_147661', if_condition_147661)
        # SSA begins for if statement (line 5582)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 5583):
        
        # Assigning a Str to a Name (line 5583):
        str_147662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5583, 25), 'str', 'Masked data information would be lost in one or more location.')
        # Assigning a type to the variable 'errmsg' (line 5583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5583, 16), 'errmsg', str_147662)
        
        # Call to MaskError(...): (line 5585)
        # Processing the call arguments (line 5585)
        # Getting the type of 'errmsg' (line 5585)
        errmsg_147664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5585, 32), 'errmsg', False)
        # Processing the call keyword arguments (line 5585)
        kwargs_147665 = {}
        # Getting the type of 'MaskError' (line 5585)
        MaskError_147663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5585, 22), 'MaskError', False)
        # Calling MaskError(args, kwargs) (line 5585)
        MaskError_call_result_147666 = invoke(stypy.reporting.localization.Localization(__file__, 5585, 22), MaskError_147663, *[errmsg_147664], **kwargs_147665)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5585, 16), MaskError_call_result_147666, 'raise parameter', BaseException)
        # SSA join for if statement (line 5582)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to copyto(...): (line 5586)
        # Processing the call arguments (line 5586)
        # Getting the type of 'out' (line 5586)
        out_147669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5586, 22), 'out', False)
        # Getting the type of 'np' (line 5586)
        np_147670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5586, 27), 'np', False)
        # Obtaining the member 'nan' of a type (line 5586)
        nan_147671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5586, 27), np_147670, 'nan')
        # Processing the call keyword arguments (line 5586)
        # Getting the type of 'newmask' (line 5586)
        newmask_147672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5586, 41), 'newmask', False)
        keyword_147673 = newmask_147672
        kwargs_147674 = {'where': keyword_147673}
        # Getting the type of 'np' (line 5586)
        np_147667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5586, 12), 'np', False)
        # Obtaining the member 'copyto' of a type (line 5586)
        copyto_147668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5586, 12), np_147667, 'copyto')
        # Calling copyto(args, kwargs) (line 5586)
        copyto_call_result_147675 = invoke(stypy.reporting.localization.Localization(__file__, 5586, 12), copyto_147668, *[out_147669, nan_147671], **kwargs_147674)
        
        # SSA join for if statement (line 5575)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 5587)
        out_147676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5587, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 5587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5587, 8), 'stypy_return_type', out_147676)
        
        # ################# End of 'max(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'max' in the type store
        # Getting the type of 'stypy_return_type' (line 5528)
        stypy_return_type_147677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5528, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147677)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'max'
        return stypy_return_type_147677


    @norecursion
    def ptp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5589)
        None_147678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5589, 23), 'None')
        # Getting the type of 'None' (line 5589)
        None_147679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5589, 33), 'None')
        # Getting the type of 'None' (line 5589)
        None_147680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5589, 50), 'None')
        defaults = [None_147678, None_147679, None_147680]
        # Create a new context for function 'ptp'
        module_type_store = module_type_store.open_function_context('ptp', 5589, 4, False)
        # Assigning a type to the variable 'self' (line 5590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5590, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.ptp.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.ptp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.ptp.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.ptp.__dict__.__setitem__('stypy_function_name', 'MaskedArray.ptp')
        MaskedArray.ptp.__dict__.__setitem__('stypy_param_names_list', ['axis', 'out', 'fill_value'])
        MaskedArray.ptp.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.ptp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.ptp.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.ptp.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.ptp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.ptp.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.ptp', ['axis', 'out', 'fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ptp', localization, ['axis', 'out', 'fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ptp(...)' code ##################

        str_147681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5612, (-1)), 'str', '\n        Return (maximum - minimum) along the the given dimension\n        (i.e. peak-to-peak value).\n\n        Parameters\n        ----------\n        axis : {None, int}, optional\n            Axis along which to find the peaks.  If None (default) the\n            flattened array is used.\n        out : {None, array_like}, optional\n            Alternative output array in which to place the result. It must\n            have the same shape and buffer length as the expected output\n            but the type will be cast if necessary.\n        fill_value : {var}, optional\n            Value used to fill in the masked values.\n\n        Returns\n        -------\n        ptp : ndarray.\n            A new array holding the result, unless ``out`` was\n            specified, in which case a reference to ``out`` is returned.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 5613)
        # Getting the type of 'out' (line 5613)
        out_147682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5613, 11), 'out')
        # Getting the type of 'None' (line 5613)
        None_147683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5613, 18), 'None')
        
        (may_be_147684, more_types_in_union_147685) = may_be_none(out_147682, None_147683)

        if may_be_147684:

            if more_types_in_union_147685:
                # Runtime conditional SSA (line 5613)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5614):
            
            # Assigning a Call to a Name (line 5614):
            
            # Call to max(...): (line 5614)
            # Processing the call keyword arguments (line 5614)
            # Getting the type of 'axis' (line 5614)
            axis_147688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5614, 35), 'axis', False)
            keyword_147689 = axis_147688
            # Getting the type of 'fill_value' (line 5614)
            fill_value_147690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5614, 52), 'fill_value', False)
            keyword_147691 = fill_value_147690
            kwargs_147692 = {'fill_value': keyword_147691, 'axis': keyword_147689}
            # Getting the type of 'self' (line 5614)
            self_147686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5614, 21), 'self', False)
            # Obtaining the member 'max' of a type (line 5614)
            max_147687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5614, 21), self_147686, 'max')
            # Calling max(args, kwargs) (line 5614)
            max_call_result_147693 = invoke(stypy.reporting.localization.Localization(__file__, 5614, 21), max_147687, *[], **kwargs_147692)
            
            # Assigning a type to the variable 'result' (line 5614)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5614, 12), 'result', max_call_result_147693)
            
            # Getting the type of 'result' (line 5615)
            result_147694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5615, 12), 'result')
            
            # Call to min(...): (line 5615)
            # Processing the call keyword arguments (line 5615)
            # Getting the type of 'axis' (line 5615)
            axis_147697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5615, 36), 'axis', False)
            keyword_147698 = axis_147697
            # Getting the type of 'fill_value' (line 5615)
            fill_value_147699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5615, 53), 'fill_value', False)
            keyword_147700 = fill_value_147699
            kwargs_147701 = {'fill_value': keyword_147700, 'axis': keyword_147698}
            # Getting the type of 'self' (line 5615)
            self_147695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5615, 22), 'self', False)
            # Obtaining the member 'min' of a type (line 5615)
            min_147696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5615, 22), self_147695, 'min')
            # Calling min(args, kwargs) (line 5615)
            min_call_result_147702 = invoke(stypy.reporting.localization.Localization(__file__, 5615, 22), min_147696, *[], **kwargs_147701)
            
            # Applying the binary operator '-=' (line 5615)
            result_isub_147703 = python_operator(stypy.reporting.localization.Localization(__file__, 5615, 12), '-=', result_147694, min_call_result_147702)
            # Assigning a type to the variable 'result' (line 5615)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5615, 12), 'result', result_isub_147703)
            
            # Getting the type of 'result' (line 5616)
            result_147704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5616, 19), 'result')
            # Assigning a type to the variable 'stypy_return_type' (line 5616)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5616, 12), 'stypy_return_type', result_147704)

            if more_types_in_union_147685:
                # SSA join for if statement (line 5613)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 5617):
        
        # Assigning a Call to a Attribute (line 5617):
        
        # Call to max(...): (line 5617)
        # Processing the call keyword arguments (line 5617)
        # Getting the type of 'axis' (line 5617)
        axis_147707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5617, 33), 'axis', False)
        keyword_147708 = axis_147707
        # Getting the type of 'out' (line 5617)
        out_147709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5617, 43), 'out', False)
        keyword_147710 = out_147709
        # Getting the type of 'fill_value' (line 5617)
        fill_value_147711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5617, 59), 'fill_value', False)
        keyword_147712 = fill_value_147711
        kwargs_147713 = {'out': keyword_147710, 'fill_value': keyword_147712, 'axis': keyword_147708}
        # Getting the type of 'self' (line 5617)
        self_147705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5617, 19), 'self', False)
        # Obtaining the member 'max' of a type (line 5617)
        max_147706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5617, 19), self_147705, 'max')
        # Calling max(args, kwargs) (line 5617)
        max_call_result_147714 = invoke(stypy.reporting.localization.Localization(__file__, 5617, 19), max_147706, *[], **kwargs_147713)
        
        # Getting the type of 'out' (line 5617)
        out_147715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5617, 8), 'out')
        # Setting the type of the member 'flat' of a type (line 5617)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5617, 8), out_147715, 'flat', max_call_result_147714)
        
        # Assigning a Call to a Name (line 5618):
        
        # Assigning a Call to a Name (line 5618):
        
        # Call to min(...): (line 5618)
        # Processing the call keyword arguments (line 5618)
        # Getting the type of 'axis' (line 5618)
        axis_147718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5618, 34), 'axis', False)
        keyword_147719 = axis_147718
        # Getting the type of 'fill_value' (line 5618)
        fill_value_147720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5618, 51), 'fill_value', False)
        keyword_147721 = fill_value_147720
        kwargs_147722 = {'fill_value': keyword_147721, 'axis': keyword_147719}
        # Getting the type of 'self' (line 5618)
        self_147716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5618, 20), 'self', False)
        # Obtaining the member 'min' of a type (line 5618)
        min_147717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5618, 20), self_147716, 'min')
        # Calling min(args, kwargs) (line 5618)
        min_call_result_147723 = invoke(stypy.reporting.localization.Localization(__file__, 5618, 20), min_147717, *[], **kwargs_147722)
        
        # Assigning a type to the variable 'min_value' (line 5618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5618, 8), 'min_value', min_call_result_147723)
        
        # Call to subtract(...): (line 5619)
        # Processing the call arguments (line 5619)
        # Getting the type of 'out' (line 5619)
        out_147726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5619, 20), 'out', False)
        # Getting the type of 'min_value' (line 5619)
        min_value_147727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5619, 25), 'min_value', False)
        # Processing the call keyword arguments (line 5619)
        # Getting the type of 'out' (line 5619)
        out_147728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5619, 40), 'out', False)
        keyword_147729 = out_147728
        str_147730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5619, 53), 'str', 'unsafe')
        keyword_147731 = str_147730
        kwargs_147732 = {'casting': keyword_147731, 'out': keyword_147729}
        # Getting the type of 'np' (line 5619)
        np_147724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5619, 8), 'np', False)
        # Obtaining the member 'subtract' of a type (line 5619)
        subtract_147725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5619, 8), np_147724, 'subtract')
        # Calling subtract(args, kwargs) (line 5619)
        subtract_call_result_147733 = invoke(stypy.reporting.localization.Localization(__file__, 5619, 8), subtract_147725, *[out_147726, min_value_147727], **kwargs_147732)
        
        # Getting the type of 'out' (line 5620)
        out_147734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5620, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 5620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5620, 8), 'stypy_return_type', out_147734)
        
        # ################# End of 'ptp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ptp' in the type store
        # Getting the type of 'stypy_return_type' (line 5589)
        stypy_return_type_147735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5589, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147735)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ptp'
        return stypy_return_type_147735


    @norecursion
    def take(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5622)
        None_147736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5622, 33), 'None')
        # Getting the type of 'None' (line 5622)
        None_147737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5622, 43), 'None')
        str_147738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5622, 54), 'str', 'raise')
        defaults = [None_147736, None_147737, str_147738]
        # Create a new context for function 'take'
        module_type_store = module_type_store.open_function_context('take', 5622, 4, False)
        # Assigning a type to the variable 'self' (line 5623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5623, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.take.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.take.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.take.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.take.__dict__.__setitem__('stypy_function_name', 'MaskedArray.take')
        MaskedArray.take.__dict__.__setitem__('stypy_param_names_list', ['indices', 'axis', 'out', 'mode'])
        MaskedArray.take.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.take.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.take.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.take.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.take.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.take.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.take', ['indices', 'axis', 'out', 'mode'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'take', localization, ['indices', 'axis', 'out', 'mode'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'take(...)' code ##################

        str_147739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5624, (-1)), 'str', '\n        ')
        
        # Assigning a Tuple to a Tuple (line 5625):
        
        # Assigning a Attribute to a Name (line 5625):
        # Getting the type of 'self' (line 5625)
        self_147740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5625, 26), 'self')
        # Obtaining the member '_data' of a type (line 5625)
        _data_147741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5625, 26), self_147740, '_data')
        # Assigning a type to the variable 'tuple_assignment_139194' (line 5625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5625, 8), 'tuple_assignment_139194', _data_147741)
        
        # Assigning a Attribute to a Name (line 5625):
        # Getting the type of 'self' (line 5625)
        self_147742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5625, 38), 'self')
        # Obtaining the member '_mask' of a type (line 5625)
        _mask_147743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5625, 38), self_147742, '_mask')
        # Assigning a type to the variable 'tuple_assignment_139195' (line 5625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5625, 8), 'tuple_assignment_139195', _mask_147743)
        
        # Assigning a Name to a Name (line 5625):
        # Getting the type of 'tuple_assignment_139194' (line 5625)
        tuple_assignment_139194_147744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5625, 8), 'tuple_assignment_139194')
        # Assigning a type to the variable '_data' (line 5625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5625, 9), '_data', tuple_assignment_139194_147744)
        
        # Assigning a Name to a Name (line 5625):
        # Getting the type of 'tuple_assignment_139195' (line 5625)
        tuple_assignment_139195_147745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5625, 8), 'tuple_assignment_139195')
        # Assigning a type to the variable '_mask' (line 5625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5625, 16), '_mask', tuple_assignment_139195_147745)
        
        # Assigning a Call to a Name (line 5626):
        
        # Assigning a Call to a Name (line 5626):
        
        # Call to type(...): (line 5626)
        # Processing the call arguments (line 5626)
        # Getting the type of 'self' (line 5626)
        self_147747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5626, 19), 'self', False)
        # Processing the call keyword arguments (line 5626)
        kwargs_147748 = {}
        # Getting the type of 'type' (line 5626)
        type_147746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5626, 14), 'type', False)
        # Calling type(args, kwargs) (line 5626)
        type_call_result_147749 = invoke(stypy.reporting.localization.Localization(__file__, 5626, 14), type_147746, *[self_147747], **kwargs_147748)
        
        # Assigning a type to the variable 'cls' (line 5626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5626, 8), 'cls', type_call_result_147749)
        
        # Assigning a Call to a Name (line 5628):
        
        # Assigning a Call to a Name (line 5628):
        
        # Call to getattr(...): (line 5628)
        # Processing the call arguments (line 5628)
        # Getting the type of 'indices' (line 5628)
        indices_147751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5628, 30), 'indices', False)
        str_147752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5628, 39), 'str', '_mask')
        # Getting the type of 'nomask' (line 5628)
        nomask_147753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5628, 48), 'nomask', False)
        # Processing the call keyword arguments (line 5628)
        kwargs_147754 = {}
        # Getting the type of 'getattr' (line 5628)
        getattr_147750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5628, 22), 'getattr', False)
        # Calling getattr(args, kwargs) (line 5628)
        getattr_call_result_147755 = invoke(stypy.reporting.localization.Localization(__file__, 5628, 22), getattr_147750, *[indices_147751, str_147752, nomask_147753], **kwargs_147754)
        
        # Assigning a type to the variable 'maskindices' (line 5628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5628, 8), 'maskindices', getattr_call_result_147755)
        
        
        # Getting the type of 'maskindices' (line 5629)
        maskindices_147756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5629, 11), 'maskindices')
        # Getting the type of 'nomask' (line 5629)
        nomask_147757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5629, 30), 'nomask')
        # Applying the binary operator 'isnot' (line 5629)
        result_is_not_147758 = python_operator(stypy.reporting.localization.Localization(__file__, 5629, 11), 'isnot', maskindices_147756, nomask_147757)
        
        # Testing the type of an if condition (line 5629)
        if_condition_147759 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5629, 8), result_is_not_147758)
        # Assigning a type to the variable 'if_condition_147759' (line 5629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5629, 8), 'if_condition_147759', if_condition_147759)
        # SSA begins for if statement (line 5629)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 5630):
        
        # Assigning a Call to a Name (line 5630):
        
        # Call to filled(...): (line 5630)
        # Processing the call arguments (line 5630)
        int_147762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5630, 37), 'int')
        # Processing the call keyword arguments (line 5630)
        kwargs_147763 = {}
        # Getting the type of 'indices' (line 5630)
        indices_147760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5630, 22), 'indices', False)
        # Obtaining the member 'filled' of a type (line 5630)
        filled_147761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5630, 22), indices_147760, 'filled')
        # Calling filled(args, kwargs) (line 5630)
        filled_call_result_147764 = invoke(stypy.reporting.localization.Localization(__file__, 5630, 22), filled_147761, *[int_147762], **kwargs_147763)
        
        # Assigning a type to the variable 'indices' (line 5630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5630, 12), 'indices', filled_call_result_147764)
        # SSA join for if statement (line 5629)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 5632)
        # Getting the type of 'out' (line 5632)
        out_147765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5632, 11), 'out')
        # Getting the type of 'None' (line 5632)
        None_147766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5632, 18), 'None')
        
        (may_be_147767, more_types_in_union_147768) = may_be_none(out_147765, None_147766)

        if may_be_147767:

            if more_types_in_union_147768:
                # Runtime conditional SSA (line 5632)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5633):
            
            # Assigning a Call to a Name (line 5633):
            
            # Call to view(...): (line 5633)
            # Processing the call arguments (line 5633)
            # Getting the type of 'cls' (line 5633)
            cls_147779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5633, 65), 'cls', False)
            # Processing the call keyword arguments (line 5633)
            kwargs_147780 = {}
            
            # Call to take(...): (line 5633)
            # Processing the call arguments (line 5633)
            # Getting the type of 'indices' (line 5633)
            indices_147771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5633, 29), 'indices', False)
            # Processing the call keyword arguments (line 5633)
            # Getting the type of 'axis' (line 5633)
            axis_147772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5633, 43), 'axis', False)
            keyword_147773 = axis_147772
            # Getting the type of 'mode' (line 5633)
            mode_147774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5633, 54), 'mode', False)
            keyword_147775 = mode_147774
            kwargs_147776 = {'mode': keyword_147775, 'axis': keyword_147773}
            # Getting the type of '_data' (line 5633)
            _data_147769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5633, 18), '_data', False)
            # Obtaining the member 'take' of a type (line 5633)
            take_147770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5633, 18), _data_147769, 'take')
            # Calling take(args, kwargs) (line 5633)
            take_call_result_147777 = invoke(stypy.reporting.localization.Localization(__file__, 5633, 18), take_147770, *[indices_147771], **kwargs_147776)
            
            # Obtaining the member 'view' of a type (line 5633)
            view_147778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5633, 18), take_call_result_147777, 'view')
            # Calling view(args, kwargs) (line 5633)
            view_call_result_147781 = invoke(stypy.reporting.localization.Localization(__file__, 5633, 18), view_147778, *[cls_147779], **kwargs_147780)
            
            # Assigning a type to the variable 'out' (line 5633)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5633, 12), 'out', view_call_result_147781)

            if more_types_in_union_147768:
                # Runtime conditional SSA for else branch (line 5632)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_147767) or more_types_in_union_147768):
            
            # Call to take(...): (line 5635)
            # Processing the call arguments (line 5635)
            # Getting the type of '_data' (line 5635)
            _data_147784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5635, 20), '_data', False)
            # Getting the type of 'indices' (line 5635)
            indices_147785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5635, 27), 'indices', False)
            # Processing the call keyword arguments (line 5635)
            # Getting the type of 'axis' (line 5635)
            axis_147786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5635, 41), 'axis', False)
            keyword_147787 = axis_147786
            # Getting the type of 'mode' (line 5635)
            mode_147788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5635, 52), 'mode', False)
            keyword_147789 = mode_147788
            # Getting the type of 'out' (line 5635)
            out_147790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5635, 62), 'out', False)
            keyword_147791 = out_147790
            kwargs_147792 = {'out': keyword_147791, 'mode': keyword_147789, 'axis': keyword_147787}
            # Getting the type of 'np' (line 5635)
            np_147782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5635, 12), 'np', False)
            # Obtaining the member 'take' of a type (line 5635)
            take_147783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5635, 12), np_147782, 'take')
            # Calling take(args, kwargs) (line 5635)
            take_call_result_147793 = invoke(stypy.reporting.localization.Localization(__file__, 5635, 12), take_147783, *[_data_147784, indices_147785], **kwargs_147792)
            

            if (may_be_147767 and more_types_in_union_147768):
                # SSA join for if statement (line 5632)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to isinstance(...): (line 5637)
        # Processing the call arguments (line 5637)
        # Getting the type of 'out' (line 5637)
        out_147795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5637, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 5637)
        MaskedArray_147796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5637, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 5637)
        kwargs_147797 = {}
        # Getting the type of 'isinstance' (line 5637)
        isinstance_147794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5637, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 5637)
        isinstance_call_result_147798 = invoke(stypy.reporting.localization.Localization(__file__, 5637, 11), isinstance_147794, *[out_147795, MaskedArray_147796], **kwargs_147797)
        
        # Testing the type of an if condition (line 5637)
        if_condition_147799 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5637, 8), isinstance_call_result_147798)
        # Assigning a type to the variable 'if_condition_147799' (line 5637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5637, 8), 'if_condition_147799', if_condition_147799)
        # SSA begins for if statement (line 5637)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of '_mask' (line 5638)
        _mask_147800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5638, 15), '_mask')
        # Getting the type of 'nomask' (line 5638)
        nomask_147801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5638, 24), 'nomask')
        # Applying the binary operator 'is' (line 5638)
        result_is__147802 = python_operator(stypy.reporting.localization.Localization(__file__, 5638, 15), 'is', _mask_147800, nomask_147801)
        
        # Testing the type of an if condition (line 5638)
        if_condition_147803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5638, 12), result_is__147802)
        # Assigning a type to the variable 'if_condition_147803' (line 5638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5638, 12), 'if_condition_147803', if_condition_147803)
        # SSA begins for if statement (line 5638)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 5639):
        
        # Assigning a Name to a Name (line 5639):
        # Getting the type of 'maskindices' (line 5639)
        maskindices_147804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5639, 26), 'maskindices')
        # Assigning a type to the variable 'outmask' (line 5639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5639, 16), 'outmask', maskindices_147804)
        # SSA branch for the else part of an if statement (line 5638)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 5641):
        
        # Assigning a Call to a Name (line 5641):
        
        # Call to take(...): (line 5641)
        # Processing the call arguments (line 5641)
        # Getting the type of 'indices' (line 5641)
        indices_147807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5641, 37), 'indices', False)
        # Processing the call keyword arguments (line 5641)
        # Getting the type of 'axis' (line 5641)
        axis_147808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5641, 51), 'axis', False)
        keyword_147809 = axis_147808
        # Getting the type of 'mode' (line 5641)
        mode_147810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5641, 62), 'mode', False)
        keyword_147811 = mode_147810
        kwargs_147812 = {'mode': keyword_147811, 'axis': keyword_147809}
        # Getting the type of '_mask' (line 5641)
        _mask_147805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5641, 26), '_mask', False)
        # Obtaining the member 'take' of a type (line 5641)
        take_147806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5641, 26), _mask_147805, 'take')
        # Calling take(args, kwargs) (line 5641)
        take_call_result_147813 = invoke(stypy.reporting.localization.Localization(__file__, 5641, 26), take_147806, *[indices_147807], **kwargs_147812)
        
        # Assigning a type to the variable 'outmask' (line 5641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5641, 16), 'outmask', take_call_result_147813)
        
        # Getting the type of 'outmask' (line 5642)
        outmask_147814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5642, 16), 'outmask')
        # Getting the type of 'maskindices' (line 5642)
        maskindices_147815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5642, 27), 'maskindices')
        # Applying the binary operator '|=' (line 5642)
        result_ior_147816 = python_operator(stypy.reporting.localization.Localization(__file__, 5642, 16), '|=', outmask_147814, maskindices_147815)
        # Assigning a type to the variable 'outmask' (line 5642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5642, 16), 'outmask', result_ior_147816)
        
        # SSA join for if statement (line 5638)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __setmask__(...): (line 5643)
        # Processing the call arguments (line 5643)
        # Getting the type of 'outmask' (line 5643)
        outmask_147819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5643, 28), 'outmask', False)
        # Processing the call keyword arguments (line 5643)
        kwargs_147820 = {}
        # Getting the type of 'out' (line 5643)
        out_147817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5643, 12), 'out', False)
        # Obtaining the member '__setmask__' of a type (line 5643)
        setmask___147818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5643, 12), out_147817, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 5643)
        setmask___call_result_147821 = invoke(stypy.reporting.localization.Localization(__file__, 5643, 12), setmask___147818, *[outmask_147819], **kwargs_147820)
        
        # SSA join for if statement (line 5637)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 5644)
        out_147822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5644, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 5644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5644, 8), 'stypy_return_type', out_147822)
        
        # ################# End of 'take(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'take' in the type store
        # Getting the type of 'stypy_return_type' (line 5622)
        stypy_return_type_147823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5622, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147823)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'take'
        return stypy_return_type_147823

    
    # Assigning a Call to a Name (line 5647):
    
    # Assigning a Call to a Name (line 5648):
    
    # Assigning a Call to a Name (line 5649):
    
    # Assigning a Call to a Name (line 5650):
    
    # Assigning a Call to a Name (line 5651):
    
    # Assigning a Call to a Name (line 5652):
    
    # Assigning a Call to a Name (line 5653):
    
    # Assigning a Call to a Name (line 5654):

    @norecursion
    def tolist(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5656)
        None_147824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5656, 32), 'None')
        defaults = [None_147824]
        # Create a new context for function 'tolist'
        module_type_store = module_type_store.open_function_context('tolist', 5656, 4, False)
        # Assigning a type to the variable 'self' (line 5657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5657, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.tolist.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.tolist.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.tolist.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.tolist.__dict__.__setitem__('stypy_function_name', 'MaskedArray.tolist')
        MaskedArray.tolist.__dict__.__setitem__('stypy_param_names_list', ['fill_value'])
        MaskedArray.tolist.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.tolist.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.tolist.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.tolist.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.tolist.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.tolist.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.tolist', ['fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tolist', localization, ['fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tolist(...)' code ##################

        str_147825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5682, (-1)), 'str', '\n        Return the data portion of the masked array as a hierarchical Python list.\n\n        Data items are converted to the nearest compatible Python type.\n        Masked values are converted to `fill_value`. If `fill_value` is None,\n        the corresponding entries in the output list will be ``None``.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            The value to use for invalid entries. Default is None.\n\n        Returns\n        -------\n        result : list\n            The Python list representation of the masked array.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3], [4,5,6], [7,8,9]], mask=[0] + [1,0]*4)\n        >>> x.tolist()\n        [[1, None, 3], [None, 5, None], [7, None, 9]]\n        >>> x.tolist(-999)\n        [[1, -999, 3], [-999, 5, -999], [7, -999, 9]]\n\n        ')
        
        # Assigning a Attribute to a Name (line 5683):
        
        # Assigning a Attribute to a Name (line 5683):
        # Getting the type of 'self' (line 5683)
        self_147826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5683, 16), 'self')
        # Obtaining the member '_mask' of a type (line 5683)
        _mask_147827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5683, 16), self_147826, '_mask')
        # Assigning a type to the variable '_mask' (line 5683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5683, 8), '_mask', _mask_147827)
        
        
        # Getting the type of '_mask' (line 5685)
        _mask_147828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5685, 11), '_mask')
        # Getting the type of 'nomask' (line 5685)
        nomask_147829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5685, 20), 'nomask')
        # Applying the binary operator 'is' (line 5685)
        result_is__147830 = python_operator(stypy.reporting.localization.Localization(__file__, 5685, 11), 'is', _mask_147828, nomask_147829)
        
        # Testing the type of an if condition (line 5685)
        if_condition_147831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5685, 8), result_is__147830)
        # Assigning a type to the variable 'if_condition_147831' (line 5685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5685, 8), 'if_condition_147831', if_condition_147831)
        # SSA begins for if statement (line 5685)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to tolist(...): (line 5686)
        # Processing the call keyword arguments (line 5686)
        kwargs_147835 = {}
        # Getting the type of 'self' (line 5686)
        self_147832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5686, 19), 'self', False)
        # Obtaining the member '_data' of a type (line 5686)
        _data_147833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5686, 19), self_147832, '_data')
        # Obtaining the member 'tolist' of a type (line 5686)
        tolist_147834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5686, 19), _data_147833, 'tolist')
        # Calling tolist(args, kwargs) (line 5686)
        tolist_call_result_147836 = invoke(stypy.reporting.localization.Localization(__file__, 5686, 19), tolist_147834, *[], **kwargs_147835)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5686, 12), 'stypy_return_type', tolist_call_result_147836)
        # SSA join for if statement (line 5685)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 5688)
        # Getting the type of 'fill_value' (line 5688)
        fill_value_147837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5688, 8), 'fill_value')
        # Getting the type of 'None' (line 5688)
        None_147838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5688, 29), 'None')
        
        (may_be_147839, more_types_in_union_147840) = may_not_be_none(fill_value_147837, None_147838)

        if may_be_147839:

            if more_types_in_union_147840:
                # Runtime conditional SSA (line 5688)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to tolist(...): (line 5689)
            # Processing the call keyword arguments (line 5689)
            kwargs_147847 = {}
            
            # Call to filled(...): (line 5689)
            # Processing the call arguments (line 5689)
            # Getting the type of 'fill_value' (line 5689)
            fill_value_147843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5689, 31), 'fill_value', False)
            # Processing the call keyword arguments (line 5689)
            kwargs_147844 = {}
            # Getting the type of 'self' (line 5689)
            self_147841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5689, 19), 'self', False)
            # Obtaining the member 'filled' of a type (line 5689)
            filled_147842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5689, 19), self_147841, 'filled')
            # Calling filled(args, kwargs) (line 5689)
            filled_call_result_147845 = invoke(stypy.reporting.localization.Localization(__file__, 5689, 19), filled_147842, *[fill_value_147843], **kwargs_147844)
            
            # Obtaining the member 'tolist' of a type (line 5689)
            tolist_147846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5689, 19), filled_call_result_147845, 'tolist')
            # Calling tolist(args, kwargs) (line 5689)
            tolist_call_result_147848 = invoke(stypy.reporting.localization.Localization(__file__, 5689, 19), tolist_147846, *[], **kwargs_147847)
            
            # Assigning a type to the variable 'stypy_return_type' (line 5689)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5689, 12), 'stypy_return_type', tolist_call_result_147848)

            if more_types_in_union_147840:
                # SSA join for if statement (line 5688)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 5691):
        
        # Assigning a Attribute to a Name (line 5691):
        # Getting the type of 'self' (line 5691)
        self_147849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5691, 16), 'self')
        # Obtaining the member 'dtype' of a type (line 5691)
        dtype_147850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5691, 16), self_147849, 'dtype')
        # Obtaining the member 'names' of a type (line 5691)
        names_147851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5691, 16), dtype_147850, 'names')
        # Assigning a type to the variable 'names' (line 5691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5691, 8), 'names', names_147851)
        
        # Getting the type of 'names' (line 5692)
        names_147852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5692, 11), 'names')
        # Testing the type of an if condition (line 5692)
        if_condition_147853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5692, 8), names_147852)
        # Assigning a type to the variable 'if_condition_147853' (line 5692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5692, 8), 'if_condition_147853', if_condition_147853)
        # SSA begins for if statement (line 5692)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 5693):
        
        # Assigning a Call to a Name (line 5693):
        
        # Call to astype(...): (line 5693)
        # Processing the call arguments (line 5693)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'names' (line 5693)
        names_147860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5693, 61), 'names', False)
        comprehension_147861 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5693, 40), names_147860)
        # Assigning a type to the variable '_' (line 5693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5693, 40), '_', comprehension_147861)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5693)
        tuple_147857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5693, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5693)
        # Adding element type (line 5693)
        # Getting the type of '_' (line 5693)
        __147858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5693, 41), '_', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5693, 41), tuple_147857, __147858)
        # Adding element type (line 5693)
        # Getting the type of 'object' (line 5693)
        object_147859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5693, 44), 'object', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5693, 41), tuple_147857, object_147859)
        
        list_147862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5693, 40), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5693, 40), list_147862, tuple_147857)
        # Processing the call keyword arguments (line 5693)
        kwargs_147863 = {}
        # Getting the type of 'self' (line 5693)
        self_147854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5693, 21), 'self', False)
        # Obtaining the member '_data' of a type (line 5693)
        _data_147855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5693, 21), self_147854, '_data')
        # Obtaining the member 'astype' of a type (line 5693)
        astype_147856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5693, 21), _data_147855, 'astype')
        # Calling astype(args, kwargs) (line 5693)
        astype_call_result_147864 = invoke(stypy.reporting.localization.Localization(__file__, 5693, 21), astype_147856, *[list_147862], **kwargs_147863)
        
        # Assigning a type to the variable 'result' (line 5693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5693, 12), 'result', astype_call_result_147864)
        
        # Getting the type of 'names' (line 5694)
        names_147865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5694, 21), 'names')
        # Testing the type of a for loop iterable (line 5694)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5694, 12), names_147865)
        # Getting the type of the for loop variable (line 5694)
        for_loop_var_147866 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5694, 12), names_147865)
        # Assigning a type to the variable 'n' (line 5694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5694, 12), 'n', for_loop_var_147866)
        # SSA begins for a for statement (line 5694)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Subscript (line 5695):
        
        # Assigning a Name to a Subscript (line 5695):
        # Getting the type of 'None' (line 5695)
        None_147867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5695, 38), 'None')
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 5695)
        n_147868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5695, 23), 'n')
        # Getting the type of 'result' (line 5695)
        result_147869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5695, 16), 'result')
        # Obtaining the member '__getitem__' of a type (line 5695)
        getitem___147870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5695, 16), result_147869, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5695)
        subscript_call_result_147871 = invoke(stypy.reporting.localization.Localization(__file__, 5695, 16), getitem___147870, n_147868)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 5695)
        n_147872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5695, 32), 'n')
        # Getting the type of '_mask' (line 5695)
        _mask_147873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5695, 26), '_mask')
        # Obtaining the member '__getitem__' of a type (line 5695)
        getitem___147874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5695, 26), _mask_147873, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5695)
        subscript_call_result_147875 = invoke(stypy.reporting.localization.Localization(__file__, 5695, 26), getitem___147874, n_147872)
        
        # Storing an element on a container (line 5695)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5695, 16), subscript_call_result_147871, (subscript_call_result_147875, None_147867))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to tolist(...): (line 5696)
        # Processing the call keyword arguments (line 5696)
        kwargs_147878 = {}
        # Getting the type of 'result' (line 5696)
        result_147876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5696, 19), 'result', False)
        # Obtaining the member 'tolist' of a type (line 5696)
        tolist_147877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5696, 19), result_147876, 'tolist')
        # Calling tolist(args, kwargs) (line 5696)
        tolist_call_result_147879 = invoke(stypy.reporting.localization.Localization(__file__, 5696, 19), tolist_147877, *[], **kwargs_147878)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5696, 12), 'stypy_return_type', tolist_call_result_147879)
        # SSA join for if statement (line 5692)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of '_mask' (line 5698)
        _mask_147880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5698, 11), '_mask')
        # Getting the type of 'nomask' (line 5698)
        nomask_147881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5698, 20), 'nomask')
        # Applying the binary operator 'is' (line 5698)
        result_is__147882 = python_operator(stypy.reporting.localization.Localization(__file__, 5698, 11), 'is', _mask_147880, nomask_147881)
        
        # Testing the type of an if condition (line 5698)
        if_condition_147883 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5698, 8), result_is__147882)
        # Assigning a type to the variable 'if_condition_147883' (line 5698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5698, 8), 'if_condition_147883', if_condition_147883)
        # SSA begins for if statement (line 5698)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'list' (line 5699)
        list_147884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5699, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 5699)
        # Adding element type (line 5699)
        # Getting the type of 'None' (line 5699)
        None_147885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5699, 20), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5699, 19), list_147884, None_147885)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5699, 12), 'stypy_return_type', list_147884)
        # SSA join for if statement (line 5698)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 5701):
        
        # Assigning a Attribute to a Name (line 5701):
        # Getting the type of 'self' (line 5701)
        self_147886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5701, 19), 'self')
        # Obtaining the member 'shape' of a type (line 5701)
        shape_147887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5701, 19), self_147886, 'shape')
        # Assigning a type to the variable 'inishape' (line 5701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5701, 8), 'inishape', shape_147887)
        
        # Assigning a Call to a Name (line 5702):
        
        # Assigning a Call to a Name (line 5702):
        
        # Call to array(...): (line 5702)
        # Processing the call arguments (line 5702)
        
        # Call to ravel(...): (line 5702)
        # Processing the call keyword arguments (line 5702)
        kwargs_147893 = {}
        # Getting the type of 'self' (line 5702)
        self_147890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5702, 26), 'self', False)
        # Obtaining the member '_data' of a type (line 5702)
        _data_147891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5702, 26), self_147890, '_data')
        # Obtaining the member 'ravel' of a type (line 5702)
        ravel_147892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5702, 26), _data_147891, 'ravel')
        # Calling ravel(args, kwargs) (line 5702)
        ravel_call_result_147894 = invoke(stypy.reporting.localization.Localization(__file__, 5702, 26), ravel_147892, *[], **kwargs_147893)
        
        # Processing the call keyword arguments (line 5702)
        # Getting the type of 'object' (line 5702)
        object_147895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5702, 52), 'object', False)
        keyword_147896 = object_147895
        kwargs_147897 = {'dtype': keyword_147896}
        # Getting the type of 'np' (line 5702)
        np_147888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5702, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 5702)
        array_147889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5702, 17), np_147888, 'array')
        # Calling array(args, kwargs) (line 5702)
        array_call_result_147898 = invoke(stypy.reporting.localization.Localization(__file__, 5702, 17), array_147889, *[ravel_call_result_147894], **kwargs_147897)
        
        # Assigning a type to the variable 'result' (line 5702)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5702, 8), 'result', array_call_result_147898)
        
        # Assigning a Name to a Subscript (line 5703):
        
        # Assigning a Name to a Subscript (line 5703):
        # Getting the type of 'None' (line 5703)
        None_147899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5703, 32), 'None')
        # Getting the type of 'result' (line 5703)
        result_147900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5703, 8), 'result')
        
        # Call to ravel(...): (line 5703)
        # Processing the call keyword arguments (line 5703)
        kwargs_147903 = {}
        # Getting the type of '_mask' (line 5703)
        _mask_147901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5703, 15), '_mask', False)
        # Obtaining the member 'ravel' of a type (line 5703)
        ravel_147902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5703, 15), _mask_147901, 'ravel')
        # Calling ravel(args, kwargs) (line 5703)
        ravel_call_result_147904 = invoke(stypy.reporting.localization.Localization(__file__, 5703, 15), ravel_147902, *[], **kwargs_147903)
        
        # Storing an element on a container (line 5703)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5703, 8), result_147900, (ravel_call_result_147904, None_147899))
        
        # Assigning a Name to a Attribute (line 5704):
        
        # Assigning a Name to a Attribute (line 5704):
        # Getting the type of 'inishape' (line 5704)
        inishape_147905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5704, 23), 'inishape')
        # Getting the type of 'result' (line 5704)
        result_147906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5704, 8), 'result')
        # Setting the type of the member 'shape' of a type (line 5704)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5704, 8), result_147906, 'shape', inishape_147905)
        
        # Call to tolist(...): (line 5705)
        # Processing the call keyword arguments (line 5705)
        kwargs_147909 = {}
        # Getting the type of 'result' (line 5705)
        result_147907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5705, 15), 'result', False)
        # Obtaining the member 'tolist' of a type (line 5705)
        tolist_147908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5705, 15), result_147907, 'tolist')
        # Calling tolist(args, kwargs) (line 5705)
        tolist_call_result_147910 = invoke(stypy.reporting.localization.Localization(__file__, 5705, 15), tolist_147908, *[], **kwargs_147909)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5705, 8), 'stypy_return_type', tolist_call_result_147910)
        
        # ################# End of 'tolist(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tolist' in the type store
        # Getting the type of 'stypy_return_type' (line 5656)
        stypy_return_type_147911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5656, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147911)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tolist'
        return stypy_return_type_147911


    @norecursion
    def tostring(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5707)
        None_147912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5707, 34), 'None')
        str_147913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5707, 46), 'str', 'C')
        defaults = [None_147912, str_147913]
        # Create a new context for function 'tostring'
        module_type_store = module_type_store.open_function_context('tostring', 5707, 4, False)
        # Assigning a type to the variable 'self' (line 5708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5708, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.tostring.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.tostring.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.tostring.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.tostring.__dict__.__setitem__('stypy_function_name', 'MaskedArray.tostring')
        MaskedArray.tostring.__dict__.__setitem__('stypy_param_names_list', ['fill_value', 'order'])
        MaskedArray.tostring.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.tostring.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.tostring.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.tostring.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.tostring.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.tostring.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.tostring', ['fill_value', 'order'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tostring', localization, ['fill_value', 'order'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tostring(...)' code ##################

        str_147914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5711, (-1)), 'str', '\n        This function is a compatibility alias for tobytes. Despite its name it\n        returns bytes not strings.\n        ')
        
        # Call to tobytes(...): (line 5713)
        # Processing the call arguments (line 5713)
        # Getting the type of 'fill_value' (line 5713)
        fill_value_147917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5713, 28), 'fill_value', False)
        # Processing the call keyword arguments (line 5713)
        str_147918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5713, 46), 'str', 'C')
        keyword_147919 = str_147918
        kwargs_147920 = {'order': keyword_147919}
        # Getting the type of 'self' (line 5713)
        self_147915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5713, 15), 'self', False)
        # Obtaining the member 'tobytes' of a type (line 5713)
        tobytes_147916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5713, 15), self_147915, 'tobytes')
        # Calling tobytes(args, kwargs) (line 5713)
        tobytes_call_result_147921 = invoke(stypy.reporting.localization.Localization(__file__, 5713, 15), tobytes_147916, *[fill_value_147917], **kwargs_147920)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5713, 8), 'stypy_return_type', tobytes_call_result_147921)
        
        # ################# End of 'tostring(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tostring' in the type store
        # Getting the type of 'stypy_return_type' (line 5707)
        stypy_return_type_147922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5707, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147922)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tostring'
        return stypy_return_type_147922


    @norecursion
    def tobytes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5715)
        None_147923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5715, 33), 'None')
        str_147924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5715, 45), 'str', 'C')
        defaults = [None_147923, str_147924]
        # Create a new context for function 'tobytes'
        module_type_store = module_type_store.open_function_context('tobytes', 5715, 4, False)
        # Assigning a type to the variable 'self' (line 5716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5716, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.tobytes.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.tobytes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.tobytes.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.tobytes.__dict__.__setitem__('stypy_function_name', 'MaskedArray.tobytes')
        MaskedArray.tobytes.__dict__.__setitem__('stypy_param_names_list', ['fill_value', 'order'])
        MaskedArray.tobytes.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.tobytes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.tobytes.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.tobytes.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.tobytes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.tobytes.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.tobytes', ['fill_value', 'order'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tobytes', localization, ['fill_value', 'order'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tobytes(...)' code ##################

        str_147925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5752, (-1)), 'str', "\n        Return the array data as a string containing the raw bytes in the array.\n\n        The array is filled with a fill value before the string conversion.\n\n        .. versionadded:: 1.9.0\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            Value used to fill in the masked values. Deafult is None, in which\n            case `MaskedArray.fill_value` is used.\n        order : {'C','F','A'}, optional\n            Order of the data item in the copy. Default is 'C'.\n\n            - 'C'   -- C order (row major).\n            - 'F'   -- Fortran order (column major).\n            - 'A'   -- Any, current order of array.\n            - None  -- Same as 'A'.\n\n        See Also\n        --------\n        ndarray.tobytes\n        tolist, tofile\n\n        Notes\n        -----\n        As for `ndarray.tobytes`, information about the shape, dtype, etc.,\n        but also about `fill_value`, will be lost.\n\n        Examples\n        --------\n        >>> x = np.ma.array(np.array([[1, 2], [3, 4]]), mask=[[0, 1], [1, 0]])\n        >>> x.tobytes()\n        '\\x01\\x00\\x00\\x00?B\\x0f\\x00?B\\x0f\\x00\\x04\\x00\\x00\\x00'\n\n        ")
        
        # Call to tobytes(...): (line 5753)
        # Processing the call keyword arguments (line 5753)
        # Getting the type of 'order' (line 5753)
        order_147932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5753, 53), 'order', False)
        keyword_147933 = order_147932
        kwargs_147934 = {'order': keyword_147933}
        
        # Call to filled(...): (line 5753)
        # Processing the call arguments (line 5753)
        # Getting the type of 'fill_value' (line 5753)
        fill_value_147928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5753, 27), 'fill_value', False)
        # Processing the call keyword arguments (line 5753)
        kwargs_147929 = {}
        # Getting the type of 'self' (line 5753)
        self_147926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5753, 15), 'self', False)
        # Obtaining the member 'filled' of a type (line 5753)
        filled_147927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5753, 15), self_147926, 'filled')
        # Calling filled(args, kwargs) (line 5753)
        filled_call_result_147930 = invoke(stypy.reporting.localization.Localization(__file__, 5753, 15), filled_147927, *[fill_value_147928], **kwargs_147929)
        
        # Obtaining the member 'tobytes' of a type (line 5753)
        tobytes_147931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5753, 15), filled_call_result_147930, 'tobytes')
        # Calling tobytes(args, kwargs) (line 5753)
        tobytes_call_result_147935 = invoke(stypy.reporting.localization.Localization(__file__, 5753, 15), tobytes_147931, *[], **kwargs_147934)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5753, 8), 'stypy_return_type', tobytes_call_result_147935)
        
        # ################# End of 'tobytes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tobytes' in the type store
        # Getting the type of 'stypy_return_type' (line 5715)
        stypy_return_type_147936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5715, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147936)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tobytes'
        return stypy_return_type_147936


    @norecursion
    def tofile(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_147937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5755, 30), 'str', '')
        str_147938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5755, 41), 'str', '%s')
        defaults = [str_147937, str_147938]
        # Create a new context for function 'tofile'
        module_type_store = module_type_store.open_function_context('tofile', 5755, 4, False)
        # Assigning a type to the variable 'self' (line 5756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5756, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.tofile.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.tofile.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.tofile.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.tofile.__dict__.__setitem__('stypy_function_name', 'MaskedArray.tofile')
        MaskedArray.tofile.__dict__.__setitem__('stypy_param_names_list', ['fid', 'sep', 'format'])
        MaskedArray.tofile.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.tofile.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.tofile.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.tofile.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.tofile.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.tofile.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.tofile', ['fid', 'sep', 'format'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tofile', localization, ['fid', 'sep', 'format'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tofile(...)' code ##################

        str_147939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5767, (-1)), 'str', '\n        Save a masked array to a file in binary format.\n\n        .. warning::\n          This function is not implemented yet.\n\n        Raises\n        ------\n        NotImplementedError\n            When `tofile` is called.\n\n        ')
        
        # Call to NotImplementedError(...): (line 5768)
        # Processing the call arguments (line 5768)
        str_147941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5768, 34), 'str', 'MaskedArray.tofile() not implemented yet.')
        # Processing the call keyword arguments (line 5768)
        kwargs_147942 = {}
        # Getting the type of 'NotImplementedError' (line 5768)
        NotImplementedError_147940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5768, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 5768)
        NotImplementedError_call_result_147943 = invoke(stypy.reporting.localization.Localization(__file__, 5768, 14), NotImplementedError_147940, *[str_147941], **kwargs_147942)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 5768, 8), NotImplementedError_call_result_147943, 'raise parameter', BaseException)
        
        # ################# End of 'tofile(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tofile' in the type store
        # Getting the type of 'stypy_return_type' (line 5755)
        stypy_return_type_147944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5755, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147944)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tofile'
        return stypy_return_type_147944


    @norecursion
    def toflex(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'toflex'
        module_type_store = module_type_store.open_function_context('toflex', 5770, 4, False)
        # Assigning a type to the variable 'self' (line 5771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5771, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.toflex.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.toflex.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.toflex.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.toflex.__dict__.__setitem__('stypy_function_name', 'MaskedArray.toflex')
        MaskedArray.toflex.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.toflex.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.toflex.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.toflex.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.toflex.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.toflex.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.toflex.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.toflex', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'toflex', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'toflex(...)' code ##################

        str_147945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5807, (-1)), 'str', '\n        Transforms a masked array into a flexible-type array.\n\n        The flexible type array that is returned will have two fields:\n\n        * the ``_data`` field stores the ``_data`` part of the array.\n        * the ``_mask`` field stores the ``_mask`` part of the array.\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        record : ndarray\n            A new flexible-type `ndarray` with two fields: the first element\n            containing a value, the second element containing the corresponding\n            mask boolean. The returned record shape matches self.shape.\n\n        Notes\n        -----\n        A side-effect of transforming a masked array into a flexible `ndarray` is\n        that meta information (``fill_value``, ...) will be lost.\n\n        Examples\n        --------\n        >>> x = np.ma.array([[1,2,3],[4,5,6],[7,8,9]], mask=[0] + [1,0]*4)\n        >>> print(x)\n        [[1 -- 3]\n         [-- 5 --]\n         [7 -- 9]]\n        >>> print(x.toflex())\n        [[(1, False) (2, True) (3, False)]\n         [(4, True) (5, False) (6, True)]\n         [(7, False) (8, True) (9, False)]]\n\n        ')
        
        # Assigning a Attribute to a Name (line 5809):
        
        # Assigning a Attribute to a Name (line 5809):
        # Getting the type of 'self' (line 5809)
        self_147946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5809, 17), 'self')
        # Obtaining the member 'dtype' of a type (line 5809)
        dtype_147947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5809, 17), self_147946, 'dtype')
        # Assigning a type to the variable 'ddtype' (line 5809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5809, 8), 'ddtype', dtype_147947)
        
        # Assigning a Attribute to a Name (line 5811):
        
        # Assigning a Attribute to a Name (line 5811):
        # Getting the type of 'self' (line 5811)
        self_147948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5811, 16), 'self')
        # Obtaining the member '_mask' of a type (line 5811)
        _mask_147949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5811, 16), self_147948, '_mask')
        # Assigning a type to the variable '_mask' (line 5811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5811, 8), '_mask', _mask_147949)
        
        # Type idiom detected: calculating its left and rigth part (line 5812)
        # Getting the type of '_mask' (line 5812)
        _mask_147950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5812, 11), '_mask')
        # Getting the type of 'None' (line 5812)
        None_147951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5812, 20), 'None')
        
        (may_be_147952, more_types_in_union_147953) = may_be_none(_mask_147950, None_147951)

        if may_be_147952:

            if more_types_in_union_147953:
                # Runtime conditional SSA (line 5812)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 5813):
            
            # Assigning a Call to a Name (line 5813):
            
            # Call to make_mask_none(...): (line 5813)
            # Processing the call arguments (line 5813)
            # Getting the type of 'self' (line 5813)
            self_147955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5813, 35), 'self', False)
            # Obtaining the member 'shape' of a type (line 5813)
            shape_147956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5813, 35), self_147955, 'shape')
            # Getting the type of 'ddtype' (line 5813)
            ddtype_147957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5813, 47), 'ddtype', False)
            # Processing the call keyword arguments (line 5813)
            kwargs_147958 = {}
            # Getting the type of 'make_mask_none' (line 5813)
            make_mask_none_147954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5813, 20), 'make_mask_none', False)
            # Calling make_mask_none(args, kwargs) (line 5813)
            make_mask_none_call_result_147959 = invoke(stypy.reporting.localization.Localization(__file__, 5813, 20), make_mask_none_147954, *[shape_147956, ddtype_147957], **kwargs_147958)
            
            # Assigning a type to the variable '_mask' (line 5813)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5813, 12), '_mask', make_mask_none_call_result_147959)

            if more_types_in_union_147953:
                # SSA join for if statement (line 5812)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 5815):
        
        # Assigning a Attribute to a Name (line 5815):
        # Getting the type of 'self' (line 5815)
        self_147960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5815, 17), 'self')
        # Obtaining the member '_mask' of a type (line 5815)
        _mask_147961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5815, 17), self_147960, '_mask')
        # Obtaining the member 'dtype' of a type (line 5815)
        dtype_147962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5815, 17), _mask_147961, 'dtype')
        # Assigning a type to the variable 'mdtype' (line 5815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5815, 8), 'mdtype', dtype_147962)
        
        # Assigning a Call to a Name (line 5817):
        
        # Assigning a Call to a Name (line 5817):
        
        # Call to ndarray(...): (line 5817)
        # Processing the call keyword arguments (line 5817)
        # Getting the type of 'self' (line 5817)
        self_147965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5817, 34), 'self', False)
        # Obtaining the member 'shape' of a type (line 5817)
        shape_147966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5817, 34), self_147965, 'shape')
        keyword_147967 = shape_147966
        
        # Obtaining an instance of the builtin type 'list' (line 5818)
        list_147968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5818, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 5818)
        # Adding element type (line 5818)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5818)
        tuple_147969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5818, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5818)
        # Adding element type (line 5818)
        str_147970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5818, 36), 'str', '_data')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5818, 36), tuple_147969, str_147970)
        # Adding element type (line 5818)
        # Getting the type of 'ddtype' (line 5818)
        ddtype_147971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5818, 45), 'ddtype', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5818, 36), tuple_147969, ddtype_147971)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5818, 34), list_147968, tuple_147969)
        # Adding element type (line 5818)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5818)
        tuple_147972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5818, 55), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5818)
        # Adding element type (line 5818)
        str_147973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5818, 55), 'str', '_mask')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5818, 55), tuple_147972, str_147973)
        # Adding element type (line 5818)
        # Getting the type of 'mdtype' (line 5818)
        mdtype_147974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5818, 64), 'mdtype', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5818, 55), tuple_147972, mdtype_147974)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5818, 34), list_147968, tuple_147972)
        
        keyword_147975 = list_147968
        kwargs_147976 = {'dtype': keyword_147975, 'shape': keyword_147967}
        # Getting the type of 'np' (line 5817)
        np_147963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5817, 17), 'np', False)
        # Obtaining the member 'ndarray' of a type (line 5817)
        ndarray_147964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5817, 17), np_147963, 'ndarray')
        # Calling ndarray(args, kwargs) (line 5817)
        ndarray_call_result_147977 = invoke(stypy.reporting.localization.Localization(__file__, 5817, 17), ndarray_147964, *[], **kwargs_147976)
        
        # Assigning a type to the variable 'record' (line 5817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5817, 8), 'record', ndarray_call_result_147977)
        
        # Assigning a Attribute to a Subscript (line 5819):
        
        # Assigning a Attribute to a Subscript (line 5819):
        # Getting the type of 'self' (line 5819)
        self_147978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5819, 26), 'self')
        # Obtaining the member '_data' of a type (line 5819)
        _data_147979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5819, 26), self_147978, '_data')
        # Getting the type of 'record' (line 5819)
        record_147980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5819, 8), 'record')
        str_147981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5819, 15), 'str', '_data')
        # Storing an element on a container (line 5819)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5819, 8), record_147980, (str_147981, _data_147979))
        
        # Assigning a Attribute to a Subscript (line 5820):
        
        # Assigning a Attribute to a Subscript (line 5820):
        # Getting the type of 'self' (line 5820)
        self_147982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5820, 26), 'self')
        # Obtaining the member '_mask' of a type (line 5820)
        _mask_147983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5820, 26), self_147982, '_mask')
        # Getting the type of 'record' (line 5820)
        record_147984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5820, 8), 'record')
        str_147985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5820, 15), 'str', '_mask')
        # Storing an element on a container (line 5820)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5820, 8), record_147984, (str_147985, _mask_147983))
        # Getting the type of 'record' (line 5821)
        record_147986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5821, 15), 'record')
        # Assigning a type to the variable 'stypy_return_type' (line 5821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5821, 8), 'stypy_return_type', record_147986)
        
        # ################# End of 'toflex(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'toflex' in the type store
        # Getting the type of 'stypy_return_type' (line 5770)
        stypy_return_type_147987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5770, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_147987)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'toflex'
        return stypy_return_type_147987

    
    # Assigning a Name to a Name (line 5822):

    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 5825, 4, False)
        # Assigning a type to the variable 'self' (line 5826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5826, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__getstate__')
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        str_147988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5829, (-1)), 'str', 'Return the internal state of the masked array, for pickling\n        purposes.\n\n        ')
        
        # Assigning a Subscript to a Name (line 5830):
        
        # Assigning a Subscript to a Name (line 5830):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 5830)
        self_147989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5830, 18), 'self')
        # Obtaining the member 'flags' of a type (line 5830)
        flags_147990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5830, 18), self_147989, 'flags')
        # Obtaining the member 'fnc' of a type (line 5830)
        fnc_147991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5830, 18), flags_147990, 'fnc')
        str_147992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5830, 13), 'str', 'CF')
        # Obtaining the member '__getitem__' of a type (line 5830)
        getitem___147993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5830, 13), str_147992, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5830)
        subscript_call_result_147994 = invoke(stypy.reporting.localization.Localization(__file__, 5830, 13), getitem___147993, fnc_147991)
        
        # Assigning a type to the variable 'cf' (line 5830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5830, 8), 'cf', subscript_call_result_147994)
        
        # Assigning a Tuple to a Name (line 5831):
        
        # Assigning a Tuple to a Name (line 5831):
        
        # Obtaining an instance of the builtin type 'tuple' (line 5831)
        tuple_147995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5831, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5831)
        # Adding element type (line 5831)
        int_147996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5831, 17), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5831, 17), tuple_147995, int_147996)
        # Adding element type (line 5831)
        # Getting the type of 'self' (line 5832)
        self_147997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5832, 17), 'self')
        # Obtaining the member 'shape' of a type (line 5832)
        shape_147998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5832, 17), self_147997, 'shape')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5831, 17), tuple_147995, shape_147998)
        # Adding element type (line 5831)
        # Getting the type of 'self' (line 5833)
        self_147999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5833, 17), 'self')
        # Obtaining the member 'dtype' of a type (line 5833)
        dtype_148000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5833, 17), self_147999, 'dtype')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5831, 17), tuple_147995, dtype_148000)
        # Adding element type (line 5831)
        # Getting the type of 'self' (line 5834)
        self_148001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5834, 17), 'self')
        # Obtaining the member 'flags' of a type (line 5834)
        flags_148002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5834, 17), self_148001, 'flags')
        # Obtaining the member 'fnc' of a type (line 5834)
        fnc_148003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5834, 17), flags_148002, 'fnc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5831, 17), tuple_147995, fnc_148003)
        # Adding element type (line 5831)
        
        # Call to tobytes(...): (line 5835)
        # Processing the call arguments (line 5835)
        # Getting the type of 'cf' (line 5835)
        cf_148007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5835, 36), 'cf', False)
        # Processing the call keyword arguments (line 5835)
        kwargs_148008 = {}
        # Getting the type of 'self' (line 5835)
        self_148004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5835, 17), 'self', False)
        # Obtaining the member '_data' of a type (line 5835)
        _data_148005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5835, 17), self_148004, '_data')
        # Obtaining the member 'tobytes' of a type (line 5835)
        tobytes_148006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5835, 17), _data_148005, 'tobytes')
        # Calling tobytes(args, kwargs) (line 5835)
        tobytes_call_result_148009 = invoke(stypy.reporting.localization.Localization(__file__, 5835, 17), tobytes_148006, *[cf_148007], **kwargs_148008)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5831, 17), tuple_147995, tobytes_call_result_148009)
        # Adding element type (line 5831)
        
        # Call to tobytes(...): (line 5837)
        # Processing the call arguments (line 5837)
        # Getting the type of 'cf' (line 5837)
        cf_148015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5837, 44), 'cf', False)
        # Processing the call keyword arguments (line 5837)
        kwargs_148016 = {}
        
        # Call to getmaskarray(...): (line 5837)
        # Processing the call arguments (line 5837)
        # Getting the type of 'self' (line 5837)
        self_148011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5837, 30), 'self', False)
        # Processing the call keyword arguments (line 5837)
        kwargs_148012 = {}
        # Getting the type of 'getmaskarray' (line 5837)
        getmaskarray_148010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5837, 17), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 5837)
        getmaskarray_call_result_148013 = invoke(stypy.reporting.localization.Localization(__file__, 5837, 17), getmaskarray_148010, *[self_148011], **kwargs_148012)
        
        # Obtaining the member 'tobytes' of a type (line 5837)
        tobytes_148014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5837, 17), getmaskarray_call_result_148013, 'tobytes')
        # Calling tobytes(args, kwargs) (line 5837)
        tobytes_call_result_148017 = invoke(stypy.reporting.localization.Localization(__file__, 5837, 17), tobytes_148014, *[cf_148015], **kwargs_148016)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5831, 17), tuple_147995, tobytes_call_result_148017)
        # Adding element type (line 5831)
        # Getting the type of 'self' (line 5839)
        self_148018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5839, 17), 'self')
        # Obtaining the member '_fill_value' of a type (line 5839)
        _fill_value_148019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5839, 17), self_148018, '_fill_value')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5831, 17), tuple_147995, _fill_value_148019)
        
        # Assigning a type to the variable 'state' (line 5831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5831, 8), 'state', tuple_147995)
        # Getting the type of 'state' (line 5841)
        state_148020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5841, 15), 'state')
        # Assigning a type to the variable 'stypy_return_type' (line 5841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5841, 8), 'stypy_return_type', state_148020)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 5825)
        stypy_return_type_148021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5825, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148021)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_148021


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 5843, 4, False)
        # Assigning a type to the variable 'self' (line 5844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5844, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__setstate__')
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        str_148022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5854, (-1)), 'str', 'Restore the internal state of the masked array, for\n        pickling purposes.  ``state`` is typically the output of the\n        ``__getstate__`` output, and is a 5-tuple:\n\n        - class name\n        - a tuple giving the shape of the data\n        - a typecode for the data\n        - a binary string for the data\n        - a binary string for the mask.\n\n        ')
        
        # Assigning a Name to a Tuple (line 5855):
        
        # Assigning a Subscript to a Name (line 5855):
        
        # Obtaining the type of the subscript
        int_148023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5855, 8), 'int')
        # Getting the type of 'state' (line 5855)
        state_148024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 44), 'state')
        # Obtaining the member '__getitem__' of a type (line 5855)
        getitem___148025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5855, 8), state_148024, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5855)
        subscript_call_result_148026 = invoke(stypy.reporting.localization.Localization(__file__, 5855, 8), getitem___148025, int_148023)
        
        # Assigning a type to the variable 'tuple_var_assignment_139196' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139196', subscript_call_result_148026)
        
        # Assigning a Subscript to a Name (line 5855):
        
        # Obtaining the type of the subscript
        int_148027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5855, 8), 'int')
        # Getting the type of 'state' (line 5855)
        state_148028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 44), 'state')
        # Obtaining the member '__getitem__' of a type (line 5855)
        getitem___148029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5855, 8), state_148028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5855)
        subscript_call_result_148030 = invoke(stypy.reporting.localization.Localization(__file__, 5855, 8), getitem___148029, int_148027)
        
        # Assigning a type to the variable 'tuple_var_assignment_139197' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139197', subscript_call_result_148030)
        
        # Assigning a Subscript to a Name (line 5855):
        
        # Obtaining the type of the subscript
        int_148031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5855, 8), 'int')
        # Getting the type of 'state' (line 5855)
        state_148032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 44), 'state')
        # Obtaining the member '__getitem__' of a type (line 5855)
        getitem___148033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5855, 8), state_148032, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5855)
        subscript_call_result_148034 = invoke(stypy.reporting.localization.Localization(__file__, 5855, 8), getitem___148033, int_148031)
        
        # Assigning a type to the variable 'tuple_var_assignment_139198' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139198', subscript_call_result_148034)
        
        # Assigning a Subscript to a Name (line 5855):
        
        # Obtaining the type of the subscript
        int_148035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5855, 8), 'int')
        # Getting the type of 'state' (line 5855)
        state_148036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 44), 'state')
        # Obtaining the member '__getitem__' of a type (line 5855)
        getitem___148037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5855, 8), state_148036, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5855)
        subscript_call_result_148038 = invoke(stypy.reporting.localization.Localization(__file__, 5855, 8), getitem___148037, int_148035)
        
        # Assigning a type to the variable 'tuple_var_assignment_139199' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139199', subscript_call_result_148038)
        
        # Assigning a Subscript to a Name (line 5855):
        
        # Obtaining the type of the subscript
        int_148039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5855, 8), 'int')
        # Getting the type of 'state' (line 5855)
        state_148040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 44), 'state')
        # Obtaining the member '__getitem__' of a type (line 5855)
        getitem___148041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5855, 8), state_148040, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5855)
        subscript_call_result_148042 = invoke(stypy.reporting.localization.Localization(__file__, 5855, 8), getitem___148041, int_148039)
        
        # Assigning a type to the variable 'tuple_var_assignment_139200' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139200', subscript_call_result_148042)
        
        # Assigning a Subscript to a Name (line 5855):
        
        # Obtaining the type of the subscript
        int_148043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5855, 8), 'int')
        # Getting the type of 'state' (line 5855)
        state_148044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 44), 'state')
        # Obtaining the member '__getitem__' of a type (line 5855)
        getitem___148045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5855, 8), state_148044, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5855)
        subscript_call_result_148046 = invoke(stypy.reporting.localization.Localization(__file__, 5855, 8), getitem___148045, int_148043)
        
        # Assigning a type to the variable 'tuple_var_assignment_139201' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139201', subscript_call_result_148046)
        
        # Assigning a Subscript to a Name (line 5855):
        
        # Obtaining the type of the subscript
        int_148047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5855, 8), 'int')
        # Getting the type of 'state' (line 5855)
        state_148048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 44), 'state')
        # Obtaining the member '__getitem__' of a type (line 5855)
        getitem___148049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5855, 8), state_148048, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5855)
        subscript_call_result_148050 = invoke(stypy.reporting.localization.Localization(__file__, 5855, 8), getitem___148049, int_148047)
        
        # Assigning a type to the variable 'tuple_var_assignment_139202' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139202', subscript_call_result_148050)
        
        # Assigning a Name to a Name (line 5855):
        # Getting the type of 'tuple_var_assignment_139196' (line 5855)
        tuple_var_assignment_139196_148051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139196')
        # Assigning a type to the variable '_' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 9), '_', tuple_var_assignment_139196_148051)
        
        # Assigning a Name to a Name (line 5855):
        # Getting the type of 'tuple_var_assignment_139197' (line 5855)
        tuple_var_assignment_139197_148052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139197')
        # Assigning a type to the variable 'shp' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 12), 'shp', tuple_var_assignment_139197_148052)
        
        # Assigning a Name to a Name (line 5855):
        # Getting the type of 'tuple_var_assignment_139198' (line 5855)
        tuple_var_assignment_139198_148053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139198')
        # Assigning a type to the variable 'typ' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 17), 'typ', tuple_var_assignment_139198_148053)
        
        # Assigning a Name to a Name (line 5855):
        # Getting the type of 'tuple_var_assignment_139199' (line 5855)
        tuple_var_assignment_139199_148054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139199')
        # Assigning a type to the variable 'isf' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 22), 'isf', tuple_var_assignment_139199_148054)
        
        # Assigning a Name to a Name (line 5855):
        # Getting the type of 'tuple_var_assignment_139200' (line 5855)
        tuple_var_assignment_139200_148055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139200')
        # Assigning a type to the variable 'raw' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 27), 'raw', tuple_var_assignment_139200_148055)
        
        # Assigning a Name to a Name (line 5855):
        # Getting the type of 'tuple_var_assignment_139201' (line 5855)
        tuple_var_assignment_139201_148056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139201')
        # Assigning a type to the variable 'msk' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 32), 'msk', tuple_var_assignment_139201_148056)
        
        # Assigning a Name to a Name (line 5855):
        # Getting the type of 'tuple_var_assignment_139202' (line 5855)
        tuple_var_assignment_139202_148057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5855, 8), 'tuple_var_assignment_139202')
        # Assigning a type to the variable 'flv' (line 5855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5855, 37), 'flv', tuple_var_assignment_139202_148057)
        
        # Call to __setstate__(...): (line 5856)
        # Processing the call arguments (line 5856)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5856)
        tuple_148064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5856, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5856)
        # Adding element type (line 5856)
        # Getting the type of 'shp' (line 5856)
        shp_148065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5856, 47), 'shp', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5856, 47), tuple_148064, shp_148065)
        # Adding element type (line 5856)
        # Getting the type of 'typ' (line 5856)
        typ_148066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5856, 52), 'typ', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5856, 47), tuple_148064, typ_148066)
        # Adding element type (line 5856)
        # Getting the type of 'isf' (line 5856)
        isf_148067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5856, 57), 'isf', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5856, 47), tuple_148064, isf_148067)
        # Adding element type (line 5856)
        # Getting the type of 'raw' (line 5856)
        raw_148068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5856, 62), 'raw', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5856, 47), tuple_148064, raw_148068)
        
        # Processing the call keyword arguments (line 5856)
        kwargs_148069 = {}
        
        # Call to super(...): (line 5856)
        # Processing the call arguments (line 5856)
        # Getting the type of 'MaskedArray' (line 5856)
        MaskedArray_148059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5856, 14), 'MaskedArray', False)
        # Getting the type of 'self' (line 5856)
        self_148060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5856, 27), 'self', False)
        # Processing the call keyword arguments (line 5856)
        kwargs_148061 = {}
        # Getting the type of 'super' (line 5856)
        super_148058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5856, 8), 'super', False)
        # Calling super(args, kwargs) (line 5856)
        super_call_result_148062 = invoke(stypy.reporting.localization.Localization(__file__, 5856, 8), super_148058, *[MaskedArray_148059, self_148060], **kwargs_148061)
        
        # Obtaining the member '__setstate__' of a type (line 5856)
        setstate___148063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5856, 8), super_call_result_148062, '__setstate__')
        # Calling __setstate__(args, kwargs) (line 5856)
        setstate___call_result_148070 = invoke(stypy.reporting.localization.Localization(__file__, 5856, 8), setstate___148063, *[tuple_148064], **kwargs_148069)
        
        
        # Call to __setstate__(...): (line 5857)
        # Processing the call arguments (line 5857)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5857)
        tuple_148074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5857, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5857)
        # Adding element type (line 5857)
        # Getting the type of 'shp' (line 5857)
        shp_148075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5857, 33), 'shp', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5857, 33), tuple_148074, shp_148075)
        # Adding element type (line 5857)
        
        # Call to make_mask_descr(...): (line 5857)
        # Processing the call arguments (line 5857)
        # Getting the type of 'typ' (line 5857)
        typ_148077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5857, 54), 'typ', False)
        # Processing the call keyword arguments (line 5857)
        kwargs_148078 = {}
        # Getting the type of 'make_mask_descr' (line 5857)
        make_mask_descr_148076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5857, 38), 'make_mask_descr', False)
        # Calling make_mask_descr(args, kwargs) (line 5857)
        make_mask_descr_call_result_148079 = invoke(stypy.reporting.localization.Localization(__file__, 5857, 38), make_mask_descr_148076, *[typ_148077], **kwargs_148078)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5857, 33), tuple_148074, make_mask_descr_call_result_148079)
        # Adding element type (line 5857)
        # Getting the type of 'isf' (line 5857)
        isf_148080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5857, 60), 'isf', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5857, 33), tuple_148074, isf_148080)
        # Adding element type (line 5857)
        # Getting the type of 'msk' (line 5857)
        msk_148081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5857, 65), 'msk', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5857, 33), tuple_148074, msk_148081)
        
        # Processing the call keyword arguments (line 5857)
        kwargs_148082 = {}
        # Getting the type of 'self' (line 5857)
        self_148071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5857, 8), 'self', False)
        # Obtaining the member '_mask' of a type (line 5857)
        _mask_148072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5857, 8), self_148071, '_mask')
        # Obtaining the member '__setstate__' of a type (line 5857)
        setstate___148073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5857, 8), _mask_148072, '__setstate__')
        # Calling __setstate__(args, kwargs) (line 5857)
        setstate___call_result_148083 = invoke(stypy.reporting.localization.Localization(__file__, 5857, 8), setstate___148073, *[tuple_148074], **kwargs_148082)
        
        
        # Assigning a Name to a Attribute (line 5858):
        
        # Assigning a Name to a Attribute (line 5858):
        # Getting the type of 'flv' (line 5858)
        flv_148084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5858, 26), 'flv')
        # Getting the type of 'self' (line 5858)
        self_148085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5858, 8), 'self')
        # Setting the type of the member 'fill_value' of a type (line 5858)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5858, 8), self_148085, 'fill_value', flv_148084)
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 5843)
        stypy_return_type_148086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5843, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148086)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_148086


    @norecursion
    def __reduce__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__reduce__'
        module_type_store = module_type_store.open_function_context('__reduce__', 5860, 4, False)
        # Assigning a type to the variable 'self' (line 5861)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5861, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__reduce__')
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__reduce__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__reduce__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__reduce__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__reduce__(...)' code ##################

        str_148087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5863, (-1)), 'str', 'Return a 3-tuple for pickling a MaskedArray.\n\n        ')
        
        # Obtaining an instance of the builtin type 'tuple' (line 5864)
        tuple_148088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5864, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5864)
        # Adding element type (line 5864)
        # Getting the type of '_mareconstruct' (line 5864)
        _mareconstruct_148089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5864, 16), '_mareconstruct')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5864, 16), tuple_148088, _mareconstruct_148089)
        # Adding element type (line 5864)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5865)
        tuple_148090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5865, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5865)
        # Adding element type (line 5865)
        # Getting the type of 'self' (line 5865)
        self_148091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5865, 17), 'self')
        # Obtaining the member '__class__' of a type (line 5865)
        class___148092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5865, 17), self_148091, '__class__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5865, 17), tuple_148090, class___148092)
        # Adding element type (line 5865)
        # Getting the type of 'self' (line 5865)
        self_148093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5865, 33), 'self')
        # Obtaining the member '_baseclass' of a type (line 5865)
        _baseclass_148094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5865, 33), self_148093, '_baseclass')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5865, 17), tuple_148090, _baseclass_148094)
        # Adding element type (line 5865)
        
        # Obtaining an instance of the builtin type 'tuple' (line 5865)
        tuple_148095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5865, 51), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5865)
        # Adding element type (line 5865)
        int_148096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5865, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5865, 51), tuple_148095, int_148096)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5865, 17), tuple_148090, tuple_148095)
        # Adding element type (line 5865)
        str_148097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5865, 56), 'str', 'b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5865, 17), tuple_148090, str_148097)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5864, 16), tuple_148088, tuple_148090)
        # Adding element type (line 5864)
        
        # Call to __getstate__(...): (line 5866)
        # Processing the call keyword arguments (line 5866)
        kwargs_148100 = {}
        # Getting the type of 'self' (line 5866)
        self_148098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5866, 16), 'self', False)
        # Obtaining the member '__getstate__' of a type (line 5866)
        getstate___148099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5866, 16), self_148098, '__getstate__')
        # Calling __getstate__(args, kwargs) (line 5866)
        getstate___call_result_148101 = invoke(stypy.reporting.localization.Localization(__file__, 5866, 16), getstate___148099, *[], **kwargs_148100)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5864, 16), tuple_148088, getstate___call_result_148101)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5864, 8), 'stypy_return_type', tuple_148088)
        
        # ################# End of '__reduce__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__reduce__' in the type store
        # Getting the type of 'stypy_return_type' (line 5860)
        stypy_return_type_148102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5860, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148102)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__reduce__'
        return stypy_return_type_148102


    @norecursion
    def __deepcopy__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5868)
        None_148103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5868, 32), 'None')
        defaults = [None_148103]
        # Create a new context for function '__deepcopy__'
        module_type_store = module_type_store.open_function_context('__deepcopy__', 5868, 4, False)
        # Assigning a type to the variable 'self' (line 5869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5869, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_localization', localization)
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_function_name', 'MaskedArray.__deepcopy__')
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_param_names_list', ['memo'])
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedArray.__deepcopy__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__deepcopy__', ['memo'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__deepcopy__', localization, ['memo'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__deepcopy__(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5869, 8))
        
        # 'from copy import deepcopy' statement (line 5869)
        from copy import deepcopy

        import_from_module(stypy.reporting.localization.Localization(__file__, 5869, 8), 'copy', None, module_type_store, ['deepcopy'], [deepcopy])
        
        
        # Assigning a Call to a Name (line 5870):
        
        # Assigning a Call to a Name (line 5870):
        
        # Call to __new__(...): (line 5870)
        # Processing the call arguments (line 5870)
        
        # Call to type(...): (line 5870)
        # Processing the call arguments (line 5870)
        # Getting the type of 'self' (line 5870)
        self_148107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5870, 42), 'self', False)
        # Processing the call keyword arguments (line 5870)
        kwargs_148108 = {}
        # Getting the type of 'type' (line 5870)
        type_148106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5870, 37), 'type', False)
        # Calling type(args, kwargs) (line 5870)
        type_call_result_148109 = invoke(stypy.reporting.localization.Localization(__file__, 5870, 37), type_148106, *[self_148107], **kwargs_148108)
        
        # Getting the type of 'self' (line 5870)
        self_148110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5870, 49), 'self', False)
        # Processing the call keyword arguments (line 5870)
        # Getting the type of 'True' (line 5870)
        True_148111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5870, 60), 'True', False)
        keyword_148112 = True_148111
        kwargs_148113 = {'copy': keyword_148112}
        # Getting the type of 'MaskedArray' (line 5870)
        MaskedArray_148104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5870, 17), 'MaskedArray', False)
        # Obtaining the member '__new__' of a type (line 5870)
        new___148105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5870, 17), MaskedArray_148104, '__new__')
        # Calling __new__(args, kwargs) (line 5870)
        new___call_result_148114 = invoke(stypy.reporting.localization.Localization(__file__, 5870, 17), new___148105, *[type_call_result_148109, self_148110], **kwargs_148113)
        
        # Assigning a type to the variable 'copied' (line 5870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5870, 8), 'copied', new___call_result_148114)
        
        # Type idiom detected: calculating its left and rigth part (line 5871)
        # Getting the type of 'memo' (line 5871)
        memo_148115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5871, 11), 'memo')
        # Getting the type of 'None' (line 5871)
        None_148116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5871, 19), 'None')
        
        (may_be_148117, more_types_in_union_148118) = may_be_none(memo_148115, None_148116)

        if may_be_148117:

            if more_types_in_union_148118:
                # Runtime conditional SSA (line 5871)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Name (line 5872):
            
            # Assigning a Dict to a Name (line 5872):
            
            # Obtaining an instance of the builtin type 'dict' (line 5872)
            dict_148119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5872, 19), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 5872)
            
            # Assigning a type to the variable 'memo' (line 5872)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5872, 12), 'memo', dict_148119)

            if more_types_in_union_148118:
                # SSA join for if statement (line 5871)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Subscript (line 5873):
        
        # Assigning a Name to a Subscript (line 5873):
        # Getting the type of 'copied' (line 5873)
        copied_148120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5873, 25), 'copied')
        # Getting the type of 'memo' (line 5873)
        memo_148121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5873, 8), 'memo')
        
        # Call to id(...): (line 5873)
        # Processing the call arguments (line 5873)
        # Getting the type of 'self' (line 5873)
        self_148123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5873, 16), 'self', False)
        # Processing the call keyword arguments (line 5873)
        kwargs_148124 = {}
        # Getting the type of 'id' (line 5873)
        id_148122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5873, 13), 'id', False)
        # Calling id(args, kwargs) (line 5873)
        id_call_result_148125 = invoke(stypy.reporting.localization.Localization(__file__, 5873, 13), id_148122, *[self_148123], **kwargs_148124)
        
        # Storing an element on a container (line 5873)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5873, 8), memo_148121, (id_call_result_148125, copied_148120))
        
        
        # Call to items(...): (line 5874)
        # Processing the call keyword arguments (line 5874)
        kwargs_148129 = {}
        # Getting the type of 'self' (line 5874)
        self_148126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5874, 22), 'self', False)
        # Obtaining the member '__dict__' of a type (line 5874)
        dict___148127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5874, 22), self_148126, '__dict__')
        # Obtaining the member 'items' of a type (line 5874)
        items_148128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5874, 22), dict___148127, 'items')
        # Calling items(args, kwargs) (line 5874)
        items_call_result_148130 = invoke(stypy.reporting.localization.Localization(__file__, 5874, 22), items_148128, *[], **kwargs_148129)
        
        # Testing the type of a for loop iterable (line 5874)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5874, 8), items_call_result_148130)
        # Getting the type of the for loop variable (line 5874)
        for_loop_var_148131 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5874, 8), items_call_result_148130)
        # Assigning a type to the variable 'k' (line 5874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5874, 8), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5874, 8), for_loop_var_148131))
        # Assigning a type to the variable 'v' (line 5874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5874, 8), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5874, 8), for_loop_var_148131))
        # SSA begins for a for statement (line 5874)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 5875):
        
        # Assigning a Call to a Subscript (line 5875):
        
        # Call to deepcopy(...): (line 5875)
        # Processing the call arguments (line 5875)
        # Getting the type of 'v' (line 5875)
        v_148133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5875, 42), 'v', False)
        # Getting the type of 'memo' (line 5875)
        memo_148134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5875, 45), 'memo', False)
        # Processing the call keyword arguments (line 5875)
        kwargs_148135 = {}
        # Getting the type of 'deepcopy' (line 5875)
        deepcopy_148132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5875, 33), 'deepcopy', False)
        # Calling deepcopy(args, kwargs) (line 5875)
        deepcopy_call_result_148136 = invoke(stypy.reporting.localization.Localization(__file__, 5875, 33), deepcopy_148132, *[v_148133, memo_148134], **kwargs_148135)
        
        # Getting the type of 'copied' (line 5875)
        copied_148137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5875, 12), 'copied')
        # Obtaining the member '__dict__' of a type (line 5875)
        dict___148138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5875, 12), copied_148137, '__dict__')
        # Getting the type of 'k' (line 5875)
        k_148139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5875, 28), 'k')
        # Storing an element on a container (line 5875)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5875, 12), dict___148138, (k_148139, deepcopy_call_result_148136))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'copied' (line 5876)
        copied_148140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5876, 15), 'copied')
        # Assigning a type to the variable 'stypy_return_type' (line 5876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5876, 8), 'stypy_return_type', copied_148140)
        
        # ################# End of '__deepcopy__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__deepcopy__' in the type store
        # Getting the type of 'stypy_return_type' (line 5868)
        stypy_return_type_148141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5868, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148141)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__deepcopy__'
        return stypy_return_type_148141


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2642, 0, False)
        # Assigning a type to the variable 'self' (line 2643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedArray.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'MaskedArray' (line 2642)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2642, 0), 'MaskedArray', MaskedArray)

# Assigning a Num to a Name (line 2697):
int_148142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2697, 25), 'int')
# Getting the type of 'MaskedArray'
MaskedArray_148143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member '__array_priority__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148143, '__array_priority__', int_148142)

# Assigning a Name to a Name (line 2698):
# Getting the type of 'nomask' (line 2698)
nomask_148144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 19), 'nomask')
# Getting the type of 'MaskedArray'
MaskedArray_148145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member '_defaultmask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148145, '_defaultmask', nomask_148144)

# Assigning a Name to a Name (line 2699):
# Getting the type of 'False' (line 2699)
False_148146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 23), 'False')
# Getting the type of 'MaskedArray'
MaskedArray_148147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member '_defaulthardmask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148147, '_defaulthardmask', False_148146)

# Assigning a Name to a Name (line 2700):
# Getting the type of 'ndarray' (line 2700)
ndarray_148148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 17), 'ndarray')
# Getting the type of 'MaskedArray'
MaskedArray_148149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member '_baseclass' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148149, '_baseclass', ndarray_148148)

# Assigning a Num to a Name (line 2702):
int_148150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2702, 19), 'int')
# Getting the type of 'MaskedArray'
MaskedArray_148151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member '_print_width' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148151, '_print_width', int_148150)

# Assigning a Attribute to a Attribute (line 3066):
# Getting the type of 'ndarray' (line 3066)
ndarray_148152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3066, 19), 'ndarray')
# Obtaining the member 'view' of a type (line 3066)
view_148153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 19), ndarray_148152, 'view')
# Obtaining the member '__doc__' of a type (line 3066)
doc___148154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3066, 19), view_148153, '__doc__')
# Getting the type of 'MaskedArray'
MaskedArray_148155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Obtaining the member 'view' of a type
view_148156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148155, 'view')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), view_148156, '__doc__', doc___148154)

# Assigning a Name to a Name (line 3364):
# Getting the type of 'MaskedArray'
MaskedArray_148157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Obtaining the member '__setmask__' of a type
setmask___148158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148157, '__setmask__')
# Getting the type of 'MaskedArray'
MaskedArray_148159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member '_set_mask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148159, '_set_mask', setmask___148158)

# Assigning a Call to a Name (line 3374):

# Call to property(...): (line 3374)
# Processing the call keyword arguments (line 3374)
# Getting the type of '_get_mask' (line 3374)
_get_mask_148161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 25), '_get_mask', False)
keyword_148162 = _get_mask_148161
# Getting the type of '__setmask__' (line 3374)
setmask___148163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 41), '__setmask__', False)
keyword_148164 = setmask___148163
str_148165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3374, 58), 'str', 'Mask')
keyword_148166 = str_148165
kwargs_148167 = {'doc': keyword_148166, 'fset': keyword_148164, 'fget': keyword_148162}
# Getting the type of 'property' (line 3374)
property_148160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3374, 11), 'property', False)
# Calling property(args, kwargs) (line 3374)
property_call_result_148168 = invoke(stypy.reporting.localization.Localization(__file__, 3374, 11), property_148160, *[], **kwargs_148167)

# Getting the type of 'MaskedArray'
MaskedArray_148169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'mask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148169, 'mask', property_call_result_148168)

# Assigning a Call to a Name (line 3397):

# Call to property(...): (line 3397)
# Processing the call keyword arguments (line 3397)
# Getting the type of '_get_recordmask' (line 3397)
_get_recordmask_148171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 31), '_get_recordmask', False)
keyword_148172 = _get_recordmask_148171
kwargs_148173 = {'fget': keyword_148172}
# Getting the type of 'property' (line 3397)
property_148170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 17), 'property', False)
# Calling property(args, kwargs) (line 3397)
property_call_result_148174 = invoke(stypy.reporting.localization.Localization(__file__, 3397, 17), property_148170, *[], **kwargs_148173)

# Getting the type of 'MaskedArray'
MaskedArray_148175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'recordmask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148175, 'recordmask', property_call_result_148174)

# Assigning a Call to a Name (line 3429):

# Call to property(...): (line 3429)
# Processing the call keyword arguments (line 3429)

@norecursion
def _stypy_temp_lambda_37(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_37'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_37', 3429, 29, True)
    # Passed parameters checking function
    _stypy_temp_lambda_37.stypy_localization = localization
    _stypy_temp_lambda_37.stypy_type_of_self = None
    _stypy_temp_lambda_37.stypy_type_store = module_type_store
    _stypy_temp_lambda_37.stypy_function_name = '_stypy_temp_lambda_37'
    _stypy_temp_lambda_37.stypy_param_names_list = ['self']
    _stypy_temp_lambda_37.stypy_varargs_param_name = None
    _stypy_temp_lambda_37.stypy_kwargs_param_name = None
    _stypy_temp_lambda_37.stypy_call_defaults = defaults
    _stypy_temp_lambda_37.stypy_call_varargs = varargs
    _stypy_temp_lambda_37.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_37', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_37', ['self'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'self' (line 3429)
    self_148177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 42), 'self', False)
    # Obtaining the member '_hardmask' of a type (line 3429)
    _hardmask_148178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3429, 42), self_148177, '_hardmask')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 3429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3429, 29), 'stypy_return_type', _hardmask_148178)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_37' in the type store
    # Getting the type of 'stypy_return_type' (line 3429)
    stypy_return_type_148179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 29), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_148179)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_37'
    return stypy_return_type_148179

# Assigning a type to the variable '_stypy_temp_lambda_37' (line 3429)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3429, 29), '_stypy_temp_lambda_37', _stypy_temp_lambda_37)
# Getting the type of '_stypy_temp_lambda_37' (line 3429)
_stypy_temp_lambda_37_148180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 29), '_stypy_temp_lambda_37')
keyword_148181 = _stypy_temp_lambda_37_148180
str_148182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3430, 28), 'str', 'Hardness of the mask')
keyword_148183 = str_148182
kwargs_148184 = {'doc': keyword_148183, 'fget': keyword_148181}
# Getting the type of 'property' (line 3429)
property_148176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 15), 'property', False)
# Calling property(args, kwargs) (line 3429)
property_call_result_148185 = invoke(stypy.reporting.localization.Localization(__file__, 3429, 15), property_148176, *[], **kwargs_148184)

# Getting the type of 'MaskedArray'
MaskedArray_148186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'hardmask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148186, 'hardmask', property_call_result_148185)

# Assigning a Call to a Name (line 3450):

# Call to property(...): (line 3450)
# Processing the call keyword arguments (line 3450)

@norecursion
def _stypy_temp_lambda_38(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_38'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_38', 3450, 31, True)
    # Passed parameters checking function
    _stypy_temp_lambda_38.stypy_localization = localization
    _stypy_temp_lambda_38.stypy_type_of_self = None
    _stypy_temp_lambda_38.stypy_type_store = module_type_store
    _stypy_temp_lambda_38.stypy_function_name = '_stypy_temp_lambda_38'
    _stypy_temp_lambda_38.stypy_param_names_list = ['self']
    _stypy_temp_lambda_38.stypy_varargs_param_name = None
    _stypy_temp_lambda_38.stypy_kwargs_param_name = None
    _stypy_temp_lambda_38.stypy_call_defaults = defaults
    _stypy_temp_lambda_38.stypy_call_varargs = varargs
    _stypy_temp_lambda_38.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_38', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_38', ['self'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'self' (line 3450)
    self_148188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3450, 44), 'self', False)
    # Obtaining the member '_sharedmask' of a type (line 3450)
    _sharedmask_148189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3450, 44), self_148188, '_sharedmask')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 3450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3450, 31), 'stypy_return_type', _sharedmask_148189)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_38' in the type store
    # Getting the type of 'stypy_return_type' (line 3450)
    stypy_return_type_148190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3450, 31), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_148190)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_38'
    return stypy_return_type_148190

# Assigning a type to the variable '_stypy_temp_lambda_38' (line 3450)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3450, 31), '_stypy_temp_lambda_38', _stypy_temp_lambda_38)
# Getting the type of '_stypy_temp_lambda_38' (line 3450)
_stypy_temp_lambda_38_148191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3450, 31), '_stypy_temp_lambda_38')
keyword_148192 = _stypy_temp_lambda_38_148191
str_148193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3451, 30), 'str', 'Share status of the mask (read-only).')
keyword_148194 = str_148193
kwargs_148195 = {'doc': keyword_148194, 'fget': keyword_148192}
# Getting the type of 'property' (line 3450)
property_148187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3450, 17), 'property', False)
# Calling property(args, kwargs) (line 3450)
property_call_result_148196 = invoke(stypy.reporting.localization.Localization(__file__, 3450, 17), property_148187, *[], **kwargs_148195)

# Getting the type of 'MaskedArray'
MaskedArray_148197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'sharedmask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148197, 'sharedmask', property_call_result_148196)

# Assigning a Call to a Name (line 3481):

# Call to property(...): (line 3481)
# Processing the call keyword arguments (line 3481)

@norecursion
def _stypy_temp_lambda_39(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_39'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_39', 3481, 30, True)
    # Passed parameters checking function
    _stypy_temp_lambda_39.stypy_localization = localization
    _stypy_temp_lambda_39.stypy_type_of_self = None
    _stypy_temp_lambda_39.stypy_type_store = module_type_store
    _stypy_temp_lambda_39.stypy_function_name = '_stypy_temp_lambda_39'
    _stypy_temp_lambda_39.stypy_param_names_list = ['self']
    _stypy_temp_lambda_39.stypy_varargs_param_name = None
    _stypy_temp_lambda_39.stypy_kwargs_param_name = None
    _stypy_temp_lambda_39.stypy_call_defaults = defaults
    _stypy_temp_lambda_39.stypy_call_varargs = varargs
    _stypy_temp_lambda_39.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_39', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_39', ['self'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    # Getting the type of 'self' (line 3481)
    self_148199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3481, 43), 'self', False)
    # Obtaining the member '_baseclass' of a type (line 3481)
    _baseclass_148200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3481, 43), self_148199, '_baseclass')
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 3481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3481, 30), 'stypy_return_type', _baseclass_148200)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_39' in the type store
    # Getting the type of 'stypy_return_type' (line 3481)
    stypy_return_type_148201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3481, 30), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_148201)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_39'
    return stypy_return_type_148201

# Assigning a type to the variable '_stypy_temp_lambda_39' (line 3481)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3481, 30), '_stypy_temp_lambda_39', _stypy_temp_lambda_39)
# Getting the type of '_stypy_temp_lambda_39' (line 3481)
_stypy_temp_lambda_39_148202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3481, 30), '_stypy_temp_lambda_39')
keyword_148203 = _stypy_temp_lambda_39_148202
str_148204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3482, 29), 'str', 'Class of the underlying data (read-only).')
keyword_148205 = str_148204
kwargs_148206 = {'doc': keyword_148205, 'fget': keyword_148203}
# Getting the type of 'property' (line 3481)
property_148198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3481, 16), 'property', False)
# Calling property(args, kwargs) (line 3481)
property_call_result_148207 = invoke(stypy.reporting.localization.Localization(__file__, 3481, 16), property_148198, *[], **kwargs_148206)

# Getting the type of 'MaskedArray'
MaskedArray_148208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'baseclass' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148208, 'baseclass', property_call_result_148207)

# Assigning a Call to a Name (line 3491):

# Call to property(...): (line 3491)
# Processing the call keyword arguments (line 3491)
# Getting the type of '_get_data' (line 3491)
_get_data_148210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 26), '_get_data', False)
keyword_148211 = _get_data_148210
kwargs_148212 = {'fget': keyword_148211}
# Getting the type of 'property' (line 3491)
property_148209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 12), 'property', False)
# Calling property(args, kwargs) (line 3491)
property_call_result_148213 = invoke(stypy.reporting.localization.Localization(__file__, 3491, 12), property_148209, *[], **kwargs_148212)

# Getting the type of 'MaskedArray'
MaskedArray_148214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member '_data' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148214, '_data', property_call_result_148213)

# Assigning a Call to a Name (line 3492):

# Call to property(...): (line 3492)
# Processing the call keyword arguments (line 3492)
# Getting the type of '_get_data' (line 3492)
_get_data_148216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 25), '_get_data', False)
keyword_148217 = _get_data_148216
kwargs_148218 = {'fget': keyword_148217}
# Getting the type of 'property' (line 3492)
property_148215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 11), 'property', False)
# Calling property(args, kwargs) (line 3492)
property_call_result_148219 = invoke(stypy.reporting.localization.Localization(__file__, 3492, 11), property_148215, *[], **kwargs_148218)

# Getting the type of 'MaskedArray'
MaskedArray_148220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'data' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148220, 'data', property_call_result_148219)

# Assigning a Call to a Name (line 3503):

# Call to property(...): (line 3503)
# Processing the call keyword arguments (line 3503)
# Getting the type of '_get_flat' (line 3503)
_get_flat_148222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3503, 25), '_get_flat', False)
keyword_148223 = _get_flat_148222
# Getting the type of '_set_flat' (line 3503)
_set_flat_148224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3503, 41), '_set_flat', False)
keyword_148225 = _set_flat_148224
str_148226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3504, 24), 'str', 'Flat version of the array.')
keyword_148227 = str_148226
kwargs_148228 = {'doc': keyword_148227, 'fset': keyword_148225, 'fget': keyword_148223}
# Getting the type of 'property' (line 3503)
property_148221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3503, 11), 'property', False)
# Calling property(args, kwargs) (line 3503)
property_call_result_148229 = invoke(stypy.reporting.localization.Localization(__file__, 3503, 11), property_148221, *[], **kwargs_148228)

# Getting the type of 'MaskedArray'
MaskedArray_148230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'flat' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148230, 'flat', property_call_result_148229)

# Assigning a Call to a Name (line 3573):

# Call to property(...): (line 3573)
# Processing the call keyword arguments (line 3573)
# Getting the type of 'get_fill_value' (line 3573)
get_fill_value_148232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 31), 'get_fill_value', False)
keyword_148233 = get_fill_value_148232
# Getting the type of 'set_fill_value' (line 3573)
set_fill_value_148234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 52), 'set_fill_value', False)
keyword_148235 = set_fill_value_148234
str_148236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3574, 30), 'str', 'Filling value.')
keyword_148237 = str_148236
kwargs_148238 = {'doc': keyword_148237, 'fset': keyword_148235, 'fget': keyword_148233}
# Getting the type of 'property' (line 3573)
property_148231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 17), 'property', False)
# Calling property(args, kwargs) (line 3573)
property_call_result_148239 = invoke(stypy.reporting.localization.Localization(__file__, 3573, 17), property_148231, *[], **kwargs_148238)

# Getting the type of 'MaskedArray'
MaskedArray_148240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'fill_value' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148240, 'fill_value', property_call_result_148239)

# Assigning a Call to a Name (line 4188):

# Call to property(...): (line 4188)
# Processing the call keyword arguments (line 4188)
# Getting the type of 'get_imag' (line 4188)
get_imag_148242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4188, 25), 'get_imag', False)
keyword_148243 = get_imag_148242
str_148244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4188, 39), 'str', 'Imaginary part.')
keyword_148245 = str_148244
kwargs_148246 = {'doc': keyword_148245, 'fget': keyword_148243}
# Getting the type of 'property' (line 4188)
property_148241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4188, 11), 'property', False)
# Calling property(args, kwargs) (line 4188)
property_call_result_148247 = invoke(stypy.reporting.localization.Localization(__file__, 4188, 11), property_148241, *[], **kwargs_148246)

# Getting the type of 'MaskedArray'
MaskedArray_148248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'imag' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148248, 'imag', property_call_result_148247)

# Assigning a Call to a Name (line 4222):

# Call to property(...): (line 4222)
# Processing the call keyword arguments (line 4222)
# Getting the type of 'get_real' (line 4222)
get_real_148250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4222, 25), 'get_real', False)
keyword_148251 = get_real_148250
str_148252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4222, 39), 'str', 'Real part')
keyword_148253 = str_148252
kwargs_148254 = {'doc': keyword_148253, 'fget': keyword_148251}
# Getting the type of 'property' (line 4222)
property_148249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4222, 11), 'property', False)
# Calling property(args, kwargs) (line 4222)
property_call_result_148255 = invoke(stypy.reporting.localization.Localization(__file__, 4222, 11), property_148249, *[], **kwargs_148254)

# Getting the type of 'MaskedArray'
MaskedArray_148256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'real' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148256, 'real', property_call_result_148255)

# Assigning a Call to a Name (line 4287):

# Call to _arraymethod(...): (line 4287)
# Processing the call arguments (line 4287)
str_148258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4287, 27), 'str', 'flatten')
# Processing the call keyword arguments (line 4287)
kwargs_148259 = {}
# Getting the type of '_arraymethod' (line 4287)
_arraymethod_148257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4287, 14), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 4287)
_arraymethod_call_result_148260 = invoke(stypy.reporting.localization.Localization(__file__, 4287, 14), _arraymethod_148257, *[str_148258], **kwargs_148259)

# Getting the type of 'MaskedArray'
MaskedArray_148261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'flatten' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148261, 'flatten', _arraymethod_call_result_148260)

# Assigning a Call to a Name (line 4334):

# Call to _arraymethod(...): (line 4334)
# Processing the call arguments (line 4334)
str_148263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4334, 26), 'str', 'repeat')
# Processing the call keyword arguments (line 4334)
kwargs_148264 = {}
# Getting the type of '_arraymethod' (line 4334)
_arraymethod_148262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4334, 13), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 4334)
_arraymethod_call_result_148265 = invoke(stypy.reporting.localization.Localization(__file__, 4334, 13), _arraymethod_148262, *[str_148263], **kwargs_148264)

# Getting the type of 'MaskedArray'
MaskedArray_148266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'repeat' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148266, 'repeat', _arraymethod_call_result_148265)

# Assigning a Attribute to a Attribute (line 4729):
# Getting the type of 'ndarray' (line 4729)
ndarray_148267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4729, 20), 'ndarray')
# Obtaining the member 'trace' of a type (line 4729)
trace_148268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4729, 20), ndarray_148267, 'trace')
# Obtaining the member '__doc__' of a type (line 4729)
doc___148269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4729, 20), trace_148268, '__doc__')
# Getting the type of 'MaskedArray'
MaskedArray_148270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Obtaining the member 'trace' of a type
trace_148271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148270, 'trace')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), trace_148271, '__doc__', doc___148269)

# Assigning a Name to a Name (line 4963):
# Getting the type of 'MaskedArray'
MaskedArray_148272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Obtaining the member 'prod' of a type
prod_148273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148272, 'prod')
# Getting the type of 'MaskedArray'
MaskedArray_148274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'product' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148274, 'product', prod_148273)

# Assigning a Attribute to a Attribute (line 5161):
# Getting the type of 'np' (line 5161)
np_148275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5161, 18), 'np')
# Obtaining the member 'var' of a type (line 5161)
var_148276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5161, 18), np_148275, 'var')
# Obtaining the member '__doc__' of a type (line 5161)
doc___148277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5161, 18), var_148276, '__doc__')
# Getting the type of 'MaskedArray'
MaskedArray_148278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Obtaining the member 'var' of a type
var_148279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148278, 'var')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), var_148279, '__doc__', doc___148277)

# Assigning a Attribute to a Attribute (line 5172):
# Getting the type of 'np' (line 5172)
np_148280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5172, 18), 'np')
# Obtaining the member 'std' of a type (line 5172)
std_148281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5172, 18), np_148280, 'std')
# Obtaining the member '__doc__' of a type (line 5172)
doc___148282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5172, 18), std_148281, '__doc__')
# Getting the type of 'MaskedArray'
MaskedArray_148283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Obtaining the member 'std' of a type
std_148284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148283, 'std')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), std_148284, '__doc__', doc___148282)

# Assigning a Attribute to a Attribute (line 5198):
# Getting the type of 'ndarray' (line 5198)
ndarray_148285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5198, 20), 'ndarray')
# Obtaining the member 'round' of a type (line 5198)
round_148286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5198, 20), ndarray_148285, 'round')
# Obtaining the member '__doc__' of a type (line 5198)
doc___148287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5198, 20), round_148286, '__doc__')
# Getting the type of 'MaskedArray'
MaskedArray_148288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Obtaining the member 'round' of a type
round_148289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148288, 'round')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), round_148289, '__doc__', doc___148287)

# Assigning a Call to a Name (line 5647):

# Call to _arraymethod(...): (line 5647)
# Processing the call arguments (line 5647)
str_148291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5647, 24), 'str', 'copy')
# Processing the call keyword arguments (line 5647)
kwargs_148292 = {}
# Getting the type of '_arraymethod' (line 5647)
_arraymethod_148290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5647, 11), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 5647)
_arraymethod_call_result_148293 = invoke(stypy.reporting.localization.Localization(__file__, 5647, 11), _arraymethod_148290, *[str_148291], **kwargs_148292)

# Getting the type of 'MaskedArray'
MaskedArray_148294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'copy' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148294, 'copy', _arraymethod_call_result_148293)

# Assigning a Call to a Name (line 5648):

# Call to _arraymethod(...): (line 5648)
# Processing the call arguments (line 5648)
str_148296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5648, 28), 'str', 'diagonal')
# Processing the call keyword arguments (line 5648)
kwargs_148297 = {}
# Getting the type of '_arraymethod' (line 5648)
_arraymethod_148295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5648, 15), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 5648)
_arraymethod_call_result_148298 = invoke(stypy.reporting.localization.Localization(__file__, 5648, 15), _arraymethod_148295, *[str_148296], **kwargs_148297)

# Getting the type of 'MaskedArray'
MaskedArray_148299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'diagonal' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148299, 'diagonal', _arraymethod_call_result_148298)

# Assigning a Call to a Name (line 5649):

# Call to _arraymethod(...): (line 5649)
# Processing the call arguments (line 5649)
str_148301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5649, 29), 'str', 'transpose')
# Processing the call keyword arguments (line 5649)
kwargs_148302 = {}
# Getting the type of '_arraymethod' (line 5649)
_arraymethod_148300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5649, 16), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 5649)
_arraymethod_call_result_148303 = invoke(stypy.reporting.localization.Localization(__file__, 5649, 16), _arraymethod_148300, *[str_148301], **kwargs_148302)

# Getting the type of 'MaskedArray'
MaskedArray_148304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'transpose' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148304, 'transpose', _arraymethod_call_result_148303)

# Assigning a Call to a Name (line 5650):

# Call to property(...): (line 5650)
# Processing the call keyword arguments (line 5650)

@norecursion
def _stypy_temp_lambda_40(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stypy_temp_lambda_40'
    module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_40', 5650, 22, True)
    # Passed parameters checking function
    _stypy_temp_lambda_40.stypy_localization = localization
    _stypy_temp_lambda_40.stypy_type_of_self = None
    _stypy_temp_lambda_40.stypy_type_store = module_type_store
    _stypy_temp_lambda_40.stypy_function_name = '_stypy_temp_lambda_40'
    _stypy_temp_lambda_40.stypy_param_names_list = ['self']
    _stypy_temp_lambda_40.stypy_varargs_param_name = None
    _stypy_temp_lambda_40.stypy_kwargs_param_name = None
    _stypy_temp_lambda_40.stypy_call_defaults = defaults
    _stypy_temp_lambda_40.stypy_call_varargs = varargs
    _stypy_temp_lambda_40.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_40', ['self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Stacktrace push for error reporting
    localization.set_stack_trace('_stypy_temp_lambda_40', ['self'], arguments)
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of the lambda function code ##################

    
    # Call to transpose(...): (line 5650)
    # Processing the call keyword arguments (line 5650)
    kwargs_148308 = {}
    # Getting the type of 'self' (line 5650)
    self_148306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5650, 35), 'self', False)
    # Obtaining the member 'transpose' of a type (line 5650)
    transpose_148307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5650, 35), self_148306, 'transpose')
    # Calling transpose(args, kwargs) (line 5650)
    transpose_call_result_148309 = invoke(stypy.reporting.localization.Localization(__file__, 5650, 35), transpose_148307, *[], **kwargs_148308)
    
    # Assigning the return type of the lambda function
    # Assigning a type to the variable 'stypy_return_type' (line 5650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5650, 22), 'stypy_return_type', transpose_call_result_148309)
    
    # ################# End of the lambda function code ##################

    # Stacktrace pop (error reporting)
    localization.unset_stack_trace()
    
    # Storing the return type of function '_stypy_temp_lambda_40' in the type store
    # Getting the type of 'stypy_return_type' (line 5650)
    stypy_return_type_148310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5650, 22), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_148310)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stypy_temp_lambda_40'
    return stypy_return_type_148310

# Assigning a type to the variable '_stypy_temp_lambda_40' (line 5650)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5650, 22), '_stypy_temp_lambda_40', _stypy_temp_lambda_40)
# Getting the type of '_stypy_temp_lambda_40' (line 5650)
_stypy_temp_lambda_40_148311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5650, 22), '_stypy_temp_lambda_40')
keyword_148312 = _stypy_temp_lambda_40_148311
kwargs_148313 = {'fget': keyword_148312}
# Getting the type of 'property' (line 5650)
property_148305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5650, 8), 'property', False)
# Calling property(args, kwargs) (line 5650)
property_call_result_148314 = invoke(stypy.reporting.localization.Localization(__file__, 5650, 8), property_148305, *[], **kwargs_148313)

# Getting the type of 'MaskedArray'
MaskedArray_148315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'T' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148315, 'T', property_call_result_148314)

# Assigning a Call to a Name (line 5651):

# Call to _arraymethod(...): (line 5651)
# Processing the call arguments (line 5651)
str_148317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5651, 28), 'str', 'swapaxes')
# Processing the call keyword arguments (line 5651)
kwargs_148318 = {}
# Getting the type of '_arraymethod' (line 5651)
_arraymethod_148316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5651, 15), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 5651)
_arraymethod_call_result_148319 = invoke(stypy.reporting.localization.Localization(__file__, 5651, 15), _arraymethod_148316, *[str_148317], **kwargs_148318)

# Getting the type of 'MaskedArray'
MaskedArray_148320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'swapaxes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148320, 'swapaxes', _arraymethod_call_result_148319)

# Assigning a Call to a Name (line 5652):

# Call to _arraymethod(...): (line 5652)
# Processing the call arguments (line 5652)
str_148322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5652, 24), 'str', 'clip')
# Processing the call keyword arguments (line 5652)
# Getting the type of 'False' (line 5652)
False_148323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5652, 39), 'False', False)
keyword_148324 = False_148323
kwargs_148325 = {'onmask': keyword_148324}
# Getting the type of '_arraymethod' (line 5652)
_arraymethod_148321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5652, 11), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 5652)
_arraymethod_call_result_148326 = invoke(stypy.reporting.localization.Localization(__file__, 5652, 11), _arraymethod_148321, *[str_148322], **kwargs_148325)

# Getting the type of 'MaskedArray'
MaskedArray_148327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'clip' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148327, 'clip', _arraymethod_call_result_148326)

# Assigning a Call to a Name (line 5653):

# Call to _arraymethod(...): (line 5653)
# Processing the call arguments (line 5653)
str_148329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5653, 24), 'str', 'copy')
# Processing the call keyword arguments (line 5653)
kwargs_148330 = {}
# Getting the type of '_arraymethod' (line 5653)
_arraymethod_148328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5653, 11), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 5653)
_arraymethod_call_result_148331 = invoke(stypy.reporting.localization.Localization(__file__, 5653, 11), _arraymethod_148328, *[str_148329], **kwargs_148330)

# Getting the type of 'MaskedArray'
MaskedArray_148332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'copy' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148332, 'copy', _arraymethod_call_result_148331)

# Assigning a Call to a Name (line 5654):

# Call to _arraymethod(...): (line 5654)
# Processing the call arguments (line 5654)
str_148334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5654, 27), 'str', 'squeeze')
# Processing the call keyword arguments (line 5654)
kwargs_148335 = {}
# Getting the type of '_arraymethod' (line 5654)
_arraymethod_148333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5654, 14), '_arraymethod', False)
# Calling _arraymethod(args, kwargs) (line 5654)
_arraymethod_call_result_148336 = invoke(stypy.reporting.localization.Localization(__file__, 5654, 14), _arraymethod_148333, *[str_148334], **kwargs_148335)

# Getting the type of 'MaskedArray'
MaskedArray_148337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'squeeze' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148337, 'squeeze', _arraymethod_call_result_148336)

# Assigning a Name to a Name (line 5822):
# Getting the type of 'MaskedArray'
MaskedArray_148338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Obtaining the member 'toflex' of a type
toflex_148339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148338, 'toflex')
# Getting the type of 'MaskedArray'
MaskedArray_148340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedArray')
# Setting the type of the member 'torecords' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedArray_148340, 'torecords', toflex_148339)

@norecursion
def _mareconstruct(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_mareconstruct'
    module_type_store = module_type_store.open_function_context('_mareconstruct', 5879, 0, False)
    
    # Passed parameters checking function
    _mareconstruct.stypy_localization = localization
    _mareconstruct.stypy_type_of_self = None
    _mareconstruct.stypy_type_store = module_type_store
    _mareconstruct.stypy_function_name = '_mareconstruct'
    _mareconstruct.stypy_param_names_list = ['subtype', 'baseclass', 'baseshape', 'basetype']
    _mareconstruct.stypy_varargs_param_name = None
    _mareconstruct.stypy_kwargs_param_name = None
    _mareconstruct.stypy_call_defaults = defaults
    _mareconstruct.stypy_call_varargs = varargs
    _mareconstruct.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_mareconstruct', ['subtype', 'baseclass', 'baseshape', 'basetype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_mareconstruct', localization, ['subtype', 'baseclass', 'baseshape', 'basetype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_mareconstruct(...)' code ##################

    str_148341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5883, (-1)), 'str', 'Internal function that builds a new MaskedArray from the\n    information stored in a pickle.\n\n    ')
    
    # Assigning a Call to a Name (line 5884):
    
    # Assigning a Call to a Name (line 5884):
    
    # Call to __new__(...): (line 5884)
    # Processing the call arguments (line 5884)
    # Getting the type of 'baseclass' (line 5884)
    baseclass_148344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5884, 28), 'baseclass', False)
    # Getting the type of 'baseshape' (line 5884)
    baseshape_148345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5884, 39), 'baseshape', False)
    # Getting the type of 'basetype' (line 5884)
    basetype_148346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5884, 50), 'basetype', False)
    # Processing the call keyword arguments (line 5884)
    kwargs_148347 = {}
    # Getting the type of 'ndarray' (line 5884)
    ndarray_148342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5884, 12), 'ndarray', False)
    # Obtaining the member '__new__' of a type (line 5884)
    new___148343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5884, 12), ndarray_148342, '__new__')
    # Calling __new__(args, kwargs) (line 5884)
    new___call_result_148348 = invoke(stypy.reporting.localization.Localization(__file__, 5884, 12), new___148343, *[baseclass_148344, baseshape_148345, basetype_148346], **kwargs_148347)
    
    # Assigning a type to the variable '_data' (line 5884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5884, 4), '_data', new___call_result_148348)
    
    # Assigning a Call to a Name (line 5885):
    
    # Assigning a Call to a Name (line 5885):
    
    # Call to __new__(...): (line 5885)
    # Processing the call arguments (line 5885)
    # Getting the type of 'ndarray' (line 5885)
    ndarray_148351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5885, 28), 'ndarray', False)
    # Getting the type of 'baseshape' (line 5885)
    baseshape_148352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5885, 37), 'baseshape', False)
    
    # Call to make_mask_descr(...): (line 5885)
    # Processing the call arguments (line 5885)
    # Getting the type of 'basetype' (line 5885)
    basetype_148354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5885, 64), 'basetype', False)
    # Processing the call keyword arguments (line 5885)
    kwargs_148355 = {}
    # Getting the type of 'make_mask_descr' (line 5885)
    make_mask_descr_148353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5885, 48), 'make_mask_descr', False)
    # Calling make_mask_descr(args, kwargs) (line 5885)
    make_mask_descr_call_result_148356 = invoke(stypy.reporting.localization.Localization(__file__, 5885, 48), make_mask_descr_148353, *[basetype_148354], **kwargs_148355)
    
    # Processing the call keyword arguments (line 5885)
    kwargs_148357 = {}
    # Getting the type of 'ndarray' (line 5885)
    ndarray_148349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5885, 12), 'ndarray', False)
    # Obtaining the member '__new__' of a type (line 5885)
    new___148350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5885, 12), ndarray_148349, '__new__')
    # Calling __new__(args, kwargs) (line 5885)
    new___call_result_148358 = invoke(stypy.reporting.localization.Localization(__file__, 5885, 12), new___148350, *[ndarray_148351, baseshape_148352, make_mask_descr_call_result_148356], **kwargs_148357)
    
    # Assigning a type to the variable '_mask' (line 5885)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5885, 4), '_mask', new___call_result_148358)
    
    # Call to __new__(...): (line 5886)
    # Processing the call arguments (line 5886)
    # Getting the type of 'subtype' (line 5886)
    subtype_148361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5886, 27), 'subtype', False)
    # Getting the type of '_data' (line 5886)
    _data_148362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5886, 36), '_data', False)
    # Processing the call keyword arguments (line 5886)
    # Getting the type of '_mask' (line 5886)
    _mask_148363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5886, 48), '_mask', False)
    keyword_148364 = _mask_148363
    # Getting the type of 'basetype' (line 5886)
    basetype_148365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5886, 61), 'basetype', False)
    keyword_148366 = basetype_148365
    kwargs_148367 = {'dtype': keyword_148366, 'mask': keyword_148364}
    # Getting the type of 'subtype' (line 5886)
    subtype_148359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5886, 11), 'subtype', False)
    # Obtaining the member '__new__' of a type (line 5886)
    new___148360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5886, 11), subtype_148359, '__new__')
    # Calling __new__(args, kwargs) (line 5886)
    new___call_result_148368 = invoke(stypy.reporting.localization.Localization(__file__, 5886, 11), new___148360, *[subtype_148361, _data_148362], **kwargs_148367)
    
    # Assigning a type to the variable 'stypy_return_type' (line 5886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5886, 4), 'stypy_return_type', new___call_result_148368)
    
    # ################# End of '_mareconstruct(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_mareconstruct' in the type store
    # Getting the type of 'stypy_return_type' (line 5879)
    stypy_return_type_148369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5879, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_148369)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_mareconstruct'
    return stypy_return_type_148369

# Assigning a type to the variable '_mareconstruct' (line 5879)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5879, 0), '_mareconstruct', _mareconstruct)
# Declaration of the 'mvoid' class
# Getting the type of 'MaskedArray' (line 5889)
MaskedArray_148370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5889, 12), 'MaskedArray')

class mvoid(MaskedArray_148370, ):
    str_148371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5892, (-1)), 'str', "\n    Fake a 'void' object to use for masked array with structured dtypes.\n    ")

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'nomask' (line 5894)
        nomask_148372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5894, 33), 'nomask')
        # Getting the type of 'None' (line 5894)
        None_148373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5894, 47), 'None')
        # Getting the type of 'None' (line 5894)
        None_148374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5894, 64), 'None')
        # Getting the type of 'False' (line 5895)
        False_148375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5895, 25), 'False')
        # Getting the type of 'False' (line 5895)
        False_148376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5895, 37), 'False')
        # Getting the type of 'True' (line 5895)
        True_148377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5895, 50), 'True')
        defaults = [nomask_148372, None_148373, None_148374, False_148375, False_148376, True_148377]
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 5894, 4, False)
        # Assigning a type to the variable 'self' (line 5895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5895, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid.__new__.__dict__.__setitem__('stypy_localization', localization)
        mvoid.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid.__new__.__dict__.__setitem__('stypy_function_name', 'mvoid.__new__')
        mvoid.__new__.__dict__.__setitem__('stypy_param_names_list', ['data', 'mask', 'dtype', 'fill_value', 'hardmask', 'copy', 'subok'])
        mvoid.__new__.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid.__new__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid.__new__.__dict__.__setitem__('stypy_declared_arg_number', 8)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.__new__', ['data', 'mask', 'dtype', 'fill_value', 'hardmask', 'copy', 'subok'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, ['data', 'mask', 'dtype', 'fill_value', 'hardmask', 'copy', 'subok'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        
        # Assigning a Call to a Name (line 5896):
        
        # Assigning a Call to a Name (line 5896):
        
        # Call to array(...): (line 5896)
        # Processing the call arguments (line 5896)
        # Getting the type of 'data' (line 5896)
        data_148380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5896, 25), 'data', False)
        # Processing the call keyword arguments (line 5896)
        # Getting the type of 'copy' (line 5896)
        copy_148381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5896, 36), 'copy', False)
        keyword_148382 = copy_148381
        # Getting the type of 'subok' (line 5896)
        subok_148383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5896, 48), 'subok', False)
        keyword_148384 = subok_148383
        # Getting the type of 'dtype' (line 5896)
        dtype_148385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5896, 61), 'dtype', False)
        keyword_148386 = dtype_148385
        kwargs_148387 = {'subok': keyword_148384, 'copy': keyword_148382, 'dtype': keyword_148386}
        # Getting the type of 'np' (line 5896)
        np_148378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5896, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 5896)
        array_148379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5896, 16), np_148378, 'array')
        # Calling array(args, kwargs) (line 5896)
        array_call_result_148388 = invoke(stypy.reporting.localization.Localization(__file__, 5896, 16), array_148379, *[data_148380], **kwargs_148387)
        
        # Assigning a type to the variable '_data' (line 5896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5896, 8), '_data', array_call_result_148388)
        
        # Assigning a Call to a Name (line 5897):
        
        # Assigning a Call to a Name (line 5897):
        
        # Call to view(...): (line 5897)
        # Processing the call arguments (line 5897)
        # Getting the type of 'self' (line 5897)
        self_148391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5897, 27), 'self', False)
        # Processing the call keyword arguments (line 5897)
        kwargs_148392 = {}
        # Getting the type of '_data' (line 5897)
        _data_148389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5897, 16), '_data', False)
        # Obtaining the member 'view' of a type (line 5897)
        view_148390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5897, 16), _data_148389, 'view')
        # Calling view(args, kwargs) (line 5897)
        view_call_result_148393 = invoke(stypy.reporting.localization.Localization(__file__, 5897, 16), view_148390, *[self_148391], **kwargs_148392)
        
        # Assigning a type to the variable '_data' (line 5897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5897, 8), '_data', view_call_result_148393)
        
        # Assigning a Name to a Attribute (line 5898):
        
        # Assigning a Name to a Attribute (line 5898):
        # Getting the type of 'hardmask' (line 5898)
        hardmask_148394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5898, 26), 'hardmask')
        # Getting the type of '_data' (line 5898)
        _data_148395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5898, 8), '_data')
        # Setting the type of the member '_hardmask' of a type (line 5898)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5898, 8), _data_148395, '_hardmask', hardmask_148394)
        
        
        # Getting the type of 'mask' (line 5899)
        mask_148396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5899, 11), 'mask')
        # Getting the type of 'nomask' (line 5899)
        nomask_148397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5899, 23), 'nomask')
        # Applying the binary operator 'isnot' (line 5899)
        result_is_not_148398 = python_operator(stypy.reporting.localization.Localization(__file__, 5899, 11), 'isnot', mask_148396, nomask_148397)
        
        # Testing the type of an if condition (line 5899)
        if_condition_148399 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5899, 8), result_is_not_148398)
        # Assigning a type to the variable 'if_condition_148399' (line 5899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5899, 8), 'if_condition_148399', if_condition_148399)
        # SSA begins for if statement (line 5899)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to isinstance(...): (line 5900)
        # Processing the call arguments (line 5900)
        # Getting the type of 'mask' (line 5900)
        mask_148401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5900, 26), 'mask', False)
        # Getting the type of 'np' (line 5900)
        np_148402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5900, 32), 'np', False)
        # Obtaining the member 'void' of a type (line 5900)
        void_148403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5900, 32), np_148402, 'void')
        # Processing the call keyword arguments (line 5900)
        kwargs_148404 = {}
        # Getting the type of 'isinstance' (line 5900)
        isinstance_148400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5900, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 5900)
        isinstance_call_result_148405 = invoke(stypy.reporting.localization.Localization(__file__, 5900, 15), isinstance_148400, *[mask_148401, void_148403], **kwargs_148404)
        
        # Testing the type of an if condition (line 5900)
        if_condition_148406 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5900, 12), isinstance_call_result_148405)
        # Assigning a type to the variable 'if_condition_148406' (line 5900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5900, 12), 'if_condition_148406', if_condition_148406)
        # SSA begins for if statement (line 5900)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 5901):
        
        # Assigning a Name to a Attribute (line 5901):
        # Getting the type of 'mask' (line 5901)
        mask_148407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5901, 30), 'mask')
        # Getting the type of '_data' (line 5901)
        _data_148408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5901, 16), '_data')
        # Setting the type of the member '_mask' of a type (line 5901)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5901, 16), _data_148408, '_mask', mask_148407)
        # SSA branch for the else part of an if statement (line 5900)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 5903)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Attribute (line 5905):
        
        # Assigning a Call to a Attribute (line 5905):
        
        # Call to void(...): (line 5905)
        # Processing the call arguments (line 5905)
        # Getting the type of 'mask' (line 5905)
        mask_148411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5905, 42), 'mask', False)
        # Processing the call keyword arguments (line 5905)
        kwargs_148412 = {}
        # Getting the type of 'np' (line 5905)
        np_148409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5905, 34), 'np', False)
        # Obtaining the member 'void' of a type (line 5905)
        void_148410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5905, 34), np_148409, 'void')
        # Calling void(args, kwargs) (line 5905)
        void_call_result_148413 = invoke(stypy.reporting.localization.Localization(__file__, 5905, 34), void_148410, *[mask_148411], **kwargs_148412)
        
        # Getting the type of '_data' (line 5905)
        _data_148414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5905, 20), '_data')
        # Setting the type of the member '_mask' of a type (line 5905)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5905, 20), _data_148414, '_mask', void_call_result_148413)
        # SSA branch for the except part of a try statement (line 5903)
        # SSA branch for the except 'TypeError' branch of a try statement (line 5903)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 5908):
        
        # Assigning a Call to a Name (line 5908):
        
        # Call to make_mask_descr(...): (line 5908)
        # Processing the call arguments (line 5908)
        # Getting the type of 'dtype' (line 5908)
        dtype_148416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5908, 45), 'dtype', False)
        # Processing the call keyword arguments (line 5908)
        kwargs_148417 = {}
        # Getting the type of 'make_mask_descr' (line 5908)
        make_mask_descr_148415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5908, 29), 'make_mask_descr', False)
        # Calling make_mask_descr(args, kwargs) (line 5908)
        make_mask_descr_call_result_148418 = invoke(stypy.reporting.localization.Localization(__file__, 5908, 29), make_mask_descr_148415, *[dtype_148416], **kwargs_148417)
        
        # Assigning a type to the variable 'mdtype' (line 5908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5908, 20), 'mdtype', make_mask_descr_call_result_148418)
        
        # Assigning a Subscript to a Attribute (line 5909):
        
        # Assigning a Subscript to a Attribute (line 5909):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 5909)
        tuple_148419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5909, 63), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5909)
        
        
        # Call to array(...): (line 5909)
        # Processing the call arguments (line 5909)
        # Getting the type of 'mask' (line 5909)
        mask_148422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5909, 43), 'mask', False)
        # Processing the call keyword arguments (line 5909)
        # Getting the type of 'mdtype' (line 5909)
        mdtype_148423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5909, 55), 'mdtype', False)
        keyword_148424 = mdtype_148423
        kwargs_148425 = {'dtype': keyword_148424}
        # Getting the type of 'np' (line 5909)
        np_148420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5909, 34), 'np', False)
        # Obtaining the member 'array' of a type (line 5909)
        array_148421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5909, 34), np_148420, 'array')
        # Calling array(args, kwargs) (line 5909)
        array_call_result_148426 = invoke(stypy.reporting.localization.Localization(__file__, 5909, 34), array_148421, *[mask_148422], **kwargs_148425)
        
        # Obtaining the member '__getitem__' of a type (line 5909)
        getitem___148427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5909, 34), array_call_result_148426, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5909)
        subscript_call_result_148428 = invoke(stypy.reporting.localization.Localization(__file__, 5909, 34), getitem___148427, tuple_148419)
        
        # Getting the type of '_data' (line 5909)
        _data_148429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5909, 20), '_data')
        # Setting the type of the member '_mask' of a type (line 5909)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5909, 20), _data_148429, '_mask', subscript_call_result_148428)
        # SSA join for try-except statement (line 5903)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 5900)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 5899)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 5910)
        # Getting the type of 'fill_value' (line 5910)
        fill_value_148430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5910, 8), 'fill_value')
        # Getting the type of 'None' (line 5910)
        None_148431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5910, 29), 'None')
        
        (may_be_148432, more_types_in_union_148433) = may_not_be_none(fill_value_148430, None_148431)

        if may_be_148432:

            if more_types_in_union_148433:
                # Runtime conditional SSA (line 5910)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 5911):
            
            # Assigning a Name to a Attribute (line 5911):
            # Getting the type of 'fill_value' (line 5911)
            fill_value_148434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5911, 31), 'fill_value')
            # Getting the type of '_data' (line 5911)
            _data_148435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5911, 12), '_data')
            # Setting the type of the member 'fill_value' of a type (line 5911)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 5911, 12), _data_148435, 'fill_value', fill_value_148434)

            if more_types_in_union_148433:
                # SSA join for if statement (line 5910)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of '_data' (line 5912)
        _data_148436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5912, 15), '_data')
        # Assigning a type to the variable 'stypy_return_type' (line 5912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5912, 8), 'stypy_return_type', _data_148436)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 5894)
        stypy_return_type_148437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5894, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148437)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_148437


    @norecursion
    def _get_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_data'
        module_type_store = module_type_store.open_function_context('_get_data', 5914, 4, False)
        # Assigning a type to the variable 'self' (line 5915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5915, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid._get_data.__dict__.__setitem__('stypy_localization', localization)
        mvoid._get_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid._get_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid._get_data.__dict__.__setitem__('stypy_function_name', 'mvoid._get_data')
        mvoid._get_data.__dict__.__setitem__('stypy_param_names_list', [])
        mvoid._get_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid._get_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid._get_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid._get_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid._get_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid._get_data.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid._get_data', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_data', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_data(...)' code ##################

        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 5916)
        tuple_148438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5916, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5916)
        
        
        # Call to view(...): (line 5916)
        # Processing the call arguments (line 5916)
        # Getting the type of 'ndarray' (line 5916)
        ndarray_148441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5916, 25), 'ndarray', False)
        # Processing the call keyword arguments (line 5916)
        kwargs_148442 = {}
        # Getting the type of 'self' (line 5916)
        self_148439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5916, 15), 'self', False)
        # Obtaining the member 'view' of a type (line 5916)
        view_148440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5916, 15), self_148439, 'view')
        # Calling view(args, kwargs) (line 5916)
        view_call_result_148443 = invoke(stypy.reporting.localization.Localization(__file__, 5916, 15), view_148440, *[ndarray_148441], **kwargs_148442)
        
        # Obtaining the member '__getitem__' of a type (line 5916)
        getitem___148444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5916, 15), view_call_result_148443, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5916)
        subscript_call_result_148445 = invoke(stypy.reporting.localization.Localization(__file__, 5916, 15), getitem___148444, tuple_148438)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5916, 8), 'stypy_return_type', subscript_call_result_148445)
        
        # ################# End of '_get_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_data' in the type store
        # Getting the type of 'stypy_return_type' (line 5914)
        stypy_return_type_148446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5914, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_data'
        return stypy_return_type_148446

    
    # Assigning a Call to a Name (line 5918):

    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 5920, 4, False)
        # Assigning a type to the variable 'self' (line 5921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5921, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        mvoid.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid.__getitem__.__dict__.__setitem__('stypy_function_name', 'mvoid.__getitem__')
        mvoid.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['indx'])
        mvoid.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.__getitem__', ['indx'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['indx'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        str_148447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5924, (-1)), 'str', '\n        Get the index.\n\n        ')
        
        # Assigning a Attribute to a Name (line 5925):
        
        # Assigning a Attribute to a Name (line 5925):
        # Getting the type of 'self' (line 5925)
        self_148448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5925, 12), 'self')
        # Obtaining the member '_mask' of a type (line 5925)
        _mask_148449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5925, 12), self_148448, '_mask')
        # Assigning a type to the variable 'm' (line 5925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5925, 8), 'm', _mask_148449)
        
        
        # Call to isinstance(...): (line 5926)
        # Processing the call arguments (line 5926)
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 5926)
        indx_148451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5926, 24), 'indx', False)
        # Getting the type of 'm' (line 5926)
        m_148452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5926, 22), 'm', False)
        # Obtaining the member '__getitem__' of a type (line 5926)
        getitem___148453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5926, 22), m_148452, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5926)
        subscript_call_result_148454 = invoke(stypy.reporting.localization.Localization(__file__, 5926, 22), getitem___148453, indx_148451)
        
        # Getting the type of 'ndarray' (line 5926)
        ndarray_148455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5926, 31), 'ndarray', False)
        # Processing the call keyword arguments (line 5926)
        kwargs_148456 = {}
        # Getting the type of 'isinstance' (line 5926)
        isinstance_148450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5926, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 5926)
        isinstance_call_result_148457 = invoke(stypy.reporting.localization.Localization(__file__, 5926, 11), isinstance_148450, *[subscript_call_result_148454, ndarray_148455], **kwargs_148456)
        
        # Testing the type of an if condition (line 5926)
        if_condition_148458 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5926, 8), isinstance_call_result_148457)
        # Assigning a type to the variable 'if_condition_148458' (line 5926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5926, 8), 'if_condition_148458', if_condition_148458)
        # SSA begins for if statement (line 5926)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to masked_array(...): (line 5934)
        # Processing the call keyword arguments (line 5934)
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 5935)
        indx_148460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5935, 32), 'indx', False)
        # Getting the type of 'self' (line 5935)
        self_148461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5935, 21), 'self', False)
        # Obtaining the member '_data' of a type (line 5935)
        _data_148462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5935, 21), self_148461, '_data')
        # Obtaining the member '__getitem__' of a type (line 5935)
        getitem___148463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5935, 21), _data_148462, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5935)
        subscript_call_result_148464 = invoke(stypy.reporting.localization.Localization(__file__, 5935, 21), getitem___148463, indx_148460)
        
        keyword_148465 = subscript_call_result_148464
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 5935)
        indx_148466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5935, 46), 'indx', False)
        # Getting the type of 'm' (line 5935)
        m_148467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5935, 44), 'm', False)
        # Obtaining the member '__getitem__' of a type (line 5935)
        getitem___148468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5935, 44), m_148467, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5935)
        subscript_call_result_148469 = invoke(stypy.reporting.localization.Localization(__file__, 5935, 44), getitem___148468, indx_148466)
        
        keyword_148470 = subscript_call_result_148469
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 5936)
        indx_148471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5936, 44), 'indx', False)
        # Getting the type of 'self' (line 5936)
        self_148472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5936, 27), 'self', False)
        # Obtaining the member '_fill_value' of a type (line 5936)
        _fill_value_148473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5936, 27), self_148472, '_fill_value')
        # Obtaining the member '__getitem__' of a type (line 5936)
        getitem___148474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5936, 27), _fill_value_148473, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5936)
        subscript_call_result_148475 = invoke(stypy.reporting.localization.Localization(__file__, 5936, 27), getitem___148474, indx_148471)
        
        keyword_148476 = subscript_call_result_148475
        # Getting the type of 'self' (line 5937)
        self_148477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5937, 26), 'self', False)
        # Obtaining the member '_hardmask' of a type (line 5937)
        _hardmask_148478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5937, 26), self_148477, '_hardmask')
        keyword_148479 = _hardmask_148478
        kwargs_148480 = {'mask': keyword_148470, 'fill_value': keyword_148476, 'data': keyword_148465, 'hard_mask': keyword_148479}
        # Getting the type of 'masked_array' (line 5934)
        masked_array_148459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5934, 19), 'masked_array', False)
        # Calling masked_array(args, kwargs) (line 5934)
        masked_array_call_result_148481 = invoke(stypy.reporting.localization.Localization(__file__, 5934, 19), masked_array_148459, *[], **kwargs_148480)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5934, 12), 'stypy_return_type', masked_array_call_result_148481)
        # SSA join for if statement (line 5926)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'm' (line 5938)
        m_148482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5938, 11), 'm')
        # Getting the type of 'nomask' (line 5938)
        nomask_148483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5938, 20), 'nomask')
        # Applying the binary operator 'isnot' (line 5938)
        result_is_not_148484 = python_operator(stypy.reporting.localization.Localization(__file__, 5938, 11), 'isnot', m_148482, nomask_148483)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 5938)
        indx_148485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5938, 33), 'indx')
        # Getting the type of 'm' (line 5938)
        m_148486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5938, 31), 'm')
        # Obtaining the member '__getitem__' of a type (line 5938)
        getitem___148487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5938, 31), m_148486, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5938)
        subscript_call_result_148488 = invoke(stypy.reporting.localization.Localization(__file__, 5938, 31), getitem___148487, indx_148485)
        
        # Applying the binary operator 'and' (line 5938)
        result_and_keyword_148489 = python_operator(stypy.reporting.localization.Localization(__file__, 5938, 11), 'and', result_is_not_148484, subscript_call_result_148488)
        
        # Testing the type of an if condition (line 5938)
        if_condition_148490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5938, 8), result_and_keyword_148489)
        # Assigning a type to the variable 'if_condition_148490' (line 5938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5938, 8), 'if_condition_148490', if_condition_148490)
        # SSA begins for if statement (line 5938)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'masked' (line 5939)
        masked_148491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5939, 19), 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 5939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5939, 12), 'stypy_return_type', masked_148491)
        # SSA join for if statement (line 5938)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 5940)
        indx_148492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5940, 26), 'indx')
        # Getting the type of 'self' (line 5940)
        self_148493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5940, 15), 'self')
        # Obtaining the member '_data' of a type (line 5940)
        _data_148494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5940, 15), self_148493, '_data')
        # Obtaining the member '__getitem__' of a type (line 5940)
        getitem___148495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5940, 15), _data_148494, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5940)
        subscript_call_result_148496 = invoke(stypy.reporting.localization.Localization(__file__, 5940, 15), getitem___148495, indx_148492)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5940, 8), 'stypy_return_type', subscript_call_result_148496)
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 5920)
        stypy_return_type_148497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5920, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148497)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_148497


    @norecursion
    def __setitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setitem__'
        module_type_store = module_type_store.open_function_context('__setitem__', 5942, 4, False)
        # Assigning a type to the variable 'self' (line 5943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5943, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid.__setitem__.__dict__.__setitem__('stypy_localization', localization)
        mvoid.__setitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid.__setitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid.__setitem__.__dict__.__setitem__('stypy_function_name', 'mvoid.__setitem__')
        mvoid.__setitem__.__dict__.__setitem__('stypy_param_names_list', ['indx', 'value'])
        mvoid.__setitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid.__setitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid.__setitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid.__setitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid.__setitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid.__setitem__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.__setitem__', ['indx', 'value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setitem__', localization, ['indx', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setitem__(...)' code ##################

        
        # Assigning a Name to a Subscript (line 5943):
        
        # Assigning a Name to a Subscript (line 5943):
        # Getting the type of 'value' (line 5943)
        value_148498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5943, 27), 'value')
        # Getting the type of 'self' (line 5943)
        self_148499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5943, 8), 'self')
        # Obtaining the member '_data' of a type (line 5943)
        _data_148500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5943, 8), self_148499, '_data')
        # Getting the type of 'indx' (line 5943)
        indx_148501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5943, 19), 'indx')
        # Storing an element on a container (line 5943)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5943, 8), _data_148500, (indx_148501, value_148498))
        
        # Getting the type of 'self' (line 5944)
        self_148502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5944, 11), 'self')
        # Obtaining the member '_hardmask' of a type (line 5944)
        _hardmask_148503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5944, 11), self_148502, '_hardmask')
        # Testing the type of an if condition (line 5944)
        if_condition_148504 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5944, 8), _hardmask_148503)
        # Assigning a type to the variable 'if_condition_148504' (line 5944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5944, 8), 'if_condition_148504', if_condition_148504)
        # SSA begins for if statement (line 5944)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 5945)
        self_148505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5945, 12), 'self')
        # Obtaining the member '_mask' of a type (line 5945)
        _mask_148506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5945, 12), self_148505, '_mask')
        
        # Obtaining the type of the subscript
        # Getting the type of 'indx' (line 5945)
        indx_148507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5945, 23), 'indx')
        # Getting the type of 'self' (line 5945)
        self_148508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5945, 12), 'self')
        # Obtaining the member '_mask' of a type (line 5945)
        _mask_148509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5945, 12), self_148508, '_mask')
        # Obtaining the member '__getitem__' of a type (line 5945)
        getitem___148510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5945, 12), _mask_148509, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5945)
        subscript_call_result_148511 = invoke(stypy.reporting.localization.Localization(__file__, 5945, 12), getitem___148510, indx_148507)
        
        
        # Call to getattr(...): (line 5945)
        # Processing the call arguments (line 5945)
        # Getting the type of 'value' (line 5945)
        value_148513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5945, 40), 'value', False)
        str_148514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5945, 47), 'str', '_mask')
        # Getting the type of 'False' (line 5945)
        False_148515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5945, 56), 'False', False)
        # Processing the call keyword arguments (line 5945)
        kwargs_148516 = {}
        # Getting the type of 'getattr' (line 5945)
        getattr_148512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5945, 32), 'getattr', False)
        # Calling getattr(args, kwargs) (line 5945)
        getattr_call_result_148517 = invoke(stypy.reporting.localization.Localization(__file__, 5945, 32), getattr_148512, *[value_148513, str_148514, False_148515], **kwargs_148516)
        
        # Applying the binary operator '|=' (line 5945)
        result_ior_148518 = python_operator(stypy.reporting.localization.Localization(__file__, 5945, 12), '|=', subscript_call_result_148511, getattr_call_result_148517)
        # Getting the type of 'self' (line 5945)
        self_148519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5945, 12), 'self')
        # Obtaining the member '_mask' of a type (line 5945)
        _mask_148520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5945, 12), self_148519, '_mask')
        # Getting the type of 'indx' (line 5945)
        indx_148521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5945, 23), 'indx')
        # Storing an element on a container (line 5945)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5945, 12), _mask_148520, (indx_148521, result_ior_148518))
        
        # SSA branch for the else part of an if statement (line 5944)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Subscript (line 5947):
        
        # Assigning a Call to a Subscript (line 5947):
        
        # Call to getattr(...): (line 5947)
        # Processing the call arguments (line 5947)
        # Getting the type of 'value' (line 5947)
        value_148523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5947, 39), 'value', False)
        str_148524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5947, 46), 'str', '_mask')
        # Getting the type of 'False' (line 5947)
        False_148525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5947, 55), 'False', False)
        # Processing the call keyword arguments (line 5947)
        kwargs_148526 = {}
        # Getting the type of 'getattr' (line 5947)
        getattr_148522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5947, 31), 'getattr', False)
        # Calling getattr(args, kwargs) (line 5947)
        getattr_call_result_148527 = invoke(stypy.reporting.localization.Localization(__file__, 5947, 31), getattr_148522, *[value_148523, str_148524, False_148525], **kwargs_148526)
        
        # Getting the type of 'self' (line 5947)
        self_148528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5947, 12), 'self')
        # Obtaining the member '_mask' of a type (line 5947)
        _mask_148529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5947, 12), self_148528, '_mask')
        # Getting the type of 'indx' (line 5947)
        indx_148530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5947, 23), 'indx')
        # Storing an element on a container (line 5947)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5947, 12), _mask_148529, (indx_148530, getattr_call_result_148527))
        # SSA join for if statement (line 5944)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__setitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 5942)
        stypy_return_type_148531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5942, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148531)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setitem__'
        return stypy_return_type_148531


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 5949, 4, False)
        # Assigning a type to the variable 'self' (line 5950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5950, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        mvoid.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid.stypy__str__.__dict__.__setitem__('stypy_function_name', 'mvoid.__str__')
        mvoid.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        mvoid.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Assigning a Attribute to a Name (line 5950):
        
        # Assigning a Attribute to a Name (line 5950):
        # Getting the type of 'self' (line 5950)
        self_148532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5950, 12), 'self')
        # Obtaining the member '_mask' of a type (line 5950)
        _mask_148533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5950, 12), self_148532, '_mask')
        # Assigning a type to the variable 'm' (line 5950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5950, 8), 'm', _mask_148533)
        
        
        # Getting the type of 'm' (line 5951)
        m_148534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5951, 11), 'm')
        # Getting the type of 'nomask' (line 5951)
        nomask_148535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5951, 16), 'nomask')
        # Applying the binary operator 'is' (line 5951)
        result_is__148536 = python_operator(stypy.reporting.localization.Localization(__file__, 5951, 11), 'is', m_148534, nomask_148535)
        
        # Testing the type of an if condition (line 5951)
        if_condition_148537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5951, 8), result_is__148536)
        # Assigning a type to the variable 'if_condition_148537' (line 5951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5951, 8), 'if_condition_148537', if_condition_148537)
        # SSA begins for if statement (line 5951)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __str__(...): (line 5952)
        # Processing the call keyword arguments (line 5952)
        kwargs_148541 = {}
        # Getting the type of 'self' (line 5952)
        self_148538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5952, 19), 'self', False)
        # Obtaining the member '_data' of a type (line 5952)
        _data_148539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5952, 19), self_148538, '_data')
        # Obtaining the member '__str__' of a type (line 5952)
        str___148540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5952, 19), _data_148539, '__str__')
        # Calling __str__(args, kwargs) (line 5952)
        str___call_result_148542 = invoke(stypy.reporting.localization.Localization(__file__, 5952, 19), str___148540, *[], **kwargs_148541)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5952, 12), 'stypy_return_type', str___call_result_148542)
        # SSA join for if statement (line 5951)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 5953):
        
        # Assigning a Name to a Name (line 5953):
        # Getting the type of 'masked_print_option' (line 5953)
        masked_print_option_148543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5953, 19), 'masked_print_option')
        # Assigning a type to the variable 'printopt' (line 5953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5953, 8), 'printopt', masked_print_option_148543)
        
        # Assigning a Call to a Name (line 5954):
        
        # Assigning a Call to a Name (line 5954):
        
        # Call to _recursive_make_descr(...): (line 5954)
        # Processing the call arguments (line 5954)
        # Getting the type of 'self' (line 5954)
        self_148545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5954, 39), 'self', False)
        # Obtaining the member '_data' of a type (line 5954)
        _data_148546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5954, 39), self_148545, '_data')
        # Obtaining the member 'dtype' of a type (line 5954)
        dtype_148547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5954, 39), _data_148546, 'dtype')
        str_148548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5954, 57), 'str', 'O')
        # Processing the call keyword arguments (line 5954)
        kwargs_148549 = {}
        # Getting the type of '_recursive_make_descr' (line 5954)
        _recursive_make_descr_148544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5954, 17), '_recursive_make_descr', False)
        # Calling _recursive_make_descr(args, kwargs) (line 5954)
        _recursive_make_descr_call_result_148550 = invoke(stypy.reporting.localization.Localization(__file__, 5954, 17), _recursive_make_descr_148544, *[dtype_148547, str_148548], **kwargs_148549)
        
        # Assigning a type to the variable 'rdtype' (line 5954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5954, 8), 'rdtype', _recursive_make_descr_call_result_148550)
        
        # Assigning a Call to a Name (line 5955):
        
        # Assigning a Call to a Name (line 5955):
        
        # Call to astype(...): (line 5955)
        # Processing the call arguments (line 5955)
        # Getting the type of 'rdtype' (line 5955)
        rdtype_148559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5955, 44), 'rdtype', False)
        # Processing the call keyword arguments (line 5955)
        kwargs_148560 = {}
        
        # Call to array(...): (line 5955)
        # Processing the call arguments (line 5955)
        
        # Obtaining an instance of the builtin type 'list' (line 5955)
        list_148553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5955, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 5955)
        # Adding element type (line 5955)
        # Getting the type of 'self' (line 5955)
        self_148554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5955, 24), 'self', False)
        # Obtaining the member '_data' of a type (line 5955)
        _data_148555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5955, 24), self_148554, '_data')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5955, 23), list_148553, _data_148555)
        
        # Processing the call keyword arguments (line 5955)
        kwargs_148556 = {}
        # Getting the type of 'np' (line 5955)
        np_148551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5955, 14), 'np', False)
        # Obtaining the member 'array' of a type (line 5955)
        array_148552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5955, 14), np_148551, 'array')
        # Calling array(args, kwargs) (line 5955)
        array_call_result_148557 = invoke(stypy.reporting.localization.Localization(__file__, 5955, 14), array_148552, *[list_148553], **kwargs_148556)
        
        # Obtaining the member 'astype' of a type (line 5955)
        astype_148558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5955, 14), array_call_result_148557, 'astype')
        # Calling astype(args, kwargs) (line 5955)
        astype_call_result_148561 = invoke(stypy.reporting.localization.Localization(__file__, 5955, 14), astype_148558, *[rdtype_148559], **kwargs_148560)
        
        # Assigning a type to the variable 'res' (line 5955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5955, 8), 'res', astype_call_result_148561)
        
        # Call to _recursive_printoption(...): (line 5956)
        # Processing the call arguments (line 5956)
        # Getting the type of 'res' (line 5956)
        res_148563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5956, 31), 'res', False)
        # Getting the type of 'self' (line 5956)
        self_148564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5956, 36), 'self', False)
        # Obtaining the member '_mask' of a type (line 5956)
        _mask_148565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5956, 36), self_148564, '_mask')
        # Getting the type of 'printopt' (line 5956)
        printopt_148566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5956, 48), 'printopt', False)
        # Processing the call keyword arguments (line 5956)
        kwargs_148567 = {}
        # Getting the type of '_recursive_printoption' (line 5956)
        _recursive_printoption_148562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5956, 8), '_recursive_printoption', False)
        # Calling _recursive_printoption(args, kwargs) (line 5956)
        _recursive_printoption_call_result_148568 = invoke(stypy.reporting.localization.Localization(__file__, 5956, 8), _recursive_printoption_148562, *[res_148563, _mask_148565, printopt_148566], **kwargs_148567)
        
        
        # Call to str(...): (line 5957)
        # Processing the call arguments (line 5957)
        
        # Obtaining the type of the subscript
        int_148570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5957, 23), 'int')
        # Getting the type of 'res' (line 5957)
        res_148571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5957, 19), 'res', False)
        # Obtaining the member '__getitem__' of a type (line 5957)
        getitem___148572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5957, 19), res_148571, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5957)
        subscript_call_result_148573 = invoke(stypy.reporting.localization.Localization(__file__, 5957, 19), getitem___148572, int_148570)
        
        # Processing the call keyword arguments (line 5957)
        kwargs_148574 = {}
        # Getting the type of 'str' (line 5957)
        str_148569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5957, 15), 'str', False)
        # Calling str(args, kwargs) (line 5957)
        str_call_result_148575 = invoke(stypy.reporting.localization.Localization(__file__, 5957, 15), str_148569, *[subscript_call_result_148573], **kwargs_148574)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5957, 8), 'stypy_return_type', str_call_result_148575)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 5949)
        stypy_return_type_148576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5949, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148576)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_148576

    
    # Assigning a Name to a Name (line 5959):

    @norecursion
    def __iter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__iter__'
        module_type_store = module_type_store.open_function_context('__iter__', 5961, 4, False)
        # Assigning a type to the variable 'self' (line 5962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5962, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid.__iter__.__dict__.__setitem__('stypy_localization', localization)
        mvoid.__iter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid.__iter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid.__iter__.__dict__.__setitem__('stypy_function_name', 'mvoid.__iter__')
        mvoid.__iter__.__dict__.__setitem__('stypy_param_names_list', [])
        mvoid.__iter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid.__iter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid.__iter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid.__iter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid.__iter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid.__iter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.__iter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__iter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__iter__(...)' code ##################

        str_148577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5962, 8), 'str', 'Defines an iterator for mvoid')
        
        # Assigning a Tuple to a Tuple (line 5963):
        
        # Assigning a Attribute to a Name (line 5963):
        # Getting the type of 'self' (line 5963)
        self_148578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5963, 26), 'self')
        # Obtaining the member '_data' of a type (line 5963)
        _data_148579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5963, 26), self_148578, '_data')
        # Assigning a type to the variable 'tuple_assignment_139203' (line 5963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5963, 8), 'tuple_assignment_139203', _data_148579)
        
        # Assigning a Attribute to a Name (line 5963):
        # Getting the type of 'self' (line 5963)
        self_148580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5963, 38), 'self')
        # Obtaining the member '_mask' of a type (line 5963)
        _mask_148581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5963, 38), self_148580, '_mask')
        # Assigning a type to the variable 'tuple_assignment_139204' (line 5963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5963, 8), 'tuple_assignment_139204', _mask_148581)
        
        # Assigning a Name to a Name (line 5963):
        # Getting the type of 'tuple_assignment_139203' (line 5963)
        tuple_assignment_139203_148582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5963, 8), 'tuple_assignment_139203')
        # Assigning a type to the variable '_data' (line 5963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5963, 9), '_data', tuple_assignment_139203_148582)
        
        # Assigning a Name to a Name (line 5963):
        # Getting the type of 'tuple_assignment_139204' (line 5963)
        tuple_assignment_139204_148583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5963, 8), 'tuple_assignment_139204')
        # Assigning a type to the variable '_mask' (line 5963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5963, 16), '_mask', tuple_assignment_139204_148583)
        
        
        # Getting the type of '_mask' (line 5964)
        _mask_148584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5964, 11), '_mask')
        # Getting the type of 'nomask' (line 5964)
        nomask_148585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5964, 20), 'nomask')
        # Applying the binary operator 'is' (line 5964)
        result_is__148586 = python_operator(stypy.reporting.localization.Localization(__file__, 5964, 11), 'is', _mask_148584, nomask_148585)
        
        # Testing the type of an if condition (line 5964)
        if_condition_148587 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5964, 8), result_is__148586)
        # Assigning a type to the variable 'if_condition_148587' (line 5964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5964, 8), 'if_condition_148587', if_condition_148587)
        # SSA begins for if statement (line 5964)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of '_data' (line 5965)
        _data_148588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5965, 21), '_data')
        # Testing the type of a for loop iterable (line 5965)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5965, 12), _data_148588)
        # Getting the type of the for loop variable (line 5965)
        for_loop_var_148589 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5965, 12), _data_148588)
        # Assigning a type to the variable 'd' (line 5965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5965, 12), 'd', for_loop_var_148589)
        # SSA begins for a for statement (line 5965)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        # Getting the type of 'd' (line 5966)
        d_148590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5966, 22), 'd')
        GeneratorType_148591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5966, 16), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5966, 16), GeneratorType_148591, d_148590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5966, 16), 'stypy_return_type', GeneratorType_148591)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 5964)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to zip(...): (line 5968)
        # Processing the call arguments (line 5968)
        # Getting the type of '_data' (line 5968)
        _data_148593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5968, 30), '_data', False)
        # Getting the type of '_mask' (line 5968)
        _mask_148594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5968, 37), '_mask', False)
        # Processing the call keyword arguments (line 5968)
        kwargs_148595 = {}
        # Getting the type of 'zip' (line 5968)
        zip_148592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5968, 26), 'zip', False)
        # Calling zip(args, kwargs) (line 5968)
        zip_call_result_148596 = invoke(stypy.reporting.localization.Localization(__file__, 5968, 26), zip_148592, *[_data_148593, _mask_148594], **kwargs_148595)
        
        # Testing the type of a for loop iterable (line 5968)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 5968, 12), zip_call_result_148596)
        # Getting the type of the for loop variable (line 5968)
        for_loop_var_148597 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 5968, 12), zip_call_result_148596)
        # Assigning a type to the variable 'd' (line 5968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5968, 12), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5968, 12), for_loop_var_148597))
        # Assigning a type to the variable 'm' (line 5968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5968, 12), 'm', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5968, 12), for_loop_var_148597))
        # SSA begins for a for statement (line 5968)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'm' (line 5969)
        m_148598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5969, 19), 'm')
        # Testing the type of an if condition (line 5969)
        if_condition_148599 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 5969, 16), m_148598)
        # Assigning a type to the variable 'if_condition_148599' (line 5969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5969, 16), 'if_condition_148599', if_condition_148599)
        # SSA begins for if statement (line 5969)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Creating a generator
        # Getting the type of 'masked' (line 5970)
        masked_148600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5970, 26), 'masked')
        GeneratorType_148601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5970, 20), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5970, 20), GeneratorType_148601, masked_148600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5970, 20), 'stypy_return_type', GeneratorType_148601)
        # SSA branch for the else part of an if statement (line 5969)
        module_type_store.open_ssa_branch('else')
        # Creating a generator
        # Getting the type of 'd' (line 5972)
        d_148602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5972, 26), 'd')
        GeneratorType_148603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5972, 20), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 5972, 20), GeneratorType_148603, d_148602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5972, 20), 'stypy_return_type', GeneratorType_148603)
        # SSA join for if statement (line 5969)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 5964)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__iter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__iter__' in the type store
        # Getting the type of 'stypy_return_type' (line 5961)
        stypy_return_type_148604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5961, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148604)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__iter__'
        return stypy_return_type_148604


    @norecursion
    def __len__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__len__'
        module_type_store = module_type_store.open_function_context('__len__', 5974, 4, False)
        # Assigning a type to the variable 'self' (line 5975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5975, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid.__len__.__dict__.__setitem__('stypy_localization', localization)
        mvoid.__len__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid.__len__.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid.__len__.__dict__.__setitem__('stypy_function_name', 'mvoid.__len__')
        mvoid.__len__.__dict__.__setitem__('stypy_param_names_list', [])
        mvoid.__len__.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid.__len__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid.__len__.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid.__len__.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid.__len__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid.__len__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.__len__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__len__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__len__(...)' code ##################

        
        # Call to __len__(...): (line 5975)
        # Processing the call keyword arguments (line 5975)
        kwargs_148608 = {}
        # Getting the type of 'self' (line 5975)
        self_148605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5975, 15), 'self', False)
        # Obtaining the member '_data' of a type (line 5975)
        _data_148606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5975, 15), self_148605, '_data')
        # Obtaining the member '__len__' of a type (line 5975)
        len___148607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5975, 15), _data_148606, '__len__')
        # Calling __len__(args, kwargs) (line 5975)
        len___call_result_148609 = invoke(stypy.reporting.localization.Localization(__file__, 5975, 15), len___148607, *[], **kwargs_148608)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5975, 8), 'stypy_return_type', len___call_result_148609)
        
        # ################# End of '__len__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__len__' in the type store
        # Getting the type of 'stypy_return_type' (line 5974)
        stypy_return_type_148610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5974, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148610)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__len__'
        return stypy_return_type_148610


    @norecursion
    def filled(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 5977)
        None_148611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5977, 32), 'None')
        defaults = [None_148611]
        # Create a new context for function 'filled'
        module_type_store = module_type_store.open_function_context('filled', 5977, 4, False)
        # Assigning a type to the variable 'self' (line 5978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5978, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid.filled.__dict__.__setitem__('stypy_localization', localization)
        mvoid.filled.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid.filled.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid.filled.__dict__.__setitem__('stypy_function_name', 'mvoid.filled')
        mvoid.filled.__dict__.__setitem__('stypy_param_names_list', ['fill_value'])
        mvoid.filled.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid.filled.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid.filled.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid.filled.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid.filled.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid.filled.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.filled', ['fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'filled', localization, ['fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'filled(...)' code ##################

        str_148612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5996, (-1)), 'str', '\n        Return a copy with masked fields filled with a given value.\n\n        Parameters\n        ----------\n        fill_value : scalar, optional\n            The value to use for invalid entries (None by default).\n            If None, the `fill_value` attribute is used instead.\n\n        Returns\n        -------\n        filled_void\n            A `np.void` object\n\n        See Also\n        --------\n        MaskedArray.filled\n\n        ')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 5997)
        tuple_148613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5997, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 5997)
        
        
        # Call to filled(...): (line 5997)
        # Processing the call arguments (line 5997)
        # Getting the type of 'fill_value' (line 5997)
        fill_value_148619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5997, 36), 'fill_value', False)
        # Processing the call keyword arguments (line 5997)
        kwargs_148620 = {}
        
        # Call to asarray(...): (line 5997)
        # Processing the call arguments (line 5997)
        # Getting the type of 'self' (line 5997)
        self_148615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5997, 23), 'self', False)
        # Processing the call keyword arguments (line 5997)
        kwargs_148616 = {}
        # Getting the type of 'asarray' (line 5997)
        asarray_148614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5997, 15), 'asarray', False)
        # Calling asarray(args, kwargs) (line 5997)
        asarray_call_result_148617 = invoke(stypy.reporting.localization.Localization(__file__, 5997, 15), asarray_148614, *[self_148615], **kwargs_148616)
        
        # Obtaining the member 'filled' of a type (line 5997)
        filled_148618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5997, 15), asarray_call_result_148617, 'filled')
        # Calling filled(args, kwargs) (line 5997)
        filled_call_result_148621 = invoke(stypy.reporting.localization.Localization(__file__, 5997, 15), filled_148618, *[fill_value_148619], **kwargs_148620)
        
        # Obtaining the member '__getitem__' of a type (line 5997)
        getitem___148622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 5997, 15), filled_call_result_148621, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 5997)
        subscript_call_result_148623 = invoke(stypy.reporting.localization.Localization(__file__, 5997, 15), getitem___148622, tuple_148613)
        
        # Assigning a type to the variable 'stypy_return_type' (line 5997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5997, 8), 'stypy_return_type', subscript_call_result_148623)
        
        # ################# End of 'filled(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'filled' in the type store
        # Getting the type of 'stypy_return_type' (line 5977)
        stypy_return_type_148624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5977, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148624)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'filled'
        return stypy_return_type_148624


    @norecursion
    def tolist(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tolist'
        module_type_store = module_type_store.open_function_context('tolist', 5999, 4, False)
        # Assigning a type to the variable 'self' (line 6000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6000, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mvoid.tolist.__dict__.__setitem__('stypy_localization', localization)
        mvoid.tolist.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mvoid.tolist.__dict__.__setitem__('stypy_type_store', module_type_store)
        mvoid.tolist.__dict__.__setitem__('stypy_function_name', 'mvoid.tolist')
        mvoid.tolist.__dict__.__setitem__('stypy_param_names_list', [])
        mvoid.tolist.__dict__.__setitem__('stypy_varargs_param_name', None)
        mvoid.tolist.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mvoid.tolist.__dict__.__setitem__('stypy_call_defaults', defaults)
        mvoid.tolist.__dict__.__setitem__('stypy_call_varargs', varargs)
        mvoid.tolist.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mvoid.tolist.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.tolist', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tolist', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tolist(...)' code ##################

        str_148625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6009, (-1)), 'str', '\n    Transforms the mvoid object into a tuple.\n\n    Masked fields are replaced by None.\n\n    Returns\n    -------\n    returned_tuple\n        Tuple of fields\n        ')
        
        # Assigning a Attribute to a Name (line 6010):
        
        # Assigning a Attribute to a Name (line 6010):
        # Getting the type of 'self' (line 6010)
        self_148626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6010, 16), 'self')
        # Obtaining the member '_mask' of a type (line 6010)
        _mask_148627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6010, 16), self_148626, '_mask')
        # Assigning a type to the variable '_mask' (line 6010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6010, 8), '_mask', _mask_148627)
        
        
        # Getting the type of '_mask' (line 6011)
        _mask_148628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6011, 11), '_mask')
        # Getting the type of 'nomask' (line 6011)
        nomask_148629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6011, 20), 'nomask')
        # Applying the binary operator 'is' (line 6011)
        result_is__148630 = python_operator(stypy.reporting.localization.Localization(__file__, 6011, 11), 'is', _mask_148628, nomask_148629)
        
        # Testing the type of an if condition (line 6011)
        if_condition_148631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6011, 8), result_is__148630)
        # Assigning a type to the variable 'if_condition_148631' (line 6011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6011, 8), 'if_condition_148631', if_condition_148631)
        # SSA begins for if statement (line 6011)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to tolist(...): (line 6012)
        # Processing the call keyword arguments (line 6012)
        kwargs_148635 = {}
        # Getting the type of 'self' (line 6012)
        self_148632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6012, 19), 'self', False)
        # Obtaining the member '_data' of a type (line 6012)
        _data_148633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6012, 19), self_148632, '_data')
        # Obtaining the member 'tolist' of a type (line 6012)
        tolist_148634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6012, 19), _data_148633, 'tolist')
        # Calling tolist(args, kwargs) (line 6012)
        tolist_call_result_148636 = invoke(stypy.reporting.localization.Localization(__file__, 6012, 19), tolist_148634, *[], **kwargs_148635)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6012, 12), 'stypy_return_type', tolist_call_result_148636)
        # SSA join for if statement (line 6011)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 6013):
        
        # Assigning a List to a Name (line 6013):
        
        # Obtaining an instance of the builtin type 'list' (line 6013)
        list_148637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6013, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 6013)
        
        # Assigning a type to the variable 'result' (line 6013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6013, 8), 'result', list_148637)
        
        
        # Call to zip(...): (line 6014)
        # Processing the call arguments (line 6014)
        # Getting the type of 'self' (line 6014)
        self_148639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6014, 26), 'self', False)
        # Obtaining the member '_data' of a type (line 6014)
        _data_148640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6014, 26), self_148639, '_data')
        # Getting the type of 'self' (line 6014)
        self_148641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6014, 38), 'self', False)
        # Obtaining the member '_mask' of a type (line 6014)
        _mask_148642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6014, 38), self_148641, '_mask')
        # Processing the call keyword arguments (line 6014)
        kwargs_148643 = {}
        # Getting the type of 'zip' (line 6014)
        zip_148638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6014, 22), 'zip', False)
        # Calling zip(args, kwargs) (line 6014)
        zip_call_result_148644 = invoke(stypy.reporting.localization.Localization(__file__, 6014, 22), zip_148638, *[_data_148640, _mask_148642], **kwargs_148643)
        
        # Testing the type of a for loop iterable (line 6014)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 6014, 8), zip_call_result_148644)
        # Getting the type of the for loop variable (line 6014)
        for_loop_var_148645 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 6014, 8), zip_call_result_148644)
        # Assigning a type to the variable 'd' (line 6014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6014, 8), 'd', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6014, 8), for_loop_var_148645))
        # Assigning a type to the variable 'm' (line 6014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6014, 8), 'm', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6014, 8), for_loop_var_148645))
        # SSA begins for a for statement (line 6014)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'm' (line 6015)
        m_148646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6015, 15), 'm')
        # Testing the type of an if condition (line 6015)
        if_condition_148647 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6015, 12), m_148646)
        # Assigning a type to the variable 'if_condition_148647' (line 6015)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6015, 12), 'if_condition_148647', if_condition_148647)
        # SSA begins for if statement (line 6015)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 6016)
        # Processing the call arguments (line 6016)
        # Getting the type of 'None' (line 6016)
        None_148650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6016, 30), 'None', False)
        # Processing the call keyword arguments (line 6016)
        kwargs_148651 = {}
        # Getting the type of 'result' (line 6016)
        result_148648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6016, 16), 'result', False)
        # Obtaining the member 'append' of a type (line 6016)
        append_148649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6016, 16), result_148648, 'append')
        # Calling append(args, kwargs) (line 6016)
        append_call_result_148652 = invoke(stypy.reporting.localization.Localization(__file__, 6016, 16), append_148649, *[None_148650], **kwargs_148651)
        
        # SSA branch for the else part of an if statement (line 6015)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 6019)
        # Processing the call arguments (line 6019)
        
        # Call to item(...): (line 6019)
        # Processing the call keyword arguments (line 6019)
        kwargs_148657 = {}
        # Getting the type of 'd' (line 6019)
        d_148655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6019, 30), 'd', False)
        # Obtaining the member 'item' of a type (line 6019)
        item_148656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6019, 30), d_148655, 'item')
        # Calling item(args, kwargs) (line 6019)
        item_call_result_148658 = invoke(stypy.reporting.localization.Localization(__file__, 6019, 30), item_148656, *[], **kwargs_148657)
        
        # Processing the call keyword arguments (line 6019)
        kwargs_148659 = {}
        # Getting the type of 'result' (line 6019)
        result_148653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6019, 16), 'result', False)
        # Obtaining the member 'append' of a type (line 6019)
        append_148654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6019, 16), result_148653, 'append')
        # Calling append(args, kwargs) (line 6019)
        append_call_result_148660 = invoke(stypy.reporting.localization.Localization(__file__, 6019, 16), append_148654, *[item_call_result_148658], **kwargs_148659)
        
        # SSA join for if statement (line 6015)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to tuple(...): (line 6020)
        # Processing the call arguments (line 6020)
        # Getting the type of 'result' (line 6020)
        result_148662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6020, 21), 'result', False)
        # Processing the call keyword arguments (line 6020)
        kwargs_148663 = {}
        # Getting the type of 'tuple' (line 6020)
        tuple_148661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6020, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 6020)
        tuple_call_result_148664 = invoke(stypy.reporting.localization.Localization(__file__, 6020, 15), tuple_148661, *[result_148662], **kwargs_148663)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6020, 8), 'stypy_return_type', tuple_call_result_148664)
        
        # ################# End of 'tolist(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tolist' in the type store
        # Getting the type of 'stypy_return_type' (line 5999)
        stypy_return_type_148665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5999, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148665)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tolist'
        return stypy_return_type_148665


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 5889, 0, False)
        # Assigning a type to the variable 'self' (line 5890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5890, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mvoid.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'mvoid' (line 5889)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 5889, 0), 'mvoid', mvoid)

# Assigning a Call to a Name (line 5918):

# Call to property(...): (line 5918)
# Processing the call keyword arguments (line 5918)
# Getting the type of '_get_data' (line 5918)
_get_data_148667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5918, 26), '_get_data', False)
keyword_148668 = _get_data_148667
kwargs_148669 = {'fget': keyword_148668}
# Getting the type of 'property' (line 5918)
property_148666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 5918, 12), 'property', False)
# Calling property(args, kwargs) (line 5918)
property_call_result_148670 = invoke(stypy.reporting.localization.Localization(__file__, 5918, 12), property_148666, *[], **kwargs_148669)

# Getting the type of 'mvoid'
mvoid_148671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'mvoid')
# Setting the type of the member '_data' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), mvoid_148671, '_data', property_call_result_148670)

# Assigning a Name to a Name (line 5959):
# Getting the type of 'mvoid'
mvoid_148672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'mvoid')
# Obtaining the member '__str__' of a type
str___148673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), mvoid_148672, '__str__')
# Getting the type of 'mvoid'
mvoid_148674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'mvoid')
# Setting the type of the member '__repr__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), mvoid_148674, '__repr__', str___148673)

@norecursion
def isMaskedArray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'isMaskedArray'
    module_type_store = module_type_store.open_function_context('isMaskedArray', 6028, 0, False)
    
    # Passed parameters checking function
    isMaskedArray.stypy_localization = localization
    isMaskedArray.stypy_type_of_self = None
    isMaskedArray.stypy_type_store = module_type_store
    isMaskedArray.stypy_function_name = 'isMaskedArray'
    isMaskedArray.stypy_param_names_list = ['x']
    isMaskedArray.stypy_varargs_param_name = None
    isMaskedArray.stypy_kwargs_param_name = None
    isMaskedArray.stypy_call_defaults = defaults
    isMaskedArray.stypy_call_varargs = varargs
    isMaskedArray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'isMaskedArray', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'isMaskedArray', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'isMaskedArray(...)' code ##################

    str_148675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6076, (-1)), 'str', '\n    Test whether input is an instance of MaskedArray.\n\n    This function returns True if `x` is an instance of MaskedArray\n    and returns False otherwise.  Any object is accepted as input.\n\n    Parameters\n    ----------\n    x : object\n        Object to test.\n\n    Returns\n    -------\n    result : bool\n        True if `x` is a MaskedArray.\n\n    See Also\n    --------\n    isMA : Alias to isMaskedArray.\n    isarray : Alias to isMaskedArray.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.eye(3, 3)\n    >>> a\n    array([[ 1.,  0.,  0.],\n           [ 0.,  1.,  0.],\n           [ 0.,  0.,  1.]])\n    >>> m = ma.masked_values(a, 0)\n    >>> m\n    masked_array(data =\n     [[1.0 -- --]\n     [-- 1.0 --]\n     [-- -- 1.0]],\n          mask =\n     [[False  True  True]\n     [ True False  True]\n     [ True  True False]],\n          fill_value=0.0)\n    >>> ma.isMaskedArray(a)\n    False\n    >>> ma.isMaskedArray(m)\n    True\n    >>> ma.isMaskedArray([0, 1, 2])\n    False\n\n    ')
    
    # Call to isinstance(...): (line 6077)
    # Processing the call arguments (line 6077)
    # Getting the type of 'x' (line 6077)
    x_148677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6077, 22), 'x', False)
    # Getting the type of 'MaskedArray' (line 6077)
    MaskedArray_148678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6077, 25), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6077)
    kwargs_148679 = {}
    # Getting the type of 'isinstance' (line 6077)
    isinstance_148676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6077, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 6077)
    isinstance_call_result_148680 = invoke(stypy.reporting.localization.Localization(__file__, 6077, 11), isinstance_148676, *[x_148677, MaskedArray_148678], **kwargs_148679)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6077, 4), 'stypy_return_type', isinstance_call_result_148680)
    
    # ################# End of 'isMaskedArray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'isMaskedArray' in the type store
    # Getting the type of 'stypy_return_type' (line 6028)
    stypy_return_type_148681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6028, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_148681)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'isMaskedArray'
    return stypy_return_type_148681

# Assigning a type to the variable 'isMaskedArray' (line 6028)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6028, 0), 'isMaskedArray', isMaskedArray)

# Assigning a Name to a Name (line 6080):

# Assigning a Name to a Name (line 6080):
# Getting the type of 'isMaskedArray' (line 6080)
isMaskedArray_148682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6080, 10), 'isMaskedArray')
# Assigning a type to the variable 'isarray' (line 6080)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6080, 0), 'isarray', isMaskedArray_148682)

# Assigning a Name to a Name (line 6081):

# Assigning a Name to a Name (line 6081):
# Getting the type of 'isMaskedArray' (line 6081)
isMaskedArray_148683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6081, 7), 'isMaskedArray')
# Assigning a type to the variable 'isMA' (line 6081)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6081, 0), 'isMA', isMaskedArray_148683)
# Declaration of the 'MaskedConstant' class
# Getting the type of 'MaskedArray' (line 6084)
MaskedArray_148684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6084, 21), 'MaskedArray')

class MaskedConstant(MaskedArray_148684, ):
    
    # Multiple assignment of 2 elements.
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Name to a Name (line 6089):

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 6091, 4, False)
        # Assigning a type to the variable 'self' (line 6092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6092, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedConstant.__new__.__dict__.__setitem__('stypy_localization', localization)
        MaskedConstant.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedConstant.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedConstant.__new__.__dict__.__setitem__('stypy_function_name', 'MaskedConstant.__new__')
        MaskedConstant.__new__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedConstant.__new__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedConstant.__new__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedConstant.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedConstant.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedConstant.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedConstant.__new__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedConstant.__new__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        
        # Call to view(...): (line 6092)
        # Processing the call arguments (line 6092)
        # Getting the type of 'self' (line 6092)
        self_148688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6092, 31), 'self', False)
        # Processing the call keyword arguments (line 6092)
        kwargs_148689 = {}
        # Getting the type of 'self' (line 6092)
        self_148685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6092, 15), 'self', False)
        # Obtaining the member '_data' of a type (line 6092)
        _data_148686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6092, 15), self_148685, '_data')
        # Obtaining the member 'view' of a type (line 6092)
        view_148687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6092, 15), _data_148686, 'view')
        # Calling view(args, kwargs) (line 6092)
        view_call_result_148690 = invoke(stypy.reporting.localization.Localization(__file__, 6092, 15), view_148687, *[self_148688], **kwargs_148689)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6092, 8), 'stypy_return_type', view_call_result_148690)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 6091)
        stypy_return_type_148691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6091, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148691)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_148691


    @norecursion
    def __array_finalize__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__array_finalize__'
        module_type_store = module_type_store.open_function_context('__array_finalize__', 6094, 4, False)
        # Assigning a type to the variable 'self' (line 6095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6095, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_localization', localization)
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_function_name', 'MaskedConstant.__array_finalize__')
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_param_names_list', ['obj'])
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedConstant.__array_finalize__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedConstant.__array_finalize__', ['obj'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__array_finalize__', localization, ['obj'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__array_finalize__(...)' code ##################

        # Assigning a type to the variable 'stypy_return_type' (line 6095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6095, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of '__array_finalize__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__array_finalize__' in the type store
        # Getting the type of 'stypy_return_type' (line 6094)
        stypy_return_type_148692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6094, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148692)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__array_finalize__'
        return stypy_return_type_148692


    @norecursion
    def __array_wrap__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__array_wrap__'
        module_type_store = module_type_store.open_function_context('__array_wrap__', 6097, 4, False)
        # Assigning a type to the variable 'self' (line 6098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6098, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_localization', localization)
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_function_name', 'MaskedConstant.__array_wrap__')
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_param_names_list', ['obj'])
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedConstant.__array_wrap__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedConstant.__array_wrap__', ['obj'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__array_wrap__', localization, ['obj'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__array_wrap__(...)' code ##################

        # Getting the type of 'self' (line 6098)
        self_148693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6098, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 6098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6098, 8), 'stypy_return_type', self_148693)
        
        # ################# End of '__array_wrap__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__array_wrap__' in the type store
        # Getting the type of 'stypy_return_type' (line 6097)
        stypy_return_type_148694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6097, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148694)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__array_wrap__'
        return stypy_return_type_148694


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 6100, 4, False)
        # Assigning a type to the variable 'self' (line 6101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6101, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_function_name', 'MaskedConstant.__str__')
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedConstant.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedConstant.__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        
        # Call to str(...): (line 6101)
        # Processing the call arguments (line 6101)
        # Getting the type of 'masked_print_option' (line 6101)
        masked_print_option_148696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6101, 19), 'masked_print_option', False)
        # Obtaining the member '_display' of a type (line 6101)
        _display_148697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6101, 19), masked_print_option_148696, '_display')
        # Processing the call keyword arguments (line 6101)
        kwargs_148698 = {}
        # Getting the type of 'str' (line 6101)
        str_148695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6101, 15), 'str', False)
        # Calling str(args, kwargs) (line 6101)
        str_call_result_148699 = invoke(stypy.reporting.localization.Localization(__file__, 6101, 15), str_148695, *[_display_148697], **kwargs_148698)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6101, 8), 'stypy_return_type', str_call_result_148699)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 6100)
        stypy_return_type_148700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6100, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148700)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_148700


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 6103, 4, False)
        # Assigning a type to the variable 'self' (line 6104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6104, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'MaskedConstant.__repr__')
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedConstant.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedConstant.__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_148701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6104, 15), 'str', 'masked')
        # Assigning a type to the variable 'stypy_return_type' (line 6104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6104, 8), 'stypy_return_type', str_148701)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 6103)
        stypy_return_type_148702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6103, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148702)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_148702


    @norecursion
    def flatten(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flatten'
        module_type_store = module_type_store.open_function_context('flatten', 6106, 4, False)
        # Assigning a type to the variable 'self' (line 6107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6107, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedConstant.flatten.__dict__.__setitem__('stypy_localization', localization)
        MaskedConstant.flatten.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedConstant.flatten.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedConstant.flatten.__dict__.__setitem__('stypy_function_name', 'MaskedConstant.flatten')
        MaskedConstant.flatten.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedConstant.flatten.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedConstant.flatten.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedConstant.flatten.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedConstant.flatten.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedConstant.flatten.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedConstant.flatten.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedConstant.flatten', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flatten', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flatten(...)' code ##################

        
        # Call to masked_array(...): (line 6107)
        # Processing the call arguments (line 6107)
        
        # Obtaining an instance of the builtin type 'list' (line 6107)
        list_148704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6107, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 6107)
        # Adding element type (line 6107)
        # Getting the type of 'self' (line 6107)
        self_148705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6107, 29), 'self', False)
        # Obtaining the member '_data' of a type (line 6107)
        _data_148706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6107, 29), self_148705, '_data')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6107, 28), list_148704, _data_148706)
        
        # Processing the call keyword arguments (line 6107)
        # Getting the type of 'float' (line 6107)
        float_148707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6107, 48), 'float', False)
        keyword_148708 = float_148707
        
        # Obtaining an instance of the builtin type 'list' (line 6107)
        list_148709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6107, 60), 'list')
        # Adding type elements to the builtin type 'list' instance (line 6107)
        # Adding element type (line 6107)
        # Getting the type of 'True' (line 6107)
        True_148710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6107, 61), 'True', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6107, 60), list_148709, True_148710)
        
        keyword_148711 = list_148709
        kwargs_148712 = {'dtype': keyword_148708, 'mask': keyword_148711}
        # Getting the type of 'masked_array' (line 6107)
        masked_array_148703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6107, 15), 'masked_array', False)
        # Calling masked_array(args, kwargs) (line 6107)
        masked_array_call_result_148713 = invoke(stypy.reporting.localization.Localization(__file__, 6107, 15), masked_array_148703, *[list_148704], **kwargs_148712)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6107, 8), 'stypy_return_type', masked_array_call_result_148713)
        
        # ################# End of 'flatten(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flatten' in the type store
        # Getting the type of 'stypy_return_type' (line 6106)
        stypy_return_type_148714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6106, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flatten'
        return stypy_return_type_148714


    @norecursion
    def __reduce__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__reduce__'
        module_type_store = module_type_store.open_function_context('__reduce__', 6109, 4, False)
        # Assigning a type to the variable 'self' (line 6110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6110, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_localization', localization)
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_function_name', 'MaskedConstant.__reduce__')
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_param_names_list', [])
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MaskedConstant.__reduce__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedConstant.__reduce__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__reduce__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__reduce__(...)' code ##################

        str_148715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6111, (-1)), 'str', "Override of MaskedArray's __reduce__.\n        ")
        
        # Obtaining an instance of the builtin type 'tuple' (line 6112)
        tuple_148716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6112, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 6112)
        # Adding element type (line 6112)
        # Getting the type of 'self' (line 6112)
        self_148717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6112, 16), 'self')
        # Obtaining the member '__class__' of a type (line 6112)
        class___148718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6112, 16), self_148717, '__class__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6112, 16), tuple_148716, class___148718)
        # Adding element type (line 6112)
        
        # Obtaining an instance of the builtin type 'tuple' (line 6112)
        tuple_148719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6112, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 6112)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6112, 16), tuple_148716, tuple_148719)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6112, 8), 'stypy_return_type', tuple_148716)
        
        # ################# End of '__reduce__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__reduce__' in the type store
        # Getting the type of 'stypy_return_type' (line 6109)
        stypy_return_type_148720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6109, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148720)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__reduce__'
        return stypy_return_type_148720


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 6084, 0, False)
        # Assigning a type to the variable 'self' (line 6085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6085, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MaskedConstant.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'MaskedConstant' (line 6084)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6084, 0), 'MaskedConstant', MaskedConstant)

# Assigning a Call to a Name (line 6087):

# Call to array(...): (line 6087)
# Processing the call arguments (line 6087)
float_148723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6087, 28), 'float')
# Processing the call keyword arguments (line 6087)
kwargs_148724 = {}
# Getting the type of 'np' (line 6087)
np_148721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6087, 19), 'np', False)
# Obtaining the member 'array' of a type (line 6087)
array_148722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6087, 19), np_148721, 'array')
# Calling array(args, kwargs) (line 6087)
array_call_result_148725 = invoke(stypy.reporting.localization.Localization(__file__, 6087, 19), array_148722, *[float_148723], **kwargs_148724)

# Getting the type of 'MaskedConstant'
MaskedConstant_148726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedConstant')
# Setting the type of the member 'data' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedConstant_148726, 'data', array_call_result_148725)

# Assigning a Name to a Name (line 6087):
# Getting the type of 'MaskedConstant'
MaskedConstant_148727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedConstant')
# Obtaining the member 'data' of a type
data_148728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedConstant_148727, 'data')
# Getting the type of 'MaskedConstant'
MaskedConstant_148729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedConstant')
# Setting the type of the member '_data' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedConstant_148729, '_data', data_148728)

# Assigning a Call to a Name (line 6088):

# Call to array(...): (line 6088)
# Processing the call arguments (line 6088)
# Getting the type of 'True' (line 6088)
True_148732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6088, 28), 'True', False)
# Processing the call keyword arguments (line 6088)
kwargs_148733 = {}
# Getting the type of 'np' (line 6088)
np_148730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6088, 19), 'np', False)
# Obtaining the member 'array' of a type (line 6088)
array_148731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6088, 19), np_148730, 'array')
# Calling array(args, kwargs) (line 6088)
array_call_result_148734 = invoke(stypy.reporting.localization.Localization(__file__, 6088, 19), array_148731, *[True_148732], **kwargs_148733)

# Getting the type of 'MaskedConstant'
MaskedConstant_148735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedConstant')
# Setting the type of the member 'mask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedConstant_148735, 'mask', array_call_result_148734)

# Assigning a Name to a Name (line 6088):
# Getting the type of 'MaskedConstant'
MaskedConstant_148736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedConstant')
# Obtaining the member 'mask' of a type
mask_148737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedConstant_148736, 'mask')
# Getting the type of 'MaskedConstant'
MaskedConstant_148738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedConstant')
# Setting the type of the member '_mask' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedConstant_148738, '_mask', mask_148737)

# Assigning a Name to a Name (line 6089):
# Getting the type of 'ndarray' (line 6089)
ndarray_148739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6089, 17), 'ndarray')
# Getting the type of 'MaskedConstant'
MaskedConstant_148740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'MaskedConstant')
# Setting the type of the member '_baseclass' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), MaskedConstant_148740, '_baseclass', ndarray_148739)

# Multiple assignment of 2 elements.

# Assigning a Call to a Name (line 6115):

# Call to MaskedConstant(...): (line 6115)
# Processing the call keyword arguments (line 6115)
kwargs_148742 = {}
# Getting the type of 'MaskedConstant' (line 6115)
MaskedConstant_148741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6115, 28), 'MaskedConstant', False)
# Calling MaskedConstant(args, kwargs) (line 6115)
MaskedConstant_call_result_148743 = invoke(stypy.reporting.localization.Localization(__file__, 6115, 28), MaskedConstant_148741, *[], **kwargs_148742)

# Assigning a type to the variable 'masked_singleton' (line 6115)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6115, 9), 'masked_singleton', MaskedConstant_call_result_148743)

# Assigning a Name to a Name (line 6115):
# Getting the type of 'masked_singleton' (line 6115)
masked_singleton_148744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6115, 9), 'masked_singleton')
# Assigning a type to the variable 'masked' (line 6115)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6115, 0), 'masked', masked_singleton_148744)

# Assigning a Name to a Name (line 6116):

# Assigning a Name to a Name (line 6116):
# Getting the type of 'MaskedArray' (line 6116)
MaskedArray_148745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6116, 15), 'MaskedArray')
# Assigning a type to the variable 'masked_array' (line 6116)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6116, 0), 'masked_array', MaskedArray_148745)

@norecursion
def array(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6119)
    None_148746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6119, 22), 'None')
    # Getting the type of 'False' (line 6119)
    False_148747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6119, 33), 'False')
    # Getting the type of 'None' (line 6119)
    None_148748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6119, 46), 'None')
    # Getting the type of 'nomask' (line 6120)
    nomask_148749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6120, 15), 'nomask')
    # Getting the type of 'None' (line 6120)
    None_148750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6120, 34), 'None')
    # Getting the type of 'True' (line 6120)
    True_148751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6120, 50), 'True')
    # Getting the type of 'False' (line 6121)
    False_148752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6121, 20), 'False')
    # Getting the type of 'True' (line 6121)
    True_148753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6121, 34), 'True')
    # Getting the type of 'True' (line 6121)
    True_148754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6121, 46), 'True')
    int_148755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6121, 58), 'int')
    defaults = [None_148746, False_148747, None_148748, nomask_148749, None_148750, True_148751, False_148752, True_148753, True_148754, int_148755]
    # Create a new context for function 'array'
    module_type_store = module_type_store.open_function_context('array', 6119, 0, False)
    
    # Passed parameters checking function
    array.stypy_localization = localization
    array.stypy_type_of_self = None
    array.stypy_type_store = module_type_store
    array.stypy_function_name = 'array'
    array.stypy_param_names_list = ['data', 'dtype', 'copy', 'order', 'mask', 'fill_value', 'keep_mask', 'hard_mask', 'shrink', 'subok', 'ndmin']
    array.stypy_varargs_param_name = None
    array.stypy_kwargs_param_name = None
    array.stypy_call_defaults = defaults
    array.stypy_call_varargs = varargs
    array.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'array', ['data', 'dtype', 'copy', 'order', 'mask', 'fill_value', 'keep_mask', 'hard_mask', 'shrink', 'subok', 'ndmin'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'array', localization, ['data', 'dtype', 'copy', 'order', 'mask', 'fill_value', 'keep_mask', 'hard_mask', 'shrink', 'subok', 'ndmin'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'array(...)' code ##################

    str_148756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6128, (-1)), 'str', '\n    Shortcut to MaskedArray.\n\n    The options are in a different order for convenience and backwards\n    compatibility.\n\n    ')
    
    # Call to MaskedArray(...): (line 6129)
    # Processing the call arguments (line 6129)
    # Getting the type of 'data' (line 6129)
    data_148758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6129, 23), 'data', False)
    # Processing the call keyword arguments (line 6129)
    # Getting the type of 'mask' (line 6129)
    mask_148759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6129, 34), 'mask', False)
    keyword_148760 = mask_148759
    # Getting the type of 'dtype' (line 6129)
    dtype_148761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6129, 46), 'dtype', False)
    keyword_148762 = dtype_148761
    # Getting the type of 'copy' (line 6129)
    copy_148763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6129, 58), 'copy', False)
    keyword_148764 = copy_148763
    # Getting the type of 'subok' (line 6130)
    subok_148765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6130, 29), 'subok', False)
    keyword_148766 = subok_148765
    # Getting the type of 'keep_mask' (line 6130)
    keep_mask_148767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6130, 46), 'keep_mask', False)
    keyword_148768 = keep_mask_148767
    # Getting the type of 'hard_mask' (line 6131)
    hard_mask_148769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6131, 33), 'hard_mask', False)
    keyword_148770 = hard_mask_148769
    # Getting the type of 'fill_value' (line 6131)
    fill_value_148771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6131, 55), 'fill_value', False)
    keyword_148772 = fill_value_148771
    # Getting the type of 'ndmin' (line 6132)
    ndmin_148773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6132, 29), 'ndmin', False)
    keyword_148774 = ndmin_148773
    # Getting the type of 'shrink' (line 6132)
    shrink_148775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6132, 43), 'shrink', False)
    keyword_148776 = shrink_148775
    # Getting the type of 'order' (line 6132)
    order_148777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6132, 57), 'order', False)
    keyword_148778 = order_148777
    kwargs_148779 = {'ndmin': keyword_148774, 'fill_value': keyword_148772, 'dtype': keyword_148762, 'hard_mask': keyword_148770, 'mask': keyword_148760, 'order': keyword_148778, 'subok': keyword_148766, 'copy': keyword_148764, 'shrink': keyword_148776, 'keep_mask': keyword_148768}
    # Getting the type of 'MaskedArray' (line 6129)
    MaskedArray_148757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6129, 11), 'MaskedArray', False)
    # Calling MaskedArray(args, kwargs) (line 6129)
    MaskedArray_call_result_148780 = invoke(stypy.reporting.localization.Localization(__file__, 6129, 11), MaskedArray_148757, *[data_148758], **kwargs_148779)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6129, 4), 'stypy_return_type', MaskedArray_call_result_148780)
    
    # ################# End of 'array(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'array' in the type store
    # Getting the type of 'stypy_return_type' (line 6119)
    stypy_return_type_148781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6119, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_148781)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'array'
    return stypy_return_type_148781

# Assigning a type to the variable 'array' (line 6119)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6119, 0), 'array', array)

# Assigning a Attribute to a Attribute (line 6133):

# Assigning a Attribute to a Attribute (line 6133):
# Getting the type of 'masked_array' (line 6133)
masked_array_148782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6133, 16), 'masked_array')
# Obtaining the member '__doc__' of a type (line 6133)
doc___148783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6133, 16), masked_array_148782, '__doc__')
# Getting the type of 'array' (line 6133)
array_148784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6133, 0), 'array')
# Setting the type of the member '__doc__' of a type (line 6133)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6133, 0), array_148784, '__doc__', doc___148783)

@norecursion
def is_masked(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_masked'
    module_type_store = module_type_store.open_function_context('is_masked', 6136, 0, False)
    
    # Passed parameters checking function
    is_masked.stypy_localization = localization
    is_masked.stypy_type_of_self = None
    is_masked.stypy_type_store = module_type_store
    is_masked.stypy_function_name = 'is_masked'
    is_masked.stypy_param_names_list = ['x']
    is_masked.stypy_varargs_param_name = None
    is_masked.stypy_kwargs_param_name = None
    is_masked.stypy_call_defaults = defaults
    is_masked.stypy_call_varargs = varargs
    is_masked.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_masked', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_masked', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_masked(...)' code ##################

    str_148785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6180, (-1)), 'str', "\n    Determine whether input has masked values.\n\n    Accepts any object as input, but always returns False unless the\n    input is a MaskedArray containing masked values.\n\n    Parameters\n    ----------\n    x : array_like\n        Array to check for masked values.\n\n    Returns\n    -------\n    result : bool\n        True if `x` is a MaskedArray with masked values, False otherwise.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = ma.masked_equal([0, 1, 0, 2, 3], 0)\n    >>> x\n    masked_array(data = [-- 1 -- 2 3],\n          mask = [ True False  True False False],\n          fill_value=999999)\n    >>> ma.is_masked(x)\n    True\n    >>> x = ma.masked_equal([0, 1, 0, 2, 3], 42)\n    >>> x\n    masked_array(data = [0 1 0 2 3],\n          mask = False,\n          fill_value=999999)\n    >>> ma.is_masked(x)\n    False\n\n    Always returns False if `x` isn't a MaskedArray.\n\n    >>> x = [False, True, False]\n    >>> ma.is_masked(x)\n    False\n    >>> x = 'a string'\n    >>> ma.is_masked(x)\n    False\n\n    ")
    
    # Assigning a Call to a Name (line 6181):
    
    # Assigning a Call to a Name (line 6181):
    
    # Call to getmask(...): (line 6181)
    # Processing the call arguments (line 6181)
    # Getting the type of 'x' (line 6181)
    x_148787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6181, 16), 'x', False)
    # Processing the call keyword arguments (line 6181)
    kwargs_148788 = {}
    # Getting the type of 'getmask' (line 6181)
    getmask_148786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6181, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6181)
    getmask_call_result_148789 = invoke(stypy.reporting.localization.Localization(__file__, 6181, 8), getmask_148786, *[x_148787], **kwargs_148788)
    
    # Assigning a type to the variable 'm' (line 6181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6181, 4), 'm', getmask_call_result_148789)
    
    
    # Getting the type of 'm' (line 6182)
    m_148790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6182, 7), 'm')
    # Getting the type of 'nomask' (line 6182)
    nomask_148791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6182, 12), 'nomask')
    # Applying the binary operator 'is' (line 6182)
    result_is__148792 = python_operator(stypy.reporting.localization.Localization(__file__, 6182, 7), 'is', m_148790, nomask_148791)
    
    # Testing the type of an if condition (line 6182)
    if_condition_148793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6182, 4), result_is__148792)
    # Assigning a type to the variable 'if_condition_148793' (line 6182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6182, 4), 'if_condition_148793', if_condition_148793)
    # SSA begins for if statement (line 6182)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 6183)
    False_148794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6183, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 6183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6183, 8), 'stypy_return_type', False_148794)
    # SSA branch for the else part of an if statement (line 6182)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to any(...): (line 6184)
    # Processing the call keyword arguments (line 6184)
    kwargs_148797 = {}
    # Getting the type of 'm' (line 6184)
    m_148795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6184, 9), 'm', False)
    # Obtaining the member 'any' of a type (line 6184)
    any_148796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6184, 9), m_148795, 'any')
    # Calling any(args, kwargs) (line 6184)
    any_call_result_148798 = invoke(stypy.reporting.localization.Localization(__file__, 6184, 9), any_148796, *[], **kwargs_148797)
    
    # Testing the type of an if condition (line 6184)
    if_condition_148799 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6184, 9), any_call_result_148798)
    # Assigning a type to the variable 'if_condition_148799' (line 6184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6184, 9), 'if_condition_148799', if_condition_148799)
    # SSA begins for if statement (line 6184)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 6185)
    True_148800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6185, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 6185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6185, 8), 'stypy_return_type', True_148800)
    # SSA join for if statement (line 6184)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 6182)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 6186)
    False_148801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6186, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 6186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6186, 4), 'stypy_return_type', False_148801)
    
    # ################# End of 'is_masked(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_masked' in the type store
    # Getting the type of 'stypy_return_type' (line 6136)
    stypy_return_type_148802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6136, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_148802)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_masked'
    return stypy_return_type_148802

# Assigning a type to the variable 'is_masked' (line 6136)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6136, 0), 'is_masked', is_masked)
# Declaration of the '_extrema_operation' class

class _extrema_operation(object, ):
    str_148803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6202, (-1)), 'str', '\n    Generic class for maximum/minimum functions.\n\n    .. note::\n      This is the base class for `_maximum_operation` and\n      `_minimum_operation`.\n\n    ')

    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 6204)
        None_148804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6204, 28), 'None')
        defaults = [None_148804]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 6204, 4, False)
        # Assigning a type to the variable 'self' (line 6205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6205, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _extrema_operation.__call__.__dict__.__setitem__('stypy_localization', localization)
        _extrema_operation.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _extrema_operation.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _extrema_operation.__call__.__dict__.__setitem__('stypy_function_name', '_extrema_operation.__call__')
        _extrema_operation.__call__.__dict__.__setitem__('stypy_param_names_list', ['a', 'b'])
        _extrema_operation.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _extrema_operation.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _extrema_operation.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _extrema_operation.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _extrema_operation.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _extrema_operation.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_extrema_operation.__call__', ['a', 'b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_148805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6205, 8), 'str', 'Executes the call behavior.')
        
        # Type idiom detected: calculating its left and rigth part (line 6206)
        # Getting the type of 'b' (line 6206)
        b_148806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6206, 11), 'b')
        # Getting the type of 'None' (line 6206)
        None_148807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6206, 16), 'None')
        
        (may_be_148808, more_types_in_union_148809) = may_be_none(b_148806, None_148807)

        if may_be_148808:

            if more_types_in_union_148809:
                # Runtime conditional SSA (line 6206)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to reduce(...): (line 6207)
            # Processing the call arguments (line 6207)
            # Getting the type of 'a' (line 6207)
            a_148812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6207, 31), 'a', False)
            # Processing the call keyword arguments (line 6207)
            kwargs_148813 = {}
            # Getting the type of 'self' (line 6207)
            self_148810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6207, 19), 'self', False)
            # Obtaining the member 'reduce' of a type (line 6207)
            reduce_148811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6207, 19), self_148810, 'reduce')
            # Calling reduce(args, kwargs) (line 6207)
            reduce_call_result_148814 = invoke(stypy.reporting.localization.Localization(__file__, 6207, 19), reduce_148811, *[a_148812], **kwargs_148813)
            
            # Assigning a type to the variable 'stypy_return_type' (line 6207)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6207, 12), 'stypy_return_type', reduce_call_result_148814)

            if more_types_in_union_148809:
                # SSA join for if statement (line 6206)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to where(...): (line 6208)
        # Processing the call arguments (line 6208)
        
        # Call to compare(...): (line 6208)
        # Processing the call arguments (line 6208)
        # Getting the type of 'a' (line 6208)
        a_148818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6208, 34), 'a', False)
        # Getting the type of 'b' (line 6208)
        b_148819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6208, 37), 'b', False)
        # Processing the call keyword arguments (line 6208)
        kwargs_148820 = {}
        # Getting the type of 'self' (line 6208)
        self_148816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6208, 21), 'self', False)
        # Obtaining the member 'compare' of a type (line 6208)
        compare_148817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6208, 21), self_148816, 'compare')
        # Calling compare(args, kwargs) (line 6208)
        compare_call_result_148821 = invoke(stypy.reporting.localization.Localization(__file__, 6208, 21), compare_148817, *[a_148818, b_148819], **kwargs_148820)
        
        # Getting the type of 'a' (line 6208)
        a_148822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6208, 41), 'a', False)
        # Getting the type of 'b' (line 6208)
        b_148823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6208, 44), 'b', False)
        # Processing the call keyword arguments (line 6208)
        kwargs_148824 = {}
        # Getting the type of 'where' (line 6208)
        where_148815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6208, 15), 'where', False)
        # Calling where(args, kwargs) (line 6208)
        where_call_result_148825 = invoke(stypy.reporting.localization.Localization(__file__, 6208, 15), where_148815, *[compare_call_result_148821, a_148822, b_148823], **kwargs_148824)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6208, 8), 'stypy_return_type', where_call_result_148825)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 6204)
        stypy_return_type_148826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6204, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148826)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_148826


    @norecursion
    def reduce(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 6210)
        None_148827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6210, 34), 'None')
        defaults = [None_148827]
        # Create a new context for function 'reduce'
        module_type_store = module_type_store.open_function_context('reduce', 6210, 4, False)
        # Assigning a type to the variable 'self' (line 6211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6211, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _extrema_operation.reduce.__dict__.__setitem__('stypy_localization', localization)
        _extrema_operation.reduce.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _extrema_operation.reduce.__dict__.__setitem__('stypy_type_store', module_type_store)
        _extrema_operation.reduce.__dict__.__setitem__('stypy_function_name', '_extrema_operation.reduce')
        _extrema_operation.reduce.__dict__.__setitem__('stypy_param_names_list', ['target', 'axis'])
        _extrema_operation.reduce.__dict__.__setitem__('stypy_varargs_param_name', None)
        _extrema_operation.reduce.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _extrema_operation.reduce.__dict__.__setitem__('stypy_call_defaults', defaults)
        _extrema_operation.reduce.__dict__.__setitem__('stypy_call_varargs', varargs)
        _extrema_operation.reduce.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _extrema_operation.reduce.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_extrema_operation.reduce', ['target', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reduce', localization, ['target', 'axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reduce(...)' code ##################

        str_148828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6211, 8), 'str', 'Reduce target along the given axis.')
        
        # Assigning a Call to a Name (line 6212):
        
        # Assigning a Call to a Name (line 6212):
        
        # Call to narray(...): (line 6212)
        # Processing the call arguments (line 6212)
        # Getting the type of 'target' (line 6212)
        target_148830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6212, 24), 'target', False)
        # Processing the call keyword arguments (line 6212)
        # Getting the type of 'False' (line 6212)
        False_148831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6212, 37), 'False', False)
        keyword_148832 = False_148831
        # Getting the type of 'True' (line 6212)
        True_148833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6212, 50), 'True', False)
        keyword_148834 = True_148833
        kwargs_148835 = {'subok': keyword_148834, 'copy': keyword_148832}
        # Getting the type of 'narray' (line 6212)
        narray_148829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6212, 17), 'narray', False)
        # Calling narray(args, kwargs) (line 6212)
        narray_call_result_148836 = invoke(stypy.reporting.localization.Localization(__file__, 6212, 17), narray_148829, *[target_148830], **kwargs_148835)
        
        # Assigning a type to the variable 'target' (line 6212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6212, 8), 'target', narray_call_result_148836)
        
        # Assigning a Call to a Name (line 6213):
        
        # Assigning a Call to a Name (line 6213):
        
        # Call to getmask(...): (line 6213)
        # Processing the call arguments (line 6213)
        # Getting the type of 'target' (line 6213)
        target_148838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6213, 20), 'target', False)
        # Processing the call keyword arguments (line 6213)
        kwargs_148839 = {}
        # Getting the type of 'getmask' (line 6213)
        getmask_148837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6213, 12), 'getmask', False)
        # Calling getmask(args, kwargs) (line 6213)
        getmask_call_result_148840 = invoke(stypy.reporting.localization.Localization(__file__, 6213, 12), getmask_148837, *[target_148838], **kwargs_148839)
        
        # Assigning a type to the variable 'm' (line 6213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6213, 8), 'm', getmask_call_result_148840)
        
        # Type idiom detected: calculating its left and rigth part (line 6214)
        # Getting the type of 'axis' (line 6214)
        axis_148841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6214, 8), 'axis')
        # Getting the type of 'None' (line 6214)
        None_148842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6214, 23), 'None')
        
        (may_be_148843, more_types_in_union_148844) = may_not_be_none(axis_148841, None_148842)

        if may_be_148843:

            if more_types_in_union_148844:
                # Runtime conditional SSA (line 6214)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Name (line 6215):
            
            # Assigning a Dict to a Name (line 6215):
            
            # Obtaining an instance of the builtin type 'dict' (line 6215)
            dict_148845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6215, 20), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 6215)
            # Adding element type (key, value) (line 6215)
            str_148846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6215, 21), 'str', 'axis')
            # Getting the type of 'axis' (line 6215)
            axis_148847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6215, 29), 'axis')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6215, 20), dict_148845, (str_148846, axis_148847))
            
            # Assigning a type to the variable 'kargs' (line 6215)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6215, 12), 'kargs', dict_148845)

            if more_types_in_union_148844:
                # Runtime conditional SSA for else branch (line 6214)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_148843) or more_types_in_union_148844):
            
            # Assigning a Dict to a Name (line 6217):
            
            # Assigning a Dict to a Name (line 6217):
            
            # Obtaining an instance of the builtin type 'dict' (line 6217)
            dict_148848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6217, 20), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 6217)
            
            # Assigning a type to the variable 'kargs' (line 6217)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6217, 12), 'kargs', dict_148848)
            
            # Assigning a Call to a Name (line 6218):
            
            # Assigning a Call to a Name (line 6218):
            
            # Call to ravel(...): (line 6218)
            # Processing the call keyword arguments (line 6218)
            kwargs_148851 = {}
            # Getting the type of 'target' (line 6218)
            target_148849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6218, 21), 'target', False)
            # Obtaining the member 'ravel' of a type (line 6218)
            ravel_148850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6218, 21), target_148849, 'ravel')
            # Calling ravel(args, kwargs) (line 6218)
            ravel_call_result_148852 = invoke(stypy.reporting.localization.Localization(__file__, 6218, 21), ravel_148850, *[], **kwargs_148851)
            
            # Assigning a type to the variable 'target' (line 6218)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6218, 12), 'target', ravel_call_result_148852)
            
            
            
            # Getting the type of 'm' (line 6219)
            m_148853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6219, 20), 'm')
            # Getting the type of 'nomask' (line 6219)
            nomask_148854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6219, 25), 'nomask')
            # Applying the binary operator 'is' (line 6219)
            result_is__148855 = python_operator(stypy.reporting.localization.Localization(__file__, 6219, 20), 'is', m_148853, nomask_148854)
            
            # Applying the 'not' unary operator (line 6219)
            result_not__148856 = python_operator(stypy.reporting.localization.Localization(__file__, 6219, 15), 'not', result_is__148855)
            
            # Testing the type of an if condition (line 6219)
            if_condition_148857 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6219, 12), result_not__148856)
            # Assigning a type to the variable 'if_condition_148857' (line 6219)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6219, 12), 'if_condition_148857', if_condition_148857)
            # SSA begins for if statement (line 6219)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 6220):
            
            # Assigning a Call to a Name (line 6220):
            
            # Call to ravel(...): (line 6220)
            # Processing the call keyword arguments (line 6220)
            kwargs_148860 = {}
            # Getting the type of 'm' (line 6220)
            m_148858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6220, 20), 'm', False)
            # Obtaining the member 'ravel' of a type (line 6220)
            ravel_148859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6220, 20), m_148858, 'ravel')
            # Calling ravel(args, kwargs) (line 6220)
            ravel_call_result_148861 = invoke(stypy.reporting.localization.Localization(__file__, 6220, 20), ravel_148859, *[], **kwargs_148860)
            
            # Assigning a type to the variable 'm' (line 6220)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6220, 16), 'm', ravel_call_result_148861)
            # SSA join for if statement (line 6219)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_148843 and more_types_in_union_148844):
                # SSA join for if statement (line 6214)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'm' (line 6221)
        m_148862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6221, 11), 'm')
        # Getting the type of 'nomask' (line 6221)
        nomask_148863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6221, 16), 'nomask')
        # Applying the binary operator 'is' (line 6221)
        result_is__148864 = python_operator(stypy.reporting.localization.Localization(__file__, 6221, 11), 'is', m_148862, nomask_148863)
        
        # Testing the type of an if condition (line 6221)
        if_condition_148865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6221, 8), result_is__148864)
        # Assigning a type to the variable 'if_condition_148865' (line 6221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6221, 8), 'if_condition_148865', if_condition_148865)
        # SSA begins for if statement (line 6221)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 6222):
        
        # Assigning a Call to a Name (line 6222):
        
        # Call to reduce(...): (line 6222)
        # Processing the call arguments (line 6222)
        # Getting the type of 'target' (line 6222)
        target_148869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6222, 34), 'target', False)
        # Processing the call keyword arguments (line 6222)
        # Getting the type of 'kargs' (line 6222)
        kargs_148870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6222, 44), 'kargs', False)
        kwargs_148871 = {'kargs_148870': kargs_148870}
        # Getting the type of 'self' (line 6222)
        self_148866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6222, 16), 'self', False)
        # Obtaining the member 'ufunc' of a type (line 6222)
        ufunc_148867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6222, 16), self_148866, 'ufunc')
        # Obtaining the member 'reduce' of a type (line 6222)
        reduce_148868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6222, 16), ufunc_148867, 'reduce')
        # Calling reduce(args, kwargs) (line 6222)
        reduce_call_result_148872 = invoke(stypy.reporting.localization.Localization(__file__, 6222, 16), reduce_148868, *[target_148869], **kwargs_148871)
        
        # Assigning a type to the variable 't' (line 6222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6222, 12), 't', reduce_call_result_148872)
        # SSA branch for the else part of an if statement (line 6221)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 6224):
        
        # Assigning a Call to a Name (line 6224):
        
        # Call to view(...): (line 6224)
        # Processing the call arguments (line 6224)
        
        # Call to type(...): (line 6225)
        # Processing the call arguments (line 6225)
        # Getting the type of 'target' (line 6225)
        target_148884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6225, 56), 'target', False)
        # Processing the call keyword arguments (line 6225)
        kwargs_148885 = {}
        # Getting the type of 'type' (line 6225)
        type_148883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6225, 51), 'type', False)
        # Calling type(args, kwargs) (line 6225)
        type_call_result_148886 = invoke(stypy.reporting.localization.Localization(__file__, 6225, 51), type_148883, *[target_148884], **kwargs_148885)
        
        # Processing the call keyword arguments (line 6224)
        kwargs_148887 = {}
        
        # Call to filled(...): (line 6224)
        # Processing the call arguments (line 6224)
        
        # Call to fill_value_func(...): (line 6225)
        # Processing the call arguments (line 6225)
        # Getting the type of 'target' (line 6225)
        target_148877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6225, 37), 'target', False)
        # Processing the call keyword arguments (line 6225)
        kwargs_148878 = {}
        # Getting the type of 'self' (line 6225)
        self_148875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6225, 16), 'self', False)
        # Obtaining the member 'fill_value_func' of a type (line 6225)
        fill_value_func_148876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6225, 16), self_148875, 'fill_value_func')
        # Calling fill_value_func(args, kwargs) (line 6225)
        fill_value_func_call_result_148879 = invoke(stypy.reporting.localization.Localization(__file__, 6225, 16), fill_value_func_148876, *[target_148877], **kwargs_148878)
        
        # Processing the call keyword arguments (line 6224)
        kwargs_148880 = {}
        # Getting the type of 'target' (line 6224)
        target_148873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6224, 21), 'target', False)
        # Obtaining the member 'filled' of a type (line 6224)
        filled_148874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6224, 21), target_148873, 'filled')
        # Calling filled(args, kwargs) (line 6224)
        filled_call_result_148881 = invoke(stypy.reporting.localization.Localization(__file__, 6224, 21), filled_148874, *[fill_value_func_call_result_148879], **kwargs_148880)
        
        # Obtaining the member 'view' of a type (line 6224)
        view_148882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6224, 21), filled_call_result_148881, 'view')
        # Calling view(args, kwargs) (line 6224)
        view_call_result_148888 = invoke(stypy.reporting.localization.Localization(__file__, 6224, 21), view_148882, *[type_call_result_148886], **kwargs_148887)
        
        # Assigning a type to the variable 'target' (line 6224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6224, 12), 'target', view_call_result_148888)
        
        # Assigning a Call to a Name (line 6226):
        
        # Assigning a Call to a Name (line 6226):
        
        # Call to reduce(...): (line 6226)
        # Processing the call arguments (line 6226)
        # Getting the type of 'target' (line 6226)
        target_148892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6226, 34), 'target', False)
        # Processing the call keyword arguments (line 6226)
        # Getting the type of 'kargs' (line 6226)
        kargs_148893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6226, 44), 'kargs', False)
        kwargs_148894 = {'kargs_148893': kargs_148893}
        # Getting the type of 'self' (line 6226)
        self_148889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6226, 16), 'self', False)
        # Obtaining the member 'ufunc' of a type (line 6226)
        ufunc_148890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6226, 16), self_148889, 'ufunc')
        # Obtaining the member 'reduce' of a type (line 6226)
        reduce_148891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6226, 16), ufunc_148890, 'reduce')
        # Calling reduce(args, kwargs) (line 6226)
        reduce_call_result_148895 = invoke(stypy.reporting.localization.Localization(__file__, 6226, 16), reduce_148891, *[target_148892], **kwargs_148894)
        
        # Assigning a type to the variable 't' (line 6226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6226, 12), 't', reduce_call_result_148895)
        
        # Assigning a Call to a Name (line 6227):
        
        # Assigning a Call to a Name (line 6227):
        
        # Call to reduce(...): (line 6227)
        # Processing the call arguments (line 6227)
        # Getting the type of 'm' (line 6227)
        m_148899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6227, 41), 'm', False)
        # Processing the call keyword arguments (line 6227)
        # Getting the type of 'kargs' (line 6227)
        kargs_148900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6227, 46), 'kargs', False)
        kwargs_148901 = {'kargs_148900': kargs_148900}
        # Getting the type of 'umath' (line 6227)
        umath_148896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6227, 16), 'umath', False)
        # Obtaining the member 'logical_and' of a type (line 6227)
        logical_and_148897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6227, 16), umath_148896, 'logical_and')
        # Obtaining the member 'reduce' of a type (line 6227)
        reduce_148898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6227, 16), logical_and_148897, 'reduce')
        # Calling reduce(args, kwargs) (line 6227)
        reduce_call_result_148902 = invoke(stypy.reporting.localization.Localization(__file__, 6227, 16), reduce_148898, *[m_148899], **kwargs_148901)
        
        # Assigning a type to the variable 'm' (line 6227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6227, 12), 'm', reduce_call_result_148902)
        
        # Type idiom detected: calculating its left and rigth part (line 6228)
        str_148903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6228, 26), 'str', '_mask')
        # Getting the type of 't' (line 6228)
        t_148904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6228, 23), 't')
        
        (may_be_148905, more_types_in_union_148906) = may_provide_member(str_148903, t_148904)

        if may_be_148905:

            if more_types_in_union_148906:
                # Runtime conditional SSA (line 6228)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 't' (line 6228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6228, 12), 't', remove_not_member_provider_from_union(t_148904, '_mask'))
            
            # Assigning a Name to a Attribute (line 6229):
            
            # Assigning a Name to a Attribute (line 6229):
            # Getting the type of 'm' (line 6229)
            m_148907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6229, 26), 'm')
            # Getting the type of 't' (line 6229)
            t_148908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6229, 16), 't')
            # Setting the type of the member '_mask' of a type (line 6229)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6229, 16), t_148908, '_mask', m_148907)

            if more_types_in_union_148906:
                # Runtime conditional SSA for else branch (line 6228)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_148905) or more_types_in_union_148906):
            # Assigning a type to the variable 't' (line 6228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6228, 12), 't', remove_member_provider_from_union(t_148904, '_mask'))
            
            # Getting the type of 'm' (line 6230)
            m_148909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6230, 17), 'm')
            # Testing the type of an if condition (line 6230)
            if_condition_148910 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6230, 17), m_148909)
            # Assigning a type to the variable 'if_condition_148910' (line 6230)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6230, 17), 'if_condition_148910', if_condition_148910)
            # SSA begins for if statement (line 6230)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Name (line 6231):
            
            # Assigning a Name to a Name (line 6231):
            # Getting the type of 'masked' (line 6231)
            masked_148911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6231, 20), 'masked')
            # Assigning a type to the variable 't' (line 6231)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6231, 16), 't', masked_148911)
            # SSA join for if statement (line 6230)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_148905 and more_types_in_union_148906):
                # SSA join for if statement (line 6228)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 6221)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 't' (line 6232)
        t_148912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6232, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 6232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6232, 8), 'stypy_return_type', t_148912)
        
        # ################# End of 'reduce(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reduce' in the type store
        # Getting the type of 'stypy_return_type' (line 6210)
        stypy_return_type_148913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6210, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148913)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reduce'
        return stypy_return_type_148913


    @norecursion
    def outer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'outer'
        module_type_store = module_type_store.open_function_context('outer', 6234, 4, False)
        # Assigning a type to the variable 'self' (line 6235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6235, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _extrema_operation.outer.__dict__.__setitem__('stypy_localization', localization)
        _extrema_operation.outer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _extrema_operation.outer.__dict__.__setitem__('stypy_type_store', module_type_store)
        _extrema_operation.outer.__dict__.__setitem__('stypy_function_name', '_extrema_operation.outer')
        _extrema_operation.outer.__dict__.__setitem__('stypy_param_names_list', ['a', 'b'])
        _extrema_operation.outer.__dict__.__setitem__('stypy_varargs_param_name', None)
        _extrema_operation.outer.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _extrema_operation.outer.__dict__.__setitem__('stypy_call_defaults', defaults)
        _extrema_operation.outer.__dict__.__setitem__('stypy_call_varargs', varargs)
        _extrema_operation.outer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _extrema_operation.outer.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_extrema_operation.outer', ['a', 'b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'outer', localization, ['a', 'b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'outer(...)' code ##################

        str_148914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6235, 8), 'str', 'Return the function applied to the outer product of a and b.')
        
        # Assigning a Call to a Name (line 6236):
        
        # Assigning a Call to a Name (line 6236):
        
        # Call to getmask(...): (line 6236)
        # Processing the call arguments (line 6236)
        # Getting the type of 'a' (line 6236)
        a_148916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6236, 21), 'a', False)
        # Processing the call keyword arguments (line 6236)
        kwargs_148917 = {}
        # Getting the type of 'getmask' (line 6236)
        getmask_148915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6236, 13), 'getmask', False)
        # Calling getmask(args, kwargs) (line 6236)
        getmask_call_result_148918 = invoke(stypy.reporting.localization.Localization(__file__, 6236, 13), getmask_148915, *[a_148916], **kwargs_148917)
        
        # Assigning a type to the variable 'ma' (line 6236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6236, 8), 'ma', getmask_call_result_148918)
        
        # Assigning a Call to a Name (line 6237):
        
        # Assigning a Call to a Name (line 6237):
        
        # Call to getmask(...): (line 6237)
        # Processing the call arguments (line 6237)
        # Getting the type of 'b' (line 6237)
        b_148920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6237, 21), 'b', False)
        # Processing the call keyword arguments (line 6237)
        kwargs_148921 = {}
        # Getting the type of 'getmask' (line 6237)
        getmask_148919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6237, 13), 'getmask', False)
        # Calling getmask(args, kwargs) (line 6237)
        getmask_call_result_148922 = invoke(stypy.reporting.localization.Localization(__file__, 6237, 13), getmask_148919, *[b_148920], **kwargs_148921)
        
        # Assigning a type to the variable 'mb' (line 6237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6237, 8), 'mb', getmask_call_result_148922)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ma' (line 6238)
        ma_148923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6238, 11), 'ma')
        # Getting the type of 'nomask' (line 6238)
        nomask_148924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6238, 17), 'nomask')
        # Applying the binary operator 'is' (line 6238)
        result_is__148925 = python_operator(stypy.reporting.localization.Localization(__file__, 6238, 11), 'is', ma_148923, nomask_148924)
        
        
        # Getting the type of 'mb' (line 6238)
        mb_148926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6238, 28), 'mb')
        # Getting the type of 'nomask' (line 6238)
        nomask_148927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6238, 34), 'nomask')
        # Applying the binary operator 'is' (line 6238)
        result_is__148928 = python_operator(stypy.reporting.localization.Localization(__file__, 6238, 28), 'is', mb_148926, nomask_148927)
        
        # Applying the binary operator 'and' (line 6238)
        result_and_keyword_148929 = python_operator(stypy.reporting.localization.Localization(__file__, 6238, 11), 'and', result_is__148925, result_is__148928)
        
        # Testing the type of an if condition (line 6238)
        if_condition_148930 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6238, 8), result_and_keyword_148929)
        # Assigning a type to the variable 'if_condition_148930' (line 6238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6238, 8), 'if_condition_148930', if_condition_148930)
        # SSA begins for if statement (line 6238)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 6239):
        
        # Assigning a Name to a Name (line 6239):
        # Getting the type of 'nomask' (line 6239)
        nomask_148931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6239, 16), 'nomask')
        # Assigning a type to the variable 'm' (line 6239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6239, 12), 'm', nomask_148931)
        # SSA branch for the else part of an if statement (line 6238)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 6241):
        
        # Assigning a Call to a Name (line 6241):
        
        # Call to getmaskarray(...): (line 6241)
        # Processing the call arguments (line 6241)
        # Getting the type of 'a' (line 6241)
        a_148933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6241, 30), 'a', False)
        # Processing the call keyword arguments (line 6241)
        kwargs_148934 = {}
        # Getting the type of 'getmaskarray' (line 6241)
        getmaskarray_148932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6241, 17), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 6241)
        getmaskarray_call_result_148935 = invoke(stypy.reporting.localization.Localization(__file__, 6241, 17), getmaskarray_148932, *[a_148933], **kwargs_148934)
        
        # Assigning a type to the variable 'ma' (line 6241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6241, 12), 'ma', getmaskarray_call_result_148935)
        
        # Assigning a Call to a Name (line 6242):
        
        # Assigning a Call to a Name (line 6242):
        
        # Call to getmaskarray(...): (line 6242)
        # Processing the call arguments (line 6242)
        # Getting the type of 'b' (line 6242)
        b_148937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6242, 30), 'b', False)
        # Processing the call keyword arguments (line 6242)
        kwargs_148938 = {}
        # Getting the type of 'getmaskarray' (line 6242)
        getmaskarray_148936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6242, 17), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 6242)
        getmaskarray_call_result_148939 = invoke(stypy.reporting.localization.Localization(__file__, 6242, 17), getmaskarray_148936, *[b_148937], **kwargs_148938)
        
        # Assigning a type to the variable 'mb' (line 6242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6242, 12), 'mb', getmaskarray_call_result_148939)
        
        # Assigning a Call to a Name (line 6243):
        
        # Assigning a Call to a Name (line 6243):
        
        # Call to outer(...): (line 6243)
        # Processing the call arguments (line 6243)
        # Getting the type of 'ma' (line 6243)
        ma_148942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6243, 33), 'ma', False)
        # Getting the type of 'mb' (line 6243)
        mb_148943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6243, 37), 'mb', False)
        # Processing the call keyword arguments (line 6243)
        kwargs_148944 = {}
        # Getting the type of 'logical_or' (line 6243)
        logical_or_148940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6243, 16), 'logical_or', False)
        # Obtaining the member 'outer' of a type (line 6243)
        outer_148941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6243, 16), logical_or_148940, 'outer')
        # Calling outer(args, kwargs) (line 6243)
        outer_call_result_148945 = invoke(stypy.reporting.localization.Localization(__file__, 6243, 16), outer_148941, *[ma_148942, mb_148943], **kwargs_148944)
        
        # Assigning a type to the variable 'm' (line 6243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6243, 12), 'm', outer_call_result_148945)
        # SSA join for if statement (line 6238)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 6244):
        
        # Assigning a Call to a Name (line 6244):
        
        # Call to outer(...): (line 6244)
        # Processing the call arguments (line 6244)
        
        # Call to filled(...): (line 6244)
        # Processing the call arguments (line 6244)
        # Getting the type of 'a' (line 6244)
        a_148950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6244, 41), 'a', False)
        # Processing the call keyword arguments (line 6244)
        kwargs_148951 = {}
        # Getting the type of 'filled' (line 6244)
        filled_148949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6244, 34), 'filled', False)
        # Calling filled(args, kwargs) (line 6244)
        filled_call_result_148952 = invoke(stypy.reporting.localization.Localization(__file__, 6244, 34), filled_148949, *[a_148950], **kwargs_148951)
        
        
        # Call to filled(...): (line 6244)
        # Processing the call arguments (line 6244)
        # Getting the type of 'b' (line 6244)
        b_148954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6244, 52), 'b', False)
        # Processing the call keyword arguments (line 6244)
        kwargs_148955 = {}
        # Getting the type of 'filled' (line 6244)
        filled_148953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6244, 45), 'filled', False)
        # Calling filled(args, kwargs) (line 6244)
        filled_call_result_148956 = invoke(stypy.reporting.localization.Localization(__file__, 6244, 45), filled_148953, *[b_148954], **kwargs_148955)
        
        # Processing the call keyword arguments (line 6244)
        kwargs_148957 = {}
        # Getting the type of 'self' (line 6244)
        self_148946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6244, 17), 'self', False)
        # Obtaining the member 'ufunc' of a type (line 6244)
        ufunc_148947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6244, 17), self_148946, 'ufunc')
        # Obtaining the member 'outer' of a type (line 6244)
        outer_148948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6244, 17), ufunc_148947, 'outer')
        # Calling outer(args, kwargs) (line 6244)
        outer_call_result_148958 = invoke(stypy.reporting.localization.Localization(__file__, 6244, 17), outer_148948, *[filled_call_result_148952, filled_call_result_148956], **kwargs_148957)
        
        # Assigning a type to the variable 'result' (line 6244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6244, 8), 'result', outer_call_result_148958)
        
        
        
        # Call to isinstance(...): (line 6245)
        # Processing the call arguments (line 6245)
        # Getting the type of 'result' (line 6245)
        result_148960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6245, 26), 'result', False)
        # Getting the type of 'MaskedArray' (line 6245)
        MaskedArray_148961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6245, 34), 'MaskedArray', False)
        # Processing the call keyword arguments (line 6245)
        kwargs_148962 = {}
        # Getting the type of 'isinstance' (line 6245)
        isinstance_148959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6245, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 6245)
        isinstance_call_result_148963 = invoke(stypy.reporting.localization.Localization(__file__, 6245, 15), isinstance_148959, *[result_148960, MaskedArray_148961], **kwargs_148962)
        
        # Applying the 'not' unary operator (line 6245)
        result_not__148964 = python_operator(stypy.reporting.localization.Localization(__file__, 6245, 11), 'not', isinstance_call_result_148963)
        
        # Testing the type of an if condition (line 6245)
        if_condition_148965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6245, 8), result_not__148964)
        # Assigning a type to the variable 'if_condition_148965' (line 6245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6245, 8), 'if_condition_148965', if_condition_148965)
        # SSA begins for if statement (line 6245)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 6246):
        
        # Assigning a Call to a Name (line 6246):
        
        # Call to view(...): (line 6246)
        # Processing the call arguments (line 6246)
        # Getting the type of 'MaskedArray' (line 6246)
        MaskedArray_148968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6246, 33), 'MaskedArray', False)
        # Processing the call keyword arguments (line 6246)
        kwargs_148969 = {}
        # Getting the type of 'result' (line 6246)
        result_148966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6246, 21), 'result', False)
        # Obtaining the member 'view' of a type (line 6246)
        view_148967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6246, 21), result_148966, 'view')
        # Calling view(args, kwargs) (line 6246)
        view_call_result_148970 = invoke(stypy.reporting.localization.Localization(__file__, 6246, 21), view_148967, *[MaskedArray_148968], **kwargs_148969)
        
        # Assigning a type to the variable 'result' (line 6246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6246, 12), 'result', view_call_result_148970)
        # SSA join for if statement (line 6245)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 6247):
        
        # Assigning a Name to a Attribute (line 6247):
        # Getting the type of 'm' (line 6247)
        m_148971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6247, 23), 'm')
        # Getting the type of 'result' (line 6247)
        result_148972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6247, 8), 'result')
        # Setting the type of the member '_mask' of a type (line 6247)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6247, 8), result_148972, '_mask', m_148971)
        # Getting the type of 'result' (line 6248)
        result_148973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6248, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 6248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6248, 8), 'stypy_return_type', result_148973)
        
        # ################# End of 'outer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'outer' in the type store
        # Getting the type of 'stypy_return_type' (line 6234)
        stypy_return_type_148974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6234, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_148974)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'outer'
        return stypy_return_type_148974


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 6194, 0, False)
        # Assigning a type to the variable 'self' (line 6195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6195, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_extrema_operation.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_extrema_operation' (line 6194)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6194, 0), '_extrema_operation', _extrema_operation)
# Declaration of the '_minimum_operation' class
# Getting the type of '_extrema_operation' (line 6251)
_extrema_operation_148975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6251, 25), '_extrema_operation')

class _minimum_operation(_extrema_operation_148975, ):
    str_148976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6253, 4), 'str', 'Object to calculate minima')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 6255, 4, False)
        # Assigning a type to the variable 'self' (line 6256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6256, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_minimum_operation.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_148977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6258, (-1)), 'str', 'minimum(a, b) or minimum(a)\nIn one argument case, returns the scalar minimum.\n        ')
        
        # Assigning a Attribute to a Attribute (line 6259):
        
        # Assigning a Attribute to a Attribute (line 6259):
        # Getting the type of 'umath' (line 6259)
        umath_148978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6259, 21), 'umath')
        # Obtaining the member 'minimum' of a type (line 6259)
        minimum_148979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6259, 21), umath_148978, 'minimum')
        # Getting the type of 'self' (line 6259)
        self_148980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6259, 8), 'self')
        # Setting the type of the member 'ufunc' of a type (line 6259)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6259, 8), self_148980, 'ufunc', minimum_148979)
        
        # Assigning a Name to a Attribute (line 6260):
        
        # Assigning a Name to a Attribute (line 6260):
        # Getting the type of 'amin' (line 6260)
        amin_148981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6260, 21), 'amin')
        # Getting the type of 'self' (line 6260)
        self_148982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6260, 8), 'self')
        # Setting the type of the member 'afunc' of a type (line 6260)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6260, 8), self_148982, 'afunc', amin_148981)
        
        # Assigning a Name to a Attribute (line 6261):
        
        # Assigning a Name to a Attribute (line 6261):
        # Getting the type of 'less' (line 6261)
        less_148983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6261, 23), 'less')
        # Getting the type of 'self' (line 6261)
        self_148984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6261, 8), 'self')
        # Setting the type of the member 'compare' of a type (line 6261)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6261, 8), self_148984, 'compare', less_148983)
        
        # Assigning a Name to a Attribute (line 6262):
        
        # Assigning a Name to a Attribute (line 6262):
        # Getting the type of 'minimum_fill_value' (line 6262)
        minimum_fill_value_148985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6262, 31), 'minimum_fill_value')
        # Getting the type of 'self' (line 6262)
        self_148986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6262, 8), 'self')
        # Setting the type of the member 'fill_value_func' of a type (line 6262)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6262, 8), self_148986, 'fill_value_func', minimum_fill_value_148985)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_minimum_operation' (line 6251)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6251, 0), '_minimum_operation', _minimum_operation)
# Declaration of the '_maximum_operation' class
# Getting the type of '_extrema_operation' (line 6265)
_extrema_operation_148987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6265, 25), '_extrema_operation')

class _maximum_operation(_extrema_operation_148987, ):
    str_148988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6267, 4), 'str', 'Object to calculate maxima')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 6269, 4, False)
        # Assigning a type to the variable 'self' (line 6270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6270, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_maximum_operation.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_148989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6272, (-1)), 'str', 'maximum(a, b) or maximum(a)\n           In one argument case returns the scalar maximum.\n        ')
        
        # Assigning a Attribute to a Attribute (line 6273):
        
        # Assigning a Attribute to a Attribute (line 6273):
        # Getting the type of 'umath' (line 6273)
        umath_148990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6273, 21), 'umath')
        # Obtaining the member 'maximum' of a type (line 6273)
        maximum_148991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6273, 21), umath_148990, 'maximum')
        # Getting the type of 'self' (line 6273)
        self_148992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6273, 8), 'self')
        # Setting the type of the member 'ufunc' of a type (line 6273)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6273, 8), self_148992, 'ufunc', maximum_148991)
        
        # Assigning a Name to a Attribute (line 6274):
        
        # Assigning a Name to a Attribute (line 6274):
        # Getting the type of 'amax' (line 6274)
        amax_148993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6274, 21), 'amax')
        # Getting the type of 'self' (line 6274)
        self_148994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6274, 8), 'self')
        # Setting the type of the member 'afunc' of a type (line 6274)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6274, 8), self_148994, 'afunc', amax_148993)
        
        # Assigning a Name to a Attribute (line 6275):
        
        # Assigning a Name to a Attribute (line 6275):
        # Getting the type of 'greater' (line 6275)
        greater_148995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6275, 23), 'greater')
        # Getting the type of 'self' (line 6275)
        self_148996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6275, 8), 'self')
        # Setting the type of the member 'compare' of a type (line 6275)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6275, 8), self_148996, 'compare', greater_148995)
        
        # Assigning a Name to a Attribute (line 6276):
        
        # Assigning a Name to a Attribute (line 6276):
        # Getting the type of 'maximum_fill_value' (line 6276)
        maximum_fill_value_148997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6276, 31), 'maximum_fill_value')
        # Getting the type of 'self' (line 6276)
        self_148998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6276, 8), 'self')
        # Setting the type of the member 'fill_value_func' of a type (line 6276)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6276, 8), self_148998, 'fill_value_func', maximum_fill_value_148997)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_maximum_operation' (line 6265)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6265, 0), '_maximum_operation', _maximum_operation)

@norecursion
def min(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6279)
    None_148999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6279, 18), 'None')
    # Getting the type of 'None' (line 6279)
    None_149000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6279, 28), 'None')
    # Getting the type of 'None' (line 6279)
    None_149001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6279, 45), 'None')
    defaults = [None_148999, None_149000, None_149001]
    # Create a new context for function 'min'
    module_type_store = module_type_store.open_function_context('min', 6279, 0, False)
    
    # Passed parameters checking function
    min.stypy_localization = localization
    min.stypy_type_of_self = None
    min.stypy_type_store = module_type_store
    min.stypy_function_name = 'min'
    min.stypy_param_names_list = ['obj', 'axis', 'out', 'fill_value']
    min.stypy_varargs_param_name = None
    min.stypy_kwargs_param_name = None
    min.stypy_call_defaults = defaults
    min.stypy_call_varargs = varargs
    min.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'min', ['obj', 'axis', 'out', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'min', localization, ['obj', 'axis', 'out', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'min(...)' code ##################

    
    
    # SSA begins for try-except statement (line 6280)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to min(...): (line 6281)
    # Processing the call keyword arguments (line 6281)
    # Getting the type of 'axis' (line 6281)
    axis_149004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6281, 28), 'axis', False)
    keyword_149005 = axis_149004
    # Getting the type of 'fill_value' (line 6281)
    fill_value_149006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6281, 45), 'fill_value', False)
    keyword_149007 = fill_value_149006
    # Getting the type of 'out' (line 6281)
    out_149008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6281, 61), 'out', False)
    keyword_149009 = out_149008
    kwargs_149010 = {'fill_value': keyword_149007, 'out': keyword_149009, 'axis': keyword_149005}
    # Getting the type of 'obj' (line 6281)
    obj_149002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6281, 15), 'obj', False)
    # Obtaining the member 'min' of a type (line 6281)
    min_149003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6281, 15), obj_149002, 'min')
    # Calling min(args, kwargs) (line 6281)
    min_call_result_149011 = invoke(stypy.reporting.localization.Localization(__file__, 6281, 15), min_149003, *[], **kwargs_149010)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6281, 8), 'stypy_return_type', min_call_result_149011)
    # SSA branch for the except part of a try statement (line 6280)
    # SSA branch for the except 'Tuple' branch of a try statement (line 6280)
    module_type_store.open_ssa_branch('except')
    
    # Call to min(...): (line 6285)
    # Processing the call keyword arguments (line 6285)
    # Getting the type of 'axis' (line 6285)
    axis_149017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6285, 40), 'axis', False)
    keyword_149018 = axis_149017
    # Getting the type of 'fill_value' (line 6285)
    fill_value_149019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6285, 57), 'fill_value', False)
    keyword_149020 = fill_value_149019
    # Getting the type of 'out' (line 6285)
    out_149021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6285, 73), 'out', False)
    keyword_149022 = out_149021
    kwargs_149023 = {'fill_value': keyword_149020, 'out': keyword_149022, 'axis': keyword_149018}
    
    # Call to asanyarray(...): (line 6285)
    # Processing the call arguments (line 6285)
    # Getting the type of 'obj' (line 6285)
    obj_149013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6285, 26), 'obj', False)
    # Processing the call keyword arguments (line 6285)
    kwargs_149014 = {}
    # Getting the type of 'asanyarray' (line 6285)
    asanyarray_149012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6285, 15), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 6285)
    asanyarray_call_result_149015 = invoke(stypy.reporting.localization.Localization(__file__, 6285, 15), asanyarray_149012, *[obj_149013], **kwargs_149014)
    
    # Obtaining the member 'min' of a type (line 6285)
    min_149016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6285, 15), asanyarray_call_result_149015, 'min')
    # Calling min(args, kwargs) (line 6285)
    min_call_result_149024 = invoke(stypy.reporting.localization.Localization(__file__, 6285, 15), min_149016, *[], **kwargs_149023)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6285, 8), 'stypy_return_type', min_call_result_149024)
    # SSA join for try-except statement (line 6280)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'min(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'min' in the type store
    # Getting the type of 'stypy_return_type' (line 6279)
    stypy_return_type_149025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6279, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149025)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'min'
    return stypy_return_type_149025

# Assigning a type to the variable 'min' (line 6279)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6279, 0), 'min', min)

# Assigning a Attribute to a Attribute (line 6286):

# Assigning a Attribute to a Attribute (line 6286):
# Getting the type of 'MaskedArray' (line 6286)
MaskedArray_149026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6286, 14), 'MaskedArray')
# Obtaining the member 'min' of a type (line 6286)
min_149027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6286, 14), MaskedArray_149026, 'min')
# Obtaining the member '__doc__' of a type (line 6286)
doc___149028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6286, 14), min_149027, '__doc__')
# Getting the type of 'min' (line 6286)
min_149029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6286, 0), 'min')
# Setting the type of the member '__doc__' of a type (line 6286)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6286, 0), min_149029, '__doc__', doc___149028)

@norecursion
def max(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6289)
    None_149030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6289, 18), 'None')
    # Getting the type of 'None' (line 6289)
    None_149031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6289, 28), 'None')
    # Getting the type of 'None' (line 6289)
    None_149032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6289, 45), 'None')
    defaults = [None_149030, None_149031, None_149032]
    # Create a new context for function 'max'
    module_type_store = module_type_store.open_function_context('max', 6289, 0, False)
    
    # Passed parameters checking function
    max.stypy_localization = localization
    max.stypy_type_of_self = None
    max.stypy_type_store = module_type_store
    max.stypy_function_name = 'max'
    max.stypy_param_names_list = ['obj', 'axis', 'out', 'fill_value']
    max.stypy_varargs_param_name = None
    max.stypy_kwargs_param_name = None
    max.stypy_call_defaults = defaults
    max.stypy_call_varargs = varargs
    max.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'max', ['obj', 'axis', 'out', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'max', localization, ['obj', 'axis', 'out', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'max(...)' code ##################

    
    
    # SSA begins for try-except statement (line 6290)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to max(...): (line 6291)
    # Processing the call keyword arguments (line 6291)
    # Getting the type of 'axis' (line 6291)
    axis_149035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6291, 28), 'axis', False)
    keyword_149036 = axis_149035
    # Getting the type of 'fill_value' (line 6291)
    fill_value_149037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6291, 45), 'fill_value', False)
    keyword_149038 = fill_value_149037
    # Getting the type of 'out' (line 6291)
    out_149039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6291, 61), 'out', False)
    keyword_149040 = out_149039
    kwargs_149041 = {'fill_value': keyword_149038, 'out': keyword_149040, 'axis': keyword_149036}
    # Getting the type of 'obj' (line 6291)
    obj_149033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6291, 15), 'obj', False)
    # Obtaining the member 'max' of a type (line 6291)
    max_149034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6291, 15), obj_149033, 'max')
    # Calling max(args, kwargs) (line 6291)
    max_call_result_149042 = invoke(stypy.reporting.localization.Localization(__file__, 6291, 15), max_149034, *[], **kwargs_149041)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6291, 8), 'stypy_return_type', max_call_result_149042)
    # SSA branch for the except part of a try statement (line 6290)
    # SSA branch for the except 'Tuple' branch of a try statement (line 6290)
    module_type_store.open_ssa_branch('except')
    
    # Call to max(...): (line 6295)
    # Processing the call keyword arguments (line 6295)
    # Getting the type of 'axis' (line 6295)
    axis_149048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6295, 40), 'axis', False)
    keyword_149049 = axis_149048
    # Getting the type of 'fill_value' (line 6295)
    fill_value_149050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6295, 57), 'fill_value', False)
    keyword_149051 = fill_value_149050
    # Getting the type of 'out' (line 6295)
    out_149052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6295, 73), 'out', False)
    keyword_149053 = out_149052
    kwargs_149054 = {'fill_value': keyword_149051, 'out': keyword_149053, 'axis': keyword_149049}
    
    # Call to asanyarray(...): (line 6295)
    # Processing the call arguments (line 6295)
    # Getting the type of 'obj' (line 6295)
    obj_149044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6295, 26), 'obj', False)
    # Processing the call keyword arguments (line 6295)
    kwargs_149045 = {}
    # Getting the type of 'asanyarray' (line 6295)
    asanyarray_149043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6295, 15), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 6295)
    asanyarray_call_result_149046 = invoke(stypy.reporting.localization.Localization(__file__, 6295, 15), asanyarray_149043, *[obj_149044], **kwargs_149045)
    
    # Obtaining the member 'max' of a type (line 6295)
    max_149047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6295, 15), asanyarray_call_result_149046, 'max')
    # Calling max(args, kwargs) (line 6295)
    max_call_result_149055 = invoke(stypy.reporting.localization.Localization(__file__, 6295, 15), max_149047, *[], **kwargs_149054)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6295, 8), 'stypy_return_type', max_call_result_149055)
    # SSA join for try-except statement (line 6290)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'max(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'max' in the type store
    # Getting the type of 'stypy_return_type' (line 6289)
    stypy_return_type_149056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6289, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149056)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'max'
    return stypy_return_type_149056

# Assigning a type to the variable 'max' (line 6289)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6289, 0), 'max', max)

# Assigning a Attribute to a Attribute (line 6296):

# Assigning a Attribute to a Attribute (line 6296):
# Getting the type of 'MaskedArray' (line 6296)
MaskedArray_149057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6296, 14), 'MaskedArray')
# Obtaining the member 'max' of a type (line 6296)
max_149058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6296, 14), MaskedArray_149057, 'max')
# Obtaining the member '__doc__' of a type (line 6296)
doc___149059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6296, 14), max_149058, '__doc__')
# Getting the type of 'max' (line 6296)
max_149060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6296, 0), 'max')
# Setting the type of the member '__doc__' of a type (line 6296)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6296, 0), max_149060, '__doc__', doc___149059)

@norecursion
def ptp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6299)
    None_149061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6299, 18), 'None')
    # Getting the type of 'None' (line 6299)
    None_149062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6299, 28), 'None')
    # Getting the type of 'None' (line 6299)
    None_149063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6299, 45), 'None')
    defaults = [None_149061, None_149062, None_149063]
    # Create a new context for function 'ptp'
    module_type_store = module_type_store.open_function_context('ptp', 6299, 0, False)
    
    # Passed parameters checking function
    ptp.stypy_localization = localization
    ptp.stypy_type_of_self = None
    ptp.stypy_type_store = module_type_store
    ptp.stypy_function_name = 'ptp'
    ptp.stypy_param_names_list = ['obj', 'axis', 'out', 'fill_value']
    ptp.stypy_varargs_param_name = None
    ptp.stypy_kwargs_param_name = None
    ptp.stypy_call_defaults = defaults
    ptp.stypy_call_varargs = varargs
    ptp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ptp', ['obj', 'axis', 'out', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ptp', localization, ['obj', 'axis', 'out', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ptp(...)' code ##################

    str_149064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6303, (-1)), 'str', '\n    a.ptp(axis=None) =  a.max(axis) - a.min(axis)\n\n    ')
    
    
    # SSA begins for try-except statement (line 6304)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to ptp(...): (line 6305)
    # Processing the call arguments (line 6305)
    # Getting the type of 'axis' (line 6305)
    axis_149067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6305, 23), 'axis', False)
    # Processing the call keyword arguments (line 6305)
    # Getting the type of 'out' (line 6305)
    out_149068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6305, 33), 'out', False)
    keyword_149069 = out_149068
    # Getting the type of 'fill_value' (line 6305)
    fill_value_149070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6305, 49), 'fill_value', False)
    keyword_149071 = fill_value_149070
    kwargs_149072 = {'fill_value': keyword_149071, 'out': keyword_149069}
    # Getting the type of 'obj' (line 6305)
    obj_149065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6305, 15), 'obj', False)
    # Obtaining the member 'ptp' of a type (line 6305)
    ptp_149066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6305, 15), obj_149065, 'ptp')
    # Calling ptp(args, kwargs) (line 6305)
    ptp_call_result_149073 = invoke(stypy.reporting.localization.Localization(__file__, 6305, 15), ptp_149066, *[axis_149067], **kwargs_149072)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6305, 8), 'stypy_return_type', ptp_call_result_149073)
    # SSA branch for the except part of a try statement (line 6304)
    # SSA branch for the except 'Tuple' branch of a try statement (line 6304)
    module_type_store.open_ssa_branch('except')
    
    # Call to ptp(...): (line 6309)
    # Processing the call keyword arguments (line 6309)
    # Getting the type of 'axis' (line 6309)
    axis_149079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6309, 40), 'axis', False)
    keyword_149080 = axis_149079
    # Getting the type of 'fill_value' (line 6309)
    fill_value_149081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6309, 57), 'fill_value', False)
    keyword_149082 = fill_value_149081
    # Getting the type of 'out' (line 6309)
    out_149083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6309, 73), 'out', False)
    keyword_149084 = out_149083
    kwargs_149085 = {'fill_value': keyword_149082, 'out': keyword_149084, 'axis': keyword_149080}
    
    # Call to asanyarray(...): (line 6309)
    # Processing the call arguments (line 6309)
    # Getting the type of 'obj' (line 6309)
    obj_149075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6309, 26), 'obj', False)
    # Processing the call keyword arguments (line 6309)
    kwargs_149076 = {}
    # Getting the type of 'asanyarray' (line 6309)
    asanyarray_149074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6309, 15), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 6309)
    asanyarray_call_result_149077 = invoke(stypy.reporting.localization.Localization(__file__, 6309, 15), asanyarray_149074, *[obj_149075], **kwargs_149076)
    
    # Obtaining the member 'ptp' of a type (line 6309)
    ptp_149078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6309, 15), asanyarray_call_result_149077, 'ptp')
    # Calling ptp(args, kwargs) (line 6309)
    ptp_call_result_149086 = invoke(stypy.reporting.localization.Localization(__file__, 6309, 15), ptp_149078, *[], **kwargs_149085)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6309, 8), 'stypy_return_type', ptp_call_result_149086)
    # SSA join for try-except statement (line 6304)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'ptp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ptp' in the type store
    # Getting the type of 'stypy_return_type' (line 6299)
    stypy_return_type_149087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6299, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149087)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ptp'
    return stypy_return_type_149087

# Assigning a type to the variable 'ptp' (line 6299)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6299, 0), 'ptp', ptp)

# Assigning a Attribute to a Attribute (line 6310):

# Assigning a Attribute to a Attribute (line 6310):
# Getting the type of 'MaskedArray' (line 6310)
MaskedArray_149088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6310, 14), 'MaskedArray')
# Obtaining the member 'ptp' of a type (line 6310)
ptp_149089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6310, 14), MaskedArray_149088, 'ptp')
# Obtaining the member '__doc__' of a type (line 6310)
doc___149090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6310, 14), ptp_149089, '__doc__')
# Getting the type of 'ptp' (line 6310)
ptp_149091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6310, 0), 'ptp')
# Setting the type of the member '__doc__' of a type (line 6310)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6310, 0), ptp_149091, '__doc__', doc___149090)
# Declaration of the '_frommethod' class

class _frommethod:
    str_149092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6327, (-1)), 'str', '\n    Define functions from existing MaskedArray methods.\n\n    Parameters\n    ----------\n    methodname : str\n        Name of the method to transform.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 6329)
        False_149093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6329, 44), 'False')
        defaults = [False_149093]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 6329, 4, False)
        # Assigning a type to the variable 'self' (line 6330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6330, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_frommethod.__init__', ['methodname', 'reversed'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['methodname', 'reversed'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 6330):
        
        # Assigning a Name to a Attribute (line 6330):
        # Getting the type of 'methodname' (line 6330)
        methodname_149094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6330, 24), 'methodname')
        # Getting the type of 'self' (line 6330)
        self_149095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6330, 8), 'self')
        # Setting the type of the member '__name__' of a type (line 6330)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6330, 8), self_149095, '__name__', methodname_149094)
        
        # Assigning a Call to a Attribute (line 6331):
        
        # Assigning a Call to a Attribute (line 6331):
        
        # Call to getdoc(...): (line 6331)
        # Processing the call keyword arguments (line 6331)
        kwargs_149098 = {}
        # Getting the type of 'self' (line 6331)
        self_149096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6331, 23), 'self', False)
        # Obtaining the member 'getdoc' of a type (line 6331)
        getdoc_149097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6331, 23), self_149096, 'getdoc')
        # Calling getdoc(args, kwargs) (line 6331)
        getdoc_call_result_149099 = invoke(stypy.reporting.localization.Localization(__file__, 6331, 23), getdoc_149097, *[], **kwargs_149098)
        
        # Getting the type of 'self' (line 6331)
        self_149100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6331, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 6331)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6331, 8), self_149100, '__doc__', getdoc_call_result_149099)
        
        # Assigning a Name to a Attribute (line 6332):
        
        # Assigning a Name to a Attribute (line 6332):
        # Getting the type of 'reversed' (line 6332)
        reversed_149101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6332, 24), 'reversed')
        # Getting the type of 'self' (line 6332)
        self_149102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6332, 8), 'self')
        # Setting the type of the member 'reversed' of a type (line 6332)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6332, 8), self_149102, 'reversed', reversed_149101)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def getdoc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'getdoc'
        module_type_store = module_type_store.open_function_context('getdoc', 6334, 4, False)
        # Assigning a type to the variable 'self' (line 6335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6335, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _frommethod.getdoc.__dict__.__setitem__('stypy_localization', localization)
        _frommethod.getdoc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _frommethod.getdoc.__dict__.__setitem__('stypy_type_store', module_type_store)
        _frommethod.getdoc.__dict__.__setitem__('stypy_function_name', '_frommethod.getdoc')
        _frommethod.getdoc.__dict__.__setitem__('stypy_param_names_list', [])
        _frommethod.getdoc.__dict__.__setitem__('stypy_varargs_param_name', None)
        _frommethod.getdoc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _frommethod.getdoc.__dict__.__setitem__('stypy_call_defaults', defaults)
        _frommethod.getdoc.__dict__.__setitem__('stypy_call_varargs', varargs)
        _frommethod.getdoc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _frommethod.getdoc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_frommethod.getdoc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'getdoc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'getdoc(...)' code ##################

        str_149103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6335, 8), 'str', 'Return the doc of the function (from the doc of the method).')
        
        # Assigning a BoolOp to a Name (line 6336):
        
        # Assigning a BoolOp to a Name (line 6336):
        
        # Evaluating a boolean operation
        
        # Call to getattr(...): (line 6336)
        # Processing the call arguments (line 6336)
        # Getting the type of 'MaskedArray' (line 6336)
        MaskedArray_149105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6336, 23), 'MaskedArray', False)
        # Getting the type of 'self' (line 6336)
        self_149106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6336, 36), 'self', False)
        # Obtaining the member '__name__' of a type (line 6336)
        name___149107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6336, 36), self_149106, '__name__')
        # Getting the type of 'None' (line 6336)
        None_149108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6336, 51), 'None', False)
        # Processing the call keyword arguments (line 6336)
        kwargs_149109 = {}
        # Getting the type of 'getattr' (line 6336)
        getattr_149104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6336, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 6336)
        getattr_call_result_149110 = invoke(stypy.reporting.localization.Localization(__file__, 6336, 15), getattr_149104, *[MaskedArray_149105, name___149107, None_149108], **kwargs_149109)
        
        
        # Call to getattr(...): (line 6337)
        # Processing the call arguments (line 6337)
        # Getting the type of 'np' (line 6337)
        np_149112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6337, 20), 'np', False)
        # Getting the type of 'self' (line 6337)
        self_149113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6337, 24), 'self', False)
        # Obtaining the member '__name__' of a type (line 6337)
        name___149114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6337, 24), self_149113, '__name__')
        # Getting the type of 'None' (line 6337)
        None_149115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6337, 39), 'None', False)
        # Processing the call keyword arguments (line 6337)
        kwargs_149116 = {}
        # Getting the type of 'getattr' (line 6337)
        getattr_149111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6337, 12), 'getattr', False)
        # Calling getattr(args, kwargs) (line 6337)
        getattr_call_result_149117 = invoke(stypy.reporting.localization.Localization(__file__, 6337, 12), getattr_149111, *[np_149112, name___149114, None_149115], **kwargs_149116)
        
        # Applying the binary operator 'or' (line 6336)
        result_or_keyword_149118 = python_operator(stypy.reporting.localization.Localization(__file__, 6336, 15), 'or', getattr_call_result_149110, getattr_call_result_149117)
        
        # Assigning a type to the variable 'meth' (line 6336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6336, 8), 'meth', result_or_keyword_149118)
        
        # Assigning a BinOp to a Name (line 6338):
        
        # Assigning a BinOp to a Name (line 6338):
        # Getting the type of 'self' (line 6338)
        self_149119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6338, 20), 'self')
        # Obtaining the member '__name__' of a type (line 6338)
        name___149120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6338, 20), self_149119, '__name__')
        
        # Call to get_object_signature(...): (line 6338)
        # Processing the call arguments (line 6338)
        # Getting the type of 'meth' (line 6338)
        meth_149122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6338, 57), 'meth', False)
        # Processing the call keyword arguments (line 6338)
        kwargs_149123 = {}
        # Getting the type of 'get_object_signature' (line 6338)
        get_object_signature_149121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6338, 36), 'get_object_signature', False)
        # Calling get_object_signature(args, kwargs) (line 6338)
        get_object_signature_call_result_149124 = invoke(stypy.reporting.localization.Localization(__file__, 6338, 36), get_object_signature_149121, *[meth_149122], **kwargs_149123)
        
        # Applying the binary operator '+' (line 6338)
        result_add_149125 = python_operator(stypy.reporting.localization.Localization(__file__, 6338, 20), '+', name___149120, get_object_signature_call_result_149124)
        
        # Assigning a type to the variable 'signature' (line 6338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6338, 8), 'signature', result_add_149125)
        
        # Type idiom detected: calculating its left and rigth part (line 6339)
        # Getting the type of 'meth' (line 6339)
        meth_149126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6339, 8), 'meth')
        # Getting the type of 'None' (line 6339)
        None_149127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6339, 23), 'None')
        
        (may_be_149128, more_types_in_union_149129) = may_not_be_none(meth_149126, None_149127)

        if may_be_149128:

            if more_types_in_union_149129:
                # Runtime conditional SSA (line 6339)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 6340):
            
            # Assigning a BinOp to a Name (line 6340):
            str_149130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6340, 18), 'str', '    %s\n%s')
            
            # Obtaining an instance of the builtin type 'tuple' (line 6341)
            tuple_149131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6341, 16), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 6341)
            # Adding element type (line 6341)
            # Getting the type of 'signature' (line 6341)
            signature_149132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6341, 16), 'signature')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6341, 16), tuple_149131, signature_149132)
            # Adding element type (line 6341)
            
            # Call to getattr(...): (line 6341)
            # Processing the call arguments (line 6341)
            # Getting the type of 'meth' (line 6341)
            meth_149134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6341, 35), 'meth', False)
            str_149135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6341, 41), 'str', '__doc__')
            # Getting the type of 'None' (line 6341)
            None_149136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6341, 52), 'None', False)
            # Processing the call keyword arguments (line 6341)
            kwargs_149137 = {}
            # Getting the type of 'getattr' (line 6341)
            getattr_149133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6341, 27), 'getattr', False)
            # Calling getattr(args, kwargs) (line 6341)
            getattr_call_result_149138 = invoke(stypy.reporting.localization.Localization(__file__, 6341, 27), getattr_149133, *[meth_149134, str_149135, None_149136], **kwargs_149137)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6341, 16), tuple_149131, getattr_call_result_149138)
            
            # Applying the binary operator '%' (line 6340)
            result_mod_149139 = python_operator(stypy.reporting.localization.Localization(__file__, 6340, 18), '%', str_149130, tuple_149131)
            
            # Assigning a type to the variable 'doc' (line 6340)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6340, 12), 'doc', result_mod_149139)
            # Getting the type of 'doc' (line 6342)
            doc_149140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6342, 19), 'doc')
            # Assigning a type to the variable 'stypy_return_type' (line 6342)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6342, 12), 'stypy_return_type', doc_149140)

            if more_types_in_union_149129:
                # SSA join for if statement (line 6339)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'getdoc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'getdoc' in the type store
        # Getting the type of 'stypy_return_type' (line 6334)
        stypy_return_type_149141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6334, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149141)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'getdoc'
        return stypy_return_type_149141


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 6344, 4, False)
        # Assigning a type to the variable 'self' (line 6345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6345, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _frommethod.__call__.__dict__.__setitem__('stypy_localization', localization)
        _frommethod.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _frommethod.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _frommethod.__call__.__dict__.__setitem__('stypy_function_name', '_frommethod.__call__')
        _frommethod.__call__.__dict__.__setitem__('stypy_param_names_list', ['a'])
        _frommethod.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _frommethod.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'params')
        _frommethod.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _frommethod.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _frommethod.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _frommethod.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_frommethod.__call__', ['a'], 'args', 'params', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Getting the type of 'self' (line 6345)
        self_149142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6345, 11), 'self')
        # Obtaining the member 'reversed' of a type (line 6345)
        reversed_149143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6345, 11), self_149142, 'reversed')
        # Testing the type of an if condition (line 6345)
        if_condition_149144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6345, 8), reversed_149143)
        # Assigning a type to the variable 'if_condition_149144' (line 6345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6345, 8), 'if_condition_149144', if_condition_149144)
        # SSA begins for if statement (line 6345)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 6346):
        
        # Assigning a Call to a Name (line 6346):
        
        # Call to list(...): (line 6346)
        # Processing the call arguments (line 6346)
        # Getting the type of 'args' (line 6346)
        args_149146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6346, 24), 'args', False)
        # Processing the call keyword arguments (line 6346)
        kwargs_149147 = {}
        # Getting the type of 'list' (line 6346)
        list_149145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6346, 19), 'list', False)
        # Calling list(args, kwargs) (line 6346)
        list_call_result_149148 = invoke(stypy.reporting.localization.Localization(__file__, 6346, 19), list_149145, *[args_149146], **kwargs_149147)
        
        # Assigning a type to the variable 'args' (line 6346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6346, 12), 'args', list_call_result_149148)
        
        # Assigning a Subscript to a Name (line 6347):
        
        # Assigning a Subscript to a Name (line 6347):
        
        # Obtaining the type of the subscript
        int_149149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6347, 23), 'int')
        # Getting the type of 'args' (line 6347)
        args_149150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6347, 18), 'args')
        # Obtaining the member '__getitem__' of a type (line 6347)
        getitem___149151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6347, 18), args_149150, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 6347)
        subscript_call_result_149152 = invoke(stypy.reporting.localization.Localization(__file__, 6347, 18), getitem___149151, int_149149)
        
        # Assigning a type to the variable 'arr' (line 6347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6347, 12), 'arr', subscript_call_result_149152)
        
        # Assigning a Name to a Subscript (line 6348):
        
        # Assigning a Name to a Subscript (line 6348):
        # Getting the type of 'a' (line 6348)
        a_149153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6348, 22), 'a')
        # Getting the type of 'args' (line 6348)
        args_149154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6348, 12), 'args')
        int_149155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6348, 17), 'int')
        # Storing an element on a container (line 6348)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6348, 12), args_149154, (int_149155, a_149153))
        
        # Assigning a Name to a Name (line 6349):
        
        # Assigning a Name to a Name (line 6349):
        # Getting the type of 'arr' (line 6349)
        arr_149156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6349, 16), 'arr')
        # Assigning a type to the variable 'a' (line 6349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6349, 12), 'a', arr_149156)
        # SSA join for if statement (line 6345)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 6351):
        
        # Assigning a Attribute to a Name (line 6351):
        # Getting the type of 'self' (line 6351)
        self_149157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6351, 22), 'self')
        # Obtaining the member '__name__' of a type (line 6351)
        name___149158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6351, 22), self_149157, '__name__')
        # Assigning a type to the variable 'method_name' (line 6351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6351, 8), 'method_name', name___149158)
        
        # Assigning a Call to a Name (line 6352):
        
        # Assigning a Call to a Name (line 6352):
        
        # Call to getattr(...): (line 6352)
        # Processing the call arguments (line 6352)
        # Getting the type of 'a' (line 6352)
        a_149160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6352, 25), 'a', False)
        # Getting the type of 'method_name' (line 6352)
        method_name_149161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6352, 28), 'method_name', False)
        # Getting the type of 'None' (line 6352)
        None_149162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6352, 41), 'None', False)
        # Processing the call keyword arguments (line 6352)
        kwargs_149163 = {}
        # Getting the type of 'getattr' (line 6352)
        getattr_149159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6352, 17), 'getattr', False)
        # Calling getattr(args, kwargs) (line 6352)
        getattr_call_result_149164 = invoke(stypy.reporting.localization.Localization(__file__, 6352, 17), getattr_149159, *[a_149160, method_name_149161, None_149162], **kwargs_149163)
        
        # Assigning a type to the variable 'method' (line 6352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6352, 8), 'method', getattr_call_result_149164)
        
        # Type idiom detected: calculating its left and rigth part (line 6353)
        # Getting the type of 'method' (line 6353)
        method_149165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6353, 8), 'method')
        # Getting the type of 'None' (line 6353)
        None_149166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6353, 25), 'None')
        
        (may_be_149167, more_types_in_union_149168) = may_not_be_none(method_149165, None_149166)

        if may_be_149167:

            if more_types_in_union_149168:
                # Runtime conditional SSA (line 6353)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to method(...): (line 6354)
            # Getting the type of 'args' (line 6354)
            args_149170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6354, 27), 'args', False)
            # Processing the call keyword arguments (line 6354)
            # Getting the type of 'params' (line 6354)
            params_149171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6354, 35), 'params', False)
            kwargs_149172 = {'params_149171': params_149171}
            # Getting the type of 'method' (line 6354)
            method_149169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6354, 19), 'method', False)
            # Calling method(args, kwargs) (line 6354)
            method_call_result_149173 = invoke(stypy.reporting.localization.Localization(__file__, 6354, 19), method_149169, *[args_149170], **kwargs_149172)
            
            # Assigning a type to the variable 'stypy_return_type' (line 6354)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6354, 12), 'stypy_return_type', method_call_result_149173)

            if more_types_in_union_149168:
                # SSA join for if statement (line 6353)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 6356):
        
        # Assigning a Call to a Name (line 6356):
        
        # Call to getattr(...): (line 6356)
        # Processing the call arguments (line 6356)
        # Getting the type of 'MaskedArray' (line 6356)
        MaskedArray_149175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6356, 25), 'MaskedArray', False)
        # Getting the type of 'method_name' (line 6356)
        method_name_149176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6356, 38), 'method_name', False)
        # Getting the type of 'None' (line 6356)
        None_149177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6356, 51), 'None', False)
        # Processing the call keyword arguments (line 6356)
        kwargs_149178 = {}
        # Getting the type of 'getattr' (line 6356)
        getattr_149174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6356, 17), 'getattr', False)
        # Calling getattr(args, kwargs) (line 6356)
        getattr_call_result_149179 = invoke(stypy.reporting.localization.Localization(__file__, 6356, 17), getattr_149174, *[MaskedArray_149175, method_name_149176, None_149177], **kwargs_149178)
        
        # Assigning a type to the variable 'method' (line 6356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6356, 8), 'method', getattr_call_result_149179)
        
        # Type idiom detected: calculating its left and rigth part (line 6357)
        # Getting the type of 'method' (line 6357)
        method_149180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6357, 8), 'method')
        # Getting the type of 'None' (line 6357)
        None_149181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6357, 25), 'None')
        
        (may_be_149182, more_types_in_union_149183) = may_not_be_none(method_149180, None_149181)

        if may_be_149182:

            if more_types_in_union_149183:
                # Runtime conditional SSA (line 6357)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to method(...): (line 6358)
            # Processing the call arguments (line 6358)
            
            # Call to MaskedArray(...): (line 6358)
            # Processing the call arguments (line 6358)
            # Getting the type of 'a' (line 6358)
            a_149186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6358, 38), 'a', False)
            # Processing the call keyword arguments (line 6358)
            kwargs_149187 = {}
            # Getting the type of 'MaskedArray' (line 6358)
            MaskedArray_149185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6358, 26), 'MaskedArray', False)
            # Calling MaskedArray(args, kwargs) (line 6358)
            MaskedArray_call_result_149188 = invoke(stypy.reporting.localization.Localization(__file__, 6358, 26), MaskedArray_149185, *[a_149186], **kwargs_149187)
            
            # Getting the type of 'args' (line 6358)
            args_149189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6358, 43), 'args', False)
            # Processing the call keyword arguments (line 6358)
            # Getting the type of 'params' (line 6358)
            params_149190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6358, 51), 'params', False)
            kwargs_149191 = {'params_149190': params_149190}
            # Getting the type of 'method' (line 6358)
            method_149184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6358, 19), 'method', False)
            # Calling method(args, kwargs) (line 6358)
            method_call_result_149192 = invoke(stypy.reporting.localization.Localization(__file__, 6358, 19), method_149184, *[MaskedArray_call_result_149188, args_149189], **kwargs_149191)
            
            # Assigning a type to the variable 'stypy_return_type' (line 6358)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6358, 12), 'stypy_return_type', method_call_result_149192)

            if more_types_in_union_149183:
                # SSA join for if statement (line 6357)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 6360):
        
        # Assigning a Call to a Name (line 6360):
        
        # Call to getattr(...): (line 6360)
        # Processing the call arguments (line 6360)
        # Getting the type of 'np' (line 6360)
        np_149194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6360, 25), 'np', False)
        # Getting the type of 'method_name' (line 6360)
        method_name_149195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6360, 29), 'method_name', False)
        # Processing the call keyword arguments (line 6360)
        kwargs_149196 = {}
        # Getting the type of 'getattr' (line 6360)
        getattr_149193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6360, 17), 'getattr', False)
        # Calling getattr(args, kwargs) (line 6360)
        getattr_call_result_149197 = invoke(stypy.reporting.localization.Localization(__file__, 6360, 17), getattr_149193, *[np_149194, method_name_149195], **kwargs_149196)
        
        # Assigning a type to the variable 'method' (line 6360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6360, 8), 'method', getattr_call_result_149197)
        
        # Call to method(...): (line 6361)
        # Processing the call arguments (line 6361)
        # Getting the type of 'a' (line 6361)
        a_149199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6361, 22), 'a', False)
        # Getting the type of 'args' (line 6361)
        args_149200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6361, 26), 'args', False)
        # Processing the call keyword arguments (line 6361)
        # Getting the type of 'params' (line 6361)
        params_149201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6361, 34), 'params', False)
        kwargs_149202 = {'params_149201': params_149201}
        # Getting the type of 'method' (line 6361)
        method_149198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6361, 15), 'method', False)
        # Calling method(args, kwargs) (line 6361)
        method_call_result_149203 = invoke(stypy.reporting.localization.Localization(__file__, 6361, 15), method_149198, *[a_149199, args_149200], **kwargs_149202)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6361, 8), 'stypy_return_type', method_call_result_149203)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 6344)
        stypy_return_type_149204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6344, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_149204)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_149204


# Assigning a type to the variable '_frommethod' (line 6318)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6318, 0), '_frommethod', _frommethod)

# Assigning a Call to a Name (line 6364):

# Assigning a Call to a Name (line 6364):

# Call to _frommethod(...): (line 6364)
# Processing the call arguments (line 6364)
str_149206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6364, 18), 'str', 'all')
# Processing the call keyword arguments (line 6364)
kwargs_149207 = {}
# Getting the type of '_frommethod' (line 6364)
_frommethod_149205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6364, 6), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6364)
_frommethod_call_result_149208 = invoke(stypy.reporting.localization.Localization(__file__, 6364, 6), _frommethod_149205, *[str_149206], **kwargs_149207)

# Assigning a type to the variable 'all' (line 6364)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6364, 0), 'all', _frommethod_call_result_149208)

# Multiple assignment of 2 elements.

# Assigning a Call to a Name (line 6365):

# Call to _frommethod(...): (line 6365)
# Processing the call arguments (line 6365)
str_149210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6365, 31), 'str', 'anom')
# Processing the call keyword arguments (line 6365)
kwargs_149211 = {}
# Getting the type of '_frommethod' (line 6365)
_frommethod_149209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6365, 19), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6365)
_frommethod_call_result_149212 = invoke(stypy.reporting.localization.Localization(__file__, 6365, 19), _frommethod_149209, *[str_149210], **kwargs_149211)

# Assigning a type to the variable 'anom' (line 6365)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6365, 12), 'anom', _frommethod_call_result_149212)

# Assigning a Name to a Name (line 6365):
# Getting the type of 'anom' (line 6365)
anom_149213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6365, 12), 'anom')
# Assigning a type to the variable 'anomalies' (line 6365)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6365, 0), 'anomalies', anom_149213)

# Assigning a Call to a Name (line 6366):

# Assigning a Call to a Name (line 6366):

# Call to _frommethod(...): (line 6366)
# Processing the call arguments (line 6366)
str_149215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6366, 18), 'str', 'any')
# Processing the call keyword arguments (line 6366)
kwargs_149216 = {}
# Getting the type of '_frommethod' (line 6366)
_frommethod_149214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6366, 6), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6366)
_frommethod_call_result_149217 = invoke(stypy.reporting.localization.Localization(__file__, 6366, 6), _frommethod_149214, *[str_149215], **kwargs_149216)

# Assigning a type to the variable 'any' (line 6366)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6366, 0), 'any', _frommethod_call_result_149217)

# Assigning a Call to a Name (line 6367):

# Assigning a Call to a Name (line 6367):

# Call to _frommethod(...): (line 6367)
# Processing the call arguments (line 6367)
str_149219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6367, 23), 'str', 'compress')
# Processing the call keyword arguments (line 6367)
# Getting the type of 'True' (line 6367)
True_149220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6367, 44), 'True', False)
keyword_149221 = True_149220
kwargs_149222 = {'reversed': keyword_149221}
# Getting the type of '_frommethod' (line 6367)
_frommethod_149218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6367, 11), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6367)
_frommethod_call_result_149223 = invoke(stypy.reporting.localization.Localization(__file__, 6367, 11), _frommethod_149218, *[str_149219], **kwargs_149222)

# Assigning a type to the variable 'compress' (line 6367)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6367, 0), 'compress', _frommethod_call_result_149223)

# Assigning a Call to a Name (line 6368):

# Assigning a Call to a Name (line 6368):

# Call to _frommethod(...): (line 6368)
# Processing the call arguments (line 6368)
str_149225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6368, 22), 'str', 'cumprod')
# Processing the call keyword arguments (line 6368)
kwargs_149226 = {}
# Getting the type of '_frommethod' (line 6368)
_frommethod_149224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6368, 10), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6368)
_frommethod_call_result_149227 = invoke(stypy.reporting.localization.Localization(__file__, 6368, 10), _frommethod_149224, *[str_149225], **kwargs_149226)

# Assigning a type to the variable 'cumprod' (line 6368)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6368, 0), 'cumprod', _frommethod_call_result_149227)

# Assigning a Call to a Name (line 6369):

# Assigning a Call to a Name (line 6369):

# Call to _frommethod(...): (line 6369)
# Processing the call arguments (line 6369)
str_149229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6369, 21), 'str', 'cumsum')
# Processing the call keyword arguments (line 6369)
kwargs_149230 = {}
# Getting the type of '_frommethod' (line 6369)
_frommethod_149228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6369, 9), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6369)
_frommethod_call_result_149231 = invoke(stypy.reporting.localization.Localization(__file__, 6369, 9), _frommethod_149228, *[str_149229], **kwargs_149230)

# Assigning a type to the variable 'cumsum' (line 6369)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6369, 0), 'cumsum', _frommethod_call_result_149231)

# Assigning a Call to a Name (line 6370):

# Assigning a Call to a Name (line 6370):

# Call to _frommethod(...): (line 6370)
# Processing the call arguments (line 6370)
str_149233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6370, 19), 'str', 'copy')
# Processing the call keyword arguments (line 6370)
kwargs_149234 = {}
# Getting the type of '_frommethod' (line 6370)
_frommethod_149232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6370, 7), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6370)
_frommethod_call_result_149235 = invoke(stypy.reporting.localization.Localization(__file__, 6370, 7), _frommethod_149232, *[str_149233], **kwargs_149234)

# Assigning a type to the variable 'copy' (line 6370)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6370, 0), 'copy', _frommethod_call_result_149235)

# Assigning a Call to a Name (line 6371):

# Assigning a Call to a Name (line 6371):

# Call to _frommethod(...): (line 6371)
# Processing the call arguments (line 6371)
str_149237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6371, 23), 'str', 'diagonal')
# Processing the call keyword arguments (line 6371)
kwargs_149238 = {}
# Getting the type of '_frommethod' (line 6371)
_frommethod_149236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6371, 11), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6371)
_frommethod_call_result_149239 = invoke(stypy.reporting.localization.Localization(__file__, 6371, 11), _frommethod_149236, *[str_149237], **kwargs_149238)

# Assigning a type to the variable 'diagonal' (line 6371)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6371, 0), 'diagonal', _frommethod_call_result_149239)

# Assigning a Call to a Name (line 6372):

# Assigning a Call to a Name (line 6372):

# Call to _frommethod(...): (line 6372)
# Processing the call arguments (line 6372)
str_149241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6372, 26), 'str', 'harden_mask')
# Processing the call keyword arguments (line 6372)
kwargs_149242 = {}
# Getting the type of '_frommethod' (line 6372)
_frommethod_149240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6372, 14), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6372)
_frommethod_call_result_149243 = invoke(stypy.reporting.localization.Localization(__file__, 6372, 14), _frommethod_149240, *[str_149241], **kwargs_149242)

# Assigning a type to the variable 'harden_mask' (line 6372)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6372, 0), 'harden_mask', _frommethod_call_result_149243)

# Assigning a Call to a Name (line 6373):

# Assigning a Call to a Name (line 6373):

# Call to _frommethod(...): (line 6373)
# Processing the call arguments (line 6373)
str_149245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6373, 18), 'str', 'ids')
# Processing the call keyword arguments (line 6373)
kwargs_149246 = {}
# Getting the type of '_frommethod' (line 6373)
_frommethod_149244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6373, 6), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6373)
_frommethod_call_result_149247 = invoke(stypy.reporting.localization.Localization(__file__, 6373, 6), _frommethod_149244, *[str_149245], **kwargs_149246)

# Assigning a type to the variable 'ids' (line 6373)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6373, 0), 'ids', _frommethod_call_result_149247)

# Assigning a Call to a Name (line 6374):

# Assigning a Call to a Name (line 6374):

# Call to _maximum_operation(...): (line 6374)
# Processing the call keyword arguments (line 6374)
kwargs_149249 = {}
# Getting the type of '_maximum_operation' (line 6374)
_maximum_operation_149248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6374, 10), '_maximum_operation', False)
# Calling _maximum_operation(args, kwargs) (line 6374)
_maximum_operation_call_result_149250 = invoke(stypy.reporting.localization.Localization(__file__, 6374, 10), _maximum_operation_149248, *[], **kwargs_149249)

# Assigning a type to the variable 'maximum' (line 6374)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6374, 0), 'maximum', _maximum_operation_call_result_149250)

# Assigning a Call to a Name (line 6375):

# Assigning a Call to a Name (line 6375):

# Call to _frommethod(...): (line 6375)
# Processing the call arguments (line 6375)
str_149252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6375, 19), 'str', 'mean')
# Processing the call keyword arguments (line 6375)
kwargs_149253 = {}
# Getting the type of '_frommethod' (line 6375)
_frommethod_149251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6375, 7), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6375)
_frommethod_call_result_149254 = invoke(stypy.reporting.localization.Localization(__file__, 6375, 7), _frommethod_149251, *[str_149252], **kwargs_149253)

# Assigning a type to the variable 'mean' (line 6375)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6375, 0), 'mean', _frommethod_call_result_149254)

# Assigning a Call to a Name (line 6376):

# Assigning a Call to a Name (line 6376):

# Call to _minimum_operation(...): (line 6376)
# Processing the call keyword arguments (line 6376)
kwargs_149256 = {}
# Getting the type of '_minimum_operation' (line 6376)
_minimum_operation_149255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6376, 10), '_minimum_operation', False)
# Calling _minimum_operation(args, kwargs) (line 6376)
_minimum_operation_call_result_149257 = invoke(stypy.reporting.localization.Localization(__file__, 6376, 10), _minimum_operation_149255, *[], **kwargs_149256)

# Assigning a type to the variable 'minimum' (line 6376)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6376, 0), 'minimum', _minimum_operation_call_result_149257)

# Assigning a Call to a Name (line 6377):

# Assigning a Call to a Name (line 6377):

# Call to _frommethod(...): (line 6377)
# Processing the call arguments (line 6377)
str_149259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6377, 22), 'str', 'nonzero')
# Processing the call keyword arguments (line 6377)
kwargs_149260 = {}
# Getting the type of '_frommethod' (line 6377)
_frommethod_149258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6377, 10), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6377)
_frommethod_call_result_149261 = invoke(stypy.reporting.localization.Localization(__file__, 6377, 10), _frommethod_149258, *[str_149259], **kwargs_149260)

# Assigning a type to the variable 'nonzero' (line 6377)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6377, 0), 'nonzero', _frommethod_call_result_149261)

# Assigning a Call to a Name (line 6378):

# Assigning a Call to a Name (line 6378):

# Call to _frommethod(...): (line 6378)
# Processing the call arguments (line 6378)
str_149263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6378, 19), 'str', 'prod')
# Processing the call keyword arguments (line 6378)
kwargs_149264 = {}
# Getting the type of '_frommethod' (line 6378)
_frommethod_149262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6378, 7), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6378)
_frommethod_call_result_149265 = invoke(stypy.reporting.localization.Localization(__file__, 6378, 7), _frommethod_149262, *[str_149263], **kwargs_149264)

# Assigning a type to the variable 'prod' (line 6378)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6378, 0), 'prod', _frommethod_call_result_149265)

# Assigning a Call to a Name (line 6379):

# Assigning a Call to a Name (line 6379):

# Call to _frommethod(...): (line 6379)
# Processing the call arguments (line 6379)
str_149267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6379, 22), 'str', 'prod')
# Processing the call keyword arguments (line 6379)
kwargs_149268 = {}
# Getting the type of '_frommethod' (line 6379)
_frommethod_149266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6379, 10), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6379)
_frommethod_call_result_149269 = invoke(stypy.reporting.localization.Localization(__file__, 6379, 10), _frommethod_149266, *[str_149267], **kwargs_149268)

# Assigning a type to the variable 'product' (line 6379)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6379, 0), 'product', _frommethod_call_result_149269)

# Assigning a Call to a Name (line 6380):

# Assigning a Call to a Name (line 6380):

# Call to _frommethod(...): (line 6380)
# Processing the call arguments (line 6380)
str_149271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6380, 20), 'str', 'ravel')
# Processing the call keyword arguments (line 6380)
kwargs_149272 = {}
# Getting the type of '_frommethod' (line 6380)
_frommethod_149270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6380, 8), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6380)
_frommethod_call_result_149273 = invoke(stypy.reporting.localization.Localization(__file__, 6380, 8), _frommethod_149270, *[str_149271], **kwargs_149272)

# Assigning a type to the variable 'ravel' (line 6380)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6380, 0), 'ravel', _frommethod_call_result_149273)

# Assigning a Call to a Name (line 6381):

# Assigning a Call to a Name (line 6381):

# Call to _frommethod(...): (line 6381)
# Processing the call arguments (line 6381)
str_149275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6381, 21), 'str', 'repeat')
# Processing the call keyword arguments (line 6381)
kwargs_149276 = {}
# Getting the type of '_frommethod' (line 6381)
_frommethod_149274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6381, 9), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6381)
_frommethod_call_result_149277 = invoke(stypy.reporting.localization.Localization(__file__, 6381, 9), _frommethod_149274, *[str_149275], **kwargs_149276)

# Assigning a type to the variable 'repeat' (line 6381)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6381, 0), 'repeat', _frommethod_call_result_149277)

# Assigning a Call to a Name (line 6382):

# Assigning a Call to a Name (line 6382):

# Call to _frommethod(...): (line 6382)
# Processing the call arguments (line 6382)
str_149279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6382, 26), 'str', 'shrink_mask')
# Processing the call keyword arguments (line 6382)
kwargs_149280 = {}
# Getting the type of '_frommethod' (line 6382)
_frommethod_149278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6382, 14), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6382)
_frommethod_call_result_149281 = invoke(stypy.reporting.localization.Localization(__file__, 6382, 14), _frommethod_149278, *[str_149279], **kwargs_149280)

# Assigning a type to the variable 'shrink_mask' (line 6382)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6382, 0), 'shrink_mask', _frommethod_call_result_149281)

# Assigning a Call to a Name (line 6383):

# Assigning a Call to a Name (line 6383):

# Call to _frommethod(...): (line 6383)
# Processing the call arguments (line 6383)
str_149283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6383, 26), 'str', 'soften_mask')
# Processing the call keyword arguments (line 6383)
kwargs_149284 = {}
# Getting the type of '_frommethod' (line 6383)
_frommethod_149282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6383, 14), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6383)
_frommethod_call_result_149285 = invoke(stypy.reporting.localization.Localization(__file__, 6383, 14), _frommethod_149282, *[str_149283], **kwargs_149284)

# Assigning a type to the variable 'soften_mask' (line 6383)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6383, 0), 'soften_mask', _frommethod_call_result_149285)

# Assigning a Call to a Name (line 6384):

# Assigning a Call to a Name (line 6384):

# Call to _frommethod(...): (line 6384)
# Processing the call arguments (line 6384)
str_149287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6384, 18), 'str', 'std')
# Processing the call keyword arguments (line 6384)
kwargs_149288 = {}
# Getting the type of '_frommethod' (line 6384)
_frommethod_149286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6384, 6), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6384)
_frommethod_call_result_149289 = invoke(stypy.reporting.localization.Localization(__file__, 6384, 6), _frommethod_149286, *[str_149287], **kwargs_149288)

# Assigning a type to the variable 'std' (line 6384)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6384, 0), 'std', _frommethod_call_result_149289)

# Assigning a Call to a Name (line 6385):

# Assigning a Call to a Name (line 6385):

# Call to _frommethod(...): (line 6385)
# Processing the call arguments (line 6385)
str_149291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6385, 18), 'str', 'sum')
# Processing the call keyword arguments (line 6385)
kwargs_149292 = {}
# Getting the type of '_frommethod' (line 6385)
_frommethod_149290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6385, 6), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6385)
_frommethod_call_result_149293 = invoke(stypy.reporting.localization.Localization(__file__, 6385, 6), _frommethod_149290, *[str_149291], **kwargs_149292)

# Assigning a type to the variable 'sum' (line 6385)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6385, 0), 'sum', _frommethod_call_result_149293)

# Assigning a Call to a Name (line 6386):

# Assigning a Call to a Name (line 6386):

# Call to _frommethod(...): (line 6386)
# Processing the call arguments (line 6386)
str_149295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6386, 23), 'str', 'swapaxes')
# Processing the call keyword arguments (line 6386)
kwargs_149296 = {}
# Getting the type of '_frommethod' (line 6386)
_frommethod_149294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6386, 11), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6386)
_frommethod_call_result_149297 = invoke(stypy.reporting.localization.Localization(__file__, 6386, 11), _frommethod_149294, *[str_149295], **kwargs_149296)

# Assigning a type to the variable 'swapaxes' (line 6386)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6386, 0), 'swapaxes', _frommethod_call_result_149297)

# Assigning a Call to a Name (line 6388):

# Assigning a Call to a Name (line 6388):

# Call to _frommethod(...): (line 6388)
# Processing the call arguments (line 6388)
str_149299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6388, 20), 'str', 'trace')
# Processing the call keyword arguments (line 6388)
kwargs_149300 = {}
# Getting the type of '_frommethod' (line 6388)
_frommethod_149298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6388, 8), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6388)
_frommethod_call_result_149301 = invoke(stypy.reporting.localization.Localization(__file__, 6388, 8), _frommethod_149298, *[str_149299], **kwargs_149300)

# Assigning a type to the variable 'trace' (line 6388)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6388, 0), 'trace', _frommethod_call_result_149301)

# Assigning a Call to a Name (line 6389):

# Assigning a Call to a Name (line 6389):

# Call to _frommethod(...): (line 6389)
# Processing the call arguments (line 6389)
str_149303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6389, 18), 'str', 'var')
# Processing the call keyword arguments (line 6389)
kwargs_149304 = {}
# Getting the type of '_frommethod' (line 6389)
_frommethod_149302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6389, 6), '_frommethod', False)
# Calling _frommethod(args, kwargs) (line 6389)
_frommethod_call_result_149305 = invoke(stypy.reporting.localization.Localization(__file__, 6389, 6), _frommethod_149302, *[str_149303], **kwargs_149304)

# Assigning a type to the variable 'var' (line 6389)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6389, 0), 'var', _frommethod_call_result_149305)

@norecursion
def take(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6392)
    None_149306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6392, 26), 'None')
    # Getting the type of 'None' (line 6392)
    None_149307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6392, 36), 'None')
    str_149308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6392, 47), 'str', 'raise')
    defaults = [None_149306, None_149307, str_149308]
    # Create a new context for function 'take'
    module_type_store = module_type_store.open_function_context('take', 6392, 0, False)
    
    # Passed parameters checking function
    take.stypy_localization = localization
    take.stypy_type_of_self = None
    take.stypy_type_store = module_type_store
    take.stypy_function_name = 'take'
    take.stypy_param_names_list = ['a', 'indices', 'axis', 'out', 'mode']
    take.stypy_varargs_param_name = None
    take.stypy_kwargs_param_name = None
    take.stypy_call_defaults = defaults
    take.stypy_call_varargs = varargs
    take.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'take', ['a', 'indices', 'axis', 'out', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'take', localization, ['a', 'indices', 'axis', 'out', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'take(...)' code ##################

    str_149309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6394, (-1)), 'str', '\n    ')
    
    # Assigning a Call to a Name (line 6395):
    
    # Assigning a Call to a Name (line 6395):
    
    # Call to masked_array(...): (line 6395)
    # Processing the call arguments (line 6395)
    # Getting the type of 'a' (line 6395)
    a_149311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6395, 21), 'a', False)
    # Processing the call keyword arguments (line 6395)
    kwargs_149312 = {}
    # Getting the type of 'masked_array' (line 6395)
    masked_array_149310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6395, 8), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 6395)
    masked_array_call_result_149313 = invoke(stypy.reporting.localization.Localization(__file__, 6395, 8), masked_array_149310, *[a_149311], **kwargs_149312)
    
    # Assigning a type to the variable 'a' (line 6395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6395, 4), 'a', masked_array_call_result_149313)
    
    # Call to take(...): (line 6396)
    # Processing the call arguments (line 6396)
    # Getting the type of 'indices' (line 6396)
    indices_149316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6396, 18), 'indices', False)
    # Processing the call keyword arguments (line 6396)
    # Getting the type of 'axis' (line 6396)
    axis_149317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6396, 32), 'axis', False)
    keyword_149318 = axis_149317
    # Getting the type of 'out' (line 6396)
    out_149319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6396, 42), 'out', False)
    keyword_149320 = out_149319
    # Getting the type of 'mode' (line 6396)
    mode_149321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6396, 52), 'mode', False)
    keyword_149322 = mode_149321
    kwargs_149323 = {'out': keyword_149320, 'mode': keyword_149322, 'axis': keyword_149318}
    # Getting the type of 'a' (line 6396)
    a_149314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6396, 11), 'a', False)
    # Obtaining the member 'take' of a type (line 6396)
    take_149315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6396, 11), a_149314, 'take')
    # Calling take(args, kwargs) (line 6396)
    take_call_result_149324 = invoke(stypy.reporting.localization.Localization(__file__, 6396, 11), take_149315, *[indices_149316], **kwargs_149323)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6396, 4), 'stypy_return_type', take_call_result_149324)
    
    # ################# End of 'take(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'take' in the type store
    # Getting the type of 'stypy_return_type' (line 6392)
    stypy_return_type_149325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6392, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149325)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'take'
    return stypy_return_type_149325

# Assigning a type to the variable 'take' (line 6392)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6392, 0), 'take', take)

@norecursion
def power(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6399)
    None_149326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6399, 22), 'None')
    defaults = [None_149326]
    # Create a new context for function 'power'
    module_type_store = module_type_store.open_function_context('power', 6399, 0, False)
    
    # Passed parameters checking function
    power.stypy_localization = localization
    power.stypy_type_of_self = None
    power.stypy_type_store = module_type_store
    power.stypy_function_name = 'power'
    power.stypy_param_names_list = ['a', 'b', 'third']
    power.stypy_varargs_param_name = None
    power.stypy_kwargs_param_name = None
    power.stypy_call_defaults = defaults
    power.stypy_call_varargs = varargs
    power.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'power', ['a', 'b', 'third'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'power', localization, ['a', 'b', 'third'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'power(...)' code ##################

    str_149327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6415, (-1)), 'str', '\n    Returns element-wise base array raised to power from second array.\n\n    This is the masked array version of `numpy.power`. For details see\n    `numpy.power`.\n\n    See Also\n    --------\n    numpy.power\n\n    Notes\n    -----\n    The *out* argument to `numpy.power` is not supported, `third` has to be\n    None.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 6416)
    # Getting the type of 'third' (line 6416)
    third_149328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6416, 4), 'third')
    # Getting the type of 'None' (line 6416)
    None_149329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6416, 20), 'None')
    
    (may_be_149330, more_types_in_union_149331) = may_not_be_none(third_149328, None_149329)

    if may_be_149330:

        if more_types_in_union_149331:
            # Runtime conditional SSA (line 6416)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to MaskError(...): (line 6417)
        # Processing the call arguments (line 6417)
        str_149333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6417, 24), 'str', '3-argument power not supported.')
        # Processing the call keyword arguments (line 6417)
        kwargs_149334 = {}
        # Getting the type of 'MaskError' (line 6417)
        MaskError_149332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6417, 14), 'MaskError', False)
        # Calling MaskError(args, kwargs) (line 6417)
        MaskError_call_result_149335 = invoke(stypy.reporting.localization.Localization(__file__, 6417, 14), MaskError_149332, *[str_149333], **kwargs_149334)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 6417, 8), MaskError_call_result_149335, 'raise parameter', BaseException)

        if more_types_in_union_149331:
            # SSA join for if statement (line 6416)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 6419):
    
    # Assigning a Call to a Name (line 6419):
    
    # Call to getmask(...): (line 6419)
    # Processing the call arguments (line 6419)
    # Getting the type of 'a' (line 6419)
    a_149337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6419, 17), 'a', False)
    # Processing the call keyword arguments (line 6419)
    kwargs_149338 = {}
    # Getting the type of 'getmask' (line 6419)
    getmask_149336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6419, 9), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6419)
    getmask_call_result_149339 = invoke(stypy.reporting.localization.Localization(__file__, 6419, 9), getmask_149336, *[a_149337], **kwargs_149338)
    
    # Assigning a type to the variable 'ma' (line 6419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6419, 4), 'ma', getmask_call_result_149339)
    
    # Assigning a Call to a Name (line 6420):
    
    # Assigning a Call to a Name (line 6420):
    
    # Call to getmask(...): (line 6420)
    # Processing the call arguments (line 6420)
    # Getting the type of 'b' (line 6420)
    b_149341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6420, 17), 'b', False)
    # Processing the call keyword arguments (line 6420)
    kwargs_149342 = {}
    # Getting the type of 'getmask' (line 6420)
    getmask_149340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6420, 9), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6420)
    getmask_call_result_149343 = invoke(stypy.reporting.localization.Localization(__file__, 6420, 9), getmask_149340, *[b_149341], **kwargs_149342)
    
    # Assigning a type to the variable 'mb' (line 6420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6420, 4), 'mb', getmask_call_result_149343)
    
    # Assigning a Call to a Name (line 6421):
    
    # Assigning a Call to a Name (line 6421):
    
    # Call to mask_or(...): (line 6421)
    # Processing the call arguments (line 6421)
    # Getting the type of 'ma' (line 6421)
    ma_149345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6421, 16), 'ma', False)
    # Getting the type of 'mb' (line 6421)
    mb_149346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6421, 20), 'mb', False)
    # Processing the call keyword arguments (line 6421)
    kwargs_149347 = {}
    # Getting the type of 'mask_or' (line 6421)
    mask_or_149344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6421, 8), 'mask_or', False)
    # Calling mask_or(args, kwargs) (line 6421)
    mask_or_call_result_149348 = invoke(stypy.reporting.localization.Localization(__file__, 6421, 8), mask_or_149344, *[ma_149345, mb_149346], **kwargs_149347)
    
    # Assigning a type to the variable 'm' (line 6421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6421, 4), 'm', mask_or_call_result_149348)
    
    # Assigning a Call to a Name (line 6423):
    
    # Assigning a Call to a Name (line 6423):
    
    # Call to getdata(...): (line 6423)
    # Processing the call arguments (line 6423)
    # Getting the type of 'a' (line 6423)
    a_149350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6423, 17), 'a', False)
    # Processing the call keyword arguments (line 6423)
    kwargs_149351 = {}
    # Getting the type of 'getdata' (line 6423)
    getdata_149349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6423, 9), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6423)
    getdata_call_result_149352 = invoke(stypy.reporting.localization.Localization(__file__, 6423, 9), getdata_149349, *[a_149350], **kwargs_149351)
    
    # Assigning a type to the variable 'fa' (line 6423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6423, 4), 'fa', getdata_call_result_149352)
    
    # Assigning a Call to a Name (line 6424):
    
    # Assigning a Call to a Name (line 6424):
    
    # Call to getdata(...): (line 6424)
    # Processing the call arguments (line 6424)
    # Getting the type of 'b' (line 6424)
    b_149354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6424, 17), 'b', False)
    # Processing the call keyword arguments (line 6424)
    kwargs_149355 = {}
    # Getting the type of 'getdata' (line 6424)
    getdata_149353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6424, 9), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6424)
    getdata_call_result_149356 = invoke(stypy.reporting.localization.Localization(__file__, 6424, 9), getdata_149353, *[b_149354], **kwargs_149355)
    
    # Assigning a type to the variable 'fb' (line 6424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6424, 4), 'fb', getdata_call_result_149356)
    
    
    # Call to isinstance(...): (line 6426)
    # Processing the call arguments (line 6426)
    # Getting the type of 'a' (line 6426)
    a_149358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6426, 18), 'a', False)
    # Getting the type of 'MaskedArray' (line 6426)
    MaskedArray_149359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6426, 21), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6426)
    kwargs_149360 = {}
    # Getting the type of 'isinstance' (line 6426)
    isinstance_149357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6426, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 6426)
    isinstance_call_result_149361 = invoke(stypy.reporting.localization.Localization(__file__, 6426, 7), isinstance_149357, *[a_149358, MaskedArray_149359], **kwargs_149360)
    
    # Testing the type of an if condition (line 6426)
    if_condition_149362 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6426, 4), isinstance_call_result_149361)
    # Assigning a type to the variable 'if_condition_149362' (line 6426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6426, 4), 'if_condition_149362', if_condition_149362)
    # SSA begins for if statement (line 6426)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 6427):
    
    # Assigning a Call to a Name (line 6427):
    
    # Call to type(...): (line 6427)
    # Processing the call arguments (line 6427)
    # Getting the type of 'a' (line 6427)
    a_149364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6427, 24), 'a', False)
    # Processing the call keyword arguments (line 6427)
    kwargs_149365 = {}
    # Getting the type of 'type' (line 6427)
    type_149363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6427, 19), 'type', False)
    # Calling type(args, kwargs) (line 6427)
    type_call_result_149366 = invoke(stypy.reporting.localization.Localization(__file__, 6427, 19), type_149363, *[a_149364], **kwargs_149365)
    
    # Assigning a type to the variable 'basetype' (line 6427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6427, 8), 'basetype', type_call_result_149366)
    # SSA branch for the else part of an if statement (line 6426)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 6429):
    
    # Assigning a Name to a Name (line 6429):
    # Getting the type of 'MaskedArray' (line 6429)
    MaskedArray_149367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6429, 19), 'MaskedArray')
    # Assigning a type to the variable 'basetype' (line 6429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6429, 8), 'basetype', MaskedArray_149367)
    # SSA join for if statement (line 6426)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to errstate(...): (line 6431)
    # Processing the call keyword arguments (line 6431)
    str_149370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6431, 28), 'str', 'ignore')
    keyword_149371 = str_149370
    str_149372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6431, 46), 'str', 'ignore')
    keyword_149373 = str_149372
    kwargs_149374 = {'divide': keyword_149371, 'invalid': keyword_149373}
    # Getting the type of 'np' (line 6431)
    np_149368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6431, 9), 'np', False)
    # Obtaining the member 'errstate' of a type (line 6431)
    errstate_149369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6431, 9), np_149368, 'errstate')
    # Calling errstate(args, kwargs) (line 6431)
    errstate_call_result_149375 = invoke(stypy.reporting.localization.Localization(__file__, 6431, 9), errstate_149369, *[], **kwargs_149374)
    
    with_149376 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 6431, 9), errstate_call_result_149375, 'with parameter', '__enter__', '__exit__')

    if with_149376:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 6431)
        enter___149377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6431, 9), errstate_call_result_149375, '__enter__')
        with_enter_149378 = invoke(stypy.reporting.localization.Localization(__file__, 6431, 9), enter___149377)
        
        # Assigning a Call to a Name (line 6432):
        
        # Assigning a Call to a Name (line 6432):
        
        # Call to view(...): (line 6432)
        # Processing the call arguments (line 6432)
        # Getting the type of 'basetype' (line 6432)
        basetype_149392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6432, 59), 'basetype', False)
        # Processing the call keyword arguments (line 6432)
        kwargs_149393 = {}
        
        # Call to where(...): (line 6432)
        # Processing the call arguments (line 6432)
        # Getting the type of 'm' (line 6432)
        m_149381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6432, 26), 'm', False)
        # Getting the type of 'fa' (line 6432)
        fa_149382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6432, 29), 'fa', False)
        
        # Call to power(...): (line 6432)
        # Processing the call arguments (line 6432)
        # Getting the type of 'fa' (line 6432)
        fa_149385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6432, 45), 'fa', False)
        # Getting the type of 'fb' (line 6432)
        fb_149386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6432, 49), 'fb', False)
        # Processing the call keyword arguments (line 6432)
        kwargs_149387 = {}
        # Getting the type of 'umath' (line 6432)
        umath_149383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6432, 33), 'umath', False)
        # Obtaining the member 'power' of a type (line 6432)
        power_149384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6432, 33), umath_149383, 'power')
        # Calling power(args, kwargs) (line 6432)
        power_call_result_149388 = invoke(stypy.reporting.localization.Localization(__file__, 6432, 33), power_149384, *[fa_149385, fb_149386], **kwargs_149387)
        
        # Processing the call keyword arguments (line 6432)
        kwargs_149389 = {}
        # Getting the type of 'np' (line 6432)
        np_149379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6432, 17), 'np', False)
        # Obtaining the member 'where' of a type (line 6432)
        where_149380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6432, 17), np_149379, 'where')
        # Calling where(args, kwargs) (line 6432)
        where_call_result_149390 = invoke(stypy.reporting.localization.Localization(__file__, 6432, 17), where_149380, *[m_149381, fa_149382, power_call_result_149388], **kwargs_149389)
        
        # Obtaining the member 'view' of a type (line 6432)
        view_149391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6432, 17), where_call_result_149390, 'view')
        # Calling view(args, kwargs) (line 6432)
        view_call_result_149394 = invoke(stypy.reporting.localization.Localization(__file__, 6432, 17), view_149391, *[basetype_149392], **kwargs_149393)
        
        # Assigning a type to the variable 'result' (line 6432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6432, 8), 'result', view_call_result_149394)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 6431)
        exit___149395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6431, 9), errstate_call_result_149375, '__exit__')
        with_exit_149396 = invoke(stypy.reporting.localization.Localization(__file__, 6431, 9), exit___149395, None, None, None)

    
    # Call to _update_from(...): (line 6433)
    # Processing the call arguments (line 6433)
    # Getting the type of 'a' (line 6433)
    a_149399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6433, 24), 'a', False)
    # Processing the call keyword arguments (line 6433)
    kwargs_149400 = {}
    # Getting the type of 'result' (line 6433)
    result_149397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6433, 4), 'result', False)
    # Obtaining the member '_update_from' of a type (line 6433)
    _update_from_149398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6433, 4), result_149397, '_update_from')
    # Calling _update_from(args, kwargs) (line 6433)
    _update_from_call_result_149401 = invoke(stypy.reporting.localization.Localization(__file__, 6433, 4), _update_from_149398, *[a_149399], **kwargs_149400)
    
    
    # Assigning a Call to a Name (line 6435):
    
    # Assigning a Call to a Name (line 6435):
    
    # Call to logical_not(...): (line 6435)
    # Processing the call arguments (line 6435)
    
    # Call to isfinite(...): (line 6435)
    # Processing the call arguments (line 6435)
    
    # Call to view(...): (line 6435)
    # Processing the call arguments (line 6435)
    # Getting the type of 'ndarray' (line 6435)
    ndarray_149408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6435, 53), 'ndarray', False)
    # Processing the call keyword arguments (line 6435)
    kwargs_149409 = {}
    # Getting the type of 'result' (line 6435)
    result_149406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6435, 41), 'result', False)
    # Obtaining the member 'view' of a type (line 6435)
    view_149407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6435, 41), result_149406, 'view')
    # Calling view(args, kwargs) (line 6435)
    view_call_result_149410 = invoke(stypy.reporting.localization.Localization(__file__, 6435, 41), view_149407, *[ndarray_149408], **kwargs_149409)
    
    # Processing the call keyword arguments (line 6435)
    kwargs_149411 = {}
    # Getting the type of 'np' (line 6435)
    np_149404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6435, 29), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 6435)
    isfinite_149405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6435, 29), np_149404, 'isfinite')
    # Calling isfinite(args, kwargs) (line 6435)
    isfinite_call_result_149412 = invoke(stypy.reporting.localization.Localization(__file__, 6435, 29), isfinite_149405, *[view_call_result_149410], **kwargs_149411)
    
    # Processing the call keyword arguments (line 6435)
    kwargs_149413 = {}
    # Getting the type of 'np' (line 6435)
    np_149402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6435, 14), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 6435)
    logical_not_149403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6435, 14), np_149402, 'logical_not')
    # Calling logical_not(args, kwargs) (line 6435)
    logical_not_call_result_149414 = invoke(stypy.reporting.localization.Localization(__file__, 6435, 14), logical_not_149403, *[isfinite_call_result_149412], **kwargs_149413)
    
    # Assigning a type to the variable 'invalid' (line 6435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6435, 4), 'invalid', logical_not_call_result_149414)
    
    
    # Getting the type of 'm' (line 6437)
    m_149415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6437, 7), 'm')
    # Getting the type of 'nomask' (line 6437)
    nomask_149416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6437, 16), 'nomask')
    # Applying the binary operator 'isnot' (line 6437)
    result_is_not_149417 = python_operator(stypy.reporting.localization.Localization(__file__, 6437, 7), 'isnot', m_149415, nomask_149416)
    
    # Testing the type of an if condition (line 6437)
    if_condition_149418 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6437, 4), result_is_not_149417)
    # Assigning a type to the variable 'if_condition_149418' (line 6437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6437, 4), 'if_condition_149418', if_condition_149418)
    # SSA begins for if statement (line 6437)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'result' (line 6438)
    result_149419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6438, 16), 'result')
    # Obtaining the member 'ndim' of a type (line 6438)
    ndim_149420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6438, 16), result_149419, 'ndim')
    # Applying the 'not' unary operator (line 6438)
    result_not__149421 = python_operator(stypy.reporting.localization.Localization(__file__, 6438, 11), 'not', ndim_149420)
    
    # Testing the type of an if condition (line 6438)
    if_condition_149422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6438, 8), result_not__149421)
    # Assigning a type to the variable 'if_condition_149422' (line 6438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6438, 8), 'if_condition_149422', if_condition_149422)
    # SSA begins for if statement (line 6438)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'masked' (line 6439)
    masked_149423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6439, 19), 'masked')
    # Assigning a type to the variable 'stypy_return_type' (line 6439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6439, 12), 'stypy_return_type', masked_149423)
    # SSA join for if statement (line 6438)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Attribute (line 6440):
    
    # Assigning a Call to a Attribute (line 6440):
    
    # Call to logical_or(...): (line 6440)
    # Processing the call arguments (line 6440)
    # Getting the type of 'm' (line 6440)
    m_149426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6440, 37), 'm', False)
    # Getting the type of 'invalid' (line 6440)
    invalid_149427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6440, 40), 'invalid', False)
    # Processing the call keyword arguments (line 6440)
    kwargs_149428 = {}
    # Getting the type of 'np' (line 6440)
    np_149424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6440, 23), 'np', False)
    # Obtaining the member 'logical_or' of a type (line 6440)
    logical_or_149425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6440, 23), np_149424, 'logical_or')
    # Calling logical_or(args, kwargs) (line 6440)
    logical_or_call_result_149429 = invoke(stypy.reporting.localization.Localization(__file__, 6440, 23), logical_or_149425, *[m_149426, invalid_149427], **kwargs_149428)
    
    # Getting the type of 'result' (line 6440)
    result_149430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6440, 8), 'result')
    # Setting the type of the member '_mask' of a type (line 6440)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6440, 8), result_149430, '_mask', logical_or_call_result_149429)
    # SSA join for if statement (line 6437)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 6442)
    # Processing the call keyword arguments (line 6442)
    kwargs_149433 = {}
    # Getting the type of 'invalid' (line 6442)
    invalid_149431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6442, 7), 'invalid', False)
    # Obtaining the member 'any' of a type (line 6442)
    any_149432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6442, 7), invalid_149431, 'any')
    # Calling any(args, kwargs) (line 6442)
    any_call_result_149434 = invoke(stypy.reporting.localization.Localization(__file__, 6442, 7), any_149432, *[], **kwargs_149433)
    
    # Testing the type of an if condition (line 6442)
    if_condition_149435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6442, 4), any_call_result_149434)
    # Assigning a type to the variable 'if_condition_149435' (line 6442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6442, 4), 'if_condition_149435', if_condition_149435)
    # SSA begins for if statement (line 6442)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'result' (line 6443)
    result_149436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6443, 15), 'result')
    # Obtaining the member 'ndim' of a type (line 6443)
    ndim_149437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6443, 15), result_149436, 'ndim')
    # Applying the 'not' unary operator (line 6443)
    result_not__149438 = python_operator(stypy.reporting.localization.Localization(__file__, 6443, 11), 'not', ndim_149437)
    
    # Testing the type of an if condition (line 6443)
    if_condition_149439 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6443, 8), result_not__149438)
    # Assigning a type to the variable 'if_condition_149439' (line 6443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6443, 8), 'if_condition_149439', if_condition_149439)
    # SSA begins for if statement (line 6443)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'masked' (line 6444)
    masked_149440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6444, 19), 'masked')
    # Assigning a type to the variable 'stypy_return_type' (line 6444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6444, 12), 'stypy_return_type', masked_149440)
    # SSA branch for the else part of an if statement (line 6443)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'result' (line 6445)
    result_149441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6445, 13), 'result')
    # Obtaining the member '_mask' of a type (line 6445)
    _mask_149442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6445, 13), result_149441, '_mask')
    # Getting the type of 'nomask' (line 6445)
    nomask_149443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6445, 29), 'nomask')
    # Applying the binary operator 'is' (line 6445)
    result_is__149444 = python_operator(stypy.reporting.localization.Localization(__file__, 6445, 13), 'is', _mask_149442, nomask_149443)
    
    # Testing the type of an if condition (line 6445)
    if_condition_149445 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6445, 13), result_is__149444)
    # Assigning a type to the variable 'if_condition_149445' (line 6445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6445, 13), 'if_condition_149445', if_condition_149445)
    # SSA begins for if statement (line 6445)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Attribute (line 6446):
    
    # Assigning a Name to a Attribute (line 6446):
    # Getting the type of 'invalid' (line 6446)
    invalid_149446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6446, 27), 'invalid')
    # Getting the type of 'result' (line 6446)
    result_149447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6446, 12), 'result')
    # Setting the type of the member '_mask' of a type (line 6446)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6446, 12), result_149447, '_mask', invalid_149446)
    # SSA join for if statement (line 6445)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 6443)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Subscript (line 6447):
    
    # Assigning a Attribute to a Subscript (line 6447):
    # Getting the type of 'result' (line 6447)
    result_149448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6447, 32), 'result')
    # Obtaining the member 'fill_value' of a type (line 6447)
    fill_value_149449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6447, 32), result_149448, 'fill_value')
    # Getting the type of 'result' (line 6447)
    result_149450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6447, 8), 'result')
    # Obtaining the member '_data' of a type (line 6447)
    _data_149451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6447, 8), result_149450, '_data')
    # Getting the type of 'invalid' (line 6447)
    invalid_149452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6447, 21), 'invalid')
    # Storing an element on a container (line 6447)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6447, 8), _data_149451, (invalid_149452, fill_value_149449))
    # SSA join for if statement (line 6442)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 6448)
    result_149453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6448, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 6448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6448, 4), 'stypy_return_type', result_149453)
    
    # ################# End of 'power(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'power' in the type store
    # Getting the type of 'stypy_return_type' (line 6399)
    stypy_return_type_149454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6399, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149454)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'power'
    return stypy_return_type_149454

# Assigning a type to the variable 'power' (line 6399)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6399, 0), 'power', power)

@norecursion
def argsort(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6451)
    None_149455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6451, 20), 'None')
    str_149456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6451, 31), 'str', 'quicksort')
    # Getting the type of 'None' (line 6451)
    None_149457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6451, 50), 'None')
    # Getting the type of 'None' (line 6451)
    None_149458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6451, 67), 'None')
    defaults = [None_149455, str_149456, None_149457, None_149458]
    # Create a new context for function 'argsort'
    module_type_store = module_type_store.open_function_context('argsort', 6451, 0, False)
    
    # Passed parameters checking function
    argsort.stypy_localization = localization
    argsort.stypy_type_of_self = None
    argsort.stypy_type_store = module_type_store
    argsort.stypy_function_name = 'argsort'
    argsort.stypy_param_names_list = ['a', 'axis', 'kind', 'order', 'fill_value']
    argsort.stypy_varargs_param_name = None
    argsort.stypy_kwargs_param_name = None
    argsort.stypy_call_defaults = defaults
    argsort.stypy_call_varargs = varargs
    argsort.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'argsort', ['a', 'axis', 'kind', 'order', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'argsort', localization, ['a', 'axis', 'kind', 'order', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'argsort(...)' code ##################

    str_149459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6452, 4), 'str', 'Function version of the eponymous method.')
    
    # Type idiom detected: calculating its left and rigth part (line 6453)
    # Getting the type of 'fill_value' (line 6453)
    fill_value_149460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6453, 7), 'fill_value')
    # Getting the type of 'None' (line 6453)
    None_149461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6453, 21), 'None')
    
    (may_be_149462, more_types_in_union_149463) = may_be_none(fill_value_149460, None_149461)

    if may_be_149462:

        if more_types_in_union_149463:
            # Runtime conditional SSA (line 6453)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 6454):
        
        # Assigning a Call to a Name (line 6454):
        
        # Call to default_fill_value(...): (line 6454)
        # Processing the call arguments (line 6454)
        # Getting the type of 'a' (line 6454)
        a_149465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6454, 40), 'a', False)
        # Processing the call keyword arguments (line 6454)
        kwargs_149466 = {}
        # Getting the type of 'default_fill_value' (line 6454)
        default_fill_value_149464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6454, 21), 'default_fill_value', False)
        # Calling default_fill_value(args, kwargs) (line 6454)
        default_fill_value_call_result_149467 = invoke(stypy.reporting.localization.Localization(__file__, 6454, 21), default_fill_value_149464, *[a_149465], **kwargs_149466)
        
        # Assigning a type to the variable 'fill_value' (line 6454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6454, 8), 'fill_value', default_fill_value_call_result_149467)

        if more_types_in_union_149463:
            # SSA join for if statement (line 6453)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 6455):
    
    # Assigning a Call to a Name (line 6455):
    
    # Call to filled(...): (line 6455)
    # Processing the call arguments (line 6455)
    # Getting the type of 'a' (line 6455)
    a_149469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6455, 15), 'a', False)
    # Getting the type of 'fill_value' (line 6455)
    fill_value_149470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6455, 18), 'fill_value', False)
    # Processing the call keyword arguments (line 6455)
    kwargs_149471 = {}
    # Getting the type of 'filled' (line 6455)
    filled_149468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6455, 8), 'filled', False)
    # Calling filled(args, kwargs) (line 6455)
    filled_call_result_149472 = invoke(stypy.reporting.localization.Localization(__file__, 6455, 8), filled_149468, *[a_149469, fill_value_149470], **kwargs_149471)
    
    # Assigning a type to the variable 'd' (line 6455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6455, 4), 'd', filled_call_result_149472)
    
    # Type idiom detected: calculating its left and rigth part (line 6456)
    # Getting the type of 'axis' (line 6456)
    axis_149473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6456, 7), 'axis')
    # Getting the type of 'None' (line 6456)
    None_149474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6456, 15), 'None')
    
    (may_be_149475, more_types_in_union_149476) = may_be_none(axis_149473, None_149474)

    if may_be_149475:

        if more_types_in_union_149476:
            # Runtime conditional SSA (line 6456)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to argsort(...): (line 6457)
        # Processing the call keyword arguments (line 6457)
        # Getting the type of 'kind' (line 6457)
        kind_149479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6457, 30), 'kind', False)
        keyword_149480 = kind_149479
        # Getting the type of 'order' (line 6457)
        order_149481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6457, 42), 'order', False)
        keyword_149482 = order_149481
        kwargs_149483 = {'kind': keyword_149480, 'order': keyword_149482}
        # Getting the type of 'd' (line 6457)
        d_149477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6457, 15), 'd', False)
        # Obtaining the member 'argsort' of a type (line 6457)
        argsort_149478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6457, 15), d_149477, 'argsort')
        # Calling argsort(args, kwargs) (line 6457)
        argsort_call_result_149484 = invoke(stypy.reporting.localization.Localization(__file__, 6457, 15), argsort_149478, *[], **kwargs_149483)
        
        # Assigning a type to the variable 'stypy_return_type' (line 6457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6457, 8), 'stypy_return_type', argsort_call_result_149484)

        if more_types_in_union_149476:
            # SSA join for if statement (line 6456)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to argsort(...): (line 6458)
    # Processing the call arguments (line 6458)
    # Getting the type of 'axis' (line 6458)
    axis_149487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6458, 21), 'axis', False)
    # Processing the call keyword arguments (line 6458)
    # Getting the type of 'kind' (line 6458)
    kind_149488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6458, 32), 'kind', False)
    keyword_149489 = kind_149488
    # Getting the type of 'order' (line 6458)
    order_149490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6458, 44), 'order', False)
    keyword_149491 = order_149490
    kwargs_149492 = {'kind': keyword_149489, 'order': keyword_149491}
    # Getting the type of 'd' (line 6458)
    d_149485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6458, 11), 'd', False)
    # Obtaining the member 'argsort' of a type (line 6458)
    argsort_149486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6458, 11), d_149485, 'argsort')
    # Calling argsort(args, kwargs) (line 6458)
    argsort_call_result_149493 = invoke(stypy.reporting.localization.Localization(__file__, 6458, 11), argsort_149486, *[axis_149487], **kwargs_149492)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6458, 4), 'stypy_return_type', argsort_call_result_149493)
    
    # ################# End of 'argsort(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'argsort' in the type store
    # Getting the type of 'stypy_return_type' (line 6451)
    stypy_return_type_149494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6451, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149494)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'argsort'
    return stypy_return_type_149494

# Assigning a type to the variable 'argsort' (line 6451)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6451, 0), 'argsort', argsort)

# Assigning a Attribute to a Attribute (line 6459):

# Assigning a Attribute to a Attribute (line 6459):
# Getting the type of 'MaskedArray' (line 6459)
MaskedArray_149495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6459, 18), 'MaskedArray')
# Obtaining the member 'argsort' of a type (line 6459)
argsort_149496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6459, 18), MaskedArray_149495, 'argsort')
# Obtaining the member '__doc__' of a type (line 6459)
doc___149497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6459, 18), argsort_149496, '__doc__')
# Getting the type of 'argsort' (line 6459)
argsort_149498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6459, 0), 'argsort')
# Setting the type of the member '__doc__' of a type (line 6459)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6459, 0), argsort_149498, '__doc__', doc___149497)

@norecursion
def argmin(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6462)
    None_149499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6462, 19), 'None')
    # Getting the type of 'None' (line 6462)
    None_149500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6462, 36), 'None')
    defaults = [None_149499, None_149500]
    # Create a new context for function 'argmin'
    module_type_store = module_type_store.open_function_context('argmin', 6462, 0, False)
    
    # Passed parameters checking function
    argmin.stypy_localization = localization
    argmin.stypy_type_of_self = None
    argmin.stypy_type_store = module_type_store
    argmin.stypy_function_name = 'argmin'
    argmin.stypy_param_names_list = ['a', 'axis', 'fill_value']
    argmin.stypy_varargs_param_name = None
    argmin.stypy_kwargs_param_name = None
    argmin.stypy_call_defaults = defaults
    argmin.stypy_call_varargs = varargs
    argmin.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'argmin', ['a', 'axis', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'argmin', localization, ['a', 'axis', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'argmin(...)' code ##################

    str_149501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6463, 4), 'str', 'Function version of the eponymous method.')
    
    # Type idiom detected: calculating its left and rigth part (line 6464)
    # Getting the type of 'fill_value' (line 6464)
    fill_value_149502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6464, 7), 'fill_value')
    # Getting the type of 'None' (line 6464)
    None_149503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6464, 21), 'None')
    
    (may_be_149504, more_types_in_union_149505) = may_be_none(fill_value_149502, None_149503)

    if may_be_149504:

        if more_types_in_union_149505:
            # Runtime conditional SSA (line 6464)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 6465):
        
        # Assigning a Call to a Name (line 6465):
        
        # Call to default_fill_value(...): (line 6465)
        # Processing the call arguments (line 6465)
        # Getting the type of 'a' (line 6465)
        a_149507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6465, 40), 'a', False)
        # Processing the call keyword arguments (line 6465)
        kwargs_149508 = {}
        # Getting the type of 'default_fill_value' (line 6465)
        default_fill_value_149506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6465, 21), 'default_fill_value', False)
        # Calling default_fill_value(args, kwargs) (line 6465)
        default_fill_value_call_result_149509 = invoke(stypy.reporting.localization.Localization(__file__, 6465, 21), default_fill_value_149506, *[a_149507], **kwargs_149508)
        
        # Assigning a type to the variable 'fill_value' (line 6465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6465, 8), 'fill_value', default_fill_value_call_result_149509)

        if more_types_in_union_149505:
            # SSA join for if statement (line 6464)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 6466):
    
    # Assigning a Call to a Name (line 6466):
    
    # Call to filled(...): (line 6466)
    # Processing the call arguments (line 6466)
    # Getting the type of 'a' (line 6466)
    a_149511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6466, 15), 'a', False)
    # Getting the type of 'fill_value' (line 6466)
    fill_value_149512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6466, 18), 'fill_value', False)
    # Processing the call keyword arguments (line 6466)
    kwargs_149513 = {}
    # Getting the type of 'filled' (line 6466)
    filled_149510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6466, 8), 'filled', False)
    # Calling filled(args, kwargs) (line 6466)
    filled_call_result_149514 = invoke(stypy.reporting.localization.Localization(__file__, 6466, 8), filled_149510, *[a_149511, fill_value_149512], **kwargs_149513)
    
    # Assigning a type to the variable 'd' (line 6466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6466, 4), 'd', filled_call_result_149514)
    
    # Call to argmin(...): (line 6467)
    # Processing the call keyword arguments (line 6467)
    # Getting the type of 'axis' (line 6467)
    axis_149517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6467, 25), 'axis', False)
    keyword_149518 = axis_149517
    kwargs_149519 = {'axis': keyword_149518}
    # Getting the type of 'd' (line 6467)
    d_149515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6467, 11), 'd', False)
    # Obtaining the member 'argmin' of a type (line 6467)
    argmin_149516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6467, 11), d_149515, 'argmin')
    # Calling argmin(args, kwargs) (line 6467)
    argmin_call_result_149520 = invoke(stypy.reporting.localization.Localization(__file__, 6467, 11), argmin_149516, *[], **kwargs_149519)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6467, 4), 'stypy_return_type', argmin_call_result_149520)
    
    # ################# End of 'argmin(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'argmin' in the type store
    # Getting the type of 'stypy_return_type' (line 6462)
    stypy_return_type_149521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6462, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149521)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'argmin'
    return stypy_return_type_149521

# Assigning a type to the variable 'argmin' (line 6462)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6462, 0), 'argmin', argmin)

# Assigning a Attribute to a Attribute (line 6468):

# Assigning a Attribute to a Attribute (line 6468):
# Getting the type of 'MaskedArray' (line 6468)
MaskedArray_149522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6468, 17), 'MaskedArray')
# Obtaining the member 'argmin' of a type (line 6468)
argmin_149523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6468, 17), MaskedArray_149522, 'argmin')
# Obtaining the member '__doc__' of a type (line 6468)
doc___149524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6468, 17), argmin_149523, '__doc__')
# Getting the type of 'argmin' (line 6468)
argmin_149525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6468, 0), 'argmin')
# Setting the type of the member '__doc__' of a type (line 6468)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6468, 0), argmin_149525, '__doc__', doc___149524)

@norecursion
def argmax(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6471)
    None_149526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6471, 19), 'None')
    # Getting the type of 'None' (line 6471)
    None_149527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6471, 36), 'None')
    defaults = [None_149526, None_149527]
    # Create a new context for function 'argmax'
    module_type_store = module_type_store.open_function_context('argmax', 6471, 0, False)
    
    # Passed parameters checking function
    argmax.stypy_localization = localization
    argmax.stypy_type_of_self = None
    argmax.stypy_type_store = module_type_store
    argmax.stypy_function_name = 'argmax'
    argmax.stypy_param_names_list = ['a', 'axis', 'fill_value']
    argmax.stypy_varargs_param_name = None
    argmax.stypy_kwargs_param_name = None
    argmax.stypy_call_defaults = defaults
    argmax.stypy_call_varargs = varargs
    argmax.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'argmax', ['a', 'axis', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'argmax', localization, ['a', 'axis', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'argmax(...)' code ##################

    str_149528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6472, 4), 'str', 'Function version of the eponymous method.')
    
    # Type idiom detected: calculating its left and rigth part (line 6473)
    # Getting the type of 'fill_value' (line 6473)
    fill_value_149529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6473, 7), 'fill_value')
    # Getting the type of 'None' (line 6473)
    None_149530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6473, 21), 'None')
    
    (may_be_149531, more_types_in_union_149532) = may_be_none(fill_value_149529, None_149530)

    if may_be_149531:

        if more_types_in_union_149532:
            # Runtime conditional SSA (line 6473)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 6474):
        
        # Assigning a Call to a Name (line 6474):
        
        # Call to default_fill_value(...): (line 6474)
        # Processing the call arguments (line 6474)
        # Getting the type of 'a' (line 6474)
        a_149534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6474, 40), 'a', False)
        # Processing the call keyword arguments (line 6474)
        kwargs_149535 = {}
        # Getting the type of 'default_fill_value' (line 6474)
        default_fill_value_149533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6474, 21), 'default_fill_value', False)
        # Calling default_fill_value(args, kwargs) (line 6474)
        default_fill_value_call_result_149536 = invoke(stypy.reporting.localization.Localization(__file__, 6474, 21), default_fill_value_149533, *[a_149534], **kwargs_149535)
        
        # Assigning a type to the variable 'fill_value' (line 6474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6474, 8), 'fill_value', default_fill_value_call_result_149536)
        
        
        # SSA begins for try-except statement (line 6475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a UnaryOp to a Name (line 6476):
        
        # Assigning a UnaryOp to a Name (line 6476):
        
        # Getting the type of 'fill_value' (line 6476)
        fill_value_149537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6476, 26), 'fill_value')
        # Applying the 'usub' unary operator (line 6476)
        result___neg___149538 = python_operator(stypy.reporting.localization.Localization(__file__, 6476, 25), 'usub', fill_value_149537)
        
        # Assigning a type to the variable 'fill_value' (line 6476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6476, 12), 'fill_value', result___neg___149538)
        # SSA branch for the except part of a try statement (line 6475)
        # SSA branch for the except '<any exception>' branch of a try statement (line 6475)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 6475)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_149532:
            # SSA join for if statement (line 6473)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 6479):
    
    # Assigning a Call to a Name (line 6479):
    
    # Call to filled(...): (line 6479)
    # Processing the call arguments (line 6479)
    # Getting the type of 'a' (line 6479)
    a_149540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6479, 15), 'a', False)
    # Getting the type of 'fill_value' (line 6479)
    fill_value_149541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6479, 18), 'fill_value', False)
    # Processing the call keyword arguments (line 6479)
    kwargs_149542 = {}
    # Getting the type of 'filled' (line 6479)
    filled_149539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6479, 8), 'filled', False)
    # Calling filled(args, kwargs) (line 6479)
    filled_call_result_149543 = invoke(stypy.reporting.localization.Localization(__file__, 6479, 8), filled_149539, *[a_149540, fill_value_149541], **kwargs_149542)
    
    # Assigning a type to the variable 'd' (line 6479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6479, 4), 'd', filled_call_result_149543)
    
    # Call to argmax(...): (line 6480)
    # Processing the call keyword arguments (line 6480)
    # Getting the type of 'axis' (line 6480)
    axis_149546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6480, 25), 'axis', False)
    keyword_149547 = axis_149546
    kwargs_149548 = {'axis': keyword_149547}
    # Getting the type of 'd' (line 6480)
    d_149544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6480, 11), 'd', False)
    # Obtaining the member 'argmax' of a type (line 6480)
    argmax_149545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6480, 11), d_149544, 'argmax')
    # Calling argmax(args, kwargs) (line 6480)
    argmax_call_result_149549 = invoke(stypy.reporting.localization.Localization(__file__, 6480, 11), argmax_149545, *[], **kwargs_149548)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6480, 4), 'stypy_return_type', argmax_call_result_149549)
    
    # ################# End of 'argmax(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'argmax' in the type store
    # Getting the type of 'stypy_return_type' (line 6471)
    stypy_return_type_149550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6471, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149550)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'argmax'
    return stypy_return_type_149550

# Assigning a type to the variable 'argmax' (line 6471)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6471, 0), 'argmax', argmax)

# Assigning a Attribute to a Attribute (line 6481):

# Assigning a Attribute to a Attribute (line 6481):
# Getting the type of 'MaskedArray' (line 6481)
MaskedArray_149551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6481, 17), 'MaskedArray')
# Obtaining the member 'argmax' of a type (line 6481)
argmax_149552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6481, 17), MaskedArray_149551, 'argmax')
# Obtaining the member '__doc__' of a type (line 6481)
doc___149553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6481, 17), argmax_149552, '__doc__')
# Getting the type of 'argmax' (line 6481)
argmax_149554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6481, 0), 'argmax')
# Setting the type of the member '__doc__' of a type (line 6481)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6481, 0), argmax_149554, '__doc__', doc___149553)

@norecursion
def sort(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_149555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6484, 17), 'int')
    str_149556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6484, 26), 'str', 'quicksort')
    # Getting the type of 'None' (line 6484)
    None_149557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6484, 45), 'None')
    # Getting the type of 'True' (line 6484)
    True_149558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6484, 59), 'True')
    # Getting the type of 'None' (line 6484)
    None_149559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6484, 76), 'None')
    defaults = [int_149555, str_149556, None_149557, True_149558, None_149559]
    # Create a new context for function 'sort'
    module_type_store = module_type_store.open_function_context('sort', 6484, 0, False)
    
    # Passed parameters checking function
    sort.stypy_localization = localization
    sort.stypy_type_of_self = None
    sort.stypy_type_store = module_type_store
    sort.stypy_function_name = 'sort'
    sort.stypy_param_names_list = ['a', 'axis', 'kind', 'order', 'endwith', 'fill_value']
    sort.stypy_varargs_param_name = None
    sort.stypy_kwargs_param_name = None
    sort.stypy_call_defaults = defaults
    sort.stypy_call_varargs = varargs
    sort.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sort', ['a', 'axis', 'kind', 'order', 'endwith', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sort', localization, ['a', 'axis', 'kind', 'order', 'endwith', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sort(...)' code ##################

    str_149560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6485, 4), 'str', 'Function version of the eponymous method.')
    
    # Assigning a Call to a Name (line 6486):
    
    # Assigning a Call to a Name (line 6486):
    
    # Call to narray(...): (line 6486)
    # Processing the call arguments (line 6486)
    # Getting the type of 'a' (line 6486)
    a_149562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6486, 15), 'a', False)
    # Processing the call keyword arguments (line 6486)
    # Getting the type of 'True' (line 6486)
    True_149563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6486, 23), 'True', False)
    keyword_149564 = True_149563
    # Getting the type of 'True' (line 6486)
    True_149565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6486, 35), 'True', False)
    keyword_149566 = True_149565
    kwargs_149567 = {'subok': keyword_149566, 'copy': keyword_149564}
    # Getting the type of 'narray' (line 6486)
    narray_149561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6486, 8), 'narray', False)
    # Calling narray(args, kwargs) (line 6486)
    narray_call_result_149568 = invoke(stypy.reporting.localization.Localization(__file__, 6486, 8), narray_149561, *[a_149562], **kwargs_149567)
    
    # Assigning a type to the variable 'a' (line 6486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6486, 4), 'a', narray_call_result_149568)
    
    # Type idiom detected: calculating its left and rigth part (line 6487)
    # Getting the type of 'axis' (line 6487)
    axis_149569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6487, 7), 'axis')
    # Getting the type of 'None' (line 6487)
    None_149570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6487, 15), 'None')
    
    (may_be_149571, more_types_in_union_149572) = may_be_none(axis_149569, None_149570)

    if may_be_149571:

        if more_types_in_union_149572:
            # Runtime conditional SSA (line 6487)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 6488):
        
        # Assigning a Call to a Name (line 6488):
        
        # Call to flatten(...): (line 6488)
        # Processing the call keyword arguments (line 6488)
        kwargs_149575 = {}
        # Getting the type of 'a' (line 6488)
        a_149573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6488, 12), 'a', False)
        # Obtaining the member 'flatten' of a type (line 6488)
        flatten_149574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6488, 12), a_149573, 'flatten')
        # Calling flatten(args, kwargs) (line 6488)
        flatten_call_result_149576 = invoke(stypy.reporting.localization.Localization(__file__, 6488, 12), flatten_149574, *[], **kwargs_149575)
        
        # Assigning a type to the variable 'a' (line 6488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6488, 8), 'a', flatten_call_result_149576)
        
        # Assigning a Num to a Name (line 6489):
        
        # Assigning a Num to a Name (line 6489):
        int_149577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6489, 15), 'int')
        # Assigning a type to the variable 'axis' (line 6489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6489, 8), 'axis', int_149577)

        if more_types_in_union_149572:
            # SSA join for if statement (line 6487)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 6490)
    # Getting the type of 'fill_value' (line 6490)
    fill_value_149578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6490, 7), 'fill_value')
    # Getting the type of 'None' (line 6490)
    None_149579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6490, 21), 'None')
    
    (may_be_149580, more_types_in_union_149581) = may_be_none(fill_value_149578, None_149579)

    if may_be_149580:

        if more_types_in_union_149581:
            # Runtime conditional SSA (line 6490)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'endwith' (line 6491)
        endwith_149582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6491, 11), 'endwith')
        # Testing the type of an if condition (line 6491)
        if_condition_149583 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6491, 8), endwith_149582)
        # Assigning a type to the variable 'if_condition_149583' (line 6491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6491, 8), 'if_condition_149583', if_condition_149583)
        # SSA begins for if statement (line 6491)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to issubdtype(...): (line 6493)
        # Processing the call arguments (line 6493)
        # Getting the type of 'a' (line 6493)
        a_149586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6493, 29), 'a', False)
        # Obtaining the member 'dtype' of a type (line 6493)
        dtype_149587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6493, 29), a_149586, 'dtype')
        # Getting the type of 'np' (line 6493)
        np_149588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6493, 38), 'np', False)
        # Obtaining the member 'floating' of a type (line 6493)
        floating_149589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6493, 38), np_149588, 'floating')
        # Processing the call keyword arguments (line 6493)
        kwargs_149590 = {}
        # Getting the type of 'np' (line 6493)
        np_149584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6493, 15), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 6493)
        issubdtype_149585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6493, 15), np_149584, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 6493)
        issubdtype_call_result_149591 = invoke(stypy.reporting.localization.Localization(__file__, 6493, 15), issubdtype_149585, *[dtype_149587, floating_149589], **kwargs_149590)
        
        # Testing the type of an if condition (line 6493)
        if_condition_149592 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6493, 12), issubdtype_call_result_149591)
        # Assigning a type to the variable 'if_condition_149592' (line 6493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6493, 12), 'if_condition_149592', if_condition_149592)
        # SSA begins for if statement (line 6493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 6494):
        
        # Assigning a Attribute to a Name (line 6494):
        # Getting the type of 'np' (line 6494)
        np_149593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6494, 25), 'np')
        # Obtaining the member 'nan' of a type (line 6494)
        nan_149594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6494, 25), np_149593, 'nan')
        # Assigning a type to the variable 'filler' (line 6494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6494, 16), 'filler', nan_149594)
        # SSA branch for the else part of an if statement (line 6493)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 6496):
        
        # Assigning a Call to a Name (line 6496):
        
        # Call to minimum_fill_value(...): (line 6496)
        # Processing the call arguments (line 6496)
        # Getting the type of 'a' (line 6496)
        a_149596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6496, 44), 'a', False)
        # Processing the call keyword arguments (line 6496)
        kwargs_149597 = {}
        # Getting the type of 'minimum_fill_value' (line 6496)
        minimum_fill_value_149595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6496, 25), 'minimum_fill_value', False)
        # Calling minimum_fill_value(args, kwargs) (line 6496)
        minimum_fill_value_call_result_149598 = invoke(stypy.reporting.localization.Localization(__file__, 6496, 25), minimum_fill_value_149595, *[a_149596], **kwargs_149597)
        
        # Assigning a type to the variable 'filler' (line 6496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6496, 16), 'filler', minimum_fill_value_call_result_149598)
        # SSA join for if statement (line 6493)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 6491)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 6498):
        
        # Assigning a Call to a Name (line 6498):
        
        # Call to maximum_fill_value(...): (line 6498)
        # Processing the call arguments (line 6498)
        # Getting the type of 'a' (line 6498)
        a_149600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6498, 40), 'a', False)
        # Processing the call keyword arguments (line 6498)
        kwargs_149601 = {}
        # Getting the type of 'maximum_fill_value' (line 6498)
        maximum_fill_value_149599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6498, 21), 'maximum_fill_value', False)
        # Calling maximum_fill_value(args, kwargs) (line 6498)
        maximum_fill_value_call_result_149602 = invoke(stypy.reporting.localization.Localization(__file__, 6498, 21), maximum_fill_value_149599, *[a_149600], **kwargs_149601)
        
        # Assigning a type to the variable 'filler' (line 6498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6498, 12), 'filler', maximum_fill_value_call_result_149602)
        # SSA join for if statement (line 6491)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_149581:
            # Runtime conditional SSA for else branch (line 6490)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_149580) or more_types_in_union_149581):
        
        # Assigning a Name to a Name (line 6500):
        
        # Assigning a Name to a Name (line 6500):
        # Getting the type of 'fill_value' (line 6500)
        fill_value_149603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6500, 17), 'fill_value')
        # Assigning a type to the variable 'filler' (line 6500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6500, 8), 'filler', fill_value_149603)

        if (may_be_149580 and more_types_in_union_149581):
            # SSA join for if statement (line 6490)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 6502):
    
    # Assigning a Call to a Name (line 6502):
    
    # Call to argsort(...): (line 6502)
    # Processing the call keyword arguments (line 6502)
    # Getting the type of 'axis' (line 6502)
    axis_149610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6502, 43), 'axis', False)
    keyword_149611 = axis_149610
    # Getting the type of 'kind' (line 6502)
    kind_149612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6502, 54), 'kind', False)
    keyword_149613 = kind_149612
    # Getting the type of 'order' (line 6502)
    order_149614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6502, 66), 'order', False)
    keyword_149615 = order_149614
    kwargs_149616 = {'kind': keyword_149613, 'order': keyword_149615, 'axis': keyword_149611}
    
    # Call to filled(...): (line 6502)
    # Processing the call arguments (line 6502)
    # Getting the type of 'a' (line 6502)
    a_149605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6502, 19), 'a', False)
    # Getting the type of 'filler' (line 6502)
    filler_149606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6502, 22), 'filler', False)
    # Processing the call keyword arguments (line 6502)
    kwargs_149607 = {}
    # Getting the type of 'filled' (line 6502)
    filled_149604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6502, 12), 'filled', False)
    # Calling filled(args, kwargs) (line 6502)
    filled_call_result_149608 = invoke(stypy.reporting.localization.Localization(__file__, 6502, 12), filled_149604, *[a_149605, filler_149606], **kwargs_149607)
    
    # Obtaining the member 'argsort' of a type (line 6502)
    argsort_149609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6502, 12), filled_call_result_149608, 'argsort')
    # Calling argsort(args, kwargs) (line 6502)
    argsort_call_result_149617 = invoke(stypy.reporting.localization.Localization(__file__, 6502, 12), argsort_149609, *[], **kwargs_149616)
    
    # Assigning a type to the variable 'sindx' (line 6502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6502, 4), 'sindx', argsort_call_result_149617)
    
    
    # Getting the type of 'a' (line 6505)
    a_149618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6505, 7), 'a')
    # Obtaining the member 'ndim' of a type (line 6505)
    ndim_149619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6505, 7), a_149618, 'ndim')
    int_149620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6505, 17), 'int')
    # Applying the binary operator '==' (line 6505)
    result_eq_149621 = python_operator(stypy.reporting.localization.Localization(__file__, 6505, 7), '==', ndim_149619, int_149620)
    
    # Testing the type of an if condition (line 6505)
    if_condition_149622 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6505, 4), result_eq_149621)
    # Assigning a type to the variable 'if_condition_149622' (line 6505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6505, 4), 'if_condition_149622', if_condition_149622)
    # SSA begins for if statement (line 6505)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 6506):
    
    # Assigning a Name to a Name (line 6506):
    # Getting the type of 'sindx' (line 6506)
    sindx_149623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6506, 15), 'sindx')
    # Assigning a type to the variable 'indx' (line 6506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6506, 8), 'indx', sindx_149623)
    # SSA branch for the else part of an if statement (line 6505)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 6508):
    
    # Assigning a Call to a Name (line 6508):
    
    # Call to meshgrid(...): (line 6508)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'a' (line 6508)
    a_149631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6508, 51), 'a', False)
    # Obtaining the member 'shape' of a type (line 6508)
    shape_149632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6508, 51), a_149631, 'shape')
    comprehension_149633 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6508, 29), shape_149632)
    # Assigning a type to the variable 'x' (line 6508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6508, 29), 'x', comprehension_149633)
    
    # Call to arange(...): (line 6508)
    # Processing the call arguments (line 6508)
    # Getting the type of 'x' (line 6508)
    x_149628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6508, 39), 'x', False)
    # Processing the call keyword arguments (line 6508)
    kwargs_149629 = {}
    # Getting the type of 'np' (line 6508)
    np_149626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6508, 29), 'np', False)
    # Obtaining the member 'arange' of a type (line 6508)
    arange_149627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6508, 29), np_149626, 'arange')
    # Calling arange(args, kwargs) (line 6508)
    arange_call_result_149630 = invoke(stypy.reporting.localization.Localization(__file__, 6508, 29), arange_149627, *[x_149628], **kwargs_149629)
    
    list_149634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6508, 29), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6508, 29), list_149634, arange_call_result_149630)
    # Processing the call keyword arguments (line 6508)
    # Getting the type of 'True' (line 6508)
    True_149635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6508, 68), 'True', False)
    keyword_149636 = True_149635
    str_149637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6509, 36), 'str', 'ij')
    keyword_149638 = str_149637
    kwargs_149639 = {'indexing': keyword_149638, 'sparse': keyword_149636}
    # Getting the type of 'np' (line 6508)
    np_149624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6508, 15), 'np', False)
    # Obtaining the member 'meshgrid' of a type (line 6508)
    meshgrid_149625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6508, 15), np_149624, 'meshgrid')
    # Calling meshgrid(args, kwargs) (line 6508)
    meshgrid_call_result_149640 = invoke(stypy.reporting.localization.Localization(__file__, 6508, 15), meshgrid_149625, *[list_149634], **kwargs_149639)
    
    # Assigning a type to the variable 'indx' (line 6508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6508, 8), 'indx', meshgrid_call_result_149640)
    
    # Assigning a Name to a Subscript (line 6510):
    
    # Assigning a Name to a Subscript (line 6510):
    # Getting the type of 'sindx' (line 6510)
    sindx_149641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6510, 21), 'sindx')
    # Getting the type of 'indx' (line 6510)
    indx_149642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6510, 8), 'indx')
    # Getting the type of 'axis' (line 6510)
    axis_149643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6510, 13), 'axis')
    # Storing an element on a container (line 6510)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6510, 8), indx_149642, (axis_149643, sindx_149641))
    # SSA join for if statement (line 6505)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'indx' (line 6511)
    indx_149644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6511, 13), 'indx')
    # Getting the type of 'a' (line 6511)
    a_149645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6511, 11), 'a')
    # Obtaining the member '__getitem__' of a type (line 6511)
    getitem___149646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6511, 11), a_149645, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 6511)
    subscript_call_result_149647 = invoke(stypy.reporting.localization.Localization(__file__, 6511, 11), getitem___149646, indx_149644)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6511, 4), 'stypy_return_type', subscript_call_result_149647)
    
    # ################# End of 'sort(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sort' in the type store
    # Getting the type of 'stypy_return_type' (line 6484)
    stypy_return_type_149648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6484, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149648)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sort'
    return stypy_return_type_149648

# Assigning a type to the variable 'sort' (line 6484)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6484, 0), 'sort', sort)

# Assigning a Attribute to a Attribute (line 6512):

# Assigning a Attribute to a Attribute (line 6512):
# Getting the type of 'MaskedArray' (line 6512)
MaskedArray_149649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6512, 15), 'MaskedArray')
# Obtaining the member 'sort' of a type (line 6512)
sort_149650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6512, 15), MaskedArray_149649, 'sort')
# Obtaining the member '__doc__' of a type (line 6512)
doc___149651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6512, 15), sort_149650, '__doc__')
# Getting the type of 'sort' (line 6512)
sort_149652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6512, 0), 'sort')
# Setting the type of the member '__doc__' of a type (line 6512)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6512, 0), sort_149652, '__doc__', doc___149651)

@norecursion
def compressed(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'compressed'
    module_type_store = module_type_store.open_function_context('compressed', 6515, 0, False)
    
    # Passed parameters checking function
    compressed.stypy_localization = localization
    compressed.stypy_type_of_self = None
    compressed.stypy_type_store = module_type_store
    compressed.stypy_function_name = 'compressed'
    compressed.stypy_param_names_list = ['x']
    compressed.stypy_varargs_param_name = None
    compressed.stypy_kwargs_param_name = None
    compressed.stypy_call_defaults = defaults
    compressed.stypy_call_varargs = varargs
    compressed.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compressed', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compressed', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compressed(...)' code ##################

    str_149653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6527, (-1)), 'str', '\n    Return all the non-masked data as a 1-D array.\n\n    This function is equivalent to calling the "compressed" method of a\n    `MaskedArray`, see `MaskedArray.compressed` for details.\n\n    See Also\n    --------\n    MaskedArray.compressed\n        Equivalent method.\n\n    ')
    
    
    
    # Call to isinstance(...): (line 6528)
    # Processing the call arguments (line 6528)
    # Getting the type of 'x' (line 6528)
    x_149655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6528, 22), 'x', False)
    # Getting the type of 'MaskedArray' (line 6528)
    MaskedArray_149656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6528, 25), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6528)
    kwargs_149657 = {}
    # Getting the type of 'isinstance' (line 6528)
    isinstance_149654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6528, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 6528)
    isinstance_call_result_149658 = invoke(stypy.reporting.localization.Localization(__file__, 6528, 11), isinstance_149654, *[x_149655, MaskedArray_149656], **kwargs_149657)
    
    # Applying the 'not' unary operator (line 6528)
    result_not__149659 = python_operator(stypy.reporting.localization.Localization(__file__, 6528, 7), 'not', isinstance_call_result_149658)
    
    # Testing the type of an if condition (line 6528)
    if_condition_149660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6528, 4), result_not__149659)
    # Assigning a type to the variable 'if_condition_149660' (line 6528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6528, 4), 'if_condition_149660', if_condition_149660)
    # SSA begins for if statement (line 6528)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 6529):
    
    # Assigning a Call to a Name (line 6529):
    
    # Call to asanyarray(...): (line 6529)
    # Processing the call arguments (line 6529)
    # Getting the type of 'x' (line 6529)
    x_149662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6529, 23), 'x', False)
    # Processing the call keyword arguments (line 6529)
    kwargs_149663 = {}
    # Getting the type of 'asanyarray' (line 6529)
    asanyarray_149661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6529, 12), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 6529)
    asanyarray_call_result_149664 = invoke(stypy.reporting.localization.Localization(__file__, 6529, 12), asanyarray_149661, *[x_149662], **kwargs_149663)
    
    # Assigning a type to the variable 'x' (line 6529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6529, 8), 'x', asanyarray_call_result_149664)
    # SSA join for if statement (line 6528)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to compressed(...): (line 6530)
    # Processing the call keyword arguments (line 6530)
    kwargs_149667 = {}
    # Getting the type of 'x' (line 6530)
    x_149665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6530, 11), 'x', False)
    # Obtaining the member 'compressed' of a type (line 6530)
    compressed_149666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6530, 11), x_149665, 'compressed')
    # Calling compressed(args, kwargs) (line 6530)
    compressed_call_result_149668 = invoke(stypy.reporting.localization.Localization(__file__, 6530, 11), compressed_149666, *[], **kwargs_149667)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6530, 4), 'stypy_return_type', compressed_call_result_149668)
    
    # ################# End of 'compressed(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compressed' in the type store
    # Getting the type of 'stypy_return_type' (line 6515)
    stypy_return_type_149669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6515, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149669)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compressed'
    return stypy_return_type_149669

# Assigning a type to the variable 'compressed' (line 6515)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6515, 0), 'compressed', compressed)

@norecursion
def concatenate(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_149670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6533, 29), 'int')
    defaults = [int_149670]
    # Create a new context for function 'concatenate'
    module_type_store = module_type_store.open_function_context('concatenate', 6533, 0, False)
    
    # Passed parameters checking function
    concatenate.stypy_localization = localization
    concatenate.stypy_type_of_self = None
    concatenate.stypy_type_store = module_type_store
    concatenate.stypy_function_name = 'concatenate'
    concatenate.stypy_param_names_list = ['arrays', 'axis']
    concatenate.stypy_varargs_param_name = None
    concatenate.stypy_kwargs_param_name = None
    concatenate.stypy_call_defaults = defaults
    concatenate.stypy_call_varargs = varargs
    concatenate.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'concatenate', ['arrays', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'concatenate', localization, ['arrays', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'concatenate(...)' code ##################

    str_149671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6573, (-1)), 'str', '\n    Concatenate a sequence of arrays along the given axis.\n\n    Parameters\n    ----------\n    arrays : sequence of array_like\n        The arrays must have the same shape, except in the dimension\n        corresponding to `axis` (the first, by default).\n    axis : int, optional\n        The axis along which the arrays will be joined. Default is 0.\n\n    Returns\n    -------\n    result : MaskedArray\n        The concatenated array with any masked entries preserved.\n\n    See Also\n    --------\n    numpy.concatenate : Equivalent function in the top-level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.arange(3)\n    >>> a[1] = ma.masked\n    >>> b = ma.arange(2, 5)\n    >>> a\n    masked_array(data = [0 -- 2],\n                 mask = [False  True False],\n           fill_value = 999999)\n    >>> b\n    masked_array(data = [2 3 4],\n                 mask = False,\n           fill_value = 999999)\n    >>> ma.concatenate([a, b])\n    masked_array(data = [0 -- 2 2 3 4],\n                 mask = [False  True False False False False],\n           fill_value = 999999)\n\n    ')
    
    # Assigning a Call to a Name (line 6574):
    
    # Assigning a Call to a Name (line 6574):
    
    # Call to concatenate(...): (line 6574)
    # Processing the call arguments (line 6574)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'arrays' (line 6574)
    arrays_149678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6574, 44), 'arrays', False)
    comprehension_149679 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6574, 24), arrays_149678)
    # Assigning a type to the variable 'a' (line 6574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6574, 24), 'a', comprehension_149679)
    
    # Call to getdata(...): (line 6574)
    # Processing the call arguments (line 6574)
    # Getting the type of 'a' (line 6574)
    a_149675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6574, 32), 'a', False)
    # Processing the call keyword arguments (line 6574)
    kwargs_149676 = {}
    # Getting the type of 'getdata' (line 6574)
    getdata_149674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6574, 24), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6574)
    getdata_call_result_149677 = invoke(stypy.reporting.localization.Localization(__file__, 6574, 24), getdata_149674, *[a_149675], **kwargs_149676)
    
    list_149680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6574, 24), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6574, 24), list_149680, getdata_call_result_149677)
    # Getting the type of 'axis' (line 6574)
    axis_149681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6574, 53), 'axis', False)
    # Processing the call keyword arguments (line 6574)
    kwargs_149682 = {}
    # Getting the type of 'np' (line 6574)
    np_149672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6574, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 6574)
    concatenate_149673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6574, 8), np_149672, 'concatenate')
    # Calling concatenate(args, kwargs) (line 6574)
    concatenate_call_result_149683 = invoke(stypy.reporting.localization.Localization(__file__, 6574, 8), concatenate_149673, *[list_149680, axis_149681], **kwargs_149682)
    
    # Assigning a type to the variable 'd' (line 6574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6574, 4), 'd', concatenate_call_result_149683)
    
    # Assigning a Call to a Name (line 6575):
    
    # Assigning a Call to a Name (line 6575):
    
    # Call to get_masked_subclass(...): (line 6575)
    # Getting the type of 'arrays' (line 6575)
    arrays_149685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6575, 32), 'arrays', False)
    # Processing the call keyword arguments (line 6575)
    kwargs_149686 = {}
    # Getting the type of 'get_masked_subclass' (line 6575)
    get_masked_subclass_149684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6575, 11), 'get_masked_subclass', False)
    # Calling get_masked_subclass(args, kwargs) (line 6575)
    get_masked_subclass_call_result_149687 = invoke(stypy.reporting.localization.Localization(__file__, 6575, 11), get_masked_subclass_149684, *[arrays_149685], **kwargs_149686)
    
    # Assigning a type to the variable 'rcls' (line 6575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6575, 4), 'rcls', get_masked_subclass_call_result_149687)
    
    # Assigning a Call to a Name (line 6576):
    
    # Assigning a Call to a Name (line 6576):
    
    # Call to view(...): (line 6576)
    # Processing the call arguments (line 6576)
    # Getting the type of 'rcls' (line 6576)
    rcls_149690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6576, 18), 'rcls', False)
    # Processing the call keyword arguments (line 6576)
    kwargs_149691 = {}
    # Getting the type of 'd' (line 6576)
    d_149688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6576, 11), 'd', False)
    # Obtaining the member 'view' of a type (line 6576)
    view_149689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6576, 11), d_149688, 'view')
    # Calling view(args, kwargs) (line 6576)
    view_call_result_149692 = invoke(stypy.reporting.localization.Localization(__file__, 6576, 11), view_149689, *[rcls_149690], **kwargs_149691)
    
    # Assigning a type to the variable 'data' (line 6576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6576, 4), 'data', view_call_result_149692)
    
    # Getting the type of 'arrays' (line 6578)
    arrays_149693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6578, 13), 'arrays')
    # Testing the type of a for loop iterable (line 6578)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 6578, 4), arrays_149693)
    # Getting the type of the for loop variable (line 6578)
    for_loop_var_149694 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 6578, 4), arrays_149693)
    # Assigning a type to the variable 'x' (line 6578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6578, 4), 'x', for_loop_var_149694)
    # SSA begins for a for statement (line 6578)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to getmask(...): (line 6579)
    # Processing the call arguments (line 6579)
    # Getting the type of 'x' (line 6579)
    x_149696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6579, 19), 'x', False)
    # Processing the call keyword arguments (line 6579)
    kwargs_149697 = {}
    # Getting the type of 'getmask' (line 6579)
    getmask_149695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6579, 11), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6579)
    getmask_call_result_149698 = invoke(stypy.reporting.localization.Localization(__file__, 6579, 11), getmask_149695, *[x_149696], **kwargs_149697)
    
    # Getting the type of 'nomask' (line 6579)
    nomask_149699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6579, 29), 'nomask')
    # Applying the binary operator 'isnot' (line 6579)
    result_is_not_149700 = python_operator(stypy.reporting.localization.Localization(__file__, 6579, 11), 'isnot', getmask_call_result_149698, nomask_149699)
    
    # Testing the type of an if condition (line 6579)
    if_condition_149701 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6579, 8), result_is_not_149700)
    # Assigning a type to the variable 'if_condition_149701' (line 6579)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6579, 8), 'if_condition_149701', if_condition_149701)
    # SSA begins for if statement (line 6579)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 6579)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of a for statement (line 6578)
    module_type_store.open_ssa_branch('for loop else')
    # Getting the type of 'data' (line 6582)
    data_149702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6582, 15), 'data')
    # Assigning a type to the variable 'stypy_return_type' (line 6582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6582, 8), 'stypy_return_type', data_149702)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 6584):
    
    # Assigning a Call to a Name (line 6584):
    
    # Call to concatenate(...): (line 6584)
    # Processing the call arguments (line 6584)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'arrays' (line 6584)
    arrays_149709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6584, 50), 'arrays', False)
    comprehension_149710 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6584, 25), arrays_149709)
    # Assigning a type to the variable 'a' (line 6584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6584, 25), 'a', comprehension_149710)
    
    # Call to getmaskarray(...): (line 6584)
    # Processing the call arguments (line 6584)
    # Getting the type of 'a' (line 6584)
    a_149706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6584, 38), 'a', False)
    # Processing the call keyword arguments (line 6584)
    kwargs_149707 = {}
    # Getting the type of 'getmaskarray' (line 6584)
    getmaskarray_149705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6584, 25), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 6584)
    getmaskarray_call_result_149708 = invoke(stypy.reporting.localization.Localization(__file__, 6584, 25), getmaskarray_149705, *[a_149706], **kwargs_149707)
    
    list_149711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6584, 25), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6584, 25), list_149711, getmaskarray_call_result_149708)
    # Getting the type of 'axis' (line 6584)
    axis_149712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6584, 59), 'axis', False)
    # Processing the call keyword arguments (line 6584)
    kwargs_149713 = {}
    # Getting the type of 'np' (line 6584)
    np_149703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6584, 9), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 6584)
    concatenate_149704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6584, 9), np_149703, 'concatenate')
    # Calling concatenate(args, kwargs) (line 6584)
    concatenate_call_result_149714 = invoke(stypy.reporting.localization.Localization(__file__, 6584, 9), concatenate_149704, *[list_149711, axis_149712], **kwargs_149713)
    
    # Assigning a type to the variable 'dm' (line 6584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6584, 4), 'dm', concatenate_call_result_149714)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'dm' (line 6587)
    dm_149715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6587, 11), 'dm')
    # Obtaining the member 'dtype' of a type (line 6587)
    dtype_149716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6587, 11), dm_149715, 'dtype')
    # Obtaining the member 'fields' of a type (line 6587)
    fields_149717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6587, 11), dtype_149716, 'fields')
    # Applying the 'not' unary operator (line 6587)
    result_not__149718 = python_operator(stypy.reporting.localization.Localization(__file__, 6587, 7), 'not', fields_149717)
    
    
    
    # Call to any(...): (line 6587)
    # Processing the call keyword arguments (line 6587)
    kwargs_149721 = {}
    # Getting the type of 'dm' (line 6587)
    dm_149719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6587, 35), 'dm', False)
    # Obtaining the member 'any' of a type (line 6587)
    any_149720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6587, 35), dm_149719, 'any')
    # Calling any(args, kwargs) (line 6587)
    any_call_result_149722 = invoke(stypy.reporting.localization.Localization(__file__, 6587, 35), any_149720, *[], **kwargs_149721)
    
    # Applying the 'not' unary operator (line 6587)
    result_not__149723 = python_operator(stypy.reporting.localization.Localization(__file__, 6587, 31), 'not', any_call_result_149722)
    
    # Applying the binary operator 'and' (line 6587)
    result_and_keyword_149724 = python_operator(stypy.reporting.localization.Localization(__file__, 6587, 7), 'and', result_not__149718, result_not__149723)
    
    # Testing the type of an if condition (line 6587)
    if_condition_149725 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6587, 4), result_and_keyword_149724)
    # Assigning a type to the variable 'if_condition_149725' (line 6587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6587, 4), 'if_condition_149725', if_condition_149725)
    # SSA begins for if statement (line 6587)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Attribute (line 6588):
    
    # Assigning a Name to a Attribute (line 6588):
    # Getting the type of 'nomask' (line 6588)
    nomask_149726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6588, 21), 'nomask')
    # Getting the type of 'data' (line 6588)
    data_149727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6588, 8), 'data')
    # Setting the type of the member '_mask' of a type (line 6588)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6588, 8), data_149727, '_mask', nomask_149726)
    # SSA branch for the else part of an if statement (line 6587)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Attribute (line 6590):
    
    # Assigning a Call to a Attribute (line 6590):
    
    # Call to reshape(...): (line 6590)
    # Processing the call arguments (line 6590)
    # Getting the type of 'd' (line 6590)
    d_149730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6590, 32), 'd', False)
    # Obtaining the member 'shape' of a type (line 6590)
    shape_149731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6590, 32), d_149730, 'shape')
    # Processing the call keyword arguments (line 6590)
    kwargs_149732 = {}
    # Getting the type of 'dm' (line 6590)
    dm_149728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6590, 21), 'dm', False)
    # Obtaining the member 'reshape' of a type (line 6590)
    reshape_149729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6590, 21), dm_149728, 'reshape')
    # Calling reshape(args, kwargs) (line 6590)
    reshape_call_result_149733 = invoke(stypy.reporting.localization.Localization(__file__, 6590, 21), reshape_149729, *[shape_149731], **kwargs_149732)
    
    # Getting the type of 'data' (line 6590)
    data_149734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6590, 8), 'data')
    # Setting the type of the member '_mask' of a type (line 6590)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6590, 8), data_149734, '_mask', reshape_call_result_149733)
    # SSA join for if statement (line 6587)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'data' (line 6591)
    data_149735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6591, 11), 'data')
    # Assigning a type to the variable 'stypy_return_type' (line 6591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6591, 4), 'stypy_return_type', data_149735)
    
    # ################# End of 'concatenate(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'concatenate' in the type store
    # Getting the type of 'stypy_return_type' (line 6533)
    stypy_return_type_149736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6533, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149736)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'concatenate'
    return stypy_return_type_149736

# Assigning a type to the variable 'concatenate' (line 6533)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6533, 0), 'concatenate', concatenate)

@norecursion
def count(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6594)
    None_149737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6594, 18), 'None')
    defaults = [None_149737]
    # Create a new context for function 'count'
    module_type_store = module_type_store.open_function_context('count', 6594, 0, False)
    
    # Passed parameters checking function
    count.stypy_localization = localization
    count.stypy_type_of_self = None
    count.stypy_type_store = module_type_store
    count.stypy_function_name = 'count'
    count.stypy_param_names_list = ['a', 'axis']
    count.stypy_varargs_param_name = None
    count.stypy_kwargs_param_name = None
    count.stypy_call_defaults = defaults
    count.stypy_call_varargs = varargs
    count.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'count', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'count', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'count(...)' code ##################

    
    
    # Call to isinstance(...): (line 6595)
    # Processing the call arguments (line 6595)
    # Getting the type of 'a' (line 6595)
    a_149739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6595, 18), 'a', False)
    # Getting the type of 'MaskedArray' (line 6595)
    MaskedArray_149740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6595, 21), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6595)
    kwargs_149741 = {}
    # Getting the type of 'isinstance' (line 6595)
    isinstance_149738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6595, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 6595)
    isinstance_call_result_149742 = invoke(stypy.reporting.localization.Localization(__file__, 6595, 7), isinstance_149738, *[a_149739, MaskedArray_149740], **kwargs_149741)
    
    # Testing the type of an if condition (line 6595)
    if_condition_149743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6595, 4), isinstance_call_result_149742)
    # Assigning a type to the variable 'if_condition_149743' (line 6595)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6595, 4), 'if_condition_149743', if_condition_149743)
    # SSA begins for if statement (line 6595)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to count(...): (line 6596)
    # Processing the call arguments (line 6596)
    # Getting the type of 'axis' (line 6596)
    axis_149746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6596, 23), 'axis', False)
    # Processing the call keyword arguments (line 6596)
    kwargs_149747 = {}
    # Getting the type of 'a' (line 6596)
    a_149744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6596, 15), 'a', False)
    # Obtaining the member 'count' of a type (line 6596)
    count_149745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6596, 15), a_149744, 'count')
    # Calling count(args, kwargs) (line 6596)
    count_call_result_149748 = invoke(stypy.reporting.localization.Localization(__file__, 6596, 15), count_149745, *[axis_149746], **kwargs_149747)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6596, 8), 'stypy_return_type', count_call_result_149748)
    # SSA join for if statement (line 6595)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to count(...): (line 6597)
    # Processing the call arguments (line 6597)
    # Getting the type of 'axis' (line 6597)
    axis_149756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6597, 45), 'axis', False)
    # Processing the call keyword arguments (line 6597)
    kwargs_149757 = {}
    
    # Call to masked_array(...): (line 6597)
    # Processing the call arguments (line 6597)
    # Getting the type of 'a' (line 6597)
    a_149750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6597, 24), 'a', False)
    # Processing the call keyword arguments (line 6597)
    # Getting the type of 'False' (line 6597)
    False_149751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6597, 32), 'False', False)
    keyword_149752 = False_149751
    kwargs_149753 = {'copy': keyword_149752}
    # Getting the type of 'masked_array' (line 6597)
    masked_array_149749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6597, 11), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 6597)
    masked_array_call_result_149754 = invoke(stypy.reporting.localization.Localization(__file__, 6597, 11), masked_array_149749, *[a_149750], **kwargs_149753)
    
    # Obtaining the member 'count' of a type (line 6597)
    count_149755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6597, 11), masked_array_call_result_149754, 'count')
    # Calling count(args, kwargs) (line 6597)
    count_call_result_149758 = invoke(stypy.reporting.localization.Localization(__file__, 6597, 11), count_149755, *[axis_149756], **kwargs_149757)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6597, 4), 'stypy_return_type', count_call_result_149758)
    
    # ################# End of 'count(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'count' in the type store
    # Getting the type of 'stypy_return_type' (line 6594)
    stypy_return_type_149759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6594, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149759)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'count'
    return stypy_return_type_149759

# Assigning a type to the variable 'count' (line 6594)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6594, 0), 'count', count)

# Assigning a Attribute to a Attribute (line 6598):

# Assigning a Attribute to a Attribute (line 6598):
# Getting the type of 'MaskedArray' (line 6598)
MaskedArray_149760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6598, 16), 'MaskedArray')
# Obtaining the member 'count' of a type (line 6598)
count_149761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6598, 16), MaskedArray_149760, 'count')
# Obtaining the member '__doc__' of a type (line 6598)
doc___149762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6598, 16), count_149761, '__doc__')
# Getting the type of 'count' (line 6598)
count_149763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6598, 0), 'count')
# Setting the type of the member '__doc__' of a type (line 6598)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6598, 0), count_149763, '__doc__', doc___149762)

@norecursion
def diag(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_149764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6601, 14), 'int')
    defaults = [int_149764]
    # Create a new context for function 'diag'
    module_type_store = module_type_store.open_function_context('diag', 6601, 0, False)
    
    # Passed parameters checking function
    diag.stypy_localization = localization
    diag.stypy_type_of_self = None
    diag.stypy_type_store = module_type_store
    diag.stypy_function_name = 'diag'
    diag.stypy_param_names_list = ['v', 'k']
    diag.stypy_varargs_param_name = None
    diag.stypy_kwargs_param_name = None
    diag.stypy_call_defaults = defaults
    diag.stypy_call_varargs = varargs
    diag.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'diag', ['v', 'k'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'diag', localization, ['v', 'k'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'diag(...)' code ##################

    str_149765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6612, (-1)), 'str', '\n    Extract a diagonal or construct a diagonal array.\n\n    This function is the equivalent of `numpy.diag` that takes masked\n    values into account, see `numpy.diag` for details.\n\n    See Also\n    --------\n    numpy.diag : Equivalent function for ndarrays.\n\n    ')
    
    # Assigning a Call to a Name (line 6613):
    
    # Assigning a Call to a Name (line 6613):
    
    # Call to view(...): (line 6613)
    # Processing the call arguments (line 6613)
    # Getting the type of 'MaskedArray' (line 6613)
    MaskedArray_149773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6613, 32), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6613)
    kwargs_149774 = {}
    
    # Call to diag(...): (line 6613)
    # Processing the call arguments (line 6613)
    # Getting the type of 'v' (line 6613)
    v_149768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6613, 21), 'v', False)
    # Getting the type of 'k' (line 6613)
    k_149769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6613, 24), 'k', False)
    # Processing the call keyword arguments (line 6613)
    kwargs_149770 = {}
    # Getting the type of 'np' (line 6613)
    np_149766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6613, 13), 'np', False)
    # Obtaining the member 'diag' of a type (line 6613)
    diag_149767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6613, 13), np_149766, 'diag')
    # Calling diag(args, kwargs) (line 6613)
    diag_call_result_149771 = invoke(stypy.reporting.localization.Localization(__file__, 6613, 13), diag_149767, *[v_149768, k_149769], **kwargs_149770)
    
    # Obtaining the member 'view' of a type (line 6613)
    view_149772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6613, 13), diag_call_result_149771, 'view')
    # Calling view(args, kwargs) (line 6613)
    view_call_result_149775 = invoke(stypy.reporting.localization.Localization(__file__, 6613, 13), view_149772, *[MaskedArray_149773], **kwargs_149774)
    
    # Assigning a type to the variable 'output' (line 6613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6613, 4), 'output', view_call_result_149775)
    
    
    
    # Call to getmask(...): (line 6614)
    # Processing the call arguments (line 6614)
    # Getting the type of 'v' (line 6614)
    v_149777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6614, 15), 'v', False)
    # Processing the call keyword arguments (line 6614)
    kwargs_149778 = {}
    # Getting the type of 'getmask' (line 6614)
    getmask_149776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6614, 7), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6614)
    getmask_call_result_149779 = invoke(stypy.reporting.localization.Localization(__file__, 6614, 7), getmask_149776, *[v_149777], **kwargs_149778)
    
    # Getting the type of 'nomask' (line 6614)
    nomask_149780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6614, 25), 'nomask')
    # Applying the binary operator 'isnot' (line 6614)
    result_is_not_149781 = python_operator(stypy.reporting.localization.Localization(__file__, 6614, 7), 'isnot', getmask_call_result_149779, nomask_149780)
    
    # Testing the type of an if condition (line 6614)
    if_condition_149782 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6614, 4), result_is_not_149781)
    # Assigning a type to the variable 'if_condition_149782' (line 6614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6614, 4), 'if_condition_149782', if_condition_149782)
    # SSA begins for if statement (line 6614)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Attribute (line 6615):
    
    # Assigning a Call to a Attribute (line 6615):
    
    # Call to diag(...): (line 6615)
    # Processing the call arguments (line 6615)
    # Getting the type of 'v' (line 6615)
    v_149785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6615, 31), 'v', False)
    # Obtaining the member '_mask' of a type (line 6615)
    _mask_149786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6615, 31), v_149785, '_mask')
    # Getting the type of 'k' (line 6615)
    k_149787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6615, 40), 'k', False)
    # Processing the call keyword arguments (line 6615)
    kwargs_149788 = {}
    # Getting the type of 'np' (line 6615)
    np_149783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6615, 23), 'np', False)
    # Obtaining the member 'diag' of a type (line 6615)
    diag_149784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6615, 23), np_149783, 'diag')
    # Calling diag(args, kwargs) (line 6615)
    diag_call_result_149789 = invoke(stypy.reporting.localization.Localization(__file__, 6615, 23), diag_149784, *[_mask_149786, k_149787], **kwargs_149788)
    
    # Getting the type of 'output' (line 6615)
    output_149790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6615, 8), 'output')
    # Setting the type of the member '_mask' of a type (line 6615)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6615, 8), output_149790, '_mask', diag_call_result_149789)
    # SSA join for if statement (line 6614)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'output' (line 6616)
    output_149791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6616, 11), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 6616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6616, 4), 'stypy_return_type', output_149791)
    
    # ################# End of 'diag(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'diag' in the type store
    # Getting the type of 'stypy_return_type' (line 6601)
    stypy_return_type_149792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6601, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149792)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'diag'
    return stypy_return_type_149792

# Assigning a type to the variable 'diag' (line 6601)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6601, 0), 'diag', diag)

@norecursion
def expand_dims(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'expand_dims'
    module_type_store = module_type_store.open_function_context('expand_dims', 6619, 0, False)
    
    # Passed parameters checking function
    expand_dims.stypy_localization = localization
    expand_dims.stypy_type_of_self = None
    expand_dims.stypy_type_store = module_type_store
    expand_dims.stypy_function_name = 'expand_dims'
    expand_dims.stypy_param_names_list = ['x', 'axis']
    expand_dims.stypy_varargs_param_name = None
    expand_dims.stypy_kwargs_param_name = None
    expand_dims.stypy_call_defaults = defaults
    expand_dims.stypy_call_varargs = varargs
    expand_dims.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'expand_dims', ['x', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'expand_dims', localization, ['x', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'expand_dims(...)' code ##################

    str_149793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6658, (-1)), 'str', '\n    Expand the shape of an array.\n\n    Expands the shape of the array by including a new axis before the one\n    specified by the `axis` parameter. This function behaves the same as\n    `numpy.expand_dims` but preserves masked elements.\n\n    See Also\n    --------\n    numpy.expand_dims : Equivalent function in top-level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = ma.array([1, 2, 4])\n    >>> x[1] = ma.masked\n    >>> x\n    masked_array(data = [1 -- 4],\n                 mask = [False  True False],\n           fill_value = 999999)\n    >>> np.expand_dims(x, axis=0)\n    array([[1, 2, 4]])\n    >>> ma.expand_dims(x, axis=0)\n    masked_array(data =\n     [[1 -- 4]],\n                 mask =\n     [[False  True False]],\n           fill_value = 999999)\n\n    The same result can be achieved using slicing syntax with `np.newaxis`.\n\n    >>> x[np.newaxis, :]\n    masked_array(data =\n     [[1 -- 4]],\n                 mask =\n     [[False  True False]],\n           fill_value = 999999)\n\n    ')
    
    # Assigning a Call to a Name (line 6659):
    
    # Assigning a Call to a Name (line 6659):
    
    # Call to n_expand_dims(...): (line 6659)
    # Processing the call arguments (line 6659)
    # Getting the type of 'x' (line 6659)
    x_149795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6659, 27), 'x', False)
    # Getting the type of 'axis' (line 6659)
    axis_149796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6659, 30), 'axis', False)
    # Processing the call keyword arguments (line 6659)
    kwargs_149797 = {}
    # Getting the type of 'n_expand_dims' (line 6659)
    n_expand_dims_149794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6659, 13), 'n_expand_dims', False)
    # Calling n_expand_dims(args, kwargs) (line 6659)
    n_expand_dims_call_result_149798 = invoke(stypy.reporting.localization.Localization(__file__, 6659, 13), n_expand_dims_149794, *[x_149795, axis_149796], **kwargs_149797)
    
    # Assigning a type to the variable 'result' (line 6659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6659, 4), 'result', n_expand_dims_call_result_149798)
    
    
    # Call to isinstance(...): (line 6660)
    # Processing the call arguments (line 6660)
    # Getting the type of 'x' (line 6660)
    x_149800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6660, 18), 'x', False)
    # Getting the type of 'MaskedArray' (line 6660)
    MaskedArray_149801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6660, 21), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6660)
    kwargs_149802 = {}
    # Getting the type of 'isinstance' (line 6660)
    isinstance_149799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6660, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 6660)
    isinstance_call_result_149803 = invoke(stypy.reporting.localization.Localization(__file__, 6660, 7), isinstance_149799, *[x_149800, MaskedArray_149801], **kwargs_149802)
    
    # Testing the type of an if condition (line 6660)
    if_condition_149804 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6660, 4), isinstance_call_result_149803)
    # Assigning a type to the variable 'if_condition_149804' (line 6660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6660, 4), 'if_condition_149804', if_condition_149804)
    # SSA begins for if statement (line 6660)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 6661):
    
    # Assigning a Attribute to a Name (line 6661):
    # Getting the type of 'result' (line 6661)
    result_149805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6661, 20), 'result')
    # Obtaining the member 'shape' of a type (line 6661)
    shape_149806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6661, 20), result_149805, 'shape')
    # Assigning a type to the variable 'new_shape' (line 6661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6661, 8), 'new_shape', shape_149806)
    
    # Assigning a Call to a Name (line 6662):
    
    # Assigning a Call to a Name (line 6662):
    
    # Call to view(...): (line 6662)
    # Processing the call keyword arguments (line 6662)
    kwargs_149809 = {}
    # Getting the type of 'x' (line 6662)
    x_149807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6662, 17), 'x', False)
    # Obtaining the member 'view' of a type (line 6662)
    view_149808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6662, 17), x_149807, 'view')
    # Calling view(args, kwargs) (line 6662)
    view_call_result_149810 = invoke(stypy.reporting.localization.Localization(__file__, 6662, 17), view_149808, *[], **kwargs_149809)
    
    # Assigning a type to the variable 'result' (line 6662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6662, 8), 'result', view_call_result_149810)
    
    # Assigning a Name to a Attribute (line 6663):
    
    # Assigning a Name to a Attribute (line 6663):
    # Getting the type of 'new_shape' (line 6663)
    new_shape_149811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6663, 23), 'new_shape')
    # Getting the type of 'result' (line 6663)
    result_149812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6663, 8), 'result')
    # Setting the type of the member 'shape' of a type (line 6663)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6663, 8), result_149812, 'shape', new_shape_149811)
    
    
    # Getting the type of 'result' (line 6664)
    result_149813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6664, 11), 'result')
    # Obtaining the member '_mask' of a type (line 6664)
    _mask_149814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6664, 11), result_149813, '_mask')
    # Getting the type of 'nomask' (line 6664)
    nomask_149815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6664, 31), 'nomask')
    # Applying the binary operator 'isnot' (line 6664)
    result_is_not_149816 = python_operator(stypy.reporting.localization.Localization(__file__, 6664, 11), 'isnot', _mask_149814, nomask_149815)
    
    # Testing the type of an if condition (line 6664)
    if_condition_149817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6664, 8), result_is_not_149816)
    # Assigning a type to the variable 'if_condition_149817' (line 6664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6664, 8), 'if_condition_149817', if_condition_149817)
    # SSA begins for if statement (line 6664)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Attribute (line 6665):
    
    # Assigning a Name to a Attribute (line 6665):
    # Getting the type of 'new_shape' (line 6665)
    new_shape_149818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6665, 33), 'new_shape')
    # Getting the type of 'result' (line 6665)
    result_149819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6665, 12), 'result')
    # Obtaining the member '_mask' of a type (line 6665)
    _mask_149820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6665, 12), result_149819, '_mask')
    # Setting the type of the member 'shape' of a type (line 6665)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6665, 12), _mask_149820, 'shape', new_shape_149818)
    # SSA join for if statement (line 6664)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 6660)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 6666)
    result_149821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6666, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 6666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6666, 4), 'stypy_return_type', result_149821)
    
    # ################# End of 'expand_dims(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'expand_dims' in the type store
    # Getting the type of 'stypy_return_type' (line 6619)
    stypy_return_type_149822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6619, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149822)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'expand_dims'
    return stypy_return_type_149822

# Assigning a type to the variable 'expand_dims' (line 6619)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6619, 0), 'expand_dims', expand_dims)

@norecursion
def left_shift(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'left_shift'
    module_type_store = module_type_store.open_function_context('left_shift', 6669, 0, False)
    
    # Passed parameters checking function
    left_shift.stypy_localization = localization
    left_shift.stypy_type_of_self = None
    left_shift.stypy_type_store = module_type_store
    left_shift.stypy_function_name = 'left_shift'
    left_shift.stypy_param_names_list = ['a', 'n']
    left_shift.stypy_varargs_param_name = None
    left_shift.stypy_kwargs_param_name = None
    left_shift.stypy_call_defaults = defaults
    left_shift.stypy_call_varargs = varargs
    left_shift.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'left_shift', ['a', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'left_shift', localization, ['a', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'left_shift(...)' code ##################

    str_149823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6680, (-1)), 'str', '\n    Shift the bits of an integer to the left.\n\n    This is the masked array version of `numpy.left_shift`, for details\n    see that function.\n\n    See Also\n    --------\n    numpy.left_shift\n\n    ')
    
    # Assigning a Call to a Name (line 6681):
    
    # Assigning a Call to a Name (line 6681):
    
    # Call to getmask(...): (line 6681)
    # Processing the call arguments (line 6681)
    # Getting the type of 'a' (line 6681)
    a_149825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6681, 16), 'a', False)
    # Processing the call keyword arguments (line 6681)
    kwargs_149826 = {}
    # Getting the type of 'getmask' (line 6681)
    getmask_149824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6681, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6681)
    getmask_call_result_149827 = invoke(stypy.reporting.localization.Localization(__file__, 6681, 8), getmask_149824, *[a_149825], **kwargs_149826)
    
    # Assigning a type to the variable 'm' (line 6681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6681, 4), 'm', getmask_call_result_149827)
    
    
    # Getting the type of 'm' (line 6682)
    m_149828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6682, 7), 'm')
    # Getting the type of 'nomask' (line 6682)
    nomask_149829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6682, 12), 'nomask')
    # Applying the binary operator 'is' (line 6682)
    result_is__149830 = python_operator(stypy.reporting.localization.Localization(__file__, 6682, 7), 'is', m_149828, nomask_149829)
    
    # Testing the type of an if condition (line 6682)
    if_condition_149831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6682, 4), result_is__149830)
    # Assigning a type to the variable 'if_condition_149831' (line 6682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6682, 4), 'if_condition_149831', if_condition_149831)
    # SSA begins for if statement (line 6682)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 6683):
    
    # Assigning a Call to a Name (line 6683):
    
    # Call to left_shift(...): (line 6683)
    # Processing the call arguments (line 6683)
    
    # Call to filled(...): (line 6683)
    # Processing the call arguments (line 6683)
    # Getting the type of 'a' (line 6683)
    a_149835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6683, 36), 'a', False)
    # Processing the call keyword arguments (line 6683)
    kwargs_149836 = {}
    # Getting the type of 'filled' (line 6683)
    filled_149834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6683, 29), 'filled', False)
    # Calling filled(args, kwargs) (line 6683)
    filled_call_result_149837 = invoke(stypy.reporting.localization.Localization(__file__, 6683, 29), filled_149834, *[a_149835], **kwargs_149836)
    
    # Getting the type of 'n' (line 6683)
    n_149838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6683, 40), 'n', False)
    # Processing the call keyword arguments (line 6683)
    kwargs_149839 = {}
    # Getting the type of 'umath' (line 6683)
    umath_149832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6683, 12), 'umath', False)
    # Obtaining the member 'left_shift' of a type (line 6683)
    left_shift_149833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6683, 12), umath_149832, 'left_shift')
    # Calling left_shift(args, kwargs) (line 6683)
    left_shift_call_result_149840 = invoke(stypy.reporting.localization.Localization(__file__, 6683, 12), left_shift_149833, *[filled_call_result_149837, n_149838], **kwargs_149839)
    
    # Assigning a type to the variable 'd' (line 6683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6683, 8), 'd', left_shift_call_result_149840)
    
    # Call to masked_array(...): (line 6684)
    # Processing the call arguments (line 6684)
    # Getting the type of 'd' (line 6684)
    d_149842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6684, 28), 'd', False)
    # Processing the call keyword arguments (line 6684)
    kwargs_149843 = {}
    # Getting the type of 'masked_array' (line 6684)
    masked_array_149841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6684, 15), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 6684)
    masked_array_call_result_149844 = invoke(stypy.reporting.localization.Localization(__file__, 6684, 15), masked_array_149841, *[d_149842], **kwargs_149843)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6684, 8), 'stypy_return_type', masked_array_call_result_149844)
    # SSA branch for the else part of an if statement (line 6682)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 6686):
    
    # Assigning a Call to a Name (line 6686):
    
    # Call to left_shift(...): (line 6686)
    # Processing the call arguments (line 6686)
    
    # Call to filled(...): (line 6686)
    # Processing the call arguments (line 6686)
    # Getting the type of 'a' (line 6686)
    a_149848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6686, 36), 'a', False)
    int_149849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6686, 39), 'int')
    # Processing the call keyword arguments (line 6686)
    kwargs_149850 = {}
    # Getting the type of 'filled' (line 6686)
    filled_149847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6686, 29), 'filled', False)
    # Calling filled(args, kwargs) (line 6686)
    filled_call_result_149851 = invoke(stypy.reporting.localization.Localization(__file__, 6686, 29), filled_149847, *[a_149848, int_149849], **kwargs_149850)
    
    # Getting the type of 'n' (line 6686)
    n_149852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6686, 43), 'n', False)
    # Processing the call keyword arguments (line 6686)
    kwargs_149853 = {}
    # Getting the type of 'umath' (line 6686)
    umath_149845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6686, 12), 'umath', False)
    # Obtaining the member 'left_shift' of a type (line 6686)
    left_shift_149846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6686, 12), umath_149845, 'left_shift')
    # Calling left_shift(args, kwargs) (line 6686)
    left_shift_call_result_149854 = invoke(stypy.reporting.localization.Localization(__file__, 6686, 12), left_shift_149846, *[filled_call_result_149851, n_149852], **kwargs_149853)
    
    # Assigning a type to the variable 'd' (line 6686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6686, 8), 'd', left_shift_call_result_149854)
    
    # Call to masked_array(...): (line 6687)
    # Processing the call arguments (line 6687)
    # Getting the type of 'd' (line 6687)
    d_149856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6687, 28), 'd', False)
    # Processing the call keyword arguments (line 6687)
    # Getting the type of 'm' (line 6687)
    m_149857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6687, 36), 'm', False)
    keyword_149858 = m_149857
    kwargs_149859 = {'mask': keyword_149858}
    # Getting the type of 'masked_array' (line 6687)
    masked_array_149855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6687, 15), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 6687)
    masked_array_call_result_149860 = invoke(stypy.reporting.localization.Localization(__file__, 6687, 15), masked_array_149855, *[d_149856], **kwargs_149859)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6687, 8), 'stypy_return_type', masked_array_call_result_149860)
    # SSA join for if statement (line 6682)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'left_shift(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'left_shift' in the type store
    # Getting the type of 'stypy_return_type' (line 6669)
    stypy_return_type_149861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6669, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149861)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'left_shift'
    return stypy_return_type_149861

# Assigning a type to the variable 'left_shift' (line 6669)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6669, 0), 'left_shift', left_shift)

@norecursion
def right_shift(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'right_shift'
    module_type_store = module_type_store.open_function_context('right_shift', 6690, 0, False)
    
    # Passed parameters checking function
    right_shift.stypy_localization = localization
    right_shift.stypy_type_of_self = None
    right_shift.stypy_type_store = module_type_store
    right_shift.stypy_function_name = 'right_shift'
    right_shift.stypy_param_names_list = ['a', 'n']
    right_shift.stypy_varargs_param_name = None
    right_shift.stypy_kwargs_param_name = None
    right_shift.stypy_call_defaults = defaults
    right_shift.stypy_call_varargs = varargs
    right_shift.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'right_shift', ['a', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'right_shift', localization, ['a', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'right_shift(...)' code ##################

    str_149862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6701, (-1)), 'str', '\n    Shift the bits of an integer to the right.\n\n    This is the masked array version of `numpy.right_shift`, for details\n    see that function.\n\n    See Also\n    --------\n    numpy.right_shift\n\n    ')
    
    # Assigning a Call to a Name (line 6702):
    
    # Assigning a Call to a Name (line 6702):
    
    # Call to getmask(...): (line 6702)
    # Processing the call arguments (line 6702)
    # Getting the type of 'a' (line 6702)
    a_149864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6702, 16), 'a', False)
    # Processing the call keyword arguments (line 6702)
    kwargs_149865 = {}
    # Getting the type of 'getmask' (line 6702)
    getmask_149863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6702, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6702)
    getmask_call_result_149866 = invoke(stypy.reporting.localization.Localization(__file__, 6702, 8), getmask_149863, *[a_149864], **kwargs_149865)
    
    # Assigning a type to the variable 'm' (line 6702)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6702, 4), 'm', getmask_call_result_149866)
    
    
    # Getting the type of 'm' (line 6703)
    m_149867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6703, 7), 'm')
    # Getting the type of 'nomask' (line 6703)
    nomask_149868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6703, 12), 'nomask')
    # Applying the binary operator 'is' (line 6703)
    result_is__149869 = python_operator(stypy.reporting.localization.Localization(__file__, 6703, 7), 'is', m_149867, nomask_149868)
    
    # Testing the type of an if condition (line 6703)
    if_condition_149870 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6703, 4), result_is__149869)
    # Assigning a type to the variable 'if_condition_149870' (line 6703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6703, 4), 'if_condition_149870', if_condition_149870)
    # SSA begins for if statement (line 6703)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 6704):
    
    # Assigning a Call to a Name (line 6704):
    
    # Call to right_shift(...): (line 6704)
    # Processing the call arguments (line 6704)
    
    # Call to filled(...): (line 6704)
    # Processing the call arguments (line 6704)
    # Getting the type of 'a' (line 6704)
    a_149874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6704, 37), 'a', False)
    # Processing the call keyword arguments (line 6704)
    kwargs_149875 = {}
    # Getting the type of 'filled' (line 6704)
    filled_149873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6704, 30), 'filled', False)
    # Calling filled(args, kwargs) (line 6704)
    filled_call_result_149876 = invoke(stypy.reporting.localization.Localization(__file__, 6704, 30), filled_149873, *[a_149874], **kwargs_149875)
    
    # Getting the type of 'n' (line 6704)
    n_149877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6704, 41), 'n', False)
    # Processing the call keyword arguments (line 6704)
    kwargs_149878 = {}
    # Getting the type of 'umath' (line 6704)
    umath_149871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6704, 12), 'umath', False)
    # Obtaining the member 'right_shift' of a type (line 6704)
    right_shift_149872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6704, 12), umath_149871, 'right_shift')
    # Calling right_shift(args, kwargs) (line 6704)
    right_shift_call_result_149879 = invoke(stypy.reporting.localization.Localization(__file__, 6704, 12), right_shift_149872, *[filled_call_result_149876, n_149877], **kwargs_149878)
    
    # Assigning a type to the variable 'd' (line 6704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6704, 8), 'd', right_shift_call_result_149879)
    
    # Call to masked_array(...): (line 6705)
    # Processing the call arguments (line 6705)
    # Getting the type of 'd' (line 6705)
    d_149881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6705, 28), 'd', False)
    # Processing the call keyword arguments (line 6705)
    kwargs_149882 = {}
    # Getting the type of 'masked_array' (line 6705)
    masked_array_149880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6705, 15), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 6705)
    masked_array_call_result_149883 = invoke(stypy.reporting.localization.Localization(__file__, 6705, 15), masked_array_149880, *[d_149881], **kwargs_149882)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6705, 8), 'stypy_return_type', masked_array_call_result_149883)
    # SSA branch for the else part of an if statement (line 6703)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 6707):
    
    # Assigning a Call to a Name (line 6707):
    
    # Call to right_shift(...): (line 6707)
    # Processing the call arguments (line 6707)
    
    # Call to filled(...): (line 6707)
    # Processing the call arguments (line 6707)
    # Getting the type of 'a' (line 6707)
    a_149887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6707, 37), 'a', False)
    int_149888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6707, 40), 'int')
    # Processing the call keyword arguments (line 6707)
    kwargs_149889 = {}
    # Getting the type of 'filled' (line 6707)
    filled_149886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6707, 30), 'filled', False)
    # Calling filled(args, kwargs) (line 6707)
    filled_call_result_149890 = invoke(stypy.reporting.localization.Localization(__file__, 6707, 30), filled_149886, *[a_149887, int_149888], **kwargs_149889)
    
    # Getting the type of 'n' (line 6707)
    n_149891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6707, 44), 'n', False)
    # Processing the call keyword arguments (line 6707)
    kwargs_149892 = {}
    # Getting the type of 'umath' (line 6707)
    umath_149884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6707, 12), 'umath', False)
    # Obtaining the member 'right_shift' of a type (line 6707)
    right_shift_149885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6707, 12), umath_149884, 'right_shift')
    # Calling right_shift(args, kwargs) (line 6707)
    right_shift_call_result_149893 = invoke(stypy.reporting.localization.Localization(__file__, 6707, 12), right_shift_149885, *[filled_call_result_149890, n_149891], **kwargs_149892)
    
    # Assigning a type to the variable 'd' (line 6707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6707, 8), 'd', right_shift_call_result_149893)
    
    # Call to masked_array(...): (line 6708)
    # Processing the call arguments (line 6708)
    # Getting the type of 'd' (line 6708)
    d_149895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6708, 28), 'd', False)
    # Processing the call keyword arguments (line 6708)
    # Getting the type of 'm' (line 6708)
    m_149896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6708, 36), 'm', False)
    keyword_149897 = m_149896
    kwargs_149898 = {'mask': keyword_149897}
    # Getting the type of 'masked_array' (line 6708)
    masked_array_149894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6708, 15), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 6708)
    masked_array_call_result_149899 = invoke(stypy.reporting.localization.Localization(__file__, 6708, 15), masked_array_149894, *[d_149895], **kwargs_149898)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6708, 8), 'stypy_return_type', masked_array_call_result_149899)
    # SSA join for if statement (line 6703)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'right_shift(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'right_shift' in the type store
    # Getting the type of 'stypy_return_type' (line 6690)
    stypy_return_type_149900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6690, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149900)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'right_shift'
    return stypy_return_type_149900

# Assigning a type to the variable 'right_shift' (line 6690)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6690, 0), 'right_shift', right_shift)

@norecursion
def put(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_149901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6711, 33), 'str', 'raise')
    defaults = [str_149901]
    # Create a new context for function 'put'
    module_type_store = module_type_store.open_function_context('put', 6711, 0, False)
    
    # Passed parameters checking function
    put.stypy_localization = localization
    put.stypy_type_of_self = None
    put.stypy_type_store = module_type_store
    put.stypy_function_name = 'put'
    put.stypy_param_names_list = ['a', 'indices', 'values', 'mode']
    put.stypy_varargs_param_name = None
    put.stypy_kwargs_param_name = None
    put.stypy_call_defaults = defaults
    put.stypy_call_varargs = varargs
    put.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'put', ['a', 'indices', 'values', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'put', localization, ['a', 'indices', 'values', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'put(...)' code ##################

    str_149902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6722, (-1)), 'str', '\n    Set storage-indexed locations to corresponding values.\n\n    This function is equivalent to `MaskedArray.put`, see that method\n    for details.\n\n    See Also\n    --------\n    MaskedArray.put\n\n    ')
    
    
    # SSA begins for try-except statement (line 6724)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to put(...): (line 6725)
    # Processing the call arguments (line 6725)
    # Getting the type of 'indices' (line 6725)
    indices_149905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6725, 21), 'indices', False)
    # Getting the type of 'values' (line 6725)
    values_149906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6725, 30), 'values', False)
    # Processing the call keyword arguments (line 6725)
    # Getting the type of 'mode' (line 6725)
    mode_149907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6725, 43), 'mode', False)
    keyword_149908 = mode_149907
    kwargs_149909 = {'mode': keyword_149908}
    # Getting the type of 'a' (line 6725)
    a_149903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6725, 15), 'a', False)
    # Obtaining the member 'put' of a type (line 6725)
    put_149904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6725, 15), a_149903, 'put')
    # Calling put(args, kwargs) (line 6725)
    put_call_result_149910 = invoke(stypy.reporting.localization.Localization(__file__, 6725, 15), put_149904, *[indices_149905, values_149906], **kwargs_149909)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6725, 8), 'stypy_return_type', put_call_result_149910)
    # SSA branch for the except part of a try statement (line 6724)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 6724)
    module_type_store.open_ssa_branch('except')
    
    # Call to put(...): (line 6727)
    # Processing the call arguments (line 6727)
    # Getting the type of 'indices' (line 6727)
    indices_149918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6727, 41), 'indices', False)
    # Getting the type of 'values' (line 6727)
    values_149919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6727, 50), 'values', False)
    # Processing the call keyword arguments (line 6727)
    # Getting the type of 'mode' (line 6727)
    mode_149920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6727, 63), 'mode', False)
    keyword_149921 = mode_149920
    kwargs_149922 = {'mode': keyword_149921}
    
    # Call to narray(...): (line 6727)
    # Processing the call arguments (line 6727)
    # Getting the type of 'a' (line 6727)
    a_149912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6727, 22), 'a', False)
    # Processing the call keyword arguments (line 6727)
    # Getting the type of 'False' (line 6727)
    False_149913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6727, 30), 'False', False)
    keyword_149914 = False_149913
    kwargs_149915 = {'copy': keyword_149914}
    # Getting the type of 'narray' (line 6727)
    narray_149911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6727, 15), 'narray', False)
    # Calling narray(args, kwargs) (line 6727)
    narray_call_result_149916 = invoke(stypy.reporting.localization.Localization(__file__, 6727, 15), narray_149911, *[a_149912], **kwargs_149915)
    
    # Obtaining the member 'put' of a type (line 6727)
    put_149917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6727, 15), narray_call_result_149916, 'put')
    # Calling put(args, kwargs) (line 6727)
    put_call_result_149923 = invoke(stypy.reporting.localization.Localization(__file__, 6727, 15), put_149917, *[indices_149918, values_149919], **kwargs_149922)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6727, 8), 'stypy_return_type', put_call_result_149923)
    # SSA join for try-except statement (line 6724)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'put(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'put' in the type store
    # Getting the type of 'stypy_return_type' (line 6711)
    stypy_return_type_149924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6711, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_149924)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'put'
    return stypy_return_type_149924

# Assigning a type to the variable 'put' (line 6711)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6711, 0), 'put', put)

@norecursion
def putmask(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'putmask'
    module_type_store = module_type_store.open_function_context('putmask', 6730, 0, False)
    
    # Passed parameters checking function
    putmask.stypy_localization = localization
    putmask.stypy_type_of_self = None
    putmask.stypy_type_store = module_type_store
    putmask.stypy_function_name = 'putmask'
    putmask.stypy_param_names_list = ['a', 'mask', 'values']
    putmask.stypy_varargs_param_name = None
    putmask.stypy_kwargs_param_name = None
    putmask.stypy_call_defaults = defaults
    putmask.stypy_call_varargs = varargs
    putmask.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'putmask', ['a', 'mask', 'values'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'putmask', localization, ['a', 'mask', 'values'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'putmask(...)' code ##################

    str_149925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6746, (-1)), 'str', '\n    Changes elements of an array based on conditional and input values.\n\n    This is the masked array version of `numpy.putmask`, for details see\n    `numpy.putmask`.\n\n    See Also\n    --------\n    numpy.putmask\n\n    Notes\n    -----\n    Using a masked array as `values` will **not** transform a `ndarray` into\n    a `MaskedArray`.\n\n    ')
    
    
    
    # Call to isinstance(...): (line 6748)
    # Processing the call arguments (line 6748)
    # Getting the type of 'a' (line 6748)
    a_149927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6748, 22), 'a', False)
    # Getting the type of 'MaskedArray' (line 6748)
    MaskedArray_149928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6748, 25), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6748)
    kwargs_149929 = {}
    # Getting the type of 'isinstance' (line 6748)
    isinstance_149926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6748, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 6748)
    isinstance_call_result_149930 = invoke(stypy.reporting.localization.Localization(__file__, 6748, 11), isinstance_149926, *[a_149927, MaskedArray_149928], **kwargs_149929)
    
    # Applying the 'not' unary operator (line 6748)
    result_not__149931 = python_operator(stypy.reporting.localization.Localization(__file__, 6748, 7), 'not', isinstance_call_result_149930)
    
    # Testing the type of an if condition (line 6748)
    if_condition_149932 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6748, 4), result_not__149931)
    # Assigning a type to the variable 'if_condition_149932' (line 6748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6748, 4), 'if_condition_149932', if_condition_149932)
    # SSA begins for if statement (line 6748)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 6749):
    
    # Assigning a Call to a Name (line 6749):
    
    # Call to view(...): (line 6749)
    # Processing the call arguments (line 6749)
    # Getting the type of 'MaskedArray' (line 6749)
    MaskedArray_149935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6749, 19), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6749)
    kwargs_149936 = {}
    # Getting the type of 'a' (line 6749)
    a_149933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6749, 12), 'a', False)
    # Obtaining the member 'view' of a type (line 6749)
    view_149934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6749, 12), a_149933, 'view')
    # Calling view(args, kwargs) (line 6749)
    view_call_result_149937 = invoke(stypy.reporting.localization.Localization(__file__, 6749, 12), view_149934, *[MaskedArray_149935], **kwargs_149936)
    
    # Assigning a type to the variable 'a' (line 6749)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6749, 8), 'a', view_call_result_149937)
    # SSA join for if statement (line 6748)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Tuple (line 6750):
    
    # Assigning a Call to a Name (line 6750):
    
    # Call to getdata(...): (line 6750)
    # Processing the call arguments (line 6750)
    # Getting the type of 'values' (line 6750)
    values_149939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6750, 34), 'values', False)
    # Processing the call keyword arguments (line 6750)
    kwargs_149940 = {}
    # Getting the type of 'getdata' (line 6750)
    getdata_149938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6750, 26), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6750)
    getdata_call_result_149941 = invoke(stypy.reporting.localization.Localization(__file__, 6750, 26), getdata_149938, *[values_149939], **kwargs_149940)
    
    # Assigning a type to the variable 'tuple_assignment_139205' (line 6750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6750, 4), 'tuple_assignment_139205', getdata_call_result_149941)
    
    # Assigning a Call to a Name (line 6750):
    
    # Call to getmask(...): (line 6750)
    # Processing the call arguments (line 6750)
    # Getting the type of 'values' (line 6750)
    values_149943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6750, 51), 'values', False)
    # Processing the call keyword arguments (line 6750)
    kwargs_149944 = {}
    # Getting the type of 'getmask' (line 6750)
    getmask_149942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6750, 43), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6750)
    getmask_call_result_149945 = invoke(stypy.reporting.localization.Localization(__file__, 6750, 43), getmask_149942, *[values_149943], **kwargs_149944)
    
    # Assigning a type to the variable 'tuple_assignment_139206' (line 6750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6750, 4), 'tuple_assignment_139206', getmask_call_result_149945)
    
    # Assigning a Name to a Name (line 6750):
    # Getting the type of 'tuple_assignment_139205' (line 6750)
    tuple_assignment_139205_149946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6750, 4), 'tuple_assignment_139205')
    # Assigning a type to the variable 'valdata' (line 6750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6750, 5), 'valdata', tuple_assignment_139205_149946)
    
    # Assigning a Name to a Name (line 6750):
    # Getting the type of 'tuple_assignment_139206' (line 6750)
    tuple_assignment_139206_149947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6750, 4), 'tuple_assignment_139206')
    # Assigning a type to the variable 'valmask' (line 6750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6750, 14), 'valmask', tuple_assignment_139206_149947)
    
    
    
    # Call to getmask(...): (line 6751)
    # Processing the call arguments (line 6751)
    # Getting the type of 'a' (line 6751)
    a_149949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6751, 15), 'a', False)
    # Processing the call keyword arguments (line 6751)
    kwargs_149950 = {}
    # Getting the type of 'getmask' (line 6751)
    getmask_149948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6751, 7), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6751)
    getmask_call_result_149951 = invoke(stypy.reporting.localization.Localization(__file__, 6751, 7), getmask_149948, *[a_149949], **kwargs_149950)
    
    # Getting the type of 'nomask' (line 6751)
    nomask_149952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6751, 21), 'nomask')
    # Applying the binary operator 'is' (line 6751)
    result_is__149953 = python_operator(stypy.reporting.localization.Localization(__file__, 6751, 7), 'is', getmask_call_result_149951, nomask_149952)
    
    # Testing the type of an if condition (line 6751)
    if_condition_149954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6751, 4), result_is__149953)
    # Assigning a type to the variable 'if_condition_149954' (line 6751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6751, 4), 'if_condition_149954', if_condition_149954)
    # SSA begins for if statement (line 6751)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'valmask' (line 6752)
    valmask_149955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6752, 11), 'valmask')
    # Getting the type of 'nomask' (line 6752)
    nomask_149956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6752, 26), 'nomask')
    # Applying the binary operator 'isnot' (line 6752)
    result_is_not_149957 = python_operator(stypy.reporting.localization.Localization(__file__, 6752, 11), 'isnot', valmask_149955, nomask_149956)
    
    # Testing the type of an if condition (line 6752)
    if_condition_149958 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6752, 8), result_is_not_149957)
    # Assigning a type to the variable 'if_condition_149958' (line 6752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6752, 8), 'if_condition_149958', if_condition_149958)
    # SSA begins for if statement (line 6752)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Attribute (line 6753):
    
    # Assigning a Name to a Attribute (line 6753):
    # Getting the type of 'True' (line 6753)
    True_149959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6753, 28), 'True')
    # Getting the type of 'a' (line 6753)
    a_149960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6753, 12), 'a')
    # Setting the type of the member '_sharedmask' of a type (line 6753)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6753, 12), a_149960, '_sharedmask', True_149959)
    
    # Assigning a Call to a Attribute (line 6754):
    
    # Assigning a Call to a Attribute (line 6754):
    
    # Call to make_mask_none(...): (line 6754)
    # Processing the call arguments (line 6754)
    # Getting the type of 'a' (line 6754)
    a_149962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6754, 37), 'a', False)
    # Obtaining the member 'shape' of a type (line 6754)
    shape_149963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6754, 37), a_149962, 'shape')
    # Getting the type of 'a' (line 6754)
    a_149964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6754, 46), 'a', False)
    # Obtaining the member 'dtype' of a type (line 6754)
    dtype_149965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6754, 46), a_149964, 'dtype')
    # Processing the call keyword arguments (line 6754)
    kwargs_149966 = {}
    # Getting the type of 'make_mask_none' (line 6754)
    make_mask_none_149961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6754, 22), 'make_mask_none', False)
    # Calling make_mask_none(args, kwargs) (line 6754)
    make_mask_none_call_result_149967 = invoke(stypy.reporting.localization.Localization(__file__, 6754, 22), make_mask_none_149961, *[shape_149963, dtype_149965], **kwargs_149966)
    
    # Getting the type of 'a' (line 6754)
    a_149968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6754, 12), 'a')
    # Setting the type of the member '_mask' of a type (line 6754)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6754, 12), a_149968, '_mask', make_mask_none_call_result_149967)
    
    # Call to copyto(...): (line 6755)
    # Processing the call arguments (line 6755)
    # Getting the type of 'a' (line 6755)
    a_149971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6755, 22), 'a', False)
    # Obtaining the member '_mask' of a type (line 6755)
    _mask_149972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6755, 22), a_149971, '_mask')
    # Getting the type of 'valmask' (line 6755)
    valmask_149973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6755, 31), 'valmask', False)
    # Processing the call keyword arguments (line 6755)
    # Getting the type of 'mask' (line 6755)
    mask_149974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6755, 46), 'mask', False)
    keyword_149975 = mask_149974
    kwargs_149976 = {'where': keyword_149975}
    # Getting the type of 'np' (line 6755)
    np_149969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6755, 12), 'np', False)
    # Obtaining the member 'copyto' of a type (line 6755)
    copyto_149970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6755, 12), np_149969, 'copyto')
    # Calling copyto(args, kwargs) (line 6755)
    copyto_call_result_149977 = invoke(stypy.reporting.localization.Localization(__file__, 6755, 12), copyto_149970, *[_mask_149972, valmask_149973], **kwargs_149976)
    
    # SSA join for if statement (line 6752)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 6751)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'a' (line 6756)
    a_149978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6756, 9), 'a')
    # Obtaining the member '_hardmask' of a type (line 6756)
    _hardmask_149979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6756, 9), a_149978, '_hardmask')
    # Testing the type of an if condition (line 6756)
    if_condition_149980 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6756, 9), _hardmask_149979)
    # Assigning a type to the variable 'if_condition_149980' (line 6756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6756, 9), 'if_condition_149980', if_condition_149980)
    # SSA begins for if statement (line 6756)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'valmask' (line 6757)
    valmask_149981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6757, 11), 'valmask')
    # Getting the type of 'nomask' (line 6757)
    nomask_149982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6757, 26), 'nomask')
    # Applying the binary operator 'isnot' (line 6757)
    result_is_not_149983 = python_operator(stypy.reporting.localization.Localization(__file__, 6757, 11), 'isnot', valmask_149981, nomask_149982)
    
    # Testing the type of an if condition (line 6757)
    if_condition_149984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6757, 8), result_is_not_149983)
    # Assigning a type to the variable 'if_condition_149984' (line 6757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6757, 8), 'if_condition_149984', if_condition_149984)
    # SSA begins for if statement (line 6757)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 6758):
    
    # Assigning a Call to a Name (line 6758):
    
    # Call to copy(...): (line 6758)
    # Processing the call keyword arguments (line 6758)
    kwargs_149988 = {}
    # Getting the type of 'a' (line 6758)
    a_149985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6758, 16), 'a', False)
    # Obtaining the member '_mask' of a type (line 6758)
    _mask_149986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6758, 16), a_149985, '_mask')
    # Obtaining the member 'copy' of a type (line 6758)
    copy_149987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6758, 16), _mask_149986, 'copy')
    # Calling copy(args, kwargs) (line 6758)
    copy_call_result_149989 = invoke(stypy.reporting.localization.Localization(__file__, 6758, 16), copy_149987, *[], **kwargs_149988)
    
    # Assigning a type to the variable 'm' (line 6758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6758, 12), 'm', copy_call_result_149989)
    
    # Call to copyto(...): (line 6759)
    # Processing the call arguments (line 6759)
    # Getting the type of 'm' (line 6759)
    m_149992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6759, 22), 'm', False)
    # Getting the type of 'valmask' (line 6759)
    valmask_149993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6759, 25), 'valmask', False)
    # Processing the call keyword arguments (line 6759)
    # Getting the type of 'mask' (line 6759)
    mask_149994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6759, 40), 'mask', False)
    keyword_149995 = mask_149994
    kwargs_149996 = {'where': keyword_149995}
    # Getting the type of 'np' (line 6759)
    np_149990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6759, 12), 'np', False)
    # Obtaining the member 'copyto' of a type (line 6759)
    copyto_149991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6759, 12), np_149990, 'copyto')
    # Calling copyto(args, kwargs) (line 6759)
    copyto_call_result_149997 = invoke(stypy.reporting.localization.Localization(__file__, 6759, 12), copyto_149991, *[m_149992, valmask_149993], **kwargs_149996)
    
    
    # Getting the type of 'a' (line 6760)
    a_149998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6760, 12), 'a')
    # Obtaining the member 'mask' of a type (line 6760)
    mask_149999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6760, 12), a_149998, 'mask')
    # Getting the type of 'm' (line 6760)
    m_150000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6760, 22), 'm')
    # Applying the binary operator '|=' (line 6760)
    result_ior_150001 = python_operator(stypy.reporting.localization.Localization(__file__, 6760, 12), '|=', mask_149999, m_150000)
    # Getting the type of 'a' (line 6760)
    a_150002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6760, 12), 'a')
    # Setting the type of the member 'mask' of a type (line 6760)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6760, 12), a_150002, 'mask', result_ior_150001)
    
    # SSA join for if statement (line 6757)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 6756)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'valmask' (line 6762)
    valmask_150003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6762, 11), 'valmask')
    # Getting the type of 'nomask' (line 6762)
    nomask_150004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6762, 22), 'nomask')
    # Applying the binary operator 'is' (line 6762)
    result_is__150005 = python_operator(stypy.reporting.localization.Localization(__file__, 6762, 11), 'is', valmask_150003, nomask_150004)
    
    # Testing the type of an if condition (line 6762)
    if_condition_150006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6762, 8), result_is__150005)
    # Assigning a type to the variable 'if_condition_150006' (line 6762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6762, 8), 'if_condition_150006', if_condition_150006)
    # SSA begins for if statement (line 6762)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 6763):
    
    # Assigning a Call to a Name (line 6763):
    
    # Call to getmaskarray(...): (line 6763)
    # Processing the call arguments (line 6763)
    # Getting the type of 'values' (line 6763)
    values_150008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6763, 35), 'values', False)
    # Processing the call keyword arguments (line 6763)
    kwargs_150009 = {}
    # Getting the type of 'getmaskarray' (line 6763)
    getmaskarray_150007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6763, 22), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 6763)
    getmaskarray_call_result_150010 = invoke(stypy.reporting.localization.Localization(__file__, 6763, 22), getmaskarray_150007, *[values_150008], **kwargs_150009)
    
    # Assigning a type to the variable 'valmask' (line 6763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6763, 12), 'valmask', getmaskarray_call_result_150010)
    # SSA join for if statement (line 6762)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to copyto(...): (line 6764)
    # Processing the call arguments (line 6764)
    # Getting the type of 'a' (line 6764)
    a_150013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6764, 18), 'a', False)
    # Obtaining the member '_mask' of a type (line 6764)
    _mask_150014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6764, 18), a_150013, '_mask')
    # Getting the type of 'valmask' (line 6764)
    valmask_150015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6764, 27), 'valmask', False)
    # Processing the call keyword arguments (line 6764)
    # Getting the type of 'mask' (line 6764)
    mask_150016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6764, 42), 'mask', False)
    keyword_150017 = mask_150016
    kwargs_150018 = {'where': keyword_150017}
    # Getting the type of 'np' (line 6764)
    np_150011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6764, 8), 'np', False)
    # Obtaining the member 'copyto' of a type (line 6764)
    copyto_150012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6764, 8), np_150011, 'copyto')
    # Calling copyto(args, kwargs) (line 6764)
    copyto_call_result_150019 = invoke(stypy.reporting.localization.Localization(__file__, 6764, 8), copyto_150012, *[_mask_150014, valmask_150015], **kwargs_150018)
    
    # SSA join for if statement (line 6756)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 6751)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to copyto(...): (line 6765)
    # Processing the call arguments (line 6765)
    # Getting the type of 'a' (line 6765)
    a_150022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6765, 14), 'a', False)
    # Obtaining the member '_data' of a type (line 6765)
    _data_150023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6765, 14), a_150022, '_data')
    # Getting the type of 'valdata' (line 6765)
    valdata_150024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6765, 23), 'valdata', False)
    # Processing the call keyword arguments (line 6765)
    # Getting the type of 'mask' (line 6765)
    mask_150025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6765, 38), 'mask', False)
    keyword_150026 = mask_150025
    kwargs_150027 = {'where': keyword_150026}
    # Getting the type of 'np' (line 6765)
    np_150020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6765, 4), 'np', False)
    # Obtaining the member 'copyto' of a type (line 6765)
    copyto_150021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6765, 4), np_150020, 'copyto')
    # Calling copyto(args, kwargs) (line 6765)
    copyto_call_result_150028 = invoke(stypy.reporting.localization.Localization(__file__, 6765, 4), copyto_150021, *[_data_150023, valdata_150024], **kwargs_150027)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6766, 4), 'stypy_return_type', types.NoneType)
    
    # ################# End of 'putmask(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'putmask' in the type store
    # Getting the type of 'stypy_return_type' (line 6730)
    stypy_return_type_150029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6730, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150029)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'putmask'
    return stypy_return_type_150029

# Assigning a type to the variable 'putmask' (line 6730)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6730, 0), 'putmask', putmask)

@norecursion
def transpose(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6769)
    None_150030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6769, 22), 'None')
    defaults = [None_150030]
    # Create a new context for function 'transpose'
    module_type_store = module_type_store.open_function_context('transpose', 6769, 0, False)
    
    # Passed parameters checking function
    transpose.stypy_localization = localization
    transpose.stypy_type_of_self = None
    transpose.stypy_type_store = module_type_store
    transpose.stypy_function_name = 'transpose'
    transpose.stypy_param_names_list = ['a', 'axes']
    transpose.stypy_varargs_param_name = None
    transpose.stypy_kwargs_param_name = None
    transpose.stypy_call_defaults = defaults
    transpose.stypy_call_varargs = varargs
    transpose.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'transpose', ['a', 'axes'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'transpose', localization, ['a', 'axes'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'transpose(...)' code ##################

    str_150031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6801, (-1)), 'str', '\n    Permute the dimensions of an array.\n\n    This function is exactly equivalent to `numpy.transpose`.\n\n    See Also\n    --------\n    numpy.transpose : Equivalent function in top-level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> x = ma.arange(4).reshape((2,2))\n    >>> x[1, 1] = ma.masked\n    >>>> x\n    masked_array(data =\n     [[0 1]\n     [2 --]],\n                 mask =\n     [[False False]\n     [False  True]],\n           fill_value = 999999)\n    >>> ma.transpose(x)\n    masked_array(data =\n     [[0 2]\n     [1 --]],\n                 mask =\n     [[False False]\n     [False  True]],\n           fill_value = 999999)\n\n    ')
    
    
    # SSA begins for try-except statement (line 6803)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to transpose(...): (line 6804)
    # Processing the call arguments (line 6804)
    # Getting the type of 'axes' (line 6804)
    axes_150034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6804, 27), 'axes', False)
    # Processing the call keyword arguments (line 6804)
    kwargs_150035 = {}
    # Getting the type of 'a' (line 6804)
    a_150032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6804, 15), 'a', False)
    # Obtaining the member 'transpose' of a type (line 6804)
    transpose_150033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6804, 15), a_150032, 'transpose')
    # Calling transpose(args, kwargs) (line 6804)
    transpose_call_result_150036 = invoke(stypy.reporting.localization.Localization(__file__, 6804, 15), transpose_150033, *[axes_150034], **kwargs_150035)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6804, 8), 'stypy_return_type', transpose_call_result_150036)
    # SSA branch for the except part of a try statement (line 6803)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 6803)
    module_type_store.open_ssa_branch('except')
    
    # Call to view(...): (line 6806)
    # Processing the call arguments (line 6806)
    # Getting the type of 'MaskedArray' (line 6806)
    MaskedArray_150048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6806, 58), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6806)
    kwargs_150049 = {}
    
    # Call to transpose(...): (line 6806)
    # Processing the call arguments (line 6806)
    # Getting the type of 'axes' (line 6806)
    axes_150044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6806, 47), 'axes', False)
    # Processing the call keyword arguments (line 6806)
    kwargs_150045 = {}
    
    # Call to narray(...): (line 6806)
    # Processing the call arguments (line 6806)
    # Getting the type of 'a' (line 6806)
    a_150038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6806, 22), 'a', False)
    # Processing the call keyword arguments (line 6806)
    # Getting the type of 'False' (line 6806)
    False_150039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6806, 30), 'False', False)
    keyword_150040 = False_150039
    kwargs_150041 = {'copy': keyword_150040}
    # Getting the type of 'narray' (line 6806)
    narray_150037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6806, 15), 'narray', False)
    # Calling narray(args, kwargs) (line 6806)
    narray_call_result_150042 = invoke(stypy.reporting.localization.Localization(__file__, 6806, 15), narray_150037, *[a_150038], **kwargs_150041)
    
    # Obtaining the member 'transpose' of a type (line 6806)
    transpose_150043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6806, 15), narray_call_result_150042, 'transpose')
    # Calling transpose(args, kwargs) (line 6806)
    transpose_call_result_150046 = invoke(stypy.reporting.localization.Localization(__file__, 6806, 15), transpose_150043, *[axes_150044], **kwargs_150045)
    
    # Obtaining the member 'view' of a type (line 6806)
    view_150047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6806, 15), transpose_call_result_150046, 'view')
    # Calling view(args, kwargs) (line 6806)
    view_call_result_150050 = invoke(stypy.reporting.localization.Localization(__file__, 6806, 15), view_150047, *[MaskedArray_150048], **kwargs_150049)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6806, 8), 'stypy_return_type', view_call_result_150050)
    # SSA join for try-except statement (line 6803)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'transpose(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'transpose' in the type store
    # Getting the type of 'stypy_return_type' (line 6769)
    stypy_return_type_150051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6769, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150051)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'transpose'
    return stypy_return_type_150051

# Assigning a type to the variable 'transpose' (line 6769)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6769, 0), 'transpose', transpose)

@norecursion
def reshape(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_150052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6809, 32), 'str', 'C')
    defaults = [str_150052]
    # Create a new context for function 'reshape'
    module_type_store = module_type_store.open_function_context('reshape', 6809, 0, False)
    
    # Passed parameters checking function
    reshape.stypy_localization = localization
    reshape.stypy_type_of_self = None
    reshape.stypy_type_store = module_type_store
    reshape.stypy_function_name = 'reshape'
    reshape.stypy_param_names_list = ['a', 'new_shape', 'order']
    reshape.stypy_varargs_param_name = None
    reshape.stypy_kwargs_param_name = None
    reshape.stypy_call_defaults = defaults
    reshape.stypy_call_varargs = varargs
    reshape.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'reshape', ['a', 'new_shape', 'order'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'reshape', localization, ['a', 'new_shape', 'order'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'reshape(...)' code ##################

    str_150053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6819, (-1)), 'str', '\n    Returns an array containing the same data with a new shape.\n\n    Refer to `MaskedArray.reshape` for full documentation.\n\n    See Also\n    --------\n    MaskedArray.reshape : equivalent function\n\n    ')
    
    
    # SSA begins for try-except statement (line 6821)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to reshape(...): (line 6822)
    # Processing the call arguments (line 6822)
    # Getting the type of 'new_shape' (line 6822)
    new_shape_150056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6822, 25), 'new_shape', False)
    # Processing the call keyword arguments (line 6822)
    # Getting the type of 'order' (line 6822)
    order_150057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6822, 42), 'order', False)
    keyword_150058 = order_150057
    kwargs_150059 = {'order': keyword_150058}
    # Getting the type of 'a' (line 6822)
    a_150054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6822, 15), 'a', False)
    # Obtaining the member 'reshape' of a type (line 6822)
    reshape_150055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6822, 15), a_150054, 'reshape')
    # Calling reshape(args, kwargs) (line 6822)
    reshape_call_result_150060 = invoke(stypy.reporting.localization.Localization(__file__, 6822, 15), reshape_150055, *[new_shape_150056], **kwargs_150059)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6822, 8), 'stypy_return_type', reshape_call_result_150060)
    # SSA branch for the except part of a try statement (line 6821)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 6821)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 6824):
    
    # Assigning a Call to a Name (line 6824):
    
    # Call to reshape(...): (line 6824)
    # Processing the call arguments (line 6824)
    # Getting the type of 'new_shape' (line 6824)
    new_shape_150068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6824, 45), 'new_shape', False)
    # Processing the call keyword arguments (line 6824)
    # Getting the type of 'order' (line 6824)
    order_150069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6824, 62), 'order', False)
    keyword_150070 = order_150069
    kwargs_150071 = {'order': keyword_150070}
    
    # Call to narray(...): (line 6824)
    # Processing the call arguments (line 6824)
    # Getting the type of 'a' (line 6824)
    a_150062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6824, 22), 'a', False)
    # Processing the call keyword arguments (line 6824)
    # Getting the type of 'False' (line 6824)
    False_150063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6824, 30), 'False', False)
    keyword_150064 = False_150063
    kwargs_150065 = {'copy': keyword_150064}
    # Getting the type of 'narray' (line 6824)
    narray_150061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6824, 15), 'narray', False)
    # Calling narray(args, kwargs) (line 6824)
    narray_call_result_150066 = invoke(stypy.reporting.localization.Localization(__file__, 6824, 15), narray_150061, *[a_150062], **kwargs_150065)
    
    # Obtaining the member 'reshape' of a type (line 6824)
    reshape_150067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6824, 15), narray_call_result_150066, 'reshape')
    # Calling reshape(args, kwargs) (line 6824)
    reshape_call_result_150072 = invoke(stypy.reporting.localization.Localization(__file__, 6824, 15), reshape_150067, *[new_shape_150068], **kwargs_150071)
    
    # Assigning a type to the variable '_tmp' (line 6824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6824, 8), '_tmp', reshape_call_result_150072)
    
    # Call to view(...): (line 6825)
    # Processing the call arguments (line 6825)
    # Getting the type of 'MaskedArray' (line 6825)
    MaskedArray_150075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6825, 25), 'MaskedArray', False)
    # Processing the call keyword arguments (line 6825)
    kwargs_150076 = {}
    # Getting the type of '_tmp' (line 6825)
    _tmp_150073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6825, 15), '_tmp', False)
    # Obtaining the member 'view' of a type (line 6825)
    view_150074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6825, 15), _tmp_150073, 'view')
    # Calling view(args, kwargs) (line 6825)
    view_call_result_150077 = invoke(stypy.reporting.localization.Localization(__file__, 6825, 15), view_150074, *[MaskedArray_150075], **kwargs_150076)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6825, 8), 'stypy_return_type', view_call_result_150077)
    # SSA join for try-except statement (line 6821)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'reshape(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'reshape' in the type store
    # Getting the type of 'stypy_return_type' (line 6809)
    stypy_return_type_150078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6809, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150078)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'reshape'
    return stypy_return_type_150078

# Assigning a type to the variable 'reshape' (line 6809)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6809, 0), 'reshape', reshape)

@norecursion
def resize(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'resize'
    module_type_store = module_type_store.open_function_context('resize', 6828, 0, False)
    
    # Passed parameters checking function
    resize.stypy_localization = localization
    resize.stypy_type_of_self = None
    resize.stypy_type_store = module_type_store
    resize.stypy_function_name = 'resize'
    resize.stypy_param_names_list = ['x', 'new_shape']
    resize.stypy_varargs_param_name = None
    resize.stypy_kwargs_param_name = None
    resize.stypy_call_defaults = defaults
    resize.stypy_call_varargs = varargs
    resize.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'resize', ['x', 'new_shape'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'resize', localization, ['x', 'new_shape'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'resize(...)' code ##################

    str_150079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6881, (-1)), 'str', '\n    Return a new masked array with the specified size and shape.\n\n    This is the masked equivalent of the `numpy.resize` function. The new\n    array is filled with repeated copies of `x` (in the order that the\n    data are stored in memory). If `x` is masked, the new array will be\n    masked, and the new mask will be a repetition of the old one.\n\n    See Also\n    --------\n    numpy.resize : Equivalent function in the top level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.array([[1, 2] ,[3, 4]])\n    >>> a[0, 1] = ma.masked\n    >>> a\n    masked_array(data =\n     [[1 --]\n     [3 4]],\n                 mask =\n     [[False  True]\n     [False False]],\n           fill_value = 999999)\n    >>> np.resize(a, (3, 3))\n    array([[1, 2, 3],\n           [4, 1, 2],\n           [3, 4, 1]])\n    >>> ma.resize(a, (3, 3))\n    masked_array(data =\n     [[1 -- 3]\n     [4 1 --]\n     [3 4 1]],\n                 mask =\n     [[False  True False]\n     [False False  True]\n     [False False False]],\n           fill_value = 999999)\n\n    A MaskedArray is always returned, regardless of the input type.\n\n    >>> a = np.array([[1, 2] ,[3, 4]])\n    >>> ma.resize(a, (3, 3))\n    masked_array(data =\n     [[1 2 3]\n     [4 1 2]\n     [3 4 1]],\n                 mask =\n     False,\n           fill_value = 999999)\n\n    ')
    
    # Assigning a Call to a Name (line 6883):
    
    # Assigning a Call to a Name (line 6883):
    
    # Call to getmask(...): (line 6883)
    # Processing the call arguments (line 6883)
    # Getting the type of 'x' (line 6883)
    x_150081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6883, 16), 'x', False)
    # Processing the call keyword arguments (line 6883)
    kwargs_150082 = {}
    # Getting the type of 'getmask' (line 6883)
    getmask_150080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6883, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 6883)
    getmask_call_result_150083 = invoke(stypy.reporting.localization.Localization(__file__, 6883, 8), getmask_150080, *[x_150081], **kwargs_150082)
    
    # Assigning a type to the variable 'm' (line 6883)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6883, 4), 'm', getmask_call_result_150083)
    
    
    # Getting the type of 'm' (line 6884)
    m_150084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6884, 7), 'm')
    # Getting the type of 'nomask' (line 6884)
    nomask_150085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6884, 16), 'nomask')
    # Applying the binary operator 'isnot' (line 6884)
    result_is_not_150086 = python_operator(stypy.reporting.localization.Localization(__file__, 6884, 7), 'isnot', m_150084, nomask_150085)
    
    # Testing the type of an if condition (line 6884)
    if_condition_150087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6884, 4), result_is_not_150086)
    # Assigning a type to the variable 'if_condition_150087' (line 6884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6884, 4), 'if_condition_150087', if_condition_150087)
    # SSA begins for if statement (line 6884)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 6885):
    
    # Assigning a Call to a Name (line 6885):
    
    # Call to resize(...): (line 6885)
    # Processing the call arguments (line 6885)
    # Getting the type of 'm' (line 6885)
    m_150090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6885, 22), 'm', False)
    # Getting the type of 'new_shape' (line 6885)
    new_shape_150091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6885, 25), 'new_shape', False)
    # Processing the call keyword arguments (line 6885)
    kwargs_150092 = {}
    # Getting the type of 'np' (line 6885)
    np_150088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6885, 12), 'np', False)
    # Obtaining the member 'resize' of a type (line 6885)
    resize_150089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6885, 12), np_150088, 'resize')
    # Calling resize(args, kwargs) (line 6885)
    resize_call_result_150093 = invoke(stypy.reporting.localization.Localization(__file__, 6885, 12), resize_150089, *[m_150090, new_shape_150091], **kwargs_150092)
    
    # Assigning a type to the variable 'm' (line 6885)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6885, 8), 'm', resize_call_result_150093)
    # SSA join for if statement (line 6884)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 6886):
    
    # Assigning a Call to a Name (line 6886):
    
    # Call to view(...): (line 6886)
    # Processing the call arguments (line 6886)
    
    # Call to get_masked_subclass(...): (line 6886)
    # Processing the call arguments (line 6886)
    # Getting the type of 'x' (line 6886)
    x_150102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6886, 62), 'x', False)
    # Processing the call keyword arguments (line 6886)
    kwargs_150103 = {}
    # Getting the type of 'get_masked_subclass' (line 6886)
    get_masked_subclass_150101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6886, 42), 'get_masked_subclass', False)
    # Calling get_masked_subclass(args, kwargs) (line 6886)
    get_masked_subclass_call_result_150104 = invoke(stypy.reporting.localization.Localization(__file__, 6886, 42), get_masked_subclass_150101, *[x_150102], **kwargs_150103)
    
    # Processing the call keyword arguments (line 6886)
    kwargs_150105 = {}
    
    # Call to resize(...): (line 6886)
    # Processing the call arguments (line 6886)
    # Getting the type of 'x' (line 6886)
    x_150096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6886, 23), 'x', False)
    # Getting the type of 'new_shape' (line 6886)
    new_shape_150097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6886, 26), 'new_shape', False)
    # Processing the call keyword arguments (line 6886)
    kwargs_150098 = {}
    # Getting the type of 'np' (line 6886)
    np_150094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6886, 13), 'np', False)
    # Obtaining the member 'resize' of a type (line 6886)
    resize_150095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6886, 13), np_150094, 'resize')
    # Calling resize(args, kwargs) (line 6886)
    resize_call_result_150099 = invoke(stypy.reporting.localization.Localization(__file__, 6886, 13), resize_150095, *[x_150096, new_shape_150097], **kwargs_150098)
    
    # Obtaining the member 'view' of a type (line 6886)
    view_150100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6886, 13), resize_call_result_150099, 'view')
    # Calling view(args, kwargs) (line 6886)
    view_call_result_150106 = invoke(stypy.reporting.localization.Localization(__file__, 6886, 13), view_150100, *[get_masked_subclass_call_result_150104], **kwargs_150105)
    
    # Assigning a type to the variable 'result' (line 6886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6886, 4), 'result', view_call_result_150106)
    
    # Getting the type of 'result' (line 6887)
    result_150107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6887, 7), 'result')
    # Obtaining the member 'ndim' of a type (line 6887)
    ndim_150108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6887, 7), result_150107, 'ndim')
    # Testing the type of an if condition (line 6887)
    if_condition_150109 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6887, 4), ndim_150108)
    # Assigning a type to the variable 'if_condition_150109' (line 6887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6887, 4), 'if_condition_150109', if_condition_150109)
    # SSA begins for if statement (line 6887)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Attribute (line 6888):
    
    # Assigning a Name to a Attribute (line 6888):
    # Getting the type of 'm' (line 6888)
    m_150110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6888, 23), 'm')
    # Getting the type of 'result' (line 6888)
    result_150111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6888, 8), 'result')
    # Setting the type of the member '_mask' of a type (line 6888)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6888, 8), result_150111, '_mask', m_150110)
    # SSA join for if statement (line 6887)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 6889)
    result_150112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6889, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 6889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6889, 4), 'stypy_return_type', result_150112)
    
    # ################# End of 'resize(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'resize' in the type store
    # Getting the type of 'stypy_return_type' (line 6828)
    stypy_return_type_150113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6828, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150113)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'resize'
    return stypy_return_type_150113

# Assigning a type to the variable 'resize' (line 6828)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6828, 0), 'resize', resize)

@norecursion
def rank(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rank'
    module_type_store = module_type_store.open_function_context('rank', 6892, 0, False)
    
    # Passed parameters checking function
    rank.stypy_localization = localization
    rank.stypy_type_of_self = None
    rank.stypy_type_store = module_type_store
    rank.stypy_function_name = 'rank'
    rank.stypy_param_names_list = ['obj']
    rank.stypy_varargs_param_name = None
    rank.stypy_kwargs_param_name = None
    rank.stypy_call_defaults = defaults
    rank.stypy_call_varargs = varargs
    rank.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rank', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rank', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rank(...)' code ##################

    str_150114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6899, (-1)), 'str', '\n    maskedarray version of the numpy function.\n\n    .. note::\n        Deprecated since 1.10.0\n\n    ')
    
    # Call to warn(...): (line 6901)
    # Processing the call arguments (line 6901)
    str_150117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6902, 8), 'str', '`rank` is deprecated; use the `ndim` function instead. ')
    # Getting the type of 'np' (line 6903)
    np_150118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6903, 8), 'np', False)
    # Obtaining the member 'VisibleDeprecationWarning' of a type (line 6903)
    VisibleDeprecationWarning_150119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6903, 8), np_150118, 'VisibleDeprecationWarning')
    # Processing the call keyword arguments (line 6901)
    kwargs_150120 = {}
    # Getting the type of 'warnings' (line 6901)
    warnings_150115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6901, 4), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 6901)
    warn_150116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6901, 4), warnings_150115, 'warn')
    # Calling warn(args, kwargs) (line 6901)
    warn_call_result_150121 = invoke(stypy.reporting.localization.Localization(__file__, 6901, 4), warn_150116, *[str_150117, VisibleDeprecationWarning_150119], **kwargs_150120)
    
    
    # Call to ndim(...): (line 6904)
    # Processing the call arguments (line 6904)
    
    # Call to getdata(...): (line 6904)
    # Processing the call arguments (line 6904)
    # Getting the type of 'obj' (line 6904)
    obj_150125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6904, 27), 'obj', False)
    # Processing the call keyword arguments (line 6904)
    kwargs_150126 = {}
    # Getting the type of 'getdata' (line 6904)
    getdata_150124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6904, 19), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6904)
    getdata_call_result_150127 = invoke(stypy.reporting.localization.Localization(__file__, 6904, 19), getdata_150124, *[obj_150125], **kwargs_150126)
    
    # Processing the call keyword arguments (line 6904)
    kwargs_150128 = {}
    # Getting the type of 'np' (line 6904)
    np_150122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6904, 11), 'np', False)
    # Obtaining the member 'ndim' of a type (line 6904)
    ndim_150123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6904, 11), np_150122, 'ndim')
    # Calling ndim(args, kwargs) (line 6904)
    ndim_call_result_150129 = invoke(stypy.reporting.localization.Localization(__file__, 6904, 11), ndim_150123, *[getdata_call_result_150127], **kwargs_150128)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6904, 4), 'stypy_return_type', ndim_call_result_150129)
    
    # ################# End of 'rank(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rank' in the type store
    # Getting the type of 'stypy_return_type' (line 6892)
    stypy_return_type_150130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6892, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150130)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rank'
    return stypy_return_type_150130

# Assigning a type to the variable 'rank' (line 6892)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6892, 0), 'rank', rank)

# Assigning a Attribute to a Attribute (line 6906):

# Assigning a Attribute to a Attribute (line 6906):
# Getting the type of 'np' (line 6906)
np_150131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6906, 15), 'np')
# Obtaining the member 'rank' of a type (line 6906)
rank_150132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6906, 15), np_150131, 'rank')
# Obtaining the member '__doc__' of a type (line 6906)
doc___150133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6906, 15), rank_150132, '__doc__')
# Getting the type of 'rank' (line 6906)
rank_150134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6906, 0), 'rank')
# Setting the type of the member '__doc__' of a type (line 6906)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6906, 0), rank_150134, '__doc__', doc___150133)

@norecursion
def ndim(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ndim'
    module_type_store = module_type_store.open_function_context('ndim', 6909, 0, False)
    
    # Passed parameters checking function
    ndim.stypy_localization = localization
    ndim.stypy_type_of_self = None
    ndim.stypy_type_store = module_type_store
    ndim.stypy_function_name = 'ndim'
    ndim.stypy_param_names_list = ['obj']
    ndim.stypy_varargs_param_name = None
    ndim.stypy_kwargs_param_name = None
    ndim.stypy_call_defaults = defaults
    ndim.stypy_call_varargs = varargs
    ndim.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ndim', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ndim', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ndim(...)' code ##################

    str_150135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6913, (-1)), 'str', '\n    maskedarray version of the numpy function.\n\n    ')
    
    # Call to ndim(...): (line 6914)
    # Processing the call arguments (line 6914)
    
    # Call to getdata(...): (line 6914)
    # Processing the call arguments (line 6914)
    # Getting the type of 'obj' (line 6914)
    obj_150139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6914, 27), 'obj', False)
    # Processing the call keyword arguments (line 6914)
    kwargs_150140 = {}
    # Getting the type of 'getdata' (line 6914)
    getdata_150138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6914, 19), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6914)
    getdata_call_result_150141 = invoke(stypy.reporting.localization.Localization(__file__, 6914, 19), getdata_150138, *[obj_150139], **kwargs_150140)
    
    # Processing the call keyword arguments (line 6914)
    kwargs_150142 = {}
    # Getting the type of 'np' (line 6914)
    np_150136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6914, 11), 'np', False)
    # Obtaining the member 'ndim' of a type (line 6914)
    ndim_150137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6914, 11), np_150136, 'ndim')
    # Calling ndim(args, kwargs) (line 6914)
    ndim_call_result_150143 = invoke(stypy.reporting.localization.Localization(__file__, 6914, 11), ndim_150137, *[getdata_call_result_150141], **kwargs_150142)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6914, 4), 'stypy_return_type', ndim_call_result_150143)
    
    # ################# End of 'ndim(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ndim' in the type store
    # Getting the type of 'stypy_return_type' (line 6909)
    stypy_return_type_150144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6909, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150144)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ndim'
    return stypy_return_type_150144

# Assigning a type to the variable 'ndim' (line 6909)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6909, 0), 'ndim', ndim)

# Assigning a Attribute to a Attribute (line 6916):

# Assigning a Attribute to a Attribute (line 6916):
# Getting the type of 'np' (line 6916)
np_150145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6916, 15), 'np')
# Obtaining the member 'ndim' of a type (line 6916)
ndim_150146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6916, 15), np_150145, 'ndim')
# Obtaining the member '__doc__' of a type (line 6916)
doc___150147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6916, 15), ndim_150146, '__doc__')
# Getting the type of 'ndim' (line 6916)
ndim_150148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6916, 0), 'ndim')
# Setting the type of the member '__doc__' of a type (line 6916)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6916, 0), ndim_150148, '__doc__', doc___150147)

@norecursion
def shape(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'shape'
    module_type_store = module_type_store.open_function_context('shape', 6919, 0, False)
    
    # Passed parameters checking function
    shape.stypy_localization = localization
    shape.stypy_type_of_self = None
    shape.stypy_type_store = module_type_store
    shape.stypy_function_name = 'shape'
    shape.stypy_param_names_list = ['obj']
    shape.stypy_varargs_param_name = None
    shape.stypy_kwargs_param_name = None
    shape.stypy_call_defaults = defaults
    shape.stypy_call_varargs = varargs
    shape.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'shape', ['obj'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'shape', localization, ['obj'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'shape(...)' code ##################

    str_150149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6920, 4), 'str', 'maskedarray version of the numpy function.')
    
    # Call to shape(...): (line 6921)
    # Processing the call arguments (line 6921)
    
    # Call to getdata(...): (line 6921)
    # Processing the call arguments (line 6921)
    # Getting the type of 'obj' (line 6921)
    obj_150153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6921, 28), 'obj', False)
    # Processing the call keyword arguments (line 6921)
    kwargs_150154 = {}
    # Getting the type of 'getdata' (line 6921)
    getdata_150152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6921, 20), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6921)
    getdata_call_result_150155 = invoke(stypy.reporting.localization.Localization(__file__, 6921, 20), getdata_150152, *[obj_150153], **kwargs_150154)
    
    # Processing the call keyword arguments (line 6921)
    kwargs_150156 = {}
    # Getting the type of 'np' (line 6921)
    np_150150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6921, 11), 'np', False)
    # Obtaining the member 'shape' of a type (line 6921)
    shape_150151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6921, 11), np_150150, 'shape')
    # Calling shape(args, kwargs) (line 6921)
    shape_call_result_150157 = invoke(stypy.reporting.localization.Localization(__file__, 6921, 11), shape_150151, *[getdata_call_result_150155], **kwargs_150156)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6921, 4), 'stypy_return_type', shape_call_result_150157)
    
    # ################# End of 'shape(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'shape' in the type store
    # Getting the type of 'stypy_return_type' (line 6919)
    stypy_return_type_150158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6919, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150158)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'shape'
    return stypy_return_type_150158

# Assigning a type to the variable 'shape' (line 6919)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6919, 0), 'shape', shape)

# Assigning a Attribute to a Attribute (line 6922):

# Assigning a Attribute to a Attribute (line 6922):
# Getting the type of 'np' (line 6922)
np_150159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6922, 16), 'np')
# Obtaining the member 'shape' of a type (line 6922)
shape_150160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6922, 16), np_150159, 'shape')
# Obtaining the member '__doc__' of a type (line 6922)
doc___150161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6922, 16), shape_150160, '__doc__')
# Getting the type of 'shape' (line 6922)
shape_150162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6922, 0), 'shape')
# Setting the type of the member '__doc__' of a type (line 6922)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6922, 0), shape_150162, '__doc__', doc___150161)

@norecursion
def size(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 6925)
    None_150163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6925, 19), 'None')
    defaults = [None_150163]
    # Create a new context for function 'size'
    module_type_store = module_type_store.open_function_context('size', 6925, 0, False)
    
    # Passed parameters checking function
    size.stypy_localization = localization
    size.stypy_type_of_self = None
    size.stypy_type_store = module_type_store
    size.stypy_function_name = 'size'
    size.stypy_param_names_list = ['obj', 'axis']
    size.stypy_varargs_param_name = None
    size.stypy_kwargs_param_name = None
    size.stypy_call_defaults = defaults
    size.stypy_call_varargs = varargs
    size.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'size', ['obj', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'size', localization, ['obj', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'size(...)' code ##################

    str_150164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6926, 4), 'str', 'maskedarray version of the numpy function.')
    
    # Call to size(...): (line 6927)
    # Processing the call arguments (line 6927)
    
    # Call to getdata(...): (line 6927)
    # Processing the call arguments (line 6927)
    # Getting the type of 'obj' (line 6927)
    obj_150168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6927, 27), 'obj', False)
    # Processing the call keyword arguments (line 6927)
    kwargs_150169 = {}
    # Getting the type of 'getdata' (line 6927)
    getdata_150167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6927, 19), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6927)
    getdata_call_result_150170 = invoke(stypy.reporting.localization.Localization(__file__, 6927, 19), getdata_150167, *[obj_150168], **kwargs_150169)
    
    # Getting the type of 'axis' (line 6927)
    axis_150171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6927, 33), 'axis', False)
    # Processing the call keyword arguments (line 6927)
    kwargs_150172 = {}
    # Getting the type of 'np' (line 6927)
    np_150165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6927, 11), 'np', False)
    # Obtaining the member 'size' of a type (line 6927)
    size_150166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6927, 11), np_150165, 'size')
    # Calling size(args, kwargs) (line 6927)
    size_call_result_150173 = invoke(stypy.reporting.localization.Localization(__file__, 6927, 11), size_150166, *[getdata_call_result_150170, axis_150171], **kwargs_150172)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6927, 4), 'stypy_return_type', size_call_result_150173)
    
    # ################# End of 'size(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'size' in the type store
    # Getting the type of 'stypy_return_type' (line 6925)
    stypy_return_type_150174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6925, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150174)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'size'
    return stypy_return_type_150174

# Assigning a type to the variable 'size' (line 6925)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6925, 0), 'size', size)

# Assigning a Attribute to a Attribute (line 6928):

# Assigning a Attribute to a Attribute (line 6928):
# Getting the type of 'np' (line 6928)
np_150175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6928, 15), 'np')
# Obtaining the member 'size' of a type (line 6928)
size_150176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6928, 15), np_150175, 'size')
# Obtaining the member '__doc__' of a type (line 6928)
doc___150177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6928, 15), size_150176, '__doc__')
# Getting the type of 'size' (line 6928)
size_150178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6928, 0), 'size')
# Setting the type of the member '__doc__' of a type (line 6928)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 6928, 0), size_150178, '__doc__', doc___150177)

@norecursion
def where(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of '_NoValue' (line 6936)
    _NoValue_150179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6936, 23), '_NoValue')
    # Getting the type of '_NoValue' (line 6936)
    _NoValue_150180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6936, 35), '_NoValue')
    defaults = [_NoValue_150179, _NoValue_150180]
    # Create a new context for function 'where'
    module_type_store = module_type_store.open_function_context('where', 6936, 0, False)
    
    # Passed parameters checking function
    where.stypy_localization = localization
    where.stypy_type_of_self = None
    where.stypy_type_store = module_type_store
    where.stypy_function_name = 'where'
    where.stypy_param_names_list = ['condition', 'x', 'y']
    where.stypy_varargs_param_name = None
    where.stypy_kwargs_param_name = None
    where.stypy_call_defaults = defaults
    where.stypy_call_varargs = varargs
    where.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'where', ['condition', 'x', 'y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'where', localization, ['condition', 'x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'where(...)' code ##################

    str_150181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6982, (-1)), 'str', '\n    Return a masked array with elements from x or y, depending on condition.\n\n    Returns a masked array, shaped like condition, where the elements\n    are from `x` when `condition` is True, and from `y` otherwise.\n    If neither `x` nor `y` are given, the function returns a tuple of\n    indices where `condition` is True (the result of\n    ``condition.nonzero()``).\n\n    Parameters\n    ----------\n    condition : array_like, bool\n        The condition to meet. For each True element, yield the corresponding\n        element from `x`, otherwise from `y`.\n    x, y : array_like, optional\n        Values from which to choose. `x` and `y` need to have the same shape\n        as condition, or be broadcast-able to that shape.\n\n    Returns\n    -------\n    out : MaskedArray or tuple of ndarrays\n        The resulting masked array if `x` and `y` were given, otherwise\n        the result of ``condition.nonzero()``.\n\n    See Also\n    --------\n    numpy.where : Equivalent function in the top-level NumPy module.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9.).reshape(3, 3), mask=[[0, 1, 0],\n    ...                                                    [1, 0, 1],\n    ...                                                    [0, 1, 0]])\n    >>> print(x)\n    [[0.0 -- 2.0]\n     [-- 4.0 --]\n     [6.0 -- 8.0]]\n    >>> np.ma.where(x > 5)    # return the indices where x > 5\n    (array([2, 2]), array([0, 2]))\n\n    >>> print(np.ma.where(x > 5, x, -3.1416))\n    [[-3.1416 -- -3.1416]\n     [-- -3.1416 --]\n     [6.0 -- 8.0]]\n\n    ')
    
    # Assigning a Call to a Name (line 6983):
    
    # Assigning a Call to a Name (line 6983):
    
    # Call to count(...): (line 6983)
    # Processing the call arguments (line 6983)
    # Getting the type of 'True' (line 6983)
    True_150190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6983, 51), 'True', False)
    # Processing the call keyword arguments (line 6983)
    kwargs_150191 = {}
    
    # Obtaining an instance of the builtin type 'tuple' (line 6983)
    tuple_150182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6983, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 6983)
    # Adding element type (line 6983)
    
    # Getting the type of 'x' (line 6983)
    x_150183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6983, 15), 'x', False)
    # Getting the type of '_NoValue' (line 6983)
    _NoValue_150184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6983, 20), '_NoValue', False)
    # Applying the binary operator 'is' (line 6983)
    result_is__150185 = python_operator(stypy.reporting.localization.Localization(__file__, 6983, 15), 'is', x_150183, _NoValue_150184)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6983, 15), tuple_150182, result_is__150185)
    # Adding element type (line 6983)
    
    # Getting the type of 'y' (line 6983)
    y_150186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6983, 30), 'y', False)
    # Getting the type of '_NoValue' (line 6983)
    _NoValue_150187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6983, 35), '_NoValue', False)
    # Applying the binary operator 'is' (line 6983)
    result_is__150188 = python_operator(stypy.reporting.localization.Localization(__file__, 6983, 30), 'is', y_150186, _NoValue_150187)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6983, 15), tuple_150182, result_is__150188)
    
    # Obtaining the member 'count' of a type (line 6983)
    count_150189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6983, 15), tuple_150182, 'count')
    # Calling count(args, kwargs) (line 6983)
    count_call_result_150192 = invoke(stypy.reporting.localization.Localization(__file__, 6983, 15), count_150189, *[True_150190], **kwargs_150191)
    
    # Assigning a type to the variable 'missing' (line 6983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6983, 4), 'missing', count_call_result_150192)
    
    
    # Getting the type of 'missing' (line 6985)
    missing_150193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6985, 7), 'missing')
    int_150194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6985, 18), 'int')
    # Applying the binary operator '==' (line 6985)
    result_eq_150195 = python_operator(stypy.reporting.localization.Localization(__file__, 6985, 7), '==', missing_150193, int_150194)
    
    # Testing the type of an if condition (line 6985)
    if_condition_150196 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6985, 4), result_eq_150195)
    # Assigning a type to the variable 'if_condition_150196' (line 6985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6985, 4), 'if_condition_150196', if_condition_150196)
    # SSA begins for if statement (line 6985)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 6986)
    # Processing the call arguments (line 6986)
    str_150198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6986, 25), 'str', "Must provide both 'x' and 'y' or neither.")
    # Processing the call keyword arguments (line 6986)
    kwargs_150199 = {}
    # Getting the type of 'ValueError' (line 6986)
    ValueError_150197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6986, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 6986)
    ValueError_call_result_150200 = invoke(stypy.reporting.localization.Localization(__file__, 6986, 14), ValueError_150197, *[str_150198], **kwargs_150199)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 6986, 8), ValueError_call_result_150200, 'raise parameter', BaseException)
    # SSA join for if statement (line 6985)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'missing' (line 6987)
    missing_150201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6987, 7), 'missing')
    int_150202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6987, 18), 'int')
    # Applying the binary operator '==' (line 6987)
    result_eq_150203 = python_operator(stypy.reporting.localization.Localization(__file__, 6987, 7), '==', missing_150201, int_150202)
    
    # Testing the type of an if condition (line 6987)
    if_condition_150204 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6987, 4), result_eq_150203)
    # Assigning a type to the variable 'if_condition_150204' (line 6987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6987, 4), 'if_condition_150204', if_condition_150204)
    # SSA begins for if statement (line 6987)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to nonzero(...): (line 6988)
    # Processing the call keyword arguments (line 6988)
    kwargs_150211 = {}
    
    # Call to filled(...): (line 6988)
    # Processing the call arguments (line 6988)
    # Getting the type of 'condition' (line 6988)
    condition_150206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6988, 22), 'condition', False)
    int_150207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6988, 33), 'int')
    # Processing the call keyword arguments (line 6988)
    kwargs_150208 = {}
    # Getting the type of 'filled' (line 6988)
    filled_150205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6988, 15), 'filled', False)
    # Calling filled(args, kwargs) (line 6988)
    filled_call_result_150209 = invoke(stypy.reporting.localization.Localization(__file__, 6988, 15), filled_150205, *[condition_150206, int_150207], **kwargs_150208)
    
    # Obtaining the member 'nonzero' of a type (line 6988)
    nonzero_150210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6988, 15), filled_call_result_150209, 'nonzero')
    # Calling nonzero(args, kwargs) (line 6988)
    nonzero_call_result_150212 = invoke(stypy.reporting.localization.Localization(__file__, 6988, 15), nonzero_150210, *[], **kwargs_150211)
    
    # Assigning a type to the variable 'stypy_return_type' (line 6988)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6988, 8), 'stypy_return_type', nonzero_call_result_150212)
    # SSA join for if statement (line 6987)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 6993):
    
    # Assigning a Call to a Name (line 6993):
    
    # Call to astype(...): (line 6993)
    # Processing the call arguments (line 6993)
    # Getting the type of 'MaskType' (line 6993)
    MaskType_150219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6993, 37), 'MaskType', False)
    # Processing the call keyword arguments (line 6993)
    kwargs_150220 = {}
    
    # Call to filled(...): (line 6993)
    # Processing the call arguments (line 6993)
    # Getting the type of 'condition' (line 6993)
    condition_150214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6993, 16), 'condition', False)
    int_150215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6993, 27), 'int')
    # Processing the call keyword arguments (line 6993)
    kwargs_150216 = {}
    # Getting the type of 'filled' (line 6993)
    filled_150213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6993, 9), 'filled', False)
    # Calling filled(args, kwargs) (line 6993)
    filled_call_result_150217 = invoke(stypy.reporting.localization.Localization(__file__, 6993, 9), filled_150213, *[condition_150214, int_150215], **kwargs_150216)
    
    # Obtaining the member 'astype' of a type (line 6993)
    astype_150218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6993, 9), filled_call_result_150217, 'astype')
    # Calling astype(args, kwargs) (line 6993)
    astype_call_result_150221 = invoke(stypy.reporting.localization.Localization(__file__, 6993, 9), astype_150218, *[MaskType_150219], **kwargs_150220)
    
    # Assigning a type to the variable 'fc' (line 6993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6993, 4), 'fc', astype_call_result_150221)
    
    # Assigning a Call to a Name (line 6994):
    
    # Assigning a Call to a Name (line 6994):
    
    # Call to logical_not(...): (line 6994)
    # Processing the call arguments (line 6994)
    # Getting the type of 'fc' (line 6994)
    fc_150224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6994, 27), 'fc', False)
    # Processing the call keyword arguments (line 6994)
    kwargs_150225 = {}
    # Getting the type of 'np' (line 6994)
    np_150222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6994, 12), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 6994)
    logical_not_150223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 6994, 12), np_150222, 'logical_not')
    # Calling logical_not(args, kwargs) (line 6994)
    logical_not_call_result_150226 = invoke(stypy.reporting.localization.Localization(__file__, 6994, 12), logical_not_150223, *[fc_150224], **kwargs_150225)
    
    # Assigning a type to the variable 'notfc' (line 6994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6994, 4), 'notfc', logical_not_call_result_150226)
    
    # Assigning a Call to a Name (line 6997):
    
    # Assigning a Call to a Name (line 6997):
    
    # Call to getdata(...): (line 6997)
    # Processing the call arguments (line 6997)
    # Getting the type of 'x' (line 6997)
    x_150228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6997, 17), 'x', False)
    # Processing the call keyword arguments (line 6997)
    kwargs_150229 = {}
    # Getting the type of 'getdata' (line 6997)
    getdata_150227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6997, 9), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6997)
    getdata_call_result_150230 = invoke(stypy.reporting.localization.Localization(__file__, 6997, 9), getdata_150227, *[x_150228], **kwargs_150229)
    
    # Assigning a type to the variable 'xv' (line 6997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6997, 4), 'xv', getdata_call_result_150230)
    
    # Assigning a Call to a Name (line 6998):
    
    # Assigning a Call to a Name (line 6998):
    
    # Call to getdata(...): (line 6998)
    # Processing the call arguments (line 6998)
    # Getting the type of 'y' (line 6998)
    y_150232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6998, 17), 'y', False)
    # Processing the call keyword arguments (line 6998)
    kwargs_150233 = {}
    # Getting the type of 'getdata' (line 6998)
    getdata_150231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6998, 9), 'getdata', False)
    # Calling getdata(args, kwargs) (line 6998)
    getdata_call_result_150234 = invoke(stypy.reporting.localization.Localization(__file__, 6998, 9), getdata_150231, *[y_150232], **kwargs_150233)
    
    # Assigning a type to the variable 'yv' (line 6998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6998, 4), 'yv', getdata_call_result_150234)
    
    
    # Getting the type of 'x' (line 6999)
    x_150235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6999, 7), 'x')
    # Getting the type of 'masked' (line 6999)
    masked_150236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6999, 12), 'masked')
    # Applying the binary operator 'is' (line 6999)
    result_is__150237 = python_operator(stypy.reporting.localization.Localization(__file__, 6999, 7), 'is', x_150235, masked_150236)
    
    # Testing the type of an if condition (line 6999)
    if_condition_150238 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 6999, 4), result_is__150237)
    # Assigning a type to the variable 'if_condition_150238' (line 6999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6999, 4), 'if_condition_150238', if_condition_150238)
    # SSA begins for if statement (line 6999)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 7000):
    
    # Assigning a Attribute to a Name (line 7000):
    # Getting the type of 'yv' (line 7000)
    yv_150239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7000, 17), 'yv')
    # Obtaining the member 'dtype' of a type (line 7000)
    dtype_150240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7000, 17), yv_150239, 'dtype')
    # Assigning a type to the variable 'ndtype' (line 7000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7000, 8), 'ndtype', dtype_150240)
    # SSA branch for the else part of an if statement (line 6999)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'y' (line 7001)
    y_150241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7001, 9), 'y')
    # Getting the type of 'masked' (line 7001)
    masked_150242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7001, 14), 'masked')
    # Applying the binary operator 'is' (line 7001)
    result_is__150243 = python_operator(stypy.reporting.localization.Localization(__file__, 7001, 9), 'is', y_150241, masked_150242)
    
    # Testing the type of an if condition (line 7001)
    if_condition_150244 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7001, 9), result_is__150243)
    # Assigning a type to the variable 'if_condition_150244' (line 7001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7001, 9), 'if_condition_150244', if_condition_150244)
    # SSA begins for if statement (line 7001)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 7002):
    
    # Assigning a Attribute to a Name (line 7002):
    # Getting the type of 'xv' (line 7002)
    xv_150245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7002, 17), 'xv')
    # Obtaining the member 'dtype' of a type (line 7002)
    dtype_150246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7002, 17), xv_150245, 'dtype')
    # Assigning a type to the variable 'ndtype' (line 7002)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7002, 8), 'ndtype', dtype_150246)
    # SSA branch for the else part of an if statement (line 7001)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 7004):
    
    # Assigning a Call to a Name (line 7004):
    
    # Call to find_common_type(...): (line 7004)
    # Processing the call arguments (line 7004)
    
    # Obtaining an instance of the builtin type 'list' (line 7004)
    list_150249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7004, 37), 'list')
    # Adding type elements to the builtin type 'list' instance (line 7004)
    # Adding element type (line 7004)
    # Getting the type of 'xv' (line 7004)
    xv_150250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7004, 38), 'xv', False)
    # Obtaining the member 'dtype' of a type (line 7004)
    dtype_150251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7004, 38), xv_150250, 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7004, 37), list_150249, dtype_150251)
    # Adding element type (line 7004)
    # Getting the type of 'yv' (line 7004)
    yv_150252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7004, 48), 'yv', False)
    # Obtaining the member 'dtype' of a type (line 7004)
    dtype_150253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7004, 48), yv_150252, 'dtype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7004, 37), list_150249, dtype_150253)
    
    
    # Obtaining an instance of the builtin type 'list' (line 7004)
    list_150254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7004, 59), 'list')
    # Adding type elements to the builtin type 'list' instance (line 7004)
    
    # Processing the call keyword arguments (line 7004)
    kwargs_150255 = {}
    # Getting the type of 'np' (line 7004)
    np_150247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7004, 17), 'np', False)
    # Obtaining the member 'find_common_type' of a type (line 7004)
    find_common_type_150248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7004, 17), np_150247, 'find_common_type')
    # Calling find_common_type(args, kwargs) (line 7004)
    find_common_type_call_result_150256 = invoke(stypy.reporting.localization.Localization(__file__, 7004, 17), find_common_type_150248, *[list_150249, list_150254], **kwargs_150255)
    
    # Assigning a type to the variable 'ndtype' (line 7004)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7004, 8), 'ndtype', find_common_type_call_result_150256)
    # SSA join for if statement (line 7001)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 6999)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 7007):
    
    # Assigning a Call to a Name (line 7007):
    
    # Call to view(...): (line 7007)
    # Processing the call arguments (line 7007)
    # Getting the type of 'MaskedArray' (line 7007)
    MaskedArray_150266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7007, 46), 'MaskedArray', False)
    # Processing the call keyword arguments (line 7007)
    kwargs_150267 = {}
    
    # Call to empty(...): (line 7007)
    # Processing the call arguments (line 7007)
    # Getting the type of 'fc' (line 7007)
    fc_150259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7007, 17), 'fc', False)
    # Obtaining the member 'shape' of a type (line 7007)
    shape_150260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7007, 17), fc_150259, 'shape')
    # Processing the call keyword arguments (line 7007)
    # Getting the type of 'ndtype' (line 7007)
    ndtype_150261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7007, 33), 'ndtype', False)
    keyword_150262 = ndtype_150261
    kwargs_150263 = {'dtype': keyword_150262}
    # Getting the type of 'np' (line 7007)
    np_150257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7007, 8), 'np', False)
    # Obtaining the member 'empty' of a type (line 7007)
    empty_150258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7007, 8), np_150257, 'empty')
    # Calling empty(args, kwargs) (line 7007)
    empty_call_result_150264 = invoke(stypy.reporting.localization.Localization(__file__, 7007, 8), empty_150258, *[shape_150260], **kwargs_150263)
    
    # Obtaining the member 'view' of a type (line 7007)
    view_150265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7007, 8), empty_call_result_150264, 'view')
    # Calling view(args, kwargs) (line 7007)
    view_call_result_150268 = invoke(stypy.reporting.localization.Localization(__file__, 7007, 8), view_150265, *[MaskedArray_150266], **kwargs_150267)
    
    # Assigning a type to the variable 'd' (line 7007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7007, 4), 'd', view_call_result_150268)
    
    # Call to copyto(...): (line 7008)
    # Processing the call arguments (line 7008)
    # Getting the type of 'd' (line 7008)
    d_150271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7008, 14), 'd', False)
    # Obtaining the member '_data' of a type (line 7008)
    _data_150272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7008, 14), d_150271, '_data')
    
    # Call to astype(...): (line 7008)
    # Processing the call arguments (line 7008)
    # Getting the type of 'ndtype' (line 7008)
    ndtype_150275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7008, 33), 'ndtype', False)
    # Processing the call keyword arguments (line 7008)
    kwargs_150276 = {}
    # Getting the type of 'xv' (line 7008)
    xv_150273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7008, 23), 'xv', False)
    # Obtaining the member 'astype' of a type (line 7008)
    astype_150274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7008, 23), xv_150273, 'astype')
    # Calling astype(args, kwargs) (line 7008)
    astype_call_result_150277 = invoke(stypy.reporting.localization.Localization(__file__, 7008, 23), astype_150274, *[ndtype_150275], **kwargs_150276)
    
    # Processing the call keyword arguments (line 7008)
    # Getting the type of 'fc' (line 7008)
    fc_150278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7008, 48), 'fc', False)
    keyword_150279 = fc_150278
    kwargs_150280 = {'where': keyword_150279}
    # Getting the type of 'np' (line 7008)
    np_150269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7008, 4), 'np', False)
    # Obtaining the member 'copyto' of a type (line 7008)
    copyto_150270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7008, 4), np_150269, 'copyto')
    # Calling copyto(args, kwargs) (line 7008)
    copyto_call_result_150281 = invoke(stypy.reporting.localization.Localization(__file__, 7008, 4), copyto_150270, *[_data_150272, astype_call_result_150277], **kwargs_150280)
    
    
    # Call to copyto(...): (line 7009)
    # Processing the call arguments (line 7009)
    # Getting the type of 'd' (line 7009)
    d_150284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7009, 14), 'd', False)
    # Obtaining the member '_data' of a type (line 7009)
    _data_150285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7009, 14), d_150284, '_data')
    
    # Call to astype(...): (line 7009)
    # Processing the call arguments (line 7009)
    # Getting the type of 'ndtype' (line 7009)
    ndtype_150288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7009, 33), 'ndtype', False)
    # Processing the call keyword arguments (line 7009)
    kwargs_150289 = {}
    # Getting the type of 'yv' (line 7009)
    yv_150286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7009, 23), 'yv', False)
    # Obtaining the member 'astype' of a type (line 7009)
    astype_150287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7009, 23), yv_150286, 'astype')
    # Calling astype(args, kwargs) (line 7009)
    astype_call_result_150290 = invoke(stypy.reporting.localization.Localization(__file__, 7009, 23), astype_150287, *[ndtype_150288], **kwargs_150289)
    
    # Processing the call keyword arguments (line 7009)
    # Getting the type of 'notfc' (line 7009)
    notfc_150291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7009, 48), 'notfc', False)
    keyword_150292 = notfc_150291
    kwargs_150293 = {'where': keyword_150292}
    # Getting the type of 'np' (line 7009)
    np_150282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7009, 4), 'np', False)
    # Obtaining the member 'copyto' of a type (line 7009)
    copyto_150283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7009, 4), np_150282, 'copyto')
    # Calling copyto(args, kwargs) (line 7009)
    copyto_call_result_150294 = invoke(stypy.reporting.localization.Localization(__file__, 7009, 4), copyto_150283, *[_data_150285, astype_call_result_150290], **kwargs_150293)
    
    
    # Assigning a Call to a Name (line 7012):
    
    # Assigning a Call to a Name (line 7012):
    
    # Call to zeros(...): (line 7012)
    # Processing the call arguments (line 7012)
    # Getting the type of 'fc' (line 7012)
    fc_150297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7012, 20), 'fc', False)
    # Obtaining the member 'shape' of a type (line 7012)
    shape_150298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7012, 20), fc_150297, 'shape')
    # Processing the call keyword arguments (line 7012)
    # Getting the type of 'MaskType' (line 7012)
    MaskType_150299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7012, 36), 'MaskType', False)
    keyword_150300 = MaskType_150299
    kwargs_150301 = {'dtype': keyword_150300}
    # Getting the type of 'np' (line 7012)
    np_150295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7012, 11), 'np', False)
    # Obtaining the member 'zeros' of a type (line 7012)
    zeros_150296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7012, 11), np_150295, 'zeros')
    # Calling zeros(args, kwargs) (line 7012)
    zeros_call_result_150302 = invoke(stypy.reporting.localization.Localization(__file__, 7012, 11), zeros_150296, *[shape_150298], **kwargs_150301)
    
    # Assigning a type to the variable 'mask' (line 7012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7012, 4), 'mask', zeros_call_result_150302)
    
    # Call to copyto(...): (line 7013)
    # Processing the call arguments (line 7013)
    # Getting the type of 'mask' (line 7013)
    mask_150305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7013, 14), 'mask', False)
    
    # Call to getmask(...): (line 7013)
    # Processing the call arguments (line 7013)
    # Getting the type of 'x' (line 7013)
    x_150307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7013, 28), 'x', False)
    # Processing the call keyword arguments (line 7013)
    kwargs_150308 = {}
    # Getting the type of 'getmask' (line 7013)
    getmask_150306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7013, 20), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7013)
    getmask_call_result_150309 = invoke(stypy.reporting.localization.Localization(__file__, 7013, 20), getmask_150306, *[x_150307], **kwargs_150308)
    
    # Processing the call keyword arguments (line 7013)
    # Getting the type of 'fc' (line 7013)
    fc_150310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7013, 38), 'fc', False)
    keyword_150311 = fc_150310
    kwargs_150312 = {'where': keyword_150311}
    # Getting the type of 'np' (line 7013)
    np_150303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7013, 4), 'np', False)
    # Obtaining the member 'copyto' of a type (line 7013)
    copyto_150304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7013, 4), np_150303, 'copyto')
    # Calling copyto(args, kwargs) (line 7013)
    copyto_call_result_150313 = invoke(stypy.reporting.localization.Localization(__file__, 7013, 4), copyto_150304, *[mask_150305, getmask_call_result_150309], **kwargs_150312)
    
    
    # Call to copyto(...): (line 7014)
    # Processing the call arguments (line 7014)
    # Getting the type of 'mask' (line 7014)
    mask_150316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7014, 14), 'mask', False)
    
    # Call to getmask(...): (line 7014)
    # Processing the call arguments (line 7014)
    # Getting the type of 'y' (line 7014)
    y_150318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7014, 28), 'y', False)
    # Processing the call keyword arguments (line 7014)
    kwargs_150319 = {}
    # Getting the type of 'getmask' (line 7014)
    getmask_150317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7014, 20), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7014)
    getmask_call_result_150320 = invoke(stypy.reporting.localization.Localization(__file__, 7014, 20), getmask_150317, *[y_150318], **kwargs_150319)
    
    # Processing the call keyword arguments (line 7014)
    # Getting the type of 'notfc' (line 7014)
    notfc_150321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7014, 38), 'notfc', False)
    keyword_150322 = notfc_150321
    kwargs_150323 = {'where': keyword_150322}
    # Getting the type of 'np' (line 7014)
    np_150314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7014, 4), 'np', False)
    # Obtaining the member 'copyto' of a type (line 7014)
    copyto_150315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7014, 4), np_150314, 'copyto')
    # Calling copyto(args, kwargs) (line 7014)
    copyto_call_result_150324 = invoke(stypy.reporting.localization.Localization(__file__, 7014, 4), copyto_150315, *[mask_150316, getmask_call_result_150320], **kwargs_150323)
    
    
    # Getting the type of 'mask' (line 7015)
    mask_150325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7015, 4), 'mask')
    
    # Call to getmaskarray(...): (line 7015)
    # Processing the call arguments (line 7015)
    # Getting the type of 'condition' (line 7015)
    condition_150327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7015, 25), 'condition', False)
    # Processing the call keyword arguments (line 7015)
    kwargs_150328 = {}
    # Getting the type of 'getmaskarray' (line 7015)
    getmaskarray_150326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7015, 12), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 7015)
    getmaskarray_call_result_150329 = invoke(stypy.reporting.localization.Localization(__file__, 7015, 12), getmaskarray_150326, *[condition_150327], **kwargs_150328)
    
    # Applying the binary operator '|=' (line 7015)
    result_ior_150330 = python_operator(stypy.reporting.localization.Localization(__file__, 7015, 4), '|=', mask_150325, getmaskarray_call_result_150329)
    # Assigning a type to the variable 'mask' (line 7015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7015, 4), 'mask', result_ior_150330)
    
    
    # Assigning a IfExp to a Attribute (line 7018):
    
    # Assigning a IfExp to a Attribute (line 7018):
    
    
    # Call to any(...): (line 7018)
    # Processing the call keyword arguments (line 7018)
    kwargs_150333 = {}
    # Getting the type of 'mask' (line 7018)
    mask_150331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7018, 22), 'mask', False)
    # Obtaining the member 'any' of a type (line 7018)
    any_150332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7018, 22), mask_150331, 'any')
    # Calling any(args, kwargs) (line 7018)
    any_call_result_150334 = invoke(stypy.reporting.localization.Localization(__file__, 7018, 22), any_150332, *[], **kwargs_150333)
    
    # Testing the type of an if expression (line 7018)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7018, 14), any_call_result_150334)
    # SSA begins for if expression (line 7018)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'mask' (line 7018)
    mask_150335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7018, 14), 'mask')
    # SSA branch for the else part of an if expression (line 7018)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'nomask' (line 7018)
    nomask_150336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7018, 38), 'nomask')
    # SSA join for if expression (line 7018)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_150337 = union_type.UnionType.add(mask_150335, nomask_150336)
    
    # Getting the type of 'd' (line 7018)
    d_150338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7018, 4), 'd')
    # Setting the type of the member '_mask' of a type (line 7018)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7018, 4), d_150338, '_mask', if_exp_150337)
    # Getting the type of 'd' (line 7020)
    d_150339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7020, 11), 'd')
    # Assigning a type to the variable 'stypy_return_type' (line 7020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7020, 4), 'stypy_return_type', d_150339)
    
    # ################# End of 'where(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'where' in the type store
    # Getting the type of 'stypy_return_type' (line 6936)
    stypy_return_type_150340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 6936, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150340)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'where'
    return stypy_return_type_150340

# Assigning a type to the variable 'where' (line 6936)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6936, 0), 'where', where)

@norecursion
def choose(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 7023)
    None_150341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7023, 33), 'None')
    str_150342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7023, 44), 'str', 'raise')
    defaults = [None_150341, str_150342]
    # Create a new context for function 'choose'
    module_type_store = module_type_store.open_function_context('choose', 7023, 0, False)
    
    # Passed parameters checking function
    choose.stypy_localization = localization
    choose.stypy_type_of_self = None
    choose.stypy_type_store = module_type_store
    choose.stypy_function_name = 'choose'
    choose.stypy_param_names_list = ['indices', 'choices', 'out', 'mode']
    choose.stypy_varargs_param_name = None
    choose.stypy_kwargs_param_name = None
    choose.stypy_call_defaults = defaults
    choose.stypy_call_varargs = varargs
    choose.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'choose', ['indices', 'choices', 'out', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'choose', localization, ['indices', 'choices', 'out', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'choose(...)' code ##################

    str_150343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7067, (-1)), 'str', "\n    Use an index array to construct a new array from a set of choices.\n\n    Given an array of integers and a set of n choice arrays, this method\n    will create a new array that merges each of the choice arrays.  Where a\n    value in `a` is i, the new array will have the value that choices[i]\n    contains in the same place.\n\n    Parameters\n    ----------\n    a : ndarray of ints\n        This array must contain integers in ``[0, n-1]``, where n is the\n        number of choices.\n    choices : sequence of arrays\n        Choice arrays. The index array and all of the choices should be\n        broadcastable to the same shape.\n    out : array, optional\n        If provided, the result will be inserted into this array. It should\n        be of the appropriate shape and `dtype`.\n    mode : {'raise', 'wrap', 'clip'}, optional\n        Specifies how out-of-bounds indices will behave.\n\n        * 'raise' : raise an error\n        * 'wrap' : wrap around\n        * 'clip' : clip to the range\n\n    Returns\n    -------\n    merged_array : array\n\n    See Also\n    --------\n    choose : equivalent function\n\n    Examples\n    --------\n    >>> choice = np.array([[1,1,1], [2,2,2], [3,3,3]])\n    >>> a = np.array([2, 1, 0])\n    >>> np.ma.choose(a, choice)\n    masked_array(data = [3 2 1],\n          mask = False,\n          fill_value=999999)\n\n    ")

    @norecursion
    def fmask(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fmask'
        module_type_store = module_type_store.open_function_context('fmask', 7068, 4, False)
        
        # Passed parameters checking function
        fmask.stypy_localization = localization
        fmask.stypy_type_of_self = None
        fmask.stypy_type_store = module_type_store
        fmask.stypy_function_name = 'fmask'
        fmask.stypy_param_names_list = ['x']
        fmask.stypy_varargs_param_name = None
        fmask.stypy_kwargs_param_name = None
        fmask.stypy_call_defaults = defaults
        fmask.stypy_call_varargs = varargs
        fmask.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'fmask', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fmask', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fmask(...)' code ##################

        str_150344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7069, 8), 'str', 'Returns the filled array, or True if masked.')
        
        
        # Getting the type of 'x' (line 7070)
        x_150345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7070, 11), 'x')
        # Getting the type of 'masked' (line 7070)
        masked_150346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7070, 16), 'masked')
        # Applying the binary operator 'is' (line 7070)
        result_is__150347 = python_operator(stypy.reporting.localization.Localization(__file__, 7070, 11), 'is', x_150345, masked_150346)
        
        # Testing the type of an if condition (line 7070)
        if_condition_150348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7070, 8), result_is__150347)
        # Assigning a type to the variable 'if_condition_150348' (line 7070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7070, 8), 'if_condition_150348', if_condition_150348)
        # SSA begins for if statement (line 7070)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 7071)
        True_150349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7071, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 7071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7071, 12), 'stypy_return_type', True_150349)
        # SSA join for if statement (line 7070)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to filled(...): (line 7072)
        # Processing the call arguments (line 7072)
        # Getting the type of 'x' (line 7072)
        x_150351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7072, 22), 'x', False)
        # Processing the call keyword arguments (line 7072)
        kwargs_150352 = {}
        # Getting the type of 'filled' (line 7072)
        filled_150350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7072, 15), 'filled', False)
        # Calling filled(args, kwargs) (line 7072)
        filled_call_result_150353 = invoke(stypy.reporting.localization.Localization(__file__, 7072, 15), filled_150350, *[x_150351], **kwargs_150352)
        
        # Assigning a type to the variable 'stypy_return_type' (line 7072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7072, 8), 'stypy_return_type', filled_call_result_150353)
        
        # ################# End of 'fmask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fmask' in the type store
        # Getting the type of 'stypy_return_type' (line 7068)
        stypy_return_type_150354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7068, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150354)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fmask'
        return stypy_return_type_150354

    # Assigning a type to the variable 'fmask' (line 7068)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7068, 4), 'fmask', fmask)

    @norecursion
    def nmask(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'nmask'
        module_type_store = module_type_store.open_function_context('nmask', 7074, 4, False)
        
        # Passed parameters checking function
        nmask.stypy_localization = localization
        nmask.stypy_type_of_self = None
        nmask.stypy_type_store = module_type_store
        nmask.stypy_function_name = 'nmask'
        nmask.stypy_param_names_list = ['x']
        nmask.stypy_varargs_param_name = None
        nmask.stypy_kwargs_param_name = None
        nmask.stypy_call_defaults = defaults
        nmask.stypy_call_varargs = varargs
        nmask.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'nmask', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'nmask', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'nmask(...)' code ##################

        str_150355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7075, 8), 'str', 'Returns the mask, True if ``masked``, False if ``nomask``.')
        
        
        # Getting the type of 'x' (line 7076)
        x_150356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7076, 11), 'x')
        # Getting the type of 'masked' (line 7076)
        masked_150357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7076, 16), 'masked')
        # Applying the binary operator 'is' (line 7076)
        result_is__150358 = python_operator(stypy.reporting.localization.Localization(__file__, 7076, 11), 'is', x_150356, masked_150357)
        
        # Testing the type of an if condition (line 7076)
        if_condition_150359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7076, 8), result_is__150358)
        # Assigning a type to the variable 'if_condition_150359' (line 7076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7076, 8), 'if_condition_150359', if_condition_150359)
        # SSA begins for if statement (line 7076)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 7077)
        True_150360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7077, 19), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 7077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7077, 12), 'stypy_return_type', True_150360)
        # SSA join for if statement (line 7076)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to getmask(...): (line 7078)
        # Processing the call arguments (line 7078)
        # Getting the type of 'x' (line 7078)
        x_150362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7078, 23), 'x', False)
        # Processing the call keyword arguments (line 7078)
        kwargs_150363 = {}
        # Getting the type of 'getmask' (line 7078)
        getmask_150361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7078, 15), 'getmask', False)
        # Calling getmask(args, kwargs) (line 7078)
        getmask_call_result_150364 = invoke(stypy.reporting.localization.Localization(__file__, 7078, 15), getmask_150361, *[x_150362], **kwargs_150363)
        
        # Assigning a type to the variable 'stypy_return_type' (line 7078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7078, 8), 'stypy_return_type', getmask_call_result_150364)
        
        # ################# End of 'nmask(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'nmask' in the type store
        # Getting the type of 'stypy_return_type' (line 7074)
        stypy_return_type_150365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7074, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_150365)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'nmask'
        return stypy_return_type_150365

    # Assigning a type to the variable 'nmask' (line 7074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7074, 4), 'nmask', nmask)
    
    # Assigning a Call to a Name (line 7080):
    
    # Assigning a Call to a Name (line 7080):
    
    # Call to filled(...): (line 7080)
    # Processing the call arguments (line 7080)
    # Getting the type of 'indices' (line 7080)
    indices_150367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7080, 15), 'indices', False)
    int_150368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7080, 24), 'int')
    # Processing the call keyword arguments (line 7080)
    kwargs_150369 = {}
    # Getting the type of 'filled' (line 7080)
    filled_150366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7080, 8), 'filled', False)
    # Calling filled(args, kwargs) (line 7080)
    filled_call_result_150370 = invoke(stypy.reporting.localization.Localization(__file__, 7080, 8), filled_150366, *[indices_150367, int_150368], **kwargs_150369)
    
    # Assigning a type to the variable 'c' (line 7080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7080, 4), 'c', filled_call_result_150370)
    
    # Assigning a ListComp to a Name (line 7082):
    
    # Assigning a ListComp to a Name (line 7082):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'choices' (line 7082)
    choices_150375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7082, 31), 'choices')
    comprehension_150376 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7082, 13), choices_150375)
    # Assigning a type to the variable 'x' (line 7082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7082, 13), 'x', comprehension_150376)
    
    # Call to nmask(...): (line 7082)
    # Processing the call arguments (line 7082)
    # Getting the type of 'x' (line 7082)
    x_150372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7082, 19), 'x', False)
    # Processing the call keyword arguments (line 7082)
    kwargs_150373 = {}
    # Getting the type of 'nmask' (line 7082)
    nmask_150371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7082, 13), 'nmask', False)
    # Calling nmask(args, kwargs) (line 7082)
    nmask_call_result_150374 = invoke(stypy.reporting.localization.Localization(__file__, 7082, 13), nmask_150371, *[x_150372], **kwargs_150373)
    
    list_150377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7082, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7082, 13), list_150377, nmask_call_result_150374)
    # Assigning a type to the variable 'masks' (line 7082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7082, 4), 'masks', list_150377)
    
    # Assigning a ListComp to a Name (line 7083):
    
    # Assigning a ListComp to a Name (line 7083):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'choices' (line 7083)
    choices_150382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7083, 30), 'choices')
    comprehension_150383 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7083, 12), choices_150382)
    # Assigning a type to the variable 'x' (line 7083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7083, 12), 'x', comprehension_150383)
    
    # Call to fmask(...): (line 7083)
    # Processing the call arguments (line 7083)
    # Getting the type of 'x' (line 7083)
    x_150379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7083, 18), 'x', False)
    # Processing the call keyword arguments (line 7083)
    kwargs_150380 = {}
    # Getting the type of 'fmask' (line 7083)
    fmask_150378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7083, 12), 'fmask', False)
    # Calling fmask(args, kwargs) (line 7083)
    fmask_call_result_150381 = invoke(stypy.reporting.localization.Localization(__file__, 7083, 12), fmask_150378, *[x_150379], **kwargs_150380)
    
    list_150384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7083, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7083, 12), list_150384, fmask_call_result_150381)
    # Assigning a type to the variable 'data' (line 7083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7083, 4), 'data', list_150384)
    
    # Assigning a Call to a Name (line 7085):
    
    # Assigning a Call to a Name (line 7085):
    
    # Call to choose(...): (line 7085)
    # Processing the call arguments (line 7085)
    # Getting the type of 'c' (line 7085)
    c_150387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7085, 27), 'c', False)
    # Getting the type of 'masks' (line 7085)
    masks_150388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7085, 30), 'masks', False)
    # Processing the call keyword arguments (line 7085)
    # Getting the type of 'mode' (line 7085)
    mode_150389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7085, 42), 'mode', False)
    keyword_150390 = mode_150389
    kwargs_150391 = {'mode': keyword_150390}
    # Getting the type of 'np' (line 7085)
    np_150385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7085, 17), 'np', False)
    # Obtaining the member 'choose' of a type (line 7085)
    choose_150386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7085, 17), np_150385, 'choose')
    # Calling choose(args, kwargs) (line 7085)
    choose_call_result_150392 = invoke(stypy.reporting.localization.Localization(__file__, 7085, 17), choose_150386, *[c_150387, masks_150388], **kwargs_150391)
    
    # Assigning a type to the variable 'outputmask' (line 7085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7085, 4), 'outputmask', choose_call_result_150392)
    
    # Assigning a Call to a Name (line 7086):
    
    # Assigning a Call to a Name (line 7086):
    
    # Call to make_mask(...): (line 7086)
    # Processing the call arguments (line 7086)
    
    # Call to mask_or(...): (line 7086)
    # Processing the call arguments (line 7086)
    # Getting the type of 'outputmask' (line 7086)
    outputmask_150395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7086, 35), 'outputmask', False)
    
    # Call to getmask(...): (line 7086)
    # Processing the call arguments (line 7086)
    # Getting the type of 'indices' (line 7086)
    indices_150397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7086, 55), 'indices', False)
    # Processing the call keyword arguments (line 7086)
    kwargs_150398 = {}
    # Getting the type of 'getmask' (line 7086)
    getmask_150396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7086, 47), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7086)
    getmask_call_result_150399 = invoke(stypy.reporting.localization.Localization(__file__, 7086, 47), getmask_150396, *[indices_150397], **kwargs_150398)
    
    # Processing the call keyword arguments (line 7086)
    kwargs_150400 = {}
    # Getting the type of 'mask_or' (line 7086)
    mask_or_150394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7086, 27), 'mask_or', False)
    # Calling mask_or(args, kwargs) (line 7086)
    mask_or_call_result_150401 = invoke(stypy.reporting.localization.Localization(__file__, 7086, 27), mask_or_150394, *[outputmask_150395, getmask_call_result_150399], **kwargs_150400)
    
    # Processing the call keyword arguments (line 7086)
    int_150402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7087, 32), 'int')
    keyword_150403 = int_150402
    # Getting the type of 'True' (line 7087)
    True_150404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7087, 42), 'True', False)
    keyword_150405 = True_150404
    kwargs_150406 = {'copy': keyword_150403, 'shrink': keyword_150405}
    # Getting the type of 'make_mask' (line 7086)
    make_mask_150393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7086, 17), 'make_mask', False)
    # Calling make_mask(args, kwargs) (line 7086)
    make_mask_call_result_150407 = invoke(stypy.reporting.localization.Localization(__file__, 7086, 17), make_mask_150393, *[mask_or_call_result_150401], **kwargs_150406)
    
    # Assigning a type to the variable 'outputmask' (line 7086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7086, 4), 'outputmask', make_mask_call_result_150407)
    
    # Assigning a Call to a Name (line 7089):
    
    # Assigning a Call to a Name (line 7089):
    
    # Call to view(...): (line 7089)
    # Processing the call arguments (line 7089)
    # Getting the type of 'MaskedArray' (line 7089)
    MaskedArray_150419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7089, 52), 'MaskedArray', False)
    # Processing the call keyword arguments (line 7089)
    kwargs_150420 = {}
    
    # Call to choose(...): (line 7089)
    # Processing the call arguments (line 7089)
    # Getting the type of 'c' (line 7089)
    c_150410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7089, 18), 'c', False)
    # Getting the type of 'data' (line 7089)
    data_150411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7089, 21), 'data', False)
    # Processing the call keyword arguments (line 7089)
    # Getting the type of 'mode' (line 7089)
    mode_150412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7089, 32), 'mode', False)
    keyword_150413 = mode_150412
    # Getting the type of 'out' (line 7089)
    out_150414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7089, 42), 'out', False)
    keyword_150415 = out_150414
    kwargs_150416 = {'mode': keyword_150413, 'out': keyword_150415}
    # Getting the type of 'np' (line 7089)
    np_150408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7089, 8), 'np', False)
    # Obtaining the member 'choose' of a type (line 7089)
    choose_150409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7089, 8), np_150408, 'choose')
    # Calling choose(args, kwargs) (line 7089)
    choose_call_result_150417 = invoke(stypy.reporting.localization.Localization(__file__, 7089, 8), choose_150409, *[c_150410, data_150411], **kwargs_150416)
    
    # Obtaining the member 'view' of a type (line 7089)
    view_150418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7089, 8), choose_call_result_150417, 'view')
    # Calling view(args, kwargs) (line 7089)
    view_call_result_150421 = invoke(stypy.reporting.localization.Localization(__file__, 7089, 8), view_150418, *[MaskedArray_150419], **kwargs_150420)
    
    # Assigning a type to the variable 'd' (line 7089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7089, 4), 'd', view_call_result_150421)
    
    # Type idiom detected: calculating its left and rigth part (line 7090)
    # Getting the type of 'out' (line 7090)
    out_150422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7090, 4), 'out')
    # Getting the type of 'None' (line 7090)
    None_150423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7090, 18), 'None')
    
    (may_be_150424, more_types_in_union_150425) = may_not_be_none(out_150422, None_150423)

    if may_be_150424:

        if more_types_in_union_150425:
            # Runtime conditional SSA (line 7090)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to isinstance(...): (line 7091)
        # Processing the call arguments (line 7091)
        # Getting the type of 'out' (line 7091)
        out_150427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7091, 22), 'out', False)
        # Getting the type of 'MaskedArray' (line 7091)
        MaskedArray_150428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7091, 27), 'MaskedArray', False)
        # Processing the call keyword arguments (line 7091)
        kwargs_150429 = {}
        # Getting the type of 'isinstance' (line 7091)
        isinstance_150426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7091, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 7091)
        isinstance_call_result_150430 = invoke(stypy.reporting.localization.Localization(__file__, 7091, 11), isinstance_150426, *[out_150427, MaskedArray_150428], **kwargs_150429)
        
        # Testing the type of an if condition (line 7091)
        if_condition_150431 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7091, 8), isinstance_call_result_150430)
        # Assigning a type to the variable 'if_condition_150431' (line 7091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7091, 8), 'if_condition_150431', if_condition_150431)
        # SSA begins for if statement (line 7091)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __setmask__(...): (line 7092)
        # Processing the call arguments (line 7092)
        # Getting the type of 'outputmask' (line 7092)
        outputmask_150434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7092, 28), 'outputmask', False)
        # Processing the call keyword arguments (line 7092)
        kwargs_150435 = {}
        # Getting the type of 'out' (line 7092)
        out_150432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7092, 12), 'out', False)
        # Obtaining the member '__setmask__' of a type (line 7092)
        setmask___150433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7092, 12), out_150432, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 7092)
        setmask___call_result_150436 = invoke(stypy.reporting.localization.Localization(__file__, 7092, 12), setmask___150433, *[outputmask_150434], **kwargs_150435)
        
        # SSA join for if statement (line 7091)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 7093)
        out_150437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7093, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 7093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7093, 8), 'stypy_return_type', out_150437)

        if more_types_in_union_150425:
            # SSA join for if statement (line 7090)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to __setmask__(...): (line 7094)
    # Processing the call arguments (line 7094)
    # Getting the type of 'outputmask' (line 7094)
    outputmask_150440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7094, 18), 'outputmask', False)
    # Processing the call keyword arguments (line 7094)
    kwargs_150441 = {}
    # Getting the type of 'd' (line 7094)
    d_150438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7094, 4), 'd', False)
    # Obtaining the member '__setmask__' of a type (line 7094)
    setmask___150439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7094, 4), d_150438, '__setmask__')
    # Calling __setmask__(args, kwargs) (line 7094)
    setmask___call_result_150442 = invoke(stypy.reporting.localization.Localization(__file__, 7094, 4), setmask___150439, *[outputmask_150440], **kwargs_150441)
    
    # Getting the type of 'd' (line 7095)
    d_150443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7095, 11), 'd')
    # Assigning a type to the variable 'stypy_return_type' (line 7095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7095, 4), 'stypy_return_type', d_150443)
    
    # ################# End of 'choose(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'choose' in the type store
    # Getting the type of 'stypy_return_type' (line 7023)
    stypy_return_type_150444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7023, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150444)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'choose'
    return stypy_return_type_150444

# Assigning a type to the variable 'choose' (line 7023)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7023, 0), 'choose', choose)

@norecursion
def round_(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_150445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7098, 23), 'int')
    # Getting the type of 'None' (line 7098)
    None_150446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7098, 30), 'None')
    defaults = [int_150445, None_150446]
    # Create a new context for function 'round_'
    module_type_store = module_type_store.open_function_context('round_', 7098, 0, False)
    
    # Passed parameters checking function
    round_.stypy_localization = localization
    round_.stypy_type_of_self = None
    round_.stypy_type_store = module_type_store
    round_.stypy_function_name = 'round_'
    round_.stypy_param_names_list = ['a', 'decimals', 'out']
    round_.stypy_varargs_param_name = None
    round_.stypy_kwargs_param_name = None
    round_.stypy_call_defaults = defaults
    round_.stypy_call_varargs = varargs
    round_.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'round_', ['a', 'decimals', 'out'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'round_', localization, ['a', 'decimals', 'out'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'round_(...)' code ##################

    str_150447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7121, (-1)), 'str', "\n    Return a copy of a, rounded to 'decimals' places.\n\n    When 'decimals' is negative, it specifies the number of positions\n    to the left of the decimal point.  The real and imaginary parts of\n    complex numbers are rounded separately. Nothing is done if the\n    array is not of float type and 'decimals' is greater than or equal\n    to 0.\n\n    Parameters\n    ----------\n    decimals : int\n        Number of decimals to round to. May be negative.\n    out : array_like\n        Existing array to use for output.\n        If not given, returns a default copy of a.\n\n    Notes\n    -----\n    If out is given and does not have a mask attribute, the mask of a\n    is lost!\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 7122)
    # Getting the type of 'out' (line 7122)
    out_150448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7122, 7), 'out')
    # Getting the type of 'None' (line 7122)
    None_150449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7122, 14), 'None')
    
    (may_be_150450, more_types_in_union_150451) = may_be_none(out_150448, None_150449)

    if may_be_150450:

        if more_types_in_union_150451:
            # Runtime conditional SSA (line 7122)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to round_(...): (line 7123)
        # Processing the call arguments (line 7123)
        # Getting the type of 'a' (line 7123)
        a_150454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7123, 25), 'a', False)
        # Getting the type of 'decimals' (line 7123)
        decimals_150455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7123, 28), 'decimals', False)
        # Getting the type of 'out' (line 7123)
        out_150456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7123, 38), 'out', False)
        # Processing the call keyword arguments (line 7123)
        kwargs_150457 = {}
        # Getting the type of 'np' (line 7123)
        np_150452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7123, 15), 'np', False)
        # Obtaining the member 'round_' of a type (line 7123)
        round__150453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7123, 15), np_150452, 'round_')
        # Calling round_(args, kwargs) (line 7123)
        round__call_result_150458 = invoke(stypy.reporting.localization.Localization(__file__, 7123, 15), round__150453, *[a_150454, decimals_150455, out_150456], **kwargs_150457)
        
        # Assigning a type to the variable 'stypy_return_type' (line 7123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7123, 8), 'stypy_return_type', round__call_result_150458)

        if more_types_in_union_150451:
            # Runtime conditional SSA for else branch (line 7122)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_150450) or more_types_in_union_150451):
        
        # Call to round_(...): (line 7125)
        # Processing the call arguments (line 7125)
        
        # Call to getdata(...): (line 7125)
        # Processing the call arguments (line 7125)
        # Getting the type of 'a' (line 7125)
        a_150462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7125, 26), 'a', False)
        # Processing the call keyword arguments (line 7125)
        kwargs_150463 = {}
        # Getting the type of 'getdata' (line 7125)
        getdata_150461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7125, 18), 'getdata', False)
        # Calling getdata(args, kwargs) (line 7125)
        getdata_call_result_150464 = invoke(stypy.reporting.localization.Localization(__file__, 7125, 18), getdata_150461, *[a_150462], **kwargs_150463)
        
        # Getting the type of 'decimals' (line 7125)
        decimals_150465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7125, 30), 'decimals', False)
        # Getting the type of 'out' (line 7125)
        out_150466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7125, 40), 'out', False)
        # Processing the call keyword arguments (line 7125)
        kwargs_150467 = {}
        # Getting the type of 'np' (line 7125)
        np_150459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7125, 8), 'np', False)
        # Obtaining the member 'round_' of a type (line 7125)
        round__150460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7125, 8), np_150459, 'round_')
        # Calling round_(args, kwargs) (line 7125)
        round__call_result_150468 = invoke(stypy.reporting.localization.Localization(__file__, 7125, 8), round__150460, *[getdata_call_result_150464, decimals_150465, out_150466], **kwargs_150467)
        
        
        # Type idiom detected: calculating its left and rigth part (line 7126)
        str_150469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7126, 24), 'str', '_mask')
        # Getting the type of 'out' (line 7126)
        out_150470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7126, 19), 'out')
        
        (may_be_150471, more_types_in_union_150472) = may_provide_member(str_150469, out_150470)

        if may_be_150471:

            if more_types_in_union_150472:
                # Runtime conditional SSA (line 7126)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'out' (line 7126)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7126, 8), 'out', remove_not_member_provider_from_union(out_150470, '_mask'))
            
            # Assigning a Call to a Attribute (line 7127):
            
            # Assigning a Call to a Attribute (line 7127):
            
            # Call to getmask(...): (line 7127)
            # Processing the call arguments (line 7127)
            # Getting the type of 'a' (line 7127)
            a_150474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7127, 32), 'a', False)
            # Processing the call keyword arguments (line 7127)
            kwargs_150475 = {}
            # Getting the type of 'getmask' (line 7127)
            getmask_150473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7127, 24), 'getmask', False)
            # Calling getmask(args, kwargs) (line 7127)
            getmask_call_result_150476 = invoke(stypy.reporting.localization.Localization(__file__, 7127, 24), getmask_150473, *[a_150474], **kwargs_150475)
            
            # Getting the type of 'out' (line 7127)
            out_150477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7127, 12), 'out')
            # Setting the type of the member '_mask' of a type (line 7127)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7127, 12), out_150477, '_mask', getmask_call_result_150476)

            if more_types_in_union_150472:
                # SSA join for if statement (line 7126)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'out' (line 7128)
        out_150478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7128, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 7128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7128, 8), 'stypy_return_type', out_150478)

        if (may_be_150450 and more_types_in_union_150451):
            # SSA join for if statement (line 7122)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'round_(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'round_' in the type store
    # Getting the type of 'stypy_return_type' (line 7098)
    stypy_return_type_150479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7098, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150479)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'round_'
    return stypy_return_type_150479

# Assigning a type to the variable 'round_' (line 7098)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7098, 0), 'round_', round_)

# Assigning a Name to a Name (line 7129):

# Assigning a Name to a Name (line 7129):
# Getting the type of 'round_' (line 7129)
round__150480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7129, 8), 'round_')
# Assigning a type to the variable 'round' (line 7129)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7129, 0), 'round', round__150480)

@norecursion
def mask_rowcols(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 7134)
    None_150481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7134, 25), 'None')
    defaults = [None_150481]
    # Create a new context for function 'mask_rowcols'
    module_type_store = module_type_store.open_function_context('mask_rowcols', 7134, 0, False)
    
    # Passed parameters checking function
    mask_rowcols.stypy_localization = localization
    mask_rowcols.stypy_type_of_self = None
    mask_rowcols.stypy_type_store = module_type_store
    mask_rowcols.stypy_function_name = 'mask_rowcols'
    mask_rowcols.stypy_param_names_list = ['a', 'axis']
    mask_rowcols.stypy_varargs_param_name = None
    mask_rowcols.stypy_kwargs_param_name = None
    mask_rowcols.stypy_call_defaults = defaults
    mask_rowcols.stypy_call_varargs = varargs
    mask_rowcols.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mask_rowcols', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mask_rowcols', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mask_rowcols(...)' code ##################

    str_150482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7208, (-1)), 'str', "\n    Mask rows and/or columns of a 2D array that contain masked values.\n\n    Mask whole rows and/or columns of a 2D array that contain\n    masked values.  The masking behavior is selected using the\n    `axis` parameter.\n\n      - If `axis` is None, rows *and* columns are masked.\n      - If `axis` is 0, only rows are masked.\n      - If `axis` is 1 or -1, only columns are masked.\n\n    Parameters\n    ----------\n    a : array_like, MaskedArray\n        The array to mask.  If not a MaskedArray instance (or if no array\n        elements are masked).  The result is a MaskedArray with `mask` set\n        to `nomask` (False). Must be a 2D array.\n    axis : int, optional\n        Axis along which to perform the operation. If None, applies to a\n        flattened version of the array.\n\n    Returns\n    -------\n    a : MaskedArray\n        A modified version of the input array, masked depending on the value\n        of the `axis` parameter.\n\n    Raises\n    ------\n    NotImplementedError\n        If input array `a` is not 2D.\n\n    See Also\n    --------\n    mask_rows : Mask rows of a 2D array that contain masked values.\n    mask_cols : Mask cols of a 2D array that contain masked values.\n    masked_where : Mask where a condition is met.\n\n    Notes\n    -----\n    The input array's mask is modified by this function.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.zeros((3, 3), dtype=np.int)\n    >>> a[1, 1] = 1\n    >>> a\n    array([[0, 0, 0],\n           [0, 1, 0],\n           [0, 0, 0]])\n    >>> a = ma.masked_equal(a, 1)\n    >>> a\n    masked_array(data =\n     [[0 0 0]\n     [0 -- 0]\n     [0 0 0]],\n          mask =\n     [[False False False]\n     [False  True False]\n     [False False False]],\n          fill_value=999999)\n    >>> ma.mask_rowcols(a)\n    masked_array(data =\n     [[0 -- 0]\n     [-- -- --]\n     [0 -- 0]],\n          mask =\n     [[False  True False]\n     [ True  True  True]\n     [False  True False]],\n          fill_value=999999)\n\n    ")
    
    # Assigning a Call to a Name (line 7209):
    
    # Assigning a Call to a Name (line 7209):
    
    # Call to array(...): (line 7209)
    # Processing the call arguments (line 7209)
    # Getting the type of 'a' (line 7209)
    a_150484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7209, 14), 'a', False)
    # Processing the call keyword arguments (line 7209)
    # Getting the type of 'False' (line 7209)
    False_150485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7209, 23), 'False', False)
    keyword_150486 = False_150485
    kwargs_150487 = {'subok': keyword_150486}
    # Getting the type of 'array' (line 7209)
    array_150483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7209, 8), 'array', False)
    # Calling array(args, kwargs) (line 7209)
    array_call_result_150488 = invoke(stypy.reporting.localization.Localization(__file__, 7209, 8), array_150483, *[a_150484], **kwargs_150487)
    
    # Assigning a type to the variable 'a' (line 7209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7209, 4), 'a', array_call_result_150488)
    
    
    # Getting the type of 'a' (line 7210)
    a_150489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7210, 7), 'a')
    # Obtaining the member 'ndim' of a type (line 7210)
    ndim_150490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7210, 7), a_150489, 'ndim')
    int_150491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7210, 17), 'int')
    # Applying the binary operator '!=' (line 7210)
    result_ne_150492 = python_operator(stypy.reporting.localization.Localization(__file__, 7210, 7), '!=', ndim_150490, int_150491)
    
    # Testing the type of an if condition (line 7210)
    if_condition_150493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7210, 4), result_ne_150492)
    # Assigning a type to the variable 'if_condition_150493' (line 7210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7210, 4), 'if_condition_150493', if_condition_150493)
    # SSA begins for if statement (line 7210)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to NotImplementedError(...): (line 7211)
    # Processing the call arguments (line 7211)
    str_150495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7211, 34), 'str', 'mask_rowcols works for 2D arrays only.')
    # Processing the call keyword arguments (line 7211)
    kwargs_150496 = {}
    # Getting the type of 'NotImplementedError' (line 7211)
    NotImplementedError_150494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7211, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 7211)
    NotImplementedError_call_result_150497 = invoke(stypy.reporting.localization.Localization(__file__, 7211, 14), NotImplementedError_150494, *[str_150495], **kwargs_150496)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 7211, 8), NotImplementedError_call_result_150497, 'raise parameter', BaseException)
    # SSA join for if statement (line 7210)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 7212):
    
    # Assigning a Call to a Name (line 7212):
    
    # Call to getmask(...): (line 7212)
    # Processing the call arguments (line 7212)
    # Getting the type of 'a' (line 7212)
    a_150499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7212, 16), 'a', False)
    # Processing the call keyword arguments (line 7212)
    kwargs_150500 = {}
    # Getting the type of 'getmask' (line 7212)
    getmask_150498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7212, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7212)
    getmask_call_result_150501 = invoke(stypy.reporting.localization.Localization(__file__, 7212, 8), getmask_150498, *[a_150499], **kwargs_150500)
    
    # Assigning a type to the variable 'm' (line 7212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7212, 4), 'm', getmask_call_result_150501)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm' (line 7214)
    m_150502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7214, 7), 'm')
    # Getting the type of 'nomask' (line 7214)
    nomask_150503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7214, 12), 'nomask')
    # Applying the binary operator 'is' (line 7214)
    result_is__150504 = python_operator(stypy.reporting.localization.Localization(__file__, 7214, 7), 'is', m_150502, nomask_150503)
    
    
    
    # Call to any(...): (line 7214)
    # Processing the call keyword arguments (line 7214)
    kwargs_150507 = {}
    # Getting the type of 'm' (line 7214)
    m_150505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7214, 26), 'm', False)
    # Obtaining the member 'any' of a type (line 7214)
    any_150506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7214, 26), m_150505, 'any')
    # Calling any(args, kwargs) (line 7214)
    any_call_result_150508 = invoke(stypy.reporting.localization.Localization(__file__, 7214, 26), any_150506, *[], **kwargs_150507)
    
    # Applying the 'not' unary operator (line 7214)
    result_not__150509 = python_operator(stypy.reporting.localization.Localization(__file__, 7214, 22), 'not', any_call_result_150508)
    
    # Applying the binary operator 'or' (line 7214)
    result_or_keyword_150510 = python_operator(stypy.reporting.localization.Localization(__file__, 7214, 7), 'or', result_is__150504, result_not__150509)
    
    # Testing the type of an if condition (line 7214)
    if_condition_150511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7214, 4), result_or_keyword_150510)
    # Assigning a type to the variable 'if_condition_150511' (line 7214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7214, 4), 'if_condition_150511', if_condition_150511)
    # SSA begins for if statement (line 7214)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 7215)
    a_150512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7215, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 7215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7215, 8), 'stypy_return_type', a_150512)
    # SSA join for if statement (line 7214)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 7216):
    
    # Assigning a Call to a Name (line 7216):
    
    # Call to nonzero(...): (line 7216)
    # Processing the call keyword arguments (line 7216)
    kwargs_150515 = {}
    # Getting the type of 'm' (line 7216)
    m_150513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7216, 16), 'm', False)
    # Obtaining the member 'nonzero' of a type (line 7216)
    nonzero_150514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7216, 16), m_150513, 'nonzero')
    # Calling nonzero(args, kwargs) (line 7216)
    nonzero_call_result_150516 = invoke(stypy.reporting.localization.Localization(__file__, 7216, 16), nonzero_150514, *[], **kwargs_150515)
    
    # Assigning a type to the variable 'maskedval' (line 7216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7216, 4), 'maskedval', nonzero_call_result_150516)
    
    # Assigning a Call to a Attribute (line 7217):
    
    # Assigning a Call to a Attribute (line 7217):
    
    # Call to copy(...): (line 7217)
    # Processing the call keyword arguments (line 7217)
    kwargs_150520 = {}
    # Getting the type of 'a' (line 7217)
    a_150517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7217, 14), 'a', False)
    # Obtaining the member '_mask' of a type (line 7217)
    _mask_150518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7217, 14), a_150517, '_mask')
    # Obtaining the member 'copy' of a type (line 7217)
    copy_150519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7217, 14), _mask_150518, 'copy')
    # Calling copy(args, kwargs) (line 7217)
    copy_call_result_150521 = invoke(stypy.reporting.localization.Localization(__file__, 7217, 14), copy_150519, *[], **kwargs_150520)
    
    # Getting the type of 'a' (line 7217)
    a_150522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7217, 4), 'a')
    # Setting the type of the member '_mask' of a type (line 7217)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7217, 4), a_150522, '_mask', copy_call_result_150521)
    
    
    # Getting the type of 'axis' (line 7218)
    axis_150523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7218, 11), 'axis')
    # Applying the 'not' unary operator (line 7218)
    result_not__150524 = python_operator(stypy.reporting.localization.Localization(__file__, 7218, 7), 'not', axis_150523)
    
    # Testing the type of an if condition (line 7218)
    if_condition_150525 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7218, 4), result_not__150524)
    # Assigning a type to the variable 'if_condition_150525' (line 7218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7218, 4), 'if_condition_150525', if_condition_150525)
    # SSA begins for if statement (line 7218)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 7219):
    
    # Assigning a Name to a Subscript (line 7219):
    # Getting the type of 'masked' (line 7219)
    masked_150526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7219, 37), 'masked')
    # Getting the type of 'a' (line 7219)
    a_150527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7219, 8), 'a')
    
    # Call to unique(...): (line 7219)
    # Processing the call arguments (line 7219)
    
    # Obtaining the type of the subscript
    int_150530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7219, 30), 'int')
    # Getting the type of 'maskedval' (line 7219)
    maskedval_150531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7219, 20), 'maskedval', False)
    # Obtaining the member '__getitem__' of a type (line 7219)
    getitem___150532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7219, 20), maskedval_150531, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 7219)
    subscript_call_result_150533 = invoke(stypy.reporting.localization.Localization(__file__, 7219, 20), getitem___150532, int_150530)
    
    # Processing the call keyword arguments (line 7219)
    kwargs_150534 = {}
    # Getting the type of 'np' (line 7219)
    np_150528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7219, 10), 'np', False)
    # Obtaining the member 'unique' of a type (line 7219)
    unique_150529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7219, 10), np_150528, 'unique')
    # Calling unique(args, kwargs) (line 7219)
    unique_call_result_150535 = invoke(stypy.reporting.localization.Localization(__file__, 7219, 10), unique_150529, *[subscript_call_result_150533], **kwargs_150534)
    
    # Storing an element on a container (line 7219)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7219, 8), a_150527, (unique_call_result_150535, masked_150526))
    # SSA join for if statement (line 7218)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'axis' (line 7220)
    axis_150536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7220, 7), 'axis')
    
    # Obtaining an instance of the builtin type 'list' (line 7220)
    list_150537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7220, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 7220)
    # Adding element type (line 7220)
    # Getting the type of 'None' (line 7220)
    None_150538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7220, 16), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7220, 15), list_150537, None_150538)
    # Adding element type (line 7220)
    int_150539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7220, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7220, 15), list_150537, int_150539)
    # Adding element type (line 7220)
    int_150540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7220, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7220, 15), list_150537, int_150540)
    
    # Applying the binary operator 'in' (line 7220)
    result_contains_150541 = python_operator(stypy.reporting.localization.Localization(__file__, 7220, 7), 'in', axis_150536, list_150537)
    
    # Testing the type of an if condition (line 7220)
    if_condition_150542 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7220, 4), result_contains_150541)
    # Assigning a type to the variable 'if_condition_150542' (line 7220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7220, 4), 'if_condition_150542', if_condition_150542)
    # SSA begins for if statement (line 7220)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 7221):
    
    # Assigning a Name to a Subscript (line 7221):
    # Getting the type of 'masked' (line 7221)
    masked_150543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7221, 40), 'masked')
    # Getting the type of 'a' (line 7221)
    a_150544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7221, 8), 'a')
    slice_150545 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 7221, 8), None, None, None)
    
    # Call to unique(...): (line 7221)
    # Processing the call arguments (line 7221)
    
    # Obtaining the type of the subscript
    int_150548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7221, 33), 'int')
    # Getting the type of 'maskedval' (line 7221)
    maskedval_150549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7221, 23), 'maskedval', False)
    # Obtaining the member '__getitem__' of a type (line 7221)
    getitem___150550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7221, 23), maskedval_150549, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 7221)
    subscript_call_result_150551 = invoke(stypy.reporting.localization.Localization(__file__, 7221, 23), getitem___150550, int_150548)
    
    # Processing the call keyword arguments (line 7221)
    kwargs_150552 = {}
    # Getting the type of 'np' (line 7221)
    np_150546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7221, 13), 'np', False)
    # Obtaining the member 'unique' of a type (line 7221)
    unique_150547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7221, 13), np_150546, 'unique')
    # Calling unique(args, kwargs) (line 7221)
    unique_call_result_150553 = invoke(stypy.reporting.localization.Localization(__file__, 7221, 13), unique_150547, *[subscript_call_result_150551], **kwargs_150552)
    
    # Storing an element on a container (line 7221)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7221, 8), a_150544, ((slice_150545, unique_call_result_150553), masked_150543))
    # SSA join for if statement (line 7220)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'a' (line 7222)
    a_150554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7222, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 7222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7222, 4), 'stypy_return_type', a_150554)
    
    # ################# End of 'mask_rowcols(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mask_rowcols' in the type store
    # Getting the type of 'stypy_return_type' (line 7134)
    stypy_return_type_150555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7134, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150555)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mask_rowcols'
    return stypy_return_type_150555

# Assigning a type to the variable 'mask_rowcols' (line 7134)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7134, 0), 'mask_rowcols', mask_rowcols)

@norecursion
def dot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 7228)
    False_150556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7228, 21), 'False')
    # Getting the type of 'None' (line 7228)
    None_150557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7228, 32), 'None')
    defaults = [False_150556, None_150557]
    # Create a new context for function 'dot'
    module_type_store = module_type_store.open_function_context('dot', 7228, 0, False)
    
    # Passed parameters checking function
    dot.stypy_localization = localization
    dot.stypy_type_of_self = None
    dot.stypy_type_store = module_type_store
    dot.stypy_function_name = 'dot'
    dot.stypy_param_names_list = ['a', 'b', 'strict', 'out']
    dot.stypy_varargs_param_name = None
    dot.stypy_kwargs_param_name = None
    dot.stypy_call_defaults = defaults
    dot.stypy_call_varargs = varargs
    dot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dot', ['a', 'b', 'strict', 'out'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dot', localization, ['a', 'b', 'strict', 'out'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dot(...)' code ##################

    str_150558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7286, (-1)), 'str', '\n    Return the dot product of two arrays.\n\n    This function is the equivalent of `numpy.dot` that takes masked values\n    into account. Note that `strict` and `out` are in different position\n    than in the method version. In order to maintain compatibility with the\n    corresponding method, it is recommended that the optional arguments be\n    treated as keyword only.  At some point that may be mandatory.\n\n    .. note::\n      Works only with 2-D arrays at the moment.\n\n\n    Parameters\n    ----------\n    a, b : masked_array_like\n        Inputs arrays.\n    strict : bool, optional\n        Whether masked data are propagated (True) or set to 0 (False) for\n        the computation. Default is False.  Propagating the mask means that\n        if a masked value appears in a row or column, the whole row or\n        column is considered masked.\n    out : masked_array, optional\n        Output argument. This must have the exact kind that would be returned\n        if it was not used. In particular, it must have the right type, must be\n        C-contiguous, and its dtype must be the dtype that would be returned\n        for `dot(a,b)`. This is a performance feature. Therefore, if these\n        conditions are not met, an exception is raised, instead of attempting\n        to be flexible.\n\n        .. versionadded:: 1.10.2\n\n    See Also\n    --------\n    numpy.dot : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> a = ma.array([[1, 2, 3], [4, 5, 6]], mask=[[1, 0, 0], [0, 0, 0]])\n    >>> b = ma.array([[1, 2], [3, 4], [5, 6]], mask=[[1, 0], [0, 0], [0, 0]])\n    >>> np.ma.dot(a, b)\n    masked_array(data =\n     [[21 26]\n     [45 64]],\n                 mask =\n     [[False False]\n     [False False]],\n           fill_value = 999999)\n    >>> np.ma.dot(a, b, strict=True)\n    masked_array(data =\n     [[-- --]\n     [-- 64]],\n                 mask =\n     [[ True  True]\n     [ True False]],\n           fill_value = 999999)\n\n    ')
    
    
    # Evaluating a boolean operation
    # Getting the type of 'strict' (line 7289)
    strict_150559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7289, 7), 'strict')
    
    # Getting the type of 'a' (line 7289)
    a_150560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7289, 19), 'a')
    # Obtaining the member 'ndim' of a type (line 7289)
    ndim_150561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7289, 19), a_150560, 'ndim')
    int_150562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7289, 29), 'int')
    # Applying the binary operator '==' (line 7289)
    result_eq_150563 = python_operator(stypy.reporting.localization.Localization(__file__, 7289, 19), '==', ndim_150561, int_150562)
    
    # Applying the binary operator 'and' (line 7289)
    result_and_keyword_150564 = python_operator(stypy.reporting.localization.Localization(__file__, 7289, 7), 'and', strict_150559, result_eq_150563)
    
    # Getting the type of 'b' (line 7289)
    b_150565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7289, 37), 'b')
    # Obtaining the member 'ndim' of a type (line 7289)
    ndim_150566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7289, 37), b_150565, 'ndim')
    int_150567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7289, 47), 'int')
    # Applying the binary operator '==' (line 7289)
    result_eq_150568 = python_operator(stypy.reporting.localization.Localization(__file__, 7289, 37), '==', ndim_150566, int_150567)
    
    # Applying the binary operator 'and' (line 7289)
    result_and_keyword_150569 = python_operator(stypy.reporting.localization.Localization(__file__, 7289, 7), 'and', result_and_keyword_150564, result_eq_150568)
    
    # Testing the type of an if condition (line 7289)
    if_condition_150570 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7289, 4), result_and_keyword_150569)
    # Assigning a type to the variable 'if_condition_150570' (line 7289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7289, 4), 'if_condition_150570', if_condition_150570)
    # SSA begins for if statement (line 7289)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 7290):
    
    # Assigning a Call to a Name (line 7290):
    
    # Call to mask_rowcols(...): (line 7290)
    # Processing the call arguments (line 7290)
    # Getting the type of 'a' (line 7290)
    a_150572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7290, 25), 'a', False)
    int_150573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7290, 28), 'int')
    # Processing the call keyword arguments (line 7290)
    kwargs_150574 = {}
    # Getting the type of 'mask_rowcols' (line 7290)
    mask_rowcols_150571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7290, 12), 'mask_rowcols', False)
    # Calling mask_rowcols(args, kwargs) (line 7290)
    mask_rowcols_call_result_150575 = invoke(stypy.reporting.localization.Localization(__file__, 7290, 12), mask_rowcols_150571, *[a_150572, int_150573], **kwargs_150574)
    
    # Assigning a type to the variable 'a' (line 7290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7290, 8), 'a', mask_rowcols_call_result_150575)
    
    # Assigning a Call to a Name (line 7291):
    
    # Assigning a Call to a Name (line 7291):
    
    # Call to mask_rowcols(...): (line 7291)
    # Processing the call arguments (line 7291)
    # Getting the type of 'b' (line 7291)
    b_150577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7291, 25), 'b', False)
    int_150578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7291, 28), 'int')
    # Processing the call keyword arguments (line 7291)
    kwargs_150579 = {}
    # Getting the type of 'mask_rowcols' (line 7291)
    mask_rowcols_150576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7291, 12), 'mask_rowcols', False)
    # Calling mask_rowcols(args, kwargs) (line 7291)
    mask_rowcols_call_result_150580 = invoke(stypy.reporting.localization.Localization(__file__, 7291, 12), mask_rowcols_150576, *[b_150577, int_150578], **kwargs_150579)
    
    # Assigning a type to the variable 'b' (line 7291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7291, 8), 'b', mask_rowcols_call_result_150580)
    # SSA join for if statement (line 7289)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a UnaryOp to a Name (line 7292):
    
    # Assigning a UnaryOp to a Name (line 7292):
    
    
    # Call to getmaskarray(...): (line 7292)
    # Processing the call arguments (line 7292)
    # Getting the type of 'a' (line 7292)
    a_150582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7292, 23), 'a', False)
    # Processing the call keyword arguments (line 7292)
    kwargs_150583 = {}
    # Getting the type of 'getmaskarray' (line 7292)
    getmaskarray_150581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7292, 10), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 7292)
    getmaskarray_call_result_150584 = invoke(stypy.reporting.localization.Localization(__file__, 7292, 10), getmaskarray_150581, *[a_150582], **kwargs_150583)
    
    # Applying the '~' unary operator (line 7292)
    result_inv_150585 = python_operator(stypy.reporting.localization.Localization(__file__, 7292, 9), '~', getmaskarray_call_result_150584)
    
    # Assigning a type to the variable 'am' (line 7292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7292, 4), 'am', result_inv_150585)
    
    # Assigning a UnaryOp to a Name (line 7293):
    
    # Assigning a UnaryOp to a Name (line 7293):
    
    
    # Call to getmaskarray(...): (line 7293)
    # Processing the call arguments (line 7293)
    # Getting the type of 'b' (line 7293)
    b_150587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7293, 23), 'b', False)
    # Processing the call keyword arguments (line 7293)
    kwargs_150588 = {}
    # Getting the type of 'getmaskarray' (line 7293)
    getmaskarray_150586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7293, 10), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 7293)
    getmaskarray_call_result_150589 = invoke(stypy.reporting.localization.Localization(__file__, 7293, 10), getmaskarray_150586, *[b_150587], **kwargs_150588)
    
    # Applying the '~' unary operator (line 7293)
    result_inv_150590 = python_operator(stypy.reporting.localization.Localization(__file__, 7293, 9), '~', getmaskarray_call_result_150589)
    
    # Assigning a type to the variable 'bm' (line 7293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7293, 4), 'bm', result_inv_150590)
    
    # Type idiom detected: calculating its left and rigth part (line 7295)
    # Getting the type of 'out' (line 7295)
    out_150591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7295, 7), 'out')
    # Getting the type of 'None' (line 7295)
    None_150592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7295, 14), 'None')
    
    (may_be_150593, more_types_in_union_150594) = may_be_none(out_150591, None_150592)

    if may_be_150593:

        if more_types_in_union_150594:
            # Runtime conditional SSA (line 7295)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 7296):
        
        # Assigning a Call to a Name (line 7296):
        
        # Call to dot(...): (line 7296)
        # Processing the call arguments (line 7296)
        
        # Call to filled(...): (line 7296)
        # Processing the call arguments (line 7296)
        # Getting the type of 'a' (line 7296)
        a_150598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7296, 26), 'a', False)
        int_150599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7296, 29), 'int')
        # Processing the call keyword arguments (line 7296)
        kwargs_150600 = {}
        # Getting the type of 'filled' (line 7296)
        filled_150597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7296, 19), 'filled', False)
        # Calling filled(args, kwargs) (line 7296)
        filled_call_result_150601 = invoke(stypy.reporting.localization.Localization(__file__, 7296, 19), filled_150597, *[a_150598, int_150599], **kwargs_150600)
        
        
        # Call to filled(...): (line 7296)
        # Processing the call arguments (line 7296)
        # Getting the type of 'b' (line 7296)
        b_150603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7296, 40), 'b', False)
        int_150604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7296, 43), 'int')
        # Processing the call keyword arguments (line 7296)
        kwargs_150605 = {}
        # Getting the type of 'filled' (line 7296)
        filled_150602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7296, 33), 'filled', False)
        # Calling filled(args, kwargs) (line 7296)
        filled_call_result_150606 = invoke(stypy.reporting.localization.Localization(__file__, 7296, 33), filled_150602, *[b_150603, int_150604], **kwargs_150605)
        
        # Processing the call keyword arguments (line 7296)
        kwargs_150607 = {}
        # Getting the type of 'np' (line 7296)
        np_150595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7296, 12), 'np', False)
        # Obtaining the member 'dot' of a type (line 7296)
        dot_150596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7296, 12), np_150595, 'dot')
        # Calling dot(args, kwargs) (line 7296)
        dot_call_result_150608 = invoke(stypy.reporting.localization.Localization(__file__, 7296, 12), dot_150596, *[filled_call_result_150601, filled_call_result_150606], **kwargs_150607)
        
        # Assigning a type to the variable 'd' (line 7296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7296, 8), 'd', dot_call_result_150608)
        
        # Assigning a UnaryOp to a Name (line 7297):
        
        # Assigning a UnaryOp to a Name (line 7297):
        
        
        # Call to dot(...): (line 7297)
        # Processing the call arguments (line 7297)
        # Getting the type of 'am' (line 7297)
        am_150611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7297, 20), 'am', False)
        # Getting the type of 'bm' (line 7297)
        bm_150612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7297, 24), 'bm', False)
        # Processing the call keyword arguments (line 7297)
        kwargs_150613 = {}
        # Getting the type of 'np' (line 7297)
        np_150609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7297, 13), 'np', False)
        # Obtaining the member 'dot' of a type (line 7297)
        dot_150610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7297, 13), np_150609, 'dot')
        # Calling dot(args, kwargs) (line 7297)
        dot_call_result_150614 = invoke(stypy.reporting.localization.Localization(__file__, 7297, 13), dot_150610, *[am_150611, bm_150612], **kwargs_150613)
        
        # Applying the '~' unary operator (line 7297)
        result_inv_150615 = python_operator(stypy.reporting.localization.Localization(__file__, 7297, 12), '~', dot_call_result_150614)
        
        # Assigning a type to the variable 'm' (line 7297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7297, 8), 'm', result_inv_150615)
        
        
        # Getting the type of 'd' (line 7298)
        d_150616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7298, 11), 'd')
        # Obtaining the member 'ndim' of a type (line 7298)
        ndim_150617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7298, 11), d_150616, 'ndim')
        int_150618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7298, 21), 'int')
        # Applying the binary operator '==' (line 7298)
        result_eq_150619 = python_operator(stypy.reporting.localization.Localization(__file__, 7298, 11), '==', ndim_150617, int_150618)
        
        # Testing the type of an if condition (line 7298)
        if_condition_150620 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7298, 8), result_eq_150619)
        # Assigning a type to the variable 'if_condition_150620' (line 7298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7298, 8), 'if_condition_150620', if_condition_150620)
        # SSA begins for if statement (line 7298)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 7299):
        
        # Assigning a Call to a Name (line 7299):
        
        # Call to asarray(...): (line 7299)
        # Processing the call arguments (line 7299)
        # Getting the type of 'd' (line 7299)
        d_150623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7299, 27), 'd', False)
        # Processing the call keyword arguments (line 7299)
        kwargs_150624 = {}
        # Getting the type of 'np' (line 7299)
        np_150621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7299, 16), 'np', False)
        # Obtaining the member 'asarray' of a type (line 7299)
        asarray_150622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7299, 16), np_150621, 'asarray')
        # Calling asarray(args, kwargs) (line 7299)
        asarray_call_result_150625 = invoke(stypy.reporting.localization.Localization(__file__, 7299, 16), asarray_150622, *[d_150623], **kwargs_150624)
        
        # Assigning a type to the variable 'd' (line 7299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7299, 12), 'd', asarray_call_result_150625)
        # SSA join for if statement (line 7298)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 7300):
        
        # Assigning a Call to a Name (line 7300):
        
        # Call to view(...): (line 7300)
        # Processing the call arguments (line 7300)
        
        # Call to get_masked_subclass(...): (line 7300)
        # Processing the call arguments (line 7300)
        # Getting the type of 'a' (line 7300)
        a_150629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7300, 39), 'a', False)
        # Getting the type of 'b' (line 7300)
        b_150630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7300, 42), 'b', False)
        # Processing the call keyword arguments (line 7300)
        kwargs_150631 = {}
        # Getting the type of 'get_masked_subclass' (line 7300)
        get_masked_subclass_150628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7300, 19), 'get_masked_subclass', False)
        # Calling get_masked_subclass(args, kwargs) (line 7300)
        get_masked_subclass_call_result_150632 = invoke(stypy.reporting.localization.Localization(__file__, 7300, 19), get_masked_subclass_150628, *[a_150629, b_150630], **kwargs_150631)
        
        # Processing the call keyword arguments (line 7300)
        kwargs_150633 = {}
        # Getting the type of 'd' (line 7300)
        d_150626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7300, 12), 'd', False)
        # Obtaining the member 'view' of a type (line 7300)
        view_150627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7300, 12), d_150626, 'view')
        # Calling view(args, kwargs) (line 7300)
        view_call_result_150634 = invoke(stypy.reporting.localization.Localization(__file__, 7300, 12), view_150627, *[get_masked_subclass_call_result_150632], **kwargs_150633)
        
        # Assigning a type to the variable 'r' (line 7300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7300, 8), 'r', view_call_result_150634)
        
        # Call to __setmask__(...): (line 7301)
        # Processing the call arguments (line 7301)
        # Getting the type of 'm' (line 7301)
        m_150637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7301, 22), 'm', False)
        # Processing the call keyword arguments (line 7301)
        kwargs_150638 = {}
        # Getting the type of 'r' (line 7301)
        r_150635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7301, 8), 'r', False)
        # Obtaining the member '__setmask__' of a type (line 7301)
        setmask___150636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7301, 8), r_150635, '__setmask__')
        # Calling __setmask__(args, kwargs) (line 7301)
        setmask___call_result_150639 = invoke(stypy.reporting.localization.Localization(__file__, 7301, 8), setmask___150636, *[m_150637], **kwargs_150638)
        
        # Getting the type of 'r' (line 7302)
        r_150640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7302, 15), 'r')
        # Assigning a type to the variable 'stypy_return_type' (line 7302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7302, 8), 'stypy_return_type', r_150640)

        if more_types_in_union_150594:
            # Runtime conditional SSA for else branch (line 7295)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_150593) or more_types_in_union_150594):
        
        # Assigning a Call to a Name (line 7304):
        
        # Assigning a Call to a Name (line 7304):
        
        # Call to dot(...): (line 7304)
        # Processing the call arguments (line 7304)
        
        # Call to filled(...): (line 7304)
        # Processing the call arguments (line 7304)
        # Getting the type of 'a' (line 7304)
        a_150644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7304, 26), 'a', False)
        int_150645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7304, 29), 'int')
        # Processing the call keyword arguments (line 7304)
        kwargs_150646 = {}
        # Getting the type of 'filled' (line 7304)
        filled_150643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7304, 19), 'filled', False)
        # Calling filled(args, kwargs) (line 7304)
        filled_call_result_150647 = invoke(stypy.reporting.localization.Localization(__file__, 7304, 19), filled_150643, *[a_150644, int_150645], **kwargs_150646)
        
        
        # Call to filled(...): (line 7304)
        # Processing the call arguments (line 7304)
        # Getting the type of 'b' (line 7304)
        b_150649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7304, 40), 'b', False)
        int_150650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7304, 43), 'int')
        # Processing the call keyword arguments (line 7304)
        kwargs_150651 = {}
        # Getting the type of 'filled' (line 7304)
        filled_150648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7304, 33), 'filled', False)
        # Calling filled(args, kwargs) (line 7304)
        filled_call_result_150652 = invoke(stypy.reporting.localization.Localization(__file__, 7304, 33), filled_150648, *[b_150649, int_150650], **kwargs_150651)
        
        # Getting the type of 'out' (line 7304)
        out_150653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7304, 47), 'out', False)
        # Obtaining the member '_data' of a type (line 7304)
        _data_150654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7304, 47), out_150653, '_data')
        # Processing the call keyword arguments (line 7304)
        kwargs_150655 = {}
        # Getting the type of 'np' (line 7304)
        np_150641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7304, 12), 'np', False)
        # Obtaining the member 'dot' of a type (line 7304)
        dot_150642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7304, 12), np_150641, 'dot')
        # Calling dot(args, kwargs) (line 7304)
        dot_call_result_150656 = invoke(stypy.reporting.localization.Localization(__file__, 7304, 12), dot_150642, *[filled_call_result_150647, filled_call_result_150652, _data_150654], **kwargs_150655)
        
        # Assigning a type to the variable 'd' (line 7304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7304, 8), 'd', dot_call_result_150656)
        
        
        # Getting the type of 'out' (line 7305)
        out_150657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7305, 11), 'out')
        # Obtaining the member 'mask' of a type (line 7305)
        mask_150658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7305, 11), out_150657, 'mask')
        # Obtaining the member 'shape' of a type (line 7305)
        shape_150659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7305, 11), mask_150658, 'shape')
        # Getting the type of 'd' (line 7305)
        d_150660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7305, 29), 'd')
        # Obtaining the member 'shape' of a type (line 7305)
        shape_150661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7305, 29), d_150660, 'shape')
        # Applying the binary operator '!=' (line 7305)
        result_ne_150662 = python_operator(stypy.reporting.localization.Localization(__file__, 7305, 11), '!=', shape_150659, shape_150661)
        
        # Testing the type of an if condition (line 7305)
        if_condition_150663 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7305, 8), result_ne_150662)
        # Assigning a type to the variable 'if_condition_150663' (line 7305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7305, 8), 'if_condition_150663', if_condition_150663)
        # SSA begins for if statement (line 7305)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 7306):
        
        # Assigning a Call to a Attribute (line 7306):
        
        # Call to empty(...): (line 7306)
        # Processing the call arguments (line 7306)
        # Getting the type of 'd' (line 7306)
        d_150666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7306, 33), 'd', False)
        # Obtaining the member 'shape' of a type (line 7306)
        shape_150667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7306, 33), d_150666, 'shape')
        # Getting the type of 'MaskType' (line 7306)
        MaskType_150668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7306, 42), 'MaskType', False)
        # Processing the call keyword arguments (line 7306)
        kwargs_150669 = {}
        # Getting the type of 'np' (line 7306)
        np_150664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7306, 24), 'np', False)
        # Obtaining the member 'empty' of a type (line 7306)
        empty_150665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7306, 24), np_150664, 'empty')
        # Calling empty(args, kwargs) (line 7306)
        empty_call_result_150670 = invoke(stypy.reporting.localization.Localization(__file__, 7306, 24), empty_150665, *[shape_150667, MaskType_150668], **kwargs_150669)
        
        # Getting the type of 'out' (line 7306)
        out_150671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7306, 12), 'out')
        # Setting the type of the member '_mask' of a type (line 7306)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7306, 12), out_150671, '_mask', empty_call_result_150670)
        # SSA join for if statement (line 7305)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to dot(...): (line 7307)
        # Processing the call arguments (line 7307)
        # Getting the type of 'am' (line 7307)
        am_150674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7307, 15), 'am', False)
        # Getting the type of 'bm' (line 7307)
        bm_150675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7307, 19), 'bm', False)
        # Getting the type of 'out' (line 7307)
        out_150676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7307, 23), 'out', False)
        # Obtaining the member '_mask' of a type (line 7307)
        _mask_150677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7307, 23), out_150676, '_mask')
        # Processing the call keyword arguments (line 7307)
        kwargs_150678 = {}
        # Getting the type of 'np' (line 7307)
        np_150672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7307, 8), 'np', False)
        # Obtaining the member 'dot' of a type (line 7307)
        dot_150673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7307, 8), np_150672, 'dot')
        # Calling dot(args, kwargs) (line 7307)
        dot_call_result_150679 = invoke(stypy.reporting.localization.Localization(__file__, 7307, 8), dot_150673, *[am_150674, bm_150675, _mask_150677], **kwargs_150678)
        
        
        # Call to logical_not(...): (line 7308)
        # Processing the call arguments (line 7308)
        # Getting the type of 'out' (line 7308)
        out_150682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7308, 23), 'out', False)
        # Obtaining the member '_mask' of a type (line 7308)
        _mask_150683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7308, 23), out_150682, '_mask')
        # Getting the type of 'out' (line 7308)
        out_150684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7308, 34), 'out', False)
        # Obtaining the member '_mask' of a type (line 7308)
        _mask_150685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7308, 34), out_150684, '_mask')
        # Processing the call keyword arguments (line 7308)
        kwargs_150686 = {}
        # Getting the type of 'np' (line 7308)
        np_150680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7308, 8), 'np', False)
        # Obtaining the member 'logical_not' of a type (line 7308)
        logical_not_150681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7308, 8), np_150680, 'logical_not')
        # Calling logical_not(args, kwargs) (line 7308)
        logical_not_call_result_150687 = invoke(stypy.reporting.localization.Localization(__file__, 7308, 8), logical_not_150681, *[_mask_150683, _mask_150685], **kwargs_150686)
        
        # Getting the type of 'out' (line 7309)
        out_150688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7309, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 7309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7309, 8), 'stypy_return_type', out_150688)

        if (may_be_150593 and more_types_in_union_150594):
            # SSA join for if statement (line 7295)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'dot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dot' in the type store
    # Getting the type of 'stypy_return_type' (line 7228)
    stypy_return_type_150689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7228, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150689)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dot'
    return stypy_return_type_150689

# Assigning a type to the variable 'dot' (line 7228)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7228, 0), 'dot', dot)

@norecursion
def inner(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'inner'
    module_type_store = module_type_store.open_function_context('inner', 7312, 0, False)
    
    # Passed parameters checking function
    inner.stypy_localization = localization
    inner.stypy_type_of_self = None
    inner.stypy_type_store = module_type_store
    inner.stypy_function_name = 'inner'
    inner.stypy_param_names_list = ['a', 'b']
    inner.stypy_varargs_param_name = None
    inner.stypy_kwargs_param_name = None
    inner.stypy_call_defaults = defaults
    inner.stypy_call_varargs = varargs
    inner.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'inner', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'inner', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'inner(...)' code ##################

    str_150690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7323, (-1)), 'str', '\n    Returns the inner product of a and b for arrays of floating point types.\n\n    Like the generic NumPy equivalent the product sum is over the last dimension\n    of a and b.\n\n    Notes\n    -----\n    The first argument is not conjugated.\n\n    ')
    
    # Assigning a Call to a Name (line 7324):
    
    # Assigning a Call to a Name (line 7324):
    
    # Call to filled(...): (line 7324)
    # Processing the call arguments (line 7324)
    # Getting the type of 'a' (line 7324)
    a_150692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7324, 16), 'a', False)
    int_150693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7324, 19), 'int')
    # Processing the call keyword arguments (line 7324)
    kwargs_150694 = {}
    # Getting the type of 'filled' (line 7324)
    filled_150691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7324, 9), 'filled', False)
    # Calling filled(args, kwargs) (line 7324)
    filled_call_result_150695 = invoke(stypy.reporting.localization.Localization(__file__, 7324, 9), filled_150691, *[a_150692, int_150693], **kwargs_150694)
    
    # Assigning a type to the variable 'fa' (line 7324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7324, 4), 'fa', filled_call_result_150695)
    
    # Assigning a Call to a Name (line 7325):
    
    # Assigning a Call to a Name (line 7325):
    
    # Call to filled(...): (line 7325)
    # Processing the call arguments (line 7325)
    # Getting the type of 'b' (line 7325)
    b_150697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7325, 16), 'b', False)
    int_150698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7325, 19), 'int')
    # Processing the call keyword arguments (line 7325)
    kwargs_150699 = {}
    # Getting the type of 'filled' (line 7325)
    filled_150696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7325, 9), 'filled', False)
    # Calling filled(args, kwargs) (line 7325)
    filled_call_result_150700 = invoke(stypy.reporting.localization.Localization(__file__, 7325, 9), filled_150696, *[b_150697, int_150698], **kwargs_150699)
    
    # Assigning a type to the variable 'fb' (line 7325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7325, 4), 'fb', filled_call_result_150700)
    
    
    
    # Call to len(...): (line 7326)
    # Processing the call arguments (line 7326)
    # Getting the type of 'fa' (line 7326)
    fa_150702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7326, 11), 'fa', False)
    # Obtaining the member 'shape' of a type (line 7326)
    shape_150703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7326, 11), fa_150702, 'shape')
    # Processing the call keyword arguments (line 7326)
    kwargs_150704 = {}
    # Getting the type of 'len' (line 7326)
    len_150701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7326, 7), 'len', False)
    # Calling len(args, kwargs) (line 7326)
    len_call_result_150705 = invoke(stypy.reporting.localization.Localization(__file__, 7326, 7), len_150701, *[shape_150703], **kwargs_150704)
    
    int_150706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7326, 24), 'int')
    # Applying the binary operator '==' (line 7326)
    result_eq_150707 = python_operator(stypy.reporting.localization.Localization(__file__, 7326, 7), '==', len_call_result_150705, int_150706)
    
    # Testing the type of an if condition (line 7326)
    if_condition_150708 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7326, 4), result_eq_150707)
    # Assigning a type to the variable 'if_condition_150708' (line 7326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7326, 4), 'if_condition_150708', if_condition_150708)
    # SSA begins for if statement (line 7326)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Attribute (line 7327):
    
    # Assigning a Tuple to a Attribute (line 7327):
    
    # Obtaining an instance of the builtin type 'tuple' (line 7327)
    tuple_150709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7327, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 7327)
    # Adding element type (line 7327)
    int_150710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7327, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7327, 20), tuple_150709, int_150710)
    
    # Getting the type of 'fa' (line 7327)
    fa_150711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7327, 8), 'fa')
    # Setting the type of the member 'shape' of a type (line 7327)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7327, 8), fa_150711, 'shape', tuple_150709)
    # SSA join for if statement (line 7326)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 7328)
    # Processing the call arguments (line 7328)
    # Getting the type of 'fb' (line 7328)
    fb_150713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7328, 11), 'fb', False)
    # Obtaining the member 'shape' of a type (line 7328)
    shape_150714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7328, 11), fb_150713, 'shape')
    # Processing the call keyword arguments (line 7328)
    kwargs_150715 = {}
    # Getting the type of 'len' (line 7328)
    len_150712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7328, 7), 'len', False)
    # Calling len(args, kwargs) (line 7328)
    len_call_result_150716 = invoke(stypy.reporting.localization.Localization(__file__, 7328, 7), len_150712, *[shape_150714], **kwargs_150715)
    
    int_150717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7328, 24), 'int')
    # Applying the binary operator '==' (line 7328)
    result_eq_150718 = python_operator(stypy.reporting.localization.Localization(__file__, 7328, 7), '==', len_call_result_150716, int_150717)
    
    # Testing the type of an if condition (line 7328)
    if_condition_150719 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7328, 4), result_eq_150718)
    # Assigning a type to the variable 'if_condition_150719' (line 7328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7328, 4), 'if_condition_150719', if_condition_150719)
    # SSA begins for if statement (line 7328)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Attribute (line 7329):
    
    # Assigning a Tuple to a Attribute (line 7329):
    
    # Obtaining an instance of the builtin type 'tuple' (line 7329)
    tuple_150720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7329, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 7329)
    # Adding element type (line 7329)
    int_150721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7329, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7329, 20), tuple_150720, int_150721)
    
    # Getting the type of 'fb' (line 7329)
    fb_150722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7329, 8), 'fb')
    # Setting the type of the member 'shape' of a type (line 7329)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7329, 8), fb_150722, 'shape', tuple_150720)
    # SSA join for if statement (line 7328)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to view(...): (line 7330)
    # Processing the call arguments (line 7330)
    # Getting the type of 'MaskedArray' (line 7330)
    MaskedArray_150730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7330, 33), 'MaskedArray', False)
    # Processing the call keyword arguments (line 7330)
    kwargs_150731 = {}
    
    # Call to inner(...): (line 7330)
    # Processing the call arguments (line 7330)
    # Getting the type of 'fa' (line 7330)
    fa_150725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7330, 20), 'fa', False)
    # Getting the type of 'fb' (line 7330)
    fb_150726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7330, 24), 'fb', False)
    # Processing the call keyword arguments (line 7330)
    kwargs_150727 = {}
    # Getting the type of 'np' (line 7330)
    np_150723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7330, 11), 'np', False)
    # Obtaining the member 'inner' of a type (line 7330)
    inner_150724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7330, 11), np_150723, 'inner')
    # Calling inner(args, kwargs) (line 7330)
    inner_call_result_150728 = invoke(stypy.reporting.localization.Localization(__file__, 7330, 11), inner_150724, *[fa_150725, fb_150726], **kwargs_150727)
    
    # Obtaining the member 'view' of a type (line 7330)
    view_150729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7330, 11), inner_call_result_150728, 'view')
    # Calling view(args, kwargs) (line 7330)
    view_call_result_150732 = invoke(stypy.reporting.localization.Localization(__file__, 7330, 11), view_150729, *[MaskedArray_150730], **kwargs_150731)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7330, 4), 'stypy_return_type', view_call_result_150732)
    
    # ################# End of 'inner(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'inner' in the type store
    # Getting the type of 'stypy_return_type' (line 7312)
    stypy_return_type_150733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7312, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150733)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'inner'
    return stypy_return_type_150733

# Assigning a type to the variable 'inner' (line 7312)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7312, 0), 'inner', inner)

# Assigning a Call to a Attribute (line 7331):

# Assigning a Call to a Attribute (line 7331):

# Call to doc_note(...): (line 7331)
# Processing the call arguments (line 7331)
# Getting the type of 'np' (line 7331)
np_150735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7331, 25), 'np', False)
# Obtaining the member 'inner' of a type (line 7331)
inner_150736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7331, 25), np_150735, 'inner')
# Obtaining the member '__doc__' of a type (line 7331)
doc___150737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7331, 25), inner_150736, '__doc__')
str_150738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7332, 25), 'str', 'Masked values are replaced by 0.')
# Processing the call keyword arguments (line 7331)
kwargs_150739 = {}
# Getting the type of 'doc_note' (line 7331)
doc_note_150734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7331, 16), 'doc_note', False)
# Calling doc_note(args, kwargs) (line 7331)
doc_note_call_result_150740 = invoke(stypy.reporting.localization.Localization(__file__, 7331, 16), doc_note_150734, *[doc___150737, str_150738], **kwargs_150739)

# Getting the type of 'inner' (line 7331)
inner_150741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7331, 0), 'inner')
# Setting the type of the member '__doc__' of a type (line 7331)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7331, 0), inner_150741, '__doc__', doc_note_call_result_150740)

# Assigning a Name to a Name (line 7333):

# Assigning a Name to a Name (line 7333):
# Getting the type of 'inner' (line 7333)
inner_150742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7333, 15), 'inner')
# Assigning a type to the variable 'innerproduct' (line 7333)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7333, 0), 'innerproduct', inner_150742)

@norecursion
def outer(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'outer'
    module_type_store = module_type_store.open_function_context('outer', 7336, 0, False)
    
    # Passed parameters checking function
    outer.stypy_localization = localization
    outer.stypy_type_of_self = None
    outer.stypy_type_store = module_type_store
    outer.stypy_function_name = 'outer'
    outer.stypy_param_names_list = ['a', 'b']
    outer.stypy_varargs_param_name = None
    outer.stypy_kwargs_param_name = None
    outer.stypy_call_defaults = defaults
    outer.stypy_call_varargs = varargs
    outer.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'outer', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'outer', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'outer(...)' code ##################

    str_150743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7337, 4), 'str', 'maskedarray version of the numpy function.')
    
    # Assigning a Call to a Name (line 7338):
    
    # Assigning a Call to a Name (line 7338):
    
    # Call to ravel(...): (line 7338)
    # Processing the call keyword arguments (line 7338)
    kwargs_150750 = {}
    
    # Call to filled(...): (line 7338)
    # Processing the call arguments (line 7338)
    # Getting the type of 'a' (line 7338)
    a_150745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7338, 16), 'a', False)
    int_150746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7338, 19), 'int')
    # Processing the call keyword arguments (line 7338)
    kwargs_150747 = {}
    # Getting the type of 'filled' (line 7338)
    filled_150744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7338, 9), 'filled', False)
    # Calling filled(args, kwargs) (line 7338)
    filled_call_result_150748 = invoke(stypy.reporting.localization.Localization(__file__, 7338, 9), filled_150744, *[a_150745, int_150746], **kwargs_150747)
    
    # Obtaining the member 'ravel' of a type (line 7338)
    ravel_150749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7338, 9), filled_call_result_150748, 'ravel')
    # Calling ravel(args, kwargs) (line 7338)
    ravel_call_result_150751 = invoke(stypy.reporting.localization.Localization(__file__, 7338, 9), ravel_150749, *[], **kwargs_150750)
    
    # Assigning a type to the variable 'fa' (line 7338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7338, 4), 'fa', ravel_call_result_150751)
    
    # Assigning a Call to a Name (line 7339):
    
    # Assigning a Call to a Name (line 7339):
    
    # Call to ravel(...): (line 7339)
    # Processing the call keyword arguments (line 7339)
    kwargs_150758 = {}
    
    # Call to filled(...): (line 7339)
    # Processing the call arguments (line 7339)
    # Getting the type of 'b' (line 7339)
    b_150753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7339, 16), 'b', False)
    int_150754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7339, 19), 'int')
    # Processing the call keyword arguments (line 7339)
    kwargs_150755 = {}
    # Getting the type of 'filled' (line 7339)
    filled_150752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7339, 9), 'filled', False)
    # Calling filled(args, kwargs) (line 7339)
    filled_call_result_150756 = invoke(stypy.reporting.localization.Localization(__file__, 7339, 9), filled_150752, *[b_150753, int_150754], **kwargs_150755)
    
    # Obtaining the member 'ravel' of a type (line 7339)
    ravel_150757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7339, 9), filled_call_result_150756, 'ravel')
    # Calling ravel(args, kwargs) (line 7339)
    ravel_call_result_150759 = invoke(stypy.reporting.localization.Localization(__file__, 7339, 9), ravel_150757, *[], **kwargs_150758)
    
    # Assigning a type to the variable 'fb' (line 7339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7339, 4), 'fb', ravel_call_result_150759)
    
    # Assigning a Call to a Name (line 7340):
    
    # Assigning a Call to a Name (line 7340):
    
    # Call to outer(...): (line 7340)
    # Processing the call arguments (line 7340)
    # Getting the type of 'fa' (line 7340)
    fa_150762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7340, 17), 'fa', False)
    # Getting the type of 'fb' (line 7340)
    fb_150763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7340, 21), 'fb', False)
    # Processing the call keyword arguments (line 7340)
    kwargs_150764 = {}
    # Getting the type of 'np' (line 7340)
    np_150760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7340, 8), 'np', False)
    # Obtaining the member 'outer' of a type (line 7340)
    outer_150761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7340, 8), np_150760, 'outer')
    # Calling outer(args, kwargs) (line 7340)
    outer_call_result_150765 = invoke(stypy.reporting.localization.Localization(__file__, 7340, 8), outer_150761, *[fa_150762, fb_150763], **kwargs_150764)
    
    # Assigning a type to the variable 'd' (line 7340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7340, 4), 'd', outer_call_result_150765)
    
    # Assigning a Call to a Name (line 7341):
    
    # Assigning a Call to a Name (line 7341):
    
    # Call to getmask(...): (line 7341)
    # Processing the call arguments (line 7341)
    # Getting the type of 'a' (line 7341)
    a_150767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7341, 17), 'a', False)
    # Processing the call keyword arguments (line 7341)
    kwargs_150768 = {}
    # Getting the type of 'getmask' (line 7341)
    getmask_150766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7341, 9), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7341)
    getmask_call_result_150769 = invoke(stypy.reporting.localization.Localization(__file__, 7341, 9), getmask_150766, *[a_150767], **kwargs_150768)
    
    # Assigning a type to the variable 'ma' (line 7341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7341, 4), 'ma', getmask_call_result_150769)
    
    # Assigning a Call to a Name (line 7342):
    
    # Assigning a Call to a Name (line 7342):
    
    # Call to getmask(...): (line 7342)
    # Processing the call arguments (line 7342)
    # Getting the type of 'b' (line 7342)
    b_150771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7342, 17), 'b', False)
    # Processing the call keyword arguments (line 7342)
    kwargs_150772 = {}
    # Getting the type of 'getmask' (line 7342)
    getmask_150770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7342, 9), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7342)
    getmask_call_result_150773 = invoke(stypy.reporting.localization.Localization(__file__, 7342, 9), getmask_150770, *[b_150771], **kwargs_150772)
    
    # Assigning a type to the variable 'mb' (line 7342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7342, 4), 'mb', getmask_call_result_150773)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'ma' (line 7343)
    ma_150774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7343, 7), 'ma')
    # Getting the type of 'nomask' (line 7343)
    nomask_150775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7343, 13), 'nomask')
    # Applying the binary operator 'is' (line 7343)
    result_is__150776 = python_operator(stypy.reporting.localization.Localization(__file__, 7343, 7), 'is', ma_150774, nomask_150775)
    
    
    # Getting the type of 'mb' (line 7343)
    mb_150777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7343, 24), 'mb')
    # Getting the type of 'nomask' (line 7343)
    nomask_150778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7343, 30), 'nomask')
    # Applying the binary operator 'is' (line 7343)
    result_is__150779 = python_operator(stypy.reporting.localization.Localization(__file__, 7343, 24), 'is', mb_150777, nomask_150778)
    
    # Applying the binary operator 'and' (line 7343)
    result_and_keyword_150780 = python_operator(stypy.reporting.localization.Localization(__file__, 7343, 7), 'and', result_is__150776, result_is__150779)
    
    # Testing the type of an if condition (line 7343)
    if_condition_150781 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7343, 4), result_and_keyword_150780)
    # Assigning a type to the variable 'if_condition_150781' (line 7343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7343, 4), 'if_condition_150781', if_condition_150781)
    # SSA begins for if statement (line 7343)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to masked_array(...): (line 7344)
    # Processing the call arguments (line 7344)
    # Getting the type of 'd' (line 7344)
    d_150783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7344, 28), 'd', False)
    # Processing the call keyword arguments (line 7344)
    kwargs_150784 = {}
    # Getting the type of 'masked_array' (line 7344)
    masked_array_150782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7344, 15), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7344)
    masked_array_call_result_150785 = invoke(stypy.reporting.localization.Localization(__file__, 7344, 15), masked_array_150782, *[d_150783], **kwargs_150784)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7344, 8), 'stypy_return_type', masked_array_call_result_150785)
    # SSA join for if statement (line 7343)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 7345):
    
    # Assigning a Call to a Name (line 7345):
    
    # Call to getmaskarray(...): (line 7345)
    # Processing the call arguments (line 7345)
    # Getting the type of 'a' (line 7345)
    a_150787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7345, 22), 'a', False)
    # Processing the call keyword arguments (line 7345)
    kwargs_150788 = {}
    # Getting the type of 'getmaskarray' (line 7345)
    getmaskarray_150786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7345, 9), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 7345)
    getmaskarray_call_result_150789 = invoke(stypy.reporting.localization.Localization(__file__, 7345, 9), getmaskarray_150786, *[a_150787], **kwargs_150788)
    
    # Assigning a type to the variable 'ma' (line 7345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7345, 4), 'ma', getmaskarray_call_result_150789)
    
    # Assigning a Call to a Name (line 7346):
    
    # Assigning a Call to a Name (line 7346):
    
    # Call to getmaskarray(...): (line 7346)
    # Processing the call arguments (line 7346)
    # Getting the type of 'b' (line 7346)
    b_150791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7346, 22), 'b', False)
    # Processing the call keyword arguments (line 7346)
    kwargs_150792 = {}
    # Getting the type of 'getmaskarray' (line 7346)
    getmaskarray_150790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7346, 9), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 7346)
    getmaskarray_call_result_150793 = invoke(stypy.reporting.localization.Localization(__file__, 7346, 9), getmaskarray_150790, *[b_150791], **kwargs_150792)
    
    # Assigning a type to the variable 'mb' (line 7346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7346, 4), 'mb', getmaskarray_call_result_150793)
    
    # Assigning a Call to a Name (line 7347):
    
    # Assigning a Call to a Name (line 7347):
    
    # Call to make_mask(...): (line 7347)
    # Processing the call arguments (line 7347)
    int_150795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7347, 18), 'int')
    
    # Call to outer(...): (line 7347)
    # Processing the call arguments (line 7347)
    int_150798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7347, 31), 'int')
    # Getting the type of 'ma' (line 7347)
    ma_150799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7347, 35), 'ma', False)
    # Applying the binary operator '-' (line 7347)
    result_sub_150800 = python_operator(stypy.reporting.localization.Localization(__file__, 7347, 31), '-', int_150798, ma_150799)
    
    int_150801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7347, 39), 'int')
    # Getting the type of 'mb' (line 7347)
    mb_150802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7347, 43), 'mb', False)
    # Applying the binary operator '-' (line 7347)
    result_sub_150803 = python_operator(stypy.reporting.localization.Localization(__file__, 7347, 39), '-', int_150801, mb_150802)
    
    # Processing the call keyword arguments (line 7347)
    kwargs_150804 = {}
    # Getting the type of 'np' (line 7347)
    np_150796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7347, 22), 'np', False)
    # Obtaining the member 'outer' of a type (line 7347)
    outer_150797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7347, 22), np_150796, 'outer')
    # Calling outer(args, kwargs) (line 7347)
    outer_call_result_150805 = invoke(stypy.reporting.localization.Localization(__file__, 7347, 22), outer_150797, *[result_sub_150800, result_sub_150803], **kwargs_150804)
    
    # Applying the binary operator '-' (line 7347)
    result_sub_150806 = python_operator(stypy.reporting.localization.Localization(__file__, 7347, 18), '-', int_150795, outer_call_result_150805)
    
    # Processing the call keyword arguments (line 7347)
    int_150807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7347, 53), 'int')
    keyword_150808 = int_150807
    kwargs_150809 = {'copy': keyword_150808}
    # Getting the type of 'make_mask' (line 7347)
    make_mask_150794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7347, 8), 'make_mask', False)
    # Calling make_mask(args, kwargs) (line 7347)
    make_mask_call_result_150810 = invoke(stypy.reporting.localization.Localization(__file__, 7347, 8), make_mask_150794, *[result_sub_150806], **kwargs_150809)
    
    # Assigning a type to the variable 'm' (line 7347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7347, 4), 'm', make_mask_call_result_150810)
    
    # Call to masked_array(...): (line 7348)
    # Processing the call arguments (line 7348)
    # Getting the type of 'd' (line 7348)
    d_150812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7348, 24), 'd', False)
    # Processing the call keyword arguments (line 7348)
    # Getting the type of 'm' (line 7348)
    m_150813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7348, 32), 'm', False)
    keyword_150814 = m_150813
    kwargs_150815 = {'mask': keyword_150814}
    # Getting the type of 'masked_array' (line 7348)
    masked_array_150811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7348, 11), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7348)
    masked_array_call_result_150816 = invoke(stypy.reporting.localization.Localization(__file__, 7348, 11), masked_array_150811, *[d_150812], **kwargs_150815)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7348, 4), 'stypy_return_type', masked_array_call_result_150816)
    
    # ################# End of 'outer(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'outer' in the type store
    # Getting the type of 'stypy_return_type' (line 7336)
    stypy_return_type_150817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7336, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150817)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'outer'
    return stypy_return_type_150817

# Assigning a type to the variable 'outer' (line 7336)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7336, 0), 'outer', outer)

# Assigning a Call to a Attribute (line 7349):

# Assigning a Call to a Attribute (line 7349):

# Call to doc_note(...): (line 7349)
# Processing the call arguments (line 7349)
# Getting the type of 'np' (line 7349)
np_150819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7349, 25), 'np', False)
# Obtaining the member 'outer' of a type (line 7349)
outer_150820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7349, 25), np_150819, 'outer')
# Obtaining the member '__doc__' of a type (line 7349)
doc___150821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7349, 25), outer_150820, '__doc__')
str_150822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7350, 25), 'str', 'Masked values are replaced by 0.')
# Processing the call keyword arguments (line 7349)
kwargs_150823 = {}
# Getting the type of 'doc_note' (line 7349)
doc_note_150818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7349, 16), 'doc_note', False)
# Calling doc_note(args, kwargs) (line 7349)
doc_note_call_result_150824 = invoke(stypy.reporting.localization.Localization(__file__, 7349, 16), doc_note_150818, *[doc___150821, str_150822], **kwargs_150823)

# Getting the type of 'outer' (line 7349)
outer_150825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7349, 0), 'outer')
# Setting the type of the member '__doc__' of a type (line 7349)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7349, 0), outer_150825, '__doc__', doc_note_call_result_150824)

# Assigning a Name to a Name (line 7351):

# Assigning a Name to a Name (line 7351):
# Getting the type of 'outer' (line 7351)
outer_150826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7351, 15), 'outer')
# Assigning a type to the variable 'outerproduct' (line 7351)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7351, 0), 'outerproduct', outer_150826)

@norecursion
def allequal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 7354)
    True_150827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7354, 30), 'True')
    defaults = [True_150827]
    # Create a new context for function 'allequal'
    module_type_store = module_type_store.open_function_context('allequal', 7354, 0, False)
    
    # Passed parameters checking function
    allequal.stypy_localization = localization
    allequal.stypy_type_of_self = None
    allequal.stypy_type_store = module_type_store
    allequal.stypy_function_name = 'allequal'
    allequal.stypy_param_names_list = ['a', 'b', 'fill_value']
    allequal.stypy_varargs_param_name = None
    allequal.stypy_kwargs_param_name = None
    allequal.stypy_call_defaults = defaults
    allequal.stypy_call_varargs = varargs
    allequal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'allequal', ['a', 'b', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'allequal', localization, ['a', 'b', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'allequal(...)' code ##################

    str_150828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7395, (-1)), 'str', '\n    Return True if all entries of a and b are equal, using\n    fill_value as a truth value where either or both are masked.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    fill_value : bool, optional\n        Whether masked values in a or b are considered equal (True) or not\n        (False).\n\n    Returns\n    -------\n    y : bool\n        Returns True if the two arrays are equal within the given\n        tolerance, False otherwise. If either array contains NaN,\n        then False is returned.\n\n    See Also\n    --------\n    all, any\n    numpy.ma.allclose\n\n    Examples\n    --------\n    >>> a = ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])\n    >>> a\n    masked_array(data = [10000000000.0 1e-07 --],\n          mask = [False False  True],\n          fill_value=1e+20)\n\n    >>> b = array([1e10, 1e-7, -42.0])\n    >>> b\n    array([  1.00000000e+10,   1.00000000e-07,  -4.20000000e+01])\n    >>> ma.allequal(a, b, fill_value=False)\n    False\n    >>> ma.allequal(a, b)\n    True\n\n    ')
    
    # Assigning a Call to a Name (line 7396):
    
    # Assigning a Call to a Name (line 7396):
    
    # Call to mask_or(...): (line 7396)
    # Processing the call arguments (line 7396)
    
    # Call to getmask(...): (line 7396)
    # Processing the call arguments (line 7396)
    # Getting the type of 'a' (line 7396)
    a_150831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7396, 24), 'a', False)
    # Processing the call keyword arguments (line 7396)
    kwargs_150832 = {}
    # Getting the type of 'getmask' (line 7396)
    getmask_150830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7396, 16), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7396)
    getmask_call_result_150833 = invoke(stypy.reporting.localization.Localization(__file__, 7396, 16), getmask_150830, *[a_150831], **kwargs_150832)
    
    
    # Call to getmask(...): (line 7396)
    # Processing the call arguments (line 7396)
    # Getting the type of 'b' (line 7396)
    b_150835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7396, 36), 'b', False)
    # Processing the call keyword arguments (line 7396)
    kwargs_150836 = {}
    # Getting the type of 'getmask' (line 7396)
    getmask_150834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7396, 28), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7396)
    getmask_call_result_150837 = invoke(stypy.reporting.localization.Localization(__file__, 7396, 28), getmask_150834, *[b_150835], **kwargs_150836)
    
    # Processing the call keyword arguments (line 7396)
    kwargs_150838 = {}
    # Getting the type of 'mask_or' (line 7396)
    mask_or_150829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7396, 8), 'mask_or', False)
    # Calling mask_or(args, kwargs) (line 7396)
    mask_or_call_result_150839 = invoke(stypy.reporting.localization.Localization(__file__, 7396, 8), mask_or_150829, *[getmask_call_result_150833, getmask_call_result_150837], **kwargs_150838)
    
    # Assigning a type to the variable 'm' (line 7396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7396, 4), 'm', mask_or_call_result_150839)
    
    
    # Getting the type of 'm' (line 7397)
    m_150840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7397, 7), 'm')
    # Getting the type of 'nomask' (line 7397)
    nomask_150841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7397, 12), 'nomask')
    # Applying the binary operator 'is' (line 7397)
    result_is__150842 = python_operator(stypy.reporting.localization.Localization(__file__, 7397, 7), 'is', m_150840, nomask_150841)
    
    # Testing the type of an if condition (line 7397)
    if_condition_150843 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7397, 4), result_is__150842)
    # Assigning a type to the variable 'if_condition_150843' (line 7397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7397, 4), 'if_condition_150843', if_condition_150843)
    # SSA begins for if statement (line 7397)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 7398):
    
    # Assigning a Call to a Name (line 7398):
    
    # Call to getdata(...): (line 7398)
    # Processing the call arguments (line 7398)
    # Getting the type of 'a' (line 7398)
    a_150845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7398, 20), 'a', False)
    # Processing the call keyword arguments (line 7398)
    kwargs_150846 = {}
    # Getting the type of 'getdata' (line 7398)
    getdata_150844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7398, 12), 'getdata', False)
    # Calling getdata(args, kwargs) (line 7398)
    getdata_call_result_150847 = invoke(stypy.reporting.localization.Localization(__file__, 7398, 12), getdata_150844, *[a_150845], **kwargs_150846)
    
    # Assigning a type to the variable 'x' (line 7398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7398, 8), 'x', getdata_call_result_150847)
    
    # Assigning a Call to a Name (line 7399):
    
    # Assigning a Call to a Name (line 7399):
    
    # Call to getdata(...): (line 7399)
    # Processing the call arguments (line 7399)
    # Getting the type of 'b' (line 7399)
    b_150849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7399, 20), 'b', False)
    # Processing the call keyword arguments (line 7399)
    kwargs_150850 = {}
    # Getting the type of 'getdata' (line 7399)
    getdata_150848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7399, 12), 'getdata', False)
    # Calling getdata(args, kwargs) (line 7399)
    getdata_call_result_150851 = invoke(stypy.reporting.localization.Localization(__file__, 7399, 12), getdata_150848, *[b_150849], **kwargs_150850)
    
    # Assigning a type to the variable 'y' (line 7399)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7399, 8), 'y', getdata_call_result_150851)
    
    # Assigning a Call to a Name (line 7400):
    
    # Assigning a Call to a Name (line 7400):
    
    # Call to equal(...): (line 7400)
    # Processing the call arguments (line 7400)
    # Getting the type of 'x' (line 7400)
    x_150854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7400, 24), 'x', False)
    # Getting the type of 'y' (line 7400)
    y_150855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7400, 27), 'y', False)
    # Processing the call keyword arguments (line 7400)
    kwargs_150856 = {}
    # Getting the type of 'umath' (line 7400)
    umath_150852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7400, 12), 'umath', False)
    # Obtaining the member 'equal' of a type (line 7400)
    equal_150853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7400, 12), umath_150852, 'equal')
    # Calling equal(args, kwargs) (line 7400)
    equal_call_result_150857 = invoke(stypy.reporting.localization.Localization(__file__, 7400, 12), equal_150853, *[x_150854, y_150855], **kwargs_150856)
    
    # Assigning a type to the variable 'd' (line 7400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7400, 8), 'd', equal_call_result_150857)
    
    # Call to all(...): (line 7401)
    # Processing the call keyword arguments (line 7401)
    kwargs_150860 = {}
    # Getting the type of 'd' (line 7401)
    d_150858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7401, 15), 'd', False)
    # Obtaining the member 'all' of a type (line 7401)
    all_150859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7401, 15), d_150858, 'all')
    # Calling all(args, kwargs) (line 7401)
    all_call_result_150861 = invoke(stypy.reporting.localization.Localization(__file__, 7401, 15), all_150859, *[], **kwargs_150860)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7401, 8), 'stypy_return_type', all_call_result_150861)
    # SSA branch for the else part of an if statement (line 7397)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'fill_value' (line 7402)
    fill_value_150862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7402, 9), 'fill_value')
    # Testing the type of an if condition (line 7402)
    if_condition_150863 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7402, 9), fill_value_150862)
    # Assigning a type to the variable 'if_condition_150863' (line 7402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7402, 9), 'if_condition_150863', if_condition_150863)
    # SSA begins for if statement (line 7402)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 7403):
    
    # Assigning a Call to a Name (line 7403):
    
    # Call to getdata(...): (line 7403)
    # Processing the call arguments (line 7403)
    # Getting the type of 'a' (line 7403)
    a_150865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7403, 20), 'a', False)
    # Processing the call keyword arguments (line 7403)
    kwargs_150866 = {}
    # Getting the type of 'getdata' (line 7403)
    getdata_150864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7403, 12), 'getdata', False)
    # Calling getdata(args, kwargs) (line 7403)
    getdata_call_result_150867 = invoke(stypy.reporting.localization.Localization(__file__, 7403, 12), getdata_150864, *[a_150865], **kwargs_150866)
    
    # Assigning a type to the variable 'x' (line 7403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7403, 8), 'x', getdata_call_result_150867)
    
    # Assigning a Call to a Name (line 7404):
    
    # Assigning a Call to a Name (line 7404):
    
    # Call to getdata(...): (line 7404)
    # Processing the call arguments (line 7404)
    # Getting the type of 'b' (line 7404)
    b_150869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7404, 20), 'b', False)
    # Processing the call keyword arguments (line 7404)
    kwargs_150870 = {}
    # Getting the type of 'getdata' (line 7404)
    getdata_150868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7404, 12), 'getdata', False)
    # Calling getdata(args, kwargs) (line 7404)
    getdata_call_result_150871 = invoke(stypy.reporting.localization.Localization(__file__, 7404, 12), getdata_150868, *[b_150869], **kwargs_150870)
    
    # Assigning a type to the variable 'y' (line 7404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7404, 8), 'y', getdata_call_result_150871)
    
    # Assigning a Call to a Name (line 7405):
    
    # Assigning a Call to a Name (line 7405):
    
    # Call to equal(...): (line 7405)
    # Processing the call arguments (line 7405)
    # Getting the type of 'x' (line 7405)
    x_150874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7405, 24), 'x', False)
    # Getting the type of 'y' (line 7405)
    y_150875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7405, 27), 'y', False)
    # Processing the call keyword arguments (line 7405)
    kwargs_150876 = {}
    # Getting the type of 'umath' (line 7405)
    umath_150872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7405, 12), 'umath', False)
    # Obtaining the member 'equal' of a type (line 7405)
    equal_150873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7405, 12), umath_150872, 'equal')
    # Calling equal(args, kwargs) (line 7405)
    equal_call_result_150877 = invoke(stypy.reporting.localization.Localization(__file__, 7405, 12), equal_150873, *[x_150874, y_150875], **kwargs_150876)
    
    # Assigning a type to the variable 'd' (line 7405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7405, 8), 'd', equal_call_result_150877)
    
    # Assigning a Call to a Name (line 7406):
    
    # Assigning a Call to a Name (line 7406):
    
    # Call to array(...): (line 7406)
    # Processing the call arguments (line 7406)
    # Getting the type of 'd' (line 7406)
    d_150879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7406, 19), 'd', False)
    # Processing the call keyword arguments (line 7406)
    # Getting the type of 'm' (line 7406)
    m_150880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7406, 27), 'm', False)
    keyword_150881 = m_150880
    # Getting the type of 'False' (line 7406)
    False_150882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7406, 35), 'False', False)
    keyword_150883 = False_150882
    kwargs_150884 = {'copy': keyword_150883, 'mask': keyword_150881}
    # Getting the type of 'array' (line 7406)
    array_150878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7406, 13), 'array', False)
    # Calling array(args, kwargs) (line 7406)
    array_call_result_150885 = invoke(stypy.reporting.localization.Localization(__file__, 7406, 13), array_150878, *[d_150879], **kwargs_150884)
    
    # Assigning a type to the variable 'dm' (line 7406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7406, 8), 'dm', array_call_result_150885)
    
    # Call to all(...): (line 7407)
    # Processing the call arguments (line 7407)
    # Getting the type of 'None' (line 7407)
    None_150892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7407, 35), 'None', False)
    # Processing the call keyword arguments (line 7407)
    kwargs_150893 = {}
    
    # Call to filled(...): (line 7407)
    # Processing the call arguments (line 7407)
    # Getting the type of 'True' (line 7407)
    True_150888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7407, 25), 'True', False)
    # Processing the call keyword arguments (line 7407)
    kwargs_150889 = {}
    # Getting the type of 'dm' (line 7407)
    dm_150886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7407, 15), 'dm', False)
    # Obtaining the member 'filled' of a type (line 7407)
    filled_150887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7407, 15), dm_150886, 'filled')
    # Calling filled(args, kwargs) (line 7407)
    filled_call_result_150890 = invoke(stypy.reporting.localization.Localization(__file__, 7407, 15), filled_150887, *[True_150888], **kwargs_150889)
    
    # Obtaining the member 'all' of a type (line 7407)
    all_150891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7407, 15), filled_call_result_150890, 'all')
    # Calling all(args, kwargs) (line 7407)
    all_call_result_150894 = invoke(stypy.reporting.localization.Localization(__file__, 7407, 15), all_150891, *[None_150892], **kwargs_150893)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7407, 8), 'stypy_return_type', all_call_result_150894)
    # SSA branch for the else part of an if statement (line 7402)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'False' (line 7409)
    False_150895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7409, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 7409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7409, 8), 'stypy_return_type', False_150895)
    # SSA join for if statement (line 7402)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 7397)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'allequal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'allequal' in the type store
    # Getting the type of 'stypy_return_type' (line 7354)
    stypy_return_type_150896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7354, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_150896)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'allequal'
    return stypy_return_type_150896

# Assigning a type to the variable 'allequal' (line 7354)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7354, 0), 'allequal', allequal)

@norecursion
def allclose(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 7412)
    True_150897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7412, 32), 'True')
    float_150898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7412, 43), 'float')
    float_150899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7412, 54), 'float')
    defaults = [True_150897, float_150898, float_150899]
    # Create a new context for function 'allclose'
    module_type_store = module_type_store.open_function_context('allclose', 7412, 0, False)
    
    # Passed parameters checking function
    allclose.stypy_localization = localization
    allclose.stypy_type_of_self = None
    allclose.stypy_type_store = module_type_store
    allclose.stypy_function_name = 'allclose'
    allclose.stypy_param_names_list = ['a', 'b', 'masked_equal', 'rtol', 'atol']
    allclose.stypy_varargs_param_name = None
    allclose.stypy_kwargs_param_name = None
    allclose.stypy_call_defaults = defaults
    allclose.stypy_call_varargs = varargs
    allclose.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'allclose', ['a', 'b', 'masked_equal', 'rtol', 'atol'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'allclose', localization, ['a', 'b', 'masked_equal', 'rtol', 'atol'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'allclose(...)' code ##################

    str_150900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7483, (-1)), 'str', '\n    Returns True if two arrays are element-wise equal within a tolerance.\n\n    This function is equivalent to `allclose` except that masked values\n    are treated as equal (default) or unequal, depending on the `masked_equal`\n    argument.\n\n    Parameters\n    ----------\n    a, b : array_like\n        Input arrays to compare.\n    masked_equal : bool, optional\n        Whether masked values in `a` and `b` are considered equal (True) or not\n        (False). They are considered equal by default.\n    rtol : float, optional\n        Relative tolerance. The relative difference is equal to ``rtol * b``.\n        Default is 1e-5.\n    atol : float, optional\n        Absolute tolerance. The absolute difference is equal to `atol`.\n        Default is 1e-8.\n\n    Returns\n    -------\n    y : bool\n        Returns True if the two arrays are equal within the given\n        tolerance, False otherwise. If either array contains NaN, then\n        False is returned.\n\n    See Also\n    --------\n    all, any\n    numpy.allclose : the non-masked `allclose`.\n\n    Notes\n    -----\n    If the following equation is element-wise True, then `allclose` returns\n    True::\n\n      absolute(`a` - `b`) <= (`atol` + `rtol` * absolute(`b`))\n\n    Return True if all elements of `a` and `b` are equal subject to\n    given tolerances.\n\n    Examples\n    --------\n    >>> a = ma.array([1e10, 1e-7, 42.0], mask=[0, 0, 1])\n    >>> a\n    masked_array(data = [10000000000.0 1e-07 --],\n                 mask = [False False  True],\n           fill_value = 1e+20)\n    >>> b = ma.array([1e10, 1e-8, -42.0], mask=[0, 0, 1])\n    >>> ma.allclose(a, b)\n    False\n\n    >>> a = ma.array([1e10, 1e-8, 42.0], mask=[0, 0, 1])\n    >>> b = ma.array([1.00001e10, 1e-9, -42.0], mask=[0, 0, 1])\n    >>> ma.allclose(a, b)\n    True\n    >>> ma.allclose(a, b, masked_equal=False)\n    False\n\n    Masked values are not compared directly.\n\n    >>> a = ma.array([1e10, 1e-8, 42.0], mask=[0, 0, 1])\n    >>> b = ma.array([1.00001e10, 1e-9, 42.0], mask=[0, 0, 1])\n    >>> ma.allclose(a, b)\n    True\n    >>> ma.allclose(a, b, masked_equal=False)\n    False\n\n    ')
    
    # Assigning a Call to a Name (line 7484):
    
    # Assigning a Call to a Name (line 7484):
    
    # Call to masked_array(...): (line 7484)
    # Processing the call arguments (line 7484)
    # Getting the type of 'a' (line 7484)
    a_150902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7484, 21), 'a', False)
    # Processing the call keyword arguments (line 7484)
    # Getting the type of 'False' (line 7484)
    False_150903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7484, 29), 'False', False)
    keyword_150904 = False_150903
    kwargs_150905 = {'copy': keyword_150904}
    # Getting the type of 'masked_array' (line 7484)
    masked_array_150901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7484, 8), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7484)
    masked_array_call_result_150906 = invoke(stypy.reporting.localization.Localization(__file__, 7484, 8), masked_array_150901, *[a_150902], **kwargs_150905)
    
    # Assigning a type to the variable 'x' (line 7484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7484, 4), 'x', masked_array_call_result_150906)
    
    # Assigning a Call to a Name (line 7485):
    
    # Assigning a Call to a Name (line 7485):
    
    # Call to masked_array(...): (line 7485)
    # Processing the call arguments (line 7485)
    # Getting the type of 'b' (line 7485)
    b_150908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7485, 21), 'b', False)
    # Processing the call keyword arguments (line 7485)
    # Getting the type of 'False' (line 7485)
    False_150909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7485, 29), 'False', False)
    keyword_150910 = False_150909
    kwargs_150911 = {'copy': keyword_150910}
    # Getting the type of 'masked_array' (line 7485)
    masked_array_150907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7485, 8), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7485)
    masked_array_call_result_150912 = invoke(stypy.reporting.localization.Localization(__file__, 7485, 8), masked_array_150907, *[b_150908], **kwargs_150911)
    
    # Assigning a type to the variable 'y' (line 7485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7485, 4), 'y', masked_array_call_result_150912)
    
    # Assigning a Call to a Name (line 7489):
    
    # Assigning a Call to a Name (line 7489):
    
    # Call to result_type(...): (line 7489)
    # Processing the call arguments (line 7489)
    # Getting the type of 'y' (line 7489)
    y_150915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7489, 27), 'y', False)
    float_150916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7489, 30), 'float')
    # Processing the call keyword arguments (line 7489)
    kwargs_150917 = {}
    # Getting the type of 'np' (line 7489)
    np_150913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7489, 12), 'np', False)
    # Obtaining the member 'result_type' of a type (line 7489)
    result_type_150914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7489, 12), np_150913, 'result_type')
    # Calling result_type(args, kwargs) (line 7489)
    result_type_call_result_150918 = invoke(stypy.reporting.localization.Localization(__file__, 7489, 12), result_type_150914, *[y_150915, float_150916], **kwargs_150917)
    
    # Assigning a type to the variable 'dtype' (line 7489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7489, 4), 'dtype', result_type_call_result_150918)
    
    
    # Getting the type of 'y' (line 7490)
    y_150919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7490, 7), 'y')
    # Obtaining the member 'dtype' of a type (line 7490)
    dtype_150920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7490, 7), y_150919, 'dtype')
    # Getting the type of 'dtype' (line 7490)
    dtype_150921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7490, 18), 'dtype')
    # Applying the binary operator '!=' (line 7490)
    result_ne_150922 = python_operator(stypy.reporting.localization.Localization(__file__, 7490, 7), '!=', dtype_150920, dtype_150921)
    
    # Testing the type of an if condition (line 7490)
    if_condition_150923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7490, 4), result_ne_150922)
    # Assigning a type to the variable 'if_condition_150923' (line 7490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7490, 4), 'if_condition_150923', if_condition_150923)
    # SSA begins for if statement (line 7490)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 7491):
    
    # Assigning a Call to a Name (line 7491):
    
    # Call to masked_array(...): (line 7491)
    # Processing the call arguments (line 7491)
    # Getting the type of 'y' (line 7491)
    y_150925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7491, 25), 'y', False)
    # Processing the call keyword arguments (line 7491)
    # Getting the type of 'dtype' (line 7491)
    dtype_150926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7491, 34), 'dtype', False)
    keyword_150927 = dtype_150926
    # Getting the type of 'False' (line 7491)
    False_150928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7491, 46), 'False', False)
    keyword_150929 = False_150928
    kwargs_150930 = {'dtype': keyword_150927, 'copy': keyword_150929}
    # Getting the type of 'masked_array' (line 7491)
    masked_array_150924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7491, 12), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7491)
    masked_array_call_result_150931 = invoke(stypy.reporting.localization.Localization(__file__, 7491, 12), masked_array_150924, *[y_150925], **kwargs_150930)
    
    # Assigning a type to the variable 'y' (line 7491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7491, 8), 'y', masked_array_call_result_150931)
    # SSA join for if statement (line 7490)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 7493):
    
    # Assigning a Call to a Name (line 7493):
    
    # Call to mask_or(...): (line 7493)
    # Processing the call arguments (line 7493)
    
    # Call to getmask(...): (line 7493)
    # Processing the call arguments (line 7493)
    # Getting the type of 'x' (line 7493)
    x_150934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7493, 24), 'x', False)
    # Processing the call keyword arguments (line 7493)
    kwargs_150935 = {}
    # Getting the type of 'getmask' (line 7493)
    getmask_150933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7493, 16), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7493)
    getmask_call_result_150936 = invoke(stypy.reporting.localization.Localization(__file__, 7493, 16), getmask_150933, *[x_150934], **kwargs_150935)
    
    
    # Call to getmask(...): (line 7493)
    # Processing the call arguments (line 7493)
    # Getting the type of 'y' (line 7493)
    y_150938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7493, 36), 'y', False)
    # Processing the call keyword arguments (line 7493)
    kwargs_150939 = {}
    # Getting the type of 'getmask' (line 7493)
    getmask_150937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7493, 28), 'getmask', False)
    # Calling getmask(args, kwargs) (line 7493)
    getmask_call_result_150940 = invoke(stypy.reporting.localization.Localization(__file__, 7493, 28), getmask_150937, *[y_150938], **kwargs_150939)
    
    # Processing the call keyword arguments (line 7493)
    kwargs_150941 = {}
    # Getting the type of 'mask_or' (line 7493)
    mask_or_150932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7493, 8), 'mask_or', False)
    # Calling mask_or(args, kwargs) (line 7493)
    mask_or_call_result_150942 = invoke(stypy.reporting.localization.Localization(__file__, 7493, 8), mask_or_150932, *[getmask_call_result_150936, getmask_call_result_150940], **kwargs_150941)
    
    # Assigning a type to the variable 'm' (line 7493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7493, 4), 'm', mask_or_call_result_150942)
    
    # Assigning a Call to a Name (line 7494):
    
    # Assigning a Call to a Name (line 7494):
    
    # Call to filled(...): (line 7494)
    # Processing the call arguments (line 7494)
    # Getting the type of 'False' (line 7494)
    False_150956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7494, 64), 'False', False)
    # Processing the call keyword arguments (line 7494)
    kwargs_150957 = {}
    
    # Call to isinf(...): (line 7494)
    # Processing the call arguments (line 7494)
    
    # Call to masked_array(...): (line 7494)
    # Processing the call arguments (line 7494)
    # Getting the type of 'x' (line 7494)
    x_150946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7494, 33), 'x', False)
    # Processing the call keyword arguments (line 7494)
    # Getting the type of 'False' (line 7494)
    False_150947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7494, 41), 'False', False)
    keyword_150948 = False_150947
    # Getting the type of 'm' (line 7494)
    m_150949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7494, 53), 'm', False)
    keyword_150950 = m_150949
    kwargs_150951 = {'copy': keyword_150948, 'mask': keyword_150950}
    # Getting the type of 'masked_array' (line 7494)
    masked_array_150945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7494, 20), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7494)
    masked_array_call_result_150952 = invoke(stypy.reporting.localization.Localization(__file__, 7494, 20), masked_array_150945, *[x_150946], **kwargs_150951)
    
    # Processing the call keyword arguments (line 7494)
    kwargs_150953 = {}
    # Getting the type of 'np' (line 7494)
    np_150943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7494, 11), 'np', False)
    # Obtaining the member 'isinf' of a type (line 7494)
    isinf_150944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7494, 11), np_150943, 'isinf')
    # Calling isinf(args, kwargs) (line 7494)
    isinf_call_result_150954 = invoke(stypy.reporting.localization.Localization(__file__, 7494, 11), isinf_150944, *[masked_array_call_result_150952], **kwargs_150953)
    
    # Obtaining the member 'filled' of a type (line 7494)
    filled_150955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7494, 11), isinf_call_result_150954, 'filled')
    # Calling filled(args, kwargs) (line 7494)
    filled_call_result_150958 = invoke(stypy.reporting.localization.Localization(__file__, 7494, 11), filled_150955, *[False_150956], **kwargs_150957)
    
    # Assigning a type to the variable 'xinf' (line 7494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7494, 4), 'xinf', filled_call_result_150958)
    
    
    
    # Call to all(...): (line 7496)
    # Processing the call arguments (line 7496)
    
    # Getting the type of 'xinf' (line 7496)
    xinf_150961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7496, 18), 'xinf', False)
    
    # Call to filled(...): (line 7496)
    # Processing the call arguments (line 7496)
    
    # Call to isinf(...): (line 7496)
    # Processing the call arguments (line 7496)
    # Getting the type of 'y' (line 7496)
    y_150965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7496, 42), 'y', False)
    # Processing the call keyword arguments (line 7496)
    kwargs_150966 = {}
    # Getting the type of 'np' (line 7496)
    np_150963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7496, 33), 'np', False)
    # Obtaining the member 'isinf' of a type (line 7496)
    isinf_150964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7496, 33), np_150963, 'isinf')
    # Calling isinf(args, kwargs) (line 7496)
    isinf_call_result_150967 = invoke(stypy.reporting.localization.Localization(__file__, 7496, 33), isinf_150964, *[y_150965], **kwargs_150966)
    
    # Getting the type of 'False' (line 7496)
    False_150968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7496, 46), 'False', False)
    # Processing the call keyword arguments (line 7496)
    kwargs_150969 = {}
    # Getting the type of 'filled' (line 7496)
    filled_150962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7496, 26), 'filled', False)
    # Calling filled(args, kwargs) (line 7496)
    filled_call_result_150970 = invoke(stypy.reporting.localization.Localization(__file__, 7496, 26), filled_150962, *[isinf_call_result_150967, False_150968], **kwargs_150969)
    
    # Applying the binary operator '==' (line 7496)
    result_eq_150971 = python_operator(stypy.reporting.localization.Localization(__file__, 7496, 18), '==', xinf_150961, filled_call_result_150970)
    
    # Processing the call keyword arguments (line 7496)
    kwargs_150972 = {}
    # Getting the type of 'np' (line 7496)
    np_150959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7496, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 7496)
    all_150960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7496, 11), np_150959, 'all')
    # Calling all(args, kwargs) (line 7496)
    all_call_result_150973 = invoke(stypy.reporting.localization.Localization(__file__, 7496, 11), all_150960, *[result_eq_150971], **kwargs_150972)
    
    # Applying the 'not' unary operator (line 7496)
    result_not__150974 = python_operator(stypy.reporting.localization.Localization(__file__, 7496, 7), 'not', all_call_result_150973)
    
    # Testing the type of an if condition (line 7496)
    if_condition_150975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7496, 4), result_not__150974)
    # Assigning a type to the variable 'if_condition_150975' (line 7496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7496, 4), 'if_condition_150975', if_condition_150975)
    # SSA begins for if statement (line 7496)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 7497)
    False_150976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7497, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 7497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7497, 8), 'stypy_return_type', False_150976)
    # SSA join for if statement (line 7496)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to any(...): (line 7499)
    # Processing the call arguments (line 7499)
    # Getting the type of 'xinf' (line 7499)
    xinf_150979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7499, 18), 'xinf', False)
    # Processing the call keyword arguments (line 7499)
    kwargs_150980 = {}
    # Getting the type of 'np' (line 7499)
    np_150977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7499, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 7499)
    any_150978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7499, 11), np_150977, 'any')
    # Calling any(args, kwargs) (line 7499)
    any_call_result_150981 = invoke(stypy.reporting.localization.Localization(__file__, 7499, 11), any_150978, *[xinf_150979], **kwargs_150980)
    
    # Applying the 'not' unary operator (line 7499)
    result_not__150982 = python_operator(stypy.reporting.localization.Localization(__file__, 7499, 7), 'not', any_call_result_150981)
    
    # Testing the type of an if condition (line 7499)
    if_condition_150983 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7499, 4), result_not__150982)
    # Assigning a type to the variable 'if_condition_150983' (line 7499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7499, 4), 'if_condition_150983', if_condition_150983)
    # SSA begins for if statement (line 7499)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 7500):
    
    # Assigning a Call to a Name (line 7500):
    
    # Call to filled(...): (line 7500)
    # Processing the call arguments (line 7500)
    
    # Call to less_equal(...): (line 7500)
    # Processing the call arguments (line 7500)
    
    # Call to absolute(...): (line 7500)
    # Processing the call arguments (line 7500)
    # Getting the type of 'x' (line 7500)
    x_150989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7500, 51), 'x', False)
    # Getting the type of 'y' (line 7500)
    y_150990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7500, 55), 'y', False)
    # Applying the binary operator '-' (line 7500)
    result_sub_150991 = python_operator(stypy.reporting.localization.Localization(__file__, 7500, 51), '-', x_150989, y_150990)
    
    # Processing the call keyword arguments (line 7500)
    kwargs_150992 = {}
    # Getting the type of 'umath' (line 7500)
    umath_150987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7500, 36), 'umath', False)
    # Obtaining the member 'absolute' of a type (line 7500)
    absolute_150988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7500, 36), umath_150987, 'absolute')
    # Calling absolute(args, kwargs) (line 7500)
    absolute_call_result_150993 = invoke(stypy.reporting.localization.Localization(__file__, 7500, 36), absolute_150988, *[result_sub_150991], **kwargs_150992)
    
    # Getting the type of 'atol' (line 7501)
    atol_150994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7501, 36), 'atol', False)
    # Getting the type of 'rtol' (line 7501)
    rtol_150995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7501, 43), 'rtol', False)
    
    # Call to absolute(...): (line 7501)
    # Processing the call arguments (line 7501)
    # Getting the type of 'y' (line 7501)
    y_150998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7501, 65), 'y', False)
    # Processing the call keyword arguments (line 7501)
    kwargs_150999 = {}
    # Getting the type of 'umath' (line 7501)
    umath_150996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7501, 50), 'umath', False)
    # Obtaining the member 'absolute' of a type (line 7501)
    absolute_150997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7501, 50), umath_150996, 'absolute')
    # Calling absolute(args, kwargs) (line 7501)
    absolute_call_result_151000 = invoke(stypy.reporting.localization.Localization(__file__, 7501, 50), absolute_150997, *[y_150998], **kwargs_150999)
    
    # Applying the binary operator '*' (line 7501)
    result_mul_151001 = python_operator(stypy.reporting.localization.Localization(__file__, 7501, 43), '*', rtol_150995, absolute_call_result_151000)
    
    # Applying the binary operator '+' (line 7501)
    result_add_151002 = python_operator(stypy.reporting.localization.Localization(__file__, 7501, 36), '+', atol_150994, result_mul_151001)
    
    # Processing the call keyword arguments (line 7500)
    kwargs_151003 = {}
    # Getting the type of 'umath' (line 7500)
    umath_150985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7500, 19), 'umath', False)
    # Obtaining the member 'less_equal' of a type (line 7500)
    less_equal_150986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7500, 19), umath_150985, 'less_equal')
    # Calling less_equal(args, kwargs) (line 7500)
    less_equal_call_result_151004 = invoke(stypy.reporting.localization.Localization(__file__, 7500, 19), less_equal_150986, *[absolute_call_result_150993, result_add_151002], **kwargs_151003)
    
    # Getting the type of 'masked_equal' (line 7502)
    masked_equal_151005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7502, 19), 'masked_equal', False)
    # Processing the call keyword arguments (line 7500)
    kwargs_151006 = {}
    # Getting the type of 'filled' (line 7500)
    filled_150984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7500, 12), 'filled', False)
    # Calling filled(args, kwargs) (line 7500)
    filled_call_result_151007 = invoke(stypy.reporting.localization.Localization(__file__, 7500, 12), filled_150984, *[less_equal_call_result_151004, masked_equal_151005], **kwargs_151006)
    
    # Assigning a type to the variable 'd' (line 7500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7500, 8), 'd', filled_call_result_151007)
    
    # Call to all(...): (line 7503)
    # Processing the call arguments (line 7503)
    # Getting the type of 'd' (line 7503)
    d_151010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7503, 22), 'd', False)
    # Processing the call keyword arguments (line 7503)
    kwargs_151011 = {}
    # Getting the type of 'np' (line 7503)
    np_151008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7503, 15), 'np', False)
    # Obtaining the member 'all' of a type (line 7503)
    all_151009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7503, 15), np_151008, 'all')
    # Calling all(args, kwargs) (line 7503)
    all_call_result_151012 = invoke(stypy.reporting.localization.Localization(__file__, 7503, 15), all_151009, *[d_151010], **kwargs_151011)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7503, 8), 'stypy_return_type', all_call_result_151012)
    # SSA join for if statement (line 7499)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to all(...): (line 7505)
    # Processing the call arguments (line 7505)
    
    # Call to filled(...): (line 7505)
    # Processing the call arguments (line 7505)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'xinf' (line 7505)
    xinf_151016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7505, 27), 'xinf', False)
    # Getting the type of 'x' (line 7505)
    x_151017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7505, 25), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 7505)
    getitem___151018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7505, 25), x_151017, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 7505)
    subscript_call_result_151019 = invoke(stypy.reporting.localization.Localization(__file__, 7505, 25), getitem___151018, xinf_151016)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'xinf' (line 7505)
    xinf_151020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7505, 38), 'xinf', False)
    # Getting the type of 'y' (line 7505)
    y_151021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7505, 36), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 7505)
    getitem___151022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7505, 36), y_151021, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 7505)
    subscript_call_result_151023 = invoke(stypy.reporting.localization.Localization(__file__, 7505, 36), getitem___151022, xinf_151020)
    
    # Applying the binary operator '==' (line 7505)
    result_eq_151024 = python_operator(stypy.reporting.localization.Localization(__file__, 7505, 25), '==', subscript_call_result_151019, subscript_call_result_151023)
    
    # Getting the type of 'masked_equal' (line 7505)
    masked_equal_151025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7505, 45), 'masked_equal', False)
    # Processing the call keyword arguments (line 7505)
    kwargs_151026 = {}
    # Getting the type of 'filled' (line 7505)
    filled_151015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7505, 18), 'filled', False)
    # Calling filled(args, kwargs) (line 7505)
    filled_call_result_151027 = invoke(stypy.reporting.localization.Localization(__file__, 7505, 18), filled_151015, *[result_eq_151024, masked_equal_151025], **kwargs_151026)
    
    # Processing the call keyword arguments (line 7505)
    kwargs_151028 = {}
    # Getting the type of 'np' (line 7505)
    np_151013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7505, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 7505)
    all_151014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7505, 11), np_151013, 'all')
    # Calling all(args, kwargs) (line 7505)
    all_call_result_151029 = invoke(stypy.reporting.localization.Localization(__file__, 7505, 11), all_151014, *[filled_call_result_151027], **kwargs_151028)
    
    # Applying the 'not' unary operator (line 7505)
    result_not__151030 = python_operator(stypy.reporting.localization.Localization(__file__, 7505, 7), 'not', all_call_result_151029)
    
    # Testing the type of an if condition (line 7505)
    if_condition_151031 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7505, 4), result_not__151030)
    # Assigning a type to the variable 'if_condition_151031' (line 7505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7505, 4), 'if_condition_151031', if_condition_151031)
    # SSA begins for if statement (line 7505)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 7506)
    False_151032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7506, 15), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 7506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7506, 8), 'stypy_return_type', False_151032)
    # SSA join for if statement (line 7505)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 7507):
    
    # Assigning a Subscript to a Name (line 7507):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'xinf' (line 7507)
    xinf_151033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7507, 11), 'xinf')
    # Applying the '~' unary operator (line 7507)
    result_inv_151034 = python_operator(stypy.reporting.localization.Localization(__file__, 7507, 10), '~', xinf_151033)
    
    # Getting the type of 'x' (line 7507)
    x_151035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7507, 8), 'x')
    # Obtaining the member '__getitem__' of a type (line 7507)
    getitem___151036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7507, 8), x_151035, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 7507)
    subscript_call_result_151037 = invoke(stypy.reporting.localization.Localization(__file__, 7507, 8), getitem___151036, result_inv_151034)
    
    # Assigning a type to the variable 'x' (line 7507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7507, 4), 'x', subscript_call_result_151037)
    
    # Assigning a Subscript to a Name (line 7508):
    
    # Assigning a Subscript to a Name (line 7508):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'xinf' (line 7508)
    xinf_151038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7508, 11), 'xinf')
    # Applying the '~' unary operator (line 7508)
    result_inv_151039 = python_operator(stypy.reporting.localization.Localization(__file__, 7508, 10), '~', xinf_151038)
    
    # Getting the type of 'y' (line 7508)
    y_151040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7508, 8), 'y')
    # Obtaining the member '__getitem__' of a type (line 7508)
    getitem___151041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7508, 8), y_151040, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 7508)
    subscript_call_result_151042 = invoke(stypy.reporting.localization.Localization(__file__, 7508, 8), getitem___151041, result_inv_151039)
    
    # Assigning a type to the variable 'y' (line 7508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7508, 4), 'y', subscript_call_result_151042)
    
    # Assigning a Call to a Name (line 7510):
    
    # Assigning a Call to a Name (line 7510):
    
    # Call to filled(...): (line 7510)
    # Processing the call arguments (line 7510)
    
    # Call to less_equal(...): (line 7510)
    # Processing the call arguments (line 7510)
    
    # Call to absolute(...): (line 7510)
    # Processing the call arguments (line 7510)
    # Getting the type of 'x' (line 7510)
    x_151048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7510, 47), 'x', False)
    # Getting the type of 'y' (line 7510)
    y_151049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7510, 51), 'y', False)
    # Applying the binary operator '-' (line 7510)
    result_sub_151050 = python_operator(stypy.reporting.localization.Localization(__file__, 7510, 47), '-', x_151048, y_151049)
    
    # Processing the call keyword arguments (line 7510)
    kwargs_151051 = {}
    # Getting the type of 'umath' (line 7510)
    umath_151046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7510, 32), 'umath', False)
    # Obtaining the member 'absolute' of a type (line 7510)
    absolute_151047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7510, 32), umath_151046, 'absolute')
    # Calling absolute(args, kwargs) (line 7510)
    absolute_call_result_151052 = invoke(stypy.reporting.localization.Localization(__file__, 7510, 32), absolute_151047, *[result_sub_151050], **kwargs_151051)
    
    # Getting the type of 'atol' (line 7511)
    atol_151053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7511, 32), 'atol', False)
    # Getting the type of 'rtol' (line 7511)
    rtol_151054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7511, 39), 'rtol', False)
    
    # Call to absolute(...): (line 7511)
    # Processing the call arguments (line 7511)
    # Getting the type of 'y' (line 7511)
    y_151057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7511, 61), 'y', False)
    # Processing the call keyword arguments (line 7511)
    kwargs_151058 = {}
    # Getting the type of 'umath' (line 7511)
    umath_151055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7511, 46), 'umath', False)
    # Obtaining the member 'absolute' of a type (line 7511)
    absolute_151056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7511, 46), umath_151055, 'absolute')
    # Calling absolute(args, kwargs) (line 7511)
    absolute_call_result_151059 = invoke(stypy.reporting.localization.Localization(__file__, 7511, 46), absolute_151056, *[y_151057], **kwargs_151058)
    
    # Applying the binary operator '*' (line 7511)
    result_mul_151060 = python_operator(stypy.reporting.localization.Localization(__file__, 7511, 39), '*', rtol_151054, absolute_call_result_151059)
    
    # Applying the binary operator '+' (line 7511)
    result_add_151061 = python_operator(stypy.reporting.localization.Localization(__file__, 7511, 32), '+', atol_151053, result_mul_151060)
    
    # Processing the call keyword arguments (line 7510)
    kwargs_151062 = {}
    # Getting the type of 'umath' (line 7510)
    umath_151044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7510, 15), 'umath', False)
    # Obtaining the member 'less_equal' of a type (line 7510)
    less_equal_151045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7510, 15), umath_151044, 'less_equal')
    # Calling less_equal(args, kwargs) (line 7510)
    less_equal_call_result_151063 = invoke(stypy.reporting.localization.Localization(__file__, 7510, 15), less_equal_151045, *[absolute_call_result_151052, result_add_151061], **kwargs_151062)
    
    # Getting the type of 'masked_equal' (line 7512)
    masked_equal_151064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7512, 15), 'masked_equal', False)
    # Processing the call keyword arguments (line 7510)
    kwargs_151065 = {}
    # Getting the type of 'filled' (line 7510)
    filled_151043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7510, 8), 'filled', False)
    # Calling filled(args, kwargs) (line 7510)
    filled_call_result_151066 = invoke(stypy.reporting.localization.Localization(__file__, 7510, 8), filled_151043, *[less_equal_call_result_151063, masked_equal_151064], **kwargs_151065)
    
    # Assigning a type to the variable 'd' (line 7510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7510, 4), 'd', filled_call_result_151066)
    
    # Call to all(...): (line 7514)
    # Processing the call arguments (line 7514)
    # Getting the type of 'd' (line 7514)
    d_151069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7514, 18), 'd', False)
    # Processing the call keyword arguments (line 7514)
    kwargs_151070 = {}
    # Getting the type of 'np' (line 7514)
    np_151067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7514, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 7514)
    all_151068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7514, 11), np_151067, 'all')
    # Calling all(args, kwargs) (line 7514)
    all_call_result_151071 = invoke(stypy.reporting.localization.Localization(__file__, 7514, 11), all_151068, *[d_151069], **kwargs_151070)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7514, 4), 'stypy_return_type', all_call_result_151071)
    
    # ################# End of 'allclose(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'allclose' in the type store
    # Getting the type of 'stypy_return_type' (line 7412)
    stypy_return_type_151072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7412, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151072)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'allclose'
    return stypy_return_type_151072

# Assigning a type to the variable 'allclose' (line 7412)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7412, 0), 'allclose', allclose)

@norecursion
def asarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 7517)
    None_151073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7517, 21), 'None')
    # Getting the type of 'None' (line 7517)
    None_151074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7517, 33), 'None')
    defaults = [None_151073, None_151074]
    # Create a new context for function 'asarray'
    module_type_store = module_type_store.open_function_context('asarray', 7517, 0, False)
    
    # Passed parameters checking function
    asarray.stypy_localization = localization
    asarray.stypy_type_of_self = None
    asarray.stypy_type_store = module_type_store
    asarray.stypy_function_name = 'asarray'
    asarray.stypy_param_names_list = ['a', 'dtype', 'order']
    asarray.stypy_varargs_param_name = None
    asarray.stypy_kwargs_param_name = None
    asarray.stypy_call_defaults = defaults
    asarray.stypy_call_varargs = varargs
    asarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'asarray', ['a', 'dtype', 'order'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'asarray', localization, ['a', 'dtype', 'order'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'asarray(...)' code ##################

    str_151075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7561, (-1)), 'str', "\n    Convert the input to a masked array of the given data-type.\n\n    No copy is performed if the input is already an `ndarray`. If `a` is\n    a subclass of `MaskedArray`, a base class `MaskedArray` is returned.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to a masked array. This\n        includes lists, lists of tuples, tuples, tuples of tuples, tuples\n        of lists, ndarrays and masked arrays.\n    dtype : dtype, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('FORTRAN') memory\n        representation.  Default is 'C'.\n\n    Returns\n    -------\n    out : MaskedArray\n        Masked array interpretation of `a`.\n\n    See Also\n    --------\n    asanyarray : Similar to `asarray`, but conserves subclasses.\n\n    Examples\n    --------\n    >>> x = np.arange(10.).reshape(2, 5)\n    >>> x\n    array([[ 0.,  1.,  2.,  3.,  4.],\n           [ 5.,  6.,  7.,  8.,  9.]])\n    >>> np.ma.asarray(x)\n    masked_array(data =\n     [[ 0.  1.  2.  3.  4.]\n     [ 5.  6.  7.  8.  9.]],\n                 mask =\n     False,\n           fill_value = 1e+20)\n    >>> type(np.ma.asarray(x))\n    <class 'numpy.ma.core.MaskedArray'>\n\n    ")
    
    # Assigning a BoolOp to a Name (line 7562):
    
    # Assigning a BoolOp to a Name (line 7562):
    
    # Evaluating a boolean operation
    # Getting the type of 'order' (line 7562)
    order_151076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7562, 12), 'order')
    str_151077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7562, 21), 'str', 'C')
    # Applying the binary operator 'or' (line 7562)
    result_or_keyword_151078 = python_operator(stypy.reporting.localization.Localization(__file__, 7562, 12), 'or', order_151076, str_151077)
    
    # Assigning a type to the variable 'order' (line 7562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7562, 4), 'order', result_or_keyword_151078)
    
    # Call to masked_array(...): (line 7563)
    # Processing the call arguments (line 7563)
    # Getting the type of 'a' (line 7563)
    a_151080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7563, 24), 'a', False)
    # Processing the call keyword arguments (line 7563)
    # Getting the type of 'dtype' (line 7563)
    dtype_151081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7563, 33), 'dtype', False)
    keyword_151082 = dtype_151081
    # Getting the type of 'False' (line 7563)
    False_151083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7563, 45), 'False', False)
    keyword_151084 = False_151083
    # Getting the type of 'True' (line 7563)
    True_151085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7563, 62), 'True', False)
    keyword_151086 = True_151085
    # Getting the type of 'False' (line 7564)
    False_151087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7564, 30), 'False', False)
    keyword_151088 = False_151087
    # Getting the type of 'order' (line 7564)
    order_151089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7564, 43), 'order', False)
    keyword_151090 = order_151089
    kwargs_151091 = {'order': keyword_151090, 'dtype': keyword_151082, 'copy': keyword_151084, 'subok': keyword_151088, 'keep_mask': keyword_151086}
    # Getting the type of 'masked_array' (line 7563)
    masked_array_151079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7563, 11), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7563)
    masked_array_call_result_151092 = invoke(stypy.reporting.localization.Localization(__file__, 7563, 11), masked_array_151079, *[a_151080], **kwargs_151091)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7563, 4), 'stypy_return_type', masked_array_call_result_151092)
    
    # ################# End of 'asarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'asarray' in the type store
    # Getting the type of 'stypy_return_type' (line 7517)
    stypy_return_type_151093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7517, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151093)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'asarray'
    return stypy_return_type_151093

# Assigning a type to the variable 'asarray' (line 7517)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7517, 0), 'asarray', asarray)

@norecursion
def asanyarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 7567)
    None_151094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7567, 24), 'None')
    defaults = [None_151094]
    # Create a new context for function 'asanyarray'
    module_type_store = module_type_store.open_function_context('asanyarray', 7567, 0, False)
    
    # Passed parameters checking function
    asanyarray.stypy_localization = localization
    asanyarray.stypy_type_of_self = None
    asanyarray.stypy_type_store = module_type_store
    asanyarray.stypy_function_name = 'asanyarray'
    asanyarray.stypy_param_names_list = ['a', 'dtype']
    asanyarray.stypy_varargs_param_name = None
    asanyarray.stypy_kwargs_param_name = None
    asanyarray.stypy_call_defaults = defaults
    asanyarray.stypy_call_varargs = varargs
    asanyarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'asanyarray', ['a', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'asanyarray', localization, ['a', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'asanyarray(...)' code ##################

    str_151095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7609, (-1)), 'str', "\n    Convert the input to a masked array, conserving subclasses.\n\n    If `a` is a subclass of `MaskedArray`, its class is conserved.\n    No copy is performed if the input is already an `ndarray`.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.\n    dtype : dtype, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n        Whether to use row-major ('C') or column-major ('FORTRAN') memory\n        representation.  Default is 'C'.\n\n    Returns\n    -------\n    out : MaskedArray\n        MaskedArray interpretation of `a`.\n\n    See Also\n    --------\n    asarray : Similar to `asanyarray`, but does not conserve subclass.\n\n    Examples\n    --------\n    >>> x = np.arange(10.).reshape(2, 5)\n    >>> x\n    array([[ 0.,  1.,  2.,  3.,  4.],\n           [ 5.,  6.,  7.,  8.,  9.]])\n    >>> np.ma.asanyarray(x)\n    masked_array(data =\n     [[ 0.  1.  2.  3.  4.]\n     [ 5.  6.  7.  8.  9.]],\n                 mask =\n     False,\n           fill_value = 1e+20)\n    >>> type(np.ma.asanyarray(x))\n    <class 'numpy.ma.core.MaskedArray'>\n\n    ")
    
    # Call to masked_array(...): (line 7610)
    # Processing the call arguments (line 7610)
    # Getting the type of 'a' (line 7610)
    a_151097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7610, 24), 'a', False)
    # Processing the call keyword arguments (line 7610)
    # Getting the type of 'dtype' (line 7610)
    dtype_151098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7610, 33), 'dtype', False)
    keyword_151099 = dtype_151098
    # Getting the type of 'False' (line 7610)
    False_151100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7610, 45), 'False', False)
    keyword_151101 = False_151100
    # Getting the type of 'True' (line 7610)
    True_151102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7610, 62), 'True', False)
    keyword_151103 = True_151102
    # Getting the type of 'True' (line 7610)
    True_151104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7610, 74), 'True', False)
    keyword_151105 = True_151104
    kwargs_151106 = {'dtype': keyword_151099, 'copy': keyword_151101, 'subok': keyword_151105, 'keep_mask': keyword_151103}
    # Getting the type of 'masked_array' (line 7610)
    masked_array_151096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7610, 11), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7610)
    masked_array_call_result_151107 = invoke(stypy.reporting.localization.Localization(__file__, 7610, 11), masked_array_151096, *[a_151097], **kwargs_151106)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7610, 4), 'stypy_return_type', masked_array_call_result_151107)
    
    # ################# End of 'asanyarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'asanyarray' in the type store
    # Getting the type of 'stypy_return_type' (line 7567)
    stypy_return_type_151108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7567, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151108)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'asanyarray'
    return stypy_return_type_151108

# Assigning a type to the variable 'asanyarray' (line 7567)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7567, 0), 'asanyarray', asanyarray)

@norecursion
def dump(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dump'
    module_type_store = module_type_store.open_function_context('dump', 7616, 0, False)
    
    # Passed parameters checking function
    dump.stypy_localization = localization
    dump.stypy_type_of_self = None
    dump.stypy_type_store = module_type_store
    dump.stypy_function_name = 'dump'
    dump.stypy_param_names_list = ['a', 'F']
    dump.stypy_varargs_param_name = None
    dump.stypy_kwargs_param_name = None
    dump.stypy_call_defaults = defaults
    dump.stypy_call_varargs = varargs
    dump.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dump', ['a', 'F'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dump', localization, ['a', 'F'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dump(...)' code ##################

    str_151109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7629, (-1)), 'str', '\n    Pickle a masked array to a file.\n\n    This is a wrapper around ``cPickle.dump``.\n\n    Parameters\n    ----------\n    a : MaskedArray\n        The array to be pickled.\n    F : str or file-like object\n        The file to pickle `a` to. If a string, the full path to the file.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 7630)
    str_151110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7630, 22), 'str', 'readline')
    # Getting the type of 'F' (line 7630)
    F_151111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7630, 19), 'F')
    
    (may_be_151112, more_types_in_union_151113) = may_not_provide_member(str_151110, F_151111)

    if may_be_151112:

        if more_types_in_union_151113:
            # Runtime conditional SSA (line 7630)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'F' (line 7630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7630, 4), 'F', remove_member_provider_from_union(F_151111, 'readline'))
        
        # Assigning a Call to a Name (line 7631):
        
        # Assigning a Call to a Name (line 7631):
        
        # Call to open(...): (line 7631)
        # Processing the call arguments (line 7631)
        # Getting the type of 'F' (line 7631)
        F_151115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7631, 17), 'F', False)
        str_151116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7631, 20), 'str', 'w')
        # Processing the call keyword arguments (line 7631)
        kwargs_151117 = {}
        # Getting the type of 'open' (line 7631)
        open_151114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7631, 12), 'open', False)
        # Calling open(args, kwargs) (line 7631)
        open_call_result_151118 = invoke(stypy.reporting.localization.Localization(__file__, 7631, 12), open_151114, *[F_151115, str_151116], **kwargs_151117)
        
        # Assigning a type to the variable 'F' (line 7631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7631, 8), 'F', open_call_result_151118)

        if more_types_in_union_151113:
            # SSA join for if statement (line 7630)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to dump(...): (line 7632)
    # Processing the call arguments (line 7632)
    # Getting the type of 'a' (line 7632)
    a_151121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7632, 23), 'a', False)
    # Getting the type of 'F' (line 7632)
    F_151122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7632, 26), 'F', False)
    # Processing the call keyword arguments (line 7632)
    kwargs_151123 = {}
    # Getting the type of 'pickle' (line 7632)
    pickle_151119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7632, 11), 'pickle', False)
    # Obtaining the member 'dump' of a type (line 7632)
    dump_151120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7632, 11), pickle_151119, 'dump')
    # Calling dump(args, kwargs) (line 7632)
    dump_call_result_151124 = invoke(stypy.reporting.localization.Localization(__file__, 7632, 11), dump_151120, *[a_151121, F_151122], **kwargs_151123)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7632, 4), 'stypy_return_type', dump_call_result_151124)
    
    # ################# End of 'dump(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dump' in the type store
    # Getting the type of 'stypy_return_type' (line 7616)
    stypy_return_type_151125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7616, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151125)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dump'
    return stypy_return_type_151125

# Assigning a type to the variable 'dump' (line 7616)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7616, 0), 'dump', dump)

@norecursion
def dumps(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dumps'
    module_type_store = module_type_store.open_function_context('dumps', 7635, 0, False)
    
    # Passed parameters checking function
    dumps.stypy_localization = localization
    dumps.stypy_type_of_self = None
    dumps.stypy_type_store = module_type_store
    dumps.stypy_function_name = 'dumps'
    dumps.stypy_param_names_list = ['a']
    dumps.stypy_varargs_param_name = None
    dumps.stypy_kwargs_param_name = None
    dumps.stypy_call_defaults = defaults
    dumps.stypy_call_varargs = varargs
    dumps.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dumps', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dumps', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dumps(...)' code ##################

    str_151126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7647, (-1)), 'str', '\n    Return a string corresponding to the pickling of a masked array.\n\n    This is a wrapper around ``cPickle.dumps``.\n\n    Parameters\n    ----------\n    a : MaskedArray\n        The array for which the string representation of the pickle is\n        returned.\n\n    ')
    
    # Call to dumps(...): (line 7648)
    # Processing the call arguments (line 7648)
    # Getting the type of 'a' (line 7648)
    a_151129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7648, 24), 'a', False)
    # Processing the call keyword arguments (line 7648)
    kwargs_151130 = {}
    # Getting the type of 'pickle' (line 7648)
    pickle_151127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7648, 11), 'pickle', False)
    # Obtaining the member 'dumps' of a type (line 7648)
    dumps_151128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7648, 11), pickle_151127, 'dumps')
    # Calling dumps(args, kwargs) (line 7648)
    dumps_call_result_151131 = invoke(stypy.reporting.localization.Localization(__file__, 7648, 11), dumps_151128, *[a_151129], **kwargs_151130)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7648, 4), 'stypy_return_type', dumps_call_result_151131)
    
    # ################# End of 'dumps(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dumps' in the type store
    # Getting the type of 'stypy_return_type' (line 7635)
    stypy_return_type_151132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7635, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151132)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dumps'
    return stypy_return_type_151132

# Assigning a type to the variable 'dumps' (line 7635)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7635, 0), 'dumps', dumps)

@norecursion
def load(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'load'
    module_type_store = module_type_store.open_function_context('load', 7651, 0, False)
    
    # Passed parameters checking function
    load.stypy_localization = localization
    load.stypy_type_of_self = None
    load.stypy_type_store = module_type_store
    load.stypy_function_name = 'load'
    load.stypy_param_names_list = ['F']
    load.stypy_varargs_param_name = None
    load.stypy_kwargs_param_name = None
    load.stypy_call_defaults = defaults
    load.stypy_call_varargs = varargs
    load.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'load', ['F'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'load', localization, ['F'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'load(...)' code ##################

    str_151133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7670, (-1)), 'str', '\n    Wrapper around ``cPickle.load`` which accepts either a file-like object\n    or a filename.\n\n    Parameters\n    ----------\n    F : str or file\n        The file or file name to load.\n\n    See Also\n    --------\n    dump : Pickle an array\n\n    Notes\n    -----\n    This is different from `numpy.load`, which does not use cPickle but loads\n    the NumPy binary .npy format.\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 7671)
    str_151134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7671, 22), 'str', 'readline')
    # Getting the type of 'F' (line 7671)
    F_151135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7671, 19), 'F')
    
    (may_be_151136, more_types_in_union_151137) = may_not_provide_member(str_151134, F_151135)

    if may_be_151136:

        if more_types_in_union_151137:
            # Runtime conditional SSA (line 7671)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'F' (line 7671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7671, 4), 'F', remove_member_provider_from_union(F_151135, 'readline'))
        
        # Assigning a Call to a Name (line 7672):
        
        # Assigning a Call to a Name (line 7672):
        
        # Call to open(...): (line 7672)
        # Processing the call arguments (line 7672)
        # Getting the type of 'F' (line 7672)
        F_151139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7672, 17), 'F', False)
        str_151140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7672, 20), 'str', 'r')
        # Processing the call keyword arguments (line 7672)
        kwargs_151141 = {}
        # Getting the type of 'open' (line 7672)
        open_151138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7672, 12), 'open', False)
        # Calling open(args, kwargs) (line 7672)
        open_call_result_151142 = invoke(stypy.reporting.localization.Localization(__file__, 7672, 12), open_151138, *[F_151139, str_151140], **kwargs_151141)
        
        # Assigning a type to the variable 'F' (line 7672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7672, 8), 'F', open_call_result_151142)

        if more_types_in_union_151137:
            # SSA join for if statement (line 7671)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to load(...): (line 7673)
    # Processing the call arguments (line 7673)
    # Getting the type of 'F' (line 7673)
    F_151145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7673, 23), 'F', False)
    # Processing the call keyword arguments (line 7673)
    kwargs_151146 = {}
    # Getting the type of 'pickle' (line 7673)
    pickle_151143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7673, 11), 'pickle', False)
    # Obtaining the member 'load' of a type (line 7673)
    load_151144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7673, 11), pickle_151143, 'load')
    # Calling load(args, kwargs) (line 7673)
    load_call_result_151147 = invoke(stypy.reporting.localization.Localization(__file__, 7673, 11), load_151144, *[F_151145], **kwargs_151146)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7673, 4), 'stypy_return_type', load_call_result_151147)
    
    # ################# End of 'load(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'load' in the type store
    # Getting the type of 'stypy_return_type' (line 7651)
    stypy_return_type_151148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7651, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151148)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'load'
    return stypy_return_type_151148

# Assigning a type to the variable 'load' (line 7651)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7651, 0), 'load', load)

@norecursion
def loads(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'loads'
    module_type_store = module_type_store.open_function_context('loads', 7676, 0, False)
    
    # Passed parameters checking function
    loads.stypy_localization = localization
    loads.stypy_type_of_self = None
    loads.stypy_type_store = module_type_store
    loads.stypy_function_name = 'loads'
    loads.stypy_param_names_list = ['strg']
    loads.stypy_varargs_param_name = None
    loads.stypy_kwargs_param_name = None
    loads.stypy_call_defaults = defaults
    loads.stypy_call_varargs = varargs
    loads.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'loads', ['strg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'loads', localization, ['strg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'loads(...)' code ##################

    str_151149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7691, (-1)), 'str', '\n    Load a pickle from the current string.\n\n    The result of ``cPickle.loads(strg)`` is returned.\n\n    Parameters\n    ----------\n    strg : str\n        The string to load.\n\n    See Also\n    --------\n    dumps : Return a string corresponding to the pickling of a masked array.\n\n    ')
    
    # Call to loads(...): (line 7692)
    # Processing the call arguments (line 7692)
    # Getting the type of 'strg' (line 7692)
    strg_151152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7692, 24), 'strg', False)
    # Processing the call keyword arguments (line 7692)
    kwargs_151153 = {}
    # Getting the type of 'pickle' (line 7692)
    pickle_151150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7692, 11), 'pickle', False)
    # Obtaining the member 'loads' of a type (line 7692)
    loads_151151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7692, 11), pickle_151150, 'loads')
    # Calling loads(args, kwargs) (line 7692)
    loads_call_result_151154 = invoke(stypy.reporting.localization.Localization(__file__, 7692, 11), loads_151151, *[strg_151152], **kwargs_151153)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7692, 4), 'stypy_return_type', loads_call_result_151154)
    
    # ################# End of 'loads(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'loads' in the type store
    # Getting the type of 'stypy_return_type' (line 7676)
    stypy_return_type_151155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7676, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151155)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'loads'
    return stypy_return_type_151155

# Assigning a type to the variable 'loads' (line 7676)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7676, 0), 'loads', loads)

@norecursion
def fromfile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'float' (line 7695)
    float_151156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7695, 25), 'float')
    int_151157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7695, 38), 'int')
    str_151158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7695, 46), 'str', '')
    defaults = [float_151156, int_151157, str_151158]
    # Create a new context for function 'fromfile'
    module_type_store = module_type_store.open_function_context('fromfile', 7695, 0, False)
    
    # Passed parameters checking function
    fromfile.stypy_localization = localization
    fromfile.stypy_type_of_self = None
    fromfile.stypy_type_store = module_type_store
    fromfile.stypy_function_name = 'fromfile'
    fromfile.stypy_param_names_list = ['file', 'dtype', 'count', 'sep']
    fromfile.stypy_varargs_param_name = None
    fromfile.stypy_kwargs_param_name = None
    fromfile.stypy_call_defaults = defaults
    fromfile.stypy_call_varargs = varargs
    fromfile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fromfile', ['file', 'dtype', 'count', 'sep'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fromfile', localization, ['file', 'dtype', 'count', 'sep'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fromfile(...)' code ##################

    
    # Call to NotImplementedError(...): (line 7696)
    # Processing the call arguments (line 7696)
    str_151160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7697, 8), 'str', 'fromfile() not yet implemented for a MaskedArray.')
    # Processing the call keyword arguments (line 7696)
    kwargs_151161 = {}
    # Getting the type of 'NotImplementedError' (line 7696)
    NotImplementedError_151159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7696, 10), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 7696)
    NotImplementedError_call_result_151162 = invoke(stypy.reporting.localization.Localization(__file__, 7696, 10), NotImplementedError_151159, *[str_151160], **kwargs_151161)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 7696, 4), NotImplementedError_call_result_151162, 'raise parameter', BaseException)
    
    # ################# End of 'fromfile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fromfile' in the type store
    # Getting the type of 'stypy_return_type' (line 7695)
    stypy_return_type_151163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7695, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151163)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fromfile'
    return stypy_return_type_151163

# Assigning a type to the variable 'fromfile' (line 7695)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7695, 0), 'fromfile', fromfile)

@norecursion
def fromflex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fromflex'
    module_type_store = module_type_store.open_function_context('fromflex', 7700, 0, False)
    
    # Passed parameters checking function
    fromflex.stypy_localization = localization
    fromflex.stypy_type_of_self = None
    fromflex.stypy_type_store = module_type_store
    fromflex.stypy_function_name = 'fromflex'
    fromflex.stypy_param_names_list = ['fxarray']
    fromflex.stypy_varargs_param_name = None
    fromflex.stypy_kwargs_param_name = None
    fromflex.stypy_call_defaults = defaults
    fromflex.stypy_call_varargs = varargs
    fromflex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fromflex', ['fxarray'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fromflex', localization, ['fxarray'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fromflex(...)' code ##################

    str_151164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7761, (-1)), 'str', "\n    Build a masked array from a suitable flexible-type array.\n\n    The input array has to have a data-type with ``_data`` and ``_mask``\n    fields. This type of array is output by `MaskedArray.toflex`.\n\n    Parameters\n    ----------\n    fxarray : ndarray\n        The structured input array, containing ``_data`` and ``_mask``\n        fields. If present, other fields are discarded.\n\n    Returns\n    -------\n    result : MaskedArray\n        The constructed masked array.\n\n    See Also\n    --------\n    MaskedArray.toflex : Build a flexible-type array from a masked array.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[0] + [1, 0] * 4)\n    >>> rec = x.toflex()\n    >>> rec\n    array([[(0, False), (1, True), (2, False)],\n           [(3, True), (4, False), (5, True)],\n           [(6, False), (7, True), (8, False)]],\n          dtype=[('_data', '<i4'), ('_mask', '|b1')])\n    >>> x2 = np.ma.fromflex(rec)\n    >>> x2\n    masked_array(data =\n     [[0 -- 2]\n     [-- 4 --]\n     [6 -- 8]],\n                 mask =\n     [[False  True False]\n     [ True False  True]\n     [False  True False]],\n           fill_value = 999999)\n\n    Extra fields can be present in the structured array but are discarded:\n\n    >>> dt = [('_data', '<i4'), ('_mask', '|b1'), ('field3', '<f4')]\n    >>> rec2 = np.zeros((2, 2), dtype=dt)\n    >>> rec2\n    array([[(0, False, 0.0), (0, False, 0.0)],\n           [(0, False, 0.0), (0, False, 0.0)]],\n          dtype=[('_data', '<i4'), ('_mask', '|b1'), ('field3', '<f4')])\n    >>> y = np.ma.fromflex(rec2)\n    >>> y\n    masked_array(data =\n     [[0 0]\n     [0 0]],\n                 mask =\n     [[False False]\n     [False False]],\n           fill_value = 999999)\n\n    ")
    
    # Call to masked_array(...): (line 7762)
    # Processing the call arguments (line 7762)
    
    # Obtaining the type of the subscript
    str_151166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7762, 32), 'str', '_data')
    # Getting the type of 'fxarray' (line 7762)
    fxarray_151167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7762, 24), 'fxarray', False)
    # Obtaining the member '__getitem__' of a type (line 7762)
    getitem___151168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7762, 24), fxarray_151167, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 7762)
    subscript_call_result_151169 = invoke(stypy.reporting.localization.Localization(__file__, 7762, 24), getitem___151168, str_151166)
    
    # Processing the call keyword arguments (line 7762)
    
    # Obtaining the type of the subscript
    str_151170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7762, 55), 'str', '_mask')
    # Getting the type of 'fxarray' (line 7762)
    fxarray_151171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7762, 47), 'fxarray', False)
    # Obtaining the member '__getitem__' of a type (line 7762)
    getitem___151172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7762, 47), fxarray_151171, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 7762)
    subscript_call_result_151173 = invoke(stypy.reporting.localization.Localization(__file__, 7762, 47), getitem___151172, str_151170)
    
    keyword_151174 = subscript_call_result_151173
    kwargs_151175 = {'mask': keyword_151174}
    # Getting the type of 'masked_array' (line 7762)
    masked_array_151165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7762, 11), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 7762)
    masked_array_call_result_151176 = invoke(stypy.reporting.localization.Localization(__file__, 7762, 11), masked_array_151165, *[subscript_call_result_151169], **kwargs_151175)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7762, 4), 'stypy_return_type', masked_array_call_result_151176)
    
    # ################# End of 'fromflex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fromflex' in the type store
    # Getting the type of 'stypy_return_type' (line 7700)
    stypy_return_type_151177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7700, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151177)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fromflex'
    return stypy_return_type_151177

# Assigning a type to the variable 'fromflex' (line 7700)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7700, 0), 'fromflex', fromflex)
# Declaration of the '_convert2ma' class

class _convert2ma:
    str_151178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7775, (-1)), 'str', '\n    Convert functions from numpy to numpy.ma.\n\n    Parameters\n    ----------\n        _methodname : string\n            Name of the method to transform.\n\n    ')
    
    # Assigning a Name to a Name (line 7776):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 7778)
        None_151179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7778, 40), 'None')
        defaults = [None_151179]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 7778, 4, False)
        # Assigning a type to the variable 'self' (line 7779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7779, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_convert2ma.__init__', ['funcname', 'params'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['funcname', 'params'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 7779):
        
        # Assigning a Call to a Attribute (line 7779):
        
        # Call to getattr(...): (line 7779)
        # Processing the call arguments (line 7779)
        # Getting the type of 'np' (line 7779)
        np_151181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7779, 29), 'np', False)
        # Getting the type of 'funcname' (line 7779)
        funcname_151182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7779, 33), 'funcname', False)
        # Processing the call keyword arguments (line 7779)
        kwargs_151183 = {}
        # Getting the type of 'getattr' (line 7779)
        getattr_151180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7779, 21), 'getattr', False)
        # Calling getattr(args, kwargs) (line 7779)
        getattr_call_result_151184 = invoke(stypy.reporting.localization.Localization(__file__, 7779, 21), getattr_151180, *[np_151181, funcname_151182], **kwargs_151183)
        
        # Getting the type of 'self' (line 7779)
        self_151185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7779, 8), 'self')
        # Setting the type of the member '_func' of a type (line 7779)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7779, 8), self_151185, '_func', getattr_call_result_151184)
        
        # Assigning a Call to a Attribute (line 7780):
        
        # Assigning a Call to a Attribute (line 7780):
        
        # Call to getdoc(...): (line 7780)
        # Processing the call keyword arguments (line 7780)
        kwargs_151188 = {}
        # Getting the type of 'self' (line 7780)
        self_151186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7780, 23), 'self', False)
        # Obtaining the member 'getdoc' of a type (line 7780)
        getdoc_151187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7780, 23), self_151186, 'getdoc')
        # Calling getdoc(args, kwargs) (line 7780)
        getdoc_call_result_151189 = invoke(stypy.reporting.localization.Localization(__file__, 7780, 23), getdoc_151187, *[], **kwargs_151188)
        
        # Getting the type of 'self' (line 7780)
        self_151190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7780, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 7780)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7780, 8), self_151190, '__doc__', getdoc_call_result_151189)
        
        # Assigning a BoolOp to a Attribute (line 7781):
        
        # Assigning a BoolOp to a Attribute (line 7781):
        
        # Evaluating a boolean operation
        # Getting the type of 'params' (line 7781)
        params_151191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7781, 23), 'params')
        
        # Obtaining an instance of the builtin type 'dict' (line 7781)
        dict_151192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7781, 33), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 7781)
        
        # Applying the binary operator 'or' (line 7781)
        result_or_keyword_151193 = python_operator(stypy.reporting.localization.Localization(__file__, 7781, 23), 'or', params_151191, dict_151192)
        
        # Getting the type of 'self' (line 7781)
        self_151194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7781, 8), 'self')
        # Setting the type of the member '_extras' of a type (line 7781)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7781, 8), self_151194, '_extras', result_or_keyword_151193)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def getdoc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'getdoc'
        module_type_store = module_type_store.open_function_context('getdoc', 7783, 4, False)
        # Assigning a type to the variable 'self' (line 7784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7784, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _convert2ma.getdoc.__dict__.__setitem__('stypy_localization', localization)
        _convert2ma.getdoc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _convert2ma.getdoc.__dict__.__setitem__('stypy_type_store', module_type_store)
        _convert2ma.getdoc.__dict__.__setitem__('stypy_function_name', '_convert2ma.getdoc')
        _convert2ma.getdoc.__dict__.__setitem__('stypy_param_names_list', [])
        _convert2ma.getdoc.__dict__.__setitem__('stypy_varargs_param_name', None)
        _convert2ma.getdoc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _convert2ma.getdoc.__dict__.__setitem__('stypy_call_defaults', defaults)
        _convert2ma.getdoc.__dict__.__setitem__('stypy_call_varargs', varargs)
        _convert2ma.getdoc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _convert2ma.getdoc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_convert2ma.getdoc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'getdoc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'getdoc(...)' code ##################

        str_151195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7784, 8), 'str', 'Return the doc of the function (from the doc of the method).')
        
        # Assigning a Call to a Name (line 7785):
        
        # Assigning a Call to a Name (line 7785):
        
        # Call to getattr(...): (line 7785)
        # Processing the call arguments (line 7785)
        # Getting the type of 'self' (line 7785)
        self_151197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7785, 22), 'self', False)
        # Obtaining the member '_func' of a type (line 7785)
        _func_151198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7785, 22), self_151197, '_func')
        str_151199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7785, 34), 'str', '__doc__')
        # Getting the type of 'None' (line 7785)
        None_151200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7785, 45), 'None', False)
        # Processing the call keyword arguments (line 7785)
        kwargs_151201 = {}
        # Getting the type of 'getattr' (line 7785)
        getattr_151196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7785, 14), 'getattr', False)
        # Calling getattr(args, kwargs) (line 7785)
        getattr_call_result_151202 = invoke(stypy.reporting.localization.Localization(__file__, 7785, 14), getattr_151196, *[_func_151198, str_151199, None_151200], **kwargs_151201)
        
        # Assigning a type to the variable 'doc' (line 7785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7785, 8), 'doc', getattr_call_result_151202)
        
        # Assigning a Call to a Name (line 7786):
        
        # Assigning a Call to a Name (line 7786):
        
        # Call to get_object_signature(...): (line 7786)
        # Processing the call arguments (line 7786)
        # Getting the type of 'self' (line 7786)
        self_151204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7786, 35), 'self', False)
        # Obtaining the member '_func' of a type (line 7786)
        _func_151205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7786, 35), self_151204, '_func')
        # Processing the call keyword arguments (line 7786)
        kwargs_151206 = {}
        # Getting the type of 'get_object_signature' (line 7786)
        get_object_signature_151203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7786, 14), 'get_object_signature', False)
        # Calling get_object_signature(args, kwargs) (line 7786)
        get_object_signature_call_result_151207 = invoke(stypy.reporting.localization.Localization(__file__, 7786, 14), get_object_signature_151203, *[_func_151205], **kwargs_151206)
        
        # Assigning a type to the variable 'sig' (line 7786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7786, 8), 'sig', get_object_signature_call_result_151207)
        
        # Getting the type of 'doc' (line 7787)
        doc_151208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7787, 11), 'doc')
        # Testing the type of an if condition (line 7787)
        if_condition_151209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7787, 8), doc_151208)
        # Assigning a type to the variable 'if_condition_151209' (line 7787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7787, 8), 'if_condition_151209', if_condition_151209)
        # SSA begins for if statement (line 7787)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'sig' (line 7789)
        sig_151210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7789, 15), 'sig')
        # Testing the type of an if condition (line 7789)
        if_condition_151211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7789, 12), sig_151210)
        # Assigning a type to the variable 'if_condition_151211' (line 7789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7789, 12), 'if_condition_151211', if_condition_151211)
        # SSA begins for if statement (line 7789)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 7790):
        
        # Assigning a BinOp to a Name (line 7790):
        str_151212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7790, 22), 'str', '%s%s\n')
        
        # Obtaining an instance of the builtin type 'tuple' (line 7790)
        tuple_151213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7790, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 7790)
        # Adding element type (line 7790)
        # Getting the type of 'self' (line 7790)
        self_151214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7790, 34), 'self')
        # Obtaining the member '_func' of a type (line 7790)
        _func_151215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7790, 34), self_151214, '_func')
        # Obtaining the member '__name__' of a type (line 7790)
        name___151216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7790, 34), _func_151215, '__name__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7790, 34), tuple_151213, name___151216)
        # Adding element type (line 7790)
        # Getting the type of 'sig' (line 7790)
        sig_151217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7790, 55), 'sig')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7790, 34), tuple_151213, sig_151217)
        
        # Applying the binary operator '%' (line 7790)
        result_mod_151218 = python_operator(stypy.reporting.localization.Localization(__file__, 7790, 22), '%', str_151212, tuple_151213)
        
        # Assigning a type to the variable 'sig' (line 7790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7790, 16), 'sig', result_mod_151218)
        # SSA join for if statement (line 7789)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 7791):
        
        # Assigning a BinOp to a Name (line 7791):
        # Getting the type of 'sig' (line 7791)
        sig_151219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7791, 18), 'sig')
        # Getting the type of 'doc' (line 7791)
        doc_151220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7791, 24), 'doc')
        # Applying the binary operator '+' (line 7791)
        result_add_151221 = python_operator(stypy.reporting.localization.Localization(__file__, 7791, 18), '+', sig_151219, doc_151220)
        
        # Assigning a type to the variable 'doc' (line 7791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7791, 12), 'doc', result_add_151221)
        # SSA join for if statement (line 7787)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'doc' (line 7792)
        doc_151222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7792, 15), 'doc')
        # Assigning a type to the variable 'stypy_return_type' (line 7792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7792, 8), 'stypy_return_type', doc_151222)
        
        # ################# End of 'getdoc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'getdoc' in the type store
        # Getting the type of 'stypy_return_type' (line 7783)
        stypy_return_type_151223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7783, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151223)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'getdoc'
        return stypy_return_type_151223


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 7794, 4, False)
        # Assigning a type to the variable 'self' (line 7795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7795, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _convert2ma.__call__.__dict__.__setitem__('stypy_localization', localization)
        _convert2ma.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _convert2ma.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _convert2ma.__call__.__dict__.__setitem__('stypy_function_name', '_convert2ma.__call__')
        _convert2ma.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        _convert2ma.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _convert2ma.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'params')
        _convert2ma.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _convert2ma.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _convert2ma.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _convert2ma.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_convert2ma.__call__', [], 'args', 'params', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Attribute to a Name (line 7796):
        
        # Assigning a Attribute to a Name (line 7796):
        # Getting the type of 'self' (line 7796)
        self_151224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7796, 18), 'self')
        # Obtaining the member '_extras' of a type (line 7796)
        _extras_151225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7796, 18), self_151224, '_extras')
        # Assigning a type to the variable '_extras' (line 7796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7796, 8), '_extras', _extras_151225)
        
        # Assigning a Call to a Name (line 7797):
        
        # Assigning a Call to a Name (line 7797):
        
        # Call to intersection(...): (line 7797)
        # Processing the call arguments (line 7797)
        # Getting the type of '_extras' (line 7797)
        _extras_151231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7797, 49), '_extras', False)
        # Processing the call keyword arguments (line 7797)
        kwargs_151232 = {}
        
        # Call to set(...): (line 7797)
        # Processing the call arguments (line 7797)
        # Getting the type of 'params' (line 7797)
        params_151227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7797, 28), 'params', False)
        # Processing the call keyword arguments (line 7797)
        kwargs_151228 = {}
        # Getting the type of 'set' (line 7797)
        set_151226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7797, 24), 'set', False)
        # Calling set(args, kwargs) (line 7797)
        set_call_result_151229 = invoke(stypy.reporting.localization.Localization(__file__, 7797, 24), set_151226, *[params_151227], **kwargs_151228)
        
        # Obtaining the member 'intersection' of a type (line 7797)
        intersection_151230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7797, 24), set_call_result_151229, 'intersection')
        # Calling intersection(args, kwargs) (line 7797)
        intersection_call_result_151233 = invoke(stypy.reporting.localization.Localization(__file__, 7797, 24), intersection_151230, *[_extras_151231], **kwargs_151232)
        
        # Assigning a type to the variable 'common_params' (line 7797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7797, 8), 'common_params', intersection_call_result_151233)
        
        # Getting the type of 'common_params' (line 7799)
        common_params_151234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7799, 17), 'common_params')
        # Testing the type of a for loop iterable (line 7799)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 7799, 8), common_params_151234)
        # Getting the type of the for loop variable (line 7799)
        for_loop_var_151235 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 7799, 8), common_params_151234)
        # Assigning a type to the variable 'p' (line 7799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7799, 8), 'p', for_loop_var_151235)
        # SSA begins for a for statement (line 7799)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 7800):
        
        # Assigning a Call to a Subscript (line 7800):
        
        # Call to pop(...): (line 7800)
        # Processing the call arguments (line 7800)
        # Getting the type of 'p' (line 7800)
        p_151238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7800, 36), 'p', False)
        # Processing the call keyword arguments (line 7800)
        kwargs_151239 = {}
        # Getting the type of 'params' (line 7800)
        params_151236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7800, 25), 'params', False)
        # Obtaining the member 'pop' of a type (line 7800)
        pop_151237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7800, 25), params_151236, 'pop')
        # Calling pop(args, kwargs) (line 7800)
        pop_call_result_151240 = invoke(stypy.reporting.localization.Localization(__file__, 7800, 25), pop_151237, *[p_151238], **kwargs_151239)
        
        # Getting the type of '_extras' (line 7800)
        _extras_151241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7800, 12), '_extras')
        # Getting the type of 'p' (line 7800)
        p_151242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7800, 20), 'p')
        # Storing an element on a container (line 7800)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7800, 12), _extras_151241, (p_151242, pop_call_result_151240))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 7802):
        
        # Assigning a Call to a Name (line 7802):
        
        # Call to view(...): (line 7802)
        # Processing the call arguments (line 7802)
        # Getting the type of 'MaskedArray' (line 7802)
        MaskedArray_151251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7802, 59), 'MaskedArray', False)
        # Processing the call keyword arguments (line 7802)
        kwargs_151252 = {}
        
        # Call to __call__(...): (line 7802)
        # Getting the type of 'args' (line 7802)
        args_151246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7802, 38), 'args', False)
        # Processing the call keyword arguments (line 7802)
        # Getting the type of 'params' (line 7802)
        params_151247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7802, 46), 'params', False)
        kwargs_151248 = {'params_151247': params_151247}
        # Getting the type of 'self' (line 7802)
        self_151243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7802, 17), 'self', False)
        # Obtaining the member '_func' of a type (line 7802)
        _func_151244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7802, 17), self_151243, '_func')
        # Obtaining the member '__call__' of a type (line 7802)
        call___151245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7802, 17), _func_151244, '__call__')
        # Calling __call__(args, kwargs) (line 7802)
        call___call_result_151249 = invoke(stypy.reporting.localization.Localization(__file__, 7802, 17), call___151245, *[args_151246], **kwargs_151248)
        
        # Obtaining the member 'view' of a type (line 7802)
        view_151250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7802, 17), call___call_result_151249, 'view')
        # Calling view(args, kwargs) (line 7802)
        view_call_result_151253 = invoke(stypy.reporting.localization.Localization(__file__, 7802, 17), view_151250, *[MaskedArray_151251], **kwargs_151252)
        
        # Assigning a type to the variable 'result' (line 7802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7802, 8), 'result', view_call_result_151253)
        
        
        str_151254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7803, 11), 'str', 'fill_value')
        # Getting the type of 'common_params' (line 7803)
        common_params_151255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7803, 27), 'common_params')
        # Applying the binary operator 'in' (line 7803)
        result_contains_151256 = python_operator(stypy.reporting.localization.Localization(__file__, 7803, 11), 'in', str_151254, common_params_151255)
        
        # Testing the type of an if condition (line 7803)
        if_condition_151257 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7803, 8), result_contains_151256)
        # Assigning a type to the variable 'if_condition_151257' (line 7803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7803, 8), 'if_condition_151257', if_condition_151257)
        # SSA begins for if statement (line 7803)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 7804):
        
        # Assigning a Call to a Attribute (line 7804):
        
        # Call to get(...): (line 7804)
        # Processing the call arguments (line 7804)
        str_151260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7804, 44), 'str', 'fill_value')
        # Getting the type of 'None' (line 7804)
        None_151261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7804, 58), 'None', False)
        # Processing the call keyword arguments (line 7804)
        kwargs_151262 = {}
        # Getting the type of '_extras' (line 7804)
        _extras_151258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7804, 32), '_extras', False)
        # Obtaining the member 'get' of a type (line 7804)
        get_151259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7804, 32), _extras_151258, 'get')
        # Calling get(args, kwargs) (line 7804)
        get_call_result_151263 = invoke(stypy.reporting.localization.Localization(__file__, 7804, 32), get_151259, *[str_151260, None_151261], **kwargs_151262)
        
        # Getting the type of 'result' (line 7804)
        result_151264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7804, 12), 'result')
        # Setting the type of the member 'fill_value' of a type (line 7804)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7804, 12), result_151264, 'fill_value', get_call_result_151263)
        # SSA join for if statement (line 7803)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        str_151265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7805, 11), 'str', 'hardmask')
        # Getting the type of 'common_params' (line 7805)
        common_params_151266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7805, 25), 'common_params')
        # Applying the binary operator 'in' (line 7805)
        result_contains_151267 = python_operator(stypy.reporting.localization.Localization(__file__, 7805, 11), 'in', str_151265, common_params_151266)
        
        # Testing the type of an if condition (line 7805)
        if_condition_151268 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 7805, 8), result_contains_151267)
        # Assigning a type to the variable 'if_condition_151268' (line 7805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7805, 8), 'if_condition_151268', if_condition_151268)
        # SSA begins for if statement (line 7805)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 7806):
        
        # Assigning a Call to a Attribute (line 7806):
        
        # Call to bool(...): (line 7806)
        # Processing the call arguments (line 7806)
        
        # Call to get(...): (line 7806)
        # Processing the call arguments (line 7806)
        str_151272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7806, 48), 'str', 'hard_mask')
        # Getting the type of 'False' (line 7806)
        False_151273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7806, 61), 'False', False)
        # Processing the call keyword arguments (line 7806)
        kwargs_151274 = {}
        # Getting the type of '_extras' (line 7806)
        _extras_151270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7806, 36), '_extras', False)
        # Obtaining the member 'get' of a type (line 7806)
        get_151271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7806, 36), _extras_151270, 'get')
        # Calling get(args, kwargs) (line 7806)
        get_call_result_151275 = invoke(stypy.reporting.localization.Localization(__file__, 7806, 36), get_151271, *[str_151272, False_151273], **kwargs_151274)
        
        # Processing the call keyword arguments (line 7806)
        kwargs_151276 = {}
        # Getting the type of 'bool' (line 7806)
        bool_151269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7806, 31), 'bool', False)
        # Calling bool(args, kwargs) (line 7806)
        bool_call_result_151277 = invoke(stypy.reporting.localization.Localization(__file__, 7806, 31), bool_151269, *[get_call_result_151275], **kwargs_151276)
        
        # Getting the type of 'result' (line 7806)
        result_151278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7806, 12), 'result')
        # Setting the type of the member '_hardmask' of a type (line 7806)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 7806, 12), result_151278, '_hardmask', bool_call_result_151277)
        # SSA join for if statement (line 7805)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'result' (line 7807)
        result_151279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7807, 15), 'result')
        # Assigning a type to the variable 'stypy_return_type' (line 7807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7807, 8), 'stypy_return_type', result_151279)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 7794)
        stypy_return_type_151280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7794, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151280)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_151280


# Assigning a type to the variable '_convert2ma' (line 7765)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7765, 0), '_convert2ma', _convert2ma)

# Assigning a Name to a Name (line 7776):
# Getting the type of 'None' (line 7776)
None_151281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7776, 14), 'None')
# Getting the type of '_convert2ma'
_convert2ma_151282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_convert2ma')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _convert2ma_151282, '__doc__', None_151281)

# Assigning a Call to a Name (line 7809):

# Assigning a Call to a Name (line 7809):

# Call to _convert2ma(...): (line 7809)
# Processing the call arguments (line 7809)
str_151284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7809, 21), 'str', 'arange')
# Processing the call keyword arguments (line 7809)

# Call to dict(...): (line 7809)
# Processing the call keyword arguments (line 7809)
# Getting the type of 'None' (line 7809)
None_151286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7809, 54), 'None', False)
keyword_151287 = None_151286
# Getting the type of 'False' (line 7809)
False_151288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7809, 69), 'False', False)
keyword_151289 = False_151288
kwargs_151290 = {'hardmask': keyword_151289, 'fill_value': keyword_151287}
# Getting the type of 'dict' (line 7809)
dict_151285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7809, 38), 'dict', False)
# Calling dict(args, kwargs) (line 7809)
dict_call_result_151291 = invoke(stypy.reporting.localization.Localization(__file__, 7809, 38), dict_151285, *[], **kwargs_151290)

keyword_151292 = dict_call_result_151291
kwargs_151293 = {'params': keyword_151292}
# Getting the type of '_convert2ma' (line 7809)
_convert2ma_151283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7809, 9), '_convert2ma', False)
# Calling _convert2ma(args, kwargs) (line 7809)
_convert2ma_call_result_151294 = invoke(stypy.reporting.localization.Localization(__file__, 7809, 9), _convert2ma_151283, *[str_151284], **kwargs_151293)

# Assigning a type to the variable 'arange' (line 7809)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7809, 0), 'arange', _convert2ma_call_result_151294)

# Assigning a Attribute to a Name (line 7810):

# Assigning a Attribute to a Name (line 7810):
# Getting the type of 'np' (line 7810)
np_151295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7810, 7), 'np')
# Obtaining the member 'clip' of a type (line 7810)
clip_151296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7810, 7), np_151295, 'clip')
# Assigning a type to the variable 'clip' (line 7810)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7810, 0), 'clip', clip_151296)

# Assigning a Attribute to a Name (line 7811):

# Assigning a Attribute to a Name (line 7811):
# Getting the type of 'np' (line 7811)
np_151297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7811, 7), 'np')
# Obtaining the member 'diff' of a type (line 7811)
diff_151298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7811, 7), np_151297, 'diff')
# Assigning a type to the variable 'diff' (line 7811)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7811, 0), 'diff', diff_151298)

# Assigning a Call to a Name (line 7812):

# Assigning a Call to a Name (line 7812):

# Call to _convert2ma(...): (line 7812)
# Processing the call arguments (line 7812)
str_151300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7812, 20), 'str', 'empty')
# Processing the call keyword arguments (line 7812)

# Call to dict(...): (line 7812)
# Processing the call keyword arguments (line 7812)
# Getting the type of 'None' (line 7812)
None_151302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7812, 52), 'None', False)
keyword_151303 = None_151302
# Getting the type of 'False' (line 7812)
False_151304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7812, 67), 'False', False)
keyword_151305 = False_151304
kwargs_151306 = {'hardmask': keyword_151305, 'fill_value': keyword_151303}
# Getting the type of 'dict' (line 7812)
dict_151301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7812, 36), 'dict', False)
# Calling dict(args, kwargs) (line 7812)
dict_call_result_151307 = invoke(stypy.reporting.localization.Localization(__file__, 7812, 36), dict_151301, *[], **kwargs_151306)

keyword_151308 = dict_call_result_151307
kwargs_151309 = {'params': keyword_151308}
# Getting the type of '_convert2ma' (line 7812)
_convert2ma_151299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7812, 8), '_convert2ma', False)
# Calling _convert2ma(args, kwargs) (line 7812)
_convert2ma_call_result_151310 = invoke(stypy.reporting.localization.Localization(__file__, 7812, 8), _convert2ma_151299, *[str_151300], **kwargs_151309)

# Assigning a type to the variable 'empty' (line 7812)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7812, 0), 'empty', _convert2ma_call_result_151310)

# Assigning a Call to a Name (line 7813):

# Assigning a Call to a Name (line 7813):

# Call to _convert2ma(...): (line 7813)
# Processing the call arguments (line 7813)
str_151312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7813, 25), 'str', 'empty_like')
# Processing the call keyword arguments (line 7813)
kwargs_151313 = {}
# Getting the type of '_convert2ma' (line 7813)
_convert2ma_151311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7813, 13), '_convert2ma', False)
# Calling _convert2ma(args, kwargs) (line 7813)
_convert2ma_call_result_151314 = invoke(stypy.reporting.localization.Localization(__file__, 7813, 13), _convert2ma_151311, *[str_151312], **kwargs_151313)

# Assigning a type to the variable 'empty_like' (line 7813)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7813, 0), 'empty_like', _convert2ma_call_result_151314)

# Assigning a Call to a Name (line 7814):

# Assigning a Call to a Name (line 7814):

# Call to _convert2ma(...): (line 7814)
# Processing the call arguments (line 7814)
str_151316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7814, 25), 'str', 'frombuffer')
# Processing the call keyword arguments (line 7814)
kwargs_151317 = {}
# Getting the type of '_convert2ma' (line 7814)
_convert2ma_151315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7814, 13), '_convert2ma', False)
# Calling _convert2ma(args, kwargs) (line 7814)
_convert2ma_call_result_151318 = invoke(stypy.reporting.localization.Localization(__file__, 7814, 13), _convert2ma_151315, *[str_151316], **kwargs_151317)

# Assigning a type to the variable 'frombuffer' (line 7814)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7814, 0), 'frombuffer', _convert2ma_call_result_151318)

# Assigning a Call to a Name (line 7815):

# Assigning a Call to a Name (line 7815):

# Call to _convert2ma(...): (line 7815)
# Processing the call arguments (line 7815)
str_151320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7815, 27), 'str', 'fromfunction')
# Processing the call keyword arguments (line 7815)
kwargs_151321 = {}
# Getting the type of '_convert2ma' (line 7815)
_convert2ma_151319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7815, 15), '_convert2ma', False)
# Calling _convert2ma(args, kwargs) (line 7815)
_convert2ma_call_result_151322 = invoke(stypy.reporting.localization.Localization(__file__, 7815, 15), _convert2ma_151319, *[str_151320], **kwargs_151321)

# Assigning a type to the variable 'fromfunction' (line 7815)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7815, 0), 'fromfunction', _convert2ma_call_result_151322)

# Assigning a Call to a Name (line 7816):

# Assigning a Call to a Name (line 7816):

# Call to _convert2ma(...): (line 7816)
# Processing the call arguments (line 7816)
str_151324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7817, 4), 'str', 'identity')
# Processing the call keyword arguments (line 7816)

# Call to dict(...): (line 7817)
# Processing the call keyword arguments (line 7817)
# Getting the type of 'None' (line 7817)
None_151326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7817, 39), 'None', False)
keyword_151327 = None_151326
# Getting the type of 'False' (line 7817)
False_151328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7817, 54), 'False', False)
keyword_151329 = False_151328
kwargs_151330 = {'hardmask': keyword_151329, 'fill_value': keyword_151327}
# Getting the type of 'dict' (line 7817)
dict_151325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7817, 23), 'dict', False)
# Calling dict(args, kwargs) (line 7817)
dict_call_result_151331 = invoke(stypy.reporting.localization.Localization(__file__, 7817, 23), dict_151325, *[], **kwargs_151330)

keyword_151332 = dict_call_result_151331
kwargs_151333 = {'params': keyword_151332}
# Getting the type of '_convert2ma' (line 7816)
_convert2ma_151323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7816, 11), '_convert2ma', False)
# Calling _convert2ma(args, kwargs) (line 7816)
_convert2ma_call_result_151334 = invoke(stypy.reporting.localization.Localization(__file__, 7816, 11), _convert2ma_151323, *[str_151324], **kwargs_151333)

# Assigning a type to the variable 'identity' (line 7816)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7816, 0), 'identity', _convert2ma_call_result_151334)

# Assigning a Attribute to a Name (line 7818):

# Assigning a Attribute to a Name (line 7818):
# Getting the type of 'np' (line 7818)
np_151335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7818, 10), 'np')
# Obtaining the member 'indices' of a type (line 7818)
indices_151336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7818, 10), np_151335, 'indices')
# Assigning a type to the variable 'indices' (line 7818)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7818, 0), 'indices', indices_151336)

# Assigning a Call to a Name (line 7819):

# Assigning a Call to a Name (line 7819):

# Call to _convert2ma(...): (line 7819)
# Processing the call arguments (line 7819)
str_151338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7819, 19), 'str', 'ones')
# Processing the call keyword arguments (line 7819)

# Call to dict(...): (line 7819)
# Processing the call keyword arguments (line 7819)
# Getting the type of 'None' (line 7819)
None_151340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7819, 50), 'None', False)
keyword_151341 = None_151340
# Getting the type of 'False' (line 7819)
False_151342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7819, 65), 'False', False)
keyword_151343 = False_151342
kwargs_151344 = {'hardmask': keyword_151343, 'fill_value': keyword_151341}
# Getting the type of 'dict' (line 7819)
dict_151339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7819, 34), 'dict', False)
# Calling dict(args, kwargs) (line 7819)
dict_call_result_151345 = invoke(stypy.reporting.localization.Localization(__file__, 7819, 34), dict_151339, *[], **kwargs_151344)

keyword_151346 = dict_call_result_151345
kwargs_151347 = {'params': keyword_151346}
# Getting the type of '_convert2ma' (line 7819)
_convert2ma_151337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7819, 7), '_convert2ma', False)
# Calling _convert2ma(args, kwargs) (line 7819)
_convert2ma_call_result_151348 = invoke(stypy.reporting.localization.Localization(__file__, 7819, 7), _convert2ma_151337, *[str_151338], **kwargs_151347)

# Assigning a type to the variable 'ones' (line 7819)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7819, 0), 'ones', _convert2ma_call_result_151348)

# Assigning a Attribute to a Name (line 7820):

# Assigning a Attribute to a Name (line 7820):
# Getting the type of 'np' (line 7820)
np_151349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7820, 12), 'np')
# Obtaining the member 'ones_like' of a type (line 7820)
ones_like_151350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7820, 12), np_151349, 'ones_like')
# Assigning a type to the variable 'ones_like' (line 7820)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7820, 0), 'ones_like', ones_like_151350)

# Assigning a Attribute to a Name (line 7821):

# Assigning a Attribute to a Name (line 7821):
# Getting the type of 'np' (line 7821)
np_151351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7821, 10), 'np')
# Obtaining the member 'squeeze' of a type (line 7821)
squeeze_151352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7821, 10), np_151351, 'squeeze')
# Assigning a type to the variable 'squeeze' (line 7821)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7821, 0), 'squeeze', squeeze_151352)

# Assigning a Call to a Name (line 7822):

# Assigning a Call to a Name (line 7822):

# Call to _convert2ma(...): (line 7822)
# Processing the call arguments (line 7822)
str_151354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7822, 20), 'str', 'zeros')
# Processing the call keyword arguments (line 7822)

# Call to dict(...): (line 7822)
# Processing the call keyword arguments (line 7822)
# Getting the type of 'None' (line 7822)
None_151356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7822, 52), 'None', False)
keyword_151357 = None_151356
# Getting the type of 'False' (line 7822)
False_151358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7822, 67), 'False', False)
keyword_151359 = False_151358
kwargs_151360 = {'hardmask': keyword_151359, 'fill_value': keyword_151357}
# Getting the type of 'dict' (line 7822)
dict_151355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7822, 36), 'dict', False)
# Calling dict(args, kwargs) (line 7822)
dict_call_result_151361 = invoke(stypy.reporting.localization.Localization(__file__, 7822, 36), dict_151355, *[], **kwargs_151360)

keyword_151362 = dict_call_result_151361
kwargs_151363 = {'params': keyword_151362}
# Getting the type of '_convert2ma' (line 7822)
_convert2ma_151353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7822, 8), '_convert2ma', False)
# Calling _convert2ma(args, kwargs) (line 7822)
_convert2ma_call_result_151364 = invoke(stypy.reporting.localization.Localization(__file__, 7822, 8), _convert2ma_151353, *[str_151354], **kwargs_151363)

# Assigning a type to the variable 'zeros' (line 7822)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7822, 0), 'zeros', _convert2ma_call_result_151364)

# Assigning a Attribute to a Name (line 7823):

# Assigning a Attribute to a Name (line 7823):
# Getting the type of 'np' (line 7823)
np_151365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7823, 13), 'np')
# Obtaining the member 'zeros_like' of a type (line 7823)
zeros_like_151366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 7823, 13), np_151365, 'zeros_like')
# Assigning a type to the variable 'zeros_like' (line 7823)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7823, 0), 'zeros_like', zeros_like_151366)

@norecursion
def append(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 7826)
    None_151367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7826, 22), 'None')
    defaults = [None_151367]
    # Create a new context for function 'append'
    module_type_store = module_type_store.open_function_context('append', 7826, 0, False)
    
    # Passed parameters checking function
    append.stypy_localization = localization
    append.stypy_type_of_self = None
    append.stypy_type_store = module_type_store
    append.stypy_function_name = 'append'
    append.stypy_param_names_list = ['a', 'b', 'axis']
    append.stypy_varargs_param_name = None
    append.stypy_kwargs_param_name = None
    append.stypy_call_defaults = defaults
    append.stypy_call_varargs = varargs
    append.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'append', ['a', 'b', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'append', localization, ['a', 'b', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'append(...)' code ##################

    str_151368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7862, (-1)), 'str', 'Append values to the end of an array.\n\n    .. versionadded:: 1.9.0\n\n    Parameters\n    ----------\n    a : array_like\n        Values are appended to a copy of this array.\n    b : array_like\n        These values are appended to a copy of `a`.  It must be of the\n        correct shape (the same shape as `a`, excluding `axis`).  If `axis`\n        is not specified, `b` can be any shape and will be flattened\n        before use.\n    axis : int, optional\n        The axis along which `v` are appended.  If `axis` is not given,\n        both `a` and `b` are flattened before use.\n\n    Returns\n    -------\n    append : MaskedArray\n        A copy of `a` with `b` appended to `axis`.  Note that `append`\n        does not occur in-place: a new array is allocated and filled.  If\n        `axis` is None, the result is a flattened array.\n\n    See Also\n    --------\n    numpy.append : Equivalent function in the top-level NumPy module.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = ma.masked_values([1, 2, 3], 2)\n    >>> b = ma.masked_values([[4, 5, 6], [7, 8, 9]], 7)\n    >>> print(ma.append(a, b))\n    [1 -- 3 4 5 6 -- 8 9]\n    ')
    
    # Call to concatenate(...): (line 7863)
    # Processing the call arguments (line 7863)
    
    # Obtaining an instance of the builtin type 'list' (line 7863)
    list_151370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7863, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 7863)
    # Adding element type (line 7863)
    # Getting the type of 'a' (line 7863)
    a_151371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7863, 24), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7863, 23), list_151370, a_151371)
    # Adding element type (line 7863)
    # Getting the type of 'b' (line 7863)
    b_151372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7863, 27), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 7863, 23), list_151370, b_151372)
    
    # Getting the type of 'axis' (line 7863)
    axis_151373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7863, 31), 'axis', False)
    # Processing the call keyword arguments (line 7863)
    kwargs_151374 = {}
    # Getting the type of 'concatenate' (line 7863)
    concatenate_151369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7863, 11), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 7863)
    concatenate_call_result_151375 = invoke(stypy.reporting.localization.Localization(__file__, 7863, 11), concatenate_151369, *[list_151370, axis_151373], **kwargs_151374)
    
    # Assigning a type to the variable 'stypy_return_type' (line 7863)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7863, 4), 'stypy_return_type', concatenate_call_result_151375)
    
    # ################# End of 'append(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'append' in the type store
    # Getting the type of 'stypy_return_type' (line 7826)
    stypy_return_type_151376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 7826, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151376)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'append'
    return stypy_return_type_151376

# Assigning a type to the variable 'append' (line 7826)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7826, 0), 'append', append)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
