
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Masked arrays add-ons.
3: 
4: A collection of utilities for `numpy.ma`.
5: 
6: :author: Pierre Gerard-Marchant
7: :contact: pierregm_at_uga_dot_edu
8: :version: $Id: extras.py 3473 2007-10-29 15:18:13Z jarrod.millman $
9: 
10: '''
11: from __future__ import division, absolute_import, print_function
12: 
13: __all__ = [
14:     'apply_along_axis', 'apply_over_axes', 'atleast_1d', 'atleast_2d',
15:     'atleast_3d', 'average', 'clump_masked', 'clump_unmasked',
16:     'column_stack', 'compress_cols', 'compress_nd', 'compress_rowcols',
17:     'compress_rows', 'count_masked', 'corrcoef', 'cov', 'diagflat', 'dot',
18:     'dstack', 'ediff1d', 'flatnotmasked_contiguous', 'flatnotmasked_edges',
19:     'hsplit', 'hstack', 'in1d', 'intersect1d', 'mask_cols', 'mask_rowcols',
20:     'mask_rows', 'masked_all', 'masked_all_like', 'median', 'mr_',
21:     'notmasked_contiguous', 'notmasked_edges', 'polyfit', 'row_stack',
22:     'setdiff1d', 'setxor1d', 'unique', 'union1d', 'vander', 'vstack',
23:     ]
24: 
25: import itertools
26: import warnings
27: 
28: from . import core as ma
29: from .core import (
30:     MaskedArray, MAError, add, array, asarray, concatenate, filled,
31:     getmask, getmaskarray, make_mask_descr, masked, masked_array, mask_or,
32:     nomask, ones, sort, zeros, getdata, get_masked_subclass, dot,
33:     mask_rowcols
34:     )
35: 
36: import numpy as np
37: from numpy import ndarray, array as nxarray
38: import numpy.core.umath as umath
39: from numpy.lib.index_tricks import AxisConcatenator
40: 
41: 
42: def issequence(seq):
43:     '''
44:     Is seq a sequence (ndarray, list or tuple)?
45: 
46:     '''
47:     if isinstance(seq, (ndarray, tuple, list)):
48:         return True
49:     return False
50: 
51: def count_masked(arr, axis=None):
52:     '''
53:     Count the number of masked elements along the given axis.
54: 
55:     Parameters
56:     ----------
57:     arr : array_like
58:         An array with (possibly) masked elements.
59:     axis : int, optional
60:         Axis along which to count. If None (default), a flattened
61:         version of the array is used.
62: 
63:     Returns
64:     -------
65:     count : int, ndarray
66:         The total number of masked elements (axis=None) or the number
67:         of masked elements along each slice of the given axis.
68: 
69:     See Also
70:     --------
71:     MaskedArray.count : Count non-masked elements.
72: 
73:     Examples
74:     --------
75:     >>> import numpy.ma as ma
76:     >>> a = np.arange(9).reshape((3,3))
77:     >>> a = ma.array(a)
78:     >>> a[1, 0] = ma.masked
79:     >>> a[1, 2] = ma.masked
80:     >>> a[2, 1] = ma.masked
81:     >>> a
82:     masked_array(data =
83:      [[0 1 2]
84:      [-- 4 --]
85:      [6 -- 8]],
86:           mask =
87:      [[False False False]
88:      [ True False  True]
89:      [False  True False]],
90:           fill_value=999999)
91:     >>> ma.count_masked(a)
92:     3
93: 
94:     When the `axis` keyword is used an array is returned.
95: 
96:     >>> ma.count_masked(a, axis=0)
97:     array([1, 1, 1])
98:     >>> ma.count_masked(a, axis=1)
99:     array([0, 2, 1])
100: 
101:     '''
102:     m = getmaskarray(arr)
103:     return m.sum(axis)
104: 
105: def masked_all(shape, dtype=float):
106:     '''
107:     Empty masked array with all elements masked.
108: 
109:     Return an empty masked array of the given shape and dtype, where all the
110:     data are masked.
111: 
112:     Parameters
113:     ----------
114:     shape : tuple
115:         Shape of the required MaskedArray.
116:     dtype : dtype, optional
117:         Data type of the output.
118: 
119:     Returns
120:     -------
121:     a : MaskedArray
122:         A masked array with all data masked.
123: 
124:     See Also
125:     --------
126:     masked_all_like : Empty masked array modelled on an existing array.
127: 
128:     Examples
129:     --------
130:     >>> import numpy.ma as ma
131:     >>> ma.masked_all((3, 3))
132:     masked_array(data =
133:      [[-- -- --]
134:      [-- -- --]
135:      [-- -- --]],
136:           mask =
137:      [[ True  True  True]
138:      [ True  True  True]
139:      [ True  True  True]],
140:           fill_value=1e+20)
141: 
142:     The `dtype` parameter defines the underlying data type.
143: 
144:     >>> a = ma.masked_all((3, 3))
145:     >>> a.dtype
146:     dtype('float64')
147:     >>> a = ma.masked_all((3, 3), dtype=np.int32)
148:     >>> a.dtype
149:     dtype('int32')
150: 
151:     '''
152:     a = masked_array(np.empty(shape, dtype),
153:                      mask=np.ones(shape, make_mask_descr(dtype)))
154:     return a
155: 
156: def masked_all_like(arr):
157:     '''
158:     Empty masked array with the properties of an existing array.
159: 
160:     Return an empty masked array of the same shape and dtype as
161:     the array `arr`, where all the data are masked.
162: 
163:     Parameters
164:     ----------
165:     arr : ndarray
166:         An array describing the shape and dtype of the required MaskedArray.
167: 
168:     Returns
169:     -------
170:     a : MaskedArray
171:         A masked array with all data masked.
172: 
173:     Raises
174:     ------
175:     AttributeError
176:         If `arr` doesn't have a shape attribute (i.e. not an ndarray)
177: 
178:     See Also
179:     --------
180:     masked_all : Empty masked array with all elements masked.
181: 
182:     Examples
183:     --------
184:     >>> import numpy.ma as ma
185:     >>> arr = np.zeros((2, 3), dtype=np.float32)
186:     >>> arr
187:     array([[ 0.,  0.,  0.],
188:            [ 0.,  0.,  0.]], dtype=float32)
189:     >>> ma.masked_all_like(arr)
190:     masked_array(data =
191:      [[-- -- --]
192:      [-- -- --]],
193:           mask =
194:      [[ True  True  True]
195:      [ True  True  True]],
196:           fill_value=1e+20)
197: 
198:     The dtype of the masked array matches the dtype of `arr`.
199: 
200:     >>> arr.dtype
201:     dtype('float32')
202:     >>> ma.masked_all_like(arr).dtype
203:     dtype('float32')
204: 
205:     '''
206:     a = np.empty_like(arr).view(MaskedArray)
207:     a._mask = np.ones(a.shape, dtype=make_mask_descr(a.dtype))
208:     return a
209: 
210: 
211: #####--------------------------------------------------------------------------
212: #---- --- Standard functions ---
213: #####--------------------------------------------------------------------------
214: class _fromnxfunction:
215:     '''
216:     Defines a wrapper to adapt NumPy functions to masked arrays.
217: 
218: 
219:     An instance of `_fromnxfunction` can be called with the same parameters
220:     as the wrapped NumPy function. The docstring of `newfunc` is adapted from
221:     the wrapped function as well, see `getdoc`.
222: 
223:     Parameters
224:     ----------
225:     funcname : str
226:         The name of the function to be adapted. The function should be
227:         in the NumPy namespace (i.e. ``np.funcname``).
228: 
229:     '''
230: 
231:     def __init__(self, funcname):
232:         self.__name__ = funcname
233:         self.__doc__ = self.getdoc()
234: 
235:     def getdoc(self):
236:         '''
237:         Retrieve the docstring and signature from the function.
238: 
239:         The ``__doc__`` attribute of the function is used as the docstring for
240:         the new masked array version of the function. A note on application
241:         of the function to the mask is appended.
242: 
243:         .. warning::
244:           If the function docstring already contained a Notes section, the
245:           new docstring will have two Notes sections instead of appending a note
246:           to the existing section.
247: 
248:         Parameters
249:         ----------
250:         None
251: 
252:         '''
253:         npfunc = getattr(np, self.__name__, None)
254:         doc = getattr(npfunc, '__doc__', None)
255:         if doc:
256:             sig = self.__name__ + ma.get_object_signature(npfunc)
257:             locdoc = "Notes\n-----\nThe function is applied to both the _data"\
258:                      " and the _mask, if any."
259:             return '\n'.join((sig, doc, locdoc))
260:         return
261: 
262:     def __call__(self, *args, **params):
263:         func = getattr(np, self.__name__)
264:         if len(args) == 1:
265:             x = args[0]
266:             if isinstance(x, ndarray):
267:                 _d = func(x.__array__(), **params)
268:                 _m = func(getmaskarray(x), **params)
269:                 return masked_array(_d, mask=_m)
270:             elif isinstance(x, tuple) or isinstance(x, list):
271:                 _d = func(tuple([np.asarray(a) for a in x]), **params)
272:                 _m = func(tuple([getmaskarray(a) for a in x]), **params)
273:                 return masked_array(_d, mask=_m)
274:             else:
275:                 _d = func(np.asarray(x), **params)
276:                 _m = func(getmaskarray(x), **params)
277:                 return masked_array(_d, mask=_m)
278:         else:
279:             arrays = []
280:             args = list(args)
281:             while len(args) > 0 and issequence(args[0]):
282:                 arrays.append(args.pop(0))
283:             res = []
284:             for x in arrays:
285:                 _d = func(np.asarray(x), *args, **params)
286:                 _m = func(getmaskarray(x), *args, **params)
287:                 res.append(masked_array(_d, mask=_m))
288:             return res
289: 
290: atleast_1d = _fromnxfunction('atleast_1d')
291: atleast_2d = _fromnxfunction('atleast_2d')
292: atleast_3d = _fromnxfunction('atleast_3d')
293: #atleast_1d = np.atleast_1d
294: #atleast_2d = np.atleast_2d
295: #atleast_3d = np.atleast_3d
296: 
297: vstack = row_stack = _fromnxfunction('vstack')
298: hstack = _fromnxfunction('hstack')
299: column_stack = _fromnxfunction('column_stack')
300: dstack = _fromnxfunction('dstack')
301: 
302: hsplit = _fromnxfunction('hsplit')
303: 
304: diagflat = _fromnxfunction('diagflat')
305: 
306: 
307: #####--------------------------------------------------------------------------
308: #----
309: #####--------------------------------------------------------------------------
310: def flatten_inplace(seq):
311:     '''Flatten a sequence in place.'''
312:     k = 0
313:     while (k != len(seq)):
314:         while hasattr(seq[k], '__iter__'):
315:             seq[k:(k + 1)] = seq[k]
316:         k += 1
317:     return seq
318: 
319: 
320: def apply_along_axis(func1d, axis, arr, *args, **kwargs):
321:     '''
322:     (This docstring should be overwritten)
323:     '''
324:     arr = array(arr, copy=False, subok=True)
325:     nd = arr.ndim
326:     if axis < 0:
327:         axis += nd
328:     if (axis >= nd):
329:         raise ValueError("axis must be less than arr.ndim; axis=%d, rank=%d."
330:             % (axis, nd))
331:     ind = [0] * (nd - 1)
332:     i = np.zeros(nd, 'O')
333:     indlist = list(range(nd))
334:     indlist.remove(axis)
335:     i[axis] = slice(None, None)
336:     outshape = np.asarray(arr.shape).take(indlist)
337:     i.put(indlist, ind)
338:     j = i.copy()
339:     res = func1d(arr[tuple(i.tolist())], *args, **kwargs)
340:     #  if res is a number, then we have a smaller output array
341:     asscalar = np.isscalar(res)
342:     if not asscalar:
343:         try:
344:             len(res)
345:         except TypeError:
346:             asscalar = True
347:     # Note: we shouldn't set the dtype of the output from the first result
348:     # so we force the type to object, and build a list of dtypes.  We'll
349:     # just take the largest, to avoid some downcasting
350:     dtypes = []
351:     if asscalar:
352:         dtypes.append(np.asarray(res).dtype)
353:         outarr = zeros(outshape, object)
354:         outarr[tuple(ind)] = res
355:         Ntot = np.product(outshape)
356:         k = 1
357:         while k < Ntot:
358:             # increment the index
359:             ind[-1] += 1
360:             n = -1
361:             while (ind[n] >= outshape[n]) and (n > (1 - nd)):
362:                 ind[n - 1] += 1
363:                 ind[n] = 0
364:                 n -= 1
365:             i.put(indlist, ind)
366:             res = func1d(arr[tuple(i.tolist())], *args, **kwargs)
367:             outarr[tuple(ind)] = res
368:             dtypes.append(asarray(res).dtype)
369:             k += 1
370:     else:
371:         res = array(res, copy=False, subok=True)
372:         j = i.copy()
373:         j[axis] = ([slice(None, None)] * res.ndim)
374:         j.put(indlist, ind)
375:         Ntot = np.product(outshape)
376:         holdshape = outshape
377:         outshape = list(arr.shape)
378:         outshape[axis] = res.shape
379:         dtypes.append(asarray(res).dtype)
380:         outshape = flatten_inplace(outshape)
381:         outarr = zeros(outshape, object)
382:         outarr[tuple(flatten_inplace(j.tolist()))] = res
383:         k = 1
384:         while k < Ntot:
385:             # increment the index
386:             ind[-1] += 1
387:             n = -1
388:             while (ind[n] >= holdshape[n]) and (n > (1 - nd)):
389:                 ind[n - 1] += 1
390:                 ind[n] = 0
391:                 n -= 1
392:             i.put(indlist, ind)
393:             j.put(indlist, ind)
394:             res = func1d(arr[tuple(i.tolist())], *args, **kwargs)
395:             outarr[tuple(flatten_inplace(j.tolist()))] = res
396:             dtypes.append(asarray(res).dtype)
397:             k += 1
398:     max_dtypes = np.dtype(np.asarray(dtypes).max())
399:     if not hasattr(arr, '_mask'):
400:         result = np.asarray(outarr, dtype=max_dtypes)
401:     else:
402:         result = asarray(outarr, dtype=max_dtypes)
403:         result.fill_value = ma.default_fill_value(result)
404:     return result
405: apply_along_axis.__doc__ = np.apply_along_axis.__doc__
406: 
407: 
408: def apply_over_axes(func, a, axes):
409:     '''
410:     (This docstring will be overwritten)
411:     '''
412:     val = asarray(a)
413:     N = a.ndim
414:     if array(axes).ndim == 0:
415:         axes = (axes,)
416:     for axis in axes:
417:         if axis < 0:
418:             axis = N + axis
419:         args = (val, axis)
420:         res = func(*args)
421:         if res.ndim == val.ndim:
422:             val = res
423:         else:
424:             res = ma.expand_dims(res, axis)
425:             if res.ndim == val.ndim:
426:                 val = res
427:             else:
428:                 raise ValueError("function is not returning "
429:                         "an array of the correct shape")
430:     return val
431: 
432: if apply_over_axes.__doc__ is not None:
433:     apply_over_axes.__doc__ = np.apply_over_axes.__doc__[
434:         :np.apply_over_axes.__doc__.find('Notes')].rstrip() + \
435:     '''
436: 
437:     Examples
438:     --------
439:     >>> a = ma.arange(24).reshape(2,3,4)
440:     >>> a[:,0,1] = ma.masked
441:     >>> a[:,1,:] = ma.masked
442:     >>> print(a)
443:     [[[0 -- 2 3]
444:       [-- -- -- --]
445:       [8 9 10 11]]
446: 
447:      [[12 -- 14 15]
448:       [-- -- -- --]
449:       [20 21 22 23]]]
450:     >>> print(ma.apply_over_axes(ma.sum, a, [0,2]))
451:     [[[46]
452:       [--]
453:       [124]]]
454: 
455:     Tuple axis arguments to ufuncs are equivalent:
456: 
457:     >>> print(ma.sum(a, axis=(0,2)).reshape((1,-1,1)))
458:     [[[46]
459:       [--]
460:       [124]]]
461:     '''
462: 
463: 
464: def average(a, axis=None, weights=None, returned=False):
465:     '''
466:     Return the weighted average of array over the given axis.
467: 
468:     Parameters
469:     ----------
470:     a : array_like
471:         Data to be averaged.
472:         Masked entries are not taken into account in the computation.
473:     axis : int, optional
474:         Axis along which the average is computed. The default is to compute
475:         the average of the flattened array.
476:     weights : array_like, optional
477:         The importance that each element has in the computation of the average.
478:         The weights array can either be 1-D (in which case its length must be
479:         the size of `a` along the given axis) or of the same shape as `a`.
480:         If ``weights=None``, then all data in `a` are assumed to have a
481:         weight equal to one.   If `weights` is complex, the imaginary parts
482:         are ignored.
483:     returned : bool, optional
484:         Flag indicating whether a tuple ``(result, sum of weights)``
485:         should be returned as output (True), or just the result (False).
486:         Default is False.
487: 
488:     Returns
489:     -------
490:     average, [sum_of_weights] : (tuple of) scalar or MaskedArray
491:         The average along the specified axis. When returned is `True`,
492:         return a tuple with the average as the first element and the sum
493:         of the weights as the second element. The return type is `np.float64`
494:         if `a` is of integer type and floats smaller than `float64`, or the
495:         input data-type, otherwise. If returned, `sum_of_weights` is always
496:         `float64`.
497: 
498:     Examples
499:     --------
500:     >>> a = np.ma.array([1., 2., 3., 4.], mask=[False, False, True, True])
501:     >>> np.ma.average(a, weights=[3, 1, 0, 0])
502:     1.25
503: 
504:     >>> x = np.ma.arange(6.).reshape(3, 2)
505:     >>> print(x)
506:     [[ 0.  1.]
507:      [ 2.  3.]
508:      [ 4.  5.]]
509:     >>> avg, sumweights = np.ma.average(x, axis=0, weights=[1, 2, 3],
510:     ...                                 returned=True)
511:     >>> print(avg)
512:     [2.66666666667 3.66666666667]
513: 
514:     '''
515:     a = asarray(a)
516:     mask = a.mask
517:     ash = a.shape
518:     if ash == ():
519:         ash = (1,)
520:     if axis is None:
521:         if mask is nomask:
522:             if weights is None:
523:                 n = a.sum(axis=None)
524:                 d = float(a.size)
525:             else:
526:                 w = filled(weights, 0.0).ravel()
527:                 n = umath.add.reduce(a._data.ravel() * w)
528:                 d = umath.add.reduce(w)
529:                 del w
530:         else:
531:             if weights is None:
532:                 n = a.filled(0).sum(axis=None)
533:                 d = float(umath.add.reduce((~mask).ravel()))
534:             else:
535:                 w = array(filled(weights, 0.0), float, mask=mask).ravel()
536:                 n = add.reduce(a.ravel() * w)
537:                 d = add.reduce(w)
538:                 del w
539:     else:
540:         if mask is nomask:
541:             if weights is None:
542:                 d = ash[axis] * 1.0
543:                 n = add.reduce(a._data, axis)
544:             else:
545:                 w = filled(weights, 0.0)
546:                 wsh = w.shape
547:                 if wsh == ():
548:                     wsh = (1,)
549:                 if wsh == ash:
550:                     w = np.array(w, float, copy=0)
551:                     n = add.reduce(a * w, axis)
552:                     d = add.reduce(w, axis)
553:                     del w
554:                 elif wsh == (ash[axis],):
555:                     r = [None] * len(ash)
556:                     r[axis] = slice(None, None, 1)
557:                     w = eval("w[" + repr(tuple(r)) + "] * ones(ash, float)")
558:                     n = add.reduce(a * w, axis)
559:                     d = add.reduce(w, axis, dtype=float)
560:                     del w, r
561:                 else:
562:                     raise ValueError('average: weights wrong shape.')
563:         else:
564:             if weights is None:
565:                 n = add.reduce(a, axis)
566:                 d = umath.add.reduce((~mask), axis=axis, dtype=float)
567:             else:
568:                 w = filled(weights, 0.0)
569:                 wsh = w.shape
570:                 if wsh == ():
571:                     wsh = (1,)
572:                 if wsh == ash:
573:                     w = array(w, dtype=float, mask=mask, copy=0)
574:                     n = add.reduce(a * w, axis)
575:                     d = add.reduce(w, axis, dtype=float)
576:                 elif wsh == (ash[axis],):
577:                     r = [None] * len(ash)
578:                     r[axis] = slice(None, None, 1)
579:                     w = eval("w[" + repr(tuple(r)) +
580:                              "] * masked_array(ones(ash, float), mask)")
581:                     n = add.reduce(a * w, axis)
582:                     d = add.reduce(w, axis, dtype=float)
583:                 else:
584:                     raise ValueError('average: weights wrong shape.')
585:                 del w
586:     if n is masked or d is masked:
587:         return masked
588:     result = n / d
589:     del n
590: 
591:     if isinstance(result, MaskedArray):
592:         if ((axis is None) or (axis == 0 and a.ndim == 1)) and \
593:            (result.mask is nomask):
594:             result = result._data
595:         if returned:
596:             if not isinstance(d, MaskedArray):
597:                 d = masked_array(d)
598:             if isinstance(d, ndarray) and (not d.shape == result.shape):
599:                 d = ones(result.shape, dtype=float) * d
600:     if returned:
601:         return result, d
602:     else:
603:         return result
604: 
605: 
606: def median(a, axis=None, out=None, overwrite_input=False):
607:     '''
608:     Compute the median along the specified axis.
609: 
610:     Returns the median of the array elements.
611: 
612:     Parameters
613:     ----------
614:     a : array_like
615:         Input array or object that can be converted to an array.
616:     axis : int, optional
617:         Axis along which the medians are computed. The default (None) is
618:         to compute the median along a flattened version of the array.
619:     out : ndarray, optional
620:         Alternative output array in which to place the result. It must
621:         have the same shape and buffer length as the expected output
622:         but the type will be cast if necessary.
623:     overwrite_input : bool, optional
624:         If True, then allow use of memory of input array (a) for
625:         calculations. The input array will be modified by the call to
626:         median. This will save memory when you do not need to preserve
627:         the contents of the input array. Treat the input as undefined,
628:         but it will probably be fully or partially sorted. Default is
629:         False. Note that, if `overwrite_input` is True, and the input
630:         is not already an `ndarray`, an error will be raised.
631: 
632:     Returns
633:     -------
634:     median : ndarray
635:         A new array holding the result is returned unless out is
636:         specified, in which case a reference to out is returned.
637:         Return data-type is `float64` for integers and floats smaller than
638:         `float64`, or the input data-type, otherwise.
639: 
640:     See Also
641:     --------
642:     mean
643: 
644:     Notes
645:     -----
646:     Given a vector ``V`` with ``N`` non masked values, the median of ``V``
647:     is the middle value of a sorted copy of ``V`` (``Vs``) - i.e.
648:     ``Vs[(N-1)/2]``, when ``N`` is odd, or ``{Vs[N/2 - 1] + Vs[N/2]}/2``
649:     when ``N`` is even.
650: 
651:     Examples
652:     --------
653:     >>> x = np.ma.array(np.arange(8), mask=[0]*4 + [1]*4)
654:     >>> np.ma.median(x)
655:     1.5
656: 
657:     >>> x = np.ma.array(np.arange(10).reshape(2, 5), mask=[0]*6 + [1]*4)
658:     >>> np.ma.median(x)
659:     2.5
660:     >>> np.ma.median(x, axis=-1, overwrite_input=True)
661:     masked_array(data = [ 2.  5.],
662:                  mask = False,
663:            fill_value = 1e+20)
664: 
665:     '''
666:     if not hasattr(a, 'mask') or np.count_nonzero(a.mask) == 0:
667:         return masked_array(np.median(getdata(a, subok=True), axis=axis,
668:                       out=out, overwrite_input=overwrite_input), copy=False)
669:     if overwrite_input:
670:         if axis is None:
671:             asorted = a.ravel()
672:             asorted.sort()
673:         else:
674:             a.sort(axis=axis)
675:             asorted = a
676:     else:
677:         asorted = sort(a, axis=axis)
678:     if axis is None:
679:         axis = 0
680:     elif axis < 0:
681:         axis += a.ndim
682: 
683:     counts = asorted.shape[axis] - (asorted.mask).sum(axis=axis)
684:     h = counts // 2
685:     # create indexing mesh grid for all but reduced axis
686:     axes_grid = [np.arange(x) for i, x in enumerate(asorted.shape)
687:                  if i != axis]
688:     ind = np.meshgrid(*axes_grid, sparse=True, indexing='ij')
689:     # insert indices of low and high median
690:     ind.insert(axis, h - 1)
691:     low = asorted[ind]
692:     low._sharedmask = False
693:     ind[axis] = h
694:     high = asorted[ind]
695:     # duplicate high if odd number of elements so mean does nothing
696:     odd = counts % 2 == 1
697:     if asorted.ndim == 1:
698:         if odd:
699:             low = high
700:     else:
701:         low[odd] = high[odd]
702: 
703:     if np.issubdtype(asorted.dtype, np.inexact):
704:         # avoid inf / x = masked
705:         s = np.ma.sum([low, high], axis=0, out=out)
706:         np.true_divide(s.data, 2., casting='unsafe', out=s.data)
707:     else:
708:         s = np.ma.mean([low, high], axis=0, out=out)
709:     return s
710: 
711: 
712: def compress_nd(x, axis=None):
713:     '''Supress slices from multiple dimensions which contain masked values.
714: 
715:     Parameters
716:     ----------
717:     x : array_like, MaskedArray
718:         The array to operate on. If not a MaskedArray instance (or if no array
719:         elements are masked, `x` is interpreted as a MaskedArray with `mask`
720:         set to `nomask`.
721:     axis : tuple of ints or int, optional
722:         Which dimensions to supress slices from can be configured with this
723:         parameter.
724:         - If axis is a tuple of ints, those are the axes to supress slices from.
725:         - If axis is an int, then that is the only axis to supress slices from.
726:         - If axis is None, all axis are selected.
727: 
728:     Returns
729:     -------
730:     compress_array : ndarray
731:         The compressed array.
732:     '''
733:     x = asarray(x)
734:     m = getmask(x)
735:     # Set axis to tuple of ints
736:     if isinstance(axis, int):
737:         axis = (axis,)
738:     elif axis is None:
739:         axis = tuple(range(x.ndim))
740:     elif not isinstance(axis, tuple):
741:         raise ValueError('Invalid type for axis argument')
742:     # Check axis input
743:     axis = [ax + x.ndim if ax < 0 else ax for ax in axis]
744:     if not all(0 <= ax < x.ndim for ax in axis):
745:         raise ValueError("'axis' entry is out of bounds")
746:     if len(axis) != len(set(axis)):
747:         raise ValueError("duplicate value in 'axis'")
748:     # Nothing is masked: return x
749:     if m is nomask or not m.any():
750:         return x._data
751:     # All is masked: return empty
752:     if m.all():
753:         return nxarray([])
754:     # Filter elements through boolean indexing
755:     data = x._data
756:     for ax in axis:
757:         axes = tuple(list(range(ax)) + list(range(ax + 1, x.ndim)))
758:         data = data[(slice(None),)*ax + (~m.any(axis=axes),)]
759:     return data
760: 
761: def compress_rowcols(x, axis=None):
762:     '''
763:     Suppress the rows and/or columns of a 2-D array that contain
764:     masked values.
765: 
766:     The suppression behavior is selected with the `axis` parameter.
767: 
768:     - If axis is None, both rows and columns are suppressed.
769:     - If axis is 0, only rows are suppressed.
770:     - If axis is 1 or -1, only columns are suppressed.
771: 
772:     Parameters
773:     ----------
774:     x : array_like, MaskedArray
775:         The array to operate on.  If not a MaskedArray instance (or if no array
776:         elements are masked), `x` is interpreted as a MaskedArray with
777:         `mask` set to `nomask`. Must be a 2D array.
778:     axis : int, optional
779:         Axis along which to perform the operation. Default is None.
780: 
781:     Returns
782:     -------
783:     compressed_array : ndarray
784:         The compressed array.
785: 
786:     Examples
787:     --------
788:     >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],
789:     ...                                                   [1, 0, 0],
790:     ...                                                   [0, 0, 0]])
791:     >>> x
792:     masked_array(data =
793:      [[-- 1 2]
794:      [-- 4 5]
795:      [6 7 8]],
796:                  mask =
797:      [[ True False False]
798:      [ True False False]
799:      [False False False]],
800:            fill_value = 999999)
801: 
802:     >>> np.ma.compress_rowcols(x)
803:     array([[7, 8]])
804:     >>> np.ma.compress_rowcols(x, 0)
805:     array([[6, 7, 8]])
806:     >>> np.ma.compress_rowcols(x, 1)
807:     array([[1, 2],
808:            [4, 5],
809:            [7, 8]])
810: 
811:     '''
812:     if asarray(x).ndim != 2:
813:         raise NotImplementedError("compress_rowcols works for 2D arrays only.")
814:     return compress_nd(x, axis=axis)
815: 
816: 
817: def compress_rows(a):
818:     '''
819:     Suppress whole rows of a 2-D array that contain masked values.
820: 
821:     This is equivalent to ``np.ma.compress_rowcols(a, 0)``, see
822:     `extras.compress_rowcols` for details.
823: 
824:     See Also
825:     --------
826:     extras.compress_rowcols
827: 
828:     '''
829:     a = asarray(a)
830:     if a.ndim != 2:
831:         raise NotImplementedError("compress_rows works for 2D arrays only.")
832:     return compress_rowcols(a, 0)
833: 
834: def compress_cols(a):
835:     '''
836:     Suppress whole columns of a 2-D array that contain masked values.
837: 
838:     This is equivalent to ``np.ma.compress_rowcols(a, 1)``, see
839:     `extras.compress_rowcols` for details.
840: 
841:     See Also
842:     --------
843:     extras.compress_rowcols
844: 
845:     '''
846:     a = asarray(a)
847:     if a.ndim != 2:
848:         raise NotImplementedError("compress_cols works for 2D arrays only.")
849:     return compress_rowcols(a, 1)
850: 
851: def mask_rows(a, axis=None):
852:     '''
853:     Mask rows of a 2D array that contain masked values.
854: 
855:     This function is a shortcut to ``mask_rowcols`` with `axis` equal to 0.
856: 
857:     See Also
858:     --------
859:     mask_rowcols : Mask rows and/or columns of a 2D array.
860:     masked_where : Mask where a condition is met.
861: 
862:     Examples
863:     --------
864:     >>> import numpy.ma as ma
865:     >>> a = np.zeros((3, 3), dtype=np.int)
866:     >>> a[1, 1] = 1
867:     >>> a
868:     array([[0, 0, 0],
869:            [0, 1, 0],
870:            [0, 0, 0]])
871:     >>> a = ma.masked_equal(a, 1)
872:     >>> a
873:     masked_array(data =
874:      [[0 0 0]
875:      [0 -- 0]
876:      [0 0 0]],
877:           mask =
878:      [[False False False]
879:      [False  True False]
880:      [False False False]],
881:           fill_value=999999)
882:     >>> ma.mask_rows(a)
883:     masked_array(data =
884:      [[0 0 0]
885:      [-- -- --]
886:      [0 0 0]],
887:           mask =
888:      [[False False False]
889:      [ True  True  True]
890:      [False False False]],
891:           fill_value=999999)
892: 
893:     '''
894:     return mask_rowcols(a, 0)
895: 
896: def mask_cols(a, axis=None):
897:     '''
898:     Mask columns of a 2D array that contain masked values.
899: 
900:     This function is a shortcut to ``mask_rowcols`` with `axis` equal to 1.
901: 
902:     See Also
903:     --------
904:     mask_rowcols : Mask rows and/or columns of a 2D array.
905:     masked_where : Mask where a condition is met.
906: 
907:     Examples
908:     --------
909:     >>> import numpy.ma as ma
910:     >>> a = np.zeros((3, 3), dtype=np.int)
911:     >>> a[1, 1] = 1
912:     >>> a
913:     array([[0, 0, 0],
914:            [0, 1, 0],
915:            [0, 0, 0]])
916:     >>> a = ma.masked_equal(a, 1)
917:     >>> a
918:     masked_array(data =
919:      [[0 0 0]
920:      [0 -- 0]
921:      [0 0 0]],
922:           mask =
923:      [[False False False]
924:      [False  True False]
925:      [False False False]],
926:           fill_value=999999)
927:     >>> ma.mask_cols(a)
928:     masked_array(data =
929:      [[0 -- 0]
930:      [0 -- 0]
931:      [0 -- 0]],
932:           mask =
933:      [[False  True False]
934:      [False  True False]
935:      [False  True False]],
936:           fill_value=999999)
937: 
938:     '''
939:     return mask_rowcols(a, 1)
940: 
941: 
942: #####--------------------------------------------------------------------------
943: #---- --- arraysetops ---
944: #####--------------------------------------------------------------------------
945: 
946: def ediff1d(arr, to_end=None, to_begin=None):
947:     '''
948:     Compute the differences between consecutive elements of an array.
949: 
950:     This function is the equivalent of `numpy.ediff1d` that takes masked
951:     values into account, see `numpy.ediff1d` for details.
952: 
953:     See Also
954:     --------
955:     numpy.ediff1d : Equivalent function for ndarrays.
956: 
957:     '''
958:     arr = ma.asanyarray(arr).flat
959:     ed = arr[1:] - arr[:-1]
960:     arrays = [ed]
961:     #
962:     if to_begin is not None:
963:         arrays.insert(0, to_begin)
964:     if to_end is not None:
965:         arrays.append(to_end)
966:     #
967:     if len(arrays) != 1:
968:         # We'll save ourselves a copy of a potentially large array in the common
969:         # case where neither to_begin or to_end was given.
970:         ed = hstack(arrays)
971:     #
972:     return ed
973: 
974: 
975: def unique(ar1, return_index=False, return_inverse=False):
976:     '''
977:     Finds the unique elements of an array.
978: 
979:     Masked values are considered the same element (masked). The output array
980:     is always a masked array. See `numpy.unique` for more details.
981: 
982:     See Also
983:     --------
984:     numpy.unique : Equivalent function for ndarrays.
985: 
986:     '''
987:     output = np.unique(ar1,
988:                        return_index=return_index,
989:                        return_inverse=return_inverse)
990:     if isinstance(output, tuple):
991:         output = list(output)
992:         output[0] = output[0].view(MaskedArray)
993:         output = tuple(output)
994:     else:
995:         output = output.view(MaskedArray)
996:     return output
997: 
998: 
999: def intersect1d(ar1, ar2, assume_unique=False):
1000:     '''
1001:     Returns the unique elements common to both arrays.
1002: 
1003:     Masked values are considered equal one to the other.
1004:     The output is always a masked array.
1005: 
1006:     See `numpy.intersect1d` for more details.
1007: 
1008:     See Also
1009:     --------
1010:     numpy.intersect1d : Equivalent function for ndarrays.
1011: 
1012:     Examples
1013:     --------
1014:     >>> x = array([1, 3, 3, 3], mask=[0, 0, 0, 1])
1015:     >>> y = array([3, 1, 1, 1], mask=[0, 0, 0, 1])
1016:     >>> intersect1d(x, y)
1017:     masked_array(data = [1 3 --],
1018:                  mask = [False False  True],
1019:            fill_value = 999999)
1020: 
1021:     '''
1022:     if assume_unique:
1023:         aux = ma.concatenate((ar1, ar2))
1024:     else:
1025:         # Might be faster than unique( intersect1d( ar1, ar2 ) )?
1026:         aux = ma.concatenate((unique(ar1), unique(ar2)))
1027:     aux.sort()
1028:     return aux[:-1][aux[1:] == aux[:-1]]
1029: 
1030: 
1031: def setxor1d(ar1, ar2, assume_unique=False):
1032:     '''
1033:     Set exclusive-or of 1-D arrays with unique elements.
1034: 
1035:     The output is always a masked array. See `numpy.setxor1d` for more details.
1036: 
1037:     See Also
1038:     --------
1039:     numpy.setxor1d : Equivalent function for ndarrays.
1040: 
1041:     '''
1042:     if not assume_unique:
1043:         ar1 = unique(ar1)
1044:         ar2 = unique(ar2)
1045: 
1046:     aux = ma.concatenate((ar1, ar2))
1047:     if aux.size == 0:
1048:         return aux
1049:     aux.sort()
1050:     auxf = aux.filled()
1051: #    flag = ediff1d( aux, to_end = 1, to_begin = 1 ) == 0
1052:     flag = ma.concatenate(([True], (auxf[1:] != auxf[:-1]), [True]))
1053: #    flag2 = ediff1d( flag ) == 0
1054:     flag2 = (flag[1:] == flag[:-1])
1055:     return aux[flag2]
1056: 
1057: def in1d(ar1, ar2, assume_unique=False, invert=False):
1058:     '''
1059:     Test whether each element of an array is also present in a second
1060:     array.
1061: 
1062:     The output is always a masked array. See `numpy.in1d` for more details.
1063: 
1064:     See Also
1065:     --------
1066:     numpy.in1d : Equivalent function for ndarrays.
1067: 
1068:     Notes
1069:     -----
1070:     .. versionadded:: 1.4.0
1071: 
1072:     '''
1073:     if not assume_unique:
1074:         ar1, rev_idx = unique(ar1, return_inverse=True)
1075:         ar2 = unique(ar2)
1076: 
1077:     ar = ma.concatenate((ar1, ar2))
1078:     # We need this to be a stable sort, so always use 'mergesort'
1079:     # here. The values from the first array should always come before
1080:     # the values from the second array.
1081:     order = ar.argsort(kind='mergesort')
1082:     sar = ar[order]
1083:     if invert:
1084:         bool_ar = (sar[1:] != sar[:-1])
1085:     else:
1086:         bool_ar = (sar[1:] == sar[:-1])
1087:     flag = ma.concatenate((bool_ar, [invert]))
1088:     indx = order.argsort(kind='mergesort')[:len(ar1)]
1089: 
1090:     if assume_unique:
1091:         return flag[indx]
1092:     else:
1093:         return flag[indx][rev_idx]
1094: 
1095: 
1096: def union1d(ar1, ar2):
1097:     '''
1098:     Union of two arrays.
1099: 
1100:     The output is always a masked array. See `numpy.union1d` for more details.
1101: 
1102:     See also
1103:     --------
1104:     numpy.union1d : Equivalent function for ndarrays.
1105: 
1106:     '''
1107:     return unique(ma.concatenate((ar1, ar2)))
1108: 
1109: 
1110: def setdiff1d(ar1, ar2, assume_unique=False):
1111:     '''
1112:     Set difference of 1D arrays with unique elements.
1113: 
1114:     The output is always a masked array. See `numpy.setdiff1d` for more
1115:     details.
1116: 
1117:     See Also
1118:     --------
1119:     numpy.setdiff1d : Equivalent function for ndarrays.
1120: 
1121:     Examples
1122:     --------
1123:     >>> x = np.ma.array([1, 2, 3, 4], mask=[0, 1, 0, 1])
1124:     >>> np.ma.setdiff1d(x, [1, 2])
1125:     masked_array(data = [3 --],
1126:                  mask = [False  True],
1127:            fill_value = 999999)
1128: 
1129:     '''
1130:     if assume_unique:
1131:         ar1 = ma.asarray(ar1).ravel()
1132:     else:
1133:         ar1 = unique(ar1)
1134:         ar2 = unique(ar2)
1135:     return ar1[in1d(ar1, ar2, assume_unique=True, invert=True)]
1136: 
1137: 
1138: ###############################################################################
1139: #                                Covariance                                   #
1140: ###############################################################################
1141: 
1142: 
1143: def _covhelper(x, y=None, rowvar=True, allow_masked=True):
1144:     '''
1145:     Private function for the computation of covariance and correlation
1146:     coefficients.
1147: 
1148:     '''
1149:     x = ma.array(x, ndmin=2, copy=True, dtype=float)
1150:     xmask = ma.getmaskarray(x)
1151:     # Quick exit if we can't process masked data
1152:     if not allow_masked and xmask.any():
1153:         raise ValueError("Cannot process masked data.")
1154:     #
1155:     if x.shape[0] == 1:
1156:         rowvar = True
1157:     # Make sure that rowvar is either 0 or 1
1158:     rowvar = int(bool(rowvar))
1159:     axis = 1 - rowvar
1160:     if rowvar:
1161:         tup = (slice(None), None)
1162:     else:
1163:         tup = (None, slice(None))
1164:     #
1165:     if y is None:
1166:         xnotmask = np.logical_not(xmask).astype(int)
1167:     else:
1168:         y = array(y, copy=False, ndmin=2, dtype=float)
1169:         ymask = ma.getmaskarray(y)
1170:         if not allow_masked and ymask.any():
1171:             raise ValueError("Cannot process masked data.")
1172:         if xmask.any() or ymask.any():
1173:             if y.shape == x.shape:
1174:                 # Define some common mask
1175:                 common_mask = np.logical_or(xmask, ymask)
1176:                 if common_mask is not nomask:
1177:                     xmask = x._mask = y._mask = ymask = common_mask
1178:                     x._sharedmask = False
1179:                     y._sharedmask = False
1180:         x = ma.concatenate((x, y), axis)
1181:         xnotmask = np.logical_not(np.concatenate((xmask, ymask), axis)).astype(int)
1182:     x -= x.mean(axis=rowvar)[tup]
1183:     return (x, xnotmask, rowvar)
1184: 
1185: 
1186: def cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None):
1187:     '''
1188:     Estimate the covariance matrix.
1189: 
1190:     Except for the handling of missing data this function does the same as
1191:     `numpy.cov`. For more details and examples, see `numpy.cov`.
1192: 
1193:     By default, masked values are recognized as such. If `x` and `y` have the
1194:     same shape, a common mask is allocated: if ``x[i,j]`` is masked, then
1195:     ``y[i,j]`` will also be masked.
1196:     Setting `allow_masked` to False will raise an exception if values are
1197:     missing in either of the input arrays.
1198: 
1199:     Parameters
1200:     ----------
1201:     x : array_like
1202:         A 1-D or 2-D array containing multiple variables and observations.
1203:         Each row of `x` represents a variable, and each column a single
1204:         observation of all those variables. Also see `rowvar` below.
1205:     y : array_like, optional
1206:         An additional set of variables and observations. `y` has the same
1207:         form as `x`.
1208:     rowvar : bool, optional
1209:         If `rowvar` is True (default), then each row represents a
1210:         variable, with observations in the columns. Otherwise, the relationship
1211:         is transposed: each column represents a variable, while the rows
1212:         contain observations.
1213:     bias : bool, optional
1214:         Default normalization (False) is by ``(N-1)``, where ``N`` is the
1215:         number of observations given (unbiased estimate). If `bias` is True,
1216:         then normalization is by ``N``. This keyword can be overridden by
1217:         the keyword ``ddof`` in numpy versions >= 1.5.
1218:     allow_masked : bool, optional
1219:         If True, masked values are propagated pair-wise: if a value is masked
1220:         in `x`, the corresponding value is masked in `y`.
1221:         If False, raises a `ValueError` exception when some values are missing.
1222:     ddof : {None, int}, optional
1223:         If not ``None`` normalization is by ``(N - ddof)``, where ``N`` is
1224:         the number of observations; this overrides the value implied by
1225:         ``bias``. The default value is ``None``.
1226: 
1227:         .. versionadded:: 1.5
1228: 
1229:     Raises
1230:     ------
1231:     ValueError
1232:         Raised if some values are missing and `allow_masked` is False.
1233: 
1234:     See Also
1235:     --------
1236:     numpy.cov
1237: 
1238:     '''
1239:     # Check inputs
1240:     if ddof is not None and ddof != int(ddof):
1241:         raise ValueError("ddof must be an integer")
1242:     # Set up ddof
1243:     if ddof is None:
1244:         if bias:
1245:             ddof = 0
1246:         else:
1247:             ddof = 1
1248: 
1249:     (x, xnotmask, rowvar) = _covhelper(x, y, rowvar, allow_masked)
1250:     if not rowvar:
1251:         fact = np.dot(xnotmask.T, xnotmask) * 1. - ddof
1252:         result = (dot(x.T, x.conj(), strict=False) / fact).squeeze()
1253:     else:
1254:         fact = np.dot(xnotmask, xnotmask.T) * 1. - ddof
1255:         result = (dot(x, x.T.conj(), strict=False) / fact).squeeze()
1256:     return result
1257: 
1258: 
1259: def corrcoef(x, y=None, rowvar=True, bias=np._NoValue, allow_masked=True,
1260:              ddof=np._NoValue):
1261:     '''
1262:     Return Pearson product-moment correlation coefficients.
1263: 
1264:     Except for the handling of missing data this function does the same as
1265:     `numpy.corrcoef`. For more details and examples, see `numpy.corrcoef`.
1266: 
1267:     Parameters
1268:     ----------
1269:     x : array_like
1270:         A 1-D or 2-D array containing multiple variables and observations.
1271:         Each row of `x` represents a variable, and each column a single
1272:         observation of all those variables. Also see `rowvar` below.
1273:     y : array_like, optional
1274:         An additional set of variables and observations. `y` has the same
1275:         shape as `x`.
1276:     rowvar : bool, optional
1277:         If `rowvar` is True (default), then each row represents a
1278:         variable, with observations in the columns. Otherwise, the relationship
1279:         is transposed: each column represents a variable, while the rows
1280:         contain observations.
1281:     bias : _NoValue, optional
1282:         Has no effect, do not use.
1283: 
1284:         .. deprecated:: 1.10.0
1285:     allow_masked : bool, optional
1286:         If True, masked values are propagated pair-wise: if a value is masked
1287:         in `x`, the corresponding value is masked in `y`.
1288:         If False, raises an exception.  Because `bias` is deprecated, this
1289:         argument needs to be treated as keyword only to avoid a warning.
1290:     ddof : _NoValue, optional
1291:         Has no effect, do not use.
1292: 
1293:         .. deprecated:: 1.10.0
1294: 
1295:     See Also
1296:     --------
1297:     numpy.corrcoef : Equivalent function in top-level NumPy module.
1298:     cov : Estimate the covariance matrix.
1299: 
1300:     Notes
1301:     -----
1302:     This function accepts but discards arguments `bias` and `ddof`.  This is
1303:     for backwards compatibility with previous versions of this function.  These
1304:     arguments had no effect on the return values of the function and can be
1305:     safely ignored in this and previous versions of numpy.
1306:     '''
1307:     msg = 'bias and ddof have no effect and are deprecated'
1308:     if bias is not np._NoValue or ddof is not np._NoValue:
1309:         # 2015-03-15, 1.10
1310:         warnings.warn(msg, DeprecationWarning)
1311:     # Get the data
1312:     (x, xnotmask, rowvar) = _covhelper(x, y, rowvar, allow_masked)
1313:     # Compute the covariance matrix
1314:     if not rowvar:
1315:         fact = np.dot(xnotmask.T, xnotmask) * 1.
1316:         c = (dot(x.T, x.conj(), strict=False) / fact).squeeze()
1317:     else:
1318:         fact = np.dot(xnotmask, xnotmask.T) * 1.
1319:         c = (dot(x, x.T.conj(), strict=False) / fact).squeeze()
1320:     # Check whether we have a scalar
1321:     try:
1322:         diag = ma.diagonal(c)
1323:     except ValueError:
1324:         return 1
1325:     #
1326:     if xnotmask.all():
1327:         _denom = ma.sqrt(ma.multiply.outer(diag, diag))
1328:     else:
1329:         _denom = diagflat(diag)
1330:         _denom._sharedmask = False  # We know return is always a copy
1331:         n = x.shape[1 - rowvar]
1332:         if rowvar:
1333:             for i in range(n - 1):
1334:                 for j in range(i + 1, n):
1335:                     _x = mask_cols(vstack((x[i], x[j]))).var(axis=1)
1336:                     _denom[i, j] = _denom[j, i] = ma.sqrt(ma.multiply.reduce(_x))
1337:         else:
1338:             for i in range(n - 1):
1339:                 for j in range(i + 1, n):
1340:                     _x = mask_cols(
1341:                             vstack((x[:, i], x[:, j]))).var(axis=1)
1342:                     _denom[i, j] = _denom[j, i] = ma.sqrt(ma.multiply.reduce(_x))
1343:     return c / _denom
1344: 
1345: #####--------------------------------------------------------------------------
1346: #---- --- Concatenation helpers ---
1347: #####--------------------------------------------------------------------------
1348: 
1349: class MAxisConcatenator(AxisConcatenator):
1350:     '''
1351:     Translate slice objects to concatenation along an axis.
1352: 
1353:     For documentation on usage, see `mr_class`.
1354: 
1355:     See Also
1356:     --------
1357:     mr_class
1358: 
1359:     '''
1360: 
1361:     def __init__(self, axis=0):
1362:         AxisConcatenator.__init__(self, axis, matrix=False)
1363: 
1364:     def __getitem__(self, key):
1365:         if isinstance(key, str):
1366:             raise MAError("Unavailable for masked array.")
1367:         if not isinstance(key, tuple):
1368:             key = (key,)
1369:         objs = []
1370:         scalars = []
1371:         final_dtypedescr = None
1372:         for k in range(len(key)):
1373:             scalar = False
1374:             if isinstance(key[k], slice):
1375:                 step = key[k].step
1376:                 start = key[k].start
1377:                 stop = key[k].stop
1378:                 if start is None:
1379:                     start = 0
1380:                 if step is None:
1381:                     step = 1
1382:                 if isinstance(step, complex):
1383:                     size = int(abs(step))
1384:                     newobj = np.linspace(start, stop, num=size)
1385:                 else:
1386:                     newobj = np.arange(start, stop, step)
1387:             elif isinstance(key[k], str):
1388:                 if (key[k] in 'rc'):
1389:                     self.matrix = True
1390:                     self.col = (key[k] == 'c')
1391:                     continue
1392:                 try:
1393:                     self.axis = int(key[k])
1394:                     continue
1395:                 except (ValueError, TypeError):
1396:                     raise ValueError("Unknown special directive")
1397:             elif type(key[k]) in np.ScalarType:
1398:                 newobj = asarray([key[k]])
1399:                 scalars.append(k)
1400:                 scalar = True
1401:             else:
1402:                 newobj = key[k]
1403:             objs.append(newobj)
1404:             if isinstance(newobj, ndarray) and not scalar:
1405:                 if final_dtypedescr is None:
1406:                     final_dtypedescr = newobj.dtype
1407:                 elif newobj.dtype > final_dtypedescr:
1408:                     final_dtypedescr = newobj.dtype
1409:         if final_dtypedescr is not None:
1410:             for k in scalars:
1411:                 objs[k] = objs[k].astype(final_dtypedescr)
1412:         res = concatenate(tuple(objs), axis=self.axis)
1413:         return self._retval(res)
1414: 
1415: class mr_class(MAxisConcatenator):
1416:     '''
1417:     Translate slice objects to concatenation along the first axis.
1418: 
1419:     This is the masked array version of `lib.index_tricks.RClass`.
1420: 
1421:     See Also
1422:     --------
1423:     lib.index_tricks.RClass
1424: 
1425:     Examples
1426:     --------
1427:     >>> np.ma.mr_[np.ma.array([1,2,3]), 0, 0, np.ma.array([4,5,6])]
1428:     array([1, 2, 3, 0, 0, 4, 5, 6])
1429: 
1430:     '''
1431:     def __init__(self):
1432:         MAxisConcatenator.__init__(self, 0)
1433: 
1434: mr_ = mr_class()
1435: 
1436: #####--------------------------------------------------------------------------
1437: #---- Find unmasked data ---
1438: #####--------------------------------------------------------------------------
1439: 
1440: def flatnotmasked_edges(a):
1441:     '''
1442:     Find the indices of the first and last unmasked values.
1443: 
1444:     Expects a 1-D `MaskedArray`, returns None if all values are masked.
1445: 
1446:     Parameters
1447:     ----------
1448:     a : array_like
1449:         Input 1-D `MaskedArray`
1450: 
1451:     Returns
1452:     -------
1453:     edges : ndarray or None
1454:         The indices of first and last non-masked value in the array.
1455:         Returns None if all values are masked.
1456: 
1457:     See Also
1458:     --------
1459:     flatnotmasked_contiguous, notmasked_contiguous, notmasked_edges,
1460:     clump_masked, clump_unmasked
1461: 
1462:     Notes
1463:     -----
1464:     Only accepts 1-D arrays.
1465: 
1466:     Examples
1467:     --------
1468:     >>> a = np.ma.arange(10)
1469:     >>> flatnotmasked_edges(a)
1470:     [0,-1]
1471: 
1472:     >>> mask = (a < 3) | (a > 8) | (a == 5)
1473:     >>> a[mask] = np.ma.masked
1474:     >>> np.array(a[~a.mask])
1475:     array([3, 4, 6, 7, 8])
1476: 
1477:     >>> flatnotmasked_edges(a)
1478:     array([3, 8])
1479: 
1480:     >>> a[:] = np.ma.masked
1481:     >>> print(flatnotmasked_edges(ma))
1482:     None
1483: 
1484:     '''
1485:     m = getmask(a)
1486:     if m is nomask or not np.any(m):
1487:         return np.array([0, a.size - 1])
1488:     unmasked = np.flatnonzero(~m)
1489:     if len(unmasked) > 0:
1490:         return unmasked[[0, -1]]
1491:     else:
1492:         return None
1493: 
1494: 
1495: def notmasked_edges(a, axis=None):
1496:     '''
1497:     Find the indices of the first and last unmasked values along an axis.
1498: 
1499:     If all values are masked, return None.  Otherwise, return a list
1500:     of two tuples, corresponding to the indices of the first and last
1501:     unmasked values respectively.
1502: 
1503:     Parameters
1504:     ----------
1505:     a : array_like
1506:         The input array.
1507:     axis : int, optional
1508:         Axis along which to perform the operation.
1509:         If None (default), applies to a flattened version of the array.
1510: 
1511:     Returns
1512:     -------
1513:     edges : ndarray or list
1514:         An array of start and end indexes if there are any masked data in
1515:         the array. If there are no masked data in the array, `edges` is a
1516:         list of the first and last index.
1517: 
1518:     See Also
1519:     --------
1520:     flatnotmasked_contiguous, flatnotmasked_edges, notmasked_contiguous,
1521:     clump_masked, clump_unmasked
1522: 
1523:     Examples
1524:     --------
1525:     >>> a = np.arange(9).reshape((3, 3))
1526:     >>> m = np.zeros_like(a)
1527:     >>> m[1:, 1:] = 1
1528: 
1529:     >>> am = np.ma.array(a, mask=m)
1530:     >>> np.array(am[~am.mask])
1531:     array([0, 1, 2, 3, 6])
1532: 
1533:     >>> np.ma.notmasked_edges(ma)
1534:     array([0, 6])
1535: 
1536:     '''
1537:     a = asarray(a)
1538:     if axis is None or a.ndim == 1:
1539:         return flatnotmasked_edges(a)
1540:     m = getmaskarray(a)
1541:     idx = array(np.indices(a.shape), mask=np.asarray([m] * a.ndim))
1542:     return [tuple([idx[i].min(axis).compressed() for i in range(a.ndim)]),
1543:             tuple([idx[i].max(axis).compressed() for i in range(a.ndim)]), ]
1544: 
1545: 
1546: def flatnotmasked_contiguous(a):
1547:     '''
1548:     Find contiguous unmasked data in a masked array along the given axis.
1549: 
1550:     Parameters
1551:     ----------
1552:     a : narray
1553:         The input array.
1554: 
1555:     Returns
1556:     -------
1557:     slice_list : list
1558:         A sorted sequence of slices (start index, end index).
1559: 
1560:     See Also
1561:     --------
1562:     flatnotmasked_edges, notmasked_contiguous, notmasked_edges,
1563:     clump_masked, clump_unmasked
1564: 
1565:     Notes
1566:     -----
1567:     Only accepts 2-D arrays at most.
1568: 
1569:     Examples
1570:     --------
1571:     >>> a = np.ma.arange(10)
1572:     >>> np.ma.flatnotmasked_contiguous(a)
1573:     slice(0, 10, None)
1574: 
1575:     >>> mask = (a < 3) | (a > 8) | (a == 5)
1576:     >>> a[mask] = np.ma.masked
1577:     >>> np.array(a[~a.mask])
1578:     array([3, 4, 6, 7, 8])
1579: 
1580:     >>> np.ma.flatnotmasked_contiguous(a)
1581:     [slice(3, 5, None), slice(6, 9, None)]
1582:     >>> a[:] = np.ma.masked
1583:     >>> print(np.ma.flatnotmasked_edges(a))
1584:     None
1585: 
1586:     '''
1587:     m = getmask(a)
1588:     if m is nomask:
1589:         return slice(0, a.size, None)
1590:     i = 0
1591:     result = []
1592:     for (k, g) in itertools.groupby(m.ravel()):
1593:         n = len(list(g))
1594:         if not k:
1595:             result.append(slice(i, i + n))
1596:         i += n
1597:     return result or None
1598: 
1599: def notmasked_contiguous(a, axis=None):
1600:     '''
1601:     Find contiguous unmasked data in a masked array along the given axis.
1602: 
1603:     Parameters
1604:     ----------
1605:     a : array_like
1606:         The input array.
1607:     axis : int, optional
1608:         Axis along which to perform the operation.
1609:         If None (default), applies to a flattened version of the array.
1610: 
1611:     Returns
1612:     -------
1613:     endpoints : list
1614:         A list of slices (start and end indexes) of unmasked indexes
1615:         in the array.
1616: 
1617:     See Also
1618:     --------
1619:     flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,
1620:     clump_masked, clump_unmasked
1621: 
1622:     Notes
1623:     -----
1624:     Only accepts 2-D arrays at most.
1625: 
1626:     Examples
1627:     --------
1628:     >>> a = np.arange(9).reshape((3, 3))
1629:     >>> mask = np.zeros_like(a)
1630:     >>> mask[1:, 1:] = 1
1631: 
1632:     >>> ma = np.ma.array(a, mask=mask)
1633:     >>> np.array(ma[~ma.mask])
1634:     array([0, 1, 2, 3, 6])
1635: 
1636:     >>> np.ma.notmasked_contiguous(ma)
1637:     [slice(0, 4, None), slice(6, 7, None)]
1638: 
1639:     '''
1640:     a = asarray(a)
1641:     nd = a.ndim
1642:     if nd > 2:
1643:         raise NotImplementedError("Currently limited to atmost 2D array.")
1644:     if axis is None or nd == 1:
1645:         return flatnotmasked_contiguous(a)
1646:     #
1647:     result = []
1648:     #
1649:     other = (axis + 1) % 2
1650:     idx = [0, 0]
1651:     idx[axis] = slice(None, None)
1652:     #
1653:     for i in range(a.shape[other]):
1654:         idx[other] = i
1655:         result.append(flatnotmasked_contiguous(a[idx]) or None)
1656:     return result
1657: 
1658: 
1659: def _ezclump(mask):
1660:     '''
1661:     Finds the clumps (groups of data with the same values) for a 1D bool array.
1662: 
1663:     Returns a series of slices.
1664:     '''
1665:     if mask.ndim > 1:
1666:         mask = mask.ravel()
1667:     idx = (mask[1:] ^ mask[:-1]).nonzero()
1668:     idx = idx[0] + 1
1669: 
1670:     if mask[0]:
1671:         if len(idx) == 0:
1672:             return [slice(0, mask.size)]
1673: 
1674:         r = [slice(0, idx[0])]
1675:         r.extend((slice(left, right)
1676:                   for left, right in zip(idx[1:-1:2], idx[2::2])))
1677:     else:
1678:         if len(idx) == 0:
1679:             return []
1680: 
1681:         r = [slice(left, right) for left, right in zip(idx[:-1:2], idx[1::2])]
1682: 
1683:     if mask[-1]:
1684:         r.append(slice(idx[-1], mask.size))
1685:     return r
1686: 
1687: 
1688: def clump_unmasked(a):
1689:     '''
1690:     Return list of slices corresponding to the unmasked clumps of a 1-D array.
1691:     (A "clump" is defined as a contiguous region of the array).
1692: 
1693:     Parameters
1694:     ----------
1695:     a : ndarray
1696:         A one-dimensional masked array.
1697: 
1698:     Returns
1699:     -------
1700:     slices : list of slice
1701:         The list of slices, one for each continuous region of unmasked
1702:         elements in `a`.
1703: 
1704:     Notes
1705:     -----
1706:     .. versionadded:: 1.4.0
1707: 
1708:     See Also
1709:     --------
1710:     flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,
1711:     notmasked_contiguous, clump_masked
1712: 
1713:     Examples
1714:     --------
1715:     >>> a = np.ma.masked_array(np.arange(10))
1716:     >>> a[[0, 1, 2, 6, 8, 9]] = np.ma.masked
1717:     >>> np.ma.clump_unmasked(a)
1718:     [slice(3, 6, None), slice(7, 8, None)]
1719: 
1720:     '''
1721:     mask = getattr(a, '_mask', nomask)
1722:     if mask is nomask:
1723:         return [slice(0, a.size)]
1724:     return _ezclump(~mask)
1725: 
1726: 
1727: def clump_masked(a):
1728:     '''
1729:     Returns a list of slices corresponding to the masked clumps of a 1-D array.
1730:     (A "clump" is defined as a contiguous region of the array).
1731: 
1732:     Parameters
1733:     ----------
1734:     a : ndarray
1735:         A one-dimensional masked array.
1736: 
1737:     Returns
1738:     -------
1739:     slices : list of slice
1740:         The list of slices, one for each continuous region of masked elements
1741:         in `a`.
1742: 
1743:     Notes
1744:     -----
1745:     .. versionadded:: 1.4.0
1746: 
1747:     See Also
1748:     --------
1749:     flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,
1750:     notmasked_contiguous, clump_unmasked
1751: 
1752:     Examples
1753:     --------
1754:     >>> a = np.ma.masked_array(np.arange(10))
1755:     >>> a[[0, 1, 2, 6, 8, 9]] = np.ma.masked
1756:     >>> np.ma.clump_masked(a)
1757:     [slice(0, 3, None), slice(6, 7, None), slice(8, 10, None)]
1758: 
1759:     '''
1760:     mask = ma.getmask(a)
1761:     if mask is nomask:
1762:         return []
1763:     return _ezclump(mask)
1764: 
1765: 
1766: ###############################################################################
1767: #                              Polynomial fit                                 #
1768: ###############################################################################
1769: 
1770: 
1771: def vander(x, n=None):
1772:     '''
1773:     Masked values in the input array result in rows of zeros.
1774: 
1775:     '''
1776:     _vander = np.vander(x, n)
1777:     m = getmask(x)
1778:     if m is not nomask:
1779:         _vander[m] = 0
1780:     return _vander
1781: 
1782: vander.__doc__ = ma.doc_note(np.vander.__doc__, vander.__doc__)
1783: 
1784: 
1785: def polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False):
1786:     '''
1787:     Any masked values in x is propagated in y, and vice-versa.
1788: 
1789:     '''
1790:     x = asarray(x)
1791:     y = asarray(y)
1792: 
1793:     m = getmask(x)
1794:     if y.ndim == 1:
1795:         m = mask_or(m, getmask(y))
1796:     elif y.ndim == 2:
1797:         my = getmask(mask_rows(y))
1798:         if my is not nomask:
1799:             m = mask_or(m, my[:, 0])
1800:     else:
1801:         raise TypeError("Expected a 1D or 2D array for y!")
1802: 
1803:     if w is not None:
1804:         w = asarray(w)
1805:         if w.ndim != 1:
1806:             raise TypeError("expected a 1-d array for weights")
1807:         if w.shape[0] != y.shape[0]:
1808:             raise TypeError("expected w and y to have the same length")
1809:         m = mask_or(m, getmask(w))
1810: 
1811:     if m is not nomask:
1812:         not_m = ~m
1813:         if w is not None:
1814:             w = w[not_m]
1815:         return np.polyfit(x[not_m], y[not_m], deg, rcond, full, w, cov)
1816:     else:
1817:         return np.polyfit(x, y, deg, rcond, full, w, cov)
1818: 
1819: polyfit.__doc__ = ma.doc_note(np.polyfit.__doc__, polyfit.__doc__)
1820: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_151388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 10, (-1)), 'str', '\nMasked arrays add-ons.\n\nA collection of utilities for `numpy.ma`.\n\n:author: Pierre Gerard-Marchant\n:contact: pierregm_at_uga_dot_edu\n:version: $Id: extras.py 3473 2007-10-29 15:18:13Z jarrod.millman $\n\n')

# Assigning a List to a Name (line 13):

# Assigning a List to a Name (line 13):
__all__ = ['apply_along_axis', 'apply_over_axes', 'atleast_1d', 'atleast_2d', 'atleast_3d', 'average', 'clump_masked', 'clump_unmasked', 'column_stack', 'compress_cols', 'compress_nd', 'compress_rowcols', 'compress_rows', 'count_masked', 'corrcoef', 'cov', 'diagflat', 'dot', 'dstack', 'ediff1d', 'flatnotmasked_contiguous', 'flatnotmasked_edges', 'hsplit', 'hstack', 'in1d', 'intersect1d', 'mask_cols', 'mask_rowcols', 'mask_rows', 'masked_all', 'masked_all_like', 'median', 'mr_', 'notmasked_contiguous', 'notmasked_edges', 'polyfit', 'row_stack', 'setdiff1d', 'setxor1d', 'unique', 'union1d', 'vander', 'vstack']
module_type_store.set_exportable_members(['apply_along_axis', 'apply_over_axes', 'atleast_1d', 'atleast_2d', 'atleast_3d', 'average', 'clump_masked', 'clump_unmasked', 'column_stack', 'compress_cols', 'compress_nd', 'compress_rowcols', 'compress_rows', 'count_masked', 'corrcoef', 'cov', 'diagflat', 'dot', 'dstack', 'ediff1d', 'flatnotmasked_contiguous', 'flatnotmasked_edges', 'hsplit', 'hstack', 'in1d', 'intersect1d', 'mask_cols', 'mask_rowcols', 'mask_rows', 'masked_all', 'masked_all_like', 'median', 'mr_', 'notmasked_contiguous', 'notmasked_edges', 'polyfit', 'row_stack', 'setdiff1d', 'setxor1d', 'unique', 'union1d', 'vander', 'vstack'])

# Obtaining an instance of the builtin type 'list' (line 13)
list_151389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 13, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 13)
# Adding element type (line 13)
str_151390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 4), 'str', 'apply_along_axis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151390)
# Adding element type (line 13)
str_151391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 24), 'str', 'apply_over_axes')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151391)
# Adding element type (line 13)
str_151392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 43), 'str', 'atleast_1d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151392)
# Adding element type (line 13)
str_151393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 57), 'str', 'atleast_2d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151393)
# Adding element type (line 13)
str_151394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 4), 'str', 'atleast_3d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151394)
# Adding element type (line 13)
str_151395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 18), 'str', 'average')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151395)
# Adding element type (line 13)
str_151396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 29), 'str', 'clump_masked')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151396)
# Adding element type (line 13)
str_151397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 45), 'str', 'clump_unmasked')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151397)
# Adding element type (line 13)
str_151398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 4), 'str', 'column_stack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151398)
# Adding element type (line 13)
str_151399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 20), 'str', 'compress_cols')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151399)
# Adding element type (line 13)
str_151400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 37), 'str', 'compress_nd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151400)
# Adding element type (line 13)
str_151401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 52), 'str', 'compress_rowcols')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151401)
# Adding element type (line 13)
str_151402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 4), 'str', 'compress_rows')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151402)
# Adding element type (line 13)
str_151403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 21), 'str', 'count_masked')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151403)
# Adding element type (line 13)
str_151404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 37), 'str', 'corrcoef')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151404)
# Adding element type (line 13)
str_151405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 49), 'str', 'cov')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151405)
# Adding element type (line 13)
str_151406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 56), 'str', 'diagflat')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151406)
# Adding element type (line 13)
str_151407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 68), 'str', 'dot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151407)
# Adding element type (line 13)
str_151408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 4), 'str', 'dstack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151408)
# Adding element type (line 13)
str_151409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 14), 'str', 'ediff1d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151409)
# Adding element type (line 13)
str_151410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 25), 'str', 'flatnotmasked_contiguous')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151410)
# Adding element type (line 13)
str_151411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 18, 53), 'str', 'flatnotmasked_edges')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151411)
# Adding element type (line 13)
str_151412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 4), 'str', 'hsplit')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151412)
# Adding element type (line 13)
str_151413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 14), 'str', 'hstack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151413)
# Adding element type (line 13)
str_151414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 24), 'str', 'in1d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151414)
# Adding element type (line 13)
str_151415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 32), 'str', 'intersect1d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151415)
# Adding element type (line 13)
str_151416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 47), 'str', 'mask_cols')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151416)
# Adding element type (line 13)
str_151417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 19, 60), 'str', 'mask_rowcols')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151417)
# Adding element type (line 13)
str_151418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 4), 'str', 'mask_rows')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151418)
# Adding element type (line 13)
str_151419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 17), 'str', 'masked_all')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151419)
# Adding element type (line 13)
str_151420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 31), 'str', 'masked_all_like')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151420)
# Adding element type (line 13)
str_151421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 50), 'str', 'median')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151421)
# Adding element type (line 13)
str_151422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 20, 60), 'str', 'mr_')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151422)
# Adding element type (line 13)
str_151423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 4), 'str', 'notmasked_contiguous')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151423)
# Adding element type (line 13)
str_151424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 28), 'str', 'notmasked_edges')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151424)
# Adding element type (line 13)
str_151425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 47), 'str', 'polyfit')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151425)
# Adding element type (line 13)
str_151426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 21, 58), 'str', 'row_stack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151426)
# Adding element type (line 13)
str_151427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 4), 'str', 'setdiff1d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151427)
# Adding element type (line 13)
str_151428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 17), 'str', 'setxor1d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151428)
# Adding element type (line 13)
str_151429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 29), 'str', 'unique')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151429)
# Adding element type (line 13)
str_151430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 39), 'str', 'union1d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151430)
# Adding element type (line 13)
str_151431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 50), 'str', 'vander')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151431)
# Adding element type (line 13)
str_151432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 60), 'str', 'vstack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 13, 10), list_151389, str_151432)

# Assigning a type to the variable '__all__' (line 13)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), '__all__', list_151389)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import itertools' statement (line 25)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import warnings' statement (line 26)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from numpy.ma import ma' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_151433 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.ma')

if (type(import_151433) is not StypyTypeError):

    if (import_151433 != 'pyd_module'):
        __import__(import_151433)
        sys_modules_151434 = sys.modules[import_151433]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.ma', sys_modules_151434.module_type_store, module_type_store, ['core'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_151434, sys_modules_151434.module_type_store, module_type_store)
    else:
        from numpy.ma import core as ma

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.ma', None, module_type_store, ['core'], [ma])

else:
    # Assigning a type to the variable 'numpy.ma' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.ma', import_151433)

# Adding an alias
module_type_store.add_alias('ma', 'core')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from numpy.ma.core import MaskedArray, MAError, add, array, asarray, concatenate, filled, getmask, getmaskarray, make_mask_descr, masked, masked_array, mask_or, nomask, ones, sort, zeros, getdata, get_masked_subclass, dot, mask_rowcols' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_151435 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.ma.core')

if (type(import_151435) is not StypyTypeError):

    if (import_151435 != 'pyd_module'):
        __import__(import_151435)
        sys_modules_151436 = sys.modules[import_151435]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.ma.core', sys_modules_151436.module_type_store, module_type_store, ['MaskedArray', 'MAError', 'add', 'array', 'asarray', 'concatenate', 'filled', 'getmask', 'getmaskarray', 'make_mask_descr', 'masked', 'masked_array', 'mask_or', 'nomask', 'ones', 'sort', 'zeros', 'getdata', 'get_masked_subclass', 'dot', 'mask_rowcols'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_151436, sys_modules_151436.module_type_store, module_type_store)
    else:
        from numpy.ma.core import MaskedArray, MAError, add, array, asarray, concatenate, filled, getmask, getmaskarray, make_mask_descr, masked, masked_array, mask_or, nomask, ones, sort, zeros, getdata, get_masked_subclass, dot, mask_rowcols

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.ma.core', None, module_type_store, ['MaskedArray', 'MAError', 'add', 'array', 'asarray', 'concatenate', 'filled', 'getmask', 'getmaskarray', 'make_mask_descr', 'masked', 'masked_array', 'mask_or', 'nomask', 'ones', 'sort', 'zeros', 'getdata', 'get_masked_subclass', 'dot', 'mask_rowcols'], [MaskedArray, MAError, add, array, asarray, concatenate, filled, getmask, getmaskarray, make_mask_descr, masked, masked_array, mask_or, nomask, ones, sort, zeros, getdata, get_masked_subclass, dot, mask_rowcols])

else:
    # Assigning a type to the variable 'numpy.ma.core' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.ma.core', import_151435)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 36, 0))

# 'import numpy' statement (line 36)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_151437 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'numpy')

if (type(import_151437) is not StypyTypeError):

    if (import_151437 != 'pyd_module'):
        __import__(import_151437)
        sys_modules_151438 = sys.modules[import_151437]
        import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'np', sys_modules_151438.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'numpy', import_151437)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'from numpy import ndarray, nxarray' statement (line 37)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_151439 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'numpy')

if (type(import_151439) is not StypyTypeError):

    if (import_151439 != 'pyd_module'):
        __import__(import_151439)
        sys_modules_151440 = sys.modules[import_151439]
        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'numpy', sys_modules_151440.module_type_store, module_type_store, ['ndarray', 'array'])
        nest_module(stypy.reporting.localization.Localization(__file__, 37, 0), __file__, sys_modules_151440, sys_modules_151440.module_type_store, module_type_store)
    else:
        from numpy import ndarray, array as nxarray

        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'numpy', None, module_type_store, ['ndarray', 'array'], [ndarray, nxarray])

else:
    # Assigning a type to the variable 'numpy' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'numpy', import_151439)

# Adding an alias
module_type_store.add_alias('nxarray', 'array')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'import numpy.core.umath' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_151441 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy.core.umath')

if (type(import_151441) is not StypyTypeError):

    if (import_151441 != 'pyd_module'):
        __import__(import_151441)
        sys_modules_151442 = sys.modules[import_151441]
        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'umath', sys_modules_151442.module_type_store, module_type_store)
    else:
        import numpy.core.umath as umath

        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'umath', numpy.core.umath, module_type_store)

else:
    # Assigning a type to the variable 'numpy.core.umath' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy.core.umath', import_151441)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'from numpy.lib.index_tricks import AxisConcatenator' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/ma/')
import_151443 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy.lib.index_tricks')

if (type(import_151443) is not StypyTypeError):

    if (import_151443 != 'pyd_module'):
        __import__(import_151443)
        sys_modules_151444 = sys.modules[import_151443]
        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy.lib.index_tricks', sys_modules_151444.module_type_store, module_type_store, ['AxisConcatenator'])
        nest_module(stypy.reporting.localization.Localization(__file__, 39, 0), __file__, sys_modules_151444, sys_modules_151444.module_type_store, module_type_store)
    else:
        from numpy.lib.index_tricks import AxisConcatenator

        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy.lib.index_tricks', None, module_type_store, ['AxisConcatenator'], [AxisConcatenator])

else:
    # Assigning a type to the variable 'numpy.lib.index_tricks' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy.lib.index_tricks', import_151443)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/ma/')


@norecursion
def issequence(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'issequence'
    module_type_store = module_type_store.open_function_context('issequence', 42, 0, False)
    
    # Passed parameters checking function
    issequence.stypy_localization = localization
    issequence.stypy_type_of_self = None
    issequence.stypy_type_store = module_type_store
    issequence.stypy_function_name = 'issequence'
    issequence.stypy_param_names_list = ['seq']
    issequence.stypy_varargs_param_name = None
    issequence.stypy_kwargs_param_name = None
    issequence.stypy_call_defaults = defaults
    issequence.stypy_call_varargs = varargs
    issequence.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'issequence', ['seq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'issequence', localization, ['seq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'issequence(...)' code ##################

    str_151445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, (-1)), 'str', '\n    Is seq a sequence (ndarray, list or tuple)?\n\n    ')
    
    
    # Call to isinstance(...): (line 47)
    # Processing the call arguments (line 47)
    # Getting the type of 'seq' (line 47)
    seq_151447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 18), 'seq', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 47)
    tuple_151448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 47)
    # Adding element type (line 47)
    # Getting the type of 'ndarray' (line 47)
    ndarray_151449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 24), 'ndarray', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 47, 24), tuple_151448, ndarray_151449)
    # Adding element type (line 47)
    # Getting the type of 'tuple' (line 47)
    tuple_151450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 33), 'tuple', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 47, 24), tuple_151448, tuple_151450)
    # Adding element type (line 47)
    # Getting the type of 'list' (line 47)
    list_151451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 40), 'list', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 47, 24), tuple_151448, list_151451)
    
    # Processing the call keyword arguments (line 47)
    kwargs_151452 = {}
    # Getting the type of 'isinstance' (line 47)
    isinstance_151446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 47)
    isinstance_call_result_151453 = invoke(stypy.reporting.localization.Localization(__file__, 47, 7), isinstance_151446, *[seq_151447, tuple_151448], **kwargs_151452)
    
    # Testing the type of an if condition (line 47)
    if_condition_151454 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 47, 4), isinstance_call_result_151453)
    # Assigning a type to the variable 'if_condition_151454' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 4), 'if_condition_151454', if_condition_151454)
    # SSA begins for if statement (line 47)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 48)
    True_151455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 15), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 48)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 8), 'stypy_return_type', True_151455)
    # SSA join for if statement (line 47)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 49)
    False_151456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 4), 'stypy_return_type', False_151456)
    
    # ################# End of 'issequence(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'issequence' in the type store
    # Getting the type of 'stypy_return_type' (line 42)
    stypy_return_type_151457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151457)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'issequence'
    return stypy_return_type_151457

# Assigning a type to the variable 'issequence' (line 42)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'issequence', issequence)

@norecursion
def count_masked(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 51)
    None_151458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 27), 'None')
    defaults = [None_151458]
    # Create a new context for function 'count_masked'
    module_type_store = module_type_store.open_function_context('count_masked', 51, 0, False)
    
    # Passed parameters checking function
    count_masked.stypy_localization = localization
    count_masked.stypy_type_of_self = None
    count_masked.stypy_type_store = module_type_store
    count_masked.stypy_function_name = 'count_masked'
    count_masked.stypy_param_names_list = ['arr', 'axis']
    count_masked.stypy_varargs_param_name = None
    count_masked.stypy_kwargs_param_name = None
    count_masked.stypy_call_defaults = defaults
    count_masked.stypy_call_varargs = varargs
    count_masked.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'count_masked', ['arr', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'count_masked', localization, ['arr', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'count_masked(...)' code ##################

    str_151459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, (-1)), 'str', '\n    Count the number of masked elements along the given axis.\n\n    Parameters\n    ----------\n    arr : array_like\n        An array with (possibly) masked elements.\n    axis : int, optional\n        Axis along which to count. If None (default), a flattened\n        version of the array is used.\n\n    Returns\n    -------\n    count : int, ndarray\n        The total number of masked elements (axis=None) or the number\n        of masked elements along each slice of the given axis.\n\n    See Also\n    --------\n    MaskedArray.count : Count non-masked elements.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.arange(9).reshape((3,3))\n    >>> a = ma.array(a)\n    >>> a[1, 0] = ma.masked\n    >>> a[1, 2] = ma.masked\n    >>> a[2, 1] = ma.masked\n    >>> a\n    masked_array(data =\n     [[0 1 2]\n     [-- 4 --]\n     [6 -- 8]],\n          mask =\n     [[False False False]\n     [ True False  True]\n     [False  True False]],\n          fill_value=999999)\n    >>> ma.count_masked(a)\n    3\n\n    When the `axis` keyword is used an array is returned.\n\n    >>> ma.count_masked(a, axis=0)\n    array([1, 1, 1])\n    >>> ma.count_masked(a, axis=1)\n    array([0, 2, 1])\n\n    ')
    
    # Assigning a Call to a Name (line 102):
    
    # Assigning a Call to a Name (line 102):
    
    # Call to getmaskarray(...): (line 102)
    # Processing the call arguments (line 102)
    # Getting the type of 'arr' (line 102)
    arr_151461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 21), 'arr', False)
    # Processing the call keyword arguments (line 102)
    kwargs_151462 = {}
    # Getting the type of 'getmaskarray' (line 102)
    getmaskarray_151460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 8), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 102)
    getmaskarray_call_result_151463 = invoke(stypy.reporting.localization.Localization(__file__, 102, 8), getmaskarray_151460, *[arr_151461], **kwargs_151462)
    
    # Assigning a type to the variable 'm' (line 102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 4), 'm', getmaskarray_call_result_151463)
    
    # Call to sum(...): (line 103)
    # Processing the call arguments (line 103)
    # Getting the type of 'axis' (line 103)
    axis_151466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 17), 'axis', False)
    # Processing the call keyword arguments (line 103)
    kwargs_151467 = {}
    # Getting the type of 'm' (line 103)
    m_151464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 11), 'm', False)
    # Obtaining the member 'sum' of a type (line 103)
    sum_151465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 11), m_151464, 'sum')
    # Calling sum(args, kwargs) (line 103)
    sum_call_result_151468 = invoke(stypy.reporting.localization.Localization(__file__, 103, 11), sum_151465, *[axis_151466], **kwargs_151467)
    
    # Assigning a type to the variable 'stypy_return_type' (line 103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'stypy_return_type', sum_call_result_151468)
    
    # ################# End of 'count_masked(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'count_masked' in the type store
    # Getting the type of 'stypy_return_type' (line 51)
    stypy_return_type_151469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151469)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'count_masked'
    return stypy_return_type_151469

# Assigning a type to the variable 'count_masked' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'count_masked', count_masked)

@norecursion
def masked_all(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'float' (line 105)
    float_151470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 28), 'float')
    defaults = [float_151470]
    # Create a new context for function 'masked_all'
    module_type_store = module_type_store.open_function_context('masked_all', 105, 0, False)
    
    # Passed parameters checking function
    masked_all.stypy_localization = localization
    masked_all.stypy_type_of_self = None
    masked_all.stypy_type_store = module_type_store
    masked_all.stypy_function_name = 'masked_all'
    masked_all.stypy_param_names_list = ['shape', 'dtype']
    masked_all.stypy_varargs_param_name = None
    masked_all.stypy_kwargs_param_name = None
    masked_all.stypy_call_defaults = defaults
    masked_all.stypy_call_varargs = varargs
    masked_all.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_all', ['shape', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_all', localization, ['shape', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_all(...)' code ##################

    str_151471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, (-1)), 'str', "\n    Empty masked array with all elements masked.\n\n    Return an empty masked array of the given shape and dtype, where all the\n    data are masked.\n\n    Parameters\n    ----------\n    shape : tuple\n        Shape of the required MaskedArray.\n    dtype : dtype, optional\n        Data type of the output.\n\n    Returns\n    -------\n    a : MaskedArray\n        A masked array with all data masked.\n\n    See Also\n    --------\n    masked_all_like : Empty masked array modelled on an existing array.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> ma.masked_all((3, 3))\n    masked_array(data =\n     [[-- -- --]\n     [-- -- --]\n     [-- -- --]],\n          mask =\n     [[ True  True  True]\n     [ True  True  True]\n     [ True  True  True]],\n          fill_value=1e+20)\n\n    The `dtype` parameter defines the underlying data type.\n\n    >>> a = ma.masked_all((3, 3))\n    >>> a.dtype\n    dtype('float64')\n    >>> a = ma.masked_all((3, 3), dtype=np.int32)\n    >>> a.dtype\n    dtype('int32')\n\n    ")
    
    # Assigning a Call to a Name (line 152):
    
    # Assigning a Call to a Name (line 152):
    
    # Call to masked_array(...): (line 152)
    # Processing the call arguments (line 152)
    
    # Call to empty(...): (line 152)
    # Processing the call arguments (line 152)
    # Getting the type of 'shape' (line 152)
    shape_151475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 30), 'shape', False)
    # Getting the type of 'dtype' (line 152)
    dtype_151476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 37), 'dtype', False)
    # Processing the call keyword arguments (line 152)
    kwargs_151477 = {}
    # Getting the type of 'np' (line 152)
    np_151473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 21), 'np', False)
    # Obtaining the member 'empty' of a type (line 152)
    empty_151474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 21), np_151473, 'empty')
    # Calling empty(args, kwargs) (line 152)
    empty_call_result_151478 = invoke(stypy.reporting.localization.Localization(__file__, 152, 21), empty_151474, *[shape_151475, dtype_151476], **kwargs_151477)
    
    # Processing the call keyword arguments (line 152)
    
    # Call to ones(...): (line 153)
    # Processing the call arguments (line 153)
    # Getting the type of 'shape' (line 153)
    shape_151481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 34), 'shape', False)
    
    # Call to make_mask_descr(...): (line 153)
    # Processing the call arguments (line 153)
    # Getting the type of 'dtype' (line 153)
    dtype_151483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 57), 'dtype', False)
    # Processing the call keyword arguments (line 153)
    kwargs_151484 = {}
    # Getting the type of 'make_mask_descr' (line 153)
    make_mask_descr_151482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 41), 'make_mask_descr', False)
    # Calling make_mask_descr(args, kwargs) (line 153)
    make_mask_descr_call_result_151485 = invoke(stypy.reporting.localization.Localization(__file__, 153, 41), make_mask_descr_151482, *[dtype_151483], **kwargs_151484)
    
    # Processing the call keyword arguments (line 153)
    kwargs_151486 = {}
    # Getting the type of 'np' (line 153)
    np_151479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 26), 'np', False)
    # Obtaining the member 'ones' of a type (line 153)
    ones_151480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 26), np_151479, 'ones')
    # Calling ones(args, kwargs) (line 153)
    ones_call_result_151487 = invoke(stypy.reporting.localization.Localization(__file__, 153, 26), ones_151480, *[shape_151481, make_mask_descr_call_result_151485], **kwargs_151486)
    
    keyword_151488 = ones_call_result_151487
    kwargs_151489 = {'mask': keyword_151488}
    # Getting the type of 'masked_array' (line 152)
    masked_array_151472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 152)
    masked_array_call_result_151490 = invoke(stypy.reporting.localization.Localization(__file__, 152, 8), masked_array_151472, *[empty_call_result_151478], **kwargs_151489)
    
    # Assigning a type to the variable 'a' (line 152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 4), 'a', masked_array_call_result_151490)
    # Getting the type of 'a' (line 154)
    a_151491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 4), 'stypy_return_type', a_151491)
    
    # ################# End of 'masked_all(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_all' in the type store
    # Getting the type of 'stypy_return_type' (line 105)
    stypy_return_type_151492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151492)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_all'
    return stypy_return_type_151492

# Assigning a type to the variable 'masked_all' (line 105)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 0), 'masked_all', masked_all)

@norecursion
def masked_all_like(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'masked_all_like'
    module_type_store = module_type_store.open_function_context('masked_all_like', 156, 0, False)
    
    # Passed parameters checking function
    masked_all_like.stypy_localization = localization
    masked_all_like.stypy_type_of_self = None
    masked_all_like.stypy_type_store = module_type_store
    masked_all_like.stypy_function_name = 'masked_all_like'
    masked_all_like.stypy_param_names_list = ['arr']
    masked_all_like.stypy_varargs_param_name = None
    masked_all_like.stypy_kwargs_param_name = None
    masked_all_like.stypy_call_defaults = defaults
    masked_all_like.stypy_call_varargs = varargs
    masked_all_like.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'masked_all_like', ['arr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'masked_all_like', localization, ['arr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'masked_all_like(...)' code ##################

    str_151493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, (-1)), 'str', "\n    Empty masked array with the properties of an existing array.\n\n    Return an empty masked array of the same shape and dtype as\n    the array `arr`, where all the data are masked.\n\n    Parameters\n    ----------\n    arr : ndarray\n        An array describing the shape and dtype of the required MaskedArray.\n\n    Returns\n    -------\n    a : MaskedArray\n        A masked array with all data masked.\n\n    Raises\n    ------\n    AttributeError\n        If `arr` doesn't have a shape attribute (i.e. not an ndarray)\n\n    See Also\n    --------\n    masked_all : Empty masked array with all elements masked.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> arr = np.zeros((2, 3), dtype=np.float32)\n    >>> arr\n    array([[ 0.,  0.,  0.],\n           [ 0.,  0.,  0.]], dtype=float32)\n    >>> ma.masked_all_like(arr)\n    masked_array(data =\n     [[-- -- --]\n     [-- -- --]],\n          mask =\n     [[ True  True  True]\n     [ True  True  True]],\n          fill_value=1e+20)\n\n    The dtype of the masked array matches the dtype of `arr`.\n\n    >>> arr.dtype\n    dtype('float32')\n    >>> ma.masked_all_like(arr).dtype\n    dtype('float32')\n\n    ")
    
    # Assigning a Call to a Name (line 206):
    
    # Assigning a Call to a Name (line 206):
    
    # Call to view(...): (line 206)
    # Processing the call arguments (line 206)
    # Getting the type of 'MaskedArray' (line 206)
    MaskedArray_151500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 32), 'MaskedArray', False)
    # Processing the call keyword arguments (line 206)
    kwargs_151501 = {}
    
    # Call to empty_like(...): (line 206)
    # Processing the call arguments (line 206)
    # Getting the type of 'arr' (line 206)
    arr_151496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 22), 'arr', False)
    # Processing the call keyword arguments (line 206)
    kwargs_151497 = {}
    # Getting the type of 'np' (line 206)
    np_151494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 206)
    empty_like_151495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 8), np_151494, 'empty_like')
    # Calling empty_like(args, kwargs) (line 206)
    empty_like_call_result_151498 = invoke(stypy.reporting.localization.Localization(__file__, 206, 8), empty_like_151495, *[arr_151496], **kwargs_151497)
    
    # Obtaining the member 'view' of a type (line 206)
    view_151499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 8), empty_like_call_result_151498, 'view')
    # Calling view(args, kwargs) (line 206)
    view_call_result_151502 = invoke(stypy.reporting.localization.Localization(__file__, 206, 8), view_151499, *[MaskedArray_151500], **kwargs_151501)
    
    # Assigning a type to the variable 'a' (line 206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'a', view_call_result_151502)
    
    # Assigning a Call to a Attribute (line 207):
    
    # Assigning a Call to a Attribute (line 207):
    
    # Call to ones(...): (line 207)
    # Processing the call arguments (line 207)
    # Getting the type of 'a' (line 207)
    a_151505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 22), 'a', False)
    # Obtaining the member 'shape' of a type (line 207)
    shape_151506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 22), a_151505, 'shape')
    # Processing the call keyword arguments (line 207)
    
    # Call to make_mask_descr(...): (line 207)
    # Processing the call arguments (line 207)
    # Getting the type of 'a' (line 207)
    a_151508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 53), 'a', False)
    # Obtaining the member 'dtype' of a type (line 207)
    dtype_151509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 53), a_151508, 'dtype')
    # Processing the call keyword arguments (line 207)
    kwargs_151510 = {}
    # Getting the type of 'make_mask_descr' (line 207)
    make_mask_descr_151507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 37), 'make_mask_descr', False)
    # Calling make_mask_descr(args, kwargs) (line 207)
    make_mask_descr_call_result_151511 = invoke(stypy.reporting.localization.Localization(__file__, 207, 37), make_mask_descr_151507, *[dtype_151509], **kwargs_151510)
    
    keyword_151512 = make_mask_descr_call_result_151511
    kwargs_151513 = {'dtype': keyword_151512}
    # Getting the type of 'np' (line 207)
    np_151503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 14), 'np', False)
    # Obtaining the member 'ones' of a type (line 207)
    ones_151504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 14), np_151503, 'ones')
    # Calling ones(args, kwargs) (line 207)
    ones_call_result_151514 = invoke(stypy.reporting.localization.Localization(__file__, 207, 14), ones_151504, *[shape_151506], **kwargs_151513)
    
    # Getting the type of 'a' (line 207)
    a_151515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 4), 'a')
    # Setting the type of the member '_mask' of a type (line 207)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 4), a_151515, '_mask', ones_call_result_151514)
    # Getting the type of 'a' (line 208)
    a_151516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 4), 'stypy_return_type', a_151516)
    
    # ################# End of 'masked_all_like(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'masked_all_like' in the type store
    # Getting the type of 'stypy_return_type' (line 156)
    stypy_return_type_151517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151517)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'masked_all_like'
    return stypy_return_type_151517

# Assigning a type to the variable 'masked_all_like' (line 156)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 0), 'masked_all_like', masked_all_like)
# Declaration of the '_fromnxfunction' class

class _fromnxfunction:
    str_151518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, (-1)), 'str', '\n    Defines a wrapper to adapt NumPy functions to masked arrays.\n\n\n    An instance of `_fromnxfunction` can be called with the same parameters\n    as the wrapped NumPy function. The docstring of `newfunc` is adapted from\n    the wrapped function as well, see `getdoc`.\n\n    Parameters\n    ----------\n    funcname : str\n        The name of the function to be adapted. The function should be\n        in the NumPy namespace (i.e. ``np.funcname``).\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 231, 4, False)
        # Assigning a type to the variable 'self' (line 232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_fromnxfunction.__init__', ['funcname'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['funcname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 232):
        
        # Assigning a Name to a Attribute (line 232):
        # Getting the type of 'funcname' (line 232)
        funcname_151519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 24), 'funcname')
        # Getting the type of 'self' (line 232)
        self_151520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 8), 'self')
        # Setting the type of the member '__name__' of a type (line 232)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 8), self_151520, '__name__', funcname_151519)
        
        # Assigning a Call to a Attribute (line 233):
        
        # Assigning a Call to a Attribute (line 233):
        
        # Call to getdoc(...): (line 233)
        # Processing the call keyword arguments (line 233)
        kwargs_151523 = {}
        # Getting the type of 'self' (line 233)
        self_151521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 23), 'self', False)
        # Obtaining the member 'getdoc' of a type (line 233)
        getdoc_151522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 23), self_151521, 'getdoc')
        # Calling getdoc(args, kwargs) (line 233)
        getdoc_call_result_151524 = invoke(stypy.reporting.localization.Localization(__file__, 233, 23), getdoc_151522, *[], **kwargs_151523)
        
        # Getting the type of 'self' (line 233)
        self_151525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'self')
        # Setting the type of the member '__doc__' of a type (line 233)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 8), self_151525, '__doc__', getdoc_call_result_151524)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def getdoc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'getdoc'
        module_type_store = module_type_store.open_function_context('getdoc', 235, 4, False)
        # Assigning a type to the variable 'self' (line 236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_localization', localization)
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_type_store', module_type_store)
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_function_name', '_fromnxfunction.getdoc')
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_param_names_list', [])
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_varargs_param_name', None)
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_call_defaults', defaults)
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_call_varargs', varargs)
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _fromnxfunction.getdoc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_fromnxfunction.getdoc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'getdoc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'getdoc(...)' code ##################

        str_151526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, (-1)), 'str', '\n        Retrieve the docstring and signature from the function.\n\n        The ``__doc__`` attribute of the function is used as the docstring for\n        the new masked array version of the function. A note on application\n        of the function to the mask is appended.\n\n        .. warning::\n          If the function docstring already contained a Notes section, the\n          new docstring will have two Notes sections instead of appending a note\n          to the existing section.\n\n        Parameters\n        ----------\n        None\n\n        ')
        
        # Assigning a Call to a Name (line 253):
        
        # Assigning a Call to a Name (line 253):
        
        # Call to getattr(...): (line 253)
        # Processing the call arguments (line 253)
        # Getting the type of 'np' (line 253)
        np_151528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 25), 'np', False)
        # Getting the type of 'self' (line 253)
        self_151529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 29), 'self', False)
        # Obtaining the member '__name__' of a type (line 253)
        name___151530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 29), self_151529, '__name__')
        # Getting the type of 'None' (line 253)
        None_151531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 44), 'None', False)
        # Processing the call keyword arguments (line 253)
        kwargs_151532 = {}
        # Getting the type of 'getattr' (line 253)
        getattr_151527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 17), 'getattr', False)
        # Calling getattr(args, kwargs) (line 253)
        getattr_call_result_151533 = invoke(stypy.reporting.localization.Localization(__file__, 253, 17), getattr_151527, *[np_151528, name___151530, None_151531], **kwargs_151532)
        
        # Assigning a type to the variable 'npfunc' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'npfunc', getattr_call_result_151533)
        
        # Assigning a Call to a Name (line 254):
        
        # Assigning a Call to a Name (line 254):
        
        # Call to getattr(...): (line 254)
        # Processing the call arguments (line 254)
        # Getting the type of 'npfunc' (line 254)
        npfunc_151535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 22), 'npfunc', False)
        str_151536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 30), 'str', '__doc__')
        # Getting the type of 'None' (line 254)
        None_151537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 41), 'None', False)
        # Processing the call keyword arguments (line 254)
        kwargs_151538 = {}
        # Getting the type of 'getattr' (line 254)
        getattr_151534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 14), 'getattr', False)
        # Calling getattr(args, kwargs) (line 254)
        getattr_call_result_151539 = invoke(stypy.reporting.localization.Localization(__file__, 254, 14), getattr_151534, *[npfunc_151535, str_151536, None_151537], **kwargs_151538)
        
        # Assigning a type to the variable 'doc' (line 254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'doc', getattr_call_result_151539)
        
        # Getting the type of 'doc' (line 255)
        doc_151540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 11), 'doc')
        # Testing the type of an if condition (line 255)
        if_condition_151541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 255, 8), doc_151540)
        # Assigning a type to the variable 'if_condition_151541' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'if_condition_151541', if_condition_151541)
        # SSA begins for if statement (line 255)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 256):
        
        # Assigning a BinOp to a Name (line 256):
        # Getting the type of 'self' (line 256)
        self_151542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 18), 'self')
        # Obtaining the member '__name__' of a type (line 256)
        name___151543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 18), self_151542, '__name__')
        
        # Call to get_object_signature(...): (line 256)
        # Processing the call arguments (line 256)
        # Getting the type of 'npfunc' (line 256)
        npfunc_151546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 58), 'npfunc', False)
        # Processing the call keyword arguments (line 256)
        kwargs_151547 = {}
        # Getting the type of 'ma' (line 256)
        ma_151544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 34), 'ma', False)
        # Obtaining the member 'get_object_signature' of a type (line 256)
        get_object_signature_151545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 34), ma_151544, 'get_object_signature')
        # Calling get_object_signature(args, kwargs) (line 256)
        get_object_signature_call_result_151548 = invoke(stypy.reporting.localization.Localization(__file__, 256, 34), get_object_signature_151545, *[npfunc_151546], **kwargs_151547)
        
        # Applying the binary operator '+' (line 256)
        result_add_151549 = python_operator(stypy.reporting.localization.Localization(__file__, 256, 18), '+', name___151543, get_object_signature_call_result_151548)
        
        # Assigning a type to the variable 'sig' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 12), 'sig', result_add_151549)
        
        # Assigning a Str to a Name (line 257):
        
        # Assigning a Str to a Name (line 257):
        str_151550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 21), 'str', 'Notes\n-----\nThe function is applied to both the _data and the _mask, if any.')
        # Assigning a type to the variable 'locdoc' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 12), 'locdoc', str_151550)
        
        # Call to join(...): (line 259)
        # Processing the call arguments (line 259)
        
        # Obtaining an instance of the builtin type 'tuple' (line 259)
        tuple_151553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 259)
        # Adding element type (line 259)
        # Getting the type of 'sig' (line 259)
        sig_151554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 30), 'sig', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 30), tuple_151553, sig_151554)
        # Adding element type (line 259)
        # Getting the type of 'doc' (line 259)
        doc_151555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 35), 'doc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 30), tuple_151553, doc_151555)
        # Adding element type (line 259)
        # Getting the type of 'locdoc' (line 259)
        locdoc_151556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 40), 'locdoc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 30), tuple_151553, locdoc_151556)
        
        # Processing the call keyword arguments (line 259)
        kwargs_151557 = {}
        str_151551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 19), 'str', '\n')
        # Obtaining the member 'join' of a type (line 259)
        join_151552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 19), str_151551, 'join')
        # Calling join(args, kwargs) (line 259)
        join_call_result_151558 = invoke(stypy.reporting.localization.Localization(__file__, 259, 19), join_151552, *[tuple_151553], **kwargs_151557)
        
        # Assigning a type to the variable 'stypy_return_type' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 12), 'stypy_return_type', join_call_result_151558)
        # SSA join for if statement (line 255)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'getdoc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'getdoc' in the type store
        # Getting the type of 'stypy_return_type' (line 235)
        stypy_return_type_151559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151559)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'getdoc'
        return stypy_return_type_151559


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 262, 4, False)
        # Assigning a type to the variable 'self' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_localization', localization)
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_function_name', '_fromnxfunction.__call__')
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'params')
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _fromnxfunction.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_fromnxfunction.__call__', [], 'args', 'params', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Assigning a Call to a Name (line 263):
        
        # Assigning a Call to a Name (line 263):
        
        # Call to getattr(...): (line 263)
        # Processing the call arguments (line 263)
        # Getting the type of 'np' (line 263)
        np_151561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 23), 'np', False)
        # Getting the type of 'self' (line 263)
        self_151562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 27), 'self', False)
        # Obtaining the member '__name__' of a type (line 263)
        name___151563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 27), self_151562, '__name__')
        # Processing the call keyword arguments (line 263)
        kwargs_151564 = {}
        # Getting the type of 'getattr' (line 263)
        getattr_151560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 263)
        getattr_call_result_151565 = invoke(stypy.reporting.localization.Localization(__file__, 263, 15), getattr_151560, *[np_151561, name___151563], **kwargs_151564)
        
        # Assigning a type to the variable 'func' (line 263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'func', getattr_call_result_151565)
        
        
        
        # Call to len(...): (line 264)
        # Processing the call arguments (line 264)
        # Getting the type of 'args' (line 264)
        args_151567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 15), 'args', False)
        # Processing the call keyword arguments (line 264)
        kwargs_151568 = {}
        # Getting the type of 'len' (line 264)
        len_151566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 11), 'len', False)
        # Calling len(args, kwargs) (line 264)
        len_call_result_151569 = invoke(stypy.reporting.localization.Localization(__file__, 264, 11), len_151566, *[args_151567], **kwargs_151568)
        
        int_151570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 24), 'int')
        # Applying the binary operator '==' (line 264)
        result_eq_151571 = python_operator(stypy.reporting.localization.Localization(__file__, 264, 11), '==', len_call_result_151569, int_151570)
        
        # Testing the type of an if condition (line 264)
        if_condition_151572 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 264, 8), result_eq_151571)
        # Assigning a type to the variable 'if_condition_151572' (line 264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 8), 'if_condition_151572', if_condition_151572)
        # SSA begins for if statement (line 264)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 265):
        
        # Assigning a Subscript to a Name (line 265):
        
        # Obtaining the type of the subscript
        int_151573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 265, 21), 'int')
        # Getting the type of 'args' (line 265)
        args_151574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 16), 'args')
        # Obtaining the member '__getitem__' of a type (line 265)
        getitem___151575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 16), args_151574, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 265)
        subscript_call_result_151576 = invoke(stypy.reporting.localization.Localization(__file__, 265, 16), getitem___151575, int_151573)
        
        # Assigning a type to the variable 'x' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 12), 'x', subscript_call_result_151576)
        
        
        # Call to isinstance(...): (line 266)
        # Processing the call arguments (line 266)
        # Getting the type of 'x' (line 266)
        x_151578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 26), 'x', False)
        # Getting the type of 'ndarray' (line 266)
        ndarray_151579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 29), 'ndarray', False)
        # Processing the call keyword arguments (line 266)
        kwargs_151580 = {}
        # Getting the type of 'isinstance' (line 266)
        isinstance_151577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 266)
        isinstance_call_result_151581 = invoke(stypy.reporting.localization.Localization(__file__, 266, 15), isinstance_151577, *[x_151578, ndarray_151579], **kwargs_151580)
        
        # Testing the type of an if condition (line 266)
        if_condition_151582 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 266, 12), isinstance_call_result_151581)
        # Assigning a type to the variable 'if_condition_151582' (line 266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 12), 'if_condition_151582', if_condition_151582)
        # SSA begins for if statement (line 266)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 267):
        
        # Assigning a Call to a Name (line 267):
        
        # Call to func(...): (line 267)
        # Processing the call arguments (line 267)
        
        # Call to __array__(...): (line 267)
        # Processing the call keyword arguments (line 267)
        kwargs_151586 = {}
        # Getting the type of 'x' (line 267)
        x_151584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 26), 'x', False)
        # Obtaining the member '__array__' of a type (line 267)
        array___151585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 26), x_151584, '__array__')
        # Calling __array__(args, kwargs) (line 267)
        array___call_result_151587 = invoke(stypy.reporting.localization.Localization(__file__, 267, 26), array___151585, *[], **kwargs_151586)
        
        # Processing the call keyword arguments (line 267)
        # Getting the type of 'params' (line 267)
        params_151588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 43), 'params', False)
        kwargs_151589 = {'params_151588': params_151588}
        # Getting the type of 'func' (line 267)
        func_151583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 21), 'func', False)
        # Calling func(args, kwargs) (line 267)
        func_call_result_151590 = invoke(stypy.reporting.localization.Localization(__file__, 267, 21), func_151583, *[array___call_result_151587], **kwargs_151589)
        
        # Assigning a type to the variable '_d' (line 267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 16), '_d', func_call_result_151590)
        
        # Assigning a Call to a Name (line 268):
        
        # Assigning a Call to a Name (line 268):
        
        # Call to func(...): (line 268)
        # Processing the call arguments (line 268)
        
        # Call to getmaskarray(...): (line 268)
        # Processing the call arguments (line 268)
        # Getting the type of 'x' (line 268)
        x_151593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 39), 'x', False)
        # Processing the call keyword arguments (line 268)
        kwargs_151594 = {}
        # Getting the type of 'getmaskarray' (line 268)
        getmaskarray_151592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 26), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 268)
        getmaskarray_call_result_151595 = invoke(stypy.reporting.localization.Localization(__file__, 268, 26), getmaskarray_151592, *[x_151593], **kwargs_151594)
        
        # Processing the call keyword arguments (line 268)
        # Getting the type of 'params' (line 268)
        params_151596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 45), 'params', False)
        kwargs_151597 = {'params_151596': params_151596}
        # Getting the type of 'func' (line 268)
        func_151591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 21), 'func', False)
        # Calling func(args, kwargs) (line 268)
        func_call_result_151598 = invoke(stypy.reporting.localization.Localization(__file__, 268, 21), func_151591, *[getmaskarray_call_result_151595], **kwargs_151597)
        
        # Assigning a type to the variable '_m' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 16), '_m', func_call_result_151598)
        
        # Call to masked_array(...): (line 269)
        # Processing the call arguments (line 269)
        # Getting the type of '_d' (line 269)
        _d_151600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 36), '_d', False)
        # Processing the call keyword arguments (line 269)
        # Getting the type of '_m' (line 269)
        _m_151601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 45), '_m', False)
        keyword_151602 = _m_151601
        kwargs_151603 = {'mask': keyword_151602}
        # Getting the type of 'masked_array' (line 269)
        masked_array_151599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 23), 'masked_array', False)
        # Calling masked_array(args, kwargs) (line 269)
        masked_array_call_result_151604 = invoke(stypy.reporting.localization.Localization(__file__, 269, 23), masked_array_151599, *[_d_151600], **kwargs_151603)
        
        # Assigning a type to the variable 'stypy_return_type' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 16), 'stypy_return_type', masked_array_call_result_151604)
        # SSA branch for the else part of an if statement (line 266)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 270)
        # Processing the call arguments (line 270)
        # Getting the type of 'x' (line 270)
        x_151606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 28), 'x', False)
        # Getting the type of 'tuple' (line 270)
        tuple_151607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 31), 'tuple', False)
        # Processing the call keyword arguments (line 270)
        kwargs_151608 = {}
        # Getting the type of 'isinstance' (line 270)
        isinstance_151605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 17), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 270)
        isinstance_call_result_151609 = invoke(stypy.reporting.localization.Localization(__file__, 270, 17), isinstance_151605, *[x_151606, tuple_151607], **kwargs_151608)
        
        
        # Call to isinstance(...): (line 270)
        # Processing the call arguments (line 270)
        # Getting the type of 'x' (line 270)
        x_151611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 52), 'x', False)
        # Getting the type of 'list' (line 270)
        list_151612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 55), 'list', False)
        # Processing the call keyword arguments (line 270)
        kwargs_151613 = {}
        # Getting the type of 'isinstance' (line 270)
        isinstance_151610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 41), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 270)
        isinstance_call_result_151614 = invoke(stypy.reporting.localization.Localization(__file__, 270, 41), isinstance_151610, *[x_151611, list_151612], **kwargs_151613)
        
        # Applying the binary operator 'or' (line 270)
        result_or_keyword_151615 = python_operator(stypy.reporting.localization.Localization(__file__, 270, 17), 'or', isinstance_call_result_151609, isinstance_call_result_151614)
        
        # Testing the type of an if condition (line 270)
        if_condition_151616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 270, 17), result_or_keyword_151615)
        # Assigning a type to the variable 'if_condition_151616' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 17), 'if_condition_151616', if_condition_151616)
        # SSA begins for if statement (line 270)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 271):
        
        # Assigning a Call to a Name (line 271):
        
        # Call to func(...): (line 271)
        # Processing the call arguments (line 271)
        
        # Call to tuple(...): (line 271)
        # Processing the call arguments (line 271)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'x' (line 271)
        x_151624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 56), 'x', False)
        comprehension_151625 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 33), x_151624)
        # Assigning a type to the variable 'a' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 33), 'a', comprehension_151625)
        
        # Call to asarray(...): (line 271)
        # Processing the call arguments (line 271)
        # Getting the type of 'a' (line 271)
        a_151621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 44), 'a', False)
        # Processing the call keyword arguments (line 271)
        kwargs_151622 = {}
        # Getting the type of 'np' (line 271)
        np_151619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 33), 'np', False)
        # Obtaining the member 'asarray' of a type (line 271)
        asarray_151620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 33), np_151619, 'asarray')
        # Calling asarray(args, kwargs) (line 271)
        asarray_call_result_151623 = invoke(stypy.reporting.localization.Localization(__file__, 271, 33), asarray_151620, *[a_151621], **kwargs_151622)
        
        list_151626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 33), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 271, 33), list_151626, asarray_call_result_151623)
        # Processing the call keyword arguments (line 271)
        kwargs_151627 = {}
        # Getting the type of 'tuple' (line 271)
        tuple_151618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 26), 'tuple', False)
        # Calling tuple(args, kwargs) (line 271)
        tuple_call_result_151628 = invoke(stypy.reporting.localization.Localization(__file__, 271, 26), tuple_151618, *[list_151626], **kwargs_151627)
        
        # Processing the call keyword arguments (line 271)
        # Getting the type of 'params' (line 271)
        params_151629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 63), 'params', False)
        kwargs_151630 = {'params_151629': params_151629}
        # Getting the type of 'func' (line 271)
        func_151617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 21), 'func', False)
        # Calling func(args, kwargs) (line 271)
        func_call_result_151631 = invoke(stypy.reporting.localization.Localization(__file__, 271, 21), func_151617, *[tuple_call_result_151628], **kwargs_151630)
        
        # Assigning a type to the variable '_d' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 16), '_d', func_call_result_151631)
        
        # Assigning a Call to a Name (line 272):
        
        # Assigning a Call to a Name (line 272):
        
        # Call to func(...): (line 272)
        # Processing the call arguments (line 272)
        
        # Call to tuple(...): (line 272)
        # Processing the call arguments (line 272)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'x' (line 272)
        x_151638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 58), 'x', False)
        comprehension_151639 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 272, 33), x_151638)
        # Assigning a type to the variable 'a' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 33), 'a', comprehension_151639)
        
        # Call to getmaskarray(...): (line 272)
        # Processing the call arguments (line 272)
        # Getting the type of 'a' (line 272)
        a_151635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 46), 'a', False)
        # Processing the call keyword arguments (line 272)
        kwargs_151636 = {}
        # Getting the type of 'getmaskarray' (line 272)
        getmaskarray_151634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 33), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 272)
        getmaskarray_call_result_151637 = invoke(stypy.reporting.localization.Localization(__file__, 272, 33), getmaskarray_151634, *[a_151635], **kwargs_151636)
        
        list_151640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 33), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 272, 33), list_151640, getmaskarray_call_result_151637)
        # Processing the call keyword arguments (line 272)
        kwargs_151641 = {}
        # Getting the type of 'tuple' (line 272)
        tuple_151633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 26), 'tuple', False)
        # Calling tuple(args, kwargs) (line 272)
        tuple_call_result_151642 = invoke(stypy.reporting.localization.Localization(__file__, 272, 26), tuple_151633, *[list_151640], **kwargs_151641)
        
        # Processing the call keyword arguments (line 272)
        # Getting the type of 'params' (line 272)
        params_151643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 65), 'params', False)
        kwargs_151644 = {'params_151643': params_151643}
        # Getting the type of 'func' (line 272)
        func_151632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 21), 'func', False)
        # Calling func(args, kwargs) (line 272)
        func_call_result_151645 = invoke(stypy.reporting.localization.Localization(__file__, 272, 21), func_151632, *[tuple_call_result_151642], **kwargs_151644)
        
        # Assigning a type to the variable '_m' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 16), '_m', func_call_result_151645)
        
        # Call to masked_array(...): (line 273)
        # Processing the call arguments (line 273)
        # Getting the type of '_d' (line 273)
        _d_151647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 36), '_d', False)
        # Processing the call keyword arguments (line 273)
        # Getting the type of '_m' (line 273)
        _m_151648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 45), '_m', False)
        keyword_151649 = _m_151648
        kwargs_151650 = {'mask': keyword_151649}
        # Getting the type of 'masked_array' (line 273)
        masked_array_151646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 23), 'masked_array', False)
        # Calling masked_array(args, kwargs) (line 273)
        masked_array_call_result_151651 = invoke(stypy.reporting.localization.Localization(__file__, 273, 23), masked_array_151646, *[_d_151647], **kwargs_151650)
        
        # Assigning a type to the variable 'stypy_return_type' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 16), 'stypy_return_type', masked_array_call_result_151651)
        # SSA branch for the else part of an if statement (line 270)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 275):
        
        # Assigning a Call to a Name (line 275):
        
        # Call to func(...): (line 275)
        # Processing the call arguments (line 275)
        
        # Call to asarray(...): (line 275)
        # Processing the call arguments (line 275)
        # Getting the type of 'x' (line 275)
        x_151655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 37), 'x', False)
        # Processing the call keyword arguments (line 275)
        kwargs_151656 = {}
        # Getting the type of 'np' (line 275)
        np_151653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 26), 'np', False)
        # Obtaining the member 'asarray' of a type (line 275)
        asarray_151654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 26), np_151653, 'asarray')
        # Calling asarray(args, kwargs) (line 275)
        asarray_call_result_151657 = invoke(stypy.reporting.localization.Localization(__file__, 275, 26), asarray_151654, *[x_151655], **kwargs_151656)
        
        # Processing the call keyword arguments (line 275)
        # Getting the type of 'params' (line 275)
        params_151658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 43), 'params', False)
        kwargs_151659 = {'params_151658': params_151658}
        # Getting the type of 'func' (line 275)
        func_151652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 21), 'func', False)
        # Calling func(args, kwargs) (line 275)
        func_call_result_151660 = invoke(stypy.reporting.localization.Localization(__file__, 275, 21), func_151652, *[asarray_call_result_151657], **kwargs_151659)
        
        # Assigning a type to the variable '_d' (line 275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 16), '_d', func_call_result_151660)
        
        # Assigning a Call to a Name (line 276):
        
        # Assigning a Call to a Name (line 276):
        
        # Call to func(...): (line 276)
        # Processing the call arguments (line 276)
        
        # Call to getmaskarray(...): (line 276)
        # Processing the call arguments (line 276)
        # Getting the type of 'x' (line 276)
        x_151663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 39), 'x', False)
        # Processing the call keyword arguments (line 276)
        kwargs_151664 = {}
        # Getting the type of 'getmaskarray' (line 276)
        getmaskarray_151662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 26), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 276)
        getmaskarray_call_result_151665 = invoke(stypy.reporting.localization.Localization(__file__, 276, 26), getmaskarray_151662, *[x_151663], **kwargs_151664)
        
        # Processing the call keyword arguments (line 276)
        # Getting the type of 'params' (line 276)
        params_151666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 45), 'params', False)
        kwargs_151667 = {'params_151666': params_151666}
        # Getting the type of 'func' (line 276)
        func_151661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 21), 'func', False)
        # Calling func(args, kwargs) (line 276)
        func_call_result_151668 = invoke(stypy.reporting.localization.Localization(__file__, 276, 21), func_151661, *[getmaskarray_call_result_151665], **kwargs_151667)
        
        # Assigning a type to the variable '_m' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 16), '_m', func_call_result_151668)
        
        # Call to masked_array(...): (line 277)
        # Processing the call arguments (line 277)
        # Getting the type of '_d' (line 277)
        _d_151670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 36), '_d', False)
        # Processing the call keyword arguments (line 277)
        # Getting the type of '_m' (line 277)
        _m_151671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 45), '_m', False)
        keyword_151672 = _m_151671
        kwargs_151673 = {'mask': keyword_151672}
        # Getting the type of 'masked_array' (line 277)
        masked_array_151669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 23), 'masked_array', False)
        # Calling masked_array(args, kwargs) (line 277)
        masked_array_call_result_151674 = invoke(stypy.reporting.localization.Localization(__file__, 277, 23), masked_array_151669, *[_d_151670], **kwargs_151673)
        
        # Assigning a type to the variable 'stypy_return_type' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 16), 'stypy_return_type', masked_array_call_result_151674)
        # SSA join for if statement (line 270)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 266)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 264)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 279):
        
        # Assigning a List to a Name (line 279):
        
        # Obtaining an instance of the builtin type 'list' (line 279)
        list_151675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 279)
        
        # Assigning a type to the variable 'arrays' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 12), 'arrays', list_151675)
        
        # Assigning a Call to a Name (line 280):
        
        # Assigning a Call to a Name (line 280):
        
        # Call to list(...): (line 280)
        # Processing the call arguments (line 280)
        # Getting the type of 'args' (line 280)
        args_151677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 24), 'args', False)
        # Processing the call keyword arguments (line 280)
        kwargs_151678 = {}
        # Getting the type of 'list' (line 280)
        list_151676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 19), 'list', False)
        # Calling list(args, kwargs) (line 280)
        list_call_result_151679 = invoke(stypy.reporting.localization.Localization(__file__, 280, 19), list_151676, *[args_151677], **kwargs_151678)
        
        # Assigning a type to the variable 'args' (line 280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 12), 'args', list_call_result_151679)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 281)
        # Processing the call arguments (line 281)
        # Getting the type of 'args' (line 281)
        args_151681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 22), 'args', False)
        # Processing the call keyword arguments (line 281)
        kwargs_151682 = {}
        # Getting the type of 'len' (line 281)
        len_151680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 18), 'len', False)
        # Calling len(args, kwargs) (line 281)
        len_call_result_151683 = invoke(stypy.reporting.localization.Localization(__file__, 281, 18), len_151680, *[args_151681], **kwargs_151682)
        
        int_151684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 30), 'int')
        # Applying the binary operator '>' (line 281)
        result_gt_151685 = python_operator(stypy.reporting.localization.Localization(__file__, 281, 18), '>', len_call_result_151683, int_151684)
        
        
        # Call to issequence(...): (line 281)
        # Processing the call arguments (line 281)
        
        # Obtaining the type of the subscript
        int_151687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 52), 'int')
        # Getting the type of 'args' (line 281)
        args_151688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 47), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 281)
        getitem___151689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 47), args_151688, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 281)
        subscript_call_result_151690 = invoke(stypy.reporting.localization.Localization(__file__, 281, 47), getitem___151689, int_151687)
        
        # Processing the call keyword arguments (line 281)
        kwargs_151691 = {}
        # Getting the type of 'issequence' (line 281)
        issequence_151686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 36), 'issequence', False)
        # Calling issequence(args, kwargs) (line 281)
        issequence_call_result_151692 = invoke(stypy.reporting.localization.Localization(__file__, 281, 36), issequence_151686, *[subscript_call_result_151690], **kwargs_151691)
        
        # Applying the binary operator 'and' (line 281)
        result_and_keyword_151693 = python_operator(stypy.reporting.localization.Localization(__file__, 281, 18), 'and', result_gt_151685, issequence_call_result_151692)
        
        # Testing the type of an if condition (line 281)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 281, 12), result_and_keyword_151693)
        # SSA begins for while statement (line 281)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Call to append(...): (line 282)
        # Processing the call arguments (line 282)
        
        # Call to pop(...): (line 282)
        # Processing the call arguments (line 282)
        int_151698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, 39), 'int')
        # Processing the call keyword arguments (line 282)
        kwargs_151699 = {}
        # Getting the type of 'args' (line 282)
        args_151696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 30), 'args', False)
        # Obtaining the member 'pop' of a type (line 282)
        pop_151697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 30), args_151696, 'pop')
        # Calling pop(args, kwargs) (line 282)
        pop_call_result_151700 = invoke(stypy.reporting.localization.Localization(__file__, 282, 30), pop_151697, *[int_151698], **kwargs_151699)
        
        # Processing the call keyword arguments (line 282)
        kwargs_151701 = {}
        # Getting the type of 'arrays' (line 282)
        arrays_151694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 16), 'arrays', False)
        # Obtaining the member 'append' of a type (line 282)
        append_151695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 16), arrays_151694, 'append')
        # Calling append(args, kwargs) (line 282)
        append_call_result_151702 = invoke(stypy.reporting.localization.Localization(__file__, 282, 16), append_151695, *[pop_call_result_151700], **kwargs_151701)
        
        # SSA join for while statement (line 281)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 283):
        
        # Assigning a List to a Name (line 283):
        
        # Obtaining an instance of the builtin type 'list' (line 283)
        list_151703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 283, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 283)
        
        # Assigning a type to the variable 'res' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 12), 'res', list_151703)
        
        # Getting the type of 'arrays' (line 284)
        arrays_151704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 21), 'arrays')
        # Testing the type of a for loop iterable (line 284)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 284, 12), arrays_151704)
        # Getting the type of the for loop variable (line 284)
        for_loop_var_151705 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 284, 12), arrays_151704)
        # Assigning a type to the variable 'x' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 12), 'x', for_loop_var_151705)
        # SSA begins for a for statement (line 284)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 285):
        
        # Assigning a Call to a Name (line 285):
        
        # Call to func(...): (line 285)
        # Processing the call arguments (line 285)
        
        # Call to asarray(...): (line 285)
        # Processing the call arguments (line 285)
        # Getting the type of 'x' (line 285)
        x_151709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 37), 'x', False)
        # Processing the call keyword arguments (line 285)
        kwargs_151710 = {}
        # Getting the type of 'np' (line 285)
        np_151707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 26), 'np', False)
        # Obtaining the member 'asarray' of a type (line 285)
        asarray_151708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 26), np_151707, 'asarray')
        # Calling asarray(args, kwargs) (line 285)
        asarray_call_result_151711 = invoke(stypy.reporting.localization.Localization(__file__, 285, 26), asarray_151708, *[x_151709], **kwargs_151710)
        
        # Getting the type of 'args' (line 285)
        args_151712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 42), 'args', False)
        # Processing the call keyword arguments (line 285)
        # Getting the type of 'params' (line 285)
        params_151713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 50), 'params', False)
        kwargs_151714 = {'params_151713': params_151713}
        # Getting the type of 'func' (line 285)
        func_151706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 21), 'func', False)
        # Calling func(args, kwargs) (line 285)
        func_call_result_151715 = invoke(stypy.reporting.localization.Localization(__file__, 285, 21), func_151706, *[asarray_call_result_151711, args_151712], **kwargs_151714)
        
        # Assigning a type to the variable '_d' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 16), '_d', func_call_result_151715)
        
        # Assigning a Call to a Name (line 286):
        
        # Assigning a Call to a Name (line 286):
        
        # Call to func(...): (line 286)
        # Processing the call arguments (line 286)
        
        # Call to getmaskarray(...): (line 286)
        # Processing the call arguments (line 286)
        # Getting the type of 'x' (line 286)
        x_151718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 39), 'x', False)
        # Processing the call keyword arguments (line 286)
        kwargs_151719 = {}
        # Getting the type of 'getmaskarray' (line 286)
        getmaskarray_151717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 26), 'getmaskarray', False)
        # Calling getmaskarray(args, kwargs) (line 286)
        getmaskarray_call_result_151720 = invoke(stypy.reporting.localization.Localization(__file__, 286, 26), getmaskarray_151717, *[x_151718], **kwargs_151719)
        
        # Getting the type of 'args' (line 286)
        args_151721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 44), 'args', False)
        # Processing the call keyword arguments (line 286)
        # Getting the type of 'params' (line 286)
        params_151722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 52), 'params', False)
        kwargs_151723 = {'params_151722': params_151722}
        # Getting the type of 'func' (line 286)
        func_151716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 21), 'func', False)
        # Calling func(args, kwargs) (line 286)
        func_call_result_151724 = invoke(stypy.reporting.localization.Localization(__file__, 286, 21), func_151716, *[getmaskarray_call_result_151720, args_151721], **kwargs_151723)
        
        # Assigning a type to the variable '_m' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 16), '_m', func_call_result_151724)
        
        # Call to append(...): (line 287)
        # Processing the call arguments (line 287)
        
        # Call to masked_array(...): (line 287)
        # Processing the call arguments (line 287)
        # Getting the type of '_d' (line 287)
        _d_151728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 40), '_d', False)
        # Processing the call keyword arguments (line 287)
        # Getting the type of '_m' (line 287)
        _m_151729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 49), '_m', False)
        keyword_151730 = _m_151729
        kwargs_151731 = {'mask': keyword_151730}
        # Getting the type of 'masked_array' (line 287)
        masked_array_151727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 27), 'masked_array', False)
        # Calling masked_array(args, kwargs) (line 287)
        masked_array_call_result_151732 = invoke(stypy.reporting.localization.Localization(__file__, 287, 27), masked_array_151727, *[_d_151728], **kwargs_151731)
        
        # Processing the call keyword arguments (line 287)
        kwargs_151733 = {}
        # Getting the type of 'res' (line 287)
        res_151725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 16), 'res', False)
        # Obtaining the member 'append' of a type (line 287)
        append_151726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 16), res_151725, 'append')
        # Calling append(args, kwargs) (line 287)
        append_call_result_151734 = invoke(stypy.reporting.localization.Localization(__file__, 287, 16), append_151726, *[masked_array_call_result_151732], **kwargs_151733)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'res' (line 288)
        res_151735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 19), 'res')
        # Assigning a type to the variable 'stypy_return_type' (line 288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 12), 'stypy_return_type', res_151735)
        # SSA join for if statement (line 264)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 262)
        stypy_return_type_151736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_151736)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_151736


# Assigning a type to the variable '_fromnxfunction' (line 214)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 0), '_fromnxfunction', _fromnxfunction)

# Assigning a Call to a Name (line 290):

# Assigning a Call to a Name (line 290):

# Call to _fromnxfunction(...): (line 290)
# Processing the call arguments (line 290)
str_151738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 29), 'str', 'atleast_1d')
# Processing the call keyword arguments (line 290)
kwargs_151739 = {}
# Getting the type of '_fromnxfunction' (line 290)
_fromnxfunction_151737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 13), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 290)
_fromnxfunction_call_result_151740 = invoke(stypy.reporting.localization.Localization(__file__, 290, 13), _fromnxfunction_151737, *[str_151738], **kwargs_151739)

# Assigning a type to the variable 'atleast_1d' (line 290)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 0), 'atleast_1d', _fromnxfunction_call_result_151740)

# Assigning a Call to a Name (line 291):

# Assigning a Call to a Name (line 291):

# Call to _fromnxfunction(...): (line 291)
# Processing the call arguments (line 291)
str_151742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 291, 29), 'str', 'atleast_2d')
# Processing the call keyword arguments (line 291)
kwargs_151743 = {}
# Getting the type of '_fromnxfunction' (line 291)
_fromnxfunction_151741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 13), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 291)
_fromnxfunction_call_result_151744 = invoke(stypy.reporting.localization.Localization(__file__, 291, 13), _fromnxfunction_151741, *[str_151742], **kwargs_151743)

# Assigning a type to the variable 'atleast_2d' (line 291)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 0), 'atleast_2d', _fromnxfunction_call_result_151744)

# Assigning a Call to a Name (line 292):

# Assigning a Call to a Name (line 292):

# Call to _fromnxfunction(...): (line 292)
# Processing the call arguments (line 292)
str_151746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 292, 29), 'str', 'atleast_3d')
# Processing the call keyword arguments (line 292)
kwargs_151747 = {}
# Getting the type of '_fromnxfunction' (line 292)
_fromnxfunction_151745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 13), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 292)
_fromnxfunction_call_result_151748 = invoke(stypy.reporting.localization.Localization(__file__, 292, 13), _fromnxfunction_151745, *[str_151746], **kwargs_151747)

# Assigning a type to the variable 'atleast_3d' (line 292)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 0), 'atleast_3d', _fromnxfunction_call_result_151748)

# Multiple assignment of 2 elements.

# Assigning a Call to a Name (line 297):

# Call to _fromnxfunction(...): (line 297)
# Processing the call arguments (line 297)
str_151750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, 37), 'str', 'vstack')
# Processing the call keyword arguments (line 297)
kwargs_151751 = {}
# Getting the type of '_fromnxfunction' (line 297)
_fromnxfunction_151749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 21), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 297)
_fromnxfunction_call_result_151752 = invoke(stypy.reporting.localization.Localization(__file__, 297, 21), _fromnxfunction_151749, *[str_151750], **kwargs_151751)

# Assigning a type to the variable 'row_stack' (line 297)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 9), 'row_stack', _fromnxfunction_call_result_151752)

# Assigning a Name to a Name (line 297):
# Getting the type of 'row_stack' (line 297)
row_stack_151753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 9), 'row_stack')
# Assigning a type to the variable 'vstack' (line 297)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 0), 'vstack', row_stack_151753)

# Assigning a Call to a Name (line 298):

# Assigning a Call to a Name (line 298):

# Call to _fromnxfunction(...): (line 298)
# Processing the call arguments (line 298)
str_151755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 25), 'str', 'hstack')
# Processing the call keyword arguments (line 298)
kwargs_151756 = {}
# Getting the type of '_fromnxfunction' (line 298)
_fromnxfunction_151754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 9), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 298)
_fromnxfunction_call_result_151757 = invoke(stypy.reporting.localization.Localization(__file__, 298, 9), _fromnxfunction_151754, *[str_151755], **kwargs_151756)

# Assigning a type to the variable 'hstack' (line 298)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 0), 'hstack', _fromnxfunction_call_result_151757)

# Assigning a Call to a Name (line 299):

# Assigning a Call to a Name (line 299):

# Call to _fromnxfunction(...): (line 299)
# Processing the call arguments (line 299)
str_151759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 31), 'str', 'column_stack')
# Processing the call keyword arguments (line 299)
kwargs_151760 = {}
# Getting the type of '_fromnxfunction' (line 299)
_fromnxfunction_151758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 15), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 299)
_fromnxfunction_call_result_151761 = invoke(stypy.reporting.localization.Localization(__file__, 299, 15), _fromnxfunction_151758, *[str_151759], **kwargs_151760)

# Assigning a type to the variable 'column_stack' (line 299)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 0), 'column_stack', _fromnxfunction_call_result_151761)

# Assigning a Call to a Name (line 300):

# Assigning a Call to a Name (line 300):

# Call to _fromnxfunction(...): (line 300)
# Processing the call arguments (line 300)
str_151763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 300, 25), 'str', 'dstack')
# Processing the call keyword arguments (line 300)
kwargs_151764 = {}
# Getting the type of '_fromnxfunction' (line 300)
_fromnxfunction_151762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 9), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 300)
_fromnxfunction_call_result_151765 = invoke(stypy.reporting.localization.Localization(__file__, 300, 9), _fromnxfunction_151762, *[str_151763], **kwargs_151764)

# Assigning a type to the variable 'dstack' (line 300)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 0), 'dstack', _fromnxfunction_call_result_151765)

# Assigning a Call to a Name (line 302):

# Assigning a Call to a Name (line 302):

# Call to _fromnxfunction(...): (line 302)
# Processing the call arguments (line 302)
str_151767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 25), 'str', 'hsplit')
# Processing the call keyword arguments (line 302)
kwargs_151768 = {}
# Getting the type of '_fromnxfunction' (line 302)
_fromnxfunction_151766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 9), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 302)
_fromnxfunction_call_result_151769 = invoke(stypy.reporting.localization.Localization(__file__, 302, 9), _fromnxfunction_151766, *[str_151767], **kwargs_151768)

# Assigning a type to the variable 'hsplit' (line 302)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 0), 'hsplit', _fromnxfunction_call_result_151769)

# Assigning a Call to a Name (line 304):

# Assigning a Call to a Name (line 304):

# Call to _fromnxfunction(...): (line 304)
# Processing the call arguments (line 304)
str_151771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 27), 'str', 'diagflat')
# Processing the call keyword arguments (line 304)
kwargs_151772 = {}
# Getting the type of '_fromnxfunction' (line 304)
_fromnxfunction_151770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 11), '_fromnxfunction', False)
# Calling _fromnxfunction(args, kwargs) (line 304)
_fromnxfunction_call_result_151773 = invoke(stypy.reporting.localization.Localization(__file__, 304, 11), _fromnxfunction_151770, *[str_151771], **kwargs_151772)

# Assigning a type to the variable 'diagflat' (line 304)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 0), 'diagflat', _fromnxfunction_call_result_151773)

@norecursion
def flatten_inplace(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'flatten_inplace'
    module_type_store = module_type_store.open_function_context('flatten_inplace', 310, 0, False)
    
    # Passed parameters checking function
    flatten_inplace.stypy_localization = localization
    flatten_inplace.stypy_type_of_self = None
    flatten_inplace.stypy_type_store = module_type_store
    flatten_inplace.stypy_function_name = 'flatten_inplace'
    flatten_inplace.stypy_param_names_list = ['seq']
    flatten_inplace.stypy_varargs_param_name = None
    flatten_inplace.stypy_kwargs_param_name = None
    flatten_inplace.stypy_call_defaults = defaults
    flatten_inplace.stypy_call_varargs = varargs
    flatten_inplace.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'flatten_inplace', ['seq'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'flatten_inplace', localization, ['seq'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'flatten_inplace(...)' code ##################

    str_151774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 4), 'str', 'Flatten a sequence in place.')
    
    # Assigning a Num to a Name (line 312):
    
    # Assigning a Num to a Name (line 312):
    int_151775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 8), 'int')
    # Assigning a type to the variable 'k' (line 312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 4), 'k', int_151775)
    
    
    # Getting the type of 'k' (line 313)
    k_151776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 11), 'k')
    
    # Call to len(...): (line 313)
    # Processing the call arguments (line 313)
    # Getting the type of 'seq' (line 313)
    seq_151778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 20), 'seq', False)
    # Processing the call keyword arguments (line 313)
    kwargs_151779 = {}
    # Getting the type of 'len' (line 313)
    len_151777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 16), 'len', False)
    # Calling len(args, kwargs) (line 313)
    len_call_result_151780 = invoke(stypy.reporting.localization.Localization(__file__, 313, 16), len_151777, *[seq_151778], **kwargs_151779)
    
    # Applying the binary operator '!=' (line 313)
    result_ne_151781 = python_operator(stypy.reporting.localization.Localization(__file__, 313, 11), '!=', k_151776, len_call_result_151780)
    
    # Testing the type of an if condition (line 313)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 313, 4), result_ne_151781)
    # SSA begins for while statement (line 313)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    
    # Call to hasattr(...): (line 314)
    # Processing the call arguments (line 314)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 314)
    k_151783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 26), 'k', False)
    # Getting the type of 'seq' (line 314)
    seq_151784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 22), 'seq', False)
    # Obtaining the member '__getitem__' of a type (line 314)
    getitem___151785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 22), seq_151784, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 314)
    subscript_call_result_151786 = invoke(stypy.reporting.localization.Localization(__file__, 314, 22), getitem___151785, k_151783)
    
    str_151787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 30), 'str', '__iter__')
    # Processing the call keyword arguments (line 314)
    kwargs_151788 = {}
    # Getting the type of 'hasattr' (line 314)
    hasattr_151782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 14), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 314)
    hasattr_call_result_151789 = invoke(stypy.reporting.localization.Localization(__file__, 314, 14), hasattr_151782, *[subscript_call_result_151786, str_151787], **kwargs_151788)
    
    # Testing the type of an if condition (line 314)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 314, 8), hasattr_call_result_151789)
    # SSA begins for while statement (line 314)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Subscript to a Subscript (line 315):
    
    # Assigning a Subscript to a Subscript (line 315):
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 315)
    k_151790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 33), 'k')
    # Getting the type of 'seq' (line 315)
    seq_151791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 29), 'seq')
    # Obtaining the member '__getitem__' of a type (line 315)
    getitem___151792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 29), seq_151791, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 315)
    subscript_call_result_151793 = invoke(stypy.reporting.localization.Localization(__file__, 315, 29), getitem___151792, k_151790)
    
    # Getting the type of 'seq' (line 315)
    seq_151794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 12), 'seq')
    # Getting the type of 'k' (line 315)
    k_151795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 16), 'k')
    # Getting the type of 'k' (line 315)
    k_151796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 19), 'k')
    int_151797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 23), 'int')
    # Applying the binary operator '+' (line 315)
    result_add_151798 = python_operator(stypy.reporting.localization.Localization(__file__, 315, 19), '+', k_151796, int_151797)
    
    slice_151799 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 315, 12), k_151795, result_add_151798, None)
    # Storing an element on a container (line 315)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 12), seq_151794, (slice_151799, subscript_call_result_151793))
    # SSA join for while statement (line 314)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'k' (line 316)
    k_151800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'k')
    int_151801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 13), 'int')
    # Applying the binary operator '+=' (line 316)
    result_iadd_151802 = python_operator(stypy.reporting.localization.Localization(__file__, 316, 8), '+=', k_151800, int_151801)
    # Assigning a type to the variable 'k' (line 316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'k', result_iadd_151802)
    
    # SSA join for while statement (line 313)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'seq' (line 317)
    seq_151803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 11), 'seq')
    # Assigning a type to the variable 'stypy_return_type' (line 317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 4), 'stypy_return_type', seq_151803)
    
    # ################# End of 'flatten_inplace(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'flatten_inplace' in the type store
    # Getting the type of 'stypy_return_type' (line 310)
    stypy_return_type_151804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_151804)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'flatten_inplace'
    return stypy_return_type_151804

# Assigning a type to the variable 'flatten_inplace' (line 310)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 0), 'flatten_inplace', flatten_inplace)

@norecursion
def apply_along_axis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'apply_along_axis'
    module_type_store = module_type_store.open_function_context('apply_along_axis', 320, 0, False)
    
    # Passed parameters checking function
    apply_along_axis.stypy_localization = localization
    apply_along_axis.stypy_type_of_self = None
    apply_along_axis.stypy_type_store = module_type_store
    apply_along_axis.stypy_function_name = 'apply_along_axis'
    apply_along_axis.stypy_param_names_list = ['func1d', 'axis', 'arr']
    apply_along_axis.stypy_varargs_param_name = 'args'
    apply_along_axis.stypy_kwargs_param_name = 'kwargs'
    apply_along_axis.stypy_call_defaults = defaults
    apply_along_axis.stypy_call_varargs = varargs
    apply_along_axis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'apply_along_axis', ['func1d', 'axis', 'arr'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'apply_along_axis', localization, ['func1d', 'axis', 'arr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'apply_along_axis(...)' code ##################

    str_151805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, (-1)), 'str', '\n    (This docstring should be overwritten)\n    ')
    
    # Assigning a Call to a Name (line 324):
    
    # Assigning a Call to a Name (line 324):
    
    # Call to array(...): (line 324)
    # Processing the call arguments (line 324)
    # Getting the type of 'arr' (line 324)
    arr_151807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 16), 'arr', False)
    # Processing the call keyword arguments (line 324)
    # Getting the type of 'False' (line 324)
    False_151808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 26), 'False', False)
    keyword_151809 = False_151808
    # Getting the type of 'True' (line 324)
    True_151810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 39), 'True', False)
    keyword_151811 = True_151810
    kwargs_151812 = {'subok': keyword_151811, 'copy': keyword_151809}
    # Getting the type of 'array' (line 324)
    array_151806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 10), 'array', False)
    # Calling array(args, kwargs) (line 324)
    array_call_result_151813 = invoke(stypy.reporting.localization.Localization(__file__, 324, 10), array_151806, *[arr_151807], **kwargs_151812)
    
    # Assigning a type to the variable 'arr' (line 324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 4), 'arr', array_call_result_151813)
    
    # Assigning a Attribute to a Name (line 325):
    
    # Assigning a Attribute to a Name (line 325):
    # Getting the type of 'arr' (line 325)
    arr_151814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 9), 'arr')
    # Obtaining the member 'ndim' of a type (line 325)
    ndim_151815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 9), arr_151814, 'ndim')
    # Assigning a type to the variable 'nd' (line 325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 4), 'nd', ndim_151815)
    
    
    # Getting the type of 'axis' (line 326)
    axis_151816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 7), 'axis')
    int_151817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 14), 'int')
    # Applying the binary operator '<' (line 326)
    result_lt_151818 = python_operator(stypy.reporting.localization.Localization(__file__, 326, 7), '<', axis_151816, int_151817)
    
    # Testing the type of an if condition (line 326)
    if_condition_151819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 326, 4), result_lt_151818)
    # Assigning a type to the variable 'if_condition_151819' (line 326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'if_condition_151819', if_condition_151819)
    # SSA begins for if statement (line 326)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'axis' (line 327)
    axis_151820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'axis')
    # Getting the type of 'nd' (line 327)
    nd_151821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 16), 'nd')
    # Applying the binary operator '+=' (line 327)
    result_iadd_151822 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 8), '+=', axis_151820, nd_151821)
    # Assigning a type to the variable 'axis' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 8), 'axis', result_iadd_151822)
    
    # SSA join for if statement (line 326)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'axis' (line 328)
    axis_151823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 8), 'axis')
    # Getting the type of 'nd' (line 328)
    nd_151824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 16), 'nd')
    # Applying the binary operator '>=' (line 328)
    result_ge_151825 = python_operator(stypy.reporting.localization.Localization(__file__, 328, 8), '>=', axis_151823, nd_151824)
    
    # Testing the type of an if condition (line 328)
    if_condition_151826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 328, 4), result_ge_151825)
    # Assigning a type to the variable 'if_condition_151826' (line 328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'if_condition_151826', if_condition_151826)
    # SSA begins for if statement (line 328)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 329)
    # Processing the call arguments (line 329)
    str_151828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 25), 'str', 'axis must be less than arr.ndim; axis=%d, rank=%d.')
    
    # Obtaining an instance of the builtin type 'tuple' (line 330)
    tuple_151829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 330)
    # Adding element type (line 330)
    # Getting the type of 'axis' (line 330)
    axis_151830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 15), 'axis', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 330, 15), tuple_151829, axis_151830)
    # Adding element type (line 330)
    # Getting the type of 'nd' (line 330)
    nd_151831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 21), 'nd', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 330, 15), tuple_151829, nd_151831)
    
    # Applying the binary operator '%' (line 329)
    result_mod_151832 = python_operator(stypy.reporting.localization.Localization(__file__, 329, 25), '%', str_151828, tuple_151829)
    
    # Processing the call keyword arguments (line 329)
    kwargs_151833 = {}
    # Getting the type of 'ValueError' (line 329)
    ValueError_151827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 329)
    ValueError_call_result_151834 = invoke(stypy.reporting.localization.Localization(__file__, 329, 14), ValueError_151827, *[result_mod_151832], **kwargs_151833)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 329, 8), ValueError_call_result_151834, 'raise parameter', BaseException)
    # SSA join for if statement (line 328)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 331):
    
    # Assigning a BinOp to a Name (line 331):
    
    # Obtaining an instance of the builtin type 'list' (line 331)
    list_151835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 331)
    # Adding element type (line 331)
    int_151836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 11), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 331, 10), list_151835, int_151836)
    
    # Getting the type of 'nd' (line 331)
    nd_151837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 17), 'nd')
    int_151838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 22), 'int')
    # Applying the binary operator '-' (line 331)
    result_sub_151839 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 17), '-', nd_151837, int_151838)
    
    # Applying the binary operator '*' (line 331)
    result_mul_151840 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 10), '*', list_151835, result_sub_151839)
    
    # Assigning a type to the variable 'ind' (line 331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'ind', result_mul_151840)
    
    # Assigning a Call to a Name (line 332):
    
    # Assigning a Call to a Name (line 332):
    
    # Call to zeros(...): (line 332)
    # Processing the call arguments (line 332)
    # Getting the type of 'nd' (line 332)
    nd_151843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 17), 'nd', False)
    str_151844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 21), 'str', 'O')
    # Processing the call keyword arguments (line 332)
    kwargs_151845 = {}
    # Getting the type of 'np' (line 332)
    np_151841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 332)
    zeros_151842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 8), np_151841, 'zeros')
    # Calling zeros(args, kwargs) (line 332)
    zeros_call_result_151846 = invoke(stypy.reporting.localization.Localization(__file__, 332, 8), zeros_151842, *[nd_151843, str_151844], **kwargs_151845)
    
    # Assigning a type to the variable 'i' (line 332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'i', zeros_call_result_151846)
    
    # Assigning a Call to a Name (line 333):
    
    # Assigning a Call to a Name (line 333):
    
    # Call to list(...): (line 333)
    # Processing the call arguments (line 333)
    
    # Call to range(...): (line 333)
    # Processing the call arguments (line 333)
    # Getting the type of 'nd' (line 333)
    nd_151849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 25), 'nd', False)
    # Processing the call keyword arguments (line 333)
    kwargs_151850 = {}
    # Getting the type of 'range' (line 333)
    range_151848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 19), 'range', False)
    # Calling range(args, kwargs) (line 333)
    range_call_result_151851 = invoke(stypy.reporting.localization.Localization(__file__, 333, 19), range_151848, *[nd_151849], **kwargs_151850)
    
    # Processing the call keyword arguments (line 333)
    kwargs_151852 = {}
    # Getting the type of 'list' (line 333)
    list_151847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 14), 'list', False)
    # Calling list(args, kwargs) (line 333)
    list_call_result_151853 = invoke(stypy.reporting.localization.Localization(__file__, 333, 14), list_151847, *[range_call_result_151851], **kwargs_151852)
    
    # Assigning a type to the variable 'indlist' (line 333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'indlist', list_call_result_151853)
    
    # Call to remove(...): (line 334)
    # Processing the call arguments (line 334)
    # Getting the type of 'axis' (line 334)
    axis_151856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 19), 'axis', False)
    # Processing the call keyword arguments (line 334)
    kwargs_151857 = {}
    # Getting the type of 'indlist' (line 334)
    indlist_151854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'indlist', False)
    # Obtaining the member 'remove' of a type (line 334)
    remove_151855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 4), indlist_151854, 'remove')
    # Calling remove(args, kwargs) (line 334)
    remove_call_result_151858 = invoke(stypy.reporting.localization.Localization(__file__, 334, 4), remove_151855, *[axis_151856], **kwargs_151857)
    
    
    # Assigning a Call to a Subscript (line 335):
    
    # Assigning a Call to a Subscript (line 335):
    
    # Call to slice(...): (line 335)
    # Processing the call arguments (line 335)
    # Getting the type of 'None' (line 335)
    None_151860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 20), 'None', False)
    # Getting the type of 'None' (line 335)
    None_151861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 26), 'None', False)
    # Processing the call keyword arguments (line 335)
    kwargs_151862 = {}
    # Getting the type of 'slice' (line 335)
    slice_151859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 335)
    slice_call_result_151863 = invoke(stypy.reporting.localization.Localization(__file__, 335, 14), slice_151859, *[None_151860, None_151861], **kwargs_151862)
    
    # Getting the type of 'i' (line 335)
    i_151864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 4), 'i')
    # Getting the type of 'axis' (line 335)
    axis_151865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 6), 'axis')
    # Storing an element on a container (line 335)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 335, 4), i_151864, (axis_151865, slice_call_result_151863))
    
    # Assigning a Call to a Name (line 336):
    
    # Assigning a Call to a Name (line 336):
    
    # Call to take(...): (line 336)
    # Processing the call arguments (line 336)
    # Getting the type of 'indlist' (line 336)
    indlist_151873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 42), 'indlist', False)
    # Processing the call keyword arguments (line 336)
    kwargs_151874 = {}
    
    # Call to asarray(...): (line 336)
    # Processing the call arguments (line 336)
    # Getting the type of 'arr' (line 336)
    arr_151868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 26), 'arr', False)
    # Obtaining the member 'shape' of a type (line 336)
    shape_151869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 26), arr_151868, 'shape')
    # Processing the call keyword arguments (line 336)
    kwargs_151870 = {}
    # Getting the type of 'np' (line 336)
    np_151866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 15), 'np', False)
    # Obtaining the member 'asarray' of a type (line 336)
    asarray_151867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 15), np_151866, 'asarray')
    # Calling asarray(args, kwargs) (line 336)
    asarray_call_result_151871 = invoke(stypy.reporting.localization.Localization(__file__, 336, 15), asarray_151867, *[shape_151869], **kwargs_151870)
    
    # Obtaining the member 'take' of a type (line 336)
    take_151872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 15), asarray_call_result_151871, 'take')
    # Calling take(args, kwargs) (line 336)
    take_call_result_151875 = invoke(stypy.reporting.localization.Localization(__file__, 336, 15), take_151872, *[indlist_151873], **kwargs_151874)
    
    # Assigning a type to the variable 'outshape' (line 336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 4), 'outshape', take_call_result_151875)
    
    # Call to put(...): (line 337)
    # Processing the call arguments (line 337)
    # Getting the type of 'indlist' (line 337)
    indlist_151878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 10), 'indlist', False)
    # Getting the type of 'ind' (line 337)
    ind_151879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 19), 'ind', False)
    # Processing the call keyword arguments (line 337)
    kwargs_151880 = {}
    # Getting the type of 'i' (line 337)
    i_151876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'i', False)
    # Obtaining the member 'put' of a type (line 337)
    put_151877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 4), i_151876, 'put')
    # Calling put(args, kwargs) (line 337)
    put_call_result_151881 = invoke(stypy.reporting.localization.Localization(__file__, 337, 4), put_151877, *[indlist_151878, ind_151879], **kwargs_151880)
    
    
    # Assigning a Call to a Name (line 338):
    
    # Assigning a Call to a Name (line 338):
    
    # Call to copy(...): (line 338)
    # Processing the call keyword arguments (line 338)
    kwargs_151884 = {}
    # Getting the type of 'i' (line 338)
    i_151882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'i', False)
    # Obtaining the member 'copy' of a type (line 338)
    copy_151883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 8), i_151882, 'copy')
    # Calling copy(args, kwargs) (line 338)
    copy_call_result_151885 = invoke(stypy.reporting.localization.Localization(__file__, 338, 8), copy_151883, *[], **kwargs_151884)
    
    # Assigning a type to the variable 'j' (line 338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 4), 'j', copy_call_result_151885)
    
    # Assigning a Call to a Name (line 339):
    
    # Assigning a Call to a Name (line 339):
    
    # Call to func1d(...): (line 339)
    # Processing the call arguments (line 339)
    
    # Obtaining the type of the subscript
    
    # Call to tuple(...): (line 339)
    # Processing the call arguments (line 339)
    
    # Call to tolist(...): (line 339)
    # Processing the call keyword arguments (line 339)
    kwargs_151890 = {}
    # Getting the type of 'i' (line 339)
    i_151888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 27), 'i', False)
    # Obtaining the member 'tolist' of a type (line 339)
    tolist_151889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 27), i_151888, 'tolist')
    # Calling tolist(args, kwargs) (line 339)
    tolist_call_result_151891 = invoke(stypy.reporting.localization.Localization(__file__, 339, 27), tolist_151889, *[], **kwargs_151890)
    
    # Processing the call keyword arguments (line 339)
    kwargs_151892 = {}
    # Getting the type of 'tuple' (line 339)
    tuple_151887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 21), 'tuple', False)
    # Calling tuple(args, kwargs) (line 339)
    tuple_call_result_151893 = invoke(stypy.reporting.localization.Localization(__file__, 339, 21), tuple_151887, *[tolist_call_result_151891], **kwargs_151892)
    
    # Getting the type of 'arr' (line 339)
    arr_151894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 17), 'arr', False)
    # Obtaining the member '__getitem__' of a type (line 339)
    getitem___151895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 17), arr_151894, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 339)
    subscript_call_result_151896 = invoke(stypy.reporting.localization.Localization(__file__, 339, 17), getitem___151895, tuple_call_result_151893)
    
    # Getting the type of 'args' (line 339)
    args_151897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 42), 'args', False)
    # Processing the call keyword arguments (line 339)
    # Getting the type of 'kwargs' (line 339)
    kwargs_151898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 50), 'kwargs', False)
    kwargs_151899 = {'kwargs_151898': kwargs_151898}
    # Getting the type of 'func1d' (line 339)
    func1d_151886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 10), 'func1d', False)
    # Calling func1d(args, kwargs) (line 339)
    func1d_call_result_151900 = invoke(stypy.reporting.localization.Localization(__file__, 339, 10), func1d_151886, *[subscript_call_result_151896, args_151897], **kwargs_151899)
    
    # Assigning a type to the variable 'res' (line 339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 4), 'res', func1d_call_result_151900)
    
    # Assigning a Call to a Name (line 341):
    
    # Assigning a Call to a Name (line 341):
    
    # Call to isscalar(...): (line 341)
    # Processing the call arguments (line 341)
    # Getting the type of 'res' (line 341)
    res_151903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 27), 'res', False)
    # Processing the call keyword arguments (line 341)
    kwargs_151904 = {}
    # Getting the type of 'np' (line 341)
    np_151901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 15), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 341)
    isscalar_151902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 15), np_151901, 'isscalar')
    # Calling isscalar(args, kwargs) (line 341)
    isscalar_call_result_151905 = invoke(stypy.reporting.localization.Localization(__file__, 341, 15), isscalar_151902, *[res_151903], **kwargs_151904)
    
    # Assigning a type to the variable 'asscalar' (line 341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 4), 'asscalar', isscalar_call_result_151905)
    
    
    # Getting the type of 'asscalar' (line 342)
    asscalar_151906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 11), 'asscalar')
    # Applying the 'not' unary operator (line 342)
    result_not__151907 = python_operator(stypy.reporting.localization.Localization(__file__, 342, 7), 'not', asscalar_151906)
    
    # Testing the type of an if condition (line 342)
    if_condition_151908 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 342, 4), result_not__151907)
    # Assigning a type to the variable 'if_condition_151908' (line 342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 4), 'if_condition_151908', if_condition_151908)
    # SSA begins for if statement (line 342)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 343)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to len(...): (line 344)
    # Processing the call arguments (line 344)
    # Getting the type of 'res' (line 344)
    res_151910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 16), 'res', False)
    # Processing the call keyword arguments (line 344)
    kwargs_151911 = {}
    # Getting the type of 'len' (line 344)
    len_151909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 12), 'len', False)
    # Calling len(args, kwargs) (line 344)
    len_call_result_151912 = invoke(stypy.reporting.localization.Localization(__file__, 344, 12), len_151909, *[res_151910], **kwargs_151911)
    
    # SSA branch for the except part of a try statement (line 343)
    # SSA branch for the except 'TypeError' branch of a try statement (line 343)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 346):
    
    # Assigning a Name to a Name (line 346):
    # Getting the type of 'True' (line 346)
    True_151913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 23), 'True')
    # Assigning a type to the variable 'asscalar' (line 346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 12), 'asscalar', True_151913)
    # SSA join for try-except statement (line 343)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 342)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 350):
    
    # Assigning a List to a Name (line 350):
    
    # Obtaining an instance of the builtin type 'list' (line 350)
    list_151914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 350)
    
    # Assigning a type to the variable 'dtypes' (line 350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 4), 'dtypes', list_151914)
    
    # Getting the type of 'asscalar' (line 351)
    asscalar_151915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 7), 'asscalar')
    # Testing the type of an if condition (line 351)
    if_condition_151916 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 351, 4), asscalar_151915)
    # Assigning a type to the variable 'if_condition_151916' (line 351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'if_condition_151916', if_condition_151916)
    # SSA begins for if statement (line 351)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 352)
    # Processing the call arguments (line 352)
    
    # Call to asarray(...): (line 352)
    # Processing the call arguments (line 352)
    # Getting the type of 'res' (line 352)
    res_151921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 33), 'res', False)
    # Processing the call keyword arguments (line 352)
    kwargs_151922 = {}
    # Getting the type of 'np' (line 352)
    np_151919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 22), 'np', False)
    # Obtaining the member 'asarray' of a type (line 352)
    asarray_151920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 22), np_151919, 'asarray')
    # Calling asarray(args, kwargs) (line 352)
    asarray_call_result_151923 = invoke(stypy.reporting.localization.Localization(__file__, 352, 22), asarray_151920, *[res_151921], **kwargs_151922)
    
    # Obtaining the member 'dtype' of a type (line 352)
    dtype_151924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 22), asarray_call_result_151923, 'dtype')
    # Processing the call keyword arguments (line 352)
    kwargs_151925 = {}
    # Getting the type of 'dtypes' (line 352)
    dtypes_151917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'dtypes', False)
    # Obtaining the member 'append' of a type (line 352)
    append_151918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), dtypes_151917, 'append')
    # Calling append(args, kwargs) (line 352)
    append_call_result_151926 = invoke(stypy.reporting.localization.Localization(__file__, 352, 8), append_151918, *[dtype_151924], **kwargs_151925)
    
    
    # Assigning a Call to a Name (line 353):
    
    # Assigning a Call to a Name (line 353):
    
    # Call to zeros(...): (line 353)
    # Processing the call arguments (line 353)
    # Getting the type of 'outshape' (line 353)
    outshape_151928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 23), 'outshape', False)
    # Getting the type of 'object' (line 353)
    object_151929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 33), 'object', False)
    # Processing the call keyword arguments (line 353)
    kwargs_151930 = {}
    # Getting the type of 'zeros' (line 353)
    zeros_151927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 17), 'zeros', False)
    # Calling zeros(args, kwargs) (line 353)
    zeros_call_result_151931 = invoke(stypy.reporting.localization.Localization(__file__, 353, 17), zeros_151927, *[outshape_151928, object_151929], **kwargs_151930)
    
    # Assigning a type to the variable 'outarr' (line 353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 8), 'outarr', zeros_call_result_151931)
    
    # Assigning a Name to a Subscript (line 354):
    
    # Assigning a Name to a Subscript (line 354):
    # Getting the type of 'res' (line 354)
    res_151932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 29), 'res')
    # Getting the type of 'outarr' (line 354)
    outarr_151933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'outarr')
    
    # Call to tuple(...): (line 354)
    # Processing the call arguments (line 354)
    # Getting the type of 'ind' (line 354)
    ind_151935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 21), 'ind', False)
    # Processing the call keyword arguments (line 354)
    kwargs_151936 = {}
    # Getting the type of 'tuple' (line 354)
    tuple_151934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 15), 'tuple', False)
    # Calling tuple(args, kwargs) (line 354)
    tuple_call_result_151937 = invoke(stypy.reporting.localization.Localization(__file__, 354, 15), tuple_151934, *[ind_151935], **kwargs_151936)
    
    # Storing an element on a container (line 354)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 354, 8), outarr_151933, (tuple_call_result_151937, res_151932))
    
    # Assigning a Call to a Name (line 355):
    
    # Assigning a Call to a Name (line 355):
    
    # Call to product(...): (line 355)
    # Processing the call arguments (line 355)
    # Getting the type of 'outshape' (line 355)
    outshape_151940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 26), 'outshape', False)
    # Processing the call keyword arguments (line 355)
    kwargs_151941 = {}
    # Getting the type of 'np' (line 355)
    np_151938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 15), 'np', False)
    # Obtaining the member 'product' of a type (line 355)
    product_151939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 15), np_151938, 'product')
    # Calling product(args, kwargs) (line 355)
    product_call_result_151942 = invoke(stypy.reporting.localization.Localization(__file__, 355, 15), product_151939, *[outshape_151940], **kwargs_151941)
    
    # Assigning a type to the variable 'Ntot' (line 355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'Ntot', product_call_result_151942)
    
    # Assigning a Num to a Name (line 356):
    
    # Assigning a Num to a Name (line 356):
    int_151943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 12), 'int')
    # Assigning a type to the variable 'k' (line 356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'k', int_151943)
    
    
    # Getting the type of 'k' (line 357)
    k_151944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 14), 'k')
    # Getting the type of 'Ntot' (line 357)
    Ntot_151945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 18), 'Ntot')
    # Applying the binary operator '<' (line 357)
    result_lt_151946 = python_operator(stypy.reporting.localization.Localization(__file__, 357, 14), '<', k_151944, Ntot_151945)
    
    # Testing the type of an if condition (line 357)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 357, 8), result_lt_151946)
    # SSA begins for while statement (line 357)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'ind' (line 359)
    ind_151947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'ind')
    
    # Obtaining the type of the subscript
    int_151948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 16), 'int')
    # Getting the type of 'ind' (line 359)
    ind_151949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'ind')
    # Obtaining the member '__getitem__' of a type (line 359)
    getitem___151950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 12), ind_151949, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 359)
    subscript_call_result_151951 = invoke(stypy.reporting.localization.Localization(__file__, 359, 12), getitem___151950, int_151948)
    
    int_151952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 23), 'int')
    # Applying the binary operator '+=' (line 359)
    result_iadd_151953 = python_operator(stypy.reporting.localization.Localization(__file__, 359, 12), '+=', subscript_call_result_151951, int_151952)
    # Getting the type of 'ind' (line 359)
    ind_151954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'ind')
    int_151955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 16), 'int')
    # Storing an element on a container (line 359)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 12), ind_151954, (int_151955, result_iadd_151953))
    
    
    # Assigning a Num to a Name (line 360):
    
    # Assigning a Num to a Name (line 360):
    int_151956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 16), 'int')
    # Assigning a type to the variable 'n' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 12), 'n', int_151956)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 361)
    n_151957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 23), 'n')
    # Getting the type of 'ind' (line 361)
    ind_151958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 19), 'ind')
    # Obtaining the member '__getitem__' of a type (line 361)
    getitem___151959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 19), ind_151958, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 361)
    subscript_call_result_151960 = invoke(stypy.reporting.localization.Localization(__file__, 361, 19), getitem___151959, n_151957)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 361)
    n_151961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 38), 'n')
    # Getting the type of 'outshape' (line 361)
    outshape_151962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 29), 'outshape')
    # Obtaining the member '__getitem__' of a type (line 361)
    getitem___151963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 29), outshape_151962, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 361)
    subscript_call_result_151964 = invoke(stypy.reporting.localization.Localization(__file__, 361, 29), getitem___151963, n_151961)
    
    # Applying the binary operator '>=' (line 361)
    result_ge_151965 = python_operator(stypy.reporting.localization.Localization(__file__, 361, 19), '>=', subscript_call_result_151960, subscript_call_result_151964)
    
    
    # Getting the type of 'n' (line 361)
    n_151966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 47), 'n')
    int_151967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 52), 'int')
    # Getting the type of 'nd' (line 361)
    nd_151968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 56), 'nd')
    # Applying the binary operator '-' (line 361)
    result_sub_151969 = python_operator(stypy.reporting.localization.Localization(__file__, 361, 52), '-', int_151967, nd_151968)
    
    # Applying the binary operator '>' (line 361)
    result_gt_151970 = python_operator(stypy.reporting.localization.Localization(__file__, 361, 47), '>', n_151966, result_sub_151969)
    
    # Applying the binary operator 'and' (line 361)
    result_and_keyword_151971 = python_operator(stypy.reporting.localization.Localization(__file__, 361, 18), 'and', result_ge_151965, result_gt_151970)
    
    # Testing the type of an if condition (line 361)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 361, 12), result_and_keyword_151971)
    # SSA begins for while statement (line 361)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'ind' (line 362)
    ind_151972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 16), 'ind')
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 362)
    n_151973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 20), 'n')
    int_151974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 24), 'int')
    # Applying the binary operator '-' (line 362)
    result_sub_151975 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 20), '-', n_151973, int_151974)
    
    # Getting the type of 'ind' (line 362)
    ind_151976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 16), 'ind')
    # Obtaining the member '__getitem__' of a type (line 362)
    getitem___151977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 362, 16), ind_151976, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 362)
    subscript_call_result_151978 = invoke(stypy.reporting.localization.Localization(__file__, 362, 16), getitem___151977, result_sub_151975)
    
    int_151979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 30), 'int')
    # Applying the binary operator '+=' (line 362)
    result_iadd_151980 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 16), '+=', subscript_call_result_151978, int_151979)
    # Getting the type of 'ind' (line 362)
    ind_151981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 16), 'ind')
    # Getting the type of 'n' (line 362)
    n_151982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 20), 'n')
    int_151983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 24), 'int')
    # Applying the binary operator '-' (line 362)
    result_sub_151984 = python_operator(stypy.reporting.localization.Localization(__file__, 362, 20), '-', n_151982, int_151983)
    
    # Storing an element on a container (line 362)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 362, 16), ind_151981, (result_sub_151984, result_iadd_151980))
    
    
    # Assigning a Num to a Subscript (line 363):
    
    # Assigning a Num to a Subscript (line 363):
    int_151985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 25), 'int')
    # Getting the type of 'ind' (line 363)
    ind_151986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 16), 'ind')
    # Getting the type of 'n' (line 363)
    n_151987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 20), 'n')
    # Storing an element on a container (line 363)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 363, 16), ind_151986, (n_151987, int_151985))
    
    # Getting the type of 'n' (line 364)
    n_151988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 16), 'n')
    int_151989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 21), 'int')
    # Applying the binary operator '-=' (line 364)
    result_isub_151990 = python_operator(stypy.reporting.localization.Localization(__file__, 364, 16), '-=', n_151988, int_151989)
    # Assigning a type to the variable 'n' (line 364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 16), 'n', result_isub_151990)
    
    # SSA join for while statement (line 361)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to put(...): (line 365)
    # Processing the call arguments (line 365)
    # Getting the type of 'indlist' (line 365)
    indlist_151993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 18), 'indlist', False)
    # Getting the type of 'ind' (line 365)
    ind_151994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 27), 'ind', False)
    # Processing the call keyword arguments (line 365)
    kwargs_151995 = {}
    # Getting the type of 'i' (line 365)
    i_151991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 12), 'i', False)
    # Obtaining the member 'put' of a type (line 365)
    put_151992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 12), i_151991, 'put')
    # Calling put(args, kwargs) (line 365)
    put_call_result_151996 = invoke(stypy.reporting.localization.Localization(__file__, 365, 12), put_151992, *[indlist_151993, ind_151994], **kwargs_151995)
    
    
    # Assigning a Call to a Name (line 366):
    
    # Assigning a Call to a Name (line 366):
    
    # Call to func1d(...): (line 366)
    # Processing the call arguments (line 366)
    
    # Obtaining the type of the subscript
    
    # Call to tuple(...): (line 366)
    # Processing the call arguments (line 366)
    
    # Call to tolist(...): (line 366)
    # Processing the call keyword arguments (line 366)
    kwargs_152001 = {}
    # Getting the type of 'i' (line 366)
    i_151999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 35), 'i', False)
    # Obtaining the member 'tolist' of a type (line 366)
    tolist_152000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 35), i_151999, 'tolist')
    # Calling tolist(args, kwargs) (line 366)
    tolist_call_result_152002 = invoke(stypy.reporting.localization.Localization(__file__, 366, 35), tolist_152000, *[], **kwargs_152001)
    
    # Processing the call keyword arguments (line 366)
    kwargs_152003 = {}
    # Getting the type of 'tuple' (line 366)
    tuple_151998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 29), 'tuple', False)
    # Calling tuple(args, kwargs) (line 366)
    tuple_call_result_152004 = invoke(stypy.reporting.localization.Localization(__file__, 366, 29), tuple_151998, *[tolist_call_result_152002], **kwargs_152003)
    
    # Getting the type of 'arr' (line 366)
    arr_152005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 25), 'arr', False)
    # Obtaining the member '__getitem__' of a type (line 366)
    getitem___152006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 25), arr_152005, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 366)
    subscript_call_result_152007 = invoke(stypy.reporting.localization.Localization(__file__, 366, 25), getitem___152006, tuple_call_result_152004)
    
    # Getting the type of 'args' (line 366)
    args_152008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 50), 'args', False)
    # Processing the call keyword arguments (line 366)
    # Getting the type of 'kwargs' (line 366)
    kwargs_152009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 58), 'kwargs', False)
    kwargs_152010 = {'kwargs_152009': kwargs_152009}
    # Getting the type of 'func1d' (line 366)
    func1d_151997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 18), 'func1d', False)
    # Calling func1d(args, kwargs) (line 366)
    func1d_call_result_152011 = invoke(stypy.reporting.localization.Localization(__file__, 366, 18), func1d_151997, *[subscript_call_result_152007, args_152008], **kwargs_152010)
    
    # Assigning a type to the variable 'res' (line 366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 12), 'res', func1d_call_result_152011)
    
    # Assigning a Name to a Subscript (line 367):
    
    # Assigning a Name to a Subscript (line 367):
    # Getting the type of 'res' (line 367)
    res_152012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 33), 'res')
    # Getting the type of 'outarr' (line 367)
    outarr_152013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 12), 'outarr')
    
    # Call to tuple(...): (line 367)
    # Processing the call arguments (line 367)
    # Getting the type of 'ind' (line 367)
    ind_152015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 25), 'ind', False)
    # Processing the call keyword arguments (line 367)
    kwargs_152016 = {}
    # Getting the type of 'tuple' (line 367)
    tuple_152014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 19), 'tuple', False)
    # Calling tuple(args, kwargs) (line 367)
    tuple_call_result_152017 = invoke(stypy.reporting.localization.Localization(__file__, 367, 19), tuple_152014, *[ind_152015], **kwargs_152016)
    
    # Storing an element on a container (line 367)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 12), outarr_152013, (tuple_call_result_152017, res_152012))
    
    # Call to append(...): (line 368)
    # Processing the call arguments (line 368)
    
    # Call to asarray(...): (line 368)
    # Processing the call arguments (line 368)
    # Getting the type of 'res' (line 368)
    res_152021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 34), 'res', False)
    # Processing the call keyword arguments (line 368)
    kwargs_152022 = {}
    # Getting the type of 'asarray' (line 368)
    asarray_152020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 26), 'asarray', False)
    # Calling asarray(args, kwargs) (line 368)
    asarray_call_result_152023 = invoke(stypy.reporting.localization.Localization(__file__, 368, 26), asarray_152020, *[res_152021], **kwargs_152022)
    
    # Obtaining the member 'dtype' of a type (line 368)
    dtype_152024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 26), asarray_call_result_152023, 'dtype')
    # Processing the call keyword arguments (line 368)
    kwargs_152025 = {}
    # Getting the type of 'dtypes' (line 368)
    dtypes_152018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 12), 'dtypes', False)
    # Obtaining the member 'append' of a type (line 368)
    append_152019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 12), dtypes_152018, 'append')
    # Calling append(args, kwargs) (line 368)
    append_call_result_152026 = invoke(stypy.reporting.localization.Localization(__file__, 368, 12), append_152019, *[dtype_152024], **kwargs_152025)
    
    
    # Getting the type of 'k' (line 369)
    k_152027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 12), 'k')
    int_152028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 17), 'int')
    # Applying the binary operator '+=' (line 369)
    result_iadd_152029 = python_operator(stypy.reporting.localization.Localization(__file__, 369, 12), '+=', k_152027, int_152028)
    # Assigning a type to the variable 'k' (line 369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 12), 'k', result_iadd_152029)
    
    # SSA join for while statement (line 357)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 351)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 371):
    
    # Assigning a Call to a Name (line 371):
    
    # Call to array(...): (line 371)
    # Processing the call arguments (line 371)
    # Getting the type of 'res' (line 371)
    res_152031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 20), 'res', False)
    # Processing the call keyword arguments (line 371)
    # Getting the type of 'False' (line 371)
    False_152032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 30), 'False', False)
    keyword_152033 = False_152032
    # Getting the type of 'True' (line 371)
    True_152034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 43), 'True', False)
    keyword_152035 = True_152034
    kwargs_152036 = {'subok': keyword_152035, 'copy': keyword_152033}
    # Getting the type of 'array' (line 371)
    array_152030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 14), 'array', False)
    # Calling array(args, kwargs) (line 371)
    array_call_result_152037 = invoke(stypy.reporting.localization.Localization(__file__, 371, 14), array_152030, *[res_152031], **kwargs_152036)
    
    # Assigning a type to the variable 'res' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'res', array_call_result_152037)
    
    # Assigning a Call to a Name (line 372):
    
    # Assigning a Call to a Name (line 372):
    
    # Call to copy(...): (line 372)
    # Processing the call keyword arguments (line 372)
    kwargs_152040 = {}
    # Getting the type of 'i' (line 372)
    i_152038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'i', False)
    # Obtaining the member 'copy' of a type (line 372)
    copy_152039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 12), i_152038, 'copy')
    # Calling copy(args, kwargs) (line 372)
    copy_call_result_152041 = invoke(stypy.reporting.localization.Localization(__file__, 372, 12), copy_152039, *[], **kwargs_152040)
    
    # Assigning a type to the variable 'j' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 8), 'j', copy_call_result_152041)
    
    # Assigning a BinOp to a Subscript (line 373):
    
    # Assigning a BinOp to a Subscript (line 373):
    
    # Obtaining an instance of the builtin type 'list' (line 373)
    list_152042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 373)
    # Adding element type (line 373)
    
    # Call to slice(...): (line 373)
    # Processing the call arguments (line 373)
    # Getting the type of 'None' (line 373)
    None_152044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 26), 'None', False)
    # Getting the type of 'None' (line 373)
    None_152045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 32), 'None', False)
    # Processing the call keyword arguments (line 373)
    kwargs_152046 = {}
    # Getting the type of 'slice' (line 373)
    slice_152043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 20), 'slice', False)
    # Calling slice(args, kwargs) (line 373)
    slice_call_result_152047 = invoke(stypy.reporting.localization.Localization(__file__, 373, 20), slice_152043, *[None_152044, None_152045], **kwargs_152046)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 19), list_152042, slice_call_result_152047)
    
    # Getting the type of 'res' (line 373)
    res_152048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 41), 'res')
    # Obtaining the member 'ndim' of a type (line 373)
    ndim_152049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 41), res_152048, 'ndim')
    # Applying the binary operator '*' (line 373)
    result_mul_152050 = python_operator(stypy.reporting.localization.Localization(__file__, 373, 19), '*', list_152042, ndim_152049)
    
    # Getting the type of 'j' (line 373)
    j_152051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 8), 'j')
    # Getting the type of 'axis' (line 373)
    axis_152052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 10), 'axis')
    # Storing an element on a container (line 373)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 373, 8), j_152051, (axis_152052, result_mul_152050))
    
    # Call to put(...): (line 374)
    # Processing the call arguments (line 374)
    # Getting the type of 'indlist' (line 374)
    indlist_152055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 14), 'indlist', False)
    # Getting the type of 'ind' (line 374)
    ind_152056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 23), 'ind', False)
    # Processing the call keyword arguments (line 374)
    kwargs_152057 = {}
    # Getting the type of 'j' (line 374)
    j_152053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 8), 'j', False)
    # Obtaining the member 'put' of a type (line 374)
    put_152054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 8), j_152053, 'put')
    # Calling put(args, kwargs) (line 374)
    put_call_result_152058 = invoke(stypy.reporting.localization.Localization(__file__, 374, 8), put_152054, *[indlist_152055, ind_152056], **kwargs_152057)
    
    
    # Assigning a Call to a Name (line 375):
    
    # Assigning a Call to a Name (line 375):
    
    # Call to product(...): (line 375)
    # Processing the call arguments (line 375)
    # Getting the type of 'outshape' (line 375)
    outshape_152061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 26), 'outshape', False)
    # Processing the call keyword arguments (line 375)
    kwargs_152062 = {}
    # Getting the type of 'np' (line 375)
    np_152059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 15), 'np', False)
    # Obtaining the member 'product' of a type (line 375)
    product_152060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 15), np_152059, 'product')
    # Calling product(args, kwargs) (line 375)
    product_call_result_152063 = invoke(stypy.reporting.localization.Localization(__file__, 375, 15), product_152060, *[outshape_152061], **kwargs_152062)
    
    # Assigning a type to the variable 'Ntot' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'Ntot', product_call_result_152063)
    
    # Assigning a Name to a Name (line 376):
    
    # Assigning a Name to a Name (line 376):
    # Getting the type of 'outshape' (line 376)
    outshape_152064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 20), 'outshape')
    # Assigning a type to the variable 'holdshape' (line 376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'holdshape', outshape_152064)
    
    # Assigning a Call to a Name (line 377):
    
    # Assigning a Call to a Name (line 377):
    
    # Call to list(...): (line 377)
    # Processing the call arguments (line 377)
    # Getting the type of 'arr' (line 377)
    arr_152066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 24), 'arr', False)
    # Obtaining the member 'shape' of a type (line 377)
    shape_152067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 377, 24), arr_152066, 'shape')
    # Processing the call keyword arguments (line 377)
    kwargs_152068 = {}
    # Getting the type of 'list' (line 377)
    list_152065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 19), 'list', False)
    # Calling list(args, kwargs) (line 377)
    list_call_result_152069 = invoke(stypy.reporting.localization.Localization(__file__, 377, 19), list_152065, *[shape_152067], **kwargs_152068)
    
    # Assigning a type to the variable 'outshape' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 8), 'outshape', list_call_result_152069)
    
    # Assigning a Attribute to a Subscript (line 378):
    
    # Assigning a Attribute to a Subscript (line 378):
    # Getting the type of 'res' (line 378)
    res_152070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 25), 'res')
    # Obtaining the member 'shape' of a type (line 378)
    shape_152071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 25), res_152070, 'shape')
    # Getting the type of 'outshape' (line 378)
    outshape_152072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 8), 'outshape')
    # Getting the type of 'axis' (line 378)
    axis_152073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 17), 'axis')
    # Storing an element on a container (line 378)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 378, 8), outshape_152072, (axis_152073, shape_152071))
    
    # Call to append(...): (line 379)
    # Processing the call arguments (line 379)
    
    # Call to asarray(...): (line 379)
    # Processing the call arguments (line 379)
    # Getting the type of 'res' (line 379)
    res_152077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 30), 'res', False)
    # Processing the call keyword arguments (line 379)
    kwargs_152078 = {}
    # Getting the type of 'asarray' (line 379)
    asarray_152076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 22), 'asarray', False)
    # Calling asarray(args, kwargs) (line 379)
    asarray_call_result_152079 = invoke(stypy.reporting.localization.Localization(__file__, 379, 22), asarray_152076, *[res_152077], **kwargs_152078)
    
    # Obtaining the member 'dtype' of a type (line 379)
    dtype_152080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 22), asarray_call_result_152079, 'dtype')
    # Processing the call keyword arguments (line 379)
    kwargs_152081 = {}
    # Getting the type of 'dtypes' (line 379)
    dtypes_152074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'dtypes', False)
    # Obtaining the member 'append' of a type (line 379)
    append_152075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 8), dtypes_152074, 'append')
    # Calling append(args, kwargs) (line 379)
    append_call_result_152082 = invoke(stypy.reporting.localization.Localization(__file__, 379, 8), append_152075, *[dtype_152080], **kwargs_152081)
    
    
    # Assigning a Call to a Name (line 380):
    
    # Assigning a Call to a Name (line 380):
    
    # Call to flatten_inplace(...): (line 380)
    # Processing the call arguments (line 380)
    # Getting the type of 'outshape' (line 380)
    outshape_152084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 35), 'outshape', False)
    # Processing the call keyword arguments (line 380)
    kwargs_152085 = {}
    # Getting the type of 'flatten_inplace' (line 380)
    flatten_inplace_152083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 19), 'flatten_inplace', False)
    # Calling flatten_inplace(args, kwargs) (line 380)
    flatten_inplace_call_result_152086 = invoke(stypy.reporting.localization.Localization(__file__, 380, 19), flatten_inplace_152083, *[outshape_152084], **kwargs_152085)
    
    # Assigning a type to the variable 'outshape' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 8), 'outshape', flatten_inplace_call_result_152086)
    
    # Assigning a Call to a Name (line 381):
    
    # Assigning a Call to a Name (line 381):
    
    # Call to zeros(...): (line 381)
    # Processing the call arguments (line 381)
    # Getting the type of 'outshape' (line 381)
    outshape_152088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 23), 'outshape', False)
    # Getting the type of 'object' (line 381)
    object_152089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 33), 'object', False)
    # Processing the call keyword arguments (line 381)
    kwargs_152090 = {}
    # Getting the type of 'zeros' (line 381)
    zeros_152087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 17), 'zeros', False)
    # Calling zeros(args, kwargs) (line 381)
    zeros_call_result_152091 = invoke(stypy.reporting.localization.Localization(__file__, 381, 17), zeros_152087, *[outshape_152088, object_152089], **kwargs_152090)
    
    # Assigning a type to the variable 'outarr' (line 381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 8), 'outarr', zeros_call_result_152091)
    
    # Assigning a Name to a Subscript (line 382):
    
    # Assigning a Name to a Subscript (line 382):
    # Getting the type of 'res' (line 382)
    res_152092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 53), 'res')
    # Getting the type of 'outarr' (line 382)
    outarr_152093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'outarr')
    
    # Call to tuple(...): (line 382)
    # Processing the call arguments (line 382)
    
    # Call to flatten_inplace(...): (line 382)
    # Processing the call arguments (line 382)
    
    # Call to tolist(...): (line 382)
    # Processing the call keyword arguments (line 382)
    kwargs_152098 = {}
    # Getting the type of 'j' (line 382)
    j_152096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 37), 'j', False)
    # Obtaining the member 'tolist' of a type (line 382)
    tolist_152097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 382, 37), j_152096, 'tolist')
    # Calling tolist(args, kwargs) (line 382)
    tolist_call_result_152099 = invoke(stypy.reporting.localization.Localization(__file__, 382, 37), tolist_152097, *[], **kwargs_152098)
    
    # Processing the call keyword arguments (line 382)
    kwargs_152100 = {}
    # Getting the type of 'flatten_inplace' (line 382)
    flatten_inplace_152095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 21), 'flatten_inplace', False)
    # Calling flatten_inplace(args, kwargs) (line 382)
    flatten_inplace_call_result_152101 = invoke(stypy.reporting.localization.Localization(__file__, 382, 21), flatten_inplace_152095, *[tolist_call_result_152099], **kwargs_152100)
    
    # Processing the call keyword arguments (line 382)
    kwargs_152102 = {}
    # Getting the type of 'tuple' (line 382)
    tuple_152094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 15), 'tuple', False)
    # Calling tuple(args, kwargs) (line 382)
    tuple_call_result_152103 = invoke(stypy.reporting.localization.Localization(__file__, 382, 15), tuple_152094, *[flatten_inplace_call_result_152101], **kwargs_152102)
    
    # Storing an element on a container (line 382)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 382, 8), outarr_152093, (tuple_call_result_152103, res_152092))
    
    # Assigning a Num to a Name (line 383):
    
    # Assigning a Num to a Name (line 383):
    int_152104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 12), 'int')
    # Assigning a type to the variable 'k' (line 383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'k', int_152104)
    
    
    # Getting the type of 'k' (line 384)
    k_152105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 14), 'k')
    # Getting the type of 'Ntot' (line 384)
    Ntot_152106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 18), 'Ntot')
    # Applying the binary operator '<' (line 384)
    result_lt_152107 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 14), '<', k_152105, Ntot_152106)
    
    # Testing the type of an if condition (line 384)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 384, 8), result_lt_152107)
    # SSA begins for while statement (line 384)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'ind' (line 386)
    ind_152108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'ind')
    
    # Obtaining the type of the subscript
    int_152109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 16), 'int')
    # Getting the type of 'ind' (line 386)
    ind_152110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'ind')
    # Obtaining the member '__getitem__' of a type (line 386)
    getitem___152111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 12), ind_152110, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 386)
    subscript_call_result_152112 = invoke(stypy.reporting.localization.Localization(__file__, 386, 12), getitem___152111, int_152109)
    
    int_152113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 23), 'int')
    # Applying the binary operator '+=' (line 386)
    result_iadd_152114 = python_operator(stypy.reporting.localization.Localization(__file__, 386, 12), '+=', subscript_call_result_152112, int_152113)
    # Getting the type of 'ind' (line 386)
    ind_152115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'ind')
    int_152116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 16), 'int')
    # Storing an element on a container (line 386)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 12), ind_152115, (int_152116, result_iadd_152114))
    
    
    # Assigning a Num to a Name (line 387):
    
    # Assigning a Num to a Name (line 387):
    int_152117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 16), 'int')
    # Assigning a type to the variable 'n' (line 387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'n', int_152117)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 388)
    n_152118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 23), 'n')
    # Getting the type of 'ind' (line 388)
    ind_152119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 19), 'ind')
    # Obtaining the member '__getitem__' of a type (line 388)
    getitem___152120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 19), ind_152119, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 388)
    subscript_call_result_152121 = invoke(stypy.reporting.localization.Localization(__file__, 388, 19), getitem___152120, n_152118)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 388)
    n_152122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 39), 'n')
    # Getting the type of 'holdshape' (line 388)
    holdshape_152123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 29), 'holdshape')
    # Obtaining the member '__getitem__' of a type (line 388)
    getitem___152124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 29), holdshape_152123, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 388)
    subscript_call_result_152125 = invoke(stypy.reporting.localization.Localization(__file__, 388, 29), getitem___152124, n_152122)
    
    # Applying the binary operator '>=' (line 388)
    result_ge_152126 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 19), '>=', subscript_call_result_152121, subscript_call_result_152125)
    
    
    # Getting the type of 'n' (line 388)
    n_152127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 48), 'n')
    int_152128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 53), 'int')
    # Getting the type of 'nd' (line 388)
    nd_152129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 57), 'nd')
    # Applying the binary operator '-' (line 388)
    result_sub_152130 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 53), '-', int_152128, nd_152129)
    
    # Applying the binary operator '>' (line 388)
    result_gt_152131 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 48), '>', n_152127, result_sub_152130)
    
    # Applying the binary operator 'and' (line 388)
    result_and_keyword_152132 = python_operator(stypy.reporting.localization.Localization(__file__, 388, 18), 'and', result_ge_152126, result_gt_152131)
    
    # Testing the type of an if condition (line 388)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 388, 12), result_and_keyword_152132)
    # SSA begins for while statement (line 388)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'ind' (line 389)
    ind_152133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 16), 'ind')
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 389)
    n_152134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 20), 'n')
    int_152135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 24), 'int')
    # Applying the binary operator '-' (line 389)
    result_sub_152136 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 20), '-', n_152134, int_152135)
    
    # Getting the type of 'ind' (line 389)
    ind_152137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 16), 'ind')
    # Obtaining the member '__getitem__' of a type (line 389)
    getitem___152138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 16), ind_152137, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 389)
    subscript_call_result_152139 = invoke(stypy.reporting.localization.Localization(__file__, 389, 16), getitem___152138, result_sub_152136)
    
    int_152140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 30), 'int')
    # Applying the binary operator '+=' (line 389)
    result_iadd_152141 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 16), '+=', subscript_call_result_152139, int_152140)
    # Getting the type of 'ind' (line 389)
    ind_152142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 16), 'ind')
    # Getting the type of 'n' (line 389)
    n_152143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 20), 'n')
    int_152144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 24), 'int')
    # Applying the binary operator '-' (line 389)
    result_sub_152145 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 20), '-', n_152143, int_152144)
    
    # Storing an element on a container (line 389)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 389, 16), ind_152142, (result_sub_152145, result_iadd_152141))
    
    
    # Assigning a Num to a Subscript (line 390):
    
    # Assigning a Num to a Subscript (line 390):
    int_152146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 25), 'int')
    # Getting the type of 'ind' (line 390)
    ind_152147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 16), 'ind')
    # Getting the type of 'n' (line 390)
    n_152148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 20), 'n')
    # Storing an element on a container (line 390)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 390, 16), ind_152147, (n_152148, int_152146))
    
    # Getting the type of 'n' (line 391)
    n_152149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 16), 'n')
    int_152150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 21), 'int')
    # Applying the binary operator '-=' (line 391)
    result_isub_152151 = python_operator(stypy.reporting.localization.Localization(__file__, 391, 16), '-=', n_152149, int_152150)
    # Assigning a type to the variable 'n' (line 391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 16), 'n', result_isub_152151)
    
    # SSA join for while statement (line 388)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to put(...): (line 392)
    # Processing the call arguments (line 392)
    # Getting the type of 'indlist' (line 392)
    indlist_152154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 18), 'indlist', False)
    # Getting the type of 'ind' (line 392)
    ind_152155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 27), 'ind', False)
    # Processing the call keyword arguments (line 392)
    kwargs_152156 = {}
    # Getting the type of 'i' (line 392)
    i_152152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 12), 'i', False)
    # Obtaining the member 'put' of a type (line 392)
    put_152153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 12), i_152152, 'put')
    # Calling put(args, kwargs) (line 392)
    put_call_result_152157 = invoke(stypy.reporting.localization.Localization(__file__, 392, 12), put_152153, *[indlist_152154, ind_152155], **kwargs_152156)
    
    
    # Call to put(...): (line 393)
    # Processing the call arguments (line 393)
    # Getting the type of 'indlist' (line 393)
    indlist_152160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 18), 'indlist', False)
    # Getting the type of 'ind' (line 393)
    ind_152161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 27), 'ind', False)
    # Processing the call keyword arguments (line 393)
    kwargs_152162 = {}
    # Getting the type of 'j' (line 393)
    j_152158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 12), 'j', False)
    # Obtaining the member 'put' of a type (line 393)
    put_152159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 12), j_152158, 'put')
    # Calling put(args, kwargs) (line 393)
    put_call_result_152163 = invoke(stypy.reporting.localization.Localization(__file__, 393, 12), put_152159, *[indlist_152160, ind_152161], **kwargs_152162)
    
    
    # Assigning a Call to a Name (line 394):
    
    # Assigning a Call to a Name (line 394):
    
    # Call to func1d(...): (line 394)
    # Processing the call arguments (line 394)
    
    # Obtaining the type of the subscript
    
    # Call to tuple(...): (line 394)
    # Processing the call arguments (line 394)
    
    # Call to tolist(...): (line 394)
    # Processing the call keyword arguments (line 394)
    kwargs_152168 = {}
    # Getting the type of 'i' (line 394)
    i_152166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 35), 'i', False)
    # Obtaining the member 'tolist' of a type (line 394)
    tolist_152167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 35), i_152166, 'tolist')
    # Calling tolist(args, kwargs) (line 394)
    tolist_call_result_152169 = invoke(stypy.reporting.localization.Localization(__file__, 394, 35), tolist_152167, *[], **kwargs_152168)
    
    # Processing the call keyword arguments (line 394)
    kwargs_152170 = {}
    # Getting the type of 'tuple' (line 394)
    tuple_152165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 29), 'tuple', False)
    # Calling tuple(args, kwargs) (line 394)
    tuple_call_result_152171 = invoke(stypy.reporting.localization.Localization(__file__, 394, 29), tuple_152165, *[tolist_call_result_152169], **kwargs_152170)
    
    # Getting the type of 'arr' (line 394)
    arr_152172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 25), 'arr', False)
    # Obtaining the member '__getitem__' of a type (line 394)
    getitem___152173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 25), arr_152172, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 394)
    subscript_call_result_152174 = invoke(stypy.reporting.localization.Localization(__file__, 394, 25), getitem___152173, tuple_call_result_152171)
    
    # Getting the type of 'args' (line 394)
    args_152175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 50), 'args', False)
    # Processing the call keyword arguments (line 394)
    # Getting the type of 'kwargs' (line 394)
    kwargs_152176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 58), 'kwargs', False)
    kwargs_152177 = {'kwargs_152176': kwargs_152176}
    # Getting the type of 'func1d' (line 394)
    func1d_152164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 18), 'func1d', False)
    # Calling func1d(args, kwargs) (line 394)
    func1d_call_result_152178 = invoke(stypy.reporting.localization.Localization(__file__, 394, 18), func1d_152164, *[subscript_call_result_152174, args_152175], **kwargs_152177)
    
    # Assigning a type to the variable 'res' (line 394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 12), 'res', func1d_call_result_152178)
    
    # Assigning a Name to a Subscript (line 395):
    
    # Assigning a Name to a Subscript (line 395):
    # Getting the type of 'res' (line 395)
    res_152179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 57), 'res')
    # Getting the type of 'outarr' (line 395)
    outarr_152180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 12), 'outarr')
    
    # Call to tuple(...): (line 395)
    # Processing the call arguments (line 395)
    
    # Call to flatten_inplace(...): (line 395)
    # Processing the call arguments (line 395)
    
    # Call to tolist(...): (line 395)
    # Processing the call keyword arguments (line 395)
    kwargs_152185 = {}
    # Getting the type of 'j' (line 395)
    j_152183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 41), 'j', False)
    # Obtaining the member 'tolist' of a type (line 395)
    tolist_152184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 41), j_152183, 'tolist')
    # Calling tolist(args, kwargs) (line 395)
    tolist_call_result_152186 = invoke(stypy.reporting.localization.Localization(__file__, 395, 41), tolist_152184, *[], **kwargs_152185)
    
    # Processing the call keyword arguments (line 395)
    kwargs_152187 = {}
    # Getting the type of 'flatten_inplace' (line 395)
    flatten_inplace_152182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 25), 'flatten_inplace', False)
    # Calling flatten_inplace(args, kwargs) (line 395)
    flatten_inplace_call_result_152188 = invoke(stypy.reporting.localization.Localization(__file__, 395, 25), flatten_inplace_152182, *[tolist_call_result_152186], **kwargs_152187)
    
    # Processing the call keyword arguments (line 395)
    kwargs_152189 = {}
    # Getting the type of 'tuple' (line 395)
    tuple_152181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 19), 'tuple', False)
    # Calling tuple(args, kwargs) (line 395)
    tuple_call_result_152190 = invoke(stypy.reporting.localization.Localization(__file__, 395, 19), tuple_152181, *[flatten_inplace_call_result_152188], **kwargs_152189)
    
    # Storing an element on a container (line 395)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 12), outarr_152180, (tuple_call_result_152190, res_152179))
    
    # Call to append(...): (line 396)
    # Processing the call arguments (line 396)
    
    # Call to asarray(...): (line 396)
    # Processing the call arguments (line 396)
    # Getting the type of 'res' (line 396)
    res_152194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 34), 'res', False)
    # Processing the call keyword arguments (line 396)
    kwargs_152195 = {}
    # Getting the type of 'asarray' (line 396)
    asarray_152193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 26), 'asarray', False)
    # Calling asarray(args, kwargs) (line 396)
    asarray_call_result_152196 = invoke(stypy.reporting.localization.Localization(__file__, 396, 26), asarray_152193, *[res_152194], **kwargs_152195)
    
    # Obtaining the member 'dtype' of a type (line 396)
    dtype_152197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 26), asarray_call_result_152196, 'dtype')
    # Processing the call keyword arguments (line 396)
    kwargs_152198 = {}
    # Getting the type of 'dtypes' (line 396)
    dtypes_152191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 12), 'dtypes', False)
    # Obtaining the member 'append' of a type (line 396)
    append_152192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 12), dtypes_152191, 'append')
    # Calling append(args, kwargs) (line 396)
    append_call_result_152199 = invoke(stypy.reporting.localization.Localization(__file__, 396, 12), append_152192, *[dtype_152197], **kwargs_152198)
    
    
    # Getting the type of 'k' (line 397)
    k_152200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 12), 'k')
    int_152201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 17), 'int')
    # Applying the binary operator '+=' (line 397)
    result_iadd_152202 = python_operator(stypy.reporting.localization.Localization(__file__, 397, 12), '+=', k_152200, int_152201)
    # Assigning a type to the variable 'k' (line 397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 12), 'k', result_iadd_152202)
    
    # SSA join for while statement (line 384)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 351)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 398):
    
    # Assigning a Call to a Name (line 398):
    
    # Call to dtype(...): (line 398)
    # Processing the call arguments (line 398)
    
    # Call to max(...): (line 398)
    # Processing the call keyword arguments (line 398)
    kwargs_152211 = {}
    
    # Call to asarray(...): (line 398)
    # Processing the call arguments (line 398)
    # Getting the type of 'dtypes' (line 398)
    dtypes_152207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 37), 'dtypes', False)
    # Processing the call keyword arguments (line 398)
    kwargs_152208 = {}
    # Getting the type of 'np' (line 398)
    np_152205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 26), 'np', False)
    # Obtaining the member 'asarray' of a type (line 398)
    asarray_152206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 26), np_152205, 'asarray')
    # Calling asarray(args, kwargs) (line 398)
    asarray_call_result_152209 = invoke(stypy.reporting.localization.Localization(__file__, 398, 26), asarray_152206, *[dtypes_152207], **kwargs_152208)
    
    # Obtaining the member 'max' of a type (line 398)
    max_152210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 26), asarray_call_result_152209, 'max')
    # Calling max(args, kwargs) (line 398)
    max_call_result_152212 = invoke(stypy.reporting.localization.Localization(__file__, 398, 26), max_152210, *[], **kwargs_152211)
    
    # Processing the call keyword arguments (line 398)
    kwargs_152213 = {}
    # Getting the type of 'np' (line 398)
    np_152203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 17), 'np', False)
    # Obtaining the member 'dtype' of a type (line 398)
    dtype_152204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 17), np_152203, 'dtype')
    # Calling dtype(args, kwargs) (line 398)
    dtype_call_result_152214 = invoke(stypy.reporting.localization.Localization(__file__, 398, 17), dtype_152204, *[max_call_result_152212], **kwargs_152213)
    
    # Assigning a type to the variable 'max_dtypes' (line 398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 4), 'max_dtypes', dtype_call_result_152214)
    
    # Type idiom detected: calculating its left and rigth part (line 399)
    str_152215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 24), 'str', '_mask')
    # Getting the type of 'arr' (line 399)
    arr_152216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 19), 'arr')
    
    (may_be_152217, more_types_in_union_152218) = may_not_provide_member(str_152215, arr_152216)

    if may_be_152217:

        if more_types_in_union_152218:
            # Runtime conditional SSA (line 399)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'arr' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 4), 'arr', remove_member_provider_from_union(arr_152216, '_mask'))
        
        # Assigning a Call to a Name (line 400):
        
        # Assigning a Call to a Name (line 400):
        
        # Call to asarray(...): (line 400)
        # Processing the call arguments (line 400)
        # Getting the type of 'outarr' (line 400)
        outarr_152221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 28), 'outarr', False)
        # Processing the call keyword arguments (line 400)
        # Getting the type of 'max_dtypes' (line 400)
        max_dtypes_152222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 42), 'max_dtypes', False)
        keyword_152223 = max_dtypes_152222
        kwargs_152224 = {'dtype': keyword_152223}
        # Getting the type of 'np' (line 400)
        np_152219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 400)
        asarray_152220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 17), np_152219, 'asarray')
        # Calling asarray(args, kwargs) (line 400)
        asarray_call_result_152225 = invoke(stypy.reporting.localization.Localization(__file__, 400, 17), asarray_152220, *[outarr_152221], **kwargs_152224)
        
        # Assigning a type to the variable 'result' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 8), 'result', asarray_call_result_152225)

        if more_types_in_union_152218:
            # Runtime conditional SSA for else branch (line 399)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_152217) or more_types_in_union_152218):
        # Assigning a type to the variable 'arr' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 4), 'arr', remove_not_member_provider_from_union(arr_152216, '_mask'))
        
        # Assigning a Call to a Name (line 402):
        
        # Assigning a Call to a Name (line 402):
        
        # Call to asarray(...): (line 402)
        # Processing the call arguments (line 402)
        # Getting the type of 'outarr' (line 402)
        outarr_152227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 25), 'outarr', False)
        # Processing the call keyword arguments (line 402)
        # Getting the type of 'max_dtypes' (line 402)
        max_dtypes_152228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 39), 'max_dtypes', False)
        keyword_152229 = max_dtypes_152228
        kwargs_152230 = {'dtype': keyword_152229}
        # Getting the type of 'asarray' (line 402)
        asarray_152226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 17), 'asarray', False)
        # Calling asarray(args, kwargs) (line 402)
        asarray_call_result_152231 = invoke(stypy.reporting.localization.Localization(__file__, 402, 17), asarray_152226, *[outarr_152227], **kwargs_152230)
        
        # Assigning a type to the variable 'result' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'result', asarray_call_result_152231)
        
        # Assigning a Call to a Attribute (line 403):
        
        # Assigning a Call to a Attribute (line 403):
        
        # Call to default_fill_value(...): (line 403)
        # Processing the call arguments (line 403)
        # Getting the type of 'result' (line 403)
        result_152234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 50), 'result', False)
        # Processing the call keyword arguments (line 403)
        kwargs_152235 = {}
        # Getting the type of 'ma' (line 403)
        ma_152232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 28), 'ma', False)
        # Obtaining the member 'default_fill_value' of a type (line 403)
        default_fill_value_152233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 28), ma_152232, 'default_fill_value')
        # Calling default_fill_value(args, kwargs) (line 403)
        default_fill_value_call_result_152236 = invoke(stypy.reporting.localization.Localization(__file__, 403, 28), default_fill_value_152233, *[result_152234], **kwargs_152235)
        
        # Getting the type of 'result' (line 403)
        result_152237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'result')
        # Setting the type of the member 'fill_value' of a type (line 403)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), result_152237, 'fill_value', default_fill_value_call_result_152236)

        if (may_be_152217 and more_types_in_union_152218):
            # SSA join for if statement (line 399)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'result' (line 404)
    result_152238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 4), 'stypy_return_type', result_152238)
    
    # ################# End of 'apply_along_axis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'apply_along_axis' in the type store
    # Getting the type of 'stypy_return_type' (line 320)
    stypy_return_type_152239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_152239)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'apply_along_axis'
    return stypy_return_type_152239

# Assigning a type to the variable 'apply_along_axis' (line 320)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 0), 'apply_along_axis', apply_along_axis)

# Assigning a Attribute to a Attribute (line 405):

# Assigning a Attribute to a Attribute (line 405):
# Getting the type of 'np' (line 405)
np_152240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 27), 'np')
# Obtaining the member 'apply_along_axis' of a type (line 405)
apply_along_axis_152241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 27), np_152240, 'apply_along_axis')
# Obtaining the member '__doc__' of a type (line 405)
doc___152242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 27), apply_along_axis_152241, '__doc__')
# Getting the type of 'apply_along_axis' (line 405)
apply_along_axis_152243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 0), 'apply_along_axis')
# Setting the type of the member '__doc__' of a type (line 405)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 0), apply_along_axis_152243, '__doc__', doc___152242)

@norecursion
def apply_over_axes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'apply_over_axes'
    module_type_store = module_type_store.open_function_context('apply_over_axes', 408, 0, False)
    
    # Passed parameters checking function
    apply_over_axes.stypy_localization = localization
    apply_over_axes.stypy_type_of_self = None
    apply_over_axes.stypy_type_store = module_type_store
    apply_over_axes.stypy_function_name = 'apply_over_axes'
    apply_over_axes.stypy_param_names_list = ['func', 'a', 'axes']
    apply_over_axes.stypy_varargs_param_name = None
    apply_over_axes.stypy_kwargs_param_name = None
    apply_over_axes.stypy_call_defaults = defaults
    apply_over_axes.stypy_call_varargs = varargs
    apply_over_axes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'apply_over_axes', ['func', 'a', 'axes'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'apply_over_axes', localization, ['func', 'a', 'axes'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'apply_over_axes(...)' code ##################

    str_152244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 411, (-1)), 'str', '\n    (This docstring will be overwritten)\n    ')
    
    # Assigning a Call to a Name (line 412):
    
    # Assigning a Call to a Name (line 412):
    
    # Call to asarray(...): (line 412)
    # Processing the call arguments (line 412)
    # Getting the type of 'a' (line 412)
    a_152246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 18), 'a', False)
    # Processing the call keyword arguments (line 412)
    kwargs_152247 = {}
    # Getting the type of 'asarray' (line 412)
    asarray_152245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 412)
    asarray_call_result_152248 = invoke(stypy.reporting.localization.Localization(__file__, 412, 10), asarray_152245, *[a_152246], **kwargs_152247)
    
    # Assigning a type to the variable 'val' (line 412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 4), 'val', asarray_call_result_152248)
    
    # Assigning a Attribute to a Name (line 413):
    
    # Assigning a Attribute to a Name (line 413):
    # Getting the type of 'a' (line 413)
    a_152249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'a')
    # Obtaining the member 'ndim' of a type (line 413)
    ndim_152250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 8), a_152249, 'ndim')
    # Assigning a type to the variable 'N' (line 413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 4), 'N', ndim_152250)
    
    
    
    # Call to array(...): (line 414)
    # Processing the call arguments (line 414)
    # Getting the type of 'axes' (line 414)
    axes_152252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 13), 'axes', False)
    # Processing the call keyword arguments (line 414)
    kwargs_152253 = {}
    # Getting the type of 'array' (line 414)
    array_152251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 7), 'array', False)
    # Calling array(args, kwargs) (line 414)
    array_call_result_152254 = invoke(stypy.reporting.localization.Localization(__file__, 414, 7), array_152251, *[axes_152252], **kwargs_152253)
    
    # Obtaining the member 'ndim' of a type (line 414)
    ndim_152255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 7), array_call_result_152254, 'ndim')
    int_152256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 27), 'int')
    # Applying the binary operator '==' (line 414)
    result_eq_152257 = python_operator(stypy.reporting.localization.Localization(__file__, 414, 7), '==', ndim_152255, int_152256)
    
    # Testing the type of an if condition (line 414)
    if_condition_152258 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 414, 4), result_eq_152257)
    # Assigning a type to the variable 'if_condition_152258' (line 414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 4), 'if_condition_152258', if_condition_152258)
    # SSA begins for if statement (line 414)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 415):
    
    # Assigning a Tuple to a Name (line 415):
    
    # Obtaining an instance of the builtin type 'tuple' (line 415)
    tuple_152259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 415)
    # Adding element type (line 415)
    # Getting the type of 'axes' (line 415)
    axes_152260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 16), 'axes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 415, 16), tuple_152259, axes_152260)
    
    # Assigning a type to the variable 'axes' (line 415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'axes', tuple_152259)
    # SSA join for if statement (line 414)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'axes' (line 416)
    axes_152261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 16), 'axes')
    # Testing the type of a for loop iterable (line 416)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 416, 4), axes_152261)
    # Getting the type of the for loop variable (line 416)
    for_loop_var_152262 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 416, 4), axes_152261)
    # Assigning a type to the variable 'axis' (line 416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'axis', for_loop_var_152262)
    # SSA begins for a for statement (line 416)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'axis' (line 417)
    axis_152263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 11), 'axis')
    int_152264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 18), 'int')
    # Applying the binary operator '<' (line 417)
    result_lt_152265 = python_operator(stypy.reporting.localization.Localization(__file__, 417, 11), '<', axis_152263, int_152264)
    
    # Testing the type of an if condition (line 417)
    if_condition_152266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 417, 8), result_lt_152265)
    # Assigning a type to the variable 'if_condition_152266' (line 417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'if_condition_152266', if_condition_152266)
    # SSA begins for if statement (line 417)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 418):
    
    # Assigning a BinOp to a Name (line 418):
    # Getting the type of 'N' (line 418)
    N_152267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 19), 'N')
    # Getting the type of 'axis' (line 418)
    axis_152268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 23), 'axis')
    # Applying the binary operator '+' (line 418)
    result_add_152269 = python_operator(stypy.reporting.localization.Localization(__file__, 418, 19), '+', N_152267, axis_152268)
    
    # Assigning a type to the variable 'axis' (line 418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 12), 'axis', result_add_152269)
    # SSA join for if statement (line 417)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Tuple to a Name (line 419):
    
    # Assigning a Tuple to a Name (line 419):
    
    # Obtaining an instance of the builtin type 'tuple' (line 419)
    tuple_152270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 419)
    # Adding element type (line 419)
    # Getting the type of 'val' (line 419)
    val_152271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 16), 'val')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 16), tuple_152270, val_152271)
    # Adding element type (line 419)
    # Getting the type of 'axis' (line 419)
    axis_152272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 21), 'axis')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 419, 16), tuple_152270, axis_152272)
    
    # Assigning a type to the variable 'args' (line 419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'args', tuple_152270)
    
    # Assigning a Call to a Name (line 420):
    
    # Assigning a Call to a Name (line 420):
    
    # Call to func(...): (line 420)
    # Getting the type of 'args' (line 420)
    args_152274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 20), 'args', False)
    # Processing the call keyword arguments (line 420)
    kwargs_152275 = {}
    # Getting the type of 'func' (line 420)
    func_152273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 14), 'func', False)
    # Calling func(args, kwargs) (line 420)
    func_call_result_152276 = invoke(stypy.reporting.localization.Localization(__file__, 420, 14), func_152273, *[args_152274], **kwargs_152275)
    
    # Assigning a type to the variable 'res' (line 420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'res', func_call_result_152276)
    
    
    # Getting the type of 'res' (line 421)
    res_152277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 11), 'res')
    # Obtaining the member 'ndim' of a type (line 421)
    ndim_152278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 11), res_152277, 'ndim')
    # Getting the type of 'val' (line 421)
    val_152279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 23), 'val')
    # Obtaining the member 'ndim' of a type (line 421)
    ndim_152280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 23), val_152279, 'ndim')
    # Applying the binary operator '==' (line 421)
    result_eq_152281 = python_operator(stypy.reporting.localization.Localization(__file__, 421, 11), '==', ndim_152278, ndim_152280)
    
    # Testing the type of an if condition (line 421)
    if_condition_152282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 421, 8), result_eq_152281)
    # Assigning a type to the variable 'if_condition_152282' (line 421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 8), 'if_condition_152282', if_condition_152282)
    # SSA begins for if statement (line 421)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 422):
    
    # Assigning a Name to a Name (line 422):
    # Getting the type of 'res' (line 422)
    res_152283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 18), 'res')
    # Assigning a type to the variable 'val' (line 422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 12), 'val', res_152283)
    # SSA branch for the else part of an if statement (line 421)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 424):
    
    # Assigning a Call to a Name (line 424):
    
    # Call to expand_dims(...): (line 424)
    # Processing the call arguments (line 424)
    # Getting the type of 'res' (line 424)
    res_152286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 33), 'res', False)
    # Getting the type of 'axis' (line 424)
    axis_152287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 38), 'axis', False)
    # Processing the call keyword arguments (line 424)
    kwargs_152288 = {}
    # Getting the type of 'ma' (line 424)
    ma_152284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 18), 'ma', False)
    # Obtaining the member 'expand_dims' of a type (line 424)
    expand_dims_152285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 18), ma_152284, 'expand_dims')
    # Calling expand_dims(args, kwargs) (line 424)
    expand_dims_call_result_152289 = invoke(stypy.reporting.localization.Localization(__file__, 424, 18), expand_dims_152285, *[res_152286, axis_152287], **kwargs_152288)
    
    # Assigning a type to the variable 'res' (line 424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 12), 'res', expand_dims_call_result_152289)
    
    
    # Getting the type of 'res' (line 425)
    res_152290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 15), 'res')
    # Obtaining the member 'ndim' of a type (line 425)
    ndim_152291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 15), res_152290, 'ndim')
    # Getting the type of 'val' (line 425)
    val_152292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 27), 'val')
    # Obtaining the member 'ndim' of a type (line 425)
    ndim_152293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 27), val_152292, 'ndim')
    # Applying the binary operator '==' (line 425)
    result_eq_152294 = python_operator(stypy.reporting.localization.Localization(__file__, 425, 15), '==', ndim_152291, ndim_152293)
    
    # Testing the type of an if condition (line 425)
    if_condition_152295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 425, 12), result_eq_152294)
    # Assigning a type to the variable 'if_condition_152295' (line 425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 12), 'if_condition_152295', if_condition_152295)
    # SSA begins for if statement (line 425)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 426):
    
    # Assigning a Name to a Name (line 426):
    # Getting the type of 'res' (line 426)
    res_152296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 22), 'res')
    # Assigning a type to the variable 'val' (line 426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 16), 'val', res_152296)
    # SSA branch for the else part of an if statement (line 425)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 428)
    # Processing the call arguments (line 428)
    str_152298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 33), 'str', 'function is not returning an array of the correct shape')
    # Processing the call keyword arguments (line 428)
    kwargs_152299 = {}
    # Getting the type of 'ValueError' (line 428)
    ValueError_152297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 428)
    ValueError_call_result_152300 = invoke(stypy.reporting.localization.Localization(__file__, 428, 22), ValueError_152297, *[str_152298], **kwargs_152299)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 428, 16), ValueError_call_result_152300, 'raise parameter', BaseException)
    # SSA join for if statement (line 425)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 421)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'val' (line 430)
    val_152301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 11), 'val')
    # Assigning a type to the variable 'stypy_return_type' (line 430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 4), 'stypy_return_type', val_152301)
    
    # ################# End of 'apply_over_axes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'apply_over_axes' in the type store
    # Getting the type of 'stypy_return_type' (line 408)
    stypy_return_type_152302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_152302)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'apply_over_axes'
    return stypy_return_type_152302

# Assigning a type to the variable 'apply_over_axes' (line 408)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 0), 'apply_over_axes', apply_over_axes)


# Getting the type of 'apply_over_axes' (line 432)
apply_over_axes_152303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 3), 'apply_over_axes')
# Obtaining the member '__doc__' of a type (line 432)
doc___152304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 3), apply_over_axes_152303, '__doc__')
# Getting the type of 'None' (line 432)
None_152305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 34), 'None')
# Applying the binary operator 'isnot' (line 432)
result_is_not_152306 = python_operator(stypy.reporting.localization.Localization(__file__, 432, 3), 'isnot', doc___152304, None_152305)

# Testing the type of an if condition (line 432)
if_condition_152307 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 432, 0), result_is_not_152306)
# Assigning a type to the variable 'if_condition_152307' (line 432)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 0), 'if_condition_152307', if_condition_152307)
# SSA begins for if statement (line 432)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a BinOp to a Attribute (line 433):

# Assigning a BinOp to a Attribute (line 433):

# Call to rstrip(...): (line 433)
# Processing the call keyword arguments (line 433)
kwargs_152322 = {}

# Obtaining the type of the subscript

# Call to find(...): (line 434)
# Processing the call arguments (line 434)
str_152312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 41), 'str', 'Notes')
# Processing the call keyword arguments (line 434)
kwargs_152313 = {}
# Getting the type of 'np' (line 434)
np_152308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 9), 'np', False)
# Obtaining the member 'apply_over_axes' of a type (line 434)
apply_over_axes_152309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 9), np_152308, 'apply_over_axes')
# Obtaining the member '__doc__' of a type (line 434)
doc___152310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 9), apply_over_axes_152309, '__doc__')
# Obtaining the member 'find' of a type (line 434)
find_152311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 9), doc___152310, 'find')
# Calling find(args, kwargs) (line 434)
find_call_result_152314 = invoke(stypy.reporting.localization.Localization(__file__, 434, 9), find_152311, *[str_152312], **kwargs_152313)

slice_152315 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 433, 30), None, find_call_result_152314, None)
# Getting the type of 'np' (line 433)
np_152316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 30), 'np', False)
# Obtaining the member 'apply_over_axes' of a type (line 433)
apply_over_axes_152317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 30), np_152316, 'apply_over_axes')
# Obtaining the member '__doc__' of a type (line 433)
doc___152318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 30), apply_over_axes_152317, '__doc__')
# Obtaining the member '__getitem__' of a type (line 433)
getitem___152319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 30), doc___152318, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 433)
subscript_call_result_152320 = invoke(stypy.reporting.localization.Localization(__file__, 433, 30), getitem___152319, slice_152315)

# Obtaining the member 'rstrip' of a type (line 433)
rstrip_152321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 30), subscript_call_result_152320, 'rstrip')
# Calling rstrip(args, kwargs) (line 433)
rstrip_call_result_152323 = invoke(stypy.reporting.localization.Localization(__file__, 433, 30), rstrip_152321, *[], **kwargs_152322)

str_152324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, (-1)), 'str', '\n\n    Examples\n    --------\n    >>> a = ma.arange(24).reshape(2,3,4)\n    >>> a[:,0,1] = ma.masked\n    >>> a[:,1,:] = ma.masked\n    >>> print(a)\n    [[[0 -- 2 3]\n      [-- -- -- --]\n      [8 9 10 11]]\n\n     [[12 -- 14 15]\n      [-- -- -- --]\n      [20 21 22 23]]]\n    >>> print(ma.apply_over_axes(ma.sum, a, [0,2]))\n    [[[46]\n      [--]\n      [124]]]\n\n    Tuple axis arguments to ufuncs are equivalent:\n\n    >>> print(ma.sum(a, axis=(0,2)).reshape((1,-1,1)))\n    [[[46]\n      [--]\n      [124]]]\n    ')
# Applying the binary operator '+' (line 433)
result_add_152325 = python_operator(stypy.reporting.localization.Localization(__file__, 433, 30), '+', rstrip_call_result_152323, str_152324)

# Getting the type of 'apply_over_axes' (line 433)
apply_over_axes_152326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'apply_over_axes')
# Setting the type of the member '__doc__' of a type (line 433)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 4), apply_over_axes_152326, '__doc__', result_add_152325)
# SSA join for if statement (line 432)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def average(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 464)
    None_152327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'None')
    # Getting the type of 'None' (line 464)
    None_152328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 34), 'None')
    # Getting the type of 'False' (line 464)
    False_152329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 49), 'False')
    defaults = [None_152327, None_152328, False_152329]
    # Create a new context for function 'average'
    module_type_store = module_type_store.open_function_context('average', 464, 0, False)
    
    # Passed parameters checking function
    average.stypy_localization = localization
    average.stypy_type_of_self = None
    average.stypy_type_store = module_type_store
    average.stypy_function_name = 'average'
    average.stypy_param_names_list = ['a', 'axis', 'weights', 'returned']
    average.stypy_varargs_param_name = None
    average.stypy_kwargs_param_name = None
    average.stypy_call_defaults = defaults
    average.stypy_call_varargs = varargs
    average.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'average', ['a', 'axis', 'weights', 'returned'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'average', localization, ['a', 'axis', 'weights', 'returned'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'average(...)' code ##################

    str_152330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, (-1)), 'str', '\n    Return the weighted average of array over the given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Data to be averaged.\n        Masked entries are not taken into account in the computation.\n    axis : int, optional\n        Axis along which the average is computed. The default is to compute\n        the average of the flattened array.\n    weights : array_like, optional\n        The importance that each element has in the computation of the average.\n        The weights array can either be 1-D (in which case its length must be\n        the size of `a` along the given axis) or of the same shape as `a`.\n        If ``weights=None``, then all data in `a` are assumed to have a\n        weight equal to one.   If `weights` is complex, the imaginary parts\n        are ignored.\n    returned : bool, optional\n        Flag indicating whether a tuple ``(result, sum of weights)``\n        should be returned as output (True), or just the result (False).\n        Default is False.\n\n    Returns\n    -------\n    average, [sum_of_weights] : (tuple of) scalar or MaskedArray\n        The average along the specified axis. When returned is `True`,\n        return a tuple with the average as the first element and the sum\n        of the weights as the second element. The return type is `np.float64`\n        if `a` is of integer type and floats smaller than `float64`, or the\n        input data-type, otherwise. If returned, `sum_of_weights` is always\n        `float64`.\n\n    Examples\n    --------\n    >>> a = np.ma.array([1., 2., 3., 4.], mask=[False, False, True, True])\n    >>> np.ma.average(a, weights=[3, 1, 0, 0])\n    1.25\n\n    >>> x = np.ma.arange(6.).reshape(3, 2)\n    >>> print(x)\n    [[ 0.  1.]\n     [ 2.  3.]\n     [ 4.  5.]]\n    >>> avg, sumweights = np.ma.average(x, axis=0, weights=[1, 2, 3],\n    ...                                 returned=True)\n    >>> print(avg)\n    [2.66666666667 3.66666666667]\n\n    ')
    
    # Assigning a Call to a Name (line 515):
    
    # Assigning a Call to a Name (line 515):
    
    # Call to asarray(...): (line 515)
    # Processing the call arguments (line 515)
    # Getting the type of 'a' (line 515)
    a_152332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 16), 'a', False)
    # Processing the call keyword arguments (line 515)
    kwargs_152333 = {}
    # Getting the type of 'asarray' (line 515)
    asarray_152331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 515)
    asarray_call_result_152334 = invoke(stypy.reporting.localization.Localization(__file__, 515, 8), asarray_152331, *[a_152332], **kwargs_152333)
    
    # Assigning a type to the variable 'a' (line 515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'a', asarray_call_result_152334)
    
    # Assigning a Attribute to a Name (line 516):
    
    # Assigning a Attribute to a Name (line 516):
    # Getting the type of 'a' (line 516)
    a_152335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 11), 'a')
    # Obtaining the member 'mask' of a type (line 516)
    mask_152336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 11), a_152335, 'mask')
    # Assigning a type to the variable 'mask' (line 516)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 4), 'mask', mask_152336)
    
    # Assigning a Attribute to a Name (line 517):
    
    # Assigning a Attribute to a Name (line 517):
    # Getting the type of 'a' (line 517)
    a_152337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 10), 'a')
    # Obtaining the member 'shape' of a type (line 517)
    shape_152338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 10), a_152337, 'shape')
    # Assigning a type to the variable 'ash' (line 517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'ash', shape_152338)
    
    
    # Getting the type of 'ash' (line 518)
    ash_152339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 7), 'ash')
    
    # Obtaining an instance of the builtin type 'tuple' (line 518)
    tuple_152340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 518)
    
    # Applying the binary operator '==' (line 518)
    result_eq_152341 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 7), '==', ash_152339, tuple_152340)
    
    # Testing the type of an if condition (line 518)
    if_condition_152342 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 518, 4), result_eq_152341)
    # Assigning a type to the variable 'if_condition_152342' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'if_condition_152342', if_condition_152342)
    # SSA begins for if statement (line 518)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 519):
    
    # Assigning a Tuple to a Name (line 519):
    
    # Obtaining an instance of the builtin type 'tuple' (line 519)
    tuple_152343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 519)
    # Adding element type (line 519)
    int_152344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 15), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 519, 15), tuple_152343, int_152344)
    
    # Assigning a type to the variable 'ash' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 8), 'ash', tuple_152343)
    # SSA join for if statement (line 518)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 520)
    # Getting the type of 'axis' (line 520)
    axis_152345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 7), 'axis')
    # Getting the type of 'None' (line 520)
    None_152346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 15), 'None')
    
    (may_be_152347, more_types_in_union_152348) = may_be_none(axis_152345, None_152346)

    if may_be_152347:

        if more_types_in_union_152348:
            # Runtime conditional SSA (line 520)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'mask' (line 521)
        mask_152349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 11), 'mask')
        # Getting the type of 'nomask' (line 521)
        nomask_152350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 19), 'nomask')
        # Applying the binary operator 'is' (line 521)
        result_is__152351 = python_operator(stypy.reporting.localization.Localization(__file__, 521, 11), 'is', mask_152349, nomask_152350)
        
        # Testing the type of an if condition (line 521)
        if_condition_152352 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 521, 8), result_is__152351)
        # Assigning a type to the variable 'if_condition_152352' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'if_condition_152352', if_condition_152352)
        # SSA begins for if statement (line 521)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 522)
        # Getting the type of 'weights' (line 522)
        weights_152353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 15), 'weights')
        # Getting the type of 'None' (line 522)
        None_152354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 26), 'None')
        
        (may_be_152355, more_types_in_union_152356) = may_be_none(weights_152353, None_152354)

        if may_be_152355:

            if more_types_in_union_152356:
                # Runtime conditional SSA (line 522)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 523):
            
            # Assigning a Call to a Name (line 523):
            
            # Call to sum(...): (line 523)
            # Processing the call keyword arguments (line 523)
            # Getting the type of 'None' (line 523)
            None_152359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 31), 'None', False)
            keyword_152360 = None_152359
            kwargs_152361 = {'axis': keyword_152360}
            # Getting the type of 'a' (line 523)
            a_152357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 20), 'a', False)
            # Obtaining the member 'sum' of a type (line 523)
            sum_152358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 20), a_152357, 'sum')
            # Calling sum(args, kwargs) (line 523)
            sum_call_result_152362 = invoke(stypy.reporting.localization.Localization(__file__, 523, 20), sum_152358, *[], **kwargs_152361)
            
            # Assigning a type to the variable 'n' (line 523)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 16), 'n', sum_call_result_152362)
            
            # Assigning a Call to a Name (line 524):
            
            # Assigning a Call to a Name (line 524):
            
            # Call to float(...): (line 524)
            # Processing the call arguments (line 524)
            # Getting the type of 'a' (line 524)
            a_152364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 26), 'a', False)
            # Obtaining the member 'size' of a type (line 524)
            size_152365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 26), a_152364, 'size')
            # Processing the call keyword arguments (line 524)
            kwargs_152366 = {}
            # Getting the type of 'float' (line 524)
            float_152363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 20), 'float', False)
            # Calling float(args, kwargs) (line 524)
            float_call_result_152367 = invoke(stypy.reporting.localization.Localization(__file__, 524, 20), float_152363, *[size_152365], **kwargs_152366)
            
            # Assigning a type to the variable 'd' (line 524)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 16), 'd', float_call_result_152367)

            if more_types_in_union_152356:
                # Runtime conditional SSA for else branch (line 522)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_152355) or more_types_in_union_152356):
            
            # Assigning a Call to a Name (line 526):
            
            # Assigning a Call to a Name (line 526):
            
            # Call to ravel(...): (line 526)
            # Processing the call keyword arguments (line 526)
            kwargs_152374 = {}
            
            # Call to filled(...): (line 526)
            # Processing the call arguments (line 526)
            # Getting the type of 'weights' (line 526)
            weights_152369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 27), 'weights', False)
            float_152370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 36), 'float')
            # Processing the call keyword arguments (line 526)
            kwargs_152371 = {}
            # Getting the type of 'filled' (line 526)
            filled_152368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 20), 'filled', False)
            # Calling filled(args, kwargs) (line 526)
            filled_call_result_152372 = invoke(stypy.reporting.localization.Localization(__file__, 526, 20), filled_152368, *[weights_152369, float_152370], **kwargs_152371)
            
            # Obtaining the member 'ravel' of a type (line 526)
            ravel_152373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 20), filled_call_result_152372, 'ravel')
            # Calling ravel(args, kwargs) (line 526)
            ravel_call_result_152375 = invoke(stypy.reporting.localization.Localization(__file__, 526, 20), ravel_152373, *[], **kwargs_152374)
            
            # Assigning a type to the variable 'w' (line 526)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 16), 'w', ravel_call_result_152375)
            
            # Assigning a Call to a Name (line 527):
            
            # Assigning a Call to a Name (line 527):
            
            # Call to reduce(...): (line 527)
            # Processing the call arguments (line 527)
            
            # Call to ravel(...): (line 527)
            # Processing the call keyword arguments (line 527)
            kwargs_152382 = {}
            # Getting the type of 'a' (line 527)
            a_152379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 37), 'a', False)
            # Obtaining the member '_data' of a type (line 527)
            _data_152380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 37), a_152379, '_data')
            # Obtaining the member 'ravel' of a type (line 527)
            ravel_152381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 37), _data_152380, 'ravel')
            # Calling ravel(args, kwargs) (line 527)
            ravel_call_result_152383 = invoke(stypy.reporting.localization.Localization(__file__, 527, 37), ravel_152381, *[], **kwargs_152382)
            
            # Getting the type of 'w' (line 527)
            w_152384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 55), 'w', False)
            # Applying the binary operator '*' (line 527)
            result_mul_152385 = python_operator(stypy.reporting.localization.Localization(__file__, 527, 37), '*', ravel_call_result_152383, w_152384)
            
            # Processing the call keyword arguments (line 527)
            kwargs_152386 = {}
            # Getting the type of 'umath' (line 527)
            umath_152376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 20), 'umath', False)
            # Obtaining the member 'add' of a type (line 527)
            add_152377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 20), umath_152376, 'add')
            # Obtaining the member 'reduce' of a type (line 527)
            reduce_152378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 20), add_152377, 'reduce')
            # Calling reduce(args, kwargs) (line 527)
            reduce_call_result_152387 = invoke(stypy.reporting.localization.Localization(__file__, 527, 20), reduce_152378, *[result_mul_152385], **kwargs_152386)
            
            # Assigning a type to the variable 'n' (line 527)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 16), 'n', reduce_call_result_152387)
            
            # Assigning a Call to a Name (line 528):
            
            # Assigning a Call to a Name (line 528):
            
            # Call to reduce(...): (line 528)
            # Processing the call arguments (line 528)
            # Getting the type of 'w' (line 528)
            w_152391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 37), 'w', False)
            # Processing the call keyword arguments (line 528)
            kwargs_152392 = {}
            # Getting the type of 'umath' (line 528)
            umath_152388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 20), 'umath', False)
            # Obtaining the member 'add' of a type (line 528)
            add_152389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 20), umath_152388, 'add')
            # Obtaining the member 'reduce' of a type (line 528)
            reduce_152390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 20), add_152389, 'reduce')
            # Calling reduce(args, kwargs) (line 528)
            reduce_call_result_152393 = invoke(stypy.reporting.localization.Localization(__file__, 528, 20), reduce_152390, *[w_152391], **kwargs_152392)
            
            # Assigning a type to the variable 'd' (line 528)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 16), 'd', reduce_call_result_152393)
            # Deleting a member
            module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 529, 16), module_type_store, 'w')

            if (may_be_152355 and more_types_in_union_152356):
                # SSA join for if statement (line 522)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the else part of an if statement (line 521)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 531)
        # Getting the type of 'weights' (line 531)
        weights_152394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 15), 'weights')
        # Getting the type of 'None' (line 531)
        None_152395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 26), 'None')
        
        (may_be_152396, more_types_in_union_152397) = may_be_none(weights_152394, None_152395)

        if may_be_152396:

            if more_types_in_union_152397:
                # Runtime conditional SSA (line 531)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 532):
            
            # Assigning a Call to a Name (line 532):
            
            # Call to sum(...): (line 532)
            # Processing the call keyword arguments (line 532)
            # Getting the type of 'None' (line 532)
            None_152404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 41), 'None', False)
            keyword_152405 = None_152404
            kwargs_152406 = {'axis': keyword_152405}
            
            # Call to filled(...): (line 532)
            # Processing the call arguments (line 532)
            int_152400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 29), 'int')
            # Processing the call keyword arguments (line 532)
            kwargs_152401 = {}
            # Getting the type of 'a' (line 532)
            a_152398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 20), 'a', False)
            # Obtaining the member 'filled' of a type (line 532)
            filled_152399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 20), a_152398, 'filled')
            # Calling filled(args, kwargs) (line 532)
            filled_call_result_152402 = invoke(stypy.reporting.localization.Localization(__file__, 532, 20), filled_152399, *[int_152400], **kwargs_152401)
            
            # Obtaining the member 'sum' of a type (line 532)
            sum_152403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 20), filled_call_result_152402, 'sum')
            # Calling sum(args, kwargs) (line 532)
            sum_call_result_152407 = invoke(stypy.reporting.localization.Localization(__file__, 532, 20), sum_152403, *[], **kwargs_152406)
            
            # Assigning a type to the variable 'n' (line 532)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 16), 'n', sum_call_result_152407)
            
            # Assigning a Call to a Name (line 533):
            
            # Assigning a Call to a Name (line 533):
            
            # Call to float(...): (line 533)
            # Processing the call arguments (line 533)
            
            # Call to reduce(...): (line 533)
            # Processing the call arguments (line 533)
            
            # Call to ravel(...): (line 533)
            # Processing the call keyword arguments (line 533)
            kwargs_152415 = {}
            
            # Getting the type of 'mask' (line 533)
            mask_152412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 45), 'mask', False)
            # Applying the '~' unary operator (line 533)
            result_inv_152413 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 44), '~', mask_152412)
            
            # Obtaining the member 'ravel' of a type (line 533)
            ravel_152414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 44), result_inv_152413, 'ravel')
            # Calling ravel(args, kwargs) (line 533)
            ravel_call_result_152416 = invoke(stypy.reporting.localization.Localization(__file__, 533, 44), ravel_152414, *[], **kwargs_152415)
            
            # Processing the call keyword arguments (line 533)
            kwargs_152417 = {}
            # Getting the type of 'umath' (line 533)
            umath_152409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 26), 'umath', False)
            # Obtaining the member 'add' of a type (line 533)
            add_152410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 26), umath_152409, 'add')
            # Obtaining the member 'reduce' of a type (line 533)
            reduce_152411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 26), add_152410, 'reduce')
            # Calling reduce(args, kwargs) (line 533)
            reduce_call_result_152418 = invoke(stypy.reporting.localization.Localization(__file__, 533, 26), reduce_152411, *[ravel_call_result_152416], **kwargs_152417)
            
            # Processing the call keyword arguments (line 533)
            kwargs_152419 = {}
            # Getting the type of 'float' (line 533)
            float_152408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 20), 'float', False)
            # Calling float(args, kwargs) (line 533)
            float_call_result_152420 = invoke(stypy.reporting.localization.Localization(__file__, 533, 20), float_152408, *[reduce_call_result_152418], **kwargs_152419)
            
            # Assigning a type to the variable 'd' (line 533)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'd', float_call_result_152420)

            if more_types_in_union_152397:
                # Runtime conditional SSA for else branch (line 531)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_152396) or more_types_in_union_152397):
            
            # Assigning a Call to a Name (line 535):
            
            # Assigning a Call to a Name (line 535):
            
            # Call to ravel(...): (line 535)
            # Processing the call keyword arguments (line 535)
            kwargs_152433 = {}
            
            # Call to array(...): (line 535)
            # Processing the call arguments (line 535)
            
            # Call to filled(...): (line 535)
            # Processing the call arguments (line 535)
            # Getting the type of 'weights' (line 535)
            weights_152423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 33), 'weights', False)
            float_152424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 42), 'float')
            # Processing the call keyword arguments (line 535)
            kwargs_152425 = {}
            # Getting the type of 'filled' (line 535)
            filled_152422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 26), 'filled', False)
            # Calling filled(args, kwargs) (line 535)
            filled_call_result_152426 = invoke(stypy.reporting.localization.Localization(__file__, 535, 26), filled_152422, *[weights_152423, float_152424], **kwargs_152425)
            
            # Getting the type of 'float' (line 535)
            float_152427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 48), 'float', False)
            # Processing the call keyword arguments (line 535)
            # Getting the type of 'mask' (line 535)
            mask_152428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 60), 'mask', False)
            keyword_152429 = mask_152428
            kwargs_152430 = {'mask': keyword_152429}
            # Getting the type of 'array' (line 535)
            array_152421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 20), 'array', False)
            # Calling array(args, kwargs) (line 535)
            array_call_result_152431 = invoke(stypy.reporting.localization.Localization(__file__, 535, 20), array_152421, *[filled_call_result_152426, float_152427], **kwargs_152430)
            
            # Obtaining the member 'ravel' of a type (line 535)
            ravel_152432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 20), array_call_result_152431, 'ravel')
            # Calling ravel(args, kwargs) (line 535)
            ravel_call_result_152434 = invoke(stypy.reporting.localization.Localization(__file__, 535, 20), ravel_152432, *[], **kwargs_152433)
            
            # Assigning a type to the variable 'w' (line 535)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 16), 'w', ravel_call_result_152434)
            
            # Assigning a Call to a Name (line 536):
            
            # Assigning a Call to a Name (line 536):
            
            # Call to reduce(...): (line 536)
            # Processing the call arguments (line 536)
            
            # Call to ravel(...): (line 536)
            # Processing the call keyword arguments (line 536)
            kwargs_152439 = {}
            # Getting the type of 'a' (line 536)
            a_152437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 31), 'a', False)
            # Obtaining the member 'ravel' of a type (line 536)
            ravel_152438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 536, 31), a_152437, 'ravel')
            # Calling ravel(args, kwargs) (line 536)
            ravel_call_result_152440 = invoke(stypy.reporting.localization.Localization(__file__, 536, 31), ravel_152438, *[], **kwargs_152439)
            
            # Getting the type of 'w' (line 536)
            w_152441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 43), 'w', False)
            # Applying the binary operator '*' (line 536)
            result_mul_152442 = python_operator(stypy.reporting.localization.Localization(__file__, 536, 31), '*', ravel_call_result_152440, w_152441)
            
            # Processing the call keyword arguments (line 536)
            kwargs_152443 = {}
            # Getting the type of 'add' (line 536)
            add_152435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 20), 'add', False)
            # Obtaining the member 'reduce' of a type (line 536)
            reduce_152436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 536, 20), add_152435, 'reduce')
            # Calling reduce(args, kwargs) (line 536)
            reduce_call_result_152444 = invoke(stypy.reporting.localization.Localization(__file__, 536, 20), reduce_152436, *[result_mul_152442], **kwargs_152443)
            
            # Assigning a type to the variable 'n' (line 536)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 16), 'n', reduce_call_result_152444)
            
            # Assigning a Call to a Name (line 537):
            
            # Assigning a Call to a Name (line 537):
            
            # Call to reduce(...): (line 537)
            # Processing the call arguments (line 537)
            # Getting the type of 'w' (line 537)
            w_152447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 31), 'w', False)
            # Processing the call keyword arguments (line 537)
            kwargs_152448 = {}
            # Getting the type of 'add' (line 537)
            add_152445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 20), 'add', False)
            # Obtaining the member 'reduce' of a type (line 537)
            reduce_152446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 20), add_152445, 'reduce')
            # Calling reduce(args, kwargs) (line 537)
            reduce_call_result_152449 = invoke(stypy.reporting.localization.Localization(__file__, 537, 20), reduce_152446, *[w_152447], **kwargs_152448)
            
            # Assigning a type to the variable 'd' (line 537)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 16), 'd', reduce_call_result_152449)
            # Deleting a member
            module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 538, 16), module_type_store, 'w')

            if (may_be_152396 and more_types_in_union_152397):
                # SSA join for if statement (line 531)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 521)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_152348:
            # Runtime conditional SSA for else branch (line 520)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_152347) or more_types_in_union_152348):
        
        
        # Getting the type of 'mask' (line 540)
        mask_152450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 11), 'mask')
        # Getting the type of 'nomask' (line 540)
        nomask_152451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 19), 'nomask')
        # Applying the binary operator 'is' (line 540)
        result_is__152452 = python_operator(stypy.reporting.localization.Localization(__file__, 540, 11), 'is', mask_152450, nomask_152451)
        
        # Testing the type of an if condition (line 540)
        if_condition_152453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 540, 8), result_is__152452)
        # Assigning a type to the variable 'if_condition_152453' (line 540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'if_condition_152453', if_condition_152453)
        # SSA begins for if statement (line 540)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 541)
        # Getting the type of 'weights' (line 541)
        weights_152454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 15), 'weights')
        # Getting the type of 'None' (line 541)
        None_152455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 26), 'None')
        
        (may_be_152456, more_types_in_union_152457) = may_be_none(weights_152454, None_152455)

        if may_be_152456:

            if more_types_in_union_152457:
                # Runtime conditional SSA (line 541)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 542):
            
            # Assigning a BinOp to a Name (line 542):
            
            # Obtaining the type of the subscript
            # Getting the type of 'axis' (line 542)
            axis_152458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 24), 'axis')
            # Getting the type of 'ash' (line 542)
            ash_152459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'ash')
            # Obtaining the member '__getitem__' of a type (line 542)
            getitem___152460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 20), ash_152459, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 542)
            subscript_call_result_152461 = invoke(stypy.reporting.localization.Localization(__file__, 542, 20), getitem___152460, axis_152458)
            
            float_152462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 32), 'float')
            # Applying the binary operator '*' (line 542)
            result_mul_152463 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 20), '*', subscript_call_result_152461, float_152462)
            
            # Assigning a type to the variable 'd' (line 542)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 16), 'd', result_mul_152463)
            
            # Assigning a Call to a Name (line 543):
            
            # Assigning a Call to a Name (line 543):
            
            # Call to reduce(...): (line 543)
            # Processing the call arguments (line 543)
            # Getting the type of 'a' (line 543)
            a_152466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 31), 'a', False)
            # Obtaining the member '_data' of a type (line 543)
            _data_152467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 31), a_152466, '_data')
            # Getting the type of 'axis' (line 543)
            axis_152468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 40), 'axis', False)
            # Processing the call keyword arguments (line 543)
            kwargs_152469 = {}
            # Getting the type of 'add' (line 543)
            add_152464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 20), 'add', False)
            # Obtaining the member 'reduce' of a type (line 543)
            reduce_152465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 20), add_152464, 'reduce')
            # Calling reduce(args, kwargs) (line 543)
            reduce_call_result_152470 = invoke(stypy.reporting.localization.Localization(__file__, 543, 20), reduce_152465, *[_data_152467, axis_152468], **kwargs_152469)
            
            # Assigning a type to the variable 'n' (line 543)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 16), 'n', reduce_call_result_152470)

            if more_types_in_union_152457:
                # Runtime conditional SSA for else branch (line 541)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_152456) or more_types_in_union_152457):
            
            # Assigning a Call to a Name (line 545):
            
            # Assigning a Call to a Name (line 545):
            
            # Call to filled(...): (line 545)
            # Processing the call arguments (line 545)
            # Getting the type of 'weights' (line 545)
            weights_152472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 27), 'weights', False)
            float_152473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 36), 'float')
            # Processing the call keyword arguments (line 545)
            kwargs_152474 = {}
            # Getting the type of 'filled' (line 545)
            filled_152471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 20), 'filled', False)
            # Calling filled(args, kwargs) (line 545)
            filled_call_result_152475 = invoke(stypy.reporting.localization.Localization(__file__, 545, 20), filled_152471, *[weights_152472, float_152473], **kwargs_152474)
            
            # Assigning a type to the variable 'w' (line 545)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 16), 'w', filled_call_result_152475)
            
            # Assigning a Attribute to a Name (line 546):
            
            # Assigning a Attribute to a Name (line 546):
            # Getting the type of 'w' (line 546)
            w_152476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 22), 'w')
            # Obtaining the member 'shape' of a type (line 546)
            shape_152477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 22), w_152476, 'shape')
            # Assigning a type to the variable 'wsh' (line 546)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 16), 'wsh', shape_152477)
            
            
            # Getting the type of 'wsh' (line 547)
            wsh_152478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 19), 'wsh')
            
            # Obtaining an instance of the builtin type 'tuple' (line 547)
            tuple_152479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 26), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 547)
            
            # Applying the binary operator '==' (line 547)
            result_eq_152480 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 19), '==', wsh_152478, tuple_152479)
            
            # Testing the type of an if condition (line 547)
            if_condition_152481 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 547, 16), result_eq_152480)
            # Assigning a type to the variable 'if_condition_152481' (line 547)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 16), 'if_condition_152481', if_condition_152481)
            # SSA begins for if statement (line 547)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 548):
            
            # Assigning a Tuple to a Name (line 548):
            
            # Obtaining an instance of the builtin type 'tuple' (line 548)
            tuple_152482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 548)
            # Adding element type (line 548)
            int_152483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 27), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 548, 27), tuple_152482, int_152483)
            
            # Assigning a type to the variable 'wsh' (line 548)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 20), 'wsh', tuple_152482)
            # SSA join for if statement (line 547)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'wsh' (line 549)
            wsh_152484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 19), 'wsh')
            # Getting the type of 'ash' (line 549)
            ash_152485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 26), 'ash')
            # Applying the binary operator '==' (line 549)
            result_eq_152486 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 19), '==', wsh_152484, ash_152485)
            
            # Testing the type of an if condition (line 549)
            if_condition_152487 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 549, 16), result_eq_152486)
            # Assigning a type to the variable 'if_condition_152487' (line 549)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 16), 'if_condition_152487', if_condition_152487)
            # SSA begins for if statement (line 549)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 550):
            
            # Assigning a Call to a Name (line 550):
            
            # Call to array(...): (line 550)
            # Processing the call arguments (line 550)
            # Getting the type of 'w' (line 550)
            w_152490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 33), 'w', False)
            # Getting the type of 'float' (line 550)
            float_152491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 36), 'float', False)
            # Processing the call keyword arguments (line 550)
            int_152492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 48), 'int')
            keyword_152493 = int_152492
            kwargs_152494 = {'copy': keyword_152493}
            # Getting the type of 'np' (line 550)
            np_152488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 24), 'np', False)
            # Obtaining the member 'array' of a type (line 550)
            array_152489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 24), np_152488, 'array')
            # Calling array(args, kwargs) (line 550)
            array_call_result_152495 = invoke(stypy.reporting.localization.Localization(__file__, 550, 24), array_152489, *[w_152490, float_152491], **kwargs_152494)
            
            # Assigning a type to the variable 'w' (line 550)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 20), 'w', array_call_result_152495)
            
            # Assigning a Call to a Name (line 551):
            
            # Assigning a Call to a Name (line 551):
            
            # Call to reduce(...): (line 551)
            # Processing the call arguments (line 551)
            # Getting the type of 'a' (line 551)
            a_152498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 35), 'a', False)
            # Getting the type of 'w' (line 551)
            w_152499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 39), 'w', False)
            # Applying the binary operator '*' (line 551)
            result_mul_152500 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 35), '*', a_152498, w_152499)
            
            # Getting the type of 'axis' (line 551)
            axis_152501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 42), 'axis', False)
            # Processing the call keyword arguments (line 551)
            kwargs_152502 = {}
            # Getting the type of 'add' (line 551)
            add_152496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 24), 'add', False)
            # Obtaining the member 'reduce' of a type (line 551)
            reduce_152497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 24), add_152496, 'reduce')
            # Calling reduce(args, kwargs) (line 551)
            reduce_call_result_152503 = invoke(stypy.reporting.localization.Localization(__file__, 551, 24), reduce_152497, *[result_mul_152500, axis_152501], **kwargs_152502)
            
            # Assigning a type to the variable 'n' (line 551)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 20), 'n', reduce_call_result_152503)
            
            # Assigning a Call to a Name (line 552):
            
            # Assigning a Call to a Name (line 552):
            
            # Call to reduce(...): (line 552)
            # Processing the call arguments (line 552)
            # Getting the type of 'w' (line 552)
            w_152506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 35), 'w', False)
            # Getting the type of 'axis' (line 552)
            axis_152507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 38), 'axis', False)
            # Processing the call keyword arguments (line 552)
            kwargs_152508 = {}
            # Getting the type of 'add' (line 552)
            add_152504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 24), 'add', False)
            # Obtaining the member 'reduce' of a type (line 552)
            reduce_152505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 24), add_152504, 'reduce')
            # Calling reduce(args, kwargs) (line 552)
            reduce_call_result_152509 = invoke(stypy.reporting.localization.Localization(__file__, 552, 24), reduce_152505, *[w_152506, axis_152507], **kwargs_152508)
            
            # Assigning a type to the variable 'd' (line 552)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 20), 'd', reduce_call_result_152509)
            # Deleting a member
            module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 553, 20), module_type_store, 'w')
            # SSA branch for the else part of an if statement (line 549)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'wsh' (line 554)
            wsh_152510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 21), 'wsh')
            
            # Obtaining an instance of the builtin type 'tuple' (line 554)
            tuple_152511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 554)
            # Adding element type (line 554)
            
            # Obtaining the type of the subscript
            # Getting the type of 'axis' (line 554)
            axis_152512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 33), 'axis')
            # Getting the type of 'ash' (line 554)
            ash_152513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 29), 'ash')
            # Obtaining the member '__getitem__' of a type (line 554)
            getitem___152514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 29), ash_152513, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 554)
            subscript_call_result_152515 = invoke(stypy.reporting.localization.Localization(__file__, 554, 29), getitem___152514, axis_152512)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 554, 29), tuple_152511, subscript_call_result_152515)
            
            # Applying the binary operator '==' (line 554)
            result_eq_152516 = python_operator(stypy.reporting.localization.Localization(__file__, 554, 21), '==', wsh_152510, tuple_152511)
            
            # Testing the type of an if condition (line 554)
            if_condition_152517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 554, 21), result_eq_152516)
            # Assigning a type to the variable 'if_condition_152517' (line 554)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 21), 'if_condition_152517', if_condition_152517)
            # SSA begins for if statement (line 554)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 555):
            
            # Assigning a BinOp to a Name (line 555):
            
            # Obtaining an instance of the builtin type 'list' (line 555)
            list_152518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 555)
            # Adding element type (line 555)
            # Getting the type of 'None' (line 555)
            None_152519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 25), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 555, 24), list_152518, None_152519)
            
            
            # Call to len(...): (line 555)
            # Processing the call arguments (line 555)
            # Getting the type of 'ash' (line 555)
            ash_152521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 37), 'ash', False)
            # Processing the call keyword arguments (line 555)
            kwargs_152522 = {}
            # Getting the type of 'len' (line 555)
            len_152520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 33), 'len', False)
            # Calling len(args, kwargs) (line 555)
            len_call_result_152523 = invoke(stypy.reporting.localization.Localization(__file__, 555, 33), len_152520, *[ash_152521], **kwargs_152522)
            
            # Applying the binary operator '*' (line 555)
            result_mul_152524 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 24), '*', list_152518, len_call_result_152523)
            
            # Assigning a type to the variable 'r' (line 555)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 20), 'r', result_mul_152524)
            
            # Assigning a Call to a Subscript (line 556):
            
            # Assigning a Call to a Subscript (line 556):
            
            # Call to slice(...): (line 556)
            # Processing the call arguments (line 556)
            # Getting the type of 'None' (line 556)
            None_152526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 36), 'None', False)
            # Getting the type of 'None' (line 556)
            None_152527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 42), 'None', False)
            int_152528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 48), 'int')
            # Processing the call keyword arguments (line 556)
            kwargs_152529 = {}
            # Getting the type of 'slice' (line 556)
            slice_152525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 30), 'slice', False)
            # Calling slice(args, kwargs) (line 556)
            slice_call_result_152530 = invoke(stypy.reporting.localization.Localization(__file__, 556, 30), slice_152525, *[None_152526, None_152527, int_152528], **kwargs_152529)
            
            # Getting the type of 'r' (line 556)
            r_152531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 20), 'r')
            # Getting the type of 'axis' (line 556)
            axis_152532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 22), 'axis')
            # Storing an element on a container (line 556)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 556, 20), r_152531, (axis_152532, slice_call_result_152530))
            
            # Assigning a Call to a Name (line 557):
            
            # Assigning a Call to a Name (line 557):
            
            # Call to eval(...): (line 557)
            # Processing the call arguments (line 557)
            str_152534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 29), 'str', 'w[')
            
            # Call to repr(...): (line 557)
            # Processing the call arguments (line 557)
            
            # Call to tuple(...): (line 557)
            # Processing the call arguments (line 557)
            # Getting the type of 'r' (line 557)
            r_152537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 47), 'r', False)
            # Processing the call keyword arguments (line 557)
            kwargs_152538 = {}
            # Getting the type of 'tuple' (line 557)
            tuple_152536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 41), 'tuple', False)
            # Calling tuple(args, kwargs) (line 557)
            tuple_call_result_152539 = invoke(stypy.reporting.localization.Localization(__file__, 557, 41), tuple_152536, *[r_152537], **kwargs_152538)
            
            # Processing the call keyword arguments (line 557)
            kwargs_152540 = {}
            # Getting the type of 'repr' (line 557)
            repr_152535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 36), 'repr', False)
            # Calling repr(args, kwargs) (line 557)
            repr_call_result_152541 = invoke(stypy.reporting.localization.Localization(__file__, 557, 36), repr_152535, *[tuple_call_result_152539], **kwargs_152540)
            
            # Applying the binary operator '+' (line 557)
            result_add_152542 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 29), '+', str_152534, repr_call_result_152541)
            
            str_152543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 53), 'str', '] * ones(ash, float)')
            # Applying the binary operator '+' (line 557)
            result_add_152544 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 51), '+', result_add_152542, str_152543)
            
            # Processing the call keyword arguments (line 557)
            kwargs_152545 = {}
            # Getting the type of 'eval' (line 557)
            eval_152533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 24), 'eval', False)
            # Calling eval(args, kwargs) (line 557)
            eval_call_result_152546 = invoke(stypy.reporting.localization.Localization(__file__, 557, 24), eval_152533, *[result_add_152544], **kwargs_152545)
            
            # Assigning a type to the variable 'w' (line 557)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 20), 'w', eval_call_result_152546)
            
            # Assigning a Call to a Name (line 558):
            
            # Assigning a Call to a Name (line 558):
            
            # Call to reduce(...): (line 558)
            # Processing the call arguments (line 558)
            # Getting the type of 'a' (line 558)
            a_152549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 35), 'a', False)
            # Getting the type of 'w' (line 558)
            w_152550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 39), 'w', False)
            # Applying the binary operator '*' (line 558)
            result_mul_152551 = python_operator(stypy.reporting.localization.Localization(__file__, 558, 35), '*', a_152549, w_152550)
            
            # Getting the type of 'axis' (line 558)
            axis_152552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 42), 'axis', False)
            # Processing the call keyword arguments (line 558)
            kwargs_152553 = {}
            # Getting the type of 'add' (line 558)
            add_152547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 24), 'add', False)
            # Obtaining the member 'reduce' of a type (line 558)
            reduce_152548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 24), add_152547, 'reduce')
            # Calling reduce(args, kwargs) (line 558)
            reduce_call_result_152554 = invoke(stypy.reporting.localization.Localization(__file__, 558, 24), reduce_152548, *[result_mul_152551, axis_152552], **kwargs_152553)
            
            # Assigning a type to the variable 'n' (line 558)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 20), 'n', reduce_call_result_152554)
            
            # Assigning a Call to a Name (line 559):
            
            # Assigning a Call to a Name (line 559):
            
            # Call to reduce(...): (line 559)
            # Processing the call arguments (line 559)
            # Getting the type of 'w' (line 559)
            w_152557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 35), 'w', False)
            # Getting the type of 'axis' (line 559)
            axis_152558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 38), 'axis', False)
            # Processing the call keyword arguments (line 559)
            # Getting the type of 'float' (line 559)
            float_152559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 50), 'float', False)
            keyword_152560 = float_152559
            kwargs_152561 = {'dtype': keyword_152560}
            # Getting the type of 'add' (line 559)
            add_152555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 24), 'add', False)
            # Obtaining the member 'reduce' of a type (line 559)
            reduce_152556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 24), add_152555, 'reduce')
            # Calling reduce(args, kwargs) (line 559)
            reduce_call_result_152562 = invoke(stypy.reporting.localization.Localization(__file__, 559, 24), reduce_152556, *[w_152557, axis_152558], **kwargs_152561)
            
            # Assigning a type to the variable 'd' (line 559)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 20), 'd', reduce_call_result_152562)
            # Deleting a member
            module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 560, 20), module_type_store, 'w')
            # Deleting a member
            module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 560, 20), module_type_store, 'r')
            # SSA branch for the else part of an if statement (line 554)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 562)
            # Processing the call arguments (line 562)
            str_152564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 37), 'str', 'average: weights wrong shape.')
            # Processing the call keyword arguments (line 562)
            kwargs_152565 = {}
            # Getting the type of 'ValueError' (line 562)
            ValueError_152563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 562)
            ValueError_call_result_152566 = invoke(stypy.reporting.localization.Localization(__file__, 562, 26), ValueError_152563, *[str_152564], **kwargs_152565)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 562, 20), ValueError_call_result_152566, 'raise parameter', BaseException)
            # SSA join for if statement (line 554)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 549)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_152456 and more_types_in_union_152457):
                # SSA join for if statement (line 541)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the else part of an if statement (line 540)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 564)
        # Getting the type of 'weights' (line 564)
        weights_152567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 15), 'weights')
        # Getting the type of 'None' (line 564)
        None_152568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 26), 'None')
        
        (may_be_152569, more_types_in_union_152570) = may_be_none(weights_152567, None_152568)

        if may_be_152569:

            if more_types_in_union_152570:
                # Runtime conditional SSA (line 564)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 565):
            
            # Assigning a Call to a Name (line 565):
            
            # Call to reduce(...): (line 565)
            # Processing the call arguments (line 565)
            # Getting the type of 'a' (line 565)
            a_152573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 31), 'a', False)
            # Getting the type of 'axis' (line 565)
            axis_152574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 34), 'axis', False)
            # Processing the call keyword arguments (line 565)
            kwargs_152575 = {}
            # Getting the type of 'add' (line 565)
            add_152571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 20), 'add', False)
            # Obtaining the member 'reduce' of a type (line 565)
            reduce_152572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 20), add_152571, 'reduce')
            # Calling reduce(args, kwargs) (line 565)
            reduce_call_result_152576 = invoke(stypy.reporting.localization.Localization(__file__, 565, 20), reduce_152572, *[a_152573, axis_152574], **kwargs_152575)
            
            # Assigning a type to the variable 'n' (line 565)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 16), 'n', reduce_call_result_152576)
            
            # Assigning a Call to a Name (line 566):
            
            # Assigning a Call to a Name (line 566):
            
            # Call to reduce(...): (line 566)
            # Processing the call arguments (line 566)
            
            # Getting the type of 'mask' (line 566)
            mask_152580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 39), 'mask', False)
            # Applying the '~' unary operator (line 566)
            result_inv_152581 = python_operator(stypy.reporting.localization.Localization(__file__, 566, 38), '~', mask_152580)
            
            # Processing the call keyword arguments (line 566)
            # Getting the type of 'axis' (line 566)
            axis_152582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 51), 'axis', False)
            keyword_152583 = axis_152582
            # Getting the type of 'float' (line 566)
            float_152584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 63), 'float', False)
            keyword_152585 = float_152584
            kwargs_152586 = {'dtype': keyword_152585, 'axis': keyword_152583}
            # Getting the type of 'umath' (line 566)
            umath_152577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 20), 'umath', False)
            # Obtaining the member 'add' of a type (line 566)
            add_152578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 20), umath_152577, 'add')
            # Obtaining the member 'reduce' of a type (line 566)
            reduce_152579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 20), add_152578, 'reduce')
            # Calling reduce(args, kwargs) (line 566)
            reduce_call_result_152587 = invoke(stypy.reporting.localization.Localization(__file__, 566, 20), reduce_152579, *[result_inv_152581], **kwargs_152586)
            
            # Assigning a type to the variable 'd' (line 566)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 16), 'd', reduce_call_result_152587)

            if more_types_in_union_152570:
                # Runtime conditional SSA for else branch (line 564)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_152569) or more_types_in_union_152570):
            
            # Assigning a Call to a Name (line 568):
            
            # Assigning a Call to a Name (line 568):
            
            # Call to filled(...): (line 568)
            # Processing the call arguments (line 568)
            # Getting the type of 'weights' (line 568)
            weights_152589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 27), 'weights', False)
            float_152590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 36), 'float')
            # Processing the call keyword arguments (line 568)
            kwargs_152591 = {}
            # Getting the type of 'filled' (line 568)
            filled_152588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 20), 'filled', False)
            # Calling filled(args, kwargs) (line 568)
            filled_call_result_152592 = invoke(stypy.reporting.localization.Localization(__file__, 568, 20), filled_152588, *[weights_152589, float_152590], **kwargs_152591)
            
            # Assigning a type to the variable 'w' (line 568)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 16), 'w', filled_call_result_152592)
            
            # Assigning a Attribute to a Name (line 569):
            
            # Assigning a Attribute to a Name (line 569):
            # Getting the type of 'w' (line 569)
            w_152593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 22), 'w')
            # Obtaining the member 'shape' of a type (line 569)
            shape_152594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 22), w_152593, 'shape')
            # Assigning a type to the variable 'wsh' (line 569)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 16), 'wsh', shape_152594)
            
            
            # Getting the type of 'wsh' (line 570)
            wsh_152595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 19), 'wsh')
            
            # Obtaining an instance of the builtin type 'tuple' (line 570)
            tuple_152596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 26), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 570)
            
            # Applying the binary operator '==' (line 570)
            result_eq_152597 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 19), '==', wsh_152595, tuple_152596)
            
            # Testing the type of an if condition (line 570)
            if_condition_152598 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 570, 16), result_eq_152597)
            # Assigning a type to the variable 'if_condition_152598' (line 570)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 16), 'if_condition_152598', if_condition_152598)
            # SSA begins for if statement (line 570)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 571):
            
            # Assigning a Tuple to a Name (line 571):
            
            # Obtaining an instance of the builtin type 'tuple' (line 571)
            tuple_152599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 571)
            # Adding element type (line 571)
            int_152600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 27), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 571, 27), tuple_152599, int_152600)
            
            # Assigning a type to the variable 'wsh' (line 571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 20), 'wsh', tuple_152599)
            # SSA join for if statement (line 570)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'wsh' (line 572)
            wsh_152601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 19), 'wsh')
            # Getting the type of 'ash' (line 572)
            ash_152602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 26), 'ash')
            # Applying the binary operator '==' (line 572)
            result_eq_152603 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 19), '==', wsh_152601, ash_152602)
            
            # Testing the type of an if condition (line 572)
            if_condition_152604 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 572, 16), result_eq_152603)
            # Assigning a type to the variable 'if_condition_152604' (line 572)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 16), 'if_condition_152604', if_condition_152604)
            # SSA begins for if statement (line 572)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 573):
            
            # Assigning a Call to a Name (line 573):
            
            # Call to array(...): (line 573)
            # Processing the call arguments (line 573)
            # Getting the type of 'w' (line 573)
            w_152606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 30), 'w', False)
            # Processing the call keyword arguments (line 573)
            # Getting the type of 'float' (line 573)
            float_152607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 39), 'float', False)
            keyword_152608 = float_152607
            # Getting the type of 'mask' (line 573)
            mask_152609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 51), 'mask', False)
            keyword_152610 = mask_152609
            int_152611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 62), 'int')
            keyword_152612 = int_152611
            kwargs_152613 = {'dtype': keyword_152608, 'copy': keyword_152612, 'mask': keyword_152610}
            # Getting the type of 'array' (line 573)
            array_152605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 24), 'array', False)
            # Calling array(args, kwargs) (line 573)
            array_call_result_152614 = invoke(stypy.reporting.localization.Localization(__file__, 573, 24), array_152605, *[w_152606], **kwargs_152613)
            
            # Assigning a type to the variable 'w' (line 573)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 20), 'w', array_call_result_152614)
            
            # Assigning a Call to a Name (line 574):
            
            # Assigning a Call to a Name (line 574):
            
            # Call to reduce(...): (line 574)
            # Processing the call arguments (line 574)
            # Getting the type of 'a' (line 574)
            a_152617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 35), 'a', False)
            # Getting the type of 'w' (line 574)
            w_152618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 39), 'w', False)
            # Applying the binary operator '*' (line 574)
            result_mul_152619 = python_operator(stypy.reporting.localization.Localization(__file__, 574, 35), '*', a_152617, w_152618)
            
            # Getting the type of 'axis' (line 574)
            axis_152620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 42), 'axis', False)
            # Processing the call keyword arguments (line 574)
            kwargs_152621 = {}
            # Getting the type of 'add' (line 574)
            add_152615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 24), 'add', False)
            # Obtaining the member 'reduce' of a type (line 574)
            reduce_152616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 24), add_152615, 'reduce')
            # Calling reduce(args, kwargs) (line 574)
            reduce_call_result_152622 = invoke(stypy.reporting.localization.Localization(__file__, 574, 24), reduce_152616, *[result_mul_152619, axis_152620], **kwargs_152621)
            
            # Assigning a type to the variable 'n' (line 574)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 20), 'n', reduce_call_result_152622)
            
            # Assigning a Call to a Name (line 575):
            
            # Assigning a Call to a Name (line 575):
            
            # Call to reduce(...): (line 575)
            # Processing the call arguments (line 575)
            # Getting the type of 'w' (line 575)
            w_152625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 35), 'w', False)
            # Getting the type of 'axis' (line 575)
            axis_152626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 38), 'axis', False)
            # Processing the call keyword arguments (line 575)
            # Getting the type of 'float' (line 575)
            float_152627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 50), 'float', False)
            keyword_152628 = float_152627
            kwargs_152629 = {'dtype': keyword_152628}
            # Getting the type of 'add' (line 575)
            add_152623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 24), 'add', False)
            # Obtaining the member 'reduce' of a type (line 575)
            reduce_152624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 24), add_152623, 'reduce')
            # Calling reduce(args, kwargs) (line 575)
            reduce_call_result_152630 = invoke(stypy.reporting.localization.Localization(__file__, 575, 24), reduce_152624, *[w_152625, axis_152626], **kwargs_152629)
            
            # Assigning a type to the variable 'd' (line 575)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 20), 'd', reduce_call_result_152630)
            # SSA branch for the else part of an if statement (line 572)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'wsh' (line 576)
            wsh_152631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 21), 'wsh')
            
            # Obtaining an instance of the builtin type 'tuple' (line 576)
            tuple_152632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 576)
            # Adding element type (line 576)
            
            # Obtaining the type of the subscript
            # Getting the type of 'axis' (line 576)
            axis_152633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 33), 'axis')
            # Getting the type of 'ash' (line 576)
            ash_152634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 29), 'ash')
            # Obtaining the member '__getitem__' of a type (line 576)
            getitem___152635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 29), ash_152634, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 576)
            subscript_call_result_152636 = invoke(stypy.reporting.localization.Localization(__file__, 576, 29), getitem___152635, axis_152633)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 29), tuple_152632, subscript_call_result_152636)
            
            # Applying the binary operator '==' (line 576)
            result_eq_152637 = python_operator(stypy.reporting.localization.Localization(__file__, 576, 21), '==', wsh_152631, tuple_152632)
            
            # Testing the type of an if condition (line 576)
            if_condition_152638 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 576, 21), result_eq_152637)
            # Assigning a type to the variable 'if_condition_152638' (line 576)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 21), 'if_condition_152638', if_condition_152638)
            # SSA begins for if statement (line 576)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 577):
            
            # Assigning a BinOp to a Name (line 577):
            
            # Obtaining an instance of the builtin type 'list' (line 577)
            list_152639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 577)
            # Adding element type (line 577)
            # Getting the type of 'None' (line 577)
            None_152640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 25), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 24), list_152639, None_152640)
            
            
            # Call to len(...): (line 577)
            # Processing the call arguments (line 577)
            # Getting the type of 'ash' (line 577)
            ash_152642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 37), 'ash', False)
            # Processing the call keyword arguments (line 577)
            kwargs_152643 = {}
            # Getting the type of 'len' (line 577)
            len_152641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 33), 'len', False)
            # Calling len(args, kwargs) (line 577)
            len_call_result_152644 = invoke(stypy.reporting.localization.Localization(__file__, 577, 33), len_152641, *[ash_152642], **kwargs_152643)
            
            # Applying the binary operator '*' (line 577)
            result_mul_152645 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 24), '*', list_152639, len_call_result_152644)
            
            # Assigning a type to the variable 'r' (line 577)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 20), 'r', result_mul_152645)
            
            # Assigning a Call to a Subscript (line 578):
            
            # Assigning a Call to a Subscript (line 578):
            
            # Call to slice(...): (line 578)
            # Processing the call arguments (line 578)
            # Getting the type of 'None' (line 578)
            None_152647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 36), 'None', False)
            # Getting the type of 'None' (line 578)
            None_152648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 42), 'None', False)
            int_152649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 48), 'int')
            # Processing the call keyword arguments (line 578)
            kwargs_152650 = {}
            # Getting the type of 'slice' (line 578)
            slice_152646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 30), 'slice', False)
            # Calling slice(args, kwargs) (line 578)
            slice_call_result_152651 = invoke(stypy.reporting.localization.Localization(__file__, 578, 30), slice_152646, *[None_152647, None_152648, int_152649], **kwargs_152650)
            
            # Getting the type of 'r' (line 578)
            r_152652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 20), 'r')
            # Getting the type of 'axis' (line 578)
            axis_152653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 22), 'axis')
            # Storing an element on a container (line 578)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 578, 20), r_152652, (axis_152653, slice_call_result_152651))
            
            # Assigning a Call to a Name (line 579):
            
            # Assigning a Call to a Name (line 579):
            
            # Call to eval(...): (line 579)
            # Processing the call arguments (line 579)
            str_152655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 29), 'str', 'w[')
            
            # Call to repr(...): (line 579)
            # Processing the call arguments (line 579)
            
            # Call to tuple(...): (line 579)
            # Processing the call arguments (line 579)
            # Getting the type of 'r' (line 579)
            r_152658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 47), 'r', False)
            # Processing the call keyword arguments (line 579)
            kwargs_152659 = {}
            # Getting the type of 'tuple' (line 579)
            tuple_152657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 41), 'tuple', False)
            # Calling tuple(args, kwargs) (line 579)
            tuple_call_result_152660 = invoke(stypy.reporting.localization.Localization(__file__, 579, 41), tuple_152657, *[r_152658], **kwargs_152659)
            
            # Processing the call keyword arguments (line 579)
            kwargs_152661 = {}
            # Getting the type of 'repr' (line 579)
            repr_152656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 36), 'repr', False)
            # Calling repr(args, kwargs) (line 579)
            repr_call_result_152662 = invoke(stypy.reporting.localization.Localization(__file__, 579, 36), repr_152656, *[tuple_call_result_152660], **kwargs_152661)
            
            # Applying the binary operator '+' (line 579)
            result_add_152663 = python_operator(stypy.reporting.localization.Localization(__file__, 579, 29), '+', str_152655, repr_call_result_152662)
            
            str_152664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 29), 'str', '] * masked_array(ones(ash, float), mask)')
            # Applying the binary operator '+' (line 579)
            result_add_152665 = python_operator(stypy.reporting.localization.Localization(__file__, 579, 51), '+', result_add_152663, str_152664)
            
            # Processing the call keyword arguments (line 579)
            kwargs_152666 = {}
            # Getting the type of 'eval' (line 579)
            eval_152654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 24), 'eval', False)
            # Calling eval(args, kwargs) (line 579)
            eval_call_result_152667 = invoke(stypy.reporting.localization.Localization(__file__, 579, 24), eval_152654, *[result_add_152665], **kwargs_152666)
            
            # Assigning a type to the variable 'w' (line 579)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 20), 'w', eval_call_result_152667)
            
            # Assigning a Call to a Name (line 581):
            
            # Assigning a Call to a Name (line 581):
            
            # Call to reduce(...): (line 581)
            # Processing the call arguments (line 581)
            # Getting the type of 'a' (line 581)
            a_152670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 35), 'a', False)
            # Getting the type of 'w' (line 581)
            w_152671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 39), 'w', False)
            # Applying the binary operator '*' (line 581)
            result_mul_152672 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 35), '*', a_152670, w_152671)
            
            # Getting the type of 'axis' (line 581)
            axis_152673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 42), 'axis', False)
            # Processing the call keyword arguments (line 581)
            kwargs_152674 = {}
            # Getting the type of 'add' (line 581)
            add_152668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 24), 'add', False)
            # Obtaining the member 'reduce' of a type (line 581)
            reduce_152669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 24), add_152668, 'reduce')
            # Calling reduce(args, kwargs) (line 581)
            reduce_call_result_152675 = invoke(stypy.reporting.localization.Localization(__file__, 581, 24), reduce_152669, *[result_mul_152672, axis_152673], **kwargs_152674)
            
            # Assigning a type to the variable 'n' (line 581)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 20), 'n', reduce_call_result_152675)
            
            # Assigning a Call to a Name (line 582):
            
            # Assigning a Call to a Name (line 582):
            
            # Call to reduce(...): (line 582)
            # Processing the call arguments (line 582)
            # Getting the type of 'w' (line 582)
            w_152678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 35), 'w', False)
            # Getting the type of 'axis' (line 582)
            axis_152679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 38), 'axis', False)
            # Processing the call keyword arguments (line 582)
            # Getting the type of 'float' (line 582)
            float_152680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 50), 'float', False)
            keyword_152681 = float_152680
            kwargs_152682 = {'dtype': keyword_152681}
            # Getting the type of 'add' (line 582)
            add_152676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 24), 'add', False)
            # Obtaining the member 'reduce' of a type (line 582)
            reduce_152677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 24), add_152676, 'reduce')
            # Calling reduce(args, kwargs) (line 582)
            reduce_call_result_152683 = invoke(stypy.reporting.localization.Localization(__file__, 582, 24), reduce_152677, *[w_152678, axis_152679], **kwargs_152682)
            
            # Assigning a type to the variable 'd' (line 582)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 20), 'd', reduce_call_result_152683)
            # SSA branch for the else part of an if statement (line 576)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 584)
            # Processing the call arguments (line 584)
            str_152685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 37), 'str', 'average: weights wrong shape.')
            # Processing the call keyword arguments (line 584)
            kwargs_152686 = {}
            # Getting the type of 'ValueError' (line 584)
            ValueError_152684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 584)
            ValueError_call_result_152687 = invoke(stypy.reporting.localization.Localization(__file__, 584, 26), ValueError_152684, *[str_152685], **kwargs_152686)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 584, 20), ValueError_call_result_152687, 'raise parameter', BaseException)
            # SSA join for if statement (line 576)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 572)
            module_type_store = module_type_store.join_ssa_context()
            
            # Deleting a member
            module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 585, 16), module_type_store, 'w')

            if (may_be_152569 and more_types_in_union_152570):
                # SSA join for if statement (line 564)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 540)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_152347 and more_types_in_union_152348):
            # SSA join for if statement (line 520)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'n' (line 586)
    n_152688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 7), 'n')
    # Getting the type of 'masked' (line 586)
    masked_152689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 12), 'masked')
    # Applying the binary operator 'is' (line 586)
    result_is__152690 = python_operator(stypy.reporting.localization.Localization(__file__, 586, 7), 'is', n_152688, masked_152689)
    
    
    # Getting the type of 'd' (line 586)
    d_152691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 22), 'd')
    # Getting the type of 'masked' (line 586)
    masked_152692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 27), 'masked')
    # Applying the binary operator 'is' (line 586)
    result_is__152693 = python_operator(stypy.reporting.localization.Localization(__file__, 586, 22), 'is', d_152691, masked_152692)
    
    # Applying the binary operator 'or' (line 586)
    result_or_keyword_152694 = python_operator(stypy.reporting.localization.Localization(__file__, 586, 7), 'or', result_is__152690, result_is__152693)
    
    # Testing the type of an if condition (line 586)
    if_condition_152695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 586, 4), result_or_keyword_152694)
    # Assigning a type to the variable 'if_condition_152695' (line 586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'if_condition_152695', if_condition_152695)
    # SSA begins for if statement (line 586)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'masked' (line 587)
    masked_152696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 15), 'masked')
    # Assigning a type to the variable 'stypy_return_type' (line 587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 8), 'stypy_return_type', masked_152696)
    # SSA join for if statement (line 586)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 588):
    
    # Assigning a BinOp to a Name (line 588):
    # Getting the type of 'n' (line 588)
    n_152697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 13), 'n')
    # Getting the type of 'd' (line 588)
    d_152698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 17), 'd')
    # Applying the binary operator 'div' (line 588)
    result_div_152699 = python_operator(stypy.reporting.localization.Localization(__file__, 588, 13), 'div', n_152697, d_152698)
    
    # Assigning a type to the variable 'result' (line 588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'result', result_div_152699)
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 589, 4), module_type_store, 'n')
    
    
    # Call to isinstance(...): (line 591)
    # Processing the call arguments (line 591)
    # Getting the type of 'result' (line 591)
    result_152701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 18), 'result', False)
    # Getting the type of 'MaskedArray' (line 591)
    MaskedArray_152702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 26), 'MaskedArray', False)
    # Processing the call keyword arguments (line 591)
    kwargs_152703 = {}
    # Getting the type of 'isinstance' (line 591)
    isinstance_152700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 591)
    isinstance_call_result_152704 = invoke(stypy.reporting.localization.Localization(__file__, 591, 7), isinstance_152700, *[result_152701, MaskedArray_152702], **kwargs_152703)
    
    # Testing the type of an if condition (line 591)
    if_condition_152705 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 591, 4), isinstance_call_result_152704)
    # Assigning a type to the variable 'if_condition_152705' (line 591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 4), 'if_condition_152705', if_condition_152705)
    # SSA begins for if statement (line 591)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 592)
    axis_152706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 13), 'axis')
    # Getting the type of 'None' (line 592)
    None_152707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 21), 'None')
    # Applying the binary operator 'is' (line 592)
    result_is__152708 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 13), 'is', axis_152706, None_152707)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 592)
    axis_152709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 31), 'axis')
    int_152710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 39), 'int')
    # Applying the binary operator '==' (line 592)
    result_eq_152711 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 31), '==', axis_152709, int_152710)
    
    
    # Getting the type of 'a' (line 592)
    a_152712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 45), 'a')
    # Obtaining the member 'ndim' of a type (line 592)
    ndim_152713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 45), a_152712, 'ndim')
    int_152714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 55), 'int')
    # Applying the binary operator '==' (line 592)
    result_eq_152715 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 45), '==', ndim_152713, int_152714)
    
    # Applying the binary operator 'and' (line 592)
    result_and_keyword_152716 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 31), 'and', result_eq_152711, result_eq_152715)
    
    # Applying the binary operator 'or' (line 592)
    result_or_keyword_152717 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 12), 'or', result_is__152708, result_and_keyword_152716)
    
    
    # Getting the type of 'result' (line 593)
    result_152718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 12), 'result')
    # Obtaining the member 'mask' of a type (line 593)
    mask_152719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 12), result_152718, 'mask')
    # Getting the type of 'nomask' (line 593)
    nomask_152720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 27), 'nomask')
    # Applying the binary operator 'is' (line 593)
    result_is__152721 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 12), 'is', mask_152719, nomask_152720)
    
    # Applying the binary operator 'and' (line 592)
    result_and_keyword_152722 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 11), 'and', result_or_keyword_152717, result_is__152721)
    
    # Testing the type of an if condition (line 592)
    if_condition_152723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 592, 8), result_and_keyword_152722)
    # Assigning a type to the variable 'if_condition_152723' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'if_condition_152723', if_condition_152723)
    # SSA begins for if statement (line 592)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 594):
    
    # Assigning a Attribute to a Name (line 594):
    # Getting the type of 'result' (line 594)
    result_152724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 21), 'result')
    # Obtaining the member '_data' of a type (line 594)
    _data_152725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 21), result_152724, '_data')
    # Assigning a type to the variable 'result' (line 594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 12), 'result', _data_152725)
    # SSA join for if statement (line 592)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'returned' (line 595)
    returned_152726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 11), 'returned')
    # Testing the type of an if condition (line 595)
    if_condition_152727 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 595, 8), returned_152726)
    # Assigning a type to the variable 'if_condition_152727' (line 595)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'if_condition_152727', if_condition_152727)
    # SSA begins for if statement (line 595)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to isinstance(...): (line 596)
    # Processing the call arguments (line 596)
    # Getting the type of 'd' (line 596)
    d_152729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 30), 'd', False)
    # Getting the type of 'MaskedArray' (line 596)
    MaskedArray_152730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 33), 'MaskedArray', False)
    # Processing the call keyword arguments (line 596)
    kwargs_152731 = {}
    # Getting the type of 'isinstance' (line 596)
    isinstance_152728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 19), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 596)
    isinstance_call_result_152732 = invoke(stypy.reporting.localization.Localization(__file__, 596, 19), isinstance_152728, *[d_152729, MaskedArray_152730], **kwargs_152731)
    
    # Applying the 'not' unary operator (line 596)
    result_not__152733 = python_operator(stypy.reporting.localization.Localization(__file__, 596, 15), 'not', isinstance_call_result_152732)
    
    # Testing the type of an if condition (line 596)
    if_condition_152734 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 596, 12), result_not__152733)
    # Assigning a type to the variable 'if_condition_152734' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 12), 'if_condition_152734', if_condition_152734)
    # SSA begins for if statement (line 596)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 597):
    
    # Assigning a Call to a Name (line 597):
    
    # Call to masked_array(...): (line 597)
    # Processing the call arguments (line 597)
    # Getting the type of 'd' (line 597)
    d_152736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 33), 'd', False)
    # Processing the call keyword arguments (line 597)
    kwargs_152737 = {}
    # Getting the type of 'masked_array' (line 597)
    masked_array_152735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 20), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 597)
    masked_array_call_result_152738 = invoke(stypy.reporting.localization.Localization(__file__, 597, 20), masked_array_152735, *[d_152736], **kwargs_152737)
    
    # Assigning a type to the variable 'd' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 16), 'd', masked_array_call_result_152738)
    # SSA join for if statement (line 596)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 598)
    # Processing the call arguments (line 598)
    # Getting the type of 'd' (line 598)
    d_152740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 26), 'd', False)
    # Getting the type of 'ndarray' (line 598)
    ndarray_152741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 29), 'ndarray', False)
    # Processing the call keyword arguments (line 598)
    kwargs_152742 = {}
    # Getting the type of 'isinstance' (line 598)
    isinstance_152739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 598)
    isinstance_call_result_152743 = invoke(stypy.reporting.localization.Localization(__file__, 598, 15), isinstance_152739, *[d_152740, ndarray_152741], **kwargs_152742)
    
    
    
    # Getting the type of 'd' (line 598)
    d_152744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 47), 'd')
    # Obtaining the member 'shape' of a type (line 598)
    shape_152745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 47), d_152744, 'shape')
    # Getting the type of 'result' (line 598)
    result_152746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 58), 'result')
    # Obtaining the member 'shape' of a type (line 598)
    shape_152747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 58), result_152746, 'shape')
    # Applying the binary operator '==' (line 598)
    result_eq_152748 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 47), '==', shape_152745, shape_152747)
    
    # Applying the 'not' unary operator (line 598)
    result_not__152749 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 43), 'not', result_eq_152748)
    
    # Applying the binary operator 'and' (line 598)
    result_and_keyword_152750 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 15), 'and', isinstance_call_result_152743, result_not__152749)
    
    # Testing the type of an if condition (line 598)
    if_condition_152751 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 598, 12), result_and_keyword_152750)
    # Assigning a type to the variable 'if_condition_152751' (line 598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 12), 'if_condition_152751', if_condition_152751)
    # SSA begins for if statement (line 598)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 599):
    
    # Assigning a BinOp to a Name (line 599):
    
    # Call to ones(...): (line 599)
    # Processing the call arguments (line 599)
    # Getting the type of 'result' (line 599)
    result_152753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 25), 'result', False)
    # Obtaining the member 'shape' of a type (line 599)
    shape_152754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 25), result_152753, 'shape')
    # Processing the call keyword arguments (line 599)
    # Getting the type of 'float' (line 599)
    float_152755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 45), 'float', False)
    keyword_152756 = float_152755
    kwargs_152757 = {'dtype': keyword_152756}
    # Getting the type of 'ones' (line 599)
    ones_152752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 20), 'ones', False)
    # Calling ones(args, kwargs) (line 599)
    ones_call_result_152758 = invoke(stypy.reporting.localization.Localization(__file__, 599, 20), ones_152752, *[shape_152754], **kwargs_152757)
    
    # Getting the type of 'd' (line 599)
    d_152759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 54), 'd')
    # Applying the binary operator '*' (line 599)
    result_mul_152760 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 20), '*', ones_call_result_152758, d_152759)
    
    # Assigning a type to the variable 'd' (line 599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 16), 'd', result_mul_152760)
    # SSA join for if statement (line 598)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 595)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 591)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'returned' (line 600)
    returned_152761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 7), 'returned')
    # Testing the type of an if condition (line 600)
    if_condition_152762 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 600, 4), returned_152761)
    # Assigning a type to the variable 'if_condition_152762' (line 600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 4), 'if_condition_152762', if_condition_152762)
    # SSA begins for if statement (line 600)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 601)
    tuple_152763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 601)
    # Adding element type (line 601)
    # Getting the type of 'result' (line 601)
    result_152764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 15), 'result')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 601, 15), tuple_152763, result_152764)
    # Adding element type (line 601)
    # Getting the type of 'd' (line 601)
    d_152765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 23), 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 601, 15), tuple_152763, d_152765)
    
    # Assigning a type to the variable 'stypy_return_type' (line 601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 8), 'stypy_return_type', tuple_152763)
    # SSA branch for the else part of an if statement (line 600)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'result' (line 603)
    result_152766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 15), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'stypy_return_type', result_152766)
    # SSA join for if statement (line 600)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'average(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'average' in the type store
    # Getting the type of 'stypy_return_type' (line 464)
    stypy_return_type_152767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_152767)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'average'
    return stypy_return_type_152767

# Assigning a type to the variable 'average' (line 464)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 0), 'average', average)

@norecursion
def median(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 606)
    None_152768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 19), 'None')
    # Getting the type of 'None' (line 606)
    None_152769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 29), 'None')
    # Getting the type of 'False' (line 606)
    False_152770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 51), 'False')
    defaults = [None_152768, None_152769, False_152770]
    # Create a new context for function 'median'
    module_type_store = module_type_store.open_function_context('median', 606, 0, False)
    
    # Passed parameters checking function
    median.stypy_localization = localization
    median.stypy_type_of_self = None
    median.stypy_type_store = module_type_store
    median.stypy_function_name = 'median'
    median.stypy_param_names_list = ['a', 'axis', 'out', 'overwrite_input']
    median.stypy_varargs_param_name = None
    median.stypy_kwargs_param_name = None
    median.stypy_call_defaults = defaults
    median.stypy_call_varargs = varargs
    median.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'median', ['a', 'axis', 'out', 'overwrite_input'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'median', localization, ['a', 'axis', 'out', 'overwrite_input'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'median(...)' code ##################

    str_152771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 665, (-1)), 'str', '\n    Compute the median along the specified axis.\n\n    Returns the median of the array elements.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    axis : int, optional\n        Axis along which the medians are computed. The default (None) is\n        to compute the median along a flattened version of the array.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output\n        but the type will be cast if necessary.\n    overwrite_input : bool, optional\n        If True, then allow use of memory of input array (a) for\n        calculations. The input array will be modified by the call to\n        median. This will save memory when you do not need to preserve\n        the contents of the input array. Treat the input as undefined,\n        but it will probably be fully or partially sorted. Default is\n        False. Note that, if `overwrite_input` is True, and the input\n        is not already an `ndarray`, an error will be raised.\n\n    Returns\n    -------\n    median : ndarray\n        A new array holding the result is returned unless out is\n        specified, in which case a reference to out is returned.\n        Return data-type is `float64` for integers and floats smaller than\n        `float64`, or the input data-type, otherwise.\n\n    See Also\n    --------\n    mean\n\n    Notes\n    -----\n    Given a vector ``V`` with ``N`` non masked values, the median of ``V``\n    is the middle value of a sorted copy of ``V`` (``Vs``) - i.e.\n    ``Vs[(N-1)/2]``, when ``N`` is odd, or ``{Vs[N/2 - 1] + Vs[N/2]}/2``\n    when ``N`` is even.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(8), mask=[0]*4 + [1]*4)\n    >>> np.ma.median(x)\n    1.5\n\n    >>> x = np.ma.array(np.arange(10).reshape(2, 5), mask=[0]*6 + [1]*4)\n    >>> np.ma.median(x)\n    2.5\n    >>> np.ma.median(x, axis=-1, overwrite_input=True)\n    masked_array(data = [ 2.  5.],\n                 mask = False,\n           fill_value = 1e+20)\n\n    ')
    
    
    # Evaluating a boolean operation
    
    
    # Call to hasattr(...): (line 666)
    # Processing the call arguments (line 666)
    # Getting the type of 'a' (line 666)
    a_152773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 19), 'a', False)
    str_152774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 22), 'str', 'mask')
    # Processing the call keyword arguments (line 666)
    kwargs_152775 = {}
    # Getting the type of 'hasattr' (line 666)
    hasattr_152772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 11), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 666)
    hasattr_call_result_152776 = invoke(stypy.reporting.localization.Localization(__file__, 666, 11), hasattr_152772, *[a_152773, str_152774], **kwargs_152775)
    
    # Applying the 'not' unary operator (line 666)
    result_not__152777 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 7), 'not', hasattr_call_result_152776)
    
    
    
    # Call to count_nonzero(...): (line 666)
    # Processing the call arguments (line 666)
    # Getting the type of 'a' (line 666)
    a_152780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 50), 'a', False)
    # Obtaining the member 'mask' of a type (line 666)
    mask_152781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 50), a_152780, 'mask')
    # Processing the call keyword arguments (line 666)
    kwargs_152782 = {}
    # Getting the type of 'np' (line 666)
    np_152778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 33), 'np', False)
    # Obtaining the member 'count_nonzero' of a type (line 666)
    count_nonzero_152779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 33), np_152778, 'count_nonzero')
    # Calling count_nonzero(args, kwargs) (line 666)
    count_nonzero_call_result_152783 = invoke(stypy.reporting.localization.Localization(__file__, 666, 33), count_nonzero_152779, *[mask_152781], **kwargs_152782)
    
    int_152784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 61), 'int')
    # Applying the binary operator '==' (line 666)
    result_eq_152785 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 33), '==', count_nonzero_call_result_152783, int_152784)
    
    # Applying the binary operator 'or' (line 666)
    result_or_keyword_152786 = python_operator(stypy.reporting.localization.Localization(__file__, 666, 7), 'or', result_not__152777, result_eq_152785)
    
    # Testing the type of an if condition (line 666)
    if_condition_152787 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 666, 4), result_or_keyword_152786)
    # Assigning a type to the variable 'if_condition_152787' (line 666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'if_condition_152787', if_condition_152787)
    # SSA begins for if statement (line 666)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to masked_array(...): (line 667)
    # Processing the call arguments (line 667)
    
    # Call to median(...): (line 667)
    # Processing the call arguments (line 667)
    
    # Call to getdata(...): (line 667)
    # Processing the call arguments (line 667)
    # Getting the type of 'a' (line 667)
    a_152792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 46), 'a', False)
    # Processing the call keyword arguments (line 667)
    # Getting the type of 'True' (line 667)
    True_152793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 55), 'True', False)
    keyword_152794 = True_152793
    kwargs_152795 = {'subok': keyword_152794}
    # Getting the type of 'getdata' (line 667)
    getdata_152791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 38), 'getdata', False)
    # Calling getdata(args, kwargs) (line 667)
    getdata_call_result_152796 = invoke(stypy.reporting.localization.Localization(__file__, 667, 38), getdata_152791, *[a_152792], **kwargs_152795)
    
    # Processing the call keyword arguments (line 667)
    # Getting the type of 'axis' (line 667)
    axis_152797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 67), 'axis', False)
    keyword_152798 = axis_152797
    # Getting the type of 'out' (line 668)
    out_152799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 26), 'out', False)
    keyword_152800 = out_152799
    # Getting the type of 'overwrite_input' (line 668)
    overwrite_input_152801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 47), 'overwrite_input', False)
    keyword_152802 = overwrite_input_152801
    kwargs_152803 = {'overwrite_input': keyword_152802, 'out': keyword_152800, 'axis': keyword_152798}
    # Getting the type of 'np' (line 667)
    np_152789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 28), 'np', False)
    # Obtaining the member 'median' of a type (line 667)
    median_152790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 28), np_152789, 'median')
    # Calling median(args, kwargs) (line 667)
    median_call_result_152804 = invoke(stypy.reporting.localization.Localization(__file__, 667, 28), median_152790, *[getdata_call_result_152796], **kwargs_152803)
    
    # Processing the call keyword arguments (line 667)
    # Getting the type of 'False' (line 668)
    False_152805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 70), 'False', False)
    keyword_152806 = False_152805
    kwargs_152807 = {'copy': keyword_152806}
    # Getting the type of 'masked_array' (line 667)
    masked_array_152788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 15), 'masked_array', False)
    # Calling masked_array(args, kwargs) (line 667)
    masked_array_call_result_152808 = invoke(stypy.reporting.localization.Localization(__file__, 667, 15), masked_array_152788, *[median_call_result_152804], **kwargs_152807)
    
    # Assigning a type to the variable 'stypy_return_type' (line 667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'stypy_return_type', masked_array_call_result_152808)
    # SSA join for if statement (line 666)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'overwrite_input' (line 669)
    overwrite_input_152809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 7), 'overwrite_input')
    # Testing the type of an if condition (line 669)
    if_condition_152810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 669, 4), overwrite_input_152809)
    # Assigning a type to the variable 'if_condition_152810' (line 669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 4), 'if_condition_152810', if_condition_152810)
    # SSA begins for if statement (line 669)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 670)
    # Getting the type of 'axis' (line 670)
    axis_152811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 11), 'axis')
    # Getting the type of 'None' (line 670)
    None_152812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 19), 'None')
    
    (may_be_152813, more_types_in_union_152814) = may_be_none(axis_152811, None_152812)

    if may_be_152813:

        if more_types_in_union_152814:
            # Runtime conditional SSA (line 670)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 671):
        
        # Assigning a Call to a Name (line 671):
        
        # Call to ravel(...): (line 671)
        # Processing the call keyword arguments (line 671)
        kwargs_152817 = {}
        # Getting the type of 'a' (line 671)
        a_152815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 22), 'a', False)
        # Obtaining the member 'ravel' of a type (line 671)
        ravel_152816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 22), a_152815, 'ravel')
        # Calling ravel(args, kwargs) (line 671)
        ravel_call_result_152818 = invoke(stypy.reporting.localization.Localization(__file__, 671, 22), ravel_152816, *[], **kwargs_152817)
        
        # Assigning a type to the variable 'asorted' (line 671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 12), 'asorted', ravel_call_result_152818)
        
        # Call to sort(...): (line 672)
        # Processing the call keyword arguments (line 672)
        kwargs_152821 = {}
        # Getting the type of 'asorted' (line 672)
        asorted_152819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'asorted', False)
        # Obtaining the member 'sort' of a type (line 672)
        sort_152820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 12), asorted_152819, 'sort')
        # Calling sort(args, kwargs) (line 672)
        sort_call_result_152822 = invoke(stypy.reporting.localization.Localization(__file__, 672, 12), sort_152820, *[], **kwargs_152821)
        

        if more_types_in_union_152814:
            # Runtime conditional SSA for else branch (line 670)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_152813) or more_types_in_union_152814):
        
        # Call to sort(...): (line 674)
        # Processing the call keyword arguments (line 674)
        # Getting the type of 'axis' (line 674)
        axis_152825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 24), 'axis', False)
        keyword_152826 = axis_152825
        kwargs_152827 = {'axis': keyword_152826}
        # Getting the type of 'a' (line 674)
        a_152823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 12), 'a', False)
        # Obtaining the member 'sort' of a type (line 674)
        sort_152824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 12), a_152823, 'sort')
        # Calling sort(args, kwargs) (line 674)
        sort_call_result_152828 = invoke(stypy.reporting.localization.Localization(__file__, 674, 12), sort_152824, *[], **kwargs_152827)
        
        
        # Assigning a Name to a Name (line 675):
        
        # Assigning a Name to a Name (line 675):
        # Getting the type of 'a' (line 675)
        a_152829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 22), 'a')
        # Assigning a type to the variable 'asorted' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 12), 'asorted', a_152829)

        if (may_be_152813 and more_types_in_union_152814):
            # SSA join for if statement (line 670)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 669)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 677):
    
    # Assigning a Call to a Name (line 677):
    
    # Call to sort(...): (line 677)
    # Processing the call arguments (line 677)
    # Getting the type of 'a' (line 677)
    a_152831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 23), 'a', False)
    # Processing the call keyword arguments (line 677)
    # Getting the type of 'axis' (line 677)
    axis_152832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 31), 'axis', False)
    keyword_152833 = axis_152832
    kwargs_152834 = {'axis': keyword_152833}
    # Getting the type of 'sort' (line 677)
    sort_152830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 18), 'sort', False)
    # Calling sort(args, kwargs) (line 677)
    sort_call_result_152835 = invoke(stypy.reporting.localization.Localization(__file__, 677, 18), sort_152830, *[a_152831], **kwargs_152834)
    
    # Assigning a type to the variable 'asorted' (line 677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 8), 'asorted', sort_call_result_152835)
    # SSA join for if statement (line 669)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 678)
    # Getting the type of 'axis' (line 678)
    axis_152836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 7), 'axis')
    # Getting the type of 'None' (line 678)
    None_152837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 15), 'None')
    
    (may_be_152838, more_types_in_union_152839) = may_be_none(axis_152836, None_152837)

    if may_be_152838:

        if more_types_in_union_152839:
            # Runtime conditional SSA (line 678)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 679):
        
        # Assigning a Num to a Name (line 679):
        int_152840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 15), 'int')
        # Assigning a type to the variable 'axis' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'axis', int_152840)

        if more_types_in_union_152839:
            # Runtime conditional SSA for else branch (line 678)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_152838) or more_types_in_union_152839):
        
        
        # Getting the type of 'axis' (line 680)
        axis_152841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 9), 'axis')
        int_152842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 16), 'int')
        # Applying the binary operator '<' (line 680)
        result_lt_152843 = python_operator(stypy.reporting.localization.Localization(__file__, 680, 9), '<', axis_152841, int_152842)
        
        # Testing the type of an if condition (line 680)
        if_condition_152844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 680, 9), result_lt_152843)
        # Assigning a type to the variable 'if_condition_152844' (line 680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 680, 9), 'if_condition_152844', if_condition_152844)
        # SSA begins for if statement (line 680)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'axis' (line 681)
        axis_152845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'axis')
        # Getting the type of 'a' (line 681)
        a_152846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 16), 'a')
        # Obtaining the member 'ndim' of a type (line 681)
        ndim_152847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 16), a_152846, 'ndim')
        # Applying the binary operator '+=' (line 681)
        result_iadd_152848 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 8), '+=', axis_152845, ndim_152847)
        # Assigning a type to the variable 'axis' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'axis', result_iadd_152848)
        
        # SSA join for if statement (line 680)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_152838 and more_types_in_union_152839):
            # SSA join for if statement (line 678)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 683):
    
    # Assigning a BinOp to a Name (line 683):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 683)
    axis_152849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 27), 'axis')
    # Getting the type of 'asorted' (line 683)
    asorted_152850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 13), 'asorted')
    # Obtaining the member 'shape' of a type (line 683)
    shape_152851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 13), asorted_152850, 'shape')
    # Obtaining the member '__getitem__' of a type (line 683)
    getitem___152852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 13), shape_152851, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 683)
    subscript_call_result_152853 = invoke(stypy.reporting.localization.Localization(__file__, 683, 13), getitem___152852, axis_152849)
    
    
    # Call to sum(...): (line 683)
    # Processing the call keyword arguments (line 683)
    # Getting the type of 'axis' (line 683)
    axis_152857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 59), 'axis', False)
    keyword_152858 = axis_152857
    kwargs_152859 = {'axis': keyword_152858}
    # Getting the type of 'asorted' (line 683)
    asorted_152854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 36), 'asorted', False)
    # Obtaining the member 'mask' of a type (line 683)
    mask_152855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 36), asorted_152854, 'mask')
    # Obtaining the member 'sum' of a type (line 683)
    sum_152856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 36), mask_152855, 'sum')
    # Calling sum(args, kwargs) (line 683)
    sum_call_result_152860 = invoke(stypy.reporting.localization.Localization(__file__, 683, 36), sum_152856, *[], **kwargs_152859)
    
    # Applying the binary operator '-' (line 683)
    result_sub_152861 = python_operator(stypy.reporting.localization.Localization(__file__, 683, 13), '-', subscript_call_result_152853, sum_call_result_152860)
    
    # Assigning a type to the variable 'counts' (line 683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 4), 'counts', result_sub_152861)
    
    # Assigning a BinOp to a Name (line 684):
    
    # Assigning a BinOp to a Name (line 684):
    # Getting the type of 'counts' (line 684)
    counts_152862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 8), 'counts')
    int_152863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 18), 'int')
    # Applying the binary operator '//' (line 684)
    result_floordiv_152864 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 8), '//', counts_152862, int_152863)
    
    # Assigning a type to the variable 'h' (line 684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 4), 'h', result_floordiv_152864)
    
    # Assigning a ListComp to a Name (line 686):
    
    # Assigning a ListComp to a Name (line 686):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 686)
    # Processing the call arguments (line 686)
    # Getting the type of 'asorted' (line 686)
    asorted_152874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 52), 'asorted', False)
    # Obtaining the member 'shape' of a type (line 686)
    shape_152875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 52), asorted_152874, 'shape')
    # Processing the call keyword arguments (line 686)
    kwargs_152876 = {}
    # Getting the type of 'enumerate' (line 686)
    enumerate_152873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 42), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 686)
    enumerate_call_result_152877 = invoke(stypy.reporting.localization.Localization(__file__, 686, 42), enumerate_152873, *[shape_152875], **kwargs_152876)
    
    comprehension_152878 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 686, 17), enumerate_call_result_152877)
    # Assigning a type to the variable 'i' (line 686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 17), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 686, 17), comprehension_152878))
    # Assigning a type to the variable 'x' (line 686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 17), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 686, 17), comprehension_152878))
    
    # Getting the type of 'i' (line 687)
    i_152870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 20), 'i')
    # Getting the type of 'axis' (line 687)
    axis_152871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 25), 'axis')
    # Applying the binary operator '!=' (line 687)
    result_ne_152872 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 20), '!=', i_152870, axis_152871)
    
    
    # Call to arange(...): (line 686)
    # Processing the call arguments (line 686)
    # Getting the type of 'x' (line 686)
    x_152867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 27), 'x', False)
    # Processing the call keyword arguments (line 686)
    kwargs_152868 = {}
    # Getting the type of 'np' (line 686)
    np_152865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 17), 'np', False)
    # Obtaining the member 'arange' of a type (line 686)
    arange_152866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 17), np_152865, 'arange')
    # Calling arange(args, kwargs) (line 686)
    arange_call_result_152869 = invoke(stypy.reporting.localization.Localization(__file__, 686, 17), arange_152866, *[x_152867], **kwargs_152868)
    
    list_152879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 686, 17), list_152879, arange_call_result_152869)
    # Assigning a type to the variable 'axes_grid' (line 686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 4), 'axes_grid', list_152879)
    
    # Assigning a Call to a Name (line 688):
    
    # Assigning a Call to a Name (line 688):
    
    # Call to meshgrid(...): (line 688)
    # Getting the type of 'axes_grid' (line 688)
    axes_grid_152882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 23), 'axes_grid', False)
    # Processing the call keyword arguments (line 688)
    # Getting the type of 'True' (line 688)
    True_152883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 41), 'True', False)
    keyword_152884 = True_152883
    str_152885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 56), 'str', 'ij')
    keyword_152886 = str_152885
    kwargs_152887 = {'indexing': keyword_152886, 'sparse': keyword_152884}
    # Getting the type of 'np' (line 688)
    np_152880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 10), 'np', False)
    # Obtaining the member 'meshgrid' of a type (line 688)
    meshgrid_152881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 10), np_152880, 'meshgrid')
    # Calling meshgrid(args, kwargs) (line 688)
    meshgrid_call_result_152888 = invoke(stypy.reporting.localization.Localization(__file__, 688, 10), meshgrid_152881, *[axes_grid_152882], **kwargs_152887)
    
    # Assigning a type to the variable 'ind' (line 688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 4), 'ind', meshgrid_call_result_152888)
    
    # Call to insert(...): (line 690)
    # Processing the call arguments (line 690)
    # Getting the type of 'axis' (line 690)
    axis_152891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 15), 'axis', False)
    # Getting the type of 'h' (line 690)
    h_152892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 21), 'h', False)
    int_152893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 25), 'int')
    # Applying the binary operator '-' (line 690)
    result_sub_152894 = python_operator(stypy.reporting.localization.Localization(__file__, 690, 21), '-', h_152892, int_152893)
    
    # Processing the call keyword arguments (line 690)
    kwargs_152895 = {}
    # Getting the type of 'ind' (line 690)
    ind_152889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 4), 'ind', False)
    # Obtaining the member 'insert' of a type (line 690)
    insert_152890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 4), ind_152889, 'insert')
    # Calling insert(args, kwargs) (line 690)
    insert_call_result_152896 = invoke(stypy.reporting.localization.Localization(__file__, 690, 4), insert_152890, *[axis_152891, result_sub_152894], **kwargs_152895)
    
    
    # Assigning a Subscript to a Name (line 691):
    
    # Assigning a Subscript to a Name (line 691):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 691)
    ind_152897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 18), 'ind')
    # Getting the type of 'asorted' (line 691)
    asorted_152898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 10), 'asorted')
    # Obtaining the member '__getitem__' of a type (line 691)
    getitem___152899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 10), asorted_152898, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 691)
    subscript_call_result_152900 = invoke(stypy.reporting.localization.Localization(__file__, 691, 10), getitem___152899, ind_152897)
    
    # Assigning a type to the variable 'low' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'low', subscript_call_result_152900)
    
    # Assigning a Name to a Attribute (line 692):
    
    # Assigning a Name to a Attribute (line 692):
    # Getting the type of 'False' (line 692)
    False_152901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 22), 'False')
    # Getting the type of 'low' (line 692)
    low_152902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 4), 'low')
    # Setting the type of the member '_sharedmask' of a type (line 692)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 4), low_152902, '_sharedmask', False_152901)
    
    # Assigning a Name to a Subscript (line 693):
    
    # Assigning a Name to a Subscript (line 693):
    # Getting the type of 'h' (line 693)
    h_152903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 16), 'h')
    # Getting the type of 'ind' (line 693)
    ind_152904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 4), 'ind')
    # Getting the type of 'axis' (line 693)
    axis_152905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'axis')
    # Storing an element on a container (line 693)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 693, 4), ind_152904, (axis_152905, h_152903))
    
    # Assigning a Subscript to a Name (line 694):
    
    # Assigning a Subscript to a Name (line 694):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 694)
    ind_152906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 19), 'ind')
    # Getting the type of 'asorted' (line 694)
    asorted_152907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 11), 'asorted')
    # Obtaining the member '__getitem__' of a type (line 694)
    getitem___152908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 11), asorted_152907, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 694)
    subscript_call_result_152909 = invoke(stypy.reporting.localization.Localization(__file__, 694, 11), getitem___152908, ind_152906)
    
    # Assigning a type to the variable 'high' (line 694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 4), 'high', subscript_call_result_152909)
    
    # Assigning a Compare to a Name (line 696):
    
    # Assigning a Compare to a Name (line 696):
    
    # Getting the type of 'counts' (line 696)
    counts_152910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 10), 'counts')
    int_152911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 19), 'int')
    # Applying the binary operator '%' (line 696)
    result_mod_152912 = python_operator(stypy.reporting.localization.Localization(__file__, 696, 10), '%', counts_152910, int_152911)
    
    int_152913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 24), 'int')
    # Applying the binary operator '==' (line 696)
    result_eq_152914 = python_operator(stypy.reporting.localization.Localization(__file__, 696, 10), '==', result_mod_152912, int_152913)
    
    # Assigning a type to the variable 'odd' (line 696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 4), 'odd', result_eq_152914)
    
    
    # Getting the type of 'asorted' (line 697)
    asorted_152915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 7), 'asorted')
    # Obtaining the member 'ndim' of a type (line 697)
    ndim_152916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 7), asorted_152915, 'ndim')
    int_152917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 23), 'int')
    # Applying the binary operator '==' (line 697)
    result_eq_152918 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 7), '==', ndim_152916, int_152917)
    
    # Testing the type of an if condition (line 697)
    if_condition_152919 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 697, 4), result_eq_152918)
    # Assigning a type to the variable 'if_condition_152919' (line 697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 4), 'if_condition_152919', if_condition_152919)
    # SSA begins for if statement (line 697)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'odd' (line 698)
    odd_152920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 11), 'odd')
    # Testing the type of an if condition (line 698)
    if_condition_152921 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 698, 8), odd_152920)
    # Assigning a type to the variable 'if_condition_152921' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'if_condition_152921', if_condition_152921)
    # SSA begins for if statement (line 698)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 699):
    
    # Assigning a Name to a Name (line 699):
    # Getting the type of 'high' (line 699)
    high_152922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 18), 'high')
    # Assigning a type to the variable 'low' (line 699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 12), 'low', high_152922)
    # SSA join for if statement (line 698)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 697)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Subscript (line 701):
    
    # Assigning a Subscript to a Subscript (line 701):
    
    # Obtaining the type of the subscript
    # Getting the type of 'odd' (line 701)
    odd_152923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 24), 'odd')
    # Getting the type of 'high' (line 701)
    high_152924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 19), 'high')
    # Obtaining the member '__getitem__' of a type (line 701)
    getitem___152925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 19), high_152924, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 701)
    subscript_call_result_152926 = invoke(stypy.reporting.localization.Localization(__file__, 701, 19), getitem___152925, odd_152923)
    
    # Getting the type of 'low' (line 701)
    low_152927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'low')
    # Getting the type of 'odd' (line 701)
    odd_152928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'odd')
    # Storing an element on a container (line 701)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 8), low_152927, (odd_152928, subscript_call_result_152926))
    # SSA join for if statement (line 697)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to issubdtype(...): (line 703)
    # Processing the call arguments (line 703)
    # Getting the type of 'asorted' (line 703)
    asorted_152931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 21), 'asorted', False)
    # Obtaining the member 'dtype' of a type (line 703)
    dtype_152932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 21), asorted_152931, 'dtype')
    # Getting the type of 'np' (line 703)
    np_152933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 36), 'np', False)
    # Obtaining the member 'inexact' of a type (line 703)
    inexact_152934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 36), np_152933, 'inexact')
    # Processing the call keyword arguments (line 703)
    kwargs_152935 = {}
    # Getting the type of 'np' (line 703)
    np_152929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 7), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 703)
    issubdtype_152930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 7), np_152929, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 703)
    issubdtype_call_result_152936 = invoke(stypy.reporting.localization.Localization(__file__, 703, 7), issubdtype_152930, *[dtype_152932, inexact_152934], **kwargs_152935)
    
    # Testing the type of an if condition (line 703)
    if_condition_152937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 703, 4), issubdtype_call_result_152936)
    # Assigning a type to the variable 'if_condition_152937' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 4), 'if_condition_152937', if_condition_152937)
    # SSA begins for if statement (line 703)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 705):
    
    # Assigning a Call to a Name (line 705):
    
    # Call to sum(...): (line 705)
    # Processing the call arguments (line 705)
    
    # Obtaining an instance of the builtin type 'list' (line 705)
    list_152941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 705)
    # Adding element type (line 705)
    # Getting the type of 'low' (line 705)
    low_152942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 23), 'low', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 705, 22), list_152941, low_152942)
    # Adding element type (line 705)
    # Getting the type of 'high' (line 705)
    high_152943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 28), 'high', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 705, 22), list_152941, high_152943)
    
    # Processing the call keyword arguments (line 705)
    int_152944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 40), 'int')
    keyword_152945 = int_152944
    # Getting the type of 'out' (line 705)
    out_152946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 47), 'out', False)
    keyword_152947 = out_152946
    kwargs_152948 = {'out': keyword_152947, 'axis': keyword_152945}
    # Getting the type of 'np' (line 705)
    np_152938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 12), 'np', False)
    # Obtaining the member 'ma' of a type (line 705)
    ma_152939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 12), np_152938, 'ma')
    # Obtaining the member 'sum' of a type (line 705)
    sum_152940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 12), ma_152939, 'sum')
    # Calling sum(args, kwargs) (line 705)
    sum_call_result_152949 = invoke(stypy.reporting.localization.Localization(__file__, 705, 12), sum_152940, *[list_152941], **kwargs_152948)
    
    # Assigning a type to the variable 's' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 's', sum_call_result_152949)
    
    # Call to true_divide(...): (line 706)
    # Processing the call arguments (line 706)
    # Getting the type of 's' (line 706)
    s_152952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 23), 's', False)
    # Obtaining the member 'data' of a type (line 706)
    data_152953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 23), s_152952, 'data')
    float_152954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 31), 'float')
    # Processing the call keyword arguments (line 706)
    str_152955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 43), 'str', 'unsafe')
    keyword_152956 = str_152955
    # Getting the type of 's' (line 706)
    s_152957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 57), 's', False)
    # Obtaining the member 'data' of a type (line 706)
    data_152958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 57), s_152957, 'data')
    keyword_152959 = data_152958
    kwargs_152960 = {'casting': keyword_152956, 'out': keyword_152959}
    # Getting the type of 'np' (line 706)
    np_152950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 8), 'np', False)
    # Obtaining the member 'true_divide' of a type (line 706)
    true_divide_152951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 8), np_152950, 'true_divide')
    # Calling true_divide(args, kwargs) (line 706)
    true_divide_call_result_152961 = invoke(stypy.reporting.localization.Localization(__file__, 706, 8), true_divide_152951, *[data_152953, float_152954], **kwargs_152960)
    
    # SSA branch for the else part of an if statement (line 703)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 708):
    
    # Assigning a Call to a Name (line 708):
    
    # Call to mean(...): (line 708)
    # Processing the call arguments (line 708)
    
    # Obtaining an instance of the builtin type 'list' (line 708)
    list_152965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 708)
    # Adding element type (line 708)
    # Getting the type of 'low' (line 708)
    low_152966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 24), 'low', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 708, 23), list_152965, low_152966)
    # Adding element type (line 708)
    # Getting the type of 'high' (line 708)
    high_152967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 29), 'high', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 708, 23), list_152965, high_152967)
    
    # Processing the call keyword arguments (line 708)
    int_152968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 41), 'int')
    keyword_152969 = int_152968
    # Getting the type of 'out' (line 708)
    out_152970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 48), 'out', False)
    keyword_152971 = out_152970
    kwargs_152972 = {'out': keyword_152971, 'axis': keyword_152969}
    # Getting the type of 'np' (line 708)
    np_152962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 12), 'np', False)
    # Obtaining the member 'ma' of a type (line 708)
    ma_152963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 12), np_152962, 'ma')
    # Obtaining the member 'mean' of a type (line 708)
    mean_152964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 12), ma_152963, 'mean')
    # Calling mean(args, kwargs) (line 708)
    mean_call_result_152973 = invoke(stypy.reporting.localization.Localization(__file__, 708, 12), mean_152964, *[list_152965], **kwargs_152972)
    
    # Assigning a type to the variable 's' (line 708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 8), 's', mean_call_result_152973)
    # SSA join for if statement (line 703)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 's' (line 709)
    s_152974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 11), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 4), 'stypy_return_type', s_152974)
    
    # ################# End of 'median(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'median' in the type store
    # Getting the type of 'stypy_return_type' (line 606)
    stypy_return_type_152975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_152975)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'median'
    return stypy_return_type_152975

# Assigning a type to the variable 'median' (line 606)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 0), 'median', median)

@norecursion
def compress_nd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 712)
    None_152976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 24), 'None')
    defaults = [None_152976]
    # Create a new context for function 'compress_nd'
    module_type_store = module_type_store.open_function_context('compress_nd', 712, 0, False)
    
    # Passed parameters checking function
    compress_nd.stypy_localization = localization
    compress_nd.stypy_type_of_self = None
    compress_nd.stypy_type_store = module_type_store
    compress_nd.stypy_function_name = 'compress_nd'
    compress_nd.stypy_param_names_list = ['x', 'axis']
    compress_nd.stypy_varargs_param_name = None
    compress_nd.stypy_kwargs_param_name = None
    compress_nd.stypy_call_defaults = defaults
    compress_nd.stypy_call_varargs = varargs
    compress_nd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compress_nd', ['x', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compress_nd', localization, ['x', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compress_nd(...)' code ##################

    str_152977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, (-1)), 'str', 'Supress slices from multiple dimensions which contain masked values.\n\n    Parameters\n    ----------\n    x : array_like, MaskedArray\n        The array to operate on. If not a MaskedArray instance (or if no array\n        elements are masked, `x` is interpreted as a MaskedArray with `mask`\n        set to `nomask`.\n    axis : tuple of ints or int, optional\n        Which dimensions to supress slices from can be configured with this\n        parameter.\n        - If axis is a tuple of ints, those are the axes to supress slices from.\n        - If axis is an int, then that is the only axis to supress slices from.\n        - If axis is None, all axis are selected.\n\n    Returns\n    -------\n    compress_array : ndarray\n        The compressed array.\n    ')
    
    # Assigning a Call to a Name (line 733):
    
    # Assigning a Call to a Name (line 733):
    
    # Call to asarray(...): (line 733)
    # Processing the call arguments (line 733)
    # Getting the type of 'x' (line 733)
    x_152979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 16), 'x', False)
    # Processing the call keyword arguments (line 733)
    kwargs_152980 = {}
    # Getting the type of 'asarray' (line 733)
    asarray_152978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 733)
    asarray_call_result_152981 = invoke(stypy.reporting.localization.Localization(__file__, 733, 8), asarray_152978, *[x_152979], **kwargs_152980)
    
    # Assigning a type to the variable 'x' (line 733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 4), 'x', asarray_call_result_152981)
    
    # Assigning a Call to a Name (line 734):
    
    # Assigning a Call to a Name (line 734):
    
    # Call to getmask(...): (line 734)
    # Processing the call arguments (line 734)
    # Getting the type of 'x' (line 734)
    x_152983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 16), 'x', False)
    # Processing the call keyword arguments (line 734)
    kwargs_152984 = {}
    # Getting the type of 'getmask' (line 734)
    getmask_152982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 734)
    getmask_call_result_152985 = invoke(stypy.reporting.localization.Localization(__file__, 734, 8), getmask_152982, *[x_152983], **kwargs_152984)
    
    # Assigning a type to the variable 'm' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 4), 'm', getmask_call_result_152985)
    
    # Type idiom detected: calculating its left and rigth part (line 736)
    # Getting the type of 'int' (line 736)
    int_152986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 24), 'int')
    # Getting the type of 'axis' (line 736)
    axis_152987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 18), 'axis')
    
    (may_be_152988, more_types_in_union_152989) = may_be_subtype(int_152986, axis_152987)

    if may_be_152988:

        if more_types_in_union_152989:
            # Runtime conditional SSA (line 736)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'axis' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'axis', remove_not_subtype_from_union(axis_152987, int))
        
        # Assigning a Tuple to a Name (line 737):
        
        # Assigning a Tuple to a Name (line 737):
        
        # Obtaining an instance of the builtin type 'tuple' (line 737)
        tuple_152990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 737)
        # Adding element type (line 737)
        # Getting the type of 'axis' (line 737)
        axis_152991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 16), 'axis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 737, 16), tuple_152990, axis_152991)
        
        # Assigning a type to the variable 'axis' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 8), 'axis', tuple_152990)

        if more_types_in_union_152989:
            # Runtime conditional SSA for else branch (line 736)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_152988) or more_types_in_union_152989):
        # Assigning a type to the variable 'axis' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'axis', remove_subtype_from_union(axis_152987, int))
        
        # Type idiom detected: calculating its left and rigth part (line 738)
        # Getting the type of 'axis' (line 738)
        axis_152992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 9), 'axis')
        # Getting the type of 'None' (line 738)
        None_152993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 17), 'None')
        
        (may_be_152994, more_types_in_union_152995) = may_be_none(axis_152992, None_152993)

        if may_be_152994:

            if more_types_in_union_152995:
                # Runtime conditional SSA (line 738)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 739):
            
            # Assigning a Call to a Name (line 739):
            
            # Call to tuple(...): (line 739)
            # Processing the call arguments (line 739)
            
            # Call to range(...): (line 739)
            # Processing the call arguments (line 739)
            # Getting the type of 'x' (line 739)
            x_152998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 27), 'x', False)
            # Obtaining the member 'ndim' of a type (line 739)
            ndim_152999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 27), x_152998, 'ndim')
            # Processing the call keyword arguments (line 739)
            kwargs_153000 = {}
            # Getting the type of 'range' (line 739)
            range_152997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 21), 'range', False)
            # Calling range(args, kwargs) (line 739)
            range_call_result_153001 = invoke(stypy.reporting.localization.Localization(__file__, 739, 21), range_152997, *[ndim_152999], **kwargs_153000)
            
            # Processing the call keyword arguments (line 739)
            kwargs_153002 = {}
            # Getting the type of 'tuple' (line 739)
            tuple_152996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 15), 'tuple', False)
            # Calling tuple(args, kwargs) (line 739)
            tuple_call_result_153003 = invoke(stypy.reporting.localization.Localization(__file__, 739, 15), tuple_152996, *[range_call_result_153001], **kwargs_153002)
            
            # Assigning a type to the variable 'axis' (line 739)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'axis', tuple_call_result_153003)

            if more_types_in_union_152995:
                # Runtime conditional SSA for else branch (line 738)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_152994) or more_types_in_union_152995):
            
            # Type idiom detected: calculating its left and rigth part (line 740)
            # Getting the type of 'tuple' (line 740)
            tuple_153004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 30), 'tuple')
            # Getting the type of 'axis' (line 740)
            axis_153005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 24), 'axis')
            
            (may_be_153006, more_types_in_union_153007) = may_not_be_subtype(tuple_153004, axis_153005)

            if may_be_153006:

                if more_types_in_union_153007:
                    # Runtime conditional SSA (line 740)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'axis' (line 740)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 9), 'axis', remove_subtype_from_union(axis_153005, tuple))
                
                # Call to ValueError(...): (line 741)
                # Processing the call arguments (line 741)
                str_153009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 25), 'str', 'Invalid type for axis argument')
                # Processing the call keyword arguments (line 741)
                kwargs_153010 = {}
                # Getting the type of 'ValueError' (line 741)
                ValueError_153008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 14), 'ValueError', False)
                # Calling ValueError(args, kwargs) (line 741)
                ValueError_call_result_153011 = invoke(stypy.reporting.localization.Localization(__file__, 741, 14), ValueError_153008, *[str_153009], **kwargs_153010)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 741, 8), ValueError_call_result_153011, 'raise parameter', BaseException)

                if more_types_in_union_153007:
                    # SSA join for if statement (line 740)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_152994 and more_types_in_union_152995):
                # SSA join for if statement (line 738)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_152988 and more_types_in_union_152989):
            # SSA join for if statement (line 736)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a ListComp to a Name (line 743):
    
    # Assigning a ListComp to a Name (line 743):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'axis' (line 743)
    axis_153021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 52), 'axis')
    comprehension_153022 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 743, 12), axis_153021)
    # Assigning a type to the variable 'ax' (line 743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'ax', comprehension_153022)
    
    
    # Getting the type of 'ax' (line 743)
    ax_153012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 27), 'ax')
    int_153013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 32), 'int')
    # Applying the binary operator '<' (line 743)
    result_lt_153014 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 27), '<', ax_153012, int_153013)
    
    # Testing the type of an if expression (line 743)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 743, 12), result_lt_153014)
    # SSA begins for if expression (line 743)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'ax' (line 743)
    ax_153015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'ax')
    # Getting the type of 'x' (line 743)
    x_153016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 17), 'x')
    # Obtaining the member 'ndim' of a type (line 743)
    ndim_153017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 17), x_153016, 'ndim')
    # Applying the binary operator '+' (line 743)
    result_add_153018 = python_operator(stypy.reporting.localization.Localization(__file__, 743, 12), '+', ax_153015, ndim_153017)
    
    # SSA branch for the else part of an if expression (line 743)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'ax' (line 743)
    ax_153019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 39), 'ax')
    # SSA join for if expression (line 743)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_153020 = union_type.UnionType.add(result_add_153018, ax_153019)
    
    list_153023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 743, 12), list_153023, if_exp_153020)
    # Assigning a type to the variable 'axis' (line 743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'axis', list_153023)
    
    
    
    # Call to all(...): (line 744)
    # Processing the call arguments (line 744)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 744, 15, True)
    # Calculating comprehension expression
    # Getting the type of 'axis' (line 744)
    axis_153032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 42), 'axis', False)
    comprehension_153033 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 744, 15), axis_153032)
    # Assigning a type to the variable 'ax' (line 744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 15), 'ax', comprehension_153033)
    
    int_153025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 15), 'int')
    # Getting the type of 'ax' (line 744)
    ax_153026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 20), 'ax', False)
    # Applying the binary operator '<=' (line 744)
    result_le_153027 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 15), '<=', int_153025, ax_153026)
    # Getting the type of 'x' (line 744)
    x_153028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 25), 'x', False)
    # Obtaining the member 'ndim' of a type (line 744)
    ndim_153029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 25), x_153028, 'ndim')
    # Applying the binary operator '<' (line 744)
    result_lt_153030 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 15), '<', ax_153026, ndim_153029)
    # Applying the binary operator '&' (line 744)
    result_and__153031 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 15), '&', result_le_153027, result_lt_153030)
    
    list_153034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 15), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 744, 15), list_153034, result_and__153031)
    # Processing the call keyword arguments (line 744)
    kwargs_153035 = {}
    # Getting the type of 'all' (line 744)
    all_153024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 11), 'all', False)
    # Calling all(args, kwargs) (line 744)
    all_call_result_153036 = invoke(stypy.reporting.localization.Localization(__file__, 744, 11), all_153024, *[list_153034], **kwargs_153035)
    
    # Applying the 'not' unary operator (line 744)
    result_not__153037 = python_operator(stypy.reporting.localization.Localization(__file__, 744, 7), 'not', all_call_result_153036)
    
    # Testing the type of an if condition (line 744)
    if_condition_153038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 744, 4), result_not__153037)
    # Assigning a type to the variable 'if_condition_153038' (line 744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 4), 'if_condition_153038', if_condition_153038)
    # SSA begins for if statement (line 744)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 745)
    # Processing the call arguments (line 745)
    str_153040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 25), 'str', "'axis' entry is out of bounds")
    # Processing the call keyword arguments (line 745)
    kwargs_153041 = {}
    # Getting the type of 'ValueError' (line 745)
    ValueError_153039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 745)
    ValueError_call_result_153042 = invoke(stypy.reporting.localization.Localization(__file__, 745, 14), ValueError_153039, *[str_153040], **kwargs_153041)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 745, 8), ValueError_call_result_153042, 'raise parameter', BaseException)
    # SSA join for if statement (line 744)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 746)
    # Processing the call arguments (line 746)
    # Getting the type of 'axis' (line 746)
    axis_153044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 11), 'axis', False)
    # Processing the call keyword arguments (line 746)
    kwargs_153045 = {}
    # Getting the type of 'len' (line 746)
    len_153043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 7), 'len', False)
    # Calling len(args, kwargs) (line 746)
    len_call_result_153046 = invoke(stypy.reporting.localization.Localization(__file__, 746, 7), len_153043, *[axis_153044], **kwargs_153045)
    
    
    # Call to len(...): (line 746)
    # Processing the call arguments (line 746)
    
    # Call to set(...): (line 746)
    # Processing the call arguments (line 746)
    # Getting the type of 'axis' (line 746)
    axis_153049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 28), 'axis', False)
    # Processing the call keyword arguments (line 746)
    kwargs_153050 = {}
    # Getting the type of 'set' (line 746)
    set_153048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 24), 'set', False)
    # Calling set(args, kwargs) (line 746)
    set_call_result_153051 = invoke(stypy.reporting.localization.Localization(__file__, 746, 24), set_153048, *[axis_153049], **kwargs_153050)
    
    # Processing the call keyword arguments (line 746)
    kwargs_153052 = {}
    # Getting the type of 'len' (line 746)
    len_153047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 20), 'len', False)
    # Calling len(args, kwargs) (line 746)
    len_call_result_153053 = invoke(stypy.reporting.localization.Localization(__file__, 746, 20), len_153047, *[set_call_result_153051], **kwargs_153052)
    
    # Applying the binary operator '!=' (line 746)
    result_ne_153054 = python_operator(stypy.reporting.localization.Localization(__file__, 746, 7), '!=', len_call_result_153046, len_call_result_153053)
    
    # Testing the type of an if condition (line 746)
    if_condition_153055 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 746, 4), result_ne_153054)
    # Assigning a type to the variable 'if_condition_153055' (line 746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 4), 'if_condition_153055', if_condition_153055)
    # SSA begins for if statement (line 746)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 747)
    # Processing the call arguments (line 747)
    str_153057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, 25), 'str', "duplicate value in 'axis'")
    # Processing the call keyword arguments (line 747)
    kwargs_153058 = {}
    # Getting the type of 'ValueError' (line 747)
    ValueError_153056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 747)
    ValueError_call_result_153059 = invoke(stypy.reporting.localization.Localization(__file__, 747, 14), ValueError_153056, *[str_153057], **kwargs_153058)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 747, 8), ValueError_call_result_153059, 'raise parameter', BaseException)
    # SSA join for if statement (line 746)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm' (line 749)
    m_153060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 7), 'm')
    # Getting the type of 'nomask' (line 749)
    nomask_153061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 12), 'nomask')
    # Applying the binary operator 'is' (line 749)
    result_is__153062 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 7), 'is', m_153060, nomask_153061)
    
    
    
    # Call to any(...): (line 749)
    # Processing the call keyword arguments (line 749)
    kwargs_153065 = {}
    # Getting the type of 'm' (line 749)
    m_153063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 26), 'm', False)
    # Obtaining the member 'any' of a type (line 749)
    any_153064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 26), m_153063, 'any')
    # Calling any(args, kwargs) (line 749)
    any_call_result_153066 = invoke(stypy.reporting.localization.Localization(__file__, 749, 26), any_153064, *[], **kwargs_153065)
    
    # Applying the 'not' unary operator (line 749)
    result_not__153067 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 22), 'not', any_call_result_153066)
    
    # Applying the binary operator 'or' (line 749)
    result_or_keyword_153068 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 7), 'or', result_is__153062, result_not__153067)
    
    # Testing the type of an if condition (line 749)
    if_condition_153069 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 749, 4), result_or_keyword_153068)
    # Assigning a type to the variable 'if_condition_153069' (line 749)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 4), 'if_condition_153069', if_condition_153069)
    # SSA begins for if statement (line 749)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'x' (line 750)
    x_153070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 15), 'x')
    # Obtaining the member '_data' of a type (line 750)
    _data_153071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 15), x_153070, '_data')
    # Assigning a type to the variable 'stypy_return_type' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'stypy_return_type', _data_153071)
    # SSA join for if statement (line 749)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to all(...): (line 752)
    # Processing the call keyword arguments (line 752)
    kwargs_153074 = {}
    # Getting the type of 'm' (line 752)
    m_153072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 7), 'm', False)
    # Obtaining the member 'all' of a type (line 752)
    all_153073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 7), m_153072, 'all')
    # Calling all(args, kwargs) (line 752)
    all_call_result_153075 = invoke(stypy.reporting.localization.Localization(__file__, 752, 7), all_153073, *[], **kwargs_153074)
    
    # Testing the type of an if condition (line 752)
    if_condition_153076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 752, 4), all_call_result_153075)
    # Assigning a type to the variable 'if_condition_153076' (line 752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 4), 'if_condition_153076', if_condition_153076)
    # SSA begins for if statement (line 752)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to nxarray(...): (line 753)
    # Processing the call arguments (line 753)
    
    # Obtaining an instance of the builtin type 'list' (line 753)
    list_153078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 753)
    
    # Processing the call keyword arguments (line 753)
    kwargs_153079 = {}
    # Getting the type of 'nxarray' (line 753)
    nxarray_153077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 15), 'nxarray', False)
    # Calling nxarray(args, kwargs) (line 753)
    nxarray_call_result_153080 = invoke(stypy.reporting.localization.Localization(__file__, 753, 15), nxarray_153077, *[list_153078], **kwargs_153079)
    
    # Assigning a type to the variable 'stypy_return_type' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 8), 'stypy_return_type', nxarray_call_result_153080)
    # SSA join for if statement (line 752)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 755):
    
    # Assigning a Attribute to a Name (line 755):
    # Getting the type of 'x' (line 755)
    x_153081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 11), 'x')
    # Obtaining the member '_data' of a type (line 755)
    _data_153082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 11), x_153081, '_data')
    # Assigning a type to the variable 'data' (line 755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'data', _data_153082)
    
    # Getting the type of 'axis' (line 756)
    axis_153083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 14), 'axis')
    # Testing the type of a for loop iterable (line 756)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 756, 4), axis_153083)
    # Getting the type of the for loop variable (line 756)
    for_loop_var_153084 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 756, 4), axis_153083)
    # Assigning a type to the variable 'ax' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'ax', for_loop_var_153084)
    # SSA begins for a for statement (line 756)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 757):
    
    # Assigning a Call to a Name (line 757):
    
    # Call to tuple(...): (line 757)
    # Processing the call arguments (line 757)
    
    # Call to list(...): (line 757)
    # Processing the call arguments (line 757)
    
    # Call to range(...): (line 757)
    # Processing the call arguments (line 757)
    # Getting the type of 'ax' (line 757)
    ax_153088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 32), 'ax', False)
    # Processing the call keyword arguments (line 757)
    kwargs_153089 = {}
    # Getting the type of 'range' (line 757)
    range_153087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 26), 'range', False)
    # Calling range(args, kwargs) (line 757)
    range_call_result_153090 = invoke(stypy.reporting.localization.Localization(__file__, 757, 26), range_153087, *[ax_153088], **kwargs_153089)
    
    # Processing the call keyword arguments (line 757)
    kwargs_153091 = {}
    # Getting the type of 'list' (line 757)
    list_153086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 21), 'list', False)
    # Calling list(args, kwargs) (line 757)
    list_call_result_153092 = invoke(stypy.reporting.localization.Localization(__file__, 757, 21), list_153086, *[range_call_result_153090], **kwargs_153091)
    
    
    # Call to list(...): (line 757)
    # Processing the call arguments (line 757)
    
    # Call to range(...): (line 757)
    # Processing the call arguments (line 757)
    # Getting the type of 'ax' (line 757)
    ax_153095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 50), 'ax', False)
    int_153096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 757, 55), 'int')
    # Applying the binary operator '+' (line 757)
    result_add_153097 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 50), '+', ax_153095, int_153096)
    
    # Getting the type of 'x' (line 757)
    x_153098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 58), 'x', False)
    # Obtaining the member 'ndim' of a type (line 757)
    ndim_153099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 58), x_153098, 'ndim')
    # Processing the call keyword arguments (line 757)
    kwargs_153100 = {}
    # Getting the type of 'range' (line 757)
    range_153094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 44), 'range', False)
    # Calling range(args, kwargs) (line 757)
    range_call_result_153101 = invoke(stypy.reporting.localization.Localization(__file__, 757, 44), range_153094, *[result_add_153097, ndim_153099], **kwargs_153100)
    
    # Processing the call keyword arguments (line 757)
    kwargs_153102 = {}
    # Getting the type of 'list' (line 757)
    list_153093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 39), 'list', False)
    # Calling list(args, kwargs) (line 757)
    list_call_result_153103 = invoke(stypy.reporting.localization.Localization(__file__, 757, 39), list_153093, *[range_call_result_153101], **kwargs_153102)
    
    # Applying the binary operator '+' (line 757)
    result_add_153104 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 21), '+', list_call_result_153092, list_call_result_153103)
    
    # Processing the call keyword arguments (line 757)
    kwargs_153105 = {}
    # Getting the type of 'tuple' (line 757)
    tuple_153085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 15), 'tuple', False)
    # Calling tuple(args, kwargs) (line 757)
    tuple_call_result_153106 = invoke(stypy.reporting.localization.Localization(__file__, 757, 15), tuple_153085, *[result_add_153104], **kwargs_153105)
    
    # Assigning a type to the variable 'axes' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'axes', tuple_call_result_153106)
    
    # Assigning a Subscript to a Name (line 758):
    
    # Assigning a Subscript to a Name (line 758):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 758)
    tuple_153107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 758)
    # Adding element type (line 758)
    
    # Call to slice(...): (line 758)
    # Processing the call arguments (line 758)
    # Getting the type of 'None' (line 758)
    None_153109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 27), 'None', False)
    # Processing the call keyword arguments (line 758)
    kwargs_153110 = {}
    # Getting the type of 'slice' (line 758)
    slice_153108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 21), 'slice', False)
    # Calling slice(args, kwargs) (line 758)
    slice_call_result_153111 = invoke(stypy.reporting.localization.Localization(__file__, 758, 21), slice_153108, *[None_153109], **kwargs_153110)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 21), tuple_153107, slice_call_result_153111)
    
    # Getting the type of 'ax' (line 758)
    ax_153112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 35), 'ax')
    # Applying the binary operator '*' (line 758)
    result_mul_153113 = python_operator(stypy.reporting.localization.Localization(__file__, 758, 20), '*', tuple_153107, ax_153112)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 758)
    tuple_153114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 41), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 758)
    # Adding element type (line 758)
    
    
    # Call to any(...): (line 758)
    # Processing the call keyword arguments (line 758)
    # Getting the type of 'axes' (line 758)
    axes_153117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 53), 'axes', False)
    keyword_153118 = axes_153117
    kwargs_153119 = {'axis': keyword_153118}
    # Getting the type of 'm' (line 758)
    m_153115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 42), 'm', False)
    # Obtaining the member 'any' of a type (line 758)
    any_153116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 42), m_153115, 'any')
    # Calling any(args, kwargs) (line 758)
    any_call_result_153120 = invoke(stypy.reporting.localization.Localization(__file__, 758, 42), any_153116, *[], **kwargs_153119)
    
    # Applying the '~' unary operator (line 758)
    result_inv_153121 = python_operator(stypy.reporting.localization.Localization(__file__, 758, 41), '~', any_call_result_153120)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 41), tuple_153114, result_inv_153121)
    
    # Applying the binary operator '+' (line 758)
    result_add_153122 = python_operator(stypy.reporting.localization.Localization(__file__, 758, 20), '+', result_mul_153113, tuple_153114)
    
    # Getting the type of 'data' (line 758)
    data_153123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 15), 'data')
    # Obtaining the member '__getitem__' of a type (line 758)
    getitem___153124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 15), data_153123, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 758)
    subscript_call_result_153125 = invoke(stypy.reporting.localization.Localization(__file__, 758, 15), getitem___153124, result_add_153122)
    
    # Assigning a type to the variable 'data' (line 758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 8), 'data', subscript_call_result_153125)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'data' (line 759)
    data_153126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 11), 'data')
    # Assigning a type to the variable 'stypy_return_type' (line 759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 4), 'stypy_return_type', data_153126)
    
    # ################# End of 'compress_nd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compress_nd' in the type store
    # Getting the type of 'stypy_return_type' (line 712)
    stypy_return_type_153127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153127)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compress_nd'
    return stypy_return_type_153127

# Assigning a type to the variable 'compress_nd' (line 712)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 0), 'compress_nd', compress_nd)

@norecursion
def compress_rowcols(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 761)
    None_153128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 29), 'None')
    defaults = [None_153128]
    # Create a new context for function 'compress_rowcols'
    module_type_store = module_type_store.open_function_context('compress_rowcols', 761, 0, False)
    
    # Passed parameters checking function
    compress_rowcols.stypy_localization = localization
    compress_rowcols.stypy_type_of_self = None
    compress_rowcols.stypy_type_store = module_type_store
    compress_rowcols.stypy_function_name = 'compress_rowcols'
    compress_rowcols.stypy_param_names_list = ['x', 'axis']
    compress_rowcols.stypy_varargs_param_name = None
    compress_rowcols.stypy_kwargs_param_name = None
    compress_rowcols.stypy_call_defaults = defaults
    compress_rowcols.stypy_call_varargs = varargs
    compress_rowcols.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compress_rowcols', ['x', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compress_rowcols', localization, ['x', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compress_rowcols(...)' code ##################

    str_153129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, (-1)), 'str', '\n    Suppress the rows and/or columns of a 2-D array that contain\n    masked values.\n\n    The suppression behavior is selected with the `axis` parameter.\n\n    - If axis is None, both rows and columns are suppressed.\n    - If axis is 0, only rows are suppressed.\n    - If axis is 1 or -1, only columns are suppressed.\n\n    Parameters\n    ----------\n    x : array_like, MaskedArray\n        The array to operate on.  If not a MaskedArray instance (or if no array\n        elements are masked), `x` is interpreted as a MaskedArray with\n        `mask` set to `nomask`. Must be a 2D array.\n    axis : int, optional\n        Axis along which to perform the operation. Default is None.\n\n    Returns\n    -------\n    compressed_array : ndarray\n        The compressed array.\n\n    Examples\n    --------\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],\n    ...                                                   [1, 0, 0],\n    ...                                                   [0, 0, 0]])\n    >>> x\n    masked_array(data =\n     [[-- 1 2]\n     [-- 4 5]\n     [6 7 8]],\n                 mask =\n     [[ True False False]\n     [ True False False]\n     [False False False]],\n           fill_value = 999999)\n\n    >>> np.ma.compress_rowcols(x)\n    array([[7, 8]])\n    >>> np.ma.compress_rowcols(x, 0)\n    array([[6, 7, 8]])\n    >>> np.ma.compress_rowcols(x, 1)\n    array([[1, 2],\n           [4, 5],\n           [7, 8]])\n\n    ')
    
    
    
    # Call to asarray(...): (line 812)
    # Processing the call arguments (line 812)
    # Getting the type of 'x' (line 812)
    x_153131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 15), 'x', False)
    # Processing the call keyword arguments (line 812)
    kwargs_153132 = {}
    # Getting the type of 'asarray' (line 812)
    asarray_153130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 7), 'asarray', False)
    # Calling asarray(args, kwargs) (line 812)
    asarray_call_result_153133 = invoke(stypy.reporting.localization.Localization(__file__, 812, 7), asarray_153130, *[x_153131], **kwargs_153132)
    
    # Obtaining the member 'ndim' of a type (line 812)
    ndim_153134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 7), asarray_call_result_153133, 'ndim')
    int_153135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 26), 'int')
    # Applying the binary operator '!=' (line 812)
    result_ne_153136 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 7), '!=', ndim_153134, int_153135)
    
    # Testing the type of an if condition (line 812)
    if_condition_153137 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 812, 4), result_ne_153136)
    # Assigning a type to the variable 'if_condition_153137' (line 812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 4), 'if_condition_153137', if_condition_153137)
    # SSA begins for if statement (line 812)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to NotImplementedError(...): (line 813)
    # Processing the call arguments (line 813)
    str_153139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 34), 'str', 'compress_rowcols works for 2D arrays only.')
    # Processing the call keyword arguments (line 813)
    kwargs_153140 = {}
    # Getting the type of 'NotImplementedError' (line 813)
    NotImplementedError_153138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 813)
    NotImplementedError_call_result_153141 = invoke(stypy.reporting.localization.Localization(__file__, 813, 14), NotImplementedError_153138, *[str_153139], **kwargs_153140)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 813, 8), NotImplementedError_call_result_153141, 'raise parameter', BaseException)
    # SSA join for if statement (line 812)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to compress_nd(...): (line 814)
    # Processing the call arguments (line 814)
    # Getting the type of 'x' (line 814)
    x_153143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 23), 'x', False)
    # Processing the call keyword arguments (line 814)
    # Getting the type of 'axis' (line 814)
    axis_153144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 31), 'axis', False)
    keyword_153145 = axis_153144
    kwargs_153146 = {'axis': keyword_153145}
    # Getting the type of 'compress_nd' (line 814)
    compress_nd_153142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 11), 'compress_nd', False)
    # Calling compress_nd(args, kwargs) (line 814)
    compress_nd_call_result_153147 = invoke(stypy.reporting.localization.Localization(__file__, 814, 11), compress_nd_153142, *[x_153143], **kwargs_153146)
    
    # Assigning a type to the variable 'stypy_return_type' (line 814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'stypy_return_type', compress_nd_call_result_153147)
    
    # ################# End of 'compress_rowcols(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compress_rowcols' in the type store
    # Getting the type of 'stypy_return_type' (line 761)
    stypy_return_type_153148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153148)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compress_rowcols'
    return stypy_return_type_153148

# Assigning a type to the variable 'compress_rowcols' (line 761)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), 'compress_rowcols', compress_rowcols)

@norecursion
def compress_rows(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'compress_rows'
    module_type_store = module_type_store.open_function_context('compress_rows', 817, 0, False)
    
    # Passed parameters checking function
    compress_rows.stypy_localization = localization
    compress_rows.stypy_type_of_self = None
    compress_rows.stypy_type_store = module_type_store
    compress_rows.stypy_function_name = 'compress_rows'
    compress_rows.stypy_param_names_list = ['a']
    compress_rows.stypy_varargs_param_name = None
    compress_rows.stypy_kwargs_param_name = None
    compress_rows.stypy_call_defaults = defaults
    compress_rows.stypy_call_varargs = varargs
    compress_rows.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compress_rows', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compress_rows', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compress_rows(...)' code ##################

    str_153149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, (-1)), 'str', '\n    Suppress whole rows of a 2-D array that contain masked values.\n\n    This is equivalent to ``np.ma.compress_rowcols(a, 0)``, see\n    `extras.compress_rowcols` for details.\n\n    See Also\n    --------\n    extras.compress_rowcols\n\n    ')
    
    # Assigning a Call to a Name (line 829):
    
    # Assigning a Call to a Name (line 829):
    
    # Call to asarray(...): (line 829)
    # Processing the call arguments (line 829)
    # Getting the type of 'a' (line 829)
    a_153151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 16), 'a', False)
    # Processing the call keyword arguments (line 829)
    kwargs_153152 = {}
    # Getting the type of 'asarray' (line 829)
    asarray_153150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 829)
    asarray_call_result_153153 = invoke(stypy.reporting.localization.Localization(__file__, 829, 8), asarray_153150, *[a_153151], **kwargs_153152)
    
    # Assigning a type to the variable 'a' (line 829)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 4), 'a', asarray_call_result_153153)
    
    
    # Getting the type of 'a' (line 830)
    a_153154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 7), 'a')
    # Obtaining the member 'ndim' of a type (line 830)
    ndim_153155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 7), a_153154, 'ndim')
    int_153156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 17), 'int')
    # Applying the binary operator '!=' (line 830)
    result_ne_153157 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 7), '!=', ndim_153155, int_153156)
    
    # Testing the type of an if condition (line 830)
    if_condition_153158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 830, 4), result_ne_153157)
    # Assigning a type to the variable 'if_condition_153158' (line 830)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 4), 'if_condition_153158', if_condition_153158)
    # SSA begins for if statement (line 830)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to NotImplementedError(...): (line 831)
    # Processing the call arguments (line 831)
    str_153160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 34), 'str', 'compress_rows works for 2D arrays only.')
    # Processing the call keyword arguments (line 831)
    kwargs_153161 = {}
    # Getting the type of 'NotImplementedError' (line 831)
    NotImplementedError_153159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 831)
    NotImplementedError_call_result_153162 = invoke(stypy.reporting.localization.Localization(__file__, 831, 14), NotImplementedError_153159, *[str_153160], **kwargs_153161)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 831, 8), NotImplementedError_call_result_153162, 'raise parameter', BaseException)
    # SSA join for if statement (line 830)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to compress_rowcols(...): (line 832)
    # Processing the call arguments (line 832)
    # Getting the type of 'a' (line 832)
    a_153164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 28), 'a', False)
    int_153165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 31), 'int')
    # Processing the call keyword arguments (line 832)
    kwargs_153166 = {}
    # Getting the type of 'compress_rowcols' (line 832)
    compress_rowcols_153163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 11), 'compress_rowcols', False)
    # Calling compress_rowcols(args, kwargs) (line 832)
    compress_rowcols_call_result_153167 = invoke(stypy.reporting.localization.Localization(__file__, 832, 11), compress_rowcols_153163, *[a_153164, int_153165], **kwargs_153166)
    
    # Assigning a type to the variable 'stypy_return_type' (line 832)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 4), 'stypy_return_type', compress_rowcols_call_result_153167)
    
    # ################# End of 'compress_rows(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compress_rows' in the type store
    # Getting the type of 'stypy_return_type' (line 817)
    stypy_return_type_153168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153168)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compress_rows'
    return stypy_return_type_153168

# Assigning a type to the variable 'compress_rows' (line 817)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 0), 'compress_rows', compress_rows)

@norecursion
def compress_cols(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'compress_cols'
    module_type_store = module_type_store.open_function_context('compress_cols', 834, 0, False)
    
    # Passed parameters checking function
    compress_cols.stypy_localization = localization
    compress_cols.stypy_type_of_self = None
    compress_cols.stypy_type_store = module_type_store
    compress_cols.stypy_function_name = 'compress_cols'
    compress_cols.stypy_param_names_list = ['a']
    compress_cols.stypy_varargs_param_name = None
    compress_cols.stypy_kwargs_param_name = None
    compress_cols.stypy_call_defaults = defaults
    compress_cols.stypy_call_varargs = varargs
    compress_cols.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'compress_cols', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'compress_cols', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'compress_cols(...)' code ##################

    str_153169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, (-1)), 'str', '\n    Suppress whole columns of a 2-D array that contain masked values.\n\n    This is equivalent to ``np.ma.compress_rowcols(a, 1)``, see\n    `extras.compress_rowcols` for details.\n\n    See Also\n    --------\n    extras.compress_rowcols\n\n    ')
    
    # Assigning a Call to a Name (line 846):
    
    # Assigning a Call to a Name (line 846):
    
    # Call to asarray(...): (line 846)
    # Processing the call arguments (line 846)
    # Getting the type of 'a' (line 846)
    a_153171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 16), 'a', False)
    # Processing the call keyword arguments (line 846)
    kwargs_153172 = {}
    # Getting the type of 'asarray' (line 846)
    asarray_153170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 846)
    asarray_call_result_153173 = invoke(stypy.reporting.localization.Localization(__file__, 846, 8), asarray_153170, *[a_153171], **kwargs_153172)
    
    # Assigning a type to the variable 'a' (line 846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 4), 'a', asarray_call_result_153173)
    
    
    # Getting the type of 'a' (line 847)
    a_153174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 7), 'a')
    # Obtaining the member 'ndim' of a type (line 847)
    ndim_153175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 847, 7), a_153174, 'ndim')
    int_153176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 847, 17), 'int')
    # Applying the binary operator '!=' (line 847)
    result_ne_153177 = python_operator(stypy.reporting.localization.Localization(__file__, 847, 7), '!=', ndim_153175, int_153176)
    
    # Testing the type of an if condition (line 847)
    if_condition_153178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 847, 4), result_ne_153177)
    # Assigning a type to the variable 'if_condition_153178' (line 847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 4), 'if_condition_153178', if_condition_153178)
    # SSA begins for if statement (line 847)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to NotImplementedError(...): (line 848)
    # Processing the call arguments (line 848)
    str_153180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 34), 'str', 'compress_cols works for 2D arrays only.')
    # Processing the call keyword arguments (line 848)
    kwargs_153181 = {}
    # Getting the type of 'NotImplementedError' (line 848)
    NotImplementedError_153179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 848)
    NotImplementedError_call_result_153182 = invoke(stypy.reporting.localization.Localization(__file__, 848, 14), NotImplementedError_153179, *[str_153180], **kwargs_153181)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 848, 8), NotImplementedError_call_result_153182, 'raise parameter', BaseException)
    # SSA join for if statement (line 847)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to compress_rowcols(...): (line 849)
    # Processing the call arguments (line 849)
    # Getting the type of 'a' (line 849)
    a_153184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 28), 'a', False)
    int_153185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 849, 31), 'int')
    # Processing the call keyword arguments (line 849)
    kwargs_153186 = {}
    # Getting the type of 'compress_rowcols' (line 849)
    compress_rowcols_153183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 11), 'compress_rowcols', False)
    # Calling compress_rowcols(args, kwargs) (line 849)
    compress_rowcols_call_result_153187 = invoke(stypy.reporting.localization.Localization(__file__, 849, 11), compress_rowcols_153183, *[a_153184, int_153185], **kwargs_153186)
    
    # Assigning a type to the variable 'stypy_return_type' (line 849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 4), 'stypy_return_type', compress_rowcols_call_result_153187)
    
    # ################# End of 'compress_cols(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'compress_cols' in the type store
    # Getting the type of 'stypy_return_type' (line 834)
    stypy_return_type_153188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153188)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'compress_cols'
    return stypy_return_type_153188

# Assigning a type to the variable 'compress_cols' (line 834)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 0), 'compress_cols', compress_cols)

@norecursion
def mask_rows(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 851)
    None_153189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 22), 'None')
    defaults = [None_153189]
    # Create a new context for function 'mask_rows'
    module_type_store = module_type_store.open_function_context('mask_rows', 851, 0, False)
    
    # Passed parameters checking function
    mask_rows.stypy_localization = localization
    mask_rows.stypy_type_of_self = None
    mask_rows.stypy_type_store = module_type_store
    mask_rows.stypy_function_name = 'mask_rows'
    mask_rows.stypy_param_names_list = ['a', 'axis']
    mask_rows.stypy_varargs_param_name = None
    mask_rows.stypy_kwargs_param_name = None
    mask_rows.stypy_call_defaults = defaults
    mask_rows.stypy_call_varargs = varargs
    mask_rows.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mask_rows', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mask_rows', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mask_rows(...)' code ##################

    str_153190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, (-1)), 'str', '\n    Mask rows of a 2D array that contain masked values.\n\n    This function is a shortcut to ``mask_rowcols`` with `axis` equal to 0.\n\n    See Also\n    --------\n    mask_rowcols : Mask rows and/or columns of a 2D array.\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.zeros((3, 3), dtype=np.int)\n    >>> a[1, 1] = 1\n    >>> a\n    array([[0, 0, 0],\n           [0, 1, 0],\n           [0, 0, 0]])\n    >>> a = ma.masked_equal(a, 1)\n    >>> a\n    masked_array(data =\n     [[0 0 0]\n     [0 -- 0]\n     [0 0 0]],\n          mask =\n     [[False False False]\n     [False  True False]\n     [False False False]],\n          fill_value=999999)\n    >>> ma.mask_rows(a)\n    masked_array(data =\n     [[0 0 0]\n     [-- -- --]\n     [0 0 0]],\n          mask =\n     [[False False False]\n     [ True  True  True]\n     [False False False]],\n          fill_value=999999)\n\n    ')
    
    # Call to mask_rowcols(...): (line 894)
    # Processing the call arguments (line 894)
    # Getting the type of 'a' (line 894)
    a_153192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 24), 'a', False)
    int_153193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 27), 'int')
    # Processing the call keyword arguments (line 894)
    kwargs_153194 = {}
    # Getting the type of 'mask_rowcols' (line 894)
    mask_rowcols_153191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 11), 'mask_rowcols', False)
    # Calling mask_rowcols(args, kwargs) (line 894)
    mask_rowcols_call_result_153195 = invoke(stypy.reporting.localization.Localization(__file__, 894, 11), mask_rowcols_153191, *[a_153192, int_153193], **kwargs_153194)
    
    # Assigning a type to the variable 'stypy_return_type' (line 894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 4), 'stypy_return_type', mask_rowcols_call_result_153195)
    
    # ################# End of 'mask_rows(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mask_rows' in the type store
    # Getting the type of 'stypy_return_type' (line 851)
    stypy_return_type_153196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153196)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mask_rows'
    return stypy_return_type_153196

# Assigning a type to the variable 'mask_rows' (line 851)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 0), 'mask_rows', mask_rows)

@norecursion
def mask_cols(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 896)
    None_153197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 22), 'None')
    defaults = [None_153197]
    # Create a new context for function 'mask_cols'
    module_type_store = module_type_store.open_function_context('mask_cols', 896, 0, False)
    
    # Passed parameters checking function
    mask_cols.stypy_localization = localization
    mask_cols.stypy_type_of_self = None
    mask_cols.stypy_type_store = module_type_store
    mask_cols.stypy_function_name = 'mask_cols'
    mask_cols.stypy_param_names_list = ['a', 'axis']
    mask_cols.stypy_varargs_param_name = None
    mask_cols.stypy_kwargs_param_name = None
    mask_cols.stypy_call_defaults = defaults
    mask_cols.stypy_call_varargs = varargs
    mask_cols.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mask_cols', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mask_cols', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mask_cols(...)' code ##################

    str_153198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, (-1)), 'str', '\n    Mask columns of a 2D array that contain masked values.\n\n    This function is a shortcut to ``mask_rowcols`` with `axis` equal to 1.\n\n    See Also\n    --------\n    mask_rowcols : Mask rows and/or columns of a 2D array.\n    masked_where : Mask where a condition is met.\n\n    Examples\n    --------\n    >>> import numpy.ma as ma\n    >>> a = np.zeros((3, 3), dtype=np.int)\n    >>> a[1, 1] = 1\n    >>> a\n    array([[0, 0, 0],\n           [0, 1, 0],\n           [0, 0, 0]])\n    >>> a = ma.masked_equal(a, 1)\n    >>> a\n    masked_array(data =\n     [[0 0 0]\n     [0 -- 0]\n     [0 0 0]],\n          mask =\n     [[False False False]\n     [False  True False]\n     [False False False]],\n          fill_value=999999)\n    >>> ma.mask_cols(a)\n    masked_array(data =\n     [[0 -- 0]\n     [0 -- 0]\n     [0 -- 0]],\n          mask =\n     [[False  True False]\n     [False  True False]\n     [False  True False]],\n          fill_value=999999)\n\n    ')
    
    # Call to mask_rowcols(...): (line 939)
    # Processing the call arguments (line 939)
    # Getting the type of 'a' (line 939)
    a_153200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 24), 'a', False)
    int_153201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 27), 'int')
    # Processing the call keyword arguments (line 939)
    kwargs_153202 = {}
    # Getting the type of 'mask_rowcols' (line 939)
    mask_rowcols_153199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 11), 'mask_rowcols', False)
    # Calling mask_rowcols(args, kwargs) (line 939)
    mask_rowcols_call_result_153203 = invoke(stypy.reporting.localization.Localization(__file__, 939, 11), mask_rowcols_153199, *[a_153200, int_153201], **kwargs_153202)
    
    # Assigning a type to the variable 'stypy_return_type' (line 939)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 4), 'stypy_return_type', mask_rowcols_call_result_153203)
    
    # ################# End of 'mask_cols(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mask_cols' in the type store
    # Getting the type of 'stypy_return_type' (line 896)
    stypy_return_type_153204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153204)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mask_cols'
    return stypy_return_type_153204

# Assigning a type to the variable 'mask_cols' (line 896)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 0), 'mask_cols', mask_cols)

@norecursion
def ediff1d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 946)
    None_153205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 24), 'None')
    # Getting the type of 'None' (line 946)
    None_153206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 39), 'None')
    defaults = [None_153205, None_153206]
    # Create a new context for function 'ediff1d'
    module_type_store = module_type_store.open_function_context('ediff1d', 946, 0, False)
    
    # Passed parameters checking function
    ediff1d.stypy_localization = localization
    ediff1d.stypy_type_of_self = None
    ediff1d.stypy_type_store = module_type_store
    ediff1d.stypy_function_name = 'ediff1d'
    ediff1d.stypy_param_names_list = ['arr', 'to_end', 'to_begin']
    ediff1d.stypy_varargs_param_name = None
    ediff1d.stypy_kwargs_param_name = None
    ediff1d.stypy_call_defaults = defaults
    ediff1d.stypy_call_varargs = varargs
    ediff1d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ediff1d', ['arr', 'to_end', 'to_begin'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ediff1d', localization, ['arr', 'to_end', 'to_begin'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ediff1d(...)' code ##################

    str_153207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, (-1)), 'str', '\n    Compute the differences between consecutive elements of an array.\n\n    This function is the equivalent of `numpy.ediff1d` that takes masked\n    values into account, see `numpy.ediff1d` for details.\n\n    See Also\n    --------\n    numpy.ediff1d : Equivalent function for ndarrays.\n\n    ')
    
    # Assigning a Attribute to a Name (line 958):
    
    # Assigning a Attribute to a Name (line 958):
    
    # Call to asanyarray(...): (line 958)
    # Processing the call arguments (line 958)
    # Getting the type of 'arr' (line 958)
    arr_153210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 24), 'arr', False)
    # Processing the call keyword arguments (line 958)
    kwargs_153211 = {}
    # Getting the type of 'ma' (line 958)
    ma_153208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 10), 'ma', False)
    # Obtaining the member 'asanyarray' of a type (line 958)
    asanyarray_153209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 10), ma_153208, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 958)
    asanyarray_call_result_153212 = invoke(stypy.reporting.localization.Localization(__file__, 958, 10), asanyarray_153209, *[arr_153210], **kwargs_153211)
    
    # Obtaining the member 'flat' of a type (line 958)
    flat_153213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 10), asanyarray_call_result_153212, 'flat')
    # Assigning a type to the variable 'arr' (line 958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 4), 'arr', flat_153213)
    
    # Assigning a BinOp to a Name (line 959):
    
    # Assigning a BinOp to a Name (line 959):
    
    # Obtaining the type of the subscript
    int_153214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 13), 'int')
    slice_153215 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 959, 9), int_153214, None, None)
    # Getting the type of 'arr' (line 959)
    arr_153216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 9), 'arr')
    # Obtaining the member '__getitem__' of a type (line 959)
    getitem___153217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 9), arr_153216, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 959)
    subscript_call_result_153218 = invoke(stypy.reporting.localization.Localization(__file__, 959, 9), getitem___153217, slice_153215)
    
    
    # Obtaining the type of the subscript
    int_153219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 24), 'int')
    slice_153220 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 959, 19), None, int_153219, None)
    # Getting the type of 'arr' (line 959)
    arr_153221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 19), 'arr')
    # Obtaining the member '__getitem__' of a type (line 959)
    getitem___153222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 19), arr_153221, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 959)
    subscript_call_result_153223 = invoke(stypy.reporting.localization.Localization(__file__, 959, 19), getitem___153222, slice_153220)
    
    # Applying the binary operator '-' (line 959)
    result_sub_153224 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 9), '-', subscript_call_result_153218, subscript_call_result_153223)
    
    # Assigning a type to the variable 'ed' (line 959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 4), 'ed', result_sub_153224)
    
    # Assigning a List to a Name (line 960):
    
    # Assigning a List to a Name (line 960):
    
    # Obtaining an instance of the builtin type 'list' (line 960)
    list_153225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 960)
    # Adding element type (line 960)
    # Getting the type of 'ed' (line 960)
    ed_153226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 14), 'ed')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 960, 13), list_153225, ed_153226)
    
    # Assigning a type to the variable 'arrays' (line 960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 4), 'arrays', list_153225)
    
    # Type idiom detected: calculating its left and rigth part (line 962)
    # Getting the type of 'to_begin' (line 962)
    to_begin_153227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 4), 'to_begin')
    # Getting the type of 'None' (line 962)
    None_153228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 23), 'None')
    
    (may_be_153229, more_types_in_union_153230) = may_not_be_none(to_begin_153227, None_153228)

    if may_be_153229:

        if more_types_in_union_153230:
            # Runtime conditional SSA (line 962)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to insert(...): (line 963)
        # Processing the call arguments (line 963)
        int_153233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 22), 'int')
        # Getting the type of 'to_begin' (line 963)
        to_begin_153234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 25), 'to_begin', False)
        # Processing the call keyword arguments (line 963)
        kwargs_153235 = {}
        # Getting the type of 'arrays' (line 963)
        arrays_153231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 8), 'arrays', False)
        # Obtaining the member 'insert' of a type (line 963)
        insert_153232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 8), arrays_153231, 'insert')
        # Calling insert(args, kwargs) (line 963)
        insert_call_result_153236 = invoke(stypy.reporting.localization.Localization(__file__, 963, 8), insert_153232, *[int_153233, to_begin_153234], **kwargs_153235)
        

        if more_types_in_union_153230:
            # SSA join for if statement (line 962)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 964)
    # Getting the type of 'to_end' (line 964)
    to_end_153237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 4), 'to_end')
    # Getting the type of 'None' (line 964)
    None_153238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 21), 'None')
    
    (may_be_153239, more_types_in_union_153240) = may_not_be_none(to_end_153237, None_153238)

    if may_be_153239:

        if more_types_in_union_153240:
            # Runtime conditional SSA (line 964)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to append(...): (line 965)
        # Processing the call arguments (line 965)
        # Getting the type of 'to_end' (line 965)
        to_end_153243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 22), 'to_end', False)
        # Processing the call keyword arguments (line 965)
        kwargs_153244 = {}
        # Getting the type of 'arrays' (line 965)
        arrays_153241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'arrays', False)
        # Obtaining the member 'append' of a type (line 965)
        append_153242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 8), arrays_153241, 'append')
        # Calling append(args, kwargs) (line 965)
        append_call_result_153245 = invoke(stypy.reporting.localization.Localization(__file__, 965, 8), append_153242, *[to_end_153243], **kwargs_153244)
        

        if more_types_in_union_153240:
            # SSA join for if statement (line 964)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to len(...): (line 967)
    # Processing the call arguments (line 967)
    # Getting the type of 'arrays' (line 967)
    arrays_153247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 11), 'arrays', False)
    # Processing the call keyword arguments (line 967)
    kwargs_153248 = {}
    # Getting the type of 'len' (line 967)
    len_153246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 7), 'len', False)
    # Calling len(args, kwargs) (line 967)
    len_call_result_153249 = invoke(stypy.reporting.localization.Localization(__file__, 967, 7), len_153246, *[arrays_153247], **kwargs_153248)
    
    int_153250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 22), 'int')
    # Applying the binary operator '!=' (line 967)
    result_ne_153251 = python_operator(stypy.reporting.localization.Localization(__file__, 967, 7), '!=', len_call_result_153249, int_153250)
    
    # Testing the type of an if condition (line 967)
    if_condition_153252 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 967, 4), result_ne_153251)
    # Assigning a type to the variable 'if_condition_153252' (line 967)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 4), 'if_condition_153252', if_condition_153252)
    # SSA begins for if statement (line 967)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 970):
    
    # Assigning a Call to a Name (line 970):
    
    # Call to hstack(...): (line 970)
    # Processing the call arguments (line 970)
    # Getting the type of 'arrays' (line 970)
    arrays_153254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'arrays', False)
    # Processing the call keyword arguments (line 970)
    kwargs_153255 = {}
    # Getting the type of 'hstack' (line 970)
    hstack_153253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 13), 'hstack', False)
    # Calling hstack(args, kwargs) (line 970)
    hstack_call_result_153256 = invoke(stypy.reporting.localization.Localization(__file__, 970, 13), hstack_153253, *[arrays_153254], **kwargs_153255)
    
    # Assigning a type to the variable 'ed' (line 970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'ed', hstack_call_result_153256)
    # SSA join for if statement (line 967)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ed' (line 972)
    ed_153257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 11), 'ed')
    # Assigning a type to the variable 'stypy_return_type' (line 972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 4), 'stypy_return_type', ed_153257)
    
    # ################# End of 'ediff1d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ediff1d' in the type store
    # Getting the type of 'stypy_return_type' (line 946)
    stypy_return_type_153258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153258)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ediff1d'
    return stypy_return_type_153258

# Assigning a type to the variable 'ediff1d' (line 946)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 0), 'ediff1d', ediff1d)

@norecursion
def unique(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 975)
    False_153259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 29), 'False')
    # Getting the type of 'False' (line 975)
    False_153260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 51), 'False')
    defaults = [False_153259, False_153260]
    # Create a new context for function 'unique'
    module_type_store = module_type_store.open_function_context('unique', 975, 0, False)
    
    # Passed parameters checking function
    unique.stypy_localization = localization
    unique.stypy_type_of_self = None
    unique.stypy_type_store = module_type_store
    unique.stypy_function_name = 'unique'
    unique.stypy_param_names_list = ['ar1', 'return_index', 'return_inverse']
    unique.stypy_varargs_param_name = None
    unique.stypy_kwargs_param_name = None
    unique.stypy_call_defaults = defaults
    unique.stypy_call_varargs = varargs
    unique.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'unique', ['ar1', 'return_index', 'return_inverse'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'unique', localization, ['ar1', 'return_index', 'return_inverse'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'unique(...)' code ##################

    str_153261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, (-1)), 'str', '\n    Finds the unique elements of an array.\n\n    Masked values are considered the same element (masked). The output array\n    is always a masked array. See `numpy.unique` for more details.\n\n    See Also\n    --------\n    numpy.unique : Equivalent function for ndarrays.\n\n    ')
    
    # Assigning a Call to a Name (line 987):
    
    # Assigning a Call to a Name (line 987):
    
    # Call to unique(...): (line 987)
    # Processing the call arguments (line 987)
    # Getting the type of 'ar1' (line 987)
    ar1_153264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 23), 'ar1', False)
    # Processing the call keyword arguments (line 987)
    # Getting the type of 'return_index' (line 988)
    return_index_153265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 36), 'return_index', False)
    keyword_153266 = return_index_153265
    # Getting the type of 'return_inverse' (line 989)
    return_inverse_153267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 38), 'return_inverse', False)
    keyword_153268 = return_inverse_153267
    kwargs_153269 = {'return_inverse': keyword_153268, 'return_index': keyword_153266}
    # Getting the type of 'np' (line 987)
    np_153262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 13), 'np', False)
    # Obtaining the member 'unique' of a type (line 987)
    unique_153263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 13), np_153262, 'unique')
    # Calling unique(args, kwargs) (line 987)
    unique_call_result_153270 = invoke(stypy.reporting.localization.Localization(__file__, 987, 13), unique_153263, *[ar1_153264], **kwargs_153269)
    
    # Assigning a type to the variable 'output' (line 987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'output', unique_call_result_153270)
    
    # Type idiom detected: calculating its left and rigth part (line 990)
    # Getting the type of 'tuple' (line 990)
    tuple_153271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 26), 'tuple')
    # Getting the type of 'output' (line 990)
    output_153272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 18), 'output')
    
    (may_be_153273, more_types_in_union_153274) = may_be_subtype(tuple_153271, output_153272)

    if may_be_153273:

        if more_types_in_union_153274:
            # Runtime conditional SSA (line 990)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'output' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'output', remove_not_subtype_from_union(output_153272, tuple))
        
        # Assigning a Call to a Name (line 991):
        
        # Assigning a Call to a Name (line 991):
        
        # Call to list(...): (line 991)
        # Processing the call arguments (line 991)
        # Getting the type of 'output' (line 991)
        output_153276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 22), 'output', False)
        # Processing the call keyword arguments (line 991)
        kwargs_153277 = {}
        # Getting the type of 'list' (line 991)
        list_153275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 17), 'list', False)
        # Calling list(args, kwargs) (line 991)
        list_call_result_153278 = invoke(stypy.reporting.localization.Localization(__file__, 991, 17), list_153275, *[output_153276], **kwargs_153277)
        
        # Assigning a type to the variable 'output' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'output', list_call_result_153278)
        
        # Assigning a Call to a Subscript (line 992):
        
        # Assigning a Call to a Subscript (line 992):
        
        # Call to view(...): (line 992)
        # Processing the call arguments (line 992)
        # Getting the type of 'MaskedArray' (line 992)
        MaskedArray_153284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 35), 'MaskedArray', False)
        # Processing the call keyword arguments (line 992)
        kwargs_153285 = {}
        
        # Obtaining the type of the subscript
        int_153279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 27), 'int')
        # Getting the type of 'output' (line 992)
        output_153280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 20), 'output', False)
        # Obtaining the member '__getitem__' of a type (line 992)
        getitem___153281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 20), output_153280, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 992)
        subscript_call_result_153282 = invoke(stypy.reporting.localization.Localization(__file__, 992, 20), getitem___153281, int_153279)
        
        # Obtaining the member 'view' of a type (line 992)
        view_153283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 20), subscript_call_result_153282, 'view')
        # Calling view(args, kwargs) (line 992)
        view_call_result_153286 = invoke(stypy.reporting.localization.Localization(__file__, 992, 20), view_153283, *[MaskedArray_153284], **kwargs_153285)
        
        # Getting the type of 'output' (line 992)
        output_153287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 8), 'output')
        int_153288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 15), 'int')
        # Storing an element on a container (line 992)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 992, 8), output_153287, (int_153288, view_call_result_153286))
        
        # Assigning a Call to a Name (line 993):
        
        # Assigning a Call to a Name (line 993):
        
        # Call to tuple(...): (line 993)
        # Processing the call arguments (line 993)
        # Getting the type of 'output' (line 993)
        output_153290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 23), 'output', False)
        # Processing the call keyword arguments (line 993)
        kwargs_153291 = {}
        # Getting the type of 'tuple' (line 993)
        tuple_153289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 17), 'tuple', False)
        # Calling tuple(args, kwargs) (line 993)
        tuple_call_result_153292 = invoke(stypy.reporting.localization.Localization(__file__, 993, 17), tuple_153289, *[output_153290], **kwargs_153291)
        
        # Assigning a type to the variable 'output' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'output', tuple_call_result_153292)

        if more_types_in_union_153274:
            # Runtime conditional SSA for else branch (line 990)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_153273) or more_types_in_union_153274):
        # Assigning a type to the variable 'output' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'output', remove_subtype_from_union(output_153272, tuple))
        
        # Assigning a Call to a Name (line 995):
        
        # Assigning a Call to a Name (line 995):
        
        # Call to view(...): (line 995)
        # Processing the call arguments (line 995)
        # Getting the type of 'MaskedArray' (line 995)
        MaskedArray_153295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 29), 'MaskedArray', False)
        # Processing the call keyword arguments (line 995)
        kwargs_153296 = {}
        # Getting the type of 'output' (line 995)
        output_153293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 17), 'output', False)
        # Obtaining the member 'view' of a type (line 995)
        view_153294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 17), output_153293, 'view')
        # Calling view(args, kwargs) (line 995)
        view_call_result_153297 = invoke(stypy.reporting.localization.Localization(__file__, 995, 17), view_153294, *[MaskedArray_153295], **kwargs_153296)
        
        # Assigning a type to the variable 'output' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 8), 'output', view_call_result_153297)

        if (may_be_153273 and more_types_in_union_153274):
            # SSA join for if statement (line 990)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'output' (line 996)
    output_153298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 11), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 4), 'stypy_return_type', output_153298)
    
    # ################# End of 'unique(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'unique' in the type store
    # Getting the type of 'stypy_return_type' (line 975)
    stypy_return_type_153299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153299)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'unique'
    return stypy_return_type_153299

# Assigning a type to the variable 'unique' (line 975)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 0), 'unique', unique)

@norecursion
def intersect1d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 999)
    False_153300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 40), 'False')
    defaults = [False_153300]
    # Create a new context for function 'intersect1d'
    module_type_store = module_type_store.open_function_context('intersect1d', 999, 0, False)
    
    # Passed parameters checking function
    intersect1d.stypy_localization = localization
    intersect1d.stypy_type_of_self = None
    intersect1d.stypy_type_store = module_type_store
    intersect1d.stypy_function_name = 'intersect1d'
    intersect1d.stypy_param_names_list = ['ar1', 'ar2', 'assume_unique']
    intersect1d.stypy_varargs_param_name = None
    intersect1d.stypy_kwargs_param_name = None
    intersect1d.stypy_call_defaults = defaults
    intersect1d.stypy_call_varargs = varargs
    intersect1d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'intersect1d', ['ar1', 'ar2', 'assume_unique'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'intersect1d', localization, ['ar1', 'ar2', 'assume_unique'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'intersect1d(...)' code ##################

    str_153301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, (-1)), 'str', '\n    Returns the unique elements common to both arrays.\n\n    Masked values are considered equal one to the other.\n    The output is always a masked array.\n\n    See `numpy.intersect1d` for more details.\n\n    See Also\n    --------\n    numpy.intersect1d : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> x = array([1, 3, 3, 3], mask=[0, 0, 0, 1])\n    >>> y = array([3, 1, 1, 1], mask=[0, 0, 0, 1])\n    >>> intersect1d(x, y)\n    masked_array(data = [1 3 --],\n                 mask = [False False  True],\n           fill_value = 999999)\n\n    ')
    
    # Getting the type of 'assume_unique' (line 1022)
    assume_unique_153302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 7), 'assume_unique')
    # Testing the type of an if condition (line 1022)
    if_condition_153303 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1022, 4), assume_unique_153302)
    # Assigning a type to the variable 'if_condition_153303' (line 1022)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 4), 'if_condition_153303', if_condition_153303)
    # SSA begins for if statement (line 1022)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1023):
    
    # Assigning a Call to a Name (line 1023):
    
    # Call to concatenate(...): (line 1023)
    # Processing the call arguments (line 1023)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1023)
    tuple_153306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1023)
    # Adding element type (line 1023)
    # Getting the type of 'ar1' (line 1023)
    ar1_153307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 30), 'ar1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 30), tuple_153306, ar1_153307)
    # Adding element type (line 1023)
    # Getting the type of 'ar2' (line 1023)
    ar2_153308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 35), 'ar2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 30), tuple_153306, ar2_153308)
    
    # Processing the call keyword arguments (line 1023)
    kwargs_153309 = {}
    # Getting the type of 'ma' (line 1023)
    ma_153304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 14), 'ma', False)
    # Obtaining the member 'concatenate' of a type (line 1023)
    concatenate_153305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 14), ma_153304, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1023)
    concatenate_call_result_153310 = invoke(stypy.reporting.localization.Localization(__file__, 1023, 14), concatenate_153305, *[tuple_153306], **kwargs_153309)
    
    # Assigning a type to the variable 'aux' (line 1023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'aux', concatenate_call_result_153310)
    # SSA branch for the else part of an if statement (line 1022)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1026):
    
    # Assigning a Call to a Name (line 1026):
    
    # Call to concatenate(...): (line 1026)
    # Processing the call arguments (line 1026)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1026)
    tuple_153313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1026)
    # Adding element type (line 1026)
    
    # Call to unique(...): (line 1026)
    # Processing the call arguments (line 1026)
    # Getting the type of 'ar1' (line 1026)
    ar1_153315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 37), 'ar1', False)
    # Processing the call keyword arguments (line 1026)
    kwargs_153316 = {}
    # Getting the type of 'unique' (line 1026)
    unique_153314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 30), 'unique', False)
    # Calling unique(args, kwargs) (line 1026)
    unique_call_result_153317 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 30), unique_153314, *[ar1_153315], **kwargs_153316)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1026, 30), tuple_153313, unique_call_result_153317)
    # Adding element type (line 1026)
    
    # Call to unique(...): (line 1026)
    # Processing the call arguments (line 1026)
    # Getting the type of 'ar2' (line 1026)
    ar2_153319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 50), 'ar2', False)
    # Processing the call keyword arguments (line 1026)
    kwargs_153320 = {}
    # Getting the type of 'unique' (line 1026)
    unique_153318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 43), 'unique', False)
    # Calling unique(args, kwargs) (line 1026)
    unique_call_result_153321 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 43), unique_153318, *[ar2_153319], **kwargs_153320)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1026, 30), tuple_153313, unique_call_result_153321)
    
    # Processing the call keyword arguments (line 1026)
    kwargs_153322 = {}
    # Getting the type of 'ma' (line 1026)
    ma_153311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 14), 'ma', False)
    # Obtaining the member 'concatenate' of a type (line 1026)
    concatenate_153312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 14), ma_153311, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1026)
    concatenate_call_result_153323 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 14), concatenate_153312, *[tuple_153313], **kwargs_153322)
    
    # Assigning a type to the variable 'aux' (line 1026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'aux', concatenate_call_result_153323)
    # SSA join for if statement (line 1022)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to sort(...): (line 1027)
    # Processing the call keyword arguments (line 1027)
    kwargs_153326 = {}
    # Getting the type of 'aux' (line 1027)
    aux_153324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 4), 'aux', False)
    # Obtaining the member 'sort' of a type (line 1027)
    sort_153325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 4), aux_153324, 'sort')
    # Calling sort(args, kwargs) (line 1027)
    sort_call_result_153327 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 4), sort_153325, *[], **kwargs_153326)
    
    
    # Obtaining the type of the subscript
    
    
    # Obtaining the type of the subscript
    int_153328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 24), 'int')
    slice_153329 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1028, 20), int_153328, None, None)
    # Getting the type of 'aux' (line 1028)
    aux_153330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 20), 'aux')
    # Obtaining the member '__getitem__' of a type (line 1028)
    getitem___153331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 20), aux_153330, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1028)
    subscript_call_result_153332 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 20), getitem___153331, slice_153329)
    
    
    # Obtaining the type of the subscript
    int_153333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 36), 'int')
    slice_153334 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1028, 31), None, int_153333, None)
    # Getting the type of 'aux' (line 1028)
    aux_153335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 31), 'aux')
    # Obtaining the member '__getitem__' of a type (line 1028)
    getitem___153336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 31), aux_153335, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1028)
    subscript_call_result_153337 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 31), getitem___153336, slice_153334)
    
    # Applying the binary operator '==' (line 1028)
    result_eq_153338 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 20), '==', subscript_call_result_153332, subscript_call_result_153337)
    
    
    # Obtaining the type of the subscript
    int_153339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 16), 'int')
    slice_153340 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1028, 11), None, int_153339, None)
    # Getting the type of 'aux' (line 1028)
    aux_153341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 11), 'aux')
    # Obtaining the member '__getitem__' of a type (line 1028)
    getitem___153342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 11), aux_153341, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1028)
    subscript_call_result_153343 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 11), getitem___153342, slice_153340)
    
    # Obtaining the member '__getitem__' of a type (line 1028)
    getitem___153344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 11), subscript_call_result_153343, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1028)
    subscript_call_result_153345 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 11), getitem___153344, result_eq_153338)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 4), 'stypy_return_type', subscript_call_result_153345)
    
    # ################# End of 'intersect1d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'intersect1d' in the type store
    # Getting the type of 'stypy_return_type' (line 999)
    stypy_return_type_153346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153346)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'intersect1d'
    return stypy_return_type_153346

# Assigning a type to the variable 'intersect1d' (line 999)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 0), 'intersect1d', intersect1d)

@norecursion
def setxor1d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1031)
    False_153347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 37), 'False')
    defaults = [False_153347]
    # Create a new context for function 'setxor1d'
    module_type_store = module_type_store.open_function_context('setxor1d', 1031, 0, False)
    
    # Passed parameters checking function
    setxor1d.stypy_localization = localization
    setxor1d.stypy_type_of_self = None
    setxor1d.stypy_type_store = module_type_store
    setxor1d.stypy_function_name = 'setxor1d'
    setxor1d.stypy_param_names_list = ['ar1', 'ar2', 'assume_unique']
    setxor1d.stypy_varargs_param_name = None
    setxor1d.stypy_kwargs_param_name = None
    setxor1d.stypy_call_defaults = defaults
    setxor1d.stypy_call_varargs = varargs
    setxor1d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'setxor1d', ['ar1', 'ar2', 'assume_unique'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'setxor1d', localization, ['ar1', 'ar2', 'assume_unique'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'setxor1d(...)' code ##################

    str_153348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, (-1)), 'str', '\n    Set exclusive-or of 1-D arrays with unique elements.\n\n    The output is always a masked array. See `numpy.setxor1d` for more details.\n\n    See Also\n    --------\n    numpy.setxor1d : Equivalent function for ndarrays.\n\n    ')
    
    
    # Getting the type of 'assume_unique' (line 1042)
    assume_unique_153349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 11), 'assume_unique')
    # Applying the 'not' unary operator (line 1042)
    result_not__153350 = python_operator(stypy.reporting.localization.Localization(__file__, 1042, 7), 'not', assume_unique_153349)
    
    # Testing the type of an if condition (line 1042)
    if_condition_153351 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1042, 4), result_not__153350)
    # Assigning a type to the variable 'if_condition_153351' (line 1042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 4), 'if_condition_153351', if_condition_153351)
    # SSA begins for if statement (line 1042)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1043):
    
    # Assigning a Call to a Name (line 1043):
    
    # Call to unique(...): (line 1043)
    # Processing the call arguments (line 1043)
    # Getting the type of 'ar1' (line 1043)
    ar1_153353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 21), 'ar1', False)
    # Processing the call keyword arguments (line 1043)
    kwargs_153354 = {}
    # Getting the type of 'unique' (line 1043)
    unique_153352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 14), 'unique', False)
    # Calling unique(args, kwargs) (line 1043)
    unique_call_result_153355 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 14), unique_153352, *[ar1_153353], **kwargs_153354)
    
    # Assigning a type to the variable 'ar1' (line 1043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'ar1', unique_call_result_153355)
    
    # Assigning a Call to a Name (line 1044):
    
    # Assigning a Call to a Name (line 1044):
    
    # Call to unique(...): (line 1044)
    # Processing the call arguments (line 1044)
    # Getting the type of 'ar2' (line 1044)
    ar2_153357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 21), 'ar2', False)
    # Processing the call keyword arguments (line 1044)
    kwargs_153358 = {}
    # Getting the type of 'unique' (line 1044)
    unique_153356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 14), 'unique', False)
    # Calling unique(args, kwargs) (line 1044)
    unique_call_result_153359 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 14), unique_153356, *[ar2_153357], **kwargs_153358)
    
    # Assigning a type to the variable 'ar2' (line 1044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 8), 'ar2', unique_call_result_153359)
    # SSA join for if statement (line 1042)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1046):
    
    # Assigning a Call to a Name (line 1046):
    
    # Call to concatenate(...): (line 1046)
    # Processing the call arguments (line 1046)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1046)
    tuple_153362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1046)
    # Adding element type (line 1046)
    # Getting the type of 'ar1' (line 1046)
    ar1_153363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 26), 'ar1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 26), tuple_153362, ar1_153363)
    # Adding element type (line 1046)
    # Getting the type of 'ar2' (line 1046)
    ar2_153364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 31), 'ar2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1046, 26), tuple_153362, ar2_153364)
    
    # Processing the call keyword arguments (line 1046)
    kwargs_153365 = {}
    # Getting the type of 'ma' (line 1046)
    ma_153360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 10), 'ma', False)
    # Obtaining the member 'concatenate' of a type (line 1046)
    concatenate_153361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 10), ma_153360, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1046)
    concatenate_call_result_153366 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 10), concatenate_153361, *[tuple_153362], **kwargs_153365)
    
    # Assigning a type to the variable 'aux' (line 1046)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 4), 'aux', concatenate_call_result_153366)
    
    
    # Getting the type of 'aux' (line 1047)
    aux_153367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 7), 'aux')
    # Obtaining the member 'size' of a type (line 1047)
    size_153368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 7), aux_153367, 'size')
    int_153369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 19), 'int')
    # Applying the binary operator '==' (line 1047)
    result_eq_153370 = python_operator(stypy.reporting.localization.Localization(__file__, 1047, 7), '==', size_153368, int_153369)
    
    # Testing the type of an if condition (line 1047)
    if_condition_153371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1047, 4), result_eq_153370)
    # Assigning a type to the variable 'if_condition_153371' (line 1047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 4), 'if_condition_153371', if_condition_153371)
    # SSA begins for if statement (line 1047)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'aux' (line 1048)
    aux_153372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 15), 'aux')
    # Assigning a type to the variable 'stypy_return_type' (line 1048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), 'stypy_return_type', aux_153372)
    # SSA join for if statement (line 1047)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to sort(...): (line 1049)
    # Processing the call keyword arguments (line 1049)
    kwargs_153375 = {}
    # Getting the type of 'aux' (line 1049)
    aux_153373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 4), 'aux', False)
    # Obtaining the member 'sort' of a type (line 1049)
    sort_153374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 4), aux_153373, 'sort')
    # Calling sort(args, kwargs) (line 1049)
    sort_call_result_153376 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 4), sort_153374, *[], **kwargs_153375)
    
    
    # Assigning a Call to a Name (line 1050):
    
    # Assigning a Call to a Name (line 1050):
    
    # Call to filled(...): (line 1050)
    # Processing the call keyword arguments (line 1050)
    kwargs_153379 = {}
    # Getting the type of 'aux' (line 1050)
    aux_153377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 11), 'aux', False)
    # Obtaining the member 'filled' of a type (line 1050)
    filled_153378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 11), aux_153377, 'filled')
    # Calling filled(args, kwargs) (line 1050)
    filled_call_result_153380 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 11), filled_153378, *[], **kwargs_153379)
    
    # Assigning a type to the variable 'auxf' (line 1050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'auxf', filled_call_result_153380)
    
    # Assigning a Call to a Name (line 1052):
    
    # Assigning a Call to a Name (line 1052):
    
    # Call to concatenate(...): (line 1052)
    # Processing the call arguments (line 1052)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1052)
    tuple_153383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1052)
    # Adding element type (line 1052)
    
    # Obtaining an instance of the builtin type 'list' (line 1052)
    list_153384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1052)
    # Adding element type (line 1052)
    # Getting the type of 'True' (line 1052)
    True_153385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 28), 'True', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 27), list_153384, True_153385)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 27), tuple_153383, list_153384)
    # Adding element type (line 1052)
    
    
    # Obtaining the type of the subscript
    int_153386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 41), 'int')
    slice_153387 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1052, 36), int_153386, None, None)
    # Getting the type of 'auxf' (line 1052)
    auxf_153388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 36), 'auxf', False)
    # Obtaining the member '__getitem__' of a type (line 1052)
    getitem___153389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 36), auxf_153388, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1052)
    subscript_call_result_153390 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 36), getitem___153389, slice_153387)
    
    
    # Obtaining the type of the subscript
    int_153391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 54), 'int')
    slice_153392 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1052, 48), None, int_153391, None)
    # Getting the type of 'auxf' (line 1052)
    auxf_153393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 48), 'auxf', False)
    # Obtaining the member '__getitem__' of a type (line 1052)
    getitem___153394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 48), auxf_153393, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1052)
    subscript_call_result_153395 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 48), getitem___153394, slice_153392)
    
    # Applying the binary operator '!=' (line 1052)
    result_ne_153396 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 36), '!=', subscript_call_result_153390, subscript_call_result_153395)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 27), tuple_153383, result_ne_153396)
    # Adding element type (line 1052)
    
    # Obtaining an instance of the builtin type 'list' (line 1052)
    list_153397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 60), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1052)
    # Adding element type (line 1052)
    # Getting the type of 'True' (line 1052)
    True_153398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 61), 'True', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 60), list_153397, True_153398)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 27), tuple_153383, list_153397)
    
    # Processing the call keyword arguments (line 1052)
    kwargs_153399 = {}
    # Getting the type of 'ma' (line 1052)
    ma_153381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 11), 'ma', False)
    # Obtaining the member 'concatenate' of a type (line 1052)
    concatenate_153382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 11), ma_153381, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1052)
    concatenate_call_result_153400 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 11), concatenate_153382, *[tuple_153383], **kwargs_153399)
    
    # Assigning a type to the variable 'flag' (line 1052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 4), 'flag', concatenate_call_result_153400)
    
    # Assigning a Compare to a Name (line 1054):
    
    # Assigning a Compare to a Name (line 1054):
    
    
    # Obtaining the type of the subscript
    int_153401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 18), 'int')
    slice_153402 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1054, 13), int_153401, None, None)
    # Getting the type of 'flag' (line 1054)
    flag_153403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 13), 'flag')
    # Obtaining the member '__getitem__' of a type (line 1054)
    getitem___153404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 13), flag_153403, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1054)
    subscript_call_result_153405 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 13), getitem___153404, slice_153402)
    
    
    # Obtaining the type of the subscript
    int_153406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 31), 'int')
    slice_153407 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1054, 25), None, int_153406, None)
    # Getting the type of 'flag' (line 1054)
    flag_153408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 25), 'flag')
    # Obtaining the member '__getitem__' of a type (line 1054)
    getitem___153409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 25), flag_153408, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1054)
    subscript_call_result_153410 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 25), getitem___153409, slice_153407)
    
    # Applying the binary operator '==' (line 1054)
    result_eq_153411 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 13), '==', subscript_call_result_153405, subscript_call_result_153410)
    
    # Assigning a type to the variable 'flag2' (line 1054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 4), 'flag2', result_eq_153411)
    
    # Obtaining the type of the subscript
    # Getting the type of 'flag2' (line 1055)
    flag2_153412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 15), 'flag2')
    # Getting the type of 'aux' (line 1055)
    aux_153413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 11), 'aux')
    # Obtaining the member '__getitem__' of a type (line 1055)
    getitem___153414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 11), aux_153413, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1055)
    subscript_call_result_153415 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 11), getitem___153414, flag2_153412)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'stypy_return_type', subscript_call_result_153415)
    
    # ################# End of 'setxor1d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'setxor1d' in the type store
    # Getting the type of 'stypy_return_type' (line 1031)
    stypy_return_type_153416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153416)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'setxor1d'
    return stypy_return_type_153416

# Assigning a type to the variable 'setxor1d' (line 1031)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 0), 'setxor1d', setxor1d)

@norecursion
def in1d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1057)
    False_153417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 33), 'False')
    # Getting the type of 'False' (line 1057)
    False_153418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 47), 'False')
    defaults = [False_153417, False_153418]
    # Create a new context for function 'in1d'
    module_type_store = module_type_store.open_function_context('in1d', 1057, 0, False)
    
    # Passed parameters checking function
    in1d.stypy_localization = localization
    in1d.stypy_type_of_self = None
    in1d.stypy_type_store = module_type_store
    in1d.stypy_function_name = 'in1d'
    in1d.stypy_param_names_list = ['ar1', 'ar2', 'assume_unique', 'invert']
    in1d.stypy_varargs_param_name = None
    in1d.stypy_kwargs_param_name = None
    in1d.stypy_call_defaults = defaults
    in1d.stypy_call_varargs = varargs
    in1d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'in1d', ['ar1', 'ar2', 'assume_unique', 'invert'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'in1d', localization, ['ar1', 'ar2', 'assume_unique', 'invert'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'in1d(...)' code ##################

    str_153419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1072, (-1)), 'str', '\n    Test whether each element of an array is also present in a second\n    array.\n\n    The output is always a masked array. See `numpy.in1d` for more details.\n\n    See Also\n    --------\n    numpy.in1d : Equivalent function for ndarrays.\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    ')
    
    
    # Getting the type of 'assume_unique' (line 1073)
    assume_unique_153420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 11), 'assume_unique')
    # Applying the 'not' unary operator (line 1073)
    result_not__153421 = python_operator(stypy.reporting.localization.Localization(__file__, 1073, 7), 'not', assume_unique_153420)
    
    # Testing the type of an if condition (line 1073)
    if_condition_153422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1073, 4), result_not__153421)
    # Assigning a type to the variable 'if_condition_153422' (line 1073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 4), 'if_condition_153422', if_condition_153422)
    # SSA begins for if statement (line 1073)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1074):
    
    # Assigning a Call to a Name:
    
    # Call to unique(...): (line 1074)
    # Processing the call arguments (line 1074)
    # Getting the type of 'ar1' (line 1074)
    ar1_153424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 30), 'ar1', False)
    # Processing the call keyword arguments (line 1074)
    # Getting the type of 'True' (line 1074)
    True_153425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 50), 'True', False)
    keyword_153426 = True_153425
    kwargs_153427 = {'return_inverse': keyword_153426}
    # Getting the type of 'unique' (line 1074)
    unique_153423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 23), 'unique', False)
    # Calling unique(args, kwargs) (line 1074)
    unique_call_result_153428 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 23), unique_153423, *[ar1_153424], **kwargs_153427)
    
    # Assigning a type to the variable 'call_assignment_151377' (line 1074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_151377', unique_call_result_153428)
    
    # Assigning a Call to a Name (line 1074):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_153431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 8), 'int')
    # Processing the call keyword arguments
    kwargs_153432 = {}
    # Getting the type of 'call_assignment_151377' (line 1074)
    call_assignment_151377_153429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_151377', False)
    # Obtaining the member '__getitem__' of a type (line 1074)
    getitem___153430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), call_assignment_151377_153429, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_153433 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___153430, *[int_153431], **kwargs_153432)
    
    # Assigning a type to the variable 'call_assignment_151378' (line 1074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_151378', getitem___call_result_153433)
    
    # Assigning a Name to a Name (line 1074):
    # Getting the type of 'call_assignment_151378' (line 1074)
    call_assignment_151378_153434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_151378')
    # Assigning a type to the variable 'ar1' (line 1074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'ar1', call_assignment_151378_153434)
    
    # Assigning a Call to a Name (line 1074):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_153437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 8), 'int')
    # Processing the call keyword arguments
    kwargs_153438 = {}
    # Getting the type of 'call_assignment_151377' (line 1074)
    call_assignment_151377_153435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_151377', False)
    # Obtaining the member '__getitem__' of a type (line 1074)
    getitem___153436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), call_assignment_151377_153435, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_153439 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___153436, *[int_153437], **kwargs_153438)
    
    # Assigning a type to the variable 'call_assignment_151379' (line 1074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_151379', getitem___call_result_153439)
    
    # Assigning a Name to a Name (line 1074):
    # Getting the type of 'call_assignment_151379' (line 1074)
    call_assignment_151379_153440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'call_assignment_151379')
    # Assigning a type to the variable 'rev_idx' (line 1074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 13), 'rev_idx', call_assignment_151379_153440)
    
    # Assigning a Call to a Name (line 1075):
    
    # Assigning a Call to a Name (line 1075):
    
    # Call to unique(...): (line 1075)
    # Processing the call arguments (line 1075)
    # Getting the type of 'ar2' (line 1075)
    ar2_153442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 21), 'ar2', False)
    # Processing the call keyword arguments (line 1075)
    kwargs_153443 = {}
    # Getting the type of 'unique' (line 1075)
    unique_153441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 14), 'unique', False)
    # Calling unique(args, kwargs) (line 1075)
    unique_call_result_153444 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 14), unique_153441, *[ar2_153442], **kwargs_153443)
    
    # Assigning a type to the variable 'ar2' (line 1075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'ar2', unique_call_result_153444)
    # SSA join for if statement (line 1073)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1077):
    
    # Assigning a Call to a Name (line 1077):
    
    # Call to concatenate(...): (line 1077)
    # Processing the call arguments (line 1077)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1077)
    tuple_153447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1077)
    # Adding element type (line 1077)
    # Getting the type of 'ar1' (line 1077)
    ar1_153448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 25), 'ar1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1077, 25), tuple_153447, ar1_153448)
    # Adding element type (line 1077)
    # Getting the type of 'ar2' (line 1077)
    ar2_153449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 30), 'ar2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1077, 25), tuple_153447, ar2_153449)
    
    # Processing the call keyword arguments (line 1077)
    kwargs_153450 = {}
    # Getting the type of 'ma' (line 1077)
    ma_153445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 9), 'ma', False)
    # Obtaining the member 'concatenate' of a type (line 1077)
    concatenate_153446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 9), ma_153445, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1077)
    concatenate_call_result_153451 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 9), concatenate_153446, *[tuple_153447], **kwargs_153450)
    
    # Assigning a type to the variable 'ar' (line 1077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 4), 'ar', concatenate_call_result_153451)
    
    # Assigning a Call to a Name (line 1081):
    
    # Assigning a Call to a Name (line 1081):
    
    # Call to argsort(...): (line 1081)
    # Processing the call keyword arguments (line 1081)
    str_153454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 28), 'str', 'mergesort')
    keyword_153455 = str_153454
    kwargs_153456 = {'kind': keyword_153455}
    # Getting the type of 'ar' (line 1081)
    ar_153452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 12), 'ar', False)
    # Obtaining the member 'argsort' of a type (line 1081)
    argsort_153453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 12), ar_153452, 'argsort')
    # Calling argsort(args, kwargs) (line 1081)
    argsort_call_result_153457 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 12), argsort_153453, *[], **kwargs_153456)
    
    # Assigning a type to the variable 'order' (line 1081)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 4), 'order', argsort_call_result_153457)
    
    # Assigning a Subscript to a Name (line 1082):
    
    # Assigning a Subscript to a Name (line 1082):
    
    # Obtaining the type of the subscript
    # Getting the type of 'order' (line 1082)
    order_153458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 13), 'order')
    # Getting the type of 'ar' (line 1082)
    ar_153459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 10), 'ar')
    # Obtaining the member '__getitem__' of a type (line 1082)
    getitem___153460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 10), ar_153459, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1082)
    subscript_call_result_153461 = invoke(stypy.reporting.localization.Localization(__file__, 1082, 10), getitem___153460, order_153458)
    
    # Assigning a type to the variable 'sar' (line 1082)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 4), 'sar', subscript_call_result_153461)
    
    # Getting the type of 'invert' (line 1083)
    invert_153462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 7), 'invert')
    # Testing the type of an if condition (line 1083)
    if_condition_153463 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1083, 4), invert_153462)
    # Assigning a type to the variable 'if_condition_153463' (line 1083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 4), 'if_condition_153463', if_condition_153463)
    # SSA begins for if statement (line 1083)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Compare to a Name (line 1084):
    
    # Assigning a Compare to a Name (line 1084):
    
    
    # Obtaining the type of the subscript
    int_153464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, 23), 'int')
    slice_153465 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1084, 19), int_153464, None, None)
    # Getting the type of 'sar' (line 1084)
    sar_153466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 19), 'sar')
    # Obtaining the member '__getitem__' of a type (line 1084)
    getitem___153467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 19), sar_153466, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1084)
    subscript_call_result_153468 = invoke(stypy.reporting.localization.Localization(__file__, 1084, 19), getitem___153467, slice_153465)
    
    
    # Obtaining the type of the subscript
    int_153469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, 35), 'int')
    slice_153470 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1084, 30), None, int_153469, None)
    # Getting the type of 'sar' (line 1084)
    sar_153471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 30), 'sar')
    # Obtaining the member '__getitem__' of a type (line 1084)
    getitem___153472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 30), sar_153471, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1084)
    subscript_call_result_153473 = invoke(stypy.reporting.localization.Localization(__file__, 1084, 30), getitem___153472, slice_153470)
    
    # Applying the binary operator '!=' (line 1084)
    result_ne_153474 = python_operator(stypy.reporting.localization.Localization(__file__, 1084, 19), '!=', subscript_call_result_153468, subscript_call_result_153473)
    
    # Assigning a type to the variable 'bool_ar' (line 1084)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 8), 'bool_ar', result_ne_153474)
    # SSA branch for the else part of an if statement (line 1083)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Compare to a Name (line 1086):
    
    # Assigning a Compare to a Name (line 1086):
    
    
    # Obtaining the type of the subscript
    int_153475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 23), 'int')
    slice_153476 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1086, 19), int_153475, None, None)
    # Getting the type of 'sar' (line 1086)
    sar_153477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 19), 'sar')
    # Obtaining the member '__getitem__' of a type (line 1086)
    getitem___153478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 19), sar_153477, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1086)
    subscript_call_result_153479 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 19), getitem___153478, slice_153476)
    
    
    # Obtaining the type of the subscript
    int_153480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 35), 'int')
    slice_153481 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1086, 30), None, int_153480, None)
    # Getting the type of 'sar' (line 1086)
    sar_153482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 30), 'sar')
    # Obtaining the member '__getitem__' of a type (line 1086)
    getitem___153483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 30), sar_153482, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1086)
    subscript_call_result_153484 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 30), getitem___153483, slice_153481)
    
    # Applying the binary operator '==' (line 1086)
    result_eq_153485 = python_operator(stypy.reporting.localization.Localization(__file__, 1086, 19), '==', subscript_call_result_153479, subscript_call_result_153484)
    
    # Assigning a type to the variable 'bool_ar' (line 1086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 8), 'bool_ar', result_eq_153485)
    # SSA join for if statement (line 1083)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1087):
    
    # Assigning a Call to a Name (line 1087):
    
    # Call to concatenate(...): (line 1087)
    # Processing the call arguments (line 1087)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1087)
    tuple_153488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1087)
    # Adding element type (line 1087)
    # Getting the type of 'bool_ar' (line 1087)
    bool_ar_153489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 27), 'bool_ar', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 27), tuple_153488, bool_ar_153489)
    # Adding element type (line 1087)
    
    # Obtaining an instance of the builtin type 'list' (line 1087)
    list_153490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 36), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1087)
    # Adding element type (line 1087)
    # Getting the type of 'invert' (line 1087)
    invert_153491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 37), 'invert', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 36), list_153490, invert_153491)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 27), tuple_153488, list_153490)
    
    # Processing the call keyword arguments (line 1087)
    kwargs_153492 = {}
    # Getting the type of 'ma' (line 1087)
    ma_153486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 11), 'ma', False)
    # Obtaining the member 'concatenate' of a type (line 1087)
    concatenate_153487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 11), ma_153486, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1087)
    concatenate_call_result_153493 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 11), concatenate_153487, *[tuple_153488], **kwargs_153492)
    
    # Assigning a type to the variable 'flag' (line 1087)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 4), 'flag', concatenate_call_result_153493)
    
    # Assigning a Subscript to a Name (line 1088):
    
    # Assigning a Subscript to a Name (line 1088):
    
    # Obtaining the type of the subscript
    
    # Call to len(...): (line 1088)
    # Processing the call arguments (line 1088)
    # Getting the type of 'ar1' (line 1088)
    ar1_153495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 48), 'ar1', False)
    # Processing the call keyword arguments (line 1088)
    kwargs_153496 = {}
    # Getting the type of 'len' (line 1088)
    len_153494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 44), 'len', False)
    # Calling len(args, kwargs) (line 1088)
    len_call_result_153497 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 44), len_153494, *[ar1_153495], **kwargs_153496)
    
    slice_153498 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1088, 11), None, len_call_result_153497, None)
    
    # Call to argsort(...): (line 1088)
    # Processing the call keyword arguments (line 1088)
    str_153501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 30), 'str', 'mergesort')
    keyword_153502 = str_153501
    kwargs_153503 = {'kind': keyword_153502}
    # Getting the type of 'order' (line 1088)
    order_153499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 11), 'order', False)
    # Obtaining the member 'argsort' of a type (line 1088)
    argsort_153500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 11), order_153499, 'argsort')
    # Calling argsort(args, kwargs) (line 1088)
    argsort_call_result_153504 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 11), argsort_153500, *[], **kwargs_153503)
    
    # Obtaining the member '__getitem__' of a type (line 1088)
    getitem___153505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 11), argsort_call_result_153504, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1088)
    subscript_call_result_153506 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 11), getitem___153505, slice_153498)
    
    # Assigning a type to the variable 'indx' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'indx', subscript_call_result_153506)
    
    # Getting the type of 'assume_unique' (line 1090)
    assume_unique_153507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 7), 'assume_unique')
    # Testing the type of an if condition (line 1090)
    if_condition_153508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1090, 4), assume_unique_153507)
    # Assigning a type to the variable 'if_condition_153508' (line 1090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 4), 'if_condition_153508', if_condition_153508)
    # SSA begins for if statement (line 1090)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    # Getting the type of 'indx' (line 1091)
    indx_153509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 20), 'indx')
    # Getting the type of 'flag' (line 1091)
    flag_153510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 15), 'flag')
    # Obtaining the member '__getitem__' of a type (line 1091)
    getitem___153511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 15), flag_153510, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1091)
    subscript_call_result_153512 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 15), getitem___153511, indx_153509)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1091)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'stypy_return_type', subscript_call_result_153512)
    # SSA branch for the else part of an if statement (line 1090)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    # Getting the type of 'rev_idx' (line 1093)
    rev_idx_153513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 26), 'rev_idx')
    
    # Obtaining the type of the subscript
    # Getting the type of 'indx' (line 1093)
    indx_153514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 20), 'indx')
    # Getting the type of 'flag' (line 1093)
    flag_153515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 15), 'flag')
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___153516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 15), flag_153515, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_153517 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 15), getitem___153516, indx_153514)
    
    # Obtaining the member '__getitem__' of a type (line 1093)
    getitem___153518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 15), subscript_call_result_153517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
    subscript_call_result_153519 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 15), getitem___153518, rev_idx_153513)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'stypy_return_type', subscript_call_result_153519)
    # SSA join for if statement (line 1090)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'in1d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'in1d' in the type store
    # Getting the type of 'stypy_return_type' (line 1057)
    stypy_return_type_153520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153520)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'in1d'
    return stypy_return_type_153520

# Assigning a type to the variable 'in1d' (line 1057)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 0), 'in1d', in1d)

@norecursion
def union1d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'union1d'
    module_type_store = module_type_store.open_function_context('union1d', 1096, 0, False)
    
    # Passed parameters checking function
    union1d.stypy_localization = localization
    union1d.stypy_type_of_self = None
    union1d.stypy_type_store = module_type_store
    union1d.stypy_function_name = 'union1d'
    union1d.stypy_param_names_list = ['ar1', 'ar2']
    union1d.stypy_varargs_param_name = None
    union1d.stypy_kwargs_param_name = None
    union1d.stypy_call_defaults = defaults
    union1d.stypy_call_varargs = varargs
    union1d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'union1d', ['ar1', 'ar2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'union1d', localization, ['ar1', 'ar2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'union1d(...)' code ##################

    str_153521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, (-1)), 'str', '\n    Union of two arrays.\n\n    The output is always a masked array. See `numpy.union1d` for more details.\n\n    See also\n    --------\n    numpy.union1d : Equivalent function for ndarrays.\n\n    ')
    
    # Call to unique(...): (line 1107)
    # Processing the call arguments (line 1107)
    
    # Call to concatenate(...): (line 1107)
    # Processing the call arguments (line 1107)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1107)
    tuple_153525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1107)
    # Adding element type (line 1107)
    # Getting the type of 'ar1' (line 1107)
    ar1_153526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 34), 'ar1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1107, 34), tuple_153525, ar1_153526)
    # Adding element type (line 1107)
    # Getting the type of 'ar2' (line 1107)
    ar2_153527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 39), 'ar2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1107, 34), tuple_153525, ar2_153527)
    
    # Processing the call keyword arguments (line 1107)
    kwargs_153528 = {}
    # Getting the type of 'ma' (line 1107)
    ma_153523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 18), 'ma', False)
    # Obtaining the member 'concatenate' of a type (line 1107)
    concatenate_153524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 18), ma_153523, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1107)
    concatenate_call_result_153529 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 18), concatenate_153524, *[tuple_153525], **kwargs_153528)
    
    # Processing the call keyword arguments (line 1107)
    kwargs_153530 = {}
    # Getting the type of 'unique' (line 1107)
    unique_153522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 11), 'unique', False)
    # Calling unique(args, kwargs) (line 1107)
    unique_call_result_153531 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 11), unique_153522, *[concatenate_call_result_153529], **kwargs_153530)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 4), 'stypy_return_type', unique_call_result_153531)
    
    # ################# End of 'union1d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'union1d' in the type store
    # Getting the type of 'stypy_return_type' (line 1096)
    stypy_return_type_153532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153532)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'union1d'
    return stypy_return_type_153532

# Assigning a type to the variable 'union1d' (line 1096)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 0), 'union1d', union1d)

@norecursion
def setdiff1d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1110)
    False_153533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 38), 'False')
    defaults = [False_153533]
    # Create a new context for function 'setdiff1d'
    module_type_store = module_type_store.open_function_context('setdiff1d', 1110, 0, False)
    
    # Passed parameters checking function
    setdiff1d.stypy_localization = localization
    setdiff1d.stypy_type_of_self = None
    setdiff1d.stypy_type_store = module_type_store
    setdiff1d.stypy_function_name = 'setdiff1d'
    setdiff1d.stypy_param_names_list = ['ar1', 'ar2', 'assume_unique']
    setdiff1d.stypy_varargs_param_name = None
    setdiff1d.stypy_kwargs_param_name = None
    setdiff1d.stypy_call_defaults = defaults
    setdiff1d.stypy_call_varargs = varargs
    setdiff1d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'setdiff1d', ['ar1', 'ar2', 'assume_unique'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'setdiff1d', localization, ['ar1', 'ar2', 'assume_unique'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'setdiff1d(...)' code ##################

    str_153534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, (-1)), 'str', '\n    Set difference of 1D arrays with unique elements.\n\n    The output is always a masked array. See `numpy.setdiff1d` for more\n    details.\n\n    See Also\n    --------\n    numpy.setdiff1d : Equivalent function for ndarrays.\n\n    Examples\n    --------\n    >>> x = np.ma.array([1, 2, 3, 4], mask=[0, 1, 0, 1])\n    >>> np.ma.setdiff1d(x, [1, 2])\n    masked_array(data = [3 --],\n                 mask = [False  True],\n           fill_value = 999999)\n\n    ')
    
    # Getting the type of 'assume_unique' (line 1130)
    assume_unique_153535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 7), 'assume_unique')
    # Testing the type of an if condition (line 1130)
    if_condition_153536 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1130, 4), assume_unique_153535)
    # Assigning a type to the variable 'if_condition_153536' (line 1130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 4), 'if_condition_153536', if_condition_153536)
    # SSA begins for if statement (line 1130)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1131):
    
    # Assigning a Call to a Name (line 1131):
    
    # Call to ravel(...): (line 1131)
    # Processing the call keyword arguments (line 1131)
    kwargs_153543 = {}
    
    # Call to asarray(...): (line 1131)
    # Processing the call arguments (line 1131)
    # Getting the type of 'ar1' (line 1131)
    ar1_153539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 25), 'ar1', False)
    # Processing the call keyword arguments (line 1131)
    kwargs_153540 = {}
    # Getting the type of 'ma' (line 1131)
    ma_153537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 14), 'ma', False)
    # Obtaining the member 'asarray' of a type (line 1131)
    asarray_153538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 14), ma_153537, 'asarray')
    # Calling asarray(args, kwargs) (line 1131)
    asarray_call_result_153541 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 14), asarray_153538, *[ar1_153539], **kwargs_153540)
    
    # Obtaining the member 'ravel' of a type (line 1131)
    ravel_153542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 14), asarray_call_result_153541, 'ravel')
    # Calling ravel(args, kwargs) (line 1131)
    ravel_call_result_153544 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 14), ravel_153542, *[], **kwargs_153543)
    
    # Assigning a type to the variable 'ar1' (line 1131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'ar1', ravel_call_result_153544)
    # SSA branch for the else part of an if statement (line 1130)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1133):
    
    # Assigning a Call to a Name (line 1133):
    
    # Call to unique(...): (line 1133)
    # Processing the call arguments (line 1133)
    # Getting the type of 'ar1' (line 1133)
    ar1_153546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 21), 'ar1', False)
    # Processing the call keyword arguments (line 1133)
    kwargs_153547 = {}
    # Getting the type of 'unique' (line 1133)
    unique_153545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 14), 'unique', False)
    # Calling unique(args, kwargs) (line 1133)
    unique_call_result_153548 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 14), unique_153545, *[ar1_153546], **kwargs_153547)
    
    # Assigning a type to the variable 'ar1' (line 1133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'ar1', unique_call_result_153548)
    
    # Assigning a Call to a Name (line 1134):
    
    # Assigning a Call to a Name (line 1134):
    
    # Call to unique(...): (line 1134)
    # Processing the call arguments (line 1134)
    # Getting the type of 'ar2' (line 1134)
    ar2_153550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 21), 'ar2', False)
    # Processing the call keyword arguments (line 1134)
    kwargs_153551 = {}
    # Getting the type of 'unique' (line 1134)
    unique_153549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 14), 'unique', False)
    # Calling unique(args, kwargs) (line 1134)
    unique_call_result_153552 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 14), unique_153549, *[ar2_153550], **kwargs_153551)
    
    # Assigning a type to the variable 'ar2' (line 1134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'ar2', unique_call_result_153552)
    # SSA join for if statement (line 1130)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    
    # Call to in1d(...): (line 1135)
    # Processing the call arguments (line 1135)
    # Getting the type of 'ar1' (line 1135)
    ar1_153554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 20), 'ar1', False)
    # Getting the type of 'ar2' (line 1135)
    ar2_153555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 25), 'ar2', False)
    # Processing the call keyword arguments (line 1135)
    # Getting the type of 'True' (line 1135)
    True_153556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 44), 'True', False)
    keyword_153557 = True_153556
    # Getting the type of 'True' (line 1135)
    True_153558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 57), 'True', False)
    keyword_153559 = True_153558
    kwargs_153560 = {'assume_unique': keyword_153557, 'invert': keyword_153559}
    # Getting the type of 'in1d' (line 1135)
    in1d_153553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 15), 'in1d', False)
    # Calling in1d(args, kwargs) (line 1135)
    in1d_call_result_153561 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 15), in1d_153553, *[ar1_153554, ar2_153555], **kwargs_153560)
    
    # Getting the type of 'ar1' (line 1135)
    ar1_153562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 11), 'ar1')
    # Obtaining the member '__getitem__' of a type (line 1135)
    getitem___153563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 11), ar1_153562, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1135)
    subscript_call_result_153564 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 11), getitem___153563, in1d_call_result_153561)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 4), 'stypy_return_type', subscript_call_result_153564)
    
    # ################# End of 'setdiff1d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'setdiff1d' in the type store
    # Getting the type of 'stypy_return_type' (line 1110)
    stypy_return_type_153565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153565)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'setdiff1d'
    return stypy_return_type_153565

# Assigning a type to the variable 'setdiff1d' (line 1110)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 0), 'setdiff1d', setdiff1d)

@norecursion
def _covhelper(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1143)
    None_153566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 20), 'None')
    # Getting the type of 'True' (line 1143)
    True_153567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 33), 'True')
    # Getting the type of 'True' (line 1143)
    True_153568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 52), 'True')
    defaults = [None_153566, True_153567, True_153568]
    # Create a new context for function '_covhelper'
    module_type_store = module_type_store.open_function_context('_covhelper', 1143, 0, False)
    
    # Passed parameters checking function
    _covhelper.stypy_localization = localization
    _covhelper.stypy_type_of_self = None
    _covhelper.stypy_type_store = module_type_store
    _covhelper.stypy_function_name = '_covhelper'
    _covhelper.stypy_param_names_list = ['x', 'y', 'rowvar', 'allow_masked']
    _covhelper.stypy_varargs_param_name = None
    _covhelper.stypy_kwargs_param_name = None
    _covhelper.stypy_call_defaults = defaults
    _covhelper.stypy_call_varargs = varargs
    _covhelper.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_covhelper', ['x', 'y', 'rowvar', 'allow_masked'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_covhelper', localization, ['x', 'y', 'rowvar', 'allow_masked'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_covhelper(...)' code ##################

    str_153569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1148, (-1)), 'str', '\n    Private function for the computation of covariance and correlation\n    coefficients.\n\n    ')
    
    # Assigning a Call to a Name (line 1149):
    
    # Assigning a Call to a Name (line 1149):
    
    # Call to array(...): (line 1149)
    # Processing the call arguments (line 1149)
    # Getting the type of 'x' (line 1149)
    x_153572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 17), 'x', False)
    # Processing the call keyword arguments (line 1149)
    int_153573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 26), 'int')
    keyword_153574 = int_153573
    # Getting the type of 'True' (line 1149)
    True_153575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 34), 'True', False)
    keyword_153576 = True_153575
    # Getting the type of 'float' (line 1149)
    float_153577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 46), 'float', False)
    keyword_153578 = float_153577
    kwargs_153579 = {'dtype': keyword_153578, 'copy': keyword_153576, 'ndmin': keyword_153574}
    # Getting the type of 'ma' (line 1149)
    ma_153570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 8), 'ma', False)
    # Obtaining the member 'array' of a type (line 1149)
    array_153571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 8), ma_153570, 'array')
    # Calling array(args, kwargs) (line 1149)
    array_call_result_153580 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 8), array_153571, *[x_153572], **kwargs_153579)
    
    # Assigning a type to the variable 'x' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'x', array_call_result_153580)
    
    # Assigning a Call to a Name (line 1150):
    
    # Assigning a Call to a Name (line 1150):
    
    # Call to getmaskarray(...): (line 1150)
    # Processing the call arguments (line 1150)
    # Getting the type of 'x' (line 1150)
    x_153583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 28), 'x', False)
    # Processing the call keyword arguments (line 1150)
    kwargs_153584 = {}
    # Getting the type of 'ma' (line 1150)
    ma_153581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 12), 'ma', False)
    # Obtaining the member 'getmaskarray' of a type (line 1150)
    getmaskarray_153582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 12), ma_153581, 'getmaskarray')
    # Calling getmaskarray(args, kwargs) (line 1150)
    getmaskarray_call_result_153585 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 12), getmaskarray_153582, *[x_153583], **kwargs_153584)
    
    # Assigning a type to the variable 'xmask' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 4), 'xmask', getmaskarray_call_result_153585)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'allow_masked' (line 1152)
    allow_masked_153586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 11), 'allow_masked')
    # Applying the 'not' unary operator (line 1152)
    result_not__153587 = python_operator(stypy.reporting.localization.Localization(__file__, 1152, 7), 'not', allow_masked_153586)
    
    
    # Call to any(...): (line 1152)
    # Processing the call keyword arguments (line 1152)
    kwargs_153590 = {}
    # Getting the type of 'xmask' (line 1152)
    xmask_153588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 28), 'xmask', False)
    # Obtaining the member 'any' of a type (line 1152)
    any_153589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 28), xmask_153588, 'any')
    # Calling any(args, kwargs) (line 1152)
    any_call_result_153591 = invoke(stypy.reporting.localization.Localization(__file__, 1152, 28), any_153589, *[], **kwargs_153590)
    
    # Applying the binary operator 'and' (line 1152)
    result_and_keyword_153592 = python_operator(stypy.reporting.localization.Localization(__file__, 1152, 7), 'and', result_not__153587, any_call_result_153591)
    
    # Testing the type of an if condition (line 1152)
    if_condition_153593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1152, 4), result_and_keyword_153592)
    # Assigning a type to the variable 'if_condition_153593' (line 1152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 4), 'if_condition_153593', if_condition_153593)
    # SSA begins for if statement (line 1152)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1153)
    # Processing the call arguments (line 1153)
    str_153595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 25), 'str', 'Cannot process masked data.')
    # Processing the call keyword arguments (line 1153)
    kwargs_153596 = {}
    # Getting the type of 'ValueError' (line 1153)
    ValueError_153594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1153)
    ValueError_call_result_153597 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 14), ValueError_153594, *[str_153595], **kwargs_153596)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1153, 8), ValueError_call_result_153597, 'raise parameter', BaseException)
    # SSA join for if statement (line 1152)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_153598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 15), 'int')
    # Getting the type of 'x' (line 1155)
    x_153599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 7), 'x')
    # Obtaining the member 'shape' of a type (line 1155)
    shape_153600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 7), x_153599, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1155)
    getitem___153601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 7), shape_153600, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1155)
    subscript_call_result_153602 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 7), getitem___153601, int_153598)
    
    int_153603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 21), 'int')
    # Applying the binary operator '==' (line 1155)
    result_eq_153604 = python_operator(stypy.reporting.localization.Localization(__file__, 1155, 7), '==', subscript_call_result_153602, int_153603)
    
    # Testing the type of an if condition (line 1155)
    if_condition_153605 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1155, 4), result_eq_153604)
    # Assigning a type to the variable 'if_condition_153605' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 4), 'if_condition_153605', if_condition_153605)
    # SSA begins for if statement (line 1155)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1156):
    
    # Assigning a Name to a Name (line 1156):
    # Getting the type of 'True' (line 1156)
    True_153606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 17), 'True')
    # Assigning a type to the variable 'rowvar' (line 1156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 8), 'rowvar', True_153606)
    # SSA join for if statement (line 1155)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1158):
    
    # Assigning a Call to a Name (line 1158):
    
    # Call to int(...): (line 1158)
    # Processing the call arguments (line 1158)
    
    # Call to bool(...): (line 1158)
    # Processing the call arguments (line 1158)
    # Getting the type of 'rowvar' (line 1158)
    rowvar_153609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 22), 'rowvar', False)
    # Processing the call keyword arguments (line 1158)
    kwargs_153610 = {}
    # Getting the type of 'bool' (line 1158)
    bool_153608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 17), 'bool', False)
    # Calling bool(args, kwargs) (line 1158)
    bool_call_result_153611 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 17), bool_153608, *[rowvar_153609], **kwargs_153610)
    
    # Processing the call keyword arguments (line 1158)
    kwargs_153612 = {}
    # Getting the type of 'int' (line 1158)
    int_153607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 13), 'int', False)
    # Calling int(args, kwargs) (line 1158)
    int_call_result_153613 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 13), int_153607, *[bool_call_result_153611], **kwargs_153612)
    
    # Assigning a type to the variable 'rowvar' (line 1158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 4), 'rowvar', int_call_result_153613)
    
    # Assigning a BinOp to a Name (line 1159):
    
    # Assigning a BinOp to a Name (line 1159):
    int_153614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 11), 'int')
    # Getting the type of 'rowvar' (line 1159)
    rowvar_153615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 15), 'rowvar')
    # Applying the binary operator '-' (line 1159)
    result_sub_153616 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 11), '-', int_153614, rowvar_153615)
    
    # Assigning a type to the variable 'axis' (line 1159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 4), 'axis', result_sub_153616)
    
    # Getting the type of 'rowvar' (line 1160)
    rowvar_153617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 7), 'rowvar')
    # Testing the type of an if condition (line 1160)
    if_condition_153618 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1160, 4), rowvar_153617)
    # Assigning a type to the variable 'if_condition_153618' (line 1160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 4), 'if_condition_153618', if_condition_153618)
    # SSA begins for if statement (line 1160)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1161):
    
    # Assigning a Tuple to a Name (line 1161):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1161)
    tuple_153619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1161)
    # Adding element type (line 1161)
    
    # Call to slice(...): (line 1161)
    # Processing the call arguments (line 1161)
    # Getting the type of 'None' (line 1161)
    None_153621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 21), 'None', False)
    # Processing the call keyword arguments (line 1161)
    kwargs_153622 = {}
    # Getting the type of 'slice' (line 1161)
    slice_153620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 1161)
    slice_call_result_153623 = invoke(stypy.reporting.localization.Localization(__file__, 1161, 15), slice_153620, *[None_153621], **kwargs_153622)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1161, 15), tuple_153619, slice_call_result_153623)
    # Adding element type (line 1161)
    # Getting the type of 'None' (line 1161)
    None_153624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 28), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1161, 15), tuple_153619, None_153624)
    
    # Assigning a type to the variable 'tup' (line 1161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 8), 'tup', tuple_153619)
    # SSA branch for the else part of an if statement (line 1160)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Tuple to a Name (line 1163):
    
    # Assigning a Tuple to a Name (line 1163):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1163)
    tuple_153625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1163)
    # Adding element type (line 1163)
    # Getting the type of 'None' (line 1163)
    None_153626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 15), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1163, 15), tuple_153625, None_153626)
    # Adding element type (line 1163)
    
    # Call to slice(...): (line 1163)
    # Processing the call arguments (line 1163)
    # Getting the type of 'None' (line 1163)
    None_153628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 27), 'None', False)
    # Processing the call keyword arguments (line 1163)
    kwargs_153629 = {}
    # Getting the type of 'slice' (line 1163)
    slice_153627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 21), 'slice', False)
    # Calling slice(args, kwargs) (line 1163)
    slice_call_result_153630 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 21), slice_153627, *[None_153628], **kwargs_153629)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1163, 15), tuple_153625, slice_call_result_153630)
    
    # Assigning a type to the variable 'tup' (line 1163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'tup', tuple_153625)
    # SSA join for if statement (line 1160)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1165)
    # Getting the type of 'y' (line 1165)
    y_153631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 7), 'y')
    # Getting the type of 'None' (line 1165)
    None_153632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'None')
    
    (may_be_153633, more_types_in_union_153634) = may_be_none(y_153631, None_153632)

    if may_be_153633:

        if more_types_in_union_153634:
            # Runtime conditional SSA (line 1165)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1166):
        
        # Assigning a Call to a Name (line 1166):
        
        # Call to astype(...): (line 1166)
        # Processing the call arguments (line 1166)
        # Getting the type of 'int' (line 1166)
        int_153641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 48), 'int', False)
        # Processing the call keyword arguments (line 1166)
        kwargs_153642 = {}
        
        # Call to logical_not(...): (line 1166)
        # Processing the call arguments (line 1166)
        # Getting the type of 'xmask' (line 1166)
        xmask_153637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 34), 'xmask', False)
        # Processing the call keyword arguments (line 1166)
        kwargs_153638 = {}
        # Getting the type of 'np' (line 1166)
        np_153635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 19), 'np', False)
        # Obtaining the member 'logical_not' of a type (line 1166)
        logical_not_153636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 19), np_153635, 'logical_not')
        # Calling logical_not(args, kwargs) (line 1166)
        logical_not_call_result_153639 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 19), logical_not_153636, *[xmask_153637], **kwargs_153638)
        
        # Obtaining the member 'astype' of a type (line 1166)
        astype_153640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 19), logical_not_call_result_153639, 'astype')
        # Calling astype(args, kwargs) (line 1166)
        astype_call_result_153643 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 19), astype_153640, *[int_153641], **kwargs_153642)
        
        # Assigning a type to the variable 'xnotmask' (line 1166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'xnotmask', astype_call_result_153643)

        if more_types_in_union_153634:
            # Runtime conditional SSA for else branch (line 1165)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_153633) or more_types_in_union_153634):
        
        # Assigning a Call to a Name (line 1168):
        
        # Assigning a Call to a Name (line 1168):
        
        # Call to array(...): (line 1168)
        # Processing the call arguments (line 1168)
        # Getting the type of 'y' (line 1168)
        y_153645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 18), 'y', False)
        # Processing the call keyword arguments (line 1168)
        # Getting the type of 'False' (line 1168)
        False_153646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 26), 'False', False)
        keyword_153647 = False_153646
        int_153648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1168, 39), 'int')
        keyword_153649 = int_153648
        # Getting the type of 'float' (line 1168)
        float_153650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 48), 'float', False)
        keyword_153651 = float_153650
        kwargs_153652 = {'dtype': keyword_153651, 'copy': keyword_153647, 'ndmin': keyword_153649}
        # Getting the type of 'array' (line 1168)
        array_153644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 12), 'array', False)
        # Calling array(args, kwargs) (line 1168)
        array_call_result_153653 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 12), array_153644, *[y_153645], **kwargs_153652)
        
        # Assigning a type to the variable 'y' (line 1168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 8), 'y', array_call_result_153653)
        
        # Assigning a Call to a Name (line 1169):
        
        # Assigning a Call to a Name (line 1169):
        
        # Call to getmaskarray(...): (line 1169)
        # Processing the call arguments (line 1169)
        # Getting the type of 'y' (line 1169)
        y_153656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 32), 'y', False)
        # Processing the call keyword arguments (line 1169)
        kwargs_153657 = {}
        # Getting the type of 'ma' (line 1169)
        ma_153654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 16), 'ma', False)
        # Obtaining the member 'getmaskarray' of a type (line 1169)
        getmaskarray_153655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 16), ma_153654, 'getmaskarray')
        # Calling getmaskarray(args, kwargs) (line 1169)
        getmaskarray_call_result_153658 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 16), getmaskarray_153655, *[y_153656], **kwargs_153657)
        
        # Assigning a type to the variable 'ymask' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 8), 'ymask', getmaskarray_call_result_153658)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'allow_masked' (line 1170)
        allow_masked_153659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 15), 'allow_masked')
        # Applying the 'not' unary operator (line 1170)
        result_not__153660 = python_operator(stypy.reporting.localization.Localization(__file__, 1170, 11), 'not', allow_masked_153659)
        
        
        # Call to any(...): (line 1170)
        # Processing the call keyword arguments (line 1170)
        kwargs_153663 = {}
        # Getting the type of 'ymask' (line 1170)
        ymask_153661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 32), 'ymask', False)
        # Obtaining the member 'any' of a type (line 1170)
        any_153662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 32), ymask_153661, 'any')
        # Calling any(args, kwargs) (line 1170)
        any_call_result_153664 = invoke(stypy.reporting.localization.Localization(__file__, 1170, 32), any_153662, *[], **kwargs_153663)
        
        # Applying the binary operator 'and' (line 1170)
        result_and_keyword_153665 = python_operator(stypy.reporting.localization.Localization(__file__, 1170, 11), 'and', result_not__153660, any_call_result_153664)
        
        # Testing the type of an if condition (line 1170)
        if_condition_153666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1170, 8), result_and_keyword_153665)
        # Assigning a type to the variable 'if_condition_153666' (line 1170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), 'if_condition_153666', if_condition_153666)
        # SSA begins for if statement (line 1170)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1171)
        # Processing the call arguments (line 1171)
        str_153668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 29), 'str', 'Cannot process masked data.')
        # Processing the call keyword arguments (line 1171)
        kwargs_153669 = {}
        # Getting the type of 'ValueError' (line 1171)
        ValueError_153667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1171)
        ValueError_call_result_153670 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 18), ValueError_153667, *[str_153668], **kwargs_153669)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1171, 12), ValueError_call_result_153670, 'raise parameter', BaseException)
        # SSA join for if statement (line 1170)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to any(...): (line 1172)
        # Processing the call keyword arguments (line 1172)
        kwargs_153673 = {}
        # Getting the type of 'xmask' (line 1172)
        xmask_153671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 11), 'xmask', False)
        # Obtaining the member 'any' of a type (line 1172)
        any_153672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 11), xmask_153671, 'any')
        # Calling any(args, kwargs) (line 1172)
        any_call_result_153674 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 11), any_153672, *[], **kwargs_153673)
        
        
        # Call to any(...): (line 1172)
        # Processing the call keyword arguments (line 1172)
        kwargs_153677 = {}
        # Getting the type of 'ymask' (line 1172)
        ymask_153675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 26), 'ymask', False)
        # Obtaining the member 'any' of a type (line 1172)
        any_153676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 26), ymask_153675, 'any')
        # Calling any(args, kwargs) (line 1172)
        any_call_result_153678 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 26), any_153676, *[], **kwargs_153677)
        
        # Applying the binary operator 'or' (line 1172)
        result_or_keyword_153679 = python_operator(stypy.reporting.localization.Localization(__file__, 1172, 11), 'or', any_call_result_153674, any_call_result_153678)
        
        # Testing the type of an if condition (line 1172)
        if_condition_153680 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1172, 8), result_or_keyword_153679)
        # Assigning a type to the variable 'if_condition_153680' (line 1172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 8), 'if_condition_153680', if_condition_153680)
        # SSA begins for if statement (line 1172)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'y' (line 1173)
        y_153681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 15), 'y')
        # Obtaining the member 'shape' of a type (line 1173)
        shape_153682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 15), y_153681, 'shape')
        # Getting the type of 'x' (line 1173)
        x_153683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 26), 'x')
        # Obtaining the member 'shape' of a type (line 1173)
        shape_153684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 26), x_153683, 'shape')
        # Applying the binary operator '==' (line 1173)
        result_eq_153685 = python_operator(stypy.reporting.localization.Localization(__file__, 1173, 15), '==', shape_153682, shape_153684)
        
        # Testing the type of an if condition (line 1173)
        if_condition_153686 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1173, 12), result_eq_153685)
        # Assigning a type to the variable 'if_condition_153686' (line 1173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 12), 'if_condition_153686', if_condition_153686)
        # SSA begins for if statement (line 1173)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1175):
        
        # Assigning a Call to a Name (line 1175):
        
        # Call to logical_or(...): (line 1175)
        # Processing the call arguments (line 1175)
        # Getting the type of 'xmask' (line 1175)
        xmask_153689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 44), 'xmask', False)
        # Getting the type of 'ymask' (line 1175)
        ymask_153690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 51), 'ymask', False)
        # Processing the call keyword arguments (line 1175)
        kwargs_153691 = {}
        # Getting the type of 'np' (line 1175)
        np_153687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 30), 'np', False)
        # Obtaining the member 'logical_or' of a type (line 1175)
        logical_or_153688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 30), np_153687, 'logical_or')
        # Calling logical_or(args, kwargs) (line 1175)
        logical_or_call_result_153692 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 30), logical_or_153688, *[xmask_153689, ymask_153690], **kwargs_153691)
        
        # Assigning a type to the variable 'common_mask' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 16), 'common_mask', logical_or_call_result_153692)
        
        
        # Getting the type of 'common_mask' (line 1176)
        common_mask_153693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 19), 'common_mask')
        # Getting the type of 'nomask' (line 1176)
        nomask_153694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 38), 'nomask')
        # Applying the binary operator 'isnot' (line 1176)
        result_is_not_153695 = python_operator(stypy.reporting.localization.Localization(__file__, 1176, 19), 'isnot', common_mask_153693, nomask_153694)
        
        # Testing the type of an if condition (line 1176)
        if_condition_153696 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1176, 16), result_is_not_153695)
        # Assigning a type to the variable 'if_condition_153696' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 16), 'if_condition_153696', if_condition_153696)
        # SSA begins for if statement (line 1176)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 4 elements.
        
        # Assigning a Name to a Name (line 1177):
        # Getting the type of 'common_mask' (line 1177)
        common_mask_153697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 56), 'common_mask')
        # Assigning a type to the variable 'ymask' (line 1177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1177, 48), 'ymask', common_mask_153697)
        
        # Assigning a Name to a Attribute (line 1177):
        # Getting the type of 'ymask' (line 1177)
        ymask_153698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 48), 'ymask')
        # Getting the type of 'y' (line 1177)
        y_153699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 38), 'y')
        # Setting the type of the member '_mask' of a type (line 1177)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 38), y_153699, '_mask', ymask_153698)
        
        # Assigning a Attribute to a Attribute (line 1177):
        # Getting the type of 'y' (line 1177)
        y_153700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 38), 'y')
        # Obtaining the member '_mask' of a type (line 1177)
        _mask_153701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 38), y_153700, '_mask')
        # Getting the type of 'x' (line 1177)
        x_153702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 28), 'x')
        # Setting the type of the member '_mask' of a type (line 1177)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 28), x_153702, '_mask', _mask_153701)
        
        # Assigning a Attribute to a Name (line 1177):
        # Getting the type of 'x' (line 1177)
        x_153703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 28), 'x')
        # Obtaining the member '_mask' of a type (line 1177)
        _mask_153704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 28), x_153703, '_mask')
        # Assigning a type to the variable 'xmask' (line 1177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1177, 20), 'xmask', _mask_153704)
        
        # Assigning a Name to a Attribute (line 1178):
        
        # Assigning a Name to a Attribute (line 1178):
        # Getting the type of 'False' (line 1178)
        False_153705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 36), 'False')
        # Getting the type of 'x' (line 1178)
        x_153706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 20), 'x')
        # Setting the type of the member '_sharedmask' of a type (line 1178)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 20), x_153706, '_sharedmask', False_153705)
        
        # Assigning a Name to a Attribute (line 1179):
        
        # Assigning a Name to a Attribute (line 1179):
        # Getting the type of 'False' (line 1179)
        False_153707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 36), 'False')
        # Getting the type of 'y' (line 1179)
        y_153708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 20), 'y')
        # Setting the type of the member '_sharedmask' of a type (line 1179)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 20), y_153708, '_sharedmask', False_153707)
        # SSA join for if statement (line 1176)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1173)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1172)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1180):
        
        # Assigning a Call to a Name (line 1180):
        
        # Call to concatenate(...): (line 1180)
        # Processing the call arguments (line 1180)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1180)
        tuple_153711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1180, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1180)
        # Adding element type (line 1180)
        # Getting the type of 'x' (line 1180)
        x_153712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 28), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1180, 28), tuple_153711, x_153712)
        # Adding element type (line 1180)
        # Getting the type of 'y' (line 1180)
        y_153713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 31), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1180, 28), tuple_153711, y_153713)
        
        # Getting the type of 'axis' (line 1180)
        axis_153714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 35), 'axis', False)
        # Processing the call keyword arguments (line 1180)
        kwargs_153715 = {}
        # Getting the type of 'ma' (line 1180)
        ma_153709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 12), 'ma', False)
        # Obtaining the member 'concatenate' of a type (line 1180)
        concatenate_153710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 12), ma_153709, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1180)
        concatenate_call_result_153716 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 12), concatenate_153710, *[tuple_153711, axis_153714], **kwargs_153715)
        
        # Assigning a type to the variable 'x' (line 1180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 8), 'x', concatenate_call_result_153716)
        
        # Assigning a Call to a Name (line 1181):
        
        # Assigning a Call to a Name (line 1181):
        
        # Call to astype(...): (line 1181)
        # Processing the call arguments (line 1181)
        # Getting the type of 'int' (line 1181)
        int_153730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 79), 'int', False)
        # Processing the call keyword arguments (line 1181)
        kwargs_153731 = {}
        
        # Call to logical_not(...): (line 1181)
        # Processing the call arguments (line 1181)
        
        # Call to concatenate(...): (line 1181)
        # Processing the call arguments (line 1181)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1181)
        tuple_153721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1181)
        # Adding element type (line 1181)
        # Getting the type of 'xmask' (line 1181)
        xmask_153722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 50), 'xmask', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1181, 50), tuple_153721, xmask_153722)
        # Adding element type (line 1181)
        # Getting the type of 'ymask' (line 1181)
        ymask_153723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 57), 'ymask', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1181, 50), tuple_153721, ymask_153723)
        
        # Getting the type of 'axis' (line 1181)
        axis_153724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 65), 'axis', False)
        # Processing the call keyword arguments (line 1181)
        kwargs_153725 = {}
        # Getting the type of 'np' (line 1181)
        np_153719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 34), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1181)
        concatenate_153720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 34), np_153719, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1181)
        concatenate_call_result_153726 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 34), concatenate_153720, *[tuple_153721, axis_153724], **kwargs_153725)
        
        # Processing the call keyword arguments (line 1181)
        kwargs_153727 = {}
        # Getting the type of 'np' (line 1181)
        np_153717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 19), 'np', False)
        # Obtaining the member 'logical_not' of a type (line 1181)
        logical_not_153718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 19), np_153717, 'logical_not')
        # Calling logical_not(args, kwargs) (line 1181)
        logical_not_call_result_153728 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 19), logical_not_153718, *[concatenate_call_result_153726], **kwargs_153727)
        
        # Obtaining the member 'astype' of a type (line 1181)
        astype_153729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 19), logical_not_call_result_153728, 'astype')
        # Calling astype(args, kwargs) (line 1181)
        astype_call_result_153732 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 19), astype_153729, *[int_153730], **kwargs_153731)
        
        # Assigning a type to the variable 'xnotmask' (line 1181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'xnotmask', astype_call_result_153732)

        if (may_be_153633 and more_types_in_union_153634):
            # SSA join for if statement (line 1165)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'x' (line 1182)
    x_153733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), 'x')
    
    # Obtaining the type of the subscript
    # Getting the type of 'tup' (line 1182)
    tup_153734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 29), 'tup')
    
    # Call to mean(...): (line 1182)
    # Processing the call keyword arguments (line 1182)
    # Getting the type of 'rowvar' (line 1182)
    rowvar_153737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 21), 'rowvar', False)
    keyword_153738 = rowvar_153737
    kwargs_153739 = {'axis': keyword_153738}
    # Getting the type of 'x' (line 1182)
    x_153735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 9), 'x', False)
    # Obtaining the member 'mean' of a type (line 1182)
    mean_153736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 9), x_153735, 'mean')
    # Calling mean(args, kwargs) (line 1182)
    mean_call_result_153740 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 9), mean_153736, *[], **kwargs_153739)
    
    # Obtaining the member '__getitem__' of a type (line 1182)
    getitem___153741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 9), mean_call_result_153740, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1182)
    subscript_call_result_153742 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 9), getitem___153741, tup_153734)
    
    # Applying the binary operator '-=' (line 1182)
    result_isub_153743 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 4), '-=', x_153733, subscript_call_result_153742)
    # Assigning a type to the variable 'x' (line 1182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), 'x', result_isub_153743)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1183)
    tuple_153744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1183)
    # Adding element type (line 1183)
    # Getting the type of 'x' (line 1183)
    x_153745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 12), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1183, 12), tuple_153744, x_153745)
    # Adding element type (line 1183)
    # Getting the type of 'xnotmask' (line 1183)
    xnotmask_153746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 15), 'xnotmask')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1183, 12), tuple_153744, xnotmask_153746)
    # Adding element type (line 1183)
    # Getting the type of 'rowvar' (line 1183)
    rowvar_153747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 25), 'rowvar')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1183, 12), tuple_153744, rowvar_153747)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 4), 'stypy_return_type', tuple_153744)
    
    # ################# End of '_covhelper(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_covhelper' in the type store
    # Getting the type of 'stypy_return_type' (line 1143)
    stypy_return_type_153748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153748)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_covhelper'
    return stypy_return_type_153748

# Assigning a type to the variable '_covhelper' (line 1143)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 0), '_covhelper', _covhelper)

@norecursion
def cov(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1186)
    None_153749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 13), 'None')
    # Getting the type of 'True' (line 1186)
    True_153750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 26), 'True')
    # Getting the type of 'False' (line 1186)
    False_153751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 37), 'False')
    # Getting the type of 'True' (line 1186)
    True_153752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 57), 'True')
    # Getting the type of 'None' (line 1186)
    None_153753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 68), 'None')
    defaults = [None_153749, True_153750, False_153751, True_153752, None_153753]
    # Create a new context for function 'cov'
    module_type_store = module_type_store.open_function_context('cov', 1186, 0, False)
    
    # Passed parameters checking function
    cov.stypy_localization = localization
    cov.stypy_type_of_self = None
    cov.stypy_type_store = module_type_store
    cov.stypy_function_name = 'cov'
    cov.stypy_param_names_list = ['x', 'y', 'rowvar', 'bias', 'allow_masked', 'ddof']
    cov.stypy_varargs_param_name = None
    cov.stypy_kwargs_param_name = None
    cov.stypy_call_defaults = defaults
    cov.stypy_call_varargs = varargs
    cov.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cov', ['x', 'y', 'rowvar', 'bias', 'allow_masked', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cov', localization, ['x', 'y', 'rowvar', 'bias', 'allow_masked', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cov(...)' code ##################

    str_153754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, (-1)), 'str', '\n    Estimate the covariance matrix.\n\n    Except for the handling of missing data this function does the same as\n    `numpy.cov`. For more details and examples, see `numpy.cov`.\n\n    By default, masked values are recognized as such. If `x` and `y` have the\n    same shape, a common mask is allocated: if ``x[i,j]`` is masked, then\n    ``y[i,j]`` will also be masked.\n    Setting `allow_masked` to False will raise an exception if values are\n    missing in either of the input arrays.\n\n    Parameters\n    ----------\n    x : array_like\n        A 1-D or 2-D array containing multiple variables and observations.\n        Each row of `x` represents a variable, and each column a single\n        observation of all those variables. Also see `rowvar` below.\n    y : array_like, optional\n        An additional set of variables and observations. `y` has the same\n        form as `x`.\n    rowvar : bool, optional\n        If `rowvar` is True (default), then each row represents a\n        variable, with observations in the columns. Otherwise, the relationship\n        is transposed: each column represents a variable, while the rows\n        contain observations.\n    bias : bool, optional\n        Default normalization (False) is by ``(N-1)``, where ``N`` is the\n        number of observations given (unbiased estimate). If `bias` is True,\n        then normalization is by ``N``. This keyword can be overridden by\n        the keyword ``ddof`` in numpy versions >= 1.5.\n    allow_masked : bool, optional\n        If True, masked values are propagated pair-wise: if a value is masked\n        in `x`, the corresponding value is masked in `y`.\n        If False, raises a `ValueError` exception when some values are missing.\n    ddof : {None, int}, optional\n        If not ``None`` normalization is by ``(N - ddof)``, where ``N`` is\n        the number of observations; this overrides the value implied by\n        ``bias``. The default value is ``None``.\n\n        .. versionadded:: 1.5\n\n    Raises\n    ------\n    ValueError\n        Raised if some values are missing and `allow_masked` is False.\n\n    See Also\n    --------\n    numpy.cov\n\n    ')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'ddof' (line 1240)
    ddof_153755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 7), 'ddof')
    # Getting the type of 'None' (line 1240)
    None_153756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 19), 'None')
    # Applying the binary operator 'isnot' (line 1240)
    result_is_not_153757 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 7), 'isnot', ddof_153755, None_153756)
    
    
    # Getting the type of 'ddof' (line 1240)
    ddof_153758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 28), 'ddof')
    
    # Call to int(...): (line 1240)
    # Processing the call arguments (line 1240)
    # Getting the type of 'ddof' (line 1240)
    ddof_153760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 40), 'ddof', False)
    # Processing the call keyword arguments (line 1240)
    kwargs_153761 = {}
    # Getting the type of 'int' (line 1240)
    int_153759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 36), 'int', False)
    # Calling int(args, kwargs) (line 1240)
    int_call_result_153762 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 36), int_153759, *[ddof_153760], **kwargs_153761)
    
    # Applying the binary operator '!=' (line 1240)
    result_ne_153763 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 28), '!=', ddof_153758, int_call_result_153762)
    
    # Applying the binary operator 'and' (line 1240)
    result_and_keyword_153764 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 7), 'and', result_is_not_153757, result_ne_153763)
    
    # Testing the type of an if condition (line 1240)
    if_condition_153765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1240, 4), result_and_keyword_153764)
    # Assigning a type to the variable 'if_condition_153765' (line 1240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 4), 'if_condition_153765', if_condition_153765)
    # SSA begins for if statement (line 1240)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1241)
    # Processing the call arguments (line 1241)
    str_153767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 25), 'str', 'ddof must be an integer')
    # Processing the call keyword arguments (line 1241)
    kwargs_153768 = {}
    # Getting the type of 'ValueError' (line 1241)
    ValueError_153766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1241)
    ValueError_call_result_153769 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 14), ValueError_153766, *[str_153767], **kwargs_153768)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1241, 8), ValueError_call_result_153769, 'raise parameter', BaseException)
    # SSA join for if statement (line 1240)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1243)
    # Getting the type of 'ddof' (line 1243)
    ddof_153770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 7), 'ddof')
    # Getting the type of 'None' (line 1243)
    None_153771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 15), 'None')
    
    (may_be_153772, more_types_in_union_153773) = may_be_none(ddof_153770, None_153771)

    if may_be_153772:

        if more_types_in_union_153773:
            # Runtime conditional SSA (line 1243)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'bias' (line 1244)
        bias_153774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 11), 'bias')
        # Testing the type of an if condition (line 1244)
        if_condition_153775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1244, 8), bias_153774)
        # Assigning a type to the variable 'if_condition_153775' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'if_condition_153775', if_condition_153775)
        # SSA begins for if statement (line 1244)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1245):
        
        # Assigning a Num to a Name (line 1245):
        int_153776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 19), 'int')
        # Assigning a type to the variable 'ddof' (line 1245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 12), 'ddof', int_153776)
        # SSA branch for the else part of an if statement (line 1244)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1247):
        
        # Assigning a Num to a Name (line 1247):
        int_153777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 19), 'int')
        # Assigning a type to the variable 'ddof' (line 1247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 12), 'ddof', int_153777)
        # SSA join for if statement (line 1244)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_153773:
            # SSA join for if statement (line 1243)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 1249):
    
    # Assigning a Call to a Name:
    
    # Call to _covhelper(...): (line 1249)
    # Processing the call arguments (line 1249)
    # Getting the type of 'x' (line 1249)
    x_153779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 39), 'x', False)
    # Getting the type of 'y' (line 1249)
    y_153780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 42), 'y', False)
    # Getting the type of 'rowvar' (line 1249)
    rowvar_153781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 45), 'rowvar', False)
    # Getting the type of 'allow_masked' (line 1249)
    allow_masked_153782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 53), 'allow_masked', False)
    # Processing the call keyword arguments (line 1249)
    kwargs_153783 = {}
    # Getting the type of '_covhelper' (line 1249)
    _covhelper_153778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 28), '_covhelper', False)
    # Calling _covhelper(args, kwargs) (line 1249)
    _covhelper_call_result_153784 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 28), _covhelper_153778, *[x_153779, y_153780, rowvar_153781, allow_masked_153782], **kwargs_153783)
    
    # Assigning a type to the variable 'call_assignment_151380' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151380', _covhelper_call_result_153784)
    
    # Assigning a Call to a Name (line 1249):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_153787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 4), 'int')
    # Processing the call keyword arguments
    kwargs_153788 = {}
    # Getting the type of 'call_assignment_151380' (line 1249)
    call_assignment_151380_153785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151380', False)
    # Obtaining the member '__getitem__' of a type (line 1249)
    getitem___153786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 4), call_assignment_151380_153785, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_153789 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___153786, *[int_153787], **kwargs_153788)
    
    # Assigning a type to the variable 'call_assignment_151381' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151381', getitem___call_result_153789)
    
    # Assigning a Name to a Name (line 1249):
    # Getting the type of 'call_assignment_151381' (line 1249)
    call_assignment_151381_153790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151381')
    # Assigning a type to the variable 'x' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 5), 'x', call_assignment_151381_153790)
    
    # Assigning a Call to a Name (line 1249):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_153793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 4), 'int')
    # Processing the call keyword arguments
    kwargs_153794 = {}
    # Getting the type of 'call_assignment_151380' (line 1249)
    call_assignment_151380_153791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151380', False)
    # Obtaining the member '__getitem__' of a type (line 1249)
    getitem___153792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 4), call_assignment_151380_153791, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_153795 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___153792, *[int_153793], **kwargs_153794)
    
    # Assigning a type to the variable 'call_assignment_151382' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151382', getitem___call_result_153795)
    
    # Assigning a Name to a Name (line 1249):
    # Getting the type of 'call_assignment_151382' (line 1249)
    call_assignment_151382_153796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151382')
    # Assigning a type to the variable 'xnotmask' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'xnotmask', call_assignment_151382_153796)
    
    # Assigning a Call to a Name (line 1249):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_153799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 4), 'int')
    # Processing the call keyword arguments
    kwargs_153800 = {}
    # Getting the type of 'call_assignment_151380' (line 1249)
    call_assignment_151380_153797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151380', False)
    # Obtaining the member '__getitem__' of a type (line 1249)
    getitem___153798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 4), call_assignment_151380_153797, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_153801 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___153798, *[int_153799], **kwargs_153800)
    
    # Assigning a type to the variable 'call_assignment_151383' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151383', getitem___call_result_153801)
    
    # Assigning a Name to a Name (line 1249):
    # Getting the type of 'call_assignment_151383' (line 1249)
    call_assignment_151383_153802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'call_assignment_151383')
    # Assigning a type to the variable 'rowvar' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 18), 'rowvar', call_assignment_151383_153802)
    
    
    # Getting the type of 'rowvar' (line 1250)
    rowvar_153803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 11), 'rowvar')
    # Applying the 'not' unary operator (line 1250)
    result_not__153804 = python_operator(stypy.reporting.localization.Localization(__file__, 1250, 7), 'not', rowvar_153803)
    
    # Testing the type of an if condition (line 1250)
    if_condition_153805 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1250, 4), result_not__153804)
    # Assigning a type to the variable 'if_condition_153805' (line 1250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'if_condition_153805', if_condition_153805)
    # SSA begins for if statement (line 1250)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1251):
    
    # Assigning a BinOp to a Name (line 1251):
    
    # Call to dot(...): (line 1251)
    # Processing the call arguments (line 1251)
    # Getting the type of 'xnotmask' (line 1251)
    xnotmask_153808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 22), 'xnotmask', False)
    # Obtaining the member 'T' of a type (line 1251)
    T_153809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 22), xnotmask_153808, 'T')
    # Getting the type of 'xnotmask' (line 1251)
    xnotmask_153810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 34), 'xnotmask', False)
    # Processing the call keyword arguments (line 1251)
    kwargs_153811 = {}
    # Getting the type of 'np' (line 1251)
    np_153806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 15), 'np', False)
    # Obtaining the member 'dot' of a type (line 1251)
    dot_153807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 15), np_153806, 'dot')
    # Calling dot(args, kwargs) (line 1251)
    dot_call_result_153812 = invoke(stypy.reporting.localization.Localization(__file__, 1251, 15), dot_153807, *[T_153809, xnotmask_153810], **kwargs_153811)
    
    float_153813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, 46), 'float')
    # Applying the binary operator '*' (line 1251)
    result_mul_153814 = python_operator(stypy.reporting.localization.Localization(__file__, 1251, 15), '*', dot_call_result_153812, float_153813)
    
    # Getting the type of 'ddof' (line 1251)
    ddof_153815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 51), 'ddof')
    # Applying the binary operator '-' (line 1251)
    result_sub_153816 = python_operator(stypy.reporting.localization.Localization(__file__, 1251, 15), '-', result_mul_153814, ddof_153815)
    
    # Assigning a type to the variable 'fact' (line 1251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 8), 'fact', result_sub_153816)
    
    # Assigning a Call to a Name (line 1252):
    
    # Assigning a Call to a Name (line 1252):
    
    # Call to squeeze(...): (line 1252)
    # Processing the call keyword arguments (line 1252)
    kwargs_153831 = {}
    
    # Call to dot(...): (line 1252)
    # Processing the call arguments (line 1252)
    # Getting the type of 'x' (line 1252)
    x_153818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 22), 'x', False)
    # Obtaining the member 'T' of a type (line 1252)
    T_153819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 22), x_153818, 'T')
    
    # Call to conj(...): (line 1252)
    # Processing the call keyword arguments (line 1252)
    kwargs_153822 = {}
    # Getting the type of 'x' (line 1252)
    x_153820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 27), 'x', False)
    # Obtaining the member 'conj' of a type (line 1252)
    conj_153821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 27), x_153820, 'conj')
    # Calling conj(args, kwargs) (line 1252)
    conj_call_result_153823 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 27), conj_153821, *[], **kwargs_153822)
    
    # Processing the call keyword arguments (line 1252)
    # Getting the type of 'False' (line 1252)
    False_153824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 44), 'False', False)
    keyword_153825 = False_153824
    kwargs_153826 = {'strict': keyword_153825}
    # Getting the type of 'dot' (line 1252)
    dot_153817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 18), 'dot', False)
    # Calling dot(args, kwargs) (line 1252)
    dot_call_result_153827 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 18), dot_153817, *[T_153819, conj_call_result_153823], **kwargs_153826)
    
    # Getting the type of 'fact' (line 1252)
    fact_153828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 53), 'fact', False)
    # Applying the binary operator 'div' (line 1252)
    result_div_153829 = python_operator(stypy.reporting.localization.Localization(__file__, 1252, 18), 'div', dot_call_result_153827, fact_153828)
    
    # Obtaining the member 'squeeze' of a type (line 1252)
    squeeze_153830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 18), result_div_153829, 'squeeze')
    # Calling squeeze(args, kwargs) (line 1252)
    squeeze_call_result_153832 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 18), squeeze_153830, *[], **kwargs_153831)
    
    # Assigning a type to the variable 'result' (line 1252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 8), 'result', squeeze_call_result_153832)
    # SSA branch for the else part of an if statement (line 1250)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1254):
    
    # Assigning a BinOp to a Name (line 1254):
    
    # Call to dot(...): (line 1254)
    # Processing the call arguments (line 1254)
    # Getting the type of 'xnotmask' (line 1254)
    xnotmask_153835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 22), 'xnotmask', False)
    # Getting the type of 'xnotmask' (line 1254)
    xnotmask_153836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 32), 'xnotmask', False)
    # Obtaining the member 'T' of a type (line 1254)
    T_153837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 32), xnotmask_153836, 'T')
    # Processing the call keyword arguments (line 1254)
    kwargs_153838 = {}
    # Getting the type of 'np' (line 1254)
    np_153833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 15), 'np', False)
    # Obtaining the member 'dot' of a type (line 1254)
    dot_153834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 15), np_153833, 'dot')
    # Calling dot(args, kwargs) (line 1254)
    dot_call_result_153839 = invoke(stypy.reporting.localization.Localization(__file__, 1254, 15), dot_153834, *[xnotmask_153835, T_153837], **kwargs_153838)
    
    float_153840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 46), 'float')
    # Applying the binary operator '*' (line 1254)
    result_mul_153841 = python_operator(stypy.reporting.localization.Localization(__file__, 1254, 15), '*', dot_call_result_153839, float_153840)
    
    # Getting the type of 'ddof' (line 1254)
    ddof_153842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 51), 'ddof')
    # Applying the binary operator '-' (line 1254)
    result_sub_153843 = python_operator(stypy.reporting.localization.Localization(__file__, 1254, 15), '-', result_mul_153841, ddof_153842)
    
    # Assigning a type to the variable 'fact' (line 1254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 8), 'fact', result_sub_153843)
    
    # Assigning a Call to a Name (line 1255):
    
    # Assigning a Call to a Name (line 1255):
    
    # Call to squeeze(...): (line 1255)
    # Processing the call keyword arguments (line 1255)
    kwargs_153858 = {}
    
    # Call to dot(...): (line 1255)
    # Processing the call arguments (line 1255)
    # Getting the type of 'x' (line 1255)
    x_153845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 22), 'x', False)
    
    # Call to conj(...): (line 1255)
    # Processing the call keyword arguments (line 1255)
    kwargs_153849 = {}
    # Getting the type of 'x' (line 1255)
    x_153846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 25), 'x', False)
    # Obtaining the member 'T' of a type (line 1255)
    T_153847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 25), x_153846, 'T')
    # Obtaining the member 'conj' of a type (line 1255)
    conj_153848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 25), T_153847, 'conj')
    # Calling conj(args, kwargs) (line 1255)
    conj_call_result_153850 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 25), conj_153848, *[], **kwargs_153849)
    
    # Processing the call keyword arguments (line 1255)
    # Getting the type of 'False' (line 1255)
    False_153851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 44), 'False', False)
    keyword_153852 = False_153851
    kwargs_153853 = {'strict': keyword_153852}
    # Getting the type of 'dot' (line 1255)
    dot_153844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 18), 'dot', False)
    # Calling dot(args, kwargs) (line 1255)
    dot_call_result_153854 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 18), dot_153844, *[x_153845, conj_call_result_153850], **kwargs_153853)
    
    # Getting the type of 'fact' (line 1255)
    fact_153855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 53), 'fact', False)
    # Applying the binary operator 'div' (line 1255)
    result_div_153856 = python_operator(stypy.reporting.localization.Localization(__file__, 1255, 18), 'div', dot_call_result_153854, fact_153855)
    
    # Obtaining the member 'squeeze' of a type (line 1255)
    squeeze_153857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 18), result_div_153856, 'squeeze')
    # Calling squeeze(args, kwargs) (line 1255)
    squeeze_call_result_153859 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 18), squeeze_153857, *[], **kwargs_153858)
    
    # Assigning a type to the variable 'result' (line 1255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'result', squeeze_call_result_153859)
    # SSA join for if statement (line 1250)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 1256)
    result_153860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 4), 'stypy_return_type', result_153860)
    
    # ################# End of 'cov(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cov' in the type store
    # Getting the type of 'stypy_return_type' (line 1186)
    stypy_return_type_153861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_153861)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cov'
    return stypy_return_type_153861

# Assigning a type to the variable 'cov' (line 1186)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 0), 'cov', cov)

@norecursion
def corrcoef(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1259)
    None_153862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 18), 'None')
    # Getting the type of 'True' (line 1259)
    True_153863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 31), 'True')
    # Getting the type of 'np' (line 1259)
    np_153864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 42), 'np')
    # Obtaining the member '_NoValue' of a type (line 1259)
    _NoValue_153865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 42), np_153864, '_NoValue')
    # Getting the type of 'True' (line 1259)
    True_153866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 68), 'True')
    # Getting the type of 'np' (line 1260)
    np_153867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 18), 'np')
    # Obtaining the member '_NoValue' of a type (line 1260)
    _NoValue_153868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 18), np_153867, '_NoValue')
    defaults = [None_153862, True_153863, _NoValue_153865, True_153866, _NoValue_153868]
    # Create a new context for function 'corrcoef'
    module_type_store = module_type_store.open_function_context('corrcoef', 1259, 0, False)
    
    # Passed parameters checking function
    corrcoef.stypy_localization = localization
    corrcoef.stypy_type_of_self = None
    corrcoef.stypy_type_store = module_type_store
    corrcoef.stypy_function_name = 'corrcoef'
    corrcoef.stypy_param_names_list = ['x', 'y', 'rowvar', 'bias', 'allow_masked', 'ddof']
    corrcoef.stypy_varargs_param_name = None
    corrcoef.stypy_kwargs_param_name = None
    corrcoef.stypy_call_defaults = defaults
    corrcoef.stypy_call_varargs = varargs
    corrcoef.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'corrcoef', ['x', 'y', 'rowvar', 'bias', 'allow_masked', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'corrcoef', localization, ['x', 'y', 'rowvar', 'bias', 'allow_masked', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'corrcoef(...)' code ##################

    str_153869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1306, (-1)), 'str', '\n    Return Pearson product-moment correlation coefficients.\n\n    Except for the handling of missing data this function does the same as\n    `numpy.corrcoef`. For more details and examples, see `numpy.corrcoef`.\n\n    Parameters\n    ----------\n    x : array_like\n        A 1-D or 2-D array containing multiple variables and observations.\n        Each row of `x` represents a variable, and each column a single\n        observation of all those variables. Also see `rowvar` below.\n    y : array_like, optional\n        An additional set of variables and observations. `y` has the same\n        shape as `x`.\n    rowvar : bool, optional\n        If `rowvar` is True (default), then each row represents a\n        variable, with observations in the columns. Otherwise, the relationship\n        is transposed: each column represents a variable, while the rows\n        contain observations.\n    bias : _NoValue, optional\n        Has no effect, do not use.\n\n        .. deprecated:: 1.10.0\n    allow_masked : bool, optional\n        If True, masked values are propagated pair-wise: if a value is masked\n        in `x`, the corresponding value is masked in `y`.\n        If False, raises an exception.  Because `bias` is deprecated, this\n        argument needs to be treated as keyword only to avoid a warning.\n    ddof : _NoValue, optional\n        Has no effect, do not use.\n\n        .. deprecated:: 1.10.0\n\n    See Also\n    --------\n    numpy.corrcoef : Equivalent function in top-level NumPy module.\n    cov : Estimate the covariance matrix.\n\n    Notes\n    -----\n    This function accepts but discards arguments `bias` and `ddof`.  This is\n    for backwards compatibility with previous versions of this function.  These\n    arguments had no effect on the return values of the function and can be\n    safely ignored in this and previous versions of numpy.\n    ')
    
    # Assigning a Str to a Name (line 1307):
    
    # Assigning a Str to a Name (line 1307):
    str_153870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 10), 'str', 'bias and ddof have no effect and are deprecated')
    # Assigning a type to the variable 'msg' (line 1307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'msg', str_153870)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'bias' (line 1308)
    bias_153871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 7), 'bias')
    # Getting the type of 'np' (line 1308)
    np_153872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 19), 'np')
    # Obtaining the member '_NoValue' of a type (line 1308)
    _NoValue_153873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 19), np_153872, '_NoValue')
    # Applying the binary operator 'isnot' (line 1308)
    result_is_not_153874 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 7), 'isnot', bias_153871, _NoValue_153873)
    
    
    # Getting the type of 'ddof' (line 1308)
    ddof_153875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 34), 'ddof')
    # Getting the type of 'np' (line 1308)
    np_153876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 46), 'np')
    # Obtaining the member '_NoValue' of a type (line 1308)
    _NoValue_153877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 46), np_153876, '_NoValue')
    # Applying the binary operator 'isnot' (line 1308)
    result_is_not_153878 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 34), 'isnot', ddof_153875, _NoValue_153877)
    
    # Applying the binary operator 'or' (line 1308)
    result_or_keyword_153879 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 7), 'or', result_is_not_153874, result_is_not_153878)
    
    # Testing the type of an if condition (line 1308)
    if_condition_153880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1308, 4), result_or_keyword_153879)
    # Assigning a type to the variable 'if_condition_153880' (line 1308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 4), 'if_condition_153880', if_condition_153880)
    # SSA begins for if statement (line 1308)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1310)
    # Processing the call arguments (line 1310)
    # Getting the type of 'msg' (line 1310)
    msg_153883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 22), 'msg', False)
    # Getting the type of 'DeprecationWarning' (line 1310)
    DeprecationWarning_153884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 27), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 1310)
    kwargs_153885 = {}
    # Getting the type of 'warnings' (line 1310)
    warnings_153881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1310)
    warn_153882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1310, 8), warnings_153881, 'warn')
    # Calling warn(args, kwargs) (line 1310)
    warn_call_result_153886 = invoke(stypy.reporting.localization.Localization(__file__, 1310, 8), warn_153882, *[msg_153883, DeprecationWarning_153884], **kwargs_153885)
    
    # SSA join for if statement (line 1308)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1312):
    
    # Assigning a Call to a Name:
    
    # Call to _covhelper(...): (line 1312)
    # Processing the call arguments (line 1312)
    # Getting the type of 'x' (line 1312)
    x_153888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 39), 'x', False)
    # Getting the type of 'y' (line 1312)
    y_153889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 42), 'y', False)
    # Getting the type of 'rowvar' (line 1312)
    rowvar_153890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 45), 'rowvar', False)
    # Getting the type of 'allow_masked' (line 1312)
    allow_masked_153891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 53), 'allow_masked', False)
    # Processing the call keyword arguments (line 1312)
    kwargs_153892 = {}
    # Getting the type of '_covhelper' (line 1312)
    _covhelper_153887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 28), '_covhelper', False)
    # Calling _covhelper(args, kwargs) (line 1312)
    _covhelper_call_result_153893 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 28), _covhelper_153887, *[x_153888, y_153889, rowvar_153890, allow_masked_153891], **kwargs_153892)
    
    # Assigning a type to the variable 'call_assignment_151384' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151384', _covhelper_call_result_153893)
    
    # Assigning a Call to a Name (line 1312):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_153896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 4), 'int')
    # Processing the call keyword arguments
    kwargs_153897 = {}
    # Getting the type of 'call_assignment_151384' (line 1312)
    call_assignment_151384_153894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151384', False)
    # Obtaining the member '__getitem__' of a type (line 1312)
    getitem___153895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 4), call_assignment_151384_153894, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_153898 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___153895, *[int_153896], **kwargs_153897)
    
    # Assigning a type to the variable 'call_assignment_151385' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151385', getitem___call_result_153898)
    
    # Assigning a Name to a Name (line 1312):
    # Getting the type of 'call_assignment_151385' (line 1312)
    call_assignment_151385_153899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151385')
    # Assigning a type to the variable 'x' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 5), 'x', call_assignment_151385_153899)
    
    # Assigning a Call to a Name (line 1312):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_153902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 4), 'int')
    # Processing the call keyword arguments
    kwargs_153903 = {}
    # Getting the type of 'call_assignment_151384' (line 1312)
    call_assignment_151384_153900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151384', False)
    # Obtaining the member '__getitem__' of a type (line 1312)
    getitem___153901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 4), call_assignment_151384_153900, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_153904 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___153901, *[int_153902], **kwargs_153903)
    
    # Assigning a type to the variable 'call_assignment_151386' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151386', getitem___call_result_153904)
    
    # Assigning a Name to a Name (line 1312):
    # Getting the type of 'call_assignment_151386' (line 1312)
    call_assignment_151386_153905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151386')
    # Assigning a type to the variable 'xnotmask' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'xnotmask', call_assignment_151386_153905)
    
    # Assigning a Call to a Name (line 1312):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_153908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 4), 'int')
    # Processing the call keyword arguments
    kwargs_153909 = {}
    # Getting the type of 'call_assignment_151384' (line 1312)
    call_assignment_151384_153906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151384', False)
    # Obtaining the member '__getitem__' of a type (line 1312)
    getitem___153907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 4), call_assignment_151384_153906, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_153910 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___153907, *[int_153908], **kwargs_153909)
    
    # Assigning a type to the variable 'call_assignment_151387' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151387', getitem___call_result_153910)
    
    # Assigning a Name to a Name (line 1312):
    # Getting the type of 'call_assignment_151387' (line 1312)
    call_assignment_151387_153911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 4), 'call_assignment_151387')
    # Assigning a type to the variable 'rowvar' (line 1312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 18), 'rowvar', call_assignment_151387_153911)
    
    
    # Getting the type of 'rowvar' (line 1314)
    rowvar_153912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 11), 'rowvar')
    # Applying the 'not' unary operator (line 1314)
    result_not__153913 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 7), 'not', rowvar_153912)
    
    # Testing the type of an if condition (line 1314)
    if_condition_153914 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1314, 4), result_not__153913)
    # Assigning a type to the variable 'if_condition_153914' (line 1314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 4), 'if_condition_153914', if_condition_153914)
    # SSA begins for if statement (line 1314)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1315):
    
    # Assigning a BinOp to a Name (line 1315):
    
    # Call to dot(...): (line 1315)
    # Processing the call arguments (line 1315)
    # Getting the type of 'xnotmask' (line 1315)
    xnotmask_153917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 22), 'xnotmask', False)
    # Obtaining the member 'T' of a type (line 1315)
    T_153918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 22), xnotmask_153917, 'T')
    # Getting the type of 'xnotmask' (line 1315)
    xnotmask_153919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 34), 'xnotmask', False)
    # Processing the call keyword arguments (line 1315)
    kwargs_153920 = {}
    # Getting the type of 'np' (line 1315)
    np_153915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 15), 'np', False)
    # Obtaining the member 'dot' of a type (line 1315)
    dot_153916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 15), np_153915, 'dot')
    # Calling dot(args, kwargs) (line 1315)
    dot_call_result_153921 = invoke(stypy.reporting.localization.Localization(__file__, 1315, 15), dot_153916, *[T_153918, xnotmask_153919], **kwargs_153920)
    
    float_153922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 46), 'float')
    # Applying the binary operator '*' (line 1315)
    result_mul_153923 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 15), '*', dot_call_result_153921, float_153922)
    
    # Assigning a type to the variable 'fact' (line 1315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 8), 'fact', result_mul_153923)
    
    # Assigning a Call to a Name (line 1316):
    
    # Assigning a Call to a Name (line 1316):
    
    # Call to squeeze(...): (line 1316)
    # Processing the call keyword arguments (line 1316)
    kwargs_153938 = {}
    
    # Call to dot(...): (line 1316)
    # Processing the call arguments (line 1316)
    # Getting the type of 'x' (line 1316)
    x_153925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 17), 'x', False)
    # Obtaining the member 'T' of a type (line 1316)
    T_153926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 17), x_153925, 'T')
    
    # Call to conj(...): (line 1316)
    # Processing the call keyword arguments (line 1316)
    kwargs_153929 = {}
    # Getting the type of 'x' (line 1316)
    x_153927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 22), 'x', False)
    # Obtaining the member 'conj' of a type (line 1316)
    conj_153928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 22), x_153927, 'conj')
    # Calling conj(args, kwargs) (line 1316)
    conj_call_result_153930 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 22), conj_153928, *[], **kwargs_153929)
    
    # Processing the call keyword arguments (line 1316)
    # Getting the type of 'False' (line 1316)
    False_153931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 39), 'False', False)
    keyword_153932 = False_153931
    kwargs_153933 = {'strict': keyword_153932}
    # Getting the type of 'dot' (line 1316)
    dot_153924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 13), 'dot', False)
    # Calling dot(args, kwargs) (line 1316)
    dot_call_result_153934 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 13), dot_153924, *[T_153926, conj_call_result_153930], **kwargs_153933)
    
    # Getting the type of 'fact' (line 1316)
    fact_153935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 48), 'fact', False)
    # Applying the binary operator 'div' (line 1316)
    result_div_153936 = python_operator(stypy.reporting.localization.Localization(__file__, 1316, 13), 'div', dot_call_result_153934, fact_153935)
    
    # Obtaining the member 'squeeze' of a type (line 1316)
    squeeze_153937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 13), result_div_153936, 'squeeze')
    # Calling squeeze(args, kwargs) (line 1316)
    squeeze_call_result_153939 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 13), squeeze_153937, *[], **kwargs_153938)
    
    # Assigning a type to the variable 'c' (line 1316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 8), 'c', squeeze_call_result_153939)
    # SSA branch for the else part of an if statement (line 1314)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1318):
    
    # Assigning a BinOp to a Name (line 1318):
    
    # Call to dot(...): (line 1318)
    # Processing the call arguments (line 1318)
    # Getting the type of 'xnotmask' (line 1318)
    xnotmask_153942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 22), 'xnotmask', False)
    # Getting the type of 'xnotmask' (line 1318)
    xnotmask_153943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 32), 'xnotmask', False)
    # Obtaining the member 'T' of a type (line 1318)
    T_153944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 32), xnotmask_153943, 'T')
    # Processing the call keyword arguments (line 1318)
    kwargs_153945 = {}
    # Getting the type of 'np' (line 1318)
    np_153940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 15), 'np', False)
    # Obtaining the member 'dot' of a type (line 1318)
    dot_153941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 15), np_153940, 'dot')
    # Calling dot(args, kwargs) (line 1318)
    dot_call_result_153946 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 15), dot_153941, *[xnotmask_153942, T_153944], **kwargs_153945)
    
    float_153947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 46), 'float')
    # Applying the binary operator '*' (line 1318)
    result_mul_153948 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 15), '*', dot_call_result_153946, float_153947)
    
    # Assigning a type to the variable 'fact' (line 1318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'fact', result_mul_153948)
    
    # Assigning a Call to a Name (line 1319):
    
    # Assigning a Call to a Name (line 1319):
    
    # Call to squeeze(...): (line 1319)
    # Processing the call keyword arguments (line 1319)
    kwargs_153963 = {}
    
    # Call to dot(...): (line 1319)
    # Processing the call arguments (line 1319)
    # Getting the type of 'x' (line 1319)
    x_153950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 17), 'x', False)
    
    # Call to conj(...): (line 1319)
    # Processing the call keyword arguments (line 1319)
    kwargs_153954 = {}
    # Getting the type of 'x' (line 1319)
    x_153951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 20), 'x', False)
    # Obtaining the member 'T' of a type (line 1319)
    T_153952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 20), x_153951, 'T')
    # Obtaining the member 'conj' of a type (line 1319)
    conj_153953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 20), T_153952, 'conj')
    # Calling conj(args, kwargs) (line 1319)
    conj_call_result_153955 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 20), conj_153953, *[], **kwargs_153954)
    
    # Processing the call keyword arguments (line 1319)
    # Getting the type of 'False' (line 1319)
    False_153956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 39), 'False', False)
    keyword_153957 = False_153956
    kwargs_153958 = {'strict': keyword_153957}
    # Getting the type of 'dot' (line 1319)
    dot_153949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 13), 'dot', False)
    # Calling dot(args, kwargs) (line 1319)
    dot_call_result_153959 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 13), dot_153949, *[x_153950, conj_call_result_153955], **kwargs_153958)
    
    # Getting the type of 'fact' (line 1319)
    fact_153960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 48), 'fact', False)
    # Applying the binary operator 'div' (line 1319)
    result_div_153961 = python_operator(stypy.reporting.localization.Localization(__file__, 1319, 13), 'div', dot_call_result_153959, fact_153960)
    
    # Obtaining the member 'squeeze' of a type (line 1319)
    squeeze_153962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 13), result_div_153961, 'squeeze')
    # Calling squeeze(args, kwargs) (line 1319)
    squeeze_call_result_153964 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 13), squeeze_153962, *[], **kwargs_153963)
    
    # Assigning a type to the variable 'c' (line 1319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 8), 'c', squeeze_call_result_153964)
    # SSA join for if statement (line 1314)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1321)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1322):
    
    # Assigning a Call to a Name (line 1322):
    
    # Call to diagonal(...): (line 1322)
    # Processing the call arguments (line 1322)
    # Getting the type of 'c' (line 1322)
    c_153967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 27), 'c', False)
    # Processing the call keyword arguments (line 1322)
    kwargs_153968 = {}
    # Getting the type of 'ma' (line 1322)
    ma_153965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 15), 'ma', False)
    # Obtaining the member 'diagonal' of a type (line 1322)
    diagonal_153966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 15), ma_153965, 'diagonal')
    # Calling diagonal(args, kwargs) (line 1322)
    diagonal_call_result_153969 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 15), diagonal_153966, *[c_153967], **kwargs_153968)
    
    # Assigning a type to the variable 'diag' (line 1322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1322, 8), 'diag', diagonal_call_result_153969)
    # SSA branch for the except part of a try statement (line 1321)
    # SSA branch for the except 'ValueError' branch of a try statement (line 1321)
    module_type_store.open_ssa_branch('except')
    int_153970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 15), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 1324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 8), 'stypy_return_type', int_153970)
    # SSA join for try-except statement (line 1321)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to all(...): (line 1326)
    # Processing the call keyword arguments (line 1326)
    kwargs_153973 = {}
    # Getting the type of 'xnotmask' (line 1326)
    xnotmask_153971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 7), 'xnotmask', False)
    # Obtaining the member 'all' of a type (line 1326)
    all_153972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 7), xnotmask_153971, 'all')
    # Calling all(args, kwargs) (line 1326)
    all_call_result_153974 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 7), all_153972, *[], **kwargs_153973)
    
    # Testing the type of an if condition (line 1326)
    if_condition_153975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1326, 4), all_call_result_153974)
    # Assigning a type to the variable 'if_condition_153975' (line 1326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 4), 'if_condition_153975', if_condition_153975)
    # SSA begins for if statement (line 1326)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1327):
    
    # Assigning a Call to a Name (line 1327):
    
    # Call to sqrt(...): (line 1327)
    # Processing the call arguments (line 1327)
    
    # Call to outer(...): (line 1327)
    # Processing the call arguments (line 1327)
    # Getting the type of 'diag' (line 1327)
    diag_153981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 43), 'diag', False)
    # Getting the type of 'diag' (line 1327)
    diag_153982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 49), 'diag', False)
    # Processing the call keyword arguments (line 1327)
    kwargs_153983 = {}
    # Getting the type of 'ma' (line 1327)
    ma_153978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 25), 'ma', False)
    # Obtaining the member 'multiply' of a type (line 1327)
    multiply_153979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 25), ma_153978, 'multiply')
    # Obtaining the member 'outer' of a type (line 1327)
    outer_153980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 25), multiply_153979, 'outer')
    # Calling outer(args, kwargs) (line 1327)
    outer_call_result_153984 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 25), outer_153980, *[diag_153981, diag_153982], **kwargs_153983)
    
    # Processing the call keyword arguments (line 1327)
    kwargs_153985 = {}
    # Getting the type of 'ma' (line 1327)
    ma_153976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 17), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 1327)
    sqrt_153977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 17), ma_153976, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1327)
    sqrt_call_result_153986 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 17), sqrt_153977, *[outer_call_result_153984], **kwargs_153985)
    
    # Assigning a type to the variable '_denom' (line 1327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), '_denom', sqrt_call_result_153986)
    # SSA branch for the else part of an if statement (line 1326)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1329):
    
    # Assigning a Call to a Name (line 1329):
    
    # Call to diagflat(...): (line 1329)
    # Processing the call arguments (line 1329)
    # Getting the type of 'diag' (line 1329)
    diag_153988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 26), 'diag', False)
    # Processing the call keyword arguments (line 1329)
    kwargs_153989 = {}
    # Getting the type of 'diagflat' (line 1329)
    diagflat_153987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 17), 'diagflat', False)
    # Calling diagflat(args, kwargs) (line 1329)
    diagflat_call_result_153990 = invoke(stypy.reporting.localization.Localization(__file__, 1329, 17), diagflat_153987, *[diag_153988], **kwargs_153989)
    
    # Assigning a type to the variable '_denom' (line 1329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 8), '_denom', diagflat_call_result_153990)
    
    # Assigning a Name to a Attribute (line 1330):
    
    # Assigning a Name to a Attribute (line 1330):
    # Getting the type of 'False' (line 1330)
    False_153991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 29), 'False')
    # Getting the type of '_denom' (line 1330)
    _denom_153992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 8), '_denom')
    # Setting the type of the member '_sharedmask' of a type (line 1330)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 8), _denom_153992, '_sharedmask', False_153991)
    
    # Assigning a Subscript to a Name (line 1331):
    
    # Assigning a Subscript to a Name (line 1331):
    
    # Obtaining the type of the subscript
    int_153993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 20), 'int')
    # Getting the type of 'rowvar' (line 1331)
    rowvar_153994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 24), 'rowvar')
    # Applying the binary operator '-' (line 1331)
    result_sub_153995 = python_operator(stypy.reporting.localization.Localization(__file__, 1331, 20), '-', int_153993, rowvar_153994)
    
    # Getting the type of 'x' (line 1331)
    x_153996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 12), 'x')
    # Obtaining the member 'shape' of a type (line 1331)
    shape_153997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 12), x_153996, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1331)
    getitem___153998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 12), shape_153997, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1331)
    subscript_call_result_153999 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 12), getitem___153998, result_sub_153995)
    
    # Assigning a type to the variable 'n' (line 1331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 8), 'n', subscript_call_result_153999)
    
    # Getting the type of 'rowvar' (line 1332)
    rowvar_154000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 11), 'rowvar')
    # Testing the type of an if condition (line 1332)
    if_condition_154001 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1332, 8), rowvar_154000)
    # Assigning a type to the variable 'if_condition_154001' (line 1332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 8), 'if_condition_154001', if_condition_154001)
    # SSA begins for if statement (line 1332)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to range(...): (line 1333)
    # Processing the call arguments (line 1333)
    # Getting the type of 'n' (line 1333)
    n_154003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 27), 'n', False)
    int_154004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, 31), 'int')
    # Applying the binary operator '-' (line 1333)
    result_sub_154005 = python_operator(stypy.reporting.localization.Localization(__file__, 1333, 27), '-', n_154003, int_154004)
    
    # Processing the call keyword arguments (line 1333)
    kwargs_154006 = {}
    # Getting the type of 'range' (line 1333)
    range_154002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 21), 'range', False)
    # Calling range(args, kwargs) (line 1333)
    range_call_result_154007 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 21), range_154002, *[result_sub_154005], **kwargs_154006)
    
    # Testing the type of a for loop iterable (line 1333)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1333, 12), range_call_result_154007)
    # Getting the type of the for loop variable (line 1333)
    for_loop_var_154008 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1333, 12), range_call_result_154007)
    # Assigning a type to the variable 'i' (line 1333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'i', for_loop_var_154008)
    # SSA begins for a for statement (line 1333)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1334)
    # Processing the call arguments (line 1334)
    # Getting the type of 'i' (line 1334)
    i_154010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 31), 'i', False)
    int_154011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, 35), 'int')
    # Applying the binary operator '+' (line 1334)
    result_add_154012 = python_operator(stypy.reporting.localization.Localization(__file__, 1334, 31), '+', i_154010, int_154011)
    
    # Getting the type of 'n' (line 1334)
    n_154013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 38), 'n', False)
    # Processing the call keyword arguments (line 1334)
    kwargs_154014 = {}
    # Getting the type of 'range' (line 1334)
    range_154009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 25), 'range', False)
    # Calling range(args, kwargs) (line 1334)
    range_call_result_154015 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 25), range_154009, *[result_add_154012, n_154013], **kwargs_154014)
    
    # Testing the type of a for loop iterable (line 1334)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1334, 16), range_call_result_154015)
    # Getting the type of the for loop variable (line 1334)
    for_loop_var_154016 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1334, 16), range_call_result_154015)
    # Assigning a type to the variable 'j' (line 1334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 16), 'j', for_loop_var_154016)
    # SSA begins for a for statement (line 1334)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1335):
    
    # Assigning a Call to a Name (line 1335):
    
    # Call to var(...): (line 1335)
    # Processing the call keyword arguments (line 1335)
    int_154033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 66), 'int')
    keyword_154034 = int_154033
    kwargs_154035 = {'axis': keyword_154034}
    
    # Call to mask_cols(...): (line 1335)
    # Processing the call arguments (line 1335)
    
    # Call to vstack(...): (line 1335)
    # Processing the call arguments (line 1335)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1335)
    tuple_154019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 43), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1335)
    # Adding element type (line 1335)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1335)
    i_154020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 45), 'i', False)
    # Getting the type of 'x' (line 1335)
    x_154021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 43), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 1335)
    getitem___154022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 43), x_154021, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1335)
    subscript_call_result_154023 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 43), getitem___154022, i_154020)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1335, 43), tuple_154019, subscript_call_result_154023)
    # Adding element type (line 1335)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1335)
    j_154024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 51), 'j', False)
    # Getting the type of 'x' (line 1335)
    x_154025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 49), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 1335)
    getitem___154026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 49), x_154025, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1335)
    subscript_call_result_154027 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 49), getitem___154026, j_154024)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1335, 43), tuple_154019, subscript_call_result_154027)
    
    # Processing the call keyword arguments (line 1335)
    kwargs_154028 = {}
    # Getting the type of 'vstack' (line 1335)
    vstack_154018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 35), 'vstack', False)
    # Calling vstack(args, kwargs) (line 1335)
    vstack_call_result_154029 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 35), vstack_154018, *[tuple_154019], **kwargs_154028)
    
    # Processing the call keyword arguments (line 1335)
    kwargs_154030 = {}
    # Getting the type of 'mask_cols' (line 1335)
    mask_cols_154017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 25), 'mask_cols', False)
    # Calling mask_cols(args, kwargs) (line 1335)
    mask_cols_call_result_154031 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 25), mask_cols_154017, *[vstack_call_result_154029], **kwargs_154030)
    
    # Obtaining the member 'var' of a type (line 1335)
    var_154032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 25), mask_cols_call_result_154031, 'var')
    # Calling var(args, kwargs) (line 1335)
    var_call_result_154036 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 25), var_154032, *[], **kwargs_154035)
    
    # Assigning a type to the variable '_x' (line 1335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 20), '_x', var_call_result_154036)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Call to a Subscript (line 1336):
    
    # Call to sqrt(...): (line 1336)
    # Processing the call arguments (line 1336)
    
    # Call to reduce(...): (line 1336)
    # Processing the call arguments (line 1336)
    # Getting the type of '_x' (line 1336)
    _x_154042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 77), '_x', False)
    # Processing the call keyword arguments (line 1336)
    kwargs_154043 = {}
    # Getting the type of 'ma' (line 1336)
    ma_154039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 58), 'ma', False)
    # Obtaining the member 'multiply' of a type (line 1336)
    multiply_154040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 58), ma_154039, 'multiply')
    # Obtaining the member 'reduce' of a type (line 1336)
    reduce_154041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 58), multiply_154040, 'reduce')
    # Calling reduce(args, kwargs) (line 1336)
    reduce_call_result_154044 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 58), reduce_154041, *[_x_154042], **kwargs_154043)
    
    # Processing the call keyword arguments (line 1336)
    kwargs_154045 = {}
    # Getting the type of 'ma' (line 1336)
    ma_154037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 50), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 1336)
    sqrt_154038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 50), ma_154037, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1336)
    sqrt_call_result_154046 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 50), sqrt_154038, *[reduce_call_result_154044], **kwargs_154045)
    
    # Getting the type of '_denom' (line 1336)
    _denom_154047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 35), '_denom')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1336)
    tuple_154048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1336)
    # Adding element type (line 1336)
    # Getting the type of 'j' (line 1336)
    j_154049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 42), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1336, 42), tuple_154048, j_154049)
    # Adding element type (line 1336)
    # Getting the type of 'i' (line 1336)
    i_154050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 45), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1336, 42), tuple_154048, i_154050)
    
    # Storing an element on a container (line 1336)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1336, 35), _denom_154047, (tuple_154048, sqrt_call_result_154046))
    
    # Assigning a Subscript to a Subscript (line 1336):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1336)
    tuple_154051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1336)
    # Adding element type (line 1336)
    # Getting the type of 'j' (line 1336)
    j_154052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 42), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1336, 42), tuple_154051, j_154052)
    # Adding element type (line 1336)
    # Getting the type of 'i' (line 1336)
    i_154053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 45), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1336, 42), tuple_154051, i_154053)
    
    # Getting the type of '_denom' (line 1336)
    _denom_154054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 35), '_denom')
    # Obtaining the member '__getitem__' of a type (line 1336)
    getitem___154055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 35), _denom_154054, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1336)
    subscript_call_result_154056 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 35), getitem___154055, tuple_154051)
    
    # Getting the type of '_denom' (line 1336)
    _denom_154057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 20), '_denom')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1336)
    tuple_154058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1336)
    # Adding element type (line 1336)
    # Getting the type of 'i' (line 1336)
    i_154059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 27), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1336, 27), tuple_154058, i_154059)
    # Adding element type (line 1336)
    # Getting the type of 'j' (line 1336)
    j_154060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 30), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1336, 27), tuple_154058, j_154060)
    
    # Storing an element on a container (line 1336)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1336, 20), _denom_154057, (tuple_154058, subscript_call_result_154056))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1332)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to range(...): (line 1338)
    # Processing the call arguments (line 1338)
    # Getting the type of 'n' (line 1338)
    n_154062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 27), 'n', False)
    int_154063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1338, 31), 'int')
    # Applying the binary operator '-' (line 1338)
    result_sub_154064 = python_operator(stypy.reporting.localization.Localization(__file__, 1338, 27), '-', n_154062, int_154063)
    
    # Processing the call keyword arguments (line 1338)
    kwargs_154065 = {}
    # Getting the type of 'range' (line 1338)
    range_154061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 21), 'range', False)
    # Calling range(args, kwargs) (line 1338)
    range_call_result_154066 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 21), range_154061, *[result_sub_154064], **kwargs_154065)
    
    # Testing the type of a for loop iterable (line 1338)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1338, 12), range_call_result_154066)
    # Getting the type of the for loop variable (line 1338)
    for_loop_var_154067 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1338, 12), range_call_result_154066)
    # Assigning a type to the variable 'i' (line 1338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 12), 'i', for_loop_var_154067)
    # SSA begins for a for statement (line 1338)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1339)
    # Processing the call arguments (line 1339)
    # Getting the type of 'i' (line 1339)
    i_154069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 31), 'i', False)
    int_154070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, 35), 'int')
    # Applying the binary operator '+' (line 1339)
    result_add_154071 = python_operator(stypy.reporting.localization.Localization(__file__, 1339, 31), '+', i_154069, int_154070)
    
    # Getting the type of 'n' (line 1339)
    n_154072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 38), 'n', False)
    # Processing the call keyword arguments (line 1339)
    kwargs_154073 = {}
    # Getting the type of 'range' (line 1339)
    range_154068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 25), 'range', False)
    # Calling range(args, kwargs) (line 1339)
    range_call_result_154074 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 25), range_154068, *[result_add_154071, n_154072], **kwargs_154073)
    
    # Testing the type of a for loop iterable (line 1339)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1339, 16), range_call_result_154074)
    # Getting the type of the for loop variable (line 1339)
    for_loop_var_154075 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1339, 16), range_call_result_154074)
    # Assigning a type to the variable 'j' (line 1339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 16), 'j', for_loop_var_154075)
    # SSA begins for a for statement (line 1339)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1340):
    
    # Assigning a Call to a Name (line 1340):
    
    # Call to var(...): (line 1340)
    # Processing the call keyword arguments (line 1340)
    int_154094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 65), 'int')
    keyword_154095 = int_154094
    kwargs_154096 = {'axis': keyword_154095}
    
    # Call to mask_cols(...): (line 1340)
    # Processing the call arguments (line 1340)
    
    # Call to vstack(...): (line 1341)
    # Processing the call arguments (line 1341)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1341)
    tuple_154078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1341)
    # Adding element type (line 1341)
    
    # Obtaining the type of the subscript
    slice_154079 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1341, 36), None, None, None)
    # Getting the type of 'i' (line 1341)
    i_154080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 41), 'i', False)
    # Getting the type of 'x' (line 1341)
    x_154081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 36), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 1341)
    getitem___154082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 36), x_154081, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1341)
    subscript_call_result_154083 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 36), getitem___154082, (slice_154079, i_154080))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1341, 36), tuple_154078, subscript_call_result_154083)
    # Adding element type (line 1341)
    
    # Obtaining the type of the subscript
    slice_154084 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1341, 45), None, None, None)
    # Getting the type of 'j' (line 1341)
    j_154085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 50), 'j', False)
    # Getting the type of 'x' (line 1341)
    x_154086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 45), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 1341)
    getitem___154087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 45), x_154086, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1341)
    subscript_call_result_154088 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 45), getitem___154087, (slice_154084, j_154085))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1341, 36), tuple_154078, subscript_call_result_154088)
    
    # Processing the call keyword arguments (line 1341)
    kwargs_154089 = {}
    # Getting the type of 'vstack' (line 1341)
    vstack_154077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 28), 'vstack', False)
    # Calling vstack(args, kwargs) (line 1341)
    vstack_call_result_154090 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 28), vstack_154077, *[tuple_154078], **kwargs_154089)
    
    # Processing the call keyword arguments (line 1340)
    kwargs_154091 = {}
    # Getting the type of 'mask_cols' (line 1340)
    mask_cols_154076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 25), 'mask_cols', False)
    # Calling mask_cols(args, kwargs) (line 1340)
    mask_cols_call_result_154092 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 25), mask_cols_154076, *[vstack_call_result_154090], **kwargs_154091)
    
    # Obtaining the member 'var' of a type (line 1340)
    var_154093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 25), mask_cols_call_result_154092, 'var')
    # Calling var(args, kwargs) (line 1340)
    var_call_result_154097 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 25), var_154093, *[], **kwargs_154096)
    
    # Assigning a type to the variable '_x' (line 1340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 20), '_x', var_call_result_154097)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Call to a Subscript (line 1342):
    
    # Call to sqrt(...): (line 1342)
    # Processing the call arguments (line 1342)
    
    # Call to reduce(...): (line 1342)
    # Processing the call arguments (line 1342)
    # Getting the type of '_x' (line 1342)
    _x_154103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 77), '_x', False)
    # Processing the call keyword arguments (line 1342)
    kwargs_154104 = {}
    # Getting the type of 'ma' (line 1342)
    ma_154100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 58), 'ma', False)
    # Obtaining the member 'multiply' of a type (line 1342)
    multiply_154101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 58), ma_154100, 'multiply')
    # Obtaining the member 'reduce' of a type (line 1342)
    reduce_154102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 58), multiply_154101, 'reduce')
    # Calling reduce(args, kwargs) (line 1342)
    reduce_call_result_154105 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 58), reduce_154102, *[_x_154103], **kwargs_154104)
    
    # Processing the call keyword arguments (line 1342)
    kwargs_154106 = {}
    # Getting the type of 'ma' (line 1342)
    ma_154098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 50), 'ma', False)
    # Obtaining the member 'sqrt' of a type (line 1342)
    sqrt_154099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 50), ma_154098, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1342)
    sqrt_call_result_154107 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 50), sqrt_154099, *[reduce_call_result_154105], **kwargs_154106)
    
    # Getting the type of '_denom' (line 1342)
    _denom_154108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 35), '_denom')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1342)
    tuple_154109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1342)
    # Adding element type (line 1342)
    # Getting the type of 'j' (line 1342)
    j_154110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 42), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 42), tuple_154109, j_154110)
    # Adding element type (line 1342)
    # Getting the type of 'i' (line 1342)
    i_154111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 45), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 42), tuple_154109, i_154111)
    
    # Storing an element on a container (line 1342)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 35), _denom_154108, (tuple_154109, sqrt_call_result_154107))
    
    # Assigning a Subscript to a Subscript (line 1342):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1342)
    tuple_154112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1342)
    # Adding element type (line 1342)
    # Getting the type of 'j' (line 1342)
    j_154113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 42), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 42), tuple_154112, j_154113)
    # Adding element type (line 1342)
    # Getting the type of 'i' (line 1342)
    i_154114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 45), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 42), tuple_154112, i_154114)
    
    # Getting the type of '_denom' (line 1342)
    _denom_154115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 35), '_denom')
    # Obtaining the member '__getitem__' of a type (line 1342)
    getitem___154116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 35), _denom_154115, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1342)
    subscript_call_result_154117 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 35), getitem___154116, tuple_154112)
    
    # Getting the type of '_denom' (line 1342)
    _denom_154118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 20), '_denom')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1342)
    tuple_154119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1342)
    # Adding element type (line 1342)
    # Getting the type of 'i' (line 1342)
    i_154120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 27), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 27), tuple_154119, i_154120)
    # Adding element type (line 1342)
    # Getting the type of 'j' (line 1342)
    j_154121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 30), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 27), tuple_154119, j_154121)
    
    # Storing an element on a container (line 1342)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1342, 20), _denom_154118, (tuple_154119, subscript_call_result_154117))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1332)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1326)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'c' (line 1343)
    c_154122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 11), 'c')
    # Getting the type of '_denom' (line 1343)
    _denom_154123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 15), '_denom')
    # Applying the binary operator 'div' (line 1343)
    result_div_154124 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 11), 'div', c_154122, _denom_154123)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'stypy_return_type', result_div_154124)
    
    # ################# End of 'corrcoef(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'corrcoef' in the type store
    # Getting the type of 'stypy_return_type' (line 1259)
    stypy_return_type_154125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154125)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'corrcoef'
    return stypy_return_type_154125

# Assigning a type to the variable 'corrcoef' (line 1259)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 0), 'corrcoef', corrcoef)
# Declaration of the 'MAxisConcatenator' class
# Getting the type of 'AxisConcatenator' (line 1349)
AxisConcatenator_154126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 24), 'AxisConcatenator')

class MAxisConcatenator(AxisConcatenator_154126, ):
    str_154127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, (-1)), 'str', '\n    Translate slice objects to concatenation along an axis.\n\n    For documentation on usage, see `mr_class`.\n\n    See Also\n    --------\n    mr_class\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_154128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 28), 'int')
        defaults = [int_154128]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1361, 4, False)
        # Assigning a type to the variable 'self' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MAxisConcatenator.__init__', ['axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1362)
        # Processing the call arguments (line 1362)
        # Getting the type of 'self' (line 1362)
        self_154131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 34), 'self', False)
        # Getting the type of 'axis' (line 1362)
        axis_154132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 40), 'axis', False)
        # Processing the call keyword arguments (line 1362)
        # Getting the type of 'False' (line 1362)
        False_154133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 53), 'False', False)
        keyword_154134 = False_154133
        kwargs_154135 = {'matrix': keyword_154134}
        # Getting the type of 'AxisConcatenator' (line 1362)
        AxisConcatenator_154129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'AxisConcatenator', False)
        # Obtaining the member '__init__' of a type (line 1362)
        init___154130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 8), AxisConcatenator_154129, '__init__')
        # Calling __init__(args, kwargs) (line 1362)
        init___call_result_154136 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 8), init___154130, *[self_154131, axis_154132], **kwargs_154135)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 1364, 4, False)
        # Assigning a type to the variable 'self' (line 1365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_function_name', 'MAxisConcatenator.__getitem__')
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['key'])
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        MAxisConcatenator.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'MAxisConcatenator.__getitem__', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1365)
        # Getting the type of 'str' (line 1365)
        str_154137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 27), 'str')
        # Getting the type of 'key' (line 1365)
        key_154138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 22), 'key')
        
        (may_be_154139, more_types_in_union_154140) = may_be_subtype(str_154137, key_154138)

        if may_be_154139:

            if more_types_in_union_154140:
                # Runtime conditional SSA (line 1365)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'key' (line 1365)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'key', remove_not_subtype_from_union(key_154138, str))
            
            # Call to MAError(...): (line 1366)
            # Processing the call arguments (line 1366)
            str_154142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, 26), 'str', 'Unavailable for masked array.')
            # Processing the call keyword arguments (line 1366)
            kwargs_154143 = {}
            # Getting the type of 'MAError' (line 1366)
            MAError_154141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 18), 'MAError', False)
            # Calling MAError(args, kwargs) (line 1366)
            MAError_call_result_154144 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 18), MAError_154141, *[str_154142], **kwargs_154143)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1366, 12), MAError_call_result_154144, 'raise parameter', BaseException)

            if more_types_in_union_154140:
                # SSA join for if statement (line 1365)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1367)
        # Getting the type of 'tuple' (line 1367)
        tuple_154145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 31), 'tuple')
        # Getting the type of 'key' (line 1367)
        key_154146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 26), 'key')
        
        (may_be_154147, more_types_in_union_154148) = may_not_be_subtype(tuple_154145, key_154146)

        if may_be_154147:

            if more_types_in_union_154148:
                # Runtime conditional SSA (line 1367)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'key' (line 1367)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'key', remove_subtype_from_union(key_154146, tuple))
            
            # Assigning a Tuple to a Name (line 1368):
            
            # Assigning a Tuple to a Name (line 1368):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1368)
            tuple_154149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1368)
            # Adding element type (line 1368)
            # Getting the type of 'key' (line 1368)
            key_154150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 19), 'key')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1368, 19), tuple_154149, key_154150)
            
            # Assigning a type to the variable 'key' (line 1368)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 12), 'key', tuple_154149)

            if more_types_in_union_154148:
                # SSA join for if statement (line 1367)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Name (line 1369):
        
        # Assigning a List to a Name (line 1369):
        
        # Obtaining an instance of the builtin type 'list' (line 1369)
        list_154151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1369)
        
        # Assigning a type to the variable 'objs' (line 1369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'objs', list_154151)
        
        # Assigning a List to a Name (line 1370):
        
        # Assigning a List to a Name (line 1370):
        
        # Obtaining an instance of the builtin type 'list' (line 1370)
        list_154152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1370)
        
        # Assigning a type to the variable 'scalars' (line 1370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'scalars', list_154152)
        
        # Assigning a Name to a Name (line 1371):
        
        # Assigning a Name to a Name (line 1371):
        # Getting the type of 'None' (line 1371)
        None_154153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 27), 'None')
        # Assigning a type to the variable 'final_dtypedescr' (line 1371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 'final_dtypedescr', None_154153)
        
        
        # Call to range(...): (line 1372)
        # Processing the call arguments (line 1372)
        
        # Call to len(...): (line 1372)
        # Processing the call arguments (line 1372)
        # Getting the type of 'key' (line 1372)
        key_154156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 27), 'key', False)
        # Processing the call keyword arguments (line 1372)
        kwargs_154157 = {}
        # Getting the type of 'len' (line 1372)
        len_154155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 23), 'len', False)
        # Calling len(args, kwargs) (line 1372)
        len_call_result_154158 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 23), len_154155, *[key_154156], **kwargs_154157)
        
        # Processing the call keyword arguments (line 1372)
        kwargs_154159 = {}
        # Getting the type of 'range' (line 1372)
        range_154154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 17), 'range', False)
        # Calling range(args, kwargs) (line 1372)
        range_call_result_154160 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 17), range_154154, *[len_call_result_154158], **kwargs_154159)
        
        # Testing the type of a for loop iterable (line 1372)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1372, 8), range_call_result_154160)
        # Getting the type of the for loop variable (line 1372)
        for_loop_var_154161 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1372, 8), range_call_result_154160)
        # Assigning a type to the variable 'k' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 8), 'k', for_loop_var_154161)
        # SSA begins for a for statement (line 1372)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Name (line 1373):
        
        # Assigning a Name to a Name (line 1373):
        # Getting the type of 'False' (line 1373)
        False_154162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 21), 'False')
        # Assigning a type to the variable 'scalar' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 12), 'scalar', False_154162)
        
        # Type idiom detected: calculating its left and rigth part (line 1374)
        # Getting the type of 'slice' (line 1374)
        slice_154163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 34), 'slice')
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1374)
        k_154164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 30), 'k')
        # Getting the type of 'key' (line 1374)
        key_154165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 26), 'key')
        # Obtaining the member '__getitem__' of a type (line 1374)
        getitem___154166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 26), key_154165, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1374)
        subscript_call_result_154167 = invoke(stypy.reporting.localization.Localization(__file__, 1374, 26), getitem___154166, k_154164)
        
        
        (may_be_154168, more_types_in_union_154169) = may_be_subtype(slice_154163, subscript_call_result_154167)

        if may_be_154168:

            if more_types_in_union_154169:
                # Runtime conditional SSA (line 1374)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1375):
            
            # Assigning a Attribute to a Name (line 1375):
            
            # Obtaining the type of the subscript
            # Getting the type of 'k' (line 1375)
            k_154170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 27), 'k')
            # Getting the type of 'key' (line 1375)
            key_154171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 23), 'key')
            # Obtaining the member '__getitem__' of a type (line 1375)
            getitem___154172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 23), key_154171, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1375)
            subscript_call_result_154173 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 23), getitem___154172, k_154170)
            
            # Obtaining the member 'step' of a type (line 1375)
            step_154174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 23), subscript_call_result_154173, 'step')
            # Assigning a type to the variable 'step' (line 1375)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 16), 'step', step_154174)
            
            # Assigning a Attribute to a Name (line 1376):
            
            # Assigning a Attribute to a Name (line 1376):
            
            # Obtaining the type of the subscript
            # Getting the type of 'k' (line 1376)
            k_154175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 28), 'k')
            # Getting the type of 'key' (line 1376)
            key_154176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 24), 'key')
            # Obtaining the member '__getitem__' of a type (line 1376)
            getitem___154177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 24), key_154176, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1376)
            subscript_call_result_154178 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 24), getitem___154177, k_154175)
            
            # Obtaining the member 'start' of a type (line 1376)
            start_154179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 24), subscript_call_result_154178, 'start')
            # Assigning a type to the variable 'start' (line 1376)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 16), 'start', start_154179)
            
            # Assigning a Attribute to a Name (line 1377):
            
            # Assigning a Attribute to a Name (line 1377):
            
            # Obtaining the type of the subscript
            # Getting the type of 'k' (line 1377)
            k_154180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 27), 'k')
            # Getting the type of 'key' (line 1377)
            key_154181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 23), 'key')
            # Obtaining the member '__getitem__' of a type (line 1377)
            getitem___154182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 23), key_154181, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1377)
            subscript_call_result_154183 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 23), getitem___154182, k_154180)
            
            # Obtaining the member 'stop' of a type (line 1377)
            stop_154184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 23), subscript_call_result_154183, 'stop')
            # Assigning a type to the variable 'stop' (line 1377)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 16), 'stop', stop_154184)
            
            # Type idiom detected: calculating its left and rigth part (line 1378)
            # Getting the type of 'start' (line 1378)
            start_154185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 19), 'start')
            # Getting the type of 'None' (line 1378)
            None_154186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 28), 'None')
            
            (may_be_154187, more_types_in_union_154188) = may_be_none(start_154185, None_154186)

            if may_be_154187:

                if more_types_in_union_154188:
                    # Runtime conditional SSA (line 1378)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Num to a Name (line 1379):
                
                # Assigning a Num to a Name (line 1379):
                int_154189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 28), 'int')
                # Assigning a type to the variable 'start' (line 1379)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 20), 'start', int_154189)

                if more_types_in_union_154188:
                    # SSA join for if statement (line 1378)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Type idiom detected: calculating its left and rigth part (line 1380)
            # Getting the type of 'step' (line 1380)
            step_154190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 19), 'step')
            # Getting the type of 'None' (line 1380)
            None_154191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 27), 'None')
            
            (may_be_154192, more_types_in_union_154193) = may_be_none(step_154190, None_154191)

            if may_be_154192:

                if more_types_in_union_154193:
                    # Runtime conditional SSA (line 1380)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a Num to a Name (line 1381):
                
                # Assigning a Num to a Name (line 1381):
                int_154194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 27), 'int')
                # Assigning a type to the variable 'step' (line 1381)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 20), 'step', int_154194)

                if more_types_in_union_154193:
                    # SSA join for if statement (line 1380)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Type idiom detected: calculating its left and rigth part (line 1382)
            # Getting the type of 'complex' (line 1382)
            complex_154195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 36), 'complex')
            # Getting the type of 'step' (line 1382)
            step_154196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 30), 'step')
            
            (may_be_154197, more_types_in_union_154198) = may_be_subtype(complex_154195, step_154196)

            if may_be_154197:

                if more_types_in_union_154198:
                    # Runtime conditional SSA (line 1382)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'step' (line 1382)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 16), 'step', remove_not_subtype_from_union(step_154196, complex))
                
                # Assigning a Call to a Name (line 1383):
                
                # Assigning a Call to a Name (line 1383):
                
                # Call to int(...): (line 1383)
                # Processing the call arguments (line 1383)
                
                # Call to abs(...): (line 1383)
                # Processing the call arguments (line 1383)
                # Getting the type of 'step' (line 1383)
                step_154201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 35), 'step', False)
                # Processing the call keyword arguments (line 1383)
                kwargs_154202 = {}
                # Getting the type of 'abs' (line 1383)
                abs_154200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 31), 'abs', False)
                # Calling abs(args, kwargs) (line 1383)
                abs_call_result_154203 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 31), abs_154200, *[step_154201], **kwargs_154202)
                
                # Processing the call keyword arguments (line 1383)
                kwargs_154204 = {}
                # Getting the type of 'int' (line 1383)
                int_154199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 27), 'int', False)
                # Calling int(args, kwargs) (line 1383)
                int_call_result_154205 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 27), int_154199, *[abs_call_result_154203], **kwargs_154204)
                
                # Assigning a type to the variable 'size' (line 1383)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 20), 'size', int_call_result_154205)
                
                # Assigning a Call to a Name (line 1384):
                
                # Assigning a Call to a Name (line 1384):
                
                # Call to linspace(...): (line 1384)
                # Processing the call arguments (line 1384)
                # Getting the type of 'start' (line 1384)
                start_154208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 41), 'start', False)
                # Getting the type of 'stop' (line 1384)
                stop_154209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 48), 'stop', False)
                # Processing the call keyword arguments (line 1384)
                # Getting the type of 'size' (line 1384)
                size_154210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 58), 'size', False)
                keyword_154211 = size_154210
                kwargs_154212 = {'num': keyword_154211}
                # Getting the type of 'np' (line 1384)
                np_154206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 29), 'np', False)
                # Obtaining the member 'linspace' of a type (line 1384)
                linspace_154207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 29), np_154206, 'linspace')
                # Calling linspace(args, kwargs) (line 1384)
                linspace_call_result_154213 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 29), linspace_154207, *[start_154208, stop_154209], **kwargs_154212)
                
                # Assigning a type to the variable 'newobj' (line 1384)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 20), 'newobj', linspace_call_result_154213)

                if more_types_in_union_154198:
                    # Runtime conditional SSA for else branch (line 1382)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_154197) or more_types_in_union_154198):
                # Assigning a type to the variable 'step' (line 1382)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 16), 'step', remove_subtype_from_union(step_154196, complex))
                
                # Assigning a Call to a Name (line 1386):
                
                # Assigning a Call to a Name (line 1386):
                
                # Call to arange(...): (line 1386)
                # Processing the call arguments (line 1386)
                # Getting the type of 'start' (line 1386)
                start_154216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 39), 'start', False)
                # Getting the type of 'stop' (line 1386)
                stop_154217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 46), 'stop', False)
                # Getting the type of 'step' (line 1386)
                step_154218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 52), 'step', False)
                # Processing the call keyword arguments (line 1386)
                kwargs_154219 = {}
                # Getting the type of 'np' (line 1386)
                np_154214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 29), 'np', False)
                # Obtaining the member 'arange' of a type (line 1386)
                arange_154215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 29), np_154214, 'arange')
                # Calling arange(args, kwargs) (line 1386)
                arange_call_result_154220 = invoke(stypy.reporting.localization.Localization(__file__, 1386, 29), arange_154215, *[start_154216, stop_154217, step_154218], **kwargs_154219)
                
                # Assigning a type to the variable 'newobj' (line 1386)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 20), 'newobj', arange_call_result_154220)

                if (may_be_154197 and more_types_in_union_154198):
                    # SSA join for if statement (line 1382)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_154169:
                # Runtime conditional SSA for else branch (line 1374)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_154168) or more_types_in_union_154169):
            
            # Type idiom detected: calculating its left and rigth part (line 1387)
            # Getting the type of 'str' (line 1387)
            str_154221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 36), 'str')
            
            # Obtaining the type of the subscript
            # Getting the type of 'k' (line 1387)
            k_154222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 32), 'k')
            # Getting the type of 'key' (line 1387)
            key_154223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 28), 'key')
            # Obtaining the member '__getitem__' of a type (line 1387)
            getitem___154224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 28), key_154223, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1387)
            subscript_call_result_154225 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 28), getitem___154224, k_154222)
            
            
            (may_be_154226, more_types_in_union_154227) = may_be_subtype(str_154221, subscript_call_result_154225)

            if may_be_154226:

                if more_types_in_union_154227:
                    # Runtime conditional SSA (line 1387)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                
                
                # Obtaining the type of the subscript
                # Getting the type of 'k' (line 1388)
                k_154228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 24), 'k')
                # Getting the type of 'key' (line 1388)
                key_154229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 20), 'key')
                # Obtaining the member '__getitem__' of a type (line 1388)
                getitem___154230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 20), key_154229, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1388)
                subscript_call_result_154231 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 20), getitem___154230, k_154228)
                
                str_154232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 30), 'str', 'rc')
                # Applying the binary operator 'in' (line 1388)
                result_contains_154233 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 20), 'in', subscript_call_result_154231, str_154232)
                
                # Testing the type of an if condition (line 1388)
                if_condition_154234 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1388, 16), result_contains_154233)
                # Assigning a type to the variable 'if_condition_154234' (line 1388)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 16), 'if_condition_154234', if_condition_154234)
                # SSA begins for if statement (line 1388)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Name to a Attribute (line 1389):
                
                # Assigning a Name to a Attribute (line 1389):
                # Getting the type of 'True' (line 1389)
                True_154235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 34), 'True')
                # Getting the type of 'self' (line 1389)
                self_154236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 20), 'self')
                # Setting the type of the member 'matrix' of a type (line 1389)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 20), self_154236, 'matrix', True_154235)
                
                # Assigning a Compare to a Attribute (line 1390):
                
                # Assigning a Compare to a Attribute (line 1390):
                
                
                # Obtaining the type of the subscript
                # Getting the type of 'k' (line 1390)
                k_154237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 36), 'k')
                # Getting the type of 'key' (line 1390)
                key_154238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 32), 'key')
                # Obtaining the member '__getitem__' of a type (line 1390)
                getitem___154239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 32), key_154238, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1390)
                subscript_call_result_154240 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 32), getitem___154239, k_154237)
                
                str_154241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 42), 'str', 'c')
                # Applying the binary operator '==' (line 1390)
                result_eq_154242 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 32), '==', subscript_call_result_154240, str_154241)
                
                # Getting the type of 'self' (line 1390)
                self_154243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 20), 'self')
                # Setting the type of the member 'col' of a type (line 1390)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 20), self_154243, 'col', result_eq_154242)
                # SSA join for if statement (line 1388)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # SSA begins for try-except statement (line 1392)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                # Assigning a Call to a Attribute (line 1393):
                
                # Assigning a Call to a Attribute (line 1393):
                
                # Call to int(...): (line 1393)
                # Processing the call arguments (line 1393)
                
                # Obtaining the type of the subscript
                # Getting the type of 'k' (line 1393)
                k_154245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 40), 'k', False)
                # Getting the type of 'key' (line 1393)
                key_154246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 36), 'key', False)
                # Obtaining the member '__getitem__' of a type (line 1393)
                getitem___154247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 36), key_154246, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1393)
                subscript_call_result_154248 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 36), getitem___154247, k_154245)
                
                # Processing the call keyword arguments (line 1393)
                kwargs_154249 = {}
                # Getting the type of 'int' (line 1393)
                int_154244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 32), 'int', False)
                # Calling int(args, kwargs) (line 1393)
                int_call_result_154250 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 32), int_154244, *[subscript_call_result_154248], **kwargs_154249)
                
                # Getting the type of 'self' (line 1393)
                self_154251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 20), 'self')
                # Setting the type of the member 'axis' of a type (line 1393)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 20), self_154251, 'axis', int_call_result_154250)
                # SSA branch for the except part of a try statement (line 1392)
                # SSA branch for the except 'Tuple' branch of a try statement (line 1392)
                module_type_store.open_ssa_branch('except')
                
                # Call to ValueError(...): (line 1396)
                # Processing the call arguments (line 1396)
                str_154253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1396, 37), 'str', 'Unknown special directive')
                # Processing the call keyword arguments (line 1396)
                kwargs_154254 = {}
                # Getting the type of 'ValueError' (line 1396)
                ValueError_154252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 26), 'ValueError', False)
                # Calling ValueError(args, kwargs) (line 1396)
                ValueError_call_result_154255 = invoke(stypy.reporting.localization.Localization(__file__, 1396, 26), ValueError_154252, *[str_154253], **kwargs_154254)
                
                ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1396, 20), ValueError_call_result_154255, 'raise parameter', BaseException)
                # SSA join for try-except statement (line 1392)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_154227:
                    # Runtime conditional SSA for else branch (line 1387)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_154226) or more_types_in_union_154227):
                
                
                
                # Call to type(...): (line 1397)
                # Processing the call arguments (line 1397)
                
                # Obtaining the type of the subscript
                # Getting the type of 'k' (line 1397)
                k_154257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 26), 'k', False)
                # Getting the type of 'key' (line 1397)
                key_154258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 22), 'key', False)
                # Obtaining the member '__getitem__' of a type (line 1397)
                getitem___154259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 22), key_154258, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1397)
                subscript_call_result_154260 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 22), getitem___154259, k_154257)
                
                # Processing the call keyword arguments (line 1397)
                kwargs_154261 = {}
                # Getting the type of 'type' (line 1397)
                type_154256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 17), 'type', False)
                # Calling type(args, kwargs) (line 1397)
                type_call_result_154262 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 17), type_154256, *[subscript_call_result_154260], **kwargs_154261)
                
                # Getting the type of 'np' (line 1397)
                np_154263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 33), 'np')
                # Obtaining the member 'ScalarType' of a type (line 1397)
                ScalarType_154264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 33), np_154263, 'ScalarType')
                # Applying the binary operator 'in' (line 1397)
                result_contains_154265 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 17), 'in', type_call_result_154262, ScalarType_154264)
                
                # Testing the type of an if condition (line 1397)
                if_condition_154266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1397, 17), result_contains_154265)
                # Assigning a type to the variable 'if_condition_154266' (line 1397)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 17), 'if_condition_154266', if_condition_154266)
                # SSA begins for if statement (line 1397)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Call to a Name (line 1398):
                
                # Assigning a Call to a Name (line 1398):
                
                # Call to asarray(...): (line 1398)
                # Processing the call arguments (line 1398)
                
                # Obtaining an instance of the builtin type 'list' (line 1398)
                list_154268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 33), 'list')
                # Adding type elements to the builtin type 'list' instance (line 1398)
                # Adding element type (line 1398)
                
                # Obtaining the type of the subscript
                # Getting the type of 'k' (line 1398)
                k_154269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 38), 'k', False)
                # Getting the type of 'key' (line 1398)
                key_154270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 34), 'key', False)
                # Obtaining the member '__getitem__' of a type (line 1398)
                getitem___154271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 34), key_154270, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1398)
                subscript_call_result_154272 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 34), getitem___154271, k_154269)
                
                add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1398, 33), list_154268, subscript_call_result_154272)
                
                # Processing the call keyword arguments (line 1398)
                kwargs_154273 = {}
                # Getting the type of 'asarray' (line 1398)
                asarray_154267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 25), 'asarray', False)
                # Calling asarray(args, kwargs) (line 1398)
                asarray_call_result_154274 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 25), asarray_154267, *[list_154268], **kwargs_154273)
                
                # Assigning a type to the variable 'newobj' (line 1398)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 16), 'newobj', asarray_call_result_154274)
                
                # Call to append(...): (line 1399)
                # Processing the call arguments (line 1399)
                # Getting the type of 'k' (line 1399)
                k_154277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 31), 'k', False)
                # Processing the call keyword arguments (line 1399)
                kwargs_154278 = {}
                # Getting the type of 'scalars' (line 1399)
                scalars_154275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 16), 'scalars', False)
                # Obtaining the member 'append' of a type (line 1399)
                append_154276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1399, 16), scalars_154275, 'append')
                # Calling append(args, kwargs) (line 1399)
                append_call_result_154279 = invoke(stypy.reporting.localization.Localization(__file__, 1399, 16), append_154276, *[k_154277], **kwargs_154278)
                
                
                # Assigning a Name to a Name (line 1400):
                
                # Assigning a Name to a Name (line 1400):
                # Getting the type of 'True' (line 1400)
                True_154280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 25), 'True')
                # Assigning a type to the variable 'scalar' (line 1400)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 16), 'scalar', True_154280)
                # SSA branch for the else part of an if statement (line 1397)
                module_type_store.open_ssa_branch('else')
                
                # Assigning a Subscript to a Name (line 1402):
                
                # Assigning a Subscript to a Name (line 1402):
                
                # Obtaining the type of the subscript
                # Getting the type of 'k' (line 1402)
                k_154281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 29), 'k')
                # Getting the type of 'key' (line 1402)
                key_154282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 25), 'key')
                # Obtaining the member '__getitem__' of a type (line 1402)
                getitem___154283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1402, 25), key_154282, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1402)
                subscript_call_result_154284 = invoke(stypy.reporting.localization.Localization(__file__, 1402, 25), getitem___154283, k_154281)
                
                # Assigning a type to the variable 'newobj' (line 1402)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 16), 'newobj', subscript_call_result_154284)
                # SSA join for if statement (line 1397)
                module_type_store = module_type_store.join_ssa_context()
                

                if (may_be_154226 and more_types_in_union_154227):
                    # SSA join for if statement (line 1387)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_154168 and more_types_in_union_154169):
                # SSA join for if statement (line 1374)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to append(...): (line 1403)
        # Processing the call arguments (line 1403)
        # Getting the type of 'newobj' (line 1403)
        newobj_154287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 24), 'newobj', False)
        # Processing the call keyword arguments (line 1403)
        kwargs_154288 = {}
        # Getting the type of 'objs' (line 1403)
        objs_154285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 12), 'objs', False)
        # Obtaining the member 'append' of a type (line 1403)
        append_154286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 12), objs_154285, 'append')
        # Calling append(args, kwargs) (line 1403)
        append_call_result_154289 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 12), append_154286, *[newobj_154287], **kwargs_154288)
        
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 1404)
        # Processing the call arguments (line 1404)
        # Getting the type of 'newobj' (line 1404)
        newobj_154291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 26), 'newobj', False)
        # Getting the type of 'ndarray' (line 1404)
        ndarray_154292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 34), 'ndarray', False)
        # Processing the call keyword arguments (line 1404)
        kwargs_154293 = {}
        # Getting the type of 'isinstance' (line 1404)
        isinstance_154290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1404)
        isinstance_call_result_154294 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 15), isinstance_154290, *[newobj_154291, ndarray_154292], **kwargs_154293)
        
        
        # Getting the type of 'scalar' (line 1404)
        scalar_154295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 51), 'scalar')
        # Applying the 'not' unary operator (line 1404)
        result_not__154296 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 47), 'not', scalar_154295)
        
        # Applying the binary operator 'and' (line 1404)
        result_and_keyword_154297 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 15), 'and', isinstance_call_result_154294, result_not__154296)
        
        # Testing the type of an if condition (line 1404)
        if_condition_154298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1404, 12), result_and_keyword_154297)
        # Assigning a type to the variable 'if_condition_154298' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 12), 'if_condition_154298', if_condition_154298)
        # SSA begins for if statement (line 1404)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1405)
        # Getting the type of 'final_dtypedescr' (line 1405)
        final_dtypedescr_154299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 19), 'final_dtypedescr')
        # Getting the type of 'None' (line 1405)
        None_154300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 39), 'None')
        
        (may_be_154301, more_types_in_union_154302) = may_be_none(final_dtypedescr_154299, None_154300)

        if may_be_154301:

            if more_types_in_union_154302:
                # Runtime conditional SSA (line 1405)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1406):
            
            # Assigning a Attribute to a Name (line 1406):
            # Getting the type of 'newobj' (line 1406)
            newobj_154303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 39), 'newobj')
            # Obtaining the member 'dtype' of a type (line 1406)
            dtype_154304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 39), newobj_154303, 'dtype')
            # Assigning a type to the variable 'final_dtypedescr' (line 1406)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 20), 'final_dtypedescr', dtype_154304)

            if more_types_in_union_154302:
                # Runtime conditional SSA for else branch (line 1405)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_154301) or more_types_in_union_154302):
            
            
            # Getting the type of 'newobj' (line 1407)
            newobj_154305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 21), 'newobj')
            # Obtaining the member 'dtype' of a type (line 1407)
            dtype_154306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 21), newobj_154305, 'dtype')
            # Getting the type of 'final_dtypedescr' (line 1407)
            final_dtypedescr_154307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 36), 'final_dtypedescr')
            # Applying the binary operator '>' (line 1407)
            result_gt_154308 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 21), '>', dtype_154306, final_dtypedescr_154307)
            
            # Testing the type of an if condition (line 1407)
            if_condition_154309 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1407, 21), result_gt_154308)
            # Assigning a type to the variable 'if_condition_154309' (line 1407)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 21), 'if_condition_154309', if_condition_154309)
            # SSA begins for if statement (line 1407)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Attribute to a Name (line 1408):
            
            # Assigning a Attribute to a Name (line 1408):
            # Getting the type of 'newobj' (line 1408)
            newobj_154310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 39), 'newobj')
            # Obtaining the member 'dtype' of a type (line 1408)
            dtype_154311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 39), newobj_154310, 'dtype')
            # Assigning a type to the variable 'final_dtypedescr' (line 1408)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 20), 'final_dtypedescr', dtype_154311)
            # SSA join for if statement (line 1407)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_154301 and more_types_in_union_154302):
                # SSA join for if statement (line 1405)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1404)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1409)
        # Getting the type of 'final_dtypedescr' (line 1409)
        final_dtypedescr_154312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'final_dtypedescr')
        # Getting the type of 'None' (line 1409)
        None_154313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 35), 'None')
        
        (may_be_154314, more_types_in_union_154315) = may_not_be_none(final_dtypedescr_154312, None_154313)

        if may_be_154314:

            if more_types_in_union_154315:
                # Runtime conditional SSA (line 1409)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'scalars' (line 1410)
            scalars_154316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 21), 'scalars')
            # Testing the type of a for loop iterable (line 1410)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1410, 12), scalars_154316)
            # Getting the type of the for loop variable (line 1410)
            for_loop_var_154317 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1410, 12), scalars_154316)
            # Assigning a type to the variable 'k' (line 1410)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 12), 'k', for_loop_var_154317)
            # SSA begins for a for statement (line 1410)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Call to a Subscript (line 1411):
            
            # Assigning a Call to a Subscript (line 1411):
            
            # Call to astype(...): (line 1411)
            # Processing the call arguments (line 1411)
            # Getting the type of 'final_dtypedescr' (line 1411)
            final_dtypedescr_154323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 41), 'final_dtypedescr', False)
            # Processing the call keyword arguments (line 1411)
            kwargs_154324 = {}
            
            # Obtaining the type of the subscript
            # Getting the type of 'k' (line 1411)
            k_154318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 31), 'k', False)
            # Getting the type of 'objs' (line 1411)
            objs_154319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 26), 'objs', False)
            # Obtaining the member '__getitem__' of a type (line 1411)
            getitem___154320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 26), objs_154319, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1411)
            subscript_call_result_154321 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 26), getitem___154320, k_154318)
            
            # Obtaining the member 'astype' of a type (line 1411)
            astype_154322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 26), subscript_call_result_154321, 'astype')
            # Calling astype(args, kwargs) (line 1411)
            astype_call_result_154325 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 26), astype_154322, *[final_dtypedescr_154323], **kwargs_154324)
            
            # Getting the type of 'objs' (line 1411)
            objs_154326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 16), 'objs')
            # Getting the type of 'k' (line 1411)
            k_154327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 21), 'k')
            # Storing an element on a container (line 1411)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 16), objs_154326, (k_154327, astype_call_result_154325))
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_154315:
                # SSA join for if statement (line 1409)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1412):
        
        # Assigning a Call to a Name (line 1412):
        
        # Call to concatenate(...): (line 1412)
        # Processing the call arguments (line 1412)
        
        # Call to tuple(...): (line 1412)
        # Processing the call arguments (line 1412)
        # Getting the type of 'objs' (line 1412)
        objs_154330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 32), 'objs', False)
        # Processing the call keyword arguments (line 1412)
        kwargs_154331 = {}
        # Getting the type of 'tuple' (line 1412)
        tuple_154329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 26), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1412)
        tuple_call_result_154332 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 26), tuple_154329, *[objs_154330], **kwargs_154331)
        
        # Processing the call keyword arguments (line 1412)
        # Getting the type of 'self' (line 1412)
        self_154333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 44), 'self', False)
        # Obtaining the member 'axis' of a type (line 1412)
        axis_154334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 44), self_154333, 'axis')
        keyword_154335 = axis_154334
        kwargs_154336 = {'axis': keyword_154335}
        # Getting the type of 'concatenate' (line 1412)
        concatenate_154328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 14), 'concatenate', False)
        # Calling concatenate(args, kwargs) (line 1412)
        concatenate_call_result_154337 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 14), concatenate_154328, *[tuple_call_result_154332], **kwargs_154336)
        
        # Assigning a type to the variable 'res' (line 1412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 8), 'res', concatenate_call_result_154337)
        
        # Call to _retval(...): (line 1413)
        # Processing the call arguments (line 1413)
        # Getting the type of 'res' (line 1413)
        res_154340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 28), 'res', False)
        # Processing the call keyword arguments (line 1413)
        kwargs_154341 = {}
        # Getting the type of 'self' (line 1413)
        self_154338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 15), 'self', False)
        # Obtaining the member '_retval' of a type (line 1413)
        _retval_154339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 15), self_154338, '_retval')
        # Calling _retval(args, kwargs) (line 1413)
        _retval_call_result_154342 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 15), _retval_154339, *[res_154340], **kwargs_154341)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'stypy_return_type', _retval_call_result_154342)
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 1364)
        stypy_return_type_154343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_154343)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_154343


# Assigning a type to the variable 'MAxisConcatenator' (line 1349)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 0), 'MAxisConcatenator', MAxisConcatenator)
# Declaration of the 'mr_class' class
# Getting the type of 'MAxisConcatenator' (line 1415)
MAxisConcatenator_154344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 15), 'MAxisConcatenator')

class mr_class(MAxisConcatenator_154344, ):
    str_154345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, (-1)), 'str', '\n    Translate slice objects to concatenation along the first axis.\n\n    This is the masked array version of `lib.index_tricks.RClass`.\n\n    See Also\n    --------\n    lib.index_tricks.RClass\n\n    Examples\n    --------\n    >>> np.ma.mr_[np.ma.array([1,2,3]), 0, 0, np.ma.array([4,5,6])]\n    array([1, 2, 3, 0, 0, 4, 5, 6])\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1431, 4, False)
        # Assigning a type to the variable 'self' (line 1432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mr_class.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1432)
        # Processing the call arguments (line 1432)
        # Getting the type of 'self' (line 1432)
        self_154348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 35), 'self', False)
        int_154349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1432, 41), 'int')
        # Processing the call keyword arguments (line 1432)
        kwargs_154350 = {}
        # Getting the type of 'MAxisConcatenator' (line 1432)
        MAxisConcatenator_154346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'MAxisConcatenator', False)
        # Obtaining the member '__init__' of a type (line 1432)
        init___154347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 8), MAxisConcatenator_154346, '__init__')
        # Calling __init__(args, kwargs) (line 1432)
        init___call_result_154351 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 8), init___154347, *[self_154348, int_154349], **kwargs_154350)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'mr_class' (line 1415)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 0), 'mr_class', mr_class)

# Assigning a Call to a Name (line 1434):

# Assigning a Call to a Name (line 1434):

# Call to mr_class(...): (line 1434)
# Processing the call keyword arguments (line 1434)
kwargs_154353 = {}
# Getting the type of 'mr_class' (line 1434)
mr_class_154352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 6), 'mr_class', False)
# Calling mr_class(args, kwargs) (line 1434)
mr_class_call_result_154354 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 6), mr_class_154352, *[], **kwargs_154353)

# Assigning a type to the variable 'mr_' (line 1434)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 0), 'mr_', mr_class_call_result_154354)

@norecursion
def flatnotmasked_edges(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'flatnotmasked_edges'
    module_type_store = module_type_store.open_function_context('flatnotmasked_edges', 1440, 0, False)
    
    # Passed parameters checking function
    flatnotmasked_edges.stypy_localization = localization
    flatnotmasked_edges.stypy_type_of_self = None
    flatnotmasked_edges.stypy_type_store = module_type_store
    flatnotmasked_edges.stypy_function_name = 'flatnotmasked_edges'
    flatnotmasked_edges.stypy_param_names_list = ['a']
    flatnotmasked_edges.stypy_varargs_param_name = None
    flatnotmasked_edges.stypy_kwargs_param_name = None
    flatnotmasked_edges.stypy_call_defaults = defaults
    flatnotmasked_edges.stypy_call_varargs = varargs
    flatnotmasked_edges.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'flatnotmasked_edges', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'flatnotmasked_edges', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'flatnotmasked_edges(...)' code ##################

    str_154355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, (-1)), 'str', '\n    Find the indices of the first and last unmasked values.\n\n    Expects a 1-D `MaskedArray`, returns None if all values are masked.\n\n    Parameters\n    ----------\n    a : array_like\n        Input 1-D `MaskedArray`\n\n    Returns\n    -------\n    edges : ndarray or None\n        The indices of first and last non-masked value in the array.\n        Returns None if all values are masked.\n\n    See Also\n    --------\n    flatnotmasked_contiguous, notmasked_contiguous, notmasked_edges,\n    clump_masked, clump_unmasked\n\n    Notes\n    -----\n    Only accepts 1-D arrays.\n\n    Examples\n    --------\n    >>> a = np.ma.arange(10)\n    >>> flatnotmasked_edges(a)\n    [0,-1]\n\n    >>> mask = (a < 3) | (a > 8) | (a == 5)\n    >>> a[mask] = np.ma.masked\n    >>> np.array(a[~a.mask])\n    array([3, 4, 6, 7, 8])\n\n    >>> flatnotmasked_edges(a)\n    array([3, 8])\n\n    >>> a[:] = np.ma.masked\n    >>> print(flatnotmasked_edges(ma))\n    None\n\n    ')
    
    # Assigning a Call to a Name (line 1485):
    
    # Assigning a Call to a Name (line 1485):
    
    # Call to getmask(...): (line 1485)
    # Processing the call arguments (line 1485)
    # Getting the type of 'a' (line 1485)
    a_154357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 16), 'a', False)
    # Processing the call keyword arguments (line 1485)
    kwargs_154358 = {}
    # Getting the type of 'getmask' (line 1485)
    getmask_154356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 1485)
    getmask_call_result_154359 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 8), getmask_154356, *[a_154357], **kwargs_154358)
    
    # Assigning a type to the variable 'm' (line 1485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 4), 'm', getmask_call_result_154359)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm' (line 1486)
    m_154360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 7), 'm')
    # Getting the type of 'nomask' (line 1486)
    nomask_154361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 12), 'nomask')
    # Applying the binary operator 'is' (line 1486)
    result_is__154362 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 7), 'is', m_154360, nomask_154361)
    
    
    
    # Call to any(...): (line 1486)
    # Processing the call arguments (line 1486)
    # Getting the type of 'm' (line 1486)
    m_154365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 33), 'm', False)
    # Processing the call keyword arguments (line 1486)
    kwargs_154366 = {}
    # Getting the type of 'np' (line 1486)
    np_154363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 26), 'np', False)
    # Obtaining the member 'any' of a type (line 1486)
    any_154364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1486, 26), np_154363, 'any')
    # Calling any(args, kwargs) (line 1486)
    any_call_result_154367 = invoke(stypy.reporting.localization.Localization(__file__, 1486, 26), any_154364, *[m_154365], **kwargs_154366)
    
    # Applying the 'not' unary operator (line 1486)
    result_not__154368 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 22), 'not', any_call_result_154367)
    
    # Applying the binary operator 'or' (line 1486)
    result_or_keyword_154369 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 7), 'or', result_is__154362, result_not__154368)
    
    # Testing the type of an if condition (line 1486)
    if_condition_154370 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1486, 4), result_or_keyword_154369)
    # Assigning a type to the variable 'if_condition_154370' (line 1486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'if_condition_154370', if_condition_154370)
    # SSA begins for if statement (line 1486)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 1487)
    # Processing the call arguments (line 1487)
    
    # Obtaining an instance of the builtin type 'list' (line 1487)
    list_154373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1487)
    # Adding element type (line 1487)
    int_154374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1487, 24), list_154373, int_154374)
    # Adding element type (line 1487)
    # Getting the type of 'a' (line 1487)
    a_154375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 28), 'a', False)
    # Obtaining the member 'size' of a type (line 1487)
    size_154376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 28), a_154375, 'size')
    int_154377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 37), 'int')
    # Applying the binary operator '-' (line 1487)
    result_sub_154378 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 28), '-', size_154376, int_154377)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1487, 24), list_154373, result_sub_154378)
    
    # Processing the call keyword arguments (line 1487)
    kwargs_154379 = {}
    # Getting the type of 'np' (line 1487)
    np_154371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 1487)
    array_154372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 15), np_154371, 'array')
    # Calling array(args, kwargs) (line 1487)
    array_call_result_154380 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 15), array_154372, *[list_154373], **kwargs_154379)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'stypy_return_type', array_call_result_154380)
    # SSA join for if statement (line 1486)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1488):
    
    # Assigning a Call to a Name (line 1488):
    
    # Call to flatnonzero(...): (line 1488)
    # Processing the call arguments (line 1488)
    
    # Getting the type of 'm' (line 1488)
    m_154383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 31), 'm', False)
    # Applying the '~' unary operator (line 1488)
    result_inv_154384 = python_operator(stypy.reporting.localization.Localization(__file__, 1488, 30), '~', m_154383)
    
    # Processing the call keyword arguments (line 1488)
    kwargs_154385 = {}
    # Getting the type of 'np' (line 1488)
    np_154381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 15), 'np', False)
    # Obtaining the member 'flatnonzero' of a type (line 1488)
    flatnonzero_154382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1488, 15), np_154381, 'flatnonzero')
    # Calling flatnonzero(args, kwargs) (line 1488)
    flatnonzero_call_result_154386 = invoke(stypy.reporting.localization.Localization(__file__, 1488, 15), flatnonzero_154382, *[result_inv_154384], **kwargs_154385)
    
    # Assigning a type to the variable 'unmasked' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 4), 'unmasked', flatnonzero_call_result_154386)
    
    
    
    # Call to len(...): (line 1489)
    # Processing the call arguments (line 1489)
    # Getting the type of 'unmasked' (line 1489)
    unmasked_154388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 11), 'unmasked', False)
    # Processing the call keyword arguments (line 1489)
    kwargs_154389 = {}
    # Getting the type of 'len' (line 1489)
    len_154387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 7), 'len', False)
    # Calling len(args, kwargs) (line 1489)
    len_call_result_154390 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 7), len_154387, *[unmasked_154388], **kwargs_154389)
    
    int_154391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 23), 'int')
    # Applying the binary operator '>' (line 1489)
    result_gt_154392 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 7), '>', len_call_result_154390, int_154391)
    
    # Testing the type of an if condition (line 1489)
    if_condition_154393 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1489, 4), result_gt_154392)
    # Assigning a type to the variable 'if_condition_154393' (line 1489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 4), 'if_condition_154393', if_condition_154393)
    # SSA begins for if statement (line 1489)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'list' (line 1490)
    list_154394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1490)
    # Adding element type (line 1490)
    int_154395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1490, 24), list_154394, int_154395)
    # Adding element type (line 1490)
    int_154396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1490, 24), list_154394, int_154396)
    
    # Getting the type of 'unmasked' (line 1490)
    unmasked_154397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 15), 'unmasked')
    # Obtaining the member '__getitem__' of a type (line 1490)
    getitem___154398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1490, 15), unmasked_154397, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1490)
    subscript_call_result_154399 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 15), getitem___154398, list_154394)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 8), 'stypy_return_type', subscript_call_result_154399)
    # SSA branch for the else part of an if statement (line 1489)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'None' (line 1492)
    None_154400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 15), 'None')
    # Assigning a type to the variable 'stypy_return_type' (line 1492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'stypy_return_type', None_154400)
    # SSA join for if statement (line 1489)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'flatnotmasked_edges(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'flatnotmasked_edges' in the type store
    # Getting the type of 'stypy_return_type' (line 1440)
    stypy_return_type_154401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154401)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'flatnotmasked_edges'
    return stypy_return_type_154401

# Assigning a type to the variable 'flatnotmasked_edges' (line 1440)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 0), 'flatnotmasked_edges', flatnotmasked_edges)

@norecursion
def notmasked_edges(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1495)
    None_154402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 28), 'None')
    defaults = [None_154402]
    # Create a new context for function 'notmasked_edges'
    module_type_store = module_type_store.open_function_context('notmasked_edges', 1495, 0, False)
    
    # Passed parameters checking function
    notmasked_edges.stypy_localization = localization
    notmasked_edges.stypy_type_of_self = None
    notmasked_edges.stypy_type_store = module_type_store
    notmasked_edges.stypy_function_name = 'notmasked_edges'
    notmasked_edges.stypy_param_names_list = ['a', 'axis']
    notmasked_edges.stypy_varargs_param_name = None
    notmasked_edges.stypy_kwargs_param_name = None
    notmasked_edges.stypy_call_defaults = defaults
    notmasked_edges.stypy_call_varargs = varargs
    notmasked_edges.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'notmasked_edges', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'notmasked_edges', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'notmasked_edges(...)' code ##################

    str_154403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, (-1)), 'str', '\n    Find the indices of the first and last unmasked values along an axis.\n\n    If all values are masked, return None.  Otherwise, return a list\n    of two tuples, corresponding to the indices of the first and last\n    unmasked values respectively.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    axis : int, optional\n        Axis along which to perform the operation.\n        If None (default), applies to a flattened version of the array.\n\n    Returns\n    -------\n    edges : ndarray or list\n        An array of start and end indexes if there are any masked data in\n        the array. If there are no masked data in the array, `edges` is a\n        list of the first and last index.\n\n    See Also\n    --------\n    flatnotmasked_contiguous, flatnotmasked_edges, notmasked_contiguous,\n    clump_masked, clump_unmasked\n\n    Examples\n    --------\n    >>> a = np.arange(9).reshape((3, 3))\n    >>> m = np.zeros_like(a)\n    >>> m[1:, 1:] = 1\n\n    >>> am = np.ma.array(a, mask=m)\n    >>> np.array(am[~am.mask])\n    array([0, 1, 2, 3, 6])\n\n    >>> np.ma.notmasked_edges(ma)\n    array([0, 6])\n\n    ')
    
    # Assigning a Call to a Name (line 1537):
    
    # Assigning a Call to a Name (line 1537):
    
    # Call to asarray(...): (line 1537)
    # Processing the call arguments (line 1537)
    # Getting the type of 'a' (line 1537)
    a_154405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 16), 'a', False)
    # Processing the call keyword arguments (line 1537)
    kwargs_154406 = {}
    # Getting the type of 'asarray' (line 1537)
    asarray_154404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1537)
    asarray_call_result_154407 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 8), asarray_154404, *[a_154405], **kwargs_154406)
    
    # Assigning a type to the variable 'a' (line 1537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 4), 'a', asarray_call_result_154407)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 1538)
    axis_154408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 7), 'axis')
    # Getting the type of 'None' (line 1538)
    None_154409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 15), 'None')
    # Applying the binary operator 'is' (line 1538)
    result_is__154410 = python_operator(stypy.reporting.localization.Localization(__file__, 1538, 7), 'is', axis_154408, None_154409)
    
    
    # Getting the type of 'a' (line 1538)
    a_154411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 23), 'a')
    # Obtaining the member 'ndim' of a type (line 1538)
    ndim_154412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 23), a_154411, 'ndim')
    int_154413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 33), 'int')
    # Applying the binary operator '==' (line 1538)
    result_eq_154414 = python_operator(stypy.reporting.localization.Localization(__file__, 1538, 23), '==', ndim_154412, int_154413)
    
    # Applying the binary operator 'or' (line 1538)
    result_or_keyword_154415 = python_operator(stypy.reporting.localization.Localization(__file__, 1538, 7), 'or', result_is__154410, result_eq_154414)
    
    # Testing the type of an if condition (line 1538)
    if_condition_154416 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1538, 4), result_or_keyword_154415)
    # Assigning a type to the variable 'if_condition_154416' (line 1538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 4), 'if_condition_154416', if_condition_154416)
    # SSA begins for if statement (line 1538)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to flatnotmasked_edges(...): (line 1539)
    # Processing the call arguments (line 1539)
    # Getting the type of 'a' (line 1539)
    a_154418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 35), 'a', False)
    # Processing the call keyword arguments (line 1539)
    kwargs_154419 = {}
    # Getting the type of 'flatnotmasked_edges' (line 1539)
    flatnotmasked_edges_154417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 15), 'flatnotmasked_edges', False)
    # Calling flatnotmasked_edges(args, kwargs) (line 1539)
    flatnotmasked_edges_call_result_154420 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 15), flatnotmasked_edges_154417, *[a_154418], **kwargs_154419)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'stypy_return_type', flatnotmasked_edges_call_result_154420)
    # SSA join for if statement (line 1538)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1540):
    
    # Assigning a Call to a Name (line 1540):
    
    # Call to getmaskarray(...): (line 1540)
    # Processing the call arguments (line 1540)
    # Getting the type of 'a' (line 1540)
    a_154422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 21), 'a', False)
    # Processing the call keyword arguments (line 1540)
    kwargs_154423 = {}
    # Getting the type of 'getmaskarray' (line 1540)
    getmaskarray_154421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 8), 'getmaskarray', False)
    # Calling getmaskarray(args, kwargs) (line 1540)
    getmaskarray_call_result_154424 = invoke(stypy.reporting.localization.Localization(__file__, 1540, 8), getmaskarray_154421, *[a_154422], **kwargs_154423)
    
    # Assigning a type to the variable 'm' (line 1540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 4), 'm', getmaskarray_call_result_154424)
    
    # Assigning a Call to a Name (line 1541):
    
    # Assigning a Call to a Name (line 1541):
    
    # Call to array(...): (line 1541)
    # Processing the call arguments (line 1541)
    
    # Call to indices(...): (line 1541)
    # Processing the call arguments (line 1541)
    # Getting the type of 'a' (line 1541)
    a_154428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 27), 'a', False)
    # Obtaining the member 'shape' of a type (line 1541)
    shape_154429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1541, 27), a_154428, 'shape')
    # Processing the call keyword arguments (line 1541)
    kwargs_154430 = {}
    # Getting the type of 'np' (line 1541)
    np_154426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 16), 'np', False)
    # Obtaining the member 'indices' of a type (line 1541)
    indices_154427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1541, 16), np_154426, 'indices')
    # Calling indices(args, kwargs) (line 1541)
    indices_call_result_154431 = invoke(stypy.reporting.localization.Localization(__file__, 1541, 16), indices_154427, *[shape_154429], **kwargs_154430)
    
    # Processing the call keyword arguments (line 1541)
    
    # Call to asarray(...): (line 1541)
    # Processing the call arguments (line 1541)
    
    # Obtaining an instance of the builtin type 'list' (line 1541)
    list_154434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 53), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1541)
    # Adding element type (line 1541)
    # Getting the type of 'm' (line 1541)
    m_154435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 54), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1541, 53), list_154434, m_154435)
    
    # Getting the type of 'a' (line 1541)
    a_154436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 59), 'a', False)
    # Obtaining the member 'ndim' of a type (line 1541)
    ndim_154437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1541, 59), a_154436, 'ndim')
    # Applying the binary operator '*' (line 1541)
    result_mul_154438 = python_operator(stypy.reporting.localization.Localization(__file__, 1541, 53), '*', list_154434, ndim_154437)
    
    # Processing the call keyword arguments (line 1541)
    kwargs_154439 = {}
    # Getting the type of 'np' (line 1541)
    np_154432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 42), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1541)
    asarray_154433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1541, 42), np_154432, 'asarray')
    # Calling asarray(args, kwargs) (line 1541)
    asarray_call_result_154440 = invoke(stypy.reporting.localization.Localization(__file__, 1541, 42), asarray_154433, *[result_mul_154438], **kwargs_154439)
    
    keyword_154441 = asarray_call_result_154440
    kwargs_154442 = {'mask': keyword_154441}
    # Getting the type of 'array' (line 1541)
    array_154425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 10), 'array', False)
    # Calling array(args, kwargs) (line 1541)
    array_call_result_154443 = invoke(stypy.reporting.localization.Localization(__file__, 1541, 10), array_154425, *[indices_call_result_154431], **kwargs_154442)
    
    # Assigning a type to the variable 'idx' (line 1541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 4), 'idx', array_call_result_154443)
    
    # Obtaining an instance of the builtin type 'list' (line 1542)
    list_154444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1542)
    # Adding element type (line 1542)
    
    # Call to tuple(...): (line 1542)
    # Processing the call arguments (line 1542)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 1542)
    # Processing the call arguments (line 1542)
    # Getting the type of 'a' (line 1542)
    a_154458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 64), 'a', False)
    # Obtaining the member 'ndim' of a type (line 1542)
    ndim_154459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 64), a_154458, 'ndim')
    # Processing the call keyword arguments (line 1542)
    kwargs_154460 = {}
    # Getting the type of 'range' (line 1542)
    range_154457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 58), 'range', False)
    # Calling range(args, kwargs) (line 1542)
    range_call_result_154461 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 58), range_154457, *[ndim_154459], **kwargs_154460)
    
    comprehension_154462 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 19), range_call_result_154461)
    # Assigning a type to the variable 'i' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 19), 'i', comprehension_154462)
    
    # Call to compressed(...): (line 1542)
    # Processing the call keyword arguments (line 1542)
    kwargs_154455 = {}
    
    # Call to min(...): (line 1542)
    # Processing the call arguments (line 1542)
    # Getting the type of 'axis' (line 1542)
    axis_154451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 30), 'axis', False)
    # Processing the call keyword arguments (line 1542)
    kwargs_154452 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1542)
    i_154446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 23), 'i', False)
    # Getting the type of 'idx' (line 1542)
    idx_154447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 19), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 1542)
    getitem___154448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 19), idx_154447, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1542)
    subscript_call_result_154449 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 19), getitem___154448, i_154446)
    
    # Obtaining the member 'min' of a type (line 1542)
    min_154450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 19), subscript_call_result_154449, 'min')
    # Calling min(args, kwargs) (line 1542)
    min_call_result_154453 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 19), min_154450, *[axis_154451], **kwargs_154452)
    
    # Obtaining the member 'compressed' of a type (line 1542)
    compressed_154454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 19), min_call_result_154453, 'compressed')
    # Calling compressed(args, kwargs) (line 1542)
    compressed_call_result_154456 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 19), compressed_154454, *[], **kwargs_154455)
    
    list_154463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 19), list_154463, compressed_call_result_154456)
    # Processing the call keyword arguments (line 1542)
    kwargs_154464 = {}
    # Getting the type of 'tuple' (line 1542)
    tuple_154445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 12), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1542)
    tuple_call_result_154465 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 12), tuple_154445, *[list_154463], **kwargs_154464)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 11), list_154444, tuple_call_result_154465)
    # Adding element type (line 1542)
    
    # Call to tuple(...): (line 1543)
    # Processing the call arguments (line 1543)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 1543)
    # Processing the call arguments (line 1543)
    # Getting the type of 'a' (line 1543)
    a_154479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 64), 'a', False)
    # Obtaining the member 'ndim' of a type (line 1543)
    ndim_154480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 64), a_154479, 'ndim')
    # Processing the call keyword arguments (line 1543)
    kwargs_154481 = {}
    # Getting the type of 'range' (line 1543)
    range_154478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 58), 'range', False)
    # Calling range(args, kwargs) (line 1543)
    range_call_result_154482 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 58), range_154478, *[ndim_154480], **kwargs_154481)
    
    comprehension_154483 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 19), range_call_result_154482)
    # Assigning a type to the variable 'i' (line 1543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 19), 'i', comprehension_154483)
    
    # Call to compressed(...): (line 1543)
    # Processing the call keyword arguments (line 1543)
    kwargs_154476 = {}
    
    # Call to max(...): (line 1543)
    # Processing the call arguments (line 1543)
    # Getting the type of 'axis' (line 1543)
    axis_154472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 30), 'axis', False)
    # Processing the call keyword arguments (line 1543)
    kwargs_154473 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1543)
    i_154467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 23), 'i', False)
    # Getting the type of 'idx' (line 1543)
    idx_154468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 19), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 1543)
    getitem___154469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 19), idx_154468, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1543)
    subscript_call_result_154470 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 19), getitem___154469, i_154467)
    
    # Obtaining the member 'max' of a type (line 1543)
    max_154471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 19), subscript_call_result_154470, 'max')
    # Calling max(args, kwargs) (line 1543)
    max_call_result_154474 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 19), max_154471, *[axis_154472], **kwargs_154473)
    
    # Obtaining the member 'compressed' of a type (line 1543)
    compressed_154475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 19), max_call_result_154474, 'compressed')
    # Calling compressed(args, kwargs) (line 1543)
    compressed_call_result_154477 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 19), compressed_154475, *[], **kwargs_154476)
    
    list_154484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1543, 19), list_154484, compressed_call_result_154477)
    # Processing the call keyword arguments (line 1543)
    kwargs_154485 = {}
    # Getting the type of 'tuple' (line 1543)
    tuple_154466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1543)
    tuple_call_result_154486 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 12), tuple_154466, *[list_154484], **kwargs_154485)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1542, 11), list_154444, tuple_call_result_154486)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'stypy_return_type', list_154444)
    
    # ################# End of 'notmasked_edges(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'notmasked_edges' in the type store
    # Getting the type of 'stypy_return_type' (line 1495)
    stypy_return_type_154487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154487)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'notmasked_edges'
    return stypy_return_type_154487

# Assigning a type to the variable 'notmasked_edges' (line 1495)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 0), 'notmasked_edges', notmasked_edges)

@norecursion
def flatnotmasked_contiguous(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'flatnotmasked_contiguous'
    module_type_store = module_type_store.open_function_context('flatnotmasked_contiguous', 1546, 0, False)
    
    # Passed parameters checking function
    flatnotmasked_contiguous.stypy_localization = localization
    flatnotmasked_contiguous.stypy_type_of_self = None
    flatnotmasked_contiguous.stypy_type_store = module_type_store
    flatnotmasked_contiguous.stypy_function_name = 'flatnotmasked_contiguous'
    flatnotmasked_contiguous.stypy_param_names_list = ['a']
    flatnotmasked_contiguous.stypy_varargs_param_name = None
    flatnotmasked_contiguous.stypy_kwargs_param_name = None
    flatnotmasked_contiguous.stypy_call_defaults = defaults
    flatnotmasked_contiguous.stypy_call_varargs = varargs
    flatnotmasked_contiguous.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'flatnotmasked_contiguous', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'flatnotmasked_contiguous', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'flatnotmasked_contiguous(...)' code ##################

    str_154488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1586, (-1)), 'str', '\n    Find contiguous unmasked data in a masked array along the given axis.\n\n    Parameters\n    ----------\n    a : narray\n        The input array.\n\n    Returns\n    -------\n    slice_list : list\n        A sorted sequence of slices (start index, end index).\n\n    See Also\n    --------\n    flatnotmasked_edges, notmasked_contiguous, notmasked_edges,\n    clump_masked, clump_unmasked\n\n    Notes\n    -----\n    Only accepts 2-D arrays at most.\n\n    Examples\n    --------\n    >>> a = np.ma.arange(10)\n    >>> np.ma.flatnotmasked_contiguous(a)\n    slice(0, 10, None)\n\n    >>> mask = (a < 3) | (a > 8) | (a == 5)\n    >>> a[mask] = np.ma.masked\n    >>> np.array(a[~a.mask])\n    array([3, 4, 6, 7, 8])\n\n    >>> np.ma.flatnotmasked_contiguous(a)\n    [slice(3, 5, None), slice(6, 9, None)]\n    >>> a[:] = np.ma.masked\n    >>> print(np.ma.flatnotmasked_edges(a))\n    None\n\n    ')
    
    # Assigning a Call to a Name (line 1587):
    
    # Assigning a Call to a Name (line 1587):
    
    # Call to getmask(...): (line 1587)
    # Processing the call arguments (line 1587)
    # Getting the type of 'a' (line 1587)
    a_154490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 16), 'a', False)
    # Processing the call keyword arguments (line 1587)
    kwargs_154491 = {}
    # Getting the type of 'getmask' (line 1587)
    getmask_154489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 1587)
    getmask_call_result_154492 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 8), getmask_154489, *[a_154490], **kwargs_154491)
    
    # Assigning a type to the variable 'm' (line 1587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 4), 'm', getmask_call_result_154492)
    
    
    # Getting the type of 'm' (line 1588)
    m_154493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 7), 'm')
    # Getting the type of 'nomask' (line 1588)
    nomask_154494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 12), 'nomask')
    # Applying the binary operator 'is' (line 1588)
    result_is__154495 = python_operator(stypy.reporting.localization.Localization(__file__, 1588, 7), 'is', m_154493, nomask_154494)
    
    # Testing the type of an if condition (line 1588)
    if_condition_154496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1588, 4), result_is__154495)
    # Assigning a type to the variable 'if_condition_154496' (line 1588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 4), 'if_condition_154496', if_condition_154496)
    # SSA begins for if statement (line 1588)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to slice(...): (line 1589)
    # Processing the call arguments (line 1589)
    int_154498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1589, 21), 'int')
    # Getting the type of 'a' (line 1589)
    a_154499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 24), 'a', False)
    # Obtaining the member 'size' of a type (line 1589)
    size_154500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 24), a_154499, 'size')
    # Getting the type of 'None' (line 1589)
    None_154501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 32), 'None', False)
    # Processing the call keyword arguments (line 1589)
    kwargs_154502 = {}
    # Getting the type of 'slice' (line 1589)
    slice_154497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 1589)
    slice_call_result_154503 = invoke(stypy.reporting.localization.Localization(__file__, 1589, 15), slice_154497, *[int_154498, size_154500, None_154501], **kwargs_154502)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 8), 'stypy_return_type', slice_call_result_154503)
    # SSA join for if statement (line 1588)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1590):
    
    # Assigning a Num to a Name (line 1590):
    int_154504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 8), 'int')
    # Assigning a type to the variable 'i' (line 1590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 4), 'i', int_154504)
    
    # Assigning a List to a Name (line 1591):
    
    # Assigning a List to a Name (line 1591):
    
    # Obtaining an instance of the builtin type 'list' (line 1591)
    list_154505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1591, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1591)
    
    # Assigning a type to the variable 'result' (line 1591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1591, 4), 'result', list_154505)
    
    
    # Call to groupby(...): (line 1592)
    # Processing the call arguments (line 1592)
    
    # Call to ravel(...): (line 1592)
    # Processing the call keyword arguments (line 1592)
    kwargs_154510 = {}
    # Getting the type of 'm' (line 1592)
    m_154508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 36), 'm', False)
    # Obtaining the member 'ravel' of a type (line 1592)
    ravel_154509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1592, 36), m_154508, 'ravel')
    # Calling ravel(args, kwargs) (line 1592)
    ravel_call_result_154511 = invoke(stypy.reporting.localization.Localization(__file__, 1592, 36), ravel_154509, *[], **kwargs_154510)
    
    # Processing the call keyword arguments (line 1592)
    kwargs_154512 = {}
    # Getting the type of 'itertools' (line 1592)
    itertools_154506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 18), 'itertools', False)
    # Obtaining the member 'groupby' of a type (line 1592)
    groupby_154507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1592, 18), itertools_154506, 'groupby')
    # Calling groupby(args, kwargs) (line 1592)
    groupby_call_result_154513 = invoke(stypy.reporting.localization.Localization(__file__, 1592, 18), groupby_154507, *[ravel_call_result_154511], **kwargs_154512)
    
    # Testing the type of a for loop iterable (line 1592)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1592, 4), groupby_call_result_154513)
    # Getting the type of the for loop variable (line 1592)
    for_loop_var_154514 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1592, 4), groupby_call_result_154513)
    # Assigning a type to the variable 'k' (line 1592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 4), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1592, 4), for_loop_var_154514))
    # Assigning a type to the variable 'g' (line 1592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 4), 'g', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1592, 4), for_loop_var_154514))
    # SSA begins for a for statement (line 1592)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1593):
    
    # Assigning a Call to a Name (line 1593):
    
    # Call to len(...): (line 1593)
    # Processing the call arguments (line 1593)
    
    # Call to list(...): (line 1593)
    # Processing the call arguments (line 1593)
    # Getting the type of 'g' (line 1593)
    g_154517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 21), 'g', False)
    # Processing the call keyword arguments (line 1593)
    kwargs_154518 = {}
    # Getting the type of 'list' (line 1593)
    list_154516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'list', False)
    # Calling list(args, kwargs) (line 1593)
    list_call_result_154519 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 16), list_154516, *[g_154517], **kwargs_154518)
    
    # Processing the call keyword arguments (line 1593)
    kwargs_154520 = {}
    # Getting the type of 'len' (line 1593)
    len_154515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 12), 'len', False)
    # Calling len(args, kwargs) (line 1593)
    len_call_result_154521 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 12), len_154515, *[list_call_result_154519], **kwargs_154520)
    
    # Assigning a type to the variable 'n' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 8), 'n', len_call_result_154521)
    
    
    # Getting the type of 'k' (line 1594)
    k_154522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 15), 'k')
    # Applying the 'not' unary operator (line 1594)
    result_not__154523 = python_operator(stypy.reporting.localization.Localization(__file__, 1594, 11), 'not', k_154522)
    
    # Testing the type of an if condition (line 1594)
    if_condition_154524 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1594, 8), result_not__154523)
    # Assigning a type to the variable 'if_condition_154524' (line 1594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 8), 'if_condition_154524', if_condition_154524)
    # SSA begins for if statement (line 1594)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1595)
    # Processing the call arguments (line 1595)
    
    # Call to slice(...): (line 1595)
    # Processing the call arguments (line 1595)
    # Getting the type of 'i' (line 1595)
    i_154528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 32), 'i', False)
    # Getting the type of 'i' (line 1595)
    i_154529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 35), 'i', False)
    # Getting the type of 'n' (line 1595)
    n_154530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 39), 'n', False)
    # Applying the binary operator '+' (line 1595)
    result_add_154531 = python_operator(stypy.reporting.localization.Localization(__file__, 1595, 35), '+', i_154529, n_154530)
    
    # Processing the call keyword arguments (line 1595)
    kwargs_154532 = {}
    # Getting the type of 'slice' (line 1595)
    slice_154527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 26), 'slice', False)
    # Calling slice(args, kwargs) (line 1595)
    slice_call_result_154533 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 26), slice_154527, *[i_154528, result_add_154531], **kwargs_154532)
    
    # Processing the call keyword arguments (line 1595)
    kwargs_154534 = {}
    # Getting the type of 'result' (line 1595)
    result_154525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 12), 'result', False)
    # Obtaining the member 'append' of a type (line 1595)
    append_154526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1595, 12), result_154525, 'append')
    # Calling append(args, kwargs) (line 1595)
    append_call_result_154535 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 12), append_154526, *[slice_call_result_154533], **kwargs_154534)
    
    # SSA join for if statement (line 1594)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'i' (line 1596)
    i_154536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 8), 'i')
    # Getting the type of 'n' (line 1596)
    n_154537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 13), 'n')
    # Applying the binary operator '+=' (line 1596)
    result_iadd_154538 = python_operator(stypy.reporting.localization.Localization(__file__, 1596, 8), '+=', i_154536, n_154537)
    # Assigning a type to the variable 'i' (line 1596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 8), 'i', result_iadd_154538)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Evaluating a boolean operation
    # Getting the type of 'result' (line 1597)
    result_154539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 11), 'result')
    # Getting the type of 'None' (line 1597)
    None_154540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 21), 'None')
    # Applying the binary operator 'or' (line 1597)
    result_or_keyword_154541 = python_operator(stypy.reporting.localization.Localization(__file__, 1597, 11), 'or', result_154539, None_154540)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1597, 4), 'stypy_return_type', result_or_keyword_154541)
    
    # ################# End of 'flatnotmasked_contiguous(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'flatnotmasked_contiguous' in the type store
    # Getting the type of 'stypy_return_type' (line 1546)
    stypy_return_type_154542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154542)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'flatnotmasked_contiguous'
    return stypy_return_type_154542

# Assigning a type to the variable 'flatnotmasked_contiguous' (line 1546)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 0), 'flatnotmasked_contiguous', flatnotmasked_contiguous)

@norecursion
def notmasked_contiguous(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1599)
    None_154543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 33), 'None')
    defaults = [None_154543]
    # Create a new context for function 'notmasked_contiguous'
    module_type_store = module_type_store.open_function_context('notmasked_contiguous', 1599, 0, False)
    
    # Passed parameters checking function
    notmasked_contiguous.stypy_localization = localization
    notmasked_contiguous.stypy_type_of_self = None
    notmasked_contiguous.stypy_type_store = module_type_store
    notmasked_contiguous.stypy_function_name = 'notmasked_contiguous'
    notmasked_contiguous.stypy_param_names_list = ['a', 'axis']
    notmasked_contiguous.stypy_varargs_param_name = None
    notmasked_contiguous.stypy_kwargs_param_name = None
    notmasked_contiguous.stypy_call_defaults = defaults
    notmasked_contiguous.stypy_call_varargs = varargs
    notmasked_contiguous.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'notmasked_contiguous', ['a', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'notmasked_contiguous', localization, ['a', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'notmasked_contiguous(...)' code ##################

    str_154544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1639, (-1)), 'str', '\n    Find contiguous unmasked data in a masked array along the given axis.\n\n    Parameters\n    ----------\n    a : array_like\n        The input array.\n    axis : int, optional\n        Axis along which to perform the operation.\n        If None (default), applies to a flattened version of the array.\n\n    Returns\n    -------\n    endpoints : list\n        A list of slices (start and end indexes) of unmasked indexes\n        in the array.\n\n    See Also\n    --------\n    flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,\n    clump_masked, clump_unmasked\n\n    Notes\n    -----\n    Only accepts 2-D arrays at most.\n\n    Examples\n    --------\n    >>> a = np.arange(9).reshape((3, 3))\n    >>> mask = np.zeros_like(a)\n    >>> mask[1:, 1:] = 1\n\n    >>> ma = np.ma.array(a, mask=mask)\n    >>> np.array(ma[~ma.mask])\n    array([0, 1, 2, 3, 6])\n\n    >>> np.ma.notmasked_contiguous(ma)\n    [slice(0, 4, None), slice(6, 7, None)]\n\n    ')
    
    # Assigning a Call to a Name (line 1640):
    
    # Assigning a Call to a Name (line 1640):
    
    # Call to asarray(...): (line 1640)
    # Processing the call arguments (line 1640)
    # Getting the type of 'a' (line 1640)
    a_154546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 16), 'a', False)
    # Processing the call keyword arguments (line 1640)
    kwargs_154547 = {}
    # Getting the type of 'asarray' (line 1640)
    asarray_154545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1640)
    asarray_call_result_154548 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 8), asarray_154545, *[a_154546], **kwargs_154547)
    
    # Assigning a type to the variable 'a' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'a', asarray_call_result_154548)
    
    # Assigning a Attribute to a Name (line 1641):
    
    # Assigning a Attribute to a Name (line 1641):
    # Getting the type of 'a' (line 1641)
    a_154549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 9), 'a')
    # Obtaining the member 'ndim' of a type (line 1641)
    ndim_154550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 9), a_154549, 'ndim')
    # Assigning a type to the variable 'nd' (line 1641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'nd', ndim_154550)
    
    
    # Getting the type of 'nd' (line 1642)
    nd_154551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 7), 'nd')
    int_154552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 12), 'int')
    # Applying the binary operator '>' (line 1642)
    result_gt_154553 = python_operator(stypy.reporting.localization.Localization(__file__, 1642, 7), '>', nd_154551, int_154552)
    
    # Testing the type of an if condition (line 1642)
    if_condition_154554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1642, 4), result_gt_154553)
    # Assigning a type to the variable 'if_condition_154554' (line 1642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 4), 'if_condition_154554', if_condition_154554)
    # SSA begins for if statement (line 1642)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to NotImplementedError(...): (line 1643)
    # Processing the call arguments (line 1643)
    str_154556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 34), 'str', 'Currently limited to atmost 2D array.')
    # Processing the call keyword arguments (line 1643)
    kwargs_154557 = {}
    # Getting the type of 'NotImplementedError' (line 1643)
    NotImplementedError_154555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1643)
    NotImplementedError_call_result_154558 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 14), NotImplementedError_154555, *[str_154556], **kwargs_154557)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1643, 8), NotImplementedError_call_result_154558, 'raise parameter', BaseException)
    # SSA join for if statement (line 1642)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 1644)
    axis_154559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 7), 'axis')
    # Getting the type of 'None' (line 1644)
    None_154560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 15), 'None')
    # Applying the binary operator 'is' (line 1644)
    result_is__154561 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 7), 'is', axis_154559, None_154560)
    
    
    # Getting the type of 'nd' (line 1644)
    nd_154562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 23), 'nd')
    int_154563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1644, 29), 'int')
    # Applying the binary operator '==' (line 1644)
    result_eq_154564 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 23), '==', nd_154562, int_154563)
    
    # Applying the binary operator 'or' (line 1644)
    result_or_keyword_154565 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 7), 'or', result_is__154561, result_eq_154564)
    
    # Testing the type of an if condition (line 1644)
    if_condition_154566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1644, 4), result_or_keyword_154565)
    # Assigning a type to the variable 'if_condition_154566' (line 1644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 4), 'if_condition_154566', if_condition_154566)
    # SSA begins for if statement (line 1644)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to flatnotmasked_contiguous(...): (line 1645)
    # Processing the call arguments (line 1645)
    # Getting the type of 'a' (line 1645)
    a_154568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 40), 'a', False)
    # Processing the call keyword arguments (line 1645)
    kwargs_154569 = {}
    # Getting the type of 'flatnotmasked_contiguous' (line 1645)
    flatnotmasked_contiguous_154567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 15), 'flatnotmasked_contiguous', False)
    # Calling flatnotmasked_contiguous(args, kwargs) (line 1645)
    flatnotmasked_contiguous_call_result_154570 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 15), flatnotmasked_contiguous_154567, *[a_154568], **kwargs_154569)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'stypy_return_type', flatnotmasked_contiguous_call_result_154570)
    # SSA join for if statement (line 1644)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 1647):
    
    # Assigning a List to a Name (line 1647):
    
    # Obtaining an instance of the builtin type 'list' (line 1647)
    list_154571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1647)
    
    # Assigning a type to the variable 'result' (line 1647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 4), 'result', list_154571)
    
    # Assigning a BinOp to a Name (line 1649):
    
    # Assigning a BinOp to a Name (line 1649):
    # Getting the type of 'axis' (line 1649)
    axis_154572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 13), 'axis')
    int_154573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 20), 'int')
    # Applying the binary operator '+' (line 1649)
    result_add_154574 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 13), '+', axis_154572, int_154573)
    
    int_154575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 25), 'int')
    # Applying the binary operator '%' (line 1649)
    result_mod_154576 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 12), '%', result_add_154574, int_154575)
    
    # Assigning a type to the variable 'other' (line 1649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 4), 'other', result_mod_154576)
    
    # Assigning a List to a Name (line 1650):
    
    # Assigning a List to a Name (line 1650):
    
    # Obtaining an instance of the builtin type 'list' (line 1650)
    list_154577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1650)
    # Adding element type (line 1650)
    int_154578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 11), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 10), list_154577, int_154578)
    # Adding element type (line 1650)
    int_154579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1650, 10), list_154577, int_154579)
    
    # Assigning a type to the variable 'idx' (line 1650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 4), 'idx', list_154577)
    
    # Assigning a Call to a Subscript (line 1651):
    
    # Assigning a Call to a Subscript (line 1651):
    
    # Call to slice(...): (line 1651)
    # Processing the call arguments (line 1651)
    # Getting the type of 'None' (line 1651)
    None_154581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 22), 'None', False)
    # Getting the type of 'None' (line 1651)
    None_154582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 28), 'None', False)
    # Processing the call keyword arguments (line 1651)
    kwargs_154583 = {}
    # Getting the type of 'slice' (line 1651)
    slice_154580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 16), 'slice', False)
    # Calling slice(args, kwargs) (line 1651)
    slice_call_result_154584 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 16), slice_154580, *[None_154581, None_154582], **kwargs_154583)
    
    # Getting the type of 'idx' (line 1651)
    idx_154585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 4), 'idx')
    # Getting the type of 'axis' (line 1651)
    axis_154586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 8), 'axis')
    # Storing an element on a container (line 1651)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 4), idx_154585, (axis_154586, slice_call_result_154584))
    
    
    # Call to range(...): (line 1653)
    # Processing the call arguments (line 1653)
    
    # Obtaining the type of the subscript
    # Getting the type of 'other' (line 1653)
    other_154588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 27), 'other', False)
    # Getting the type of 'a' (line 1653)
    a_154589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 19), 'a', False)
    # Obtaining the member 'shape' of a type (line 1653)
    shape_154590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 19), a_154589, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1653)
    getitem___154591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 19), shape_154590, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1653)
    subscript_call_result_154592 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 19), getitem___154591, other_154588)
    
    # Processing the call keyword arguments (line 1653)
    kwargs_154593 = {}
    # Getting the type of 'range' (line 1653)
    range_154587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 13), 'range', False)
    # Calling range(args, kwargs) (line 1653)
    range_call_result_154594 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 13), range_154587, *[subscript_call_result_154592], **kwargs_154593)
    
    # Testing the type of a for loop iterable (line 1653)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1653, 4), range_call_result_154594)
    # Getting the type of the for loop variable (line 1653)
    for_loop_var_154595 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1653, 4), range_call_result_154594)
    # Assigning a type to the variable 'i' (line 1653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 4), 'i', for_loop_var_154595)
    # SSA begins for a for statement (line 1653)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Name to a Subscript (line 1654):
    
    # Assigning a Name to a Subscript (line 1654):
    # Getting the type of 'i' (line 1654)
    i_154596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 21), 'i')
    # Getting the type of 'idx' (line 1654)
    idx_154597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'idx')
    # Getting the type of 'other' (line 1654)
    other_154598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 12), 'other')
    # Storing an element on a container (line 1654)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1654, 8), idx_154597, (other_154598, i_154596))
    
    # Call to append(...): (line 1655)
    # Processing the call arguments (line 1655)
    
    # Evaluating a boolean operation
    
    # Call to flatnotmasked_contiguous(...): (line 1655)
    # Processing the call arguments (line 1655)
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1655)
    idx_154602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 49), 'idx', False)
    # Getting the type of 'a' (line 1655)
    a_154603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 47), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1655)
    getitem___154604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 47), a_154603, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1655)
    subscript_call_result_154605 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 47), getitem___154604, idx_154602)
    
    # Processing the call keyword arguments (line 1655)
    kwargs_154606 = {}
    # Getting the type of 'flatnotmasked_contiguous' (line 1655)
    flatnotmasked_contiguous_154601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 22), 'flatnotmasked_contiguous', False)
    # Calling flatnotmasked_contiguous(args, kwargs) (line 1655)
    flatnotmasked_contiguous_call_result_154607 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 22), flatnotmasked_contiguous_154601, *[subscript_call_result_154605], **kwargs_154606)
    
    # Getting the type of 'None' (line 1655)
    None_154608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 58), 'None', False)
    # Applying the binary operator 'or' (line 1655)
    result_or_keyword_154609 = python_operator(stypy.reporting.localization.Localization(__file__, 1655, 22), 'or', flatnotmasked_contiguous_call_result_154607, None_154608)
    
    # Processing the call keyword arguments (line 1655)
    kwargs_154610 = {}
    # Getting the type of 'result' (line 1655)
    result_154599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 8), 'result', False)
    # Obtaining the member 'append' of a type (line 1655)
    append_154600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 8), result_154599, 'append')
    # Calling append(args, kwargs) (line 1655)
    append_call_result_154611 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 8), append_154600, *[result_or_keyword_154609], **kwargs_154610)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 1656)
    result_154612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 4), 'stypy_return_type', result_154612)
    
    # ################# End of 'notmasked_contiguous(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'notmasked_contiguous' in the type store
    # Getting the type of 'stypy_return_type' (line 1599)
    stypy_return_type_154613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154613)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'notmasked_contiguous'
    return stypy_return_type_154613

# Assigning a type to the variable 'notmasked_contiguous' (line 1599)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 0), 'notmasked_contiguous', notmasked_contiguous)

@norecursion
def _ezclump(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_ezclump'
    module_type_store = module_type_store.open_function_context('_ezclump', 1659, 0, False)
    
    # Passed parameters checking function
    _ezclump.stypy_localization = localization
    _ezclump.stypy_type_of_self = None
    _ezclump.stypy_type_store = module_type_store
    _ezclump.stypy_function_name = '_ezclump'
    _ezclump.stypy_param_names_list = ['mask']
    _ezclump.stypy_varargs_param_name = None
    _ezclump.stypy_kwargs_param_name = None
    _ezclump.stypy_call_defaults = defaults
    _ezclump.stypy_call_varargs = varargs
    _ezclump.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_ezclump', ['mask'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_ezclump', localization, ['mask'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_ezclump(...)' code ##################

    str_154614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, (-1)), 'str', '\n    Finds the clumps (groups of data with the same values) for a 1D bool array.\n\n    Returns a series of slices.\n    ')
    
    
    # Getting the type of 'mask' (line 1665)
    mask_154615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 7), 'mask')
    # Obtaining the member 'ndim' of a type (line 1665)
    ndim_154616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 7), mask_154615, 'ndim')
    int_154617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 19), 'int')
    # Applying the binary operator '>' (line 1665)
    result_gt_154618 = python_operator(stypy.reporting.localization.Localization(__file__, 1665, 7), '>', ndim_154616, int_154617)
    
    # Testing the type of an if condition (line 1665)
    if_condition_154619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1665, 4), result_gt_154618)
    # Assigning a type to the variable 'if_condition_154619' (line 1665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 4), 'if_condition_154619', if_condition_154619)
    # SSA begins for if statement (line 1665)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1666):
    
    # Assigning a Call to a Name (line 1666):
    
    # Call to ravel(...): (line 1666)
    # Processing the call keyword arguments (line 1666)
    kwargs_154622 = {}
    # Getting the type of 'mask' (line 1666)
    mask_154620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 15), 'mask', False)
    # Obtaining the member 'ravel' of a type (line 1666)
    ravel_154621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 15), mask_154620, 'ravel')
    # Calling ravel(args, kwargs) (line 1666)
    ravel_call_result_154623 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 15), ravel_154621, *[], **kwargs_154622)
    
    # Assigning a type to the variable 'mask' (line 1666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 8), 'mask', ravel_call_result_154623)
    # SSA join for if statement (line 1665)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1667):
    
    # Assigning a Call to a Name (line 1667):
    
    # Call to nonzero(...): (line 1667)
    # Processing the call keyword arguments (line 1667)
    kwargs_154636 = {}
    
    # Obtaining the type of the subscript
    int_154624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 16), 'int')
    slice_154625 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1667, 11), int_154624, None, None)
    # Getting the type of 'mask' (line 1667)
    mask_154626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 11), 'mask', False)
    # Obtaining the member '__getitem__' of a type (line 1667)
    getitem___154627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 11), mask_154626, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1667)
    subscript_call_result_154628 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 11), getitem___154627, slice_154625)
    
    
    # Obtaining the type of the subscript
    int_154629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 28), 'int')
    slice_154630 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1667, 22), None, int_154629, None)
    # Getting the type of 'mask' (line 1667)
    mask_154631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 22), 'mask', False)
    # Obtaining the member '__getitem__' of a type (line 1667)
    getitem___154632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 22), mask_154631, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1667)
    subscript_call_result_154633 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 22), getitem___154632, slice_154630)
    
    # Applying the binary operator '^' (line 1667)
    result_xor_154634 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 11), '^', subscript_call_result_154628, subscript_call_result_154633)
    
    # Obtaining the member 'nonzero' of a type (line 1667)
    nonzero_154635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 11), result_xor_154634, 'nonzero')
    # Calling nonzero(args, kwargs) (line 1667)
    nonzero_call_result_154637 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 11), nonzero_154635, *[], **kwargs_154636)
    
    # Assigning a type to the variable 'idx' (line 1667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'idx', nonzero_call_result_154637)
    
    # Assigning a BinOp to a Name (line 1668):
    
    # Assigning a BinOp to a Name (line 1668):
    
    # Obtaining the type of the subscript
    int_154638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 14), 'int')
    # Getting the type of 'idx' (line 1668)
    idx_154639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 10), 'idx')
    # Obtaining the member '__getitem__' of a type (line 1668)
    getitem___154640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 10), idx_154639, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1668)
    subscript_call_result_154641 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 10), getitem___154640, int_154638)
    
    int_154642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 19), 'int')
    # Applying the binary operator '+' (line 1668)
    result_add_154643 = python_operator(stypy.reporting.localization.Localization(__file__, 1668, 10), '+', subscript_call_result_154641, int_154642)
    
    # Assigning a type to the variable 'idx' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'idx', result_add_154643)
    
    
    # Obtaining the type of the subscript
    int_154644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 12), 'int')
    # Getting the type of 'mask' (line 1670)
    mask_154645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 7), 'mask')
    # Obtaining the member '__getitem__' of a type (line 1670)
    getitem___154646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1670, 7), mask_154645, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1670)
    subscript_call_result_154647 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 7), getitem___154646, int_154644)
    
    # Testing the type of an if condition (line 1670)
    if_condition_154648 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1670, 4), subscript_call_result_154647)
    # Assigning a type to the variable 'if_condition_154648' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), 'if_condition_154648', if_condition_154648)
    # SSA begins for if statement (line 1670)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to len(...): (line 1671)
    # Processing the call arguments (line 1671)
    # Getting the type of 'idx' (line 1671)
    idx_154650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 15), 'idx', False)
    # Processing the call keyword arguments (line 1671)
    kwargs_154651 = {}
    # Getting the type of 'len' (line 1671)
    len_154649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 11), 'len', False)
    # Calling len(args, kwargs) (line 1671)
    len_call_result_154652 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 11), len_154649, *[idx_154650], **kwargs_154651)
    
    int_154653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 23), 'int')
    # Applying the binary operator '==' (line 1671)
    result_eq_154654 = python_operator(stypy.reporting.localization.Localization(__file__, 1671, 11), '==', len_call_result_154652, int_154653)
    
    # Testing the type of an if condition (line 1671)
    if_condition_154655 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1671, 8), result_eq_154654)
    # Assigning a type to the variable 'if_condition_154655' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'if_condition_154655', if_condition_154655)
    # SSA begins for if statement (line 1671)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 1672)
    list_154656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1672)
    # Adding element type (line 1672)
    
    # Call to slice(...): (line 1672)
    # Processing the call arguments (line 1672)
    int_154658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 26), 'int')
    # Getting the type of 'mask' (line 1672)
    mask_154659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 29), 'mask', False)
    # Obtaining the member 'size' of a type (line 1672)
    size_154660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 29), mask_154659, 'size')
    # Processing the call keyword arguments (line 1672)
    kwargs_154661 = {}
    # Getting the type of 'slice' (line 1672)
    slice_154657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 20), 'slice', False)
    # Calling slice(args, kwargs) (line 1672)
    slice_call_result_154662 = invoke(stypy.reporting.localization.Localization(__file__, 1672, 20), slice_154657, *[int_154658, size_154660], **kwargs_154661)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1672, 19), list_154656, slice_call_result_154662)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 12), 'stypy_return_type', list_154656)
    # SSA join for if statement (line 1671)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 1674):
    
    # Assigning a List to a Name (line 1674):
    
    # Obtaining an instance of the builtin type 'list' (line 1674)
    list_154663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1674)
    # Adding element type (line 1674)
    
    # Call to slice(...): (line 1674)
    # Processing the call arguments (line 1674)
    int_154665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 19), 'int')
    
    # Obtaining the type of the subscript
    int_154666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 26), 'int')
    # Getting the type of 'idx' (line 1674)
    idx_154667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 22), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 1674)
    getitem___154668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 22), idx_154667, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1674)
    subscript_call_result_154669 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 22), getitem___154668, int_154666)
    
    # Processing the call keyword arguments (line 1674)
    kwargs_154670 = {}
    # Getting the type of 'slice' (line 1674)
    slice_154664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 13), 'slice', False)
    # Calling slice(args, kwargs) (line 1674)
    slice_call_result_154671 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 13), slice_154664, *[int_154665, subscript_call_result_154669], **kwargs_154670)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 12), list_154663, slice_call_result_154671)
    
    # Assigning a type to the variable 'r' (line 1674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 8), 'r', list_154663)
    
    # Call to extend(...): (line 1675)
    # Processing the call arguments (line 1675)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1675, 18, True)
    # Calculating comprehension expression
    
    # Call to zip(...): (line 1676)
    # Processing the call arguments (line 1676)
    
    # Obtaining the type of the subscript
    int_154680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 45), 'int')
    int_154681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 47), 'int')
    int_154682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 50), 'int')
    slice_154683 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1676, 41), int_154680, int_154681, int_154682)
    # Getting the type of 'idx' (line 1676)
    idx_154684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 41), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 1676)
    getitem___154685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 41), idx_154684, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1676)
    subscript_call_result_154686 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 41), getitem___154685, slice_154683)
    
    
    # Obtaining the type of the subscript
    int_154687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 58), 'int')
    int_154688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 61), 'int')
    slice_154689 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1676, 54), int_154687, None, int_154688)
    # Getting the type of 'idx' (line 1676)
    idx_154690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 54), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 1676)
    getitem___154691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 54), idx_154690, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1676)
    subscript_call_result_154692 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 54), getitem___154691, slice_154689)
    
    # Processing the call keyword arguments (line 1676)
    kwargs_154693 = {}
    # Getting the type of 'zip' (line 1676)
    zip_154679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 37), 'zip', False)
    # Calling zip(args, kwargs) (line 1676)
    zip_call_result_154694 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 37), zip_154679, *[subscript_call_result_154686, subscript_call_result_154692], **kwargs_154693)
    
    comprehension_154695 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1675, 18), zip_call_result_154694)
    # Assigning a type to the variable 'left' (line 1675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 18), 'left', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1675, 18), comprehension_154695))
    # Assigning a type to the variable 'right' (line 1675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 18), 'right', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1675, 18), comprehension_154695))
    
    # Call to slice(...): (line 1675)
    # Processing the call arguments (line 1675)
    # Getting the type of 'left' (line 1675)
    left_154675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 24), 'left', False)
    # Getting the type of 'right' (line 1675)
    right_154676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 30), 'right', False)
    # Processing the call keyword arguments (line 1675)
    kwargs_154677 = {}
    # Getting the type of 'slice' (line 1675)
    slice_154674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 18), 'slice', False)
    # Calling slice(args, kwargs) (line 1675)
    slice_call_result_154678 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 18), slice_154674, *[left_154675, right_154676], **kwargs_154677)
    
    list_154696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 18), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1675, 18), list_154696, slice_call_result_154678)
    # Processing the call keyword arguments (line 1675)
    kwargs_154697 = {}
    # Getting the type of 'r' (line 1675)
    r_154672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 8), 'r', False)
    # Obtaining the member 'extend' of a type (line 1675)
    extend_154673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 8), r_154672, 'extend')
    # Calling extend(args, kwargs) (line 1675)
    extend_call_result_154698 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 8), extend_154673, *[list_154696], **kwargs_154697)
    
    # SSA branch for the else part of an if statement (line 1670)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 1678)
    # Processing the call arguments (line 1678)
    # Getting the type of 'idx' (line 1678)
    idx_154700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 15), 'idx', False)
    # Processing the call keyword arguments (line 1678)
    kwargs_154701 = {}
    # Getting the type of 'len' (line 1678)
    len_154699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 11), 'len', False)
    # Calling len(args, kwargs) (line 1678)
    len_call_result_154702 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 11), len_154699, *[idx_154700], **kwargs_154701)
    
    int_154703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1678, 23), 'int')
    # Applying the binary operator '==' (line 1678)
    result_eq_154704 = python_operator(stypy.reporting.localization.Localization(__file__, 1678, 11), '==', len_call_result_154702, int_154703)
    
    # Testing the type of an if condition (line 1678)
    if_condition_154705 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1678, 8), result_eq_154704)
    # Assigning a type to the variable 'if_condition_154705' (line 1678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'if_condition_154705', if_condition_154705)
    # SSA begins for if statement (line 1678)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 1679)
    list_154706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1679)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 12), 'stypy_return_type', list_154706)
    # SSA join for if statement (line 1678)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 1681):
    
    # Assigning a ListComp to a Name (line 1681):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 1681)
    # Processing the call arguments (line 1681)
    
    # Obtaining the type of the subscript
    int_154713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 60), 'int')
    int_154714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 63), 'int')
    slice_154715 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1681, 55), None, int_154713, int_154714)
    # Getting the type of 'idx' (line 1681)
    idx_154716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 55), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 1681)
    getitem___154717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 55), idx_154716, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1681)
    subscript_call_result_154718 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 55), getitem___154717, slice_154715)
    
    
    # Obtaining the type of the subscript
    int_154719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 71), 'int')
    int_154720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 74), 'int')
    slice_154721 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1681, 67), int_154719, None, int_154720)
    # Getting the type of 'idx' (line 1681)
    idx_154722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 67), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 1681)
    getitem___154723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 67), idx_154722, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1681)
    subscript_call_result_154724 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 67), getitem___154723, slice_154721)
    
    # Processing the call keyword arguments (line 1681)
    kwargs_154725 = {}
    # Getting the type of 'zip' (line 1681)
    zip_154712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 51), 'zip', False)
    # Calling zip(args, kwargs) (line 1681)
    zip_call_result_154726 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 51), zip_154712, *[subscript_call_result_154718, subscript_call_result_154724], **kwargs_154725)
    
    comprehension_154727 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 13), zip_call_result_154726)
    # Assigning a type to the variable 'left' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 13), 'left', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 13), comprehension_154727))
    # Assigning a type to the variable 'right' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 13), 'right', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 13), comprehension_154727))
    
    # Call to slice(...): (line 1681)
    # Processing the call arguments (line 1681)
    # Getting the type of 'left' (line 1681)
    left_154708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 19), 'left', False)
    # Getting the type of 'right' (line 1681)
    right_154709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 25), 'right', False)
    # Processing the call keyword arguments (line 1681)
    kwargs_154710 = {}
    # Getting the type of 'slice' (line 1681)
    slice_154707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 13), 'slice', False)
    # Calling slice(args, kwargs) (line 1681)
    slice_call_result_154711 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 13), slice_154707, *[left_154708, right_154709], **kwargs_154710)
    
    list_154728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 13), list_154728, slice_call_result_154711)
    # Assigning a type to the variable 'r' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 8), 'r', list_154728)
    # SSA join for if statement (line 1670)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Obtaining the type of the subscript
    int_154729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 12), 'int')
    # Getting the type of 'mask' (line 1683)
    mask_154730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 7), 'mask')
    # Obtaining the member '__getitem__' of a type (line 1683)
    getitem___154731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 7), mask_154730, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1683)
    subscript_call_result_154732 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 7), getitem___154731, int_154729)
    
    # Testing the type of an if condition (line 1683)
    if_condition_154733 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1683, 4), subscript_call_result_154732)
    # Assigning a type to the variable 'if_condition_154733' (line 1683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 4), 'if_condition_154733', if_condition_154733)
    # SSA begins for if statement (line 1683)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1684)
    # Processing the call arguments (line 1684)
    
    # Call to slice(...): (line 1684)
    # Processing the call arguments (line 1684)
    
    # Obtaining the type of the subscript
    int_154737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 27), 'int')
    # Getting the type of 'idx' (line 1684)
    idx_154738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 23), 'idx', False)
    # Obtaining the member '__getitem__' of a type (line 1684)
    getitem___154739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 23), idx_154738, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1684)
    subscript_call_result_154740 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 23), getitem___154739, int_154737)
    
    # Getting the type of 'mask' (line 1684)
    mask_154741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 32), 'mask', False)
    # Obtaining the member 'size' of a type (line 1684)
    size_154742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 32), mask_154741, 'size')
    # Processing the call keyword arguments (line 1684)
    kwargs_154743 = {}
    # Getting the type of 'slice' (line 1684)
    slice_154736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 17), 'slice', False)
    # Calling slice(args, kwargs) (line 1684)
    slice_call_result_154744 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 17), slice_154736, *[subscript_call_result_154740, size_154742], **kwargs_154743)
    
    # Processing the call keyword arguments (line 1684)
    kwargs_154745 = {}
    # Getting the type of 'r' (line 1684)
    r_154734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 8), 'r', False)
    # Obtaining the member 'append' of a type (line 1684)
    append_154735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 8), r_154734, 'append')
    # Calling append(args, kwargs) (line 1684)
    append_call_result_154746 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 8), append_154735, *[slice_call_result_154744], **kwargs_154745)
    
    # SSA join for if statement (line 1683)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'r' (line 1685)
    r_154747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 11), 'r')
    # Assigning a type to the variable 'stypy_return_type' (line 1685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 4), 'stypy_return_type', r_154747)
    
    # ################# End of '_ezclump(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_ezclump' in the type store
    # Getting the type of 'stypy_return_type' (line 1659)
    stypy_return_type_154748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154748)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_ezclump'
    return stypy_return_type_154748

# Assigning a type to the variable '_ezclump' (line 1659)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 0), '_ezclump', _ezclump)

@norecursion
def clump_unmasked(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'clump_unmasked'
    module_type_store = module_type_store.open_function_context('clump_unmasked', 1688, 0, False)
    
    # Passed parameters checking function
    clump_unmasked.stypy_localization = localization
    clump_unmasked.stypy_type_of_self = None
    clump_unmasked.stypy_type_store = module_type_store
    clump_unmasked.stypy_function_name = 'clump_unmasked'
    clump_unmasked.stypy_param_names_list = ['a']
    clump_unmasked.stypy_varargs_param_name = None
    clump_unmasked.stypy_kwargs_param_name = None
    clump_unmasked.stypy_call_defaults = defaults
    clump_unmasked.stypy_call_varargs = varargs
    clump_unmasked.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'clump_unmasked', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'clump_unmasked', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'clump_unmasked(...)' code ##################

    str_154749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, (-1)), 'str', '\n    Return list of slices corresponding to the unmasked clumps of a 1-D array.\n    (A "clump" is defined as a contiguous region of the array).\n\n    Parameters\n    ----------\n    a : ndarray\n        A one-dimensional masked array.\n\n    Returns\n    -------\n    slices : list of slice\n        The list of slices, one for each continuous region of unmasked\n        elements in `a`.\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    See Also\n    --------\n    flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,\n    notmasked_contiguous, clump_masked\n\n    Examples\n    --------\n    >>> a = np.ma.masked_array(np.arange(10))\n    >>> a[[0, 1, 2, 6, 8, 9]] = np.ma.masked\n    >>> np.ma.clump_unmasked(a)\n    [slice(3, 6, None), slice(7, 8, None)]\n\n    ')
    
    # Assigning a Call to a Name (line 1721):
    
    # Assigning a Call to a Name (line 1721):
    
    # Call to getattr(...): (line 1721)
    # Processing the call arguments (line 1721)
    # Getting the type of 'a' (line 1721)
    a_154751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 19), 'a', False)
    str_154752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 22), 'str', '_mask')
    # Getting the type of 'nomask' (line 1721)
    nomask_154753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 31), 'nomask', False)
    # Processing the call keyword arguments (line 1721)
    kwargs_154754 = {}
    # Getting the type of 'getattr' (line 1721)
    getattr_154750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 11), 'getattr', False)
    # Calling getattr(args, kwargs) (line 1721)
    getattr_call_result_154755 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 11), getattr_154750, *[a_154751, str_154752, nomask_154753], **kwargs_154754)
    
    # Assigning a type to the variable 'mask' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 4), 'mask', getattr_call_result_154755)
    
    
    # Getting the type of 'mask' (line 1722)
    mask_154756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 7), 'mask')
    # Getting the type of 'nomask' (line 1722)
    nomask_154757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 15), 'nomask')
    # Applying the binary operator 'is' (line 1722)
    result_is__154758 = python_operator(stypy.reporting.localization.Localization(__file__, 1722, 7), 'is', mask_154756, nomask_154757)
    
    # Testing the type of an if condition (line 1722)
    if_condition_154759 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1722, 4), result_is__154758)
    # Assigning a type to the variable 'if_condition_154759' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'if_condition_154759', if_condition_154759)
    # SSA begins for if statement (line 1722)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 1723)
    list_154760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1723)
    # Adding element type (line 1723)
    
    # Call to slice(...): (line 1723)
    # Processing the call arguments (line 1723)
    int_154762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 22), 'int')
    # Getting the type of 'a' (line 1723)
    a_154763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 25), 'a', False)
    # Obtaining the member 'size' of a type (line 1723)
    size_154764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 25), a_154763, 'size')
    # Processing the call keyword arguments (line 1723)
    kwargs_154765 = {}
    # Getting the type of 'slice' (line 1723)
    slice_154761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 16), 'slice', False)
    # Calling slice(args, kwargs) (line 1723)
    slice_call_result_154766 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 16), slice_154761, *[int_154762, size_154764], **kwargs_154765)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1723, 15), list_154760, slice_call_result_154766)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 8), 'stypy_return_type', list_154760)
    # SSA join for if statement (line 1722)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _ezclump(...): (line 1724)
    # Processing the call arguments (line 1724)
    
    # Getting the type of 'mask' (line 1724)
    mask_154768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 21), 'mask', False)
    # Applying the '~' unary operator (line 1724)
    result_inv_154769 = python_operator(stypy.reporting.localization.Localization(__file__, 1724, 20), '~', mask_154768)
    
    # Processing the call keyword arguments (line 1724)
    kwargs_154770 = {}
    # Getting the type of '_ezclump' (line 1724)
    _ezclump_154767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 11), '_ezclump', False)
    # Calling _ezclump(args, kwargs) (line 1724)
    _ezclump_call_result_154771 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 11), _ezclump_154767, *[result_inv_154769], **kwargs_154770)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'stypy_return_type', _ezclump_call_result_154771)
    
    # ################# End of 'clump_unmasked(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'clump_unmasked' in the type store
    # Getting the type of 'stypy_return_type' (line 1688)
    stypy_return_type_154772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154772)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'clump_unmasked'
    return stypy_return_type_154772

# Assigning a type to the variable 'clump_unmasked' (line 1688)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 0), 'clump_unmasked', clump_unmasked)

@norecursion
def clump_masked(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'clump_masked'
    module_type_store = module_type_store.open_function_context('clump_masked', 1727, 0, False)
    
    # Passed parameters checking function
    clump_masked.stypy_localization = localization
    clump_masked.stypy_type_of_self = None
    clump_masked.stypy_type_store = module_type_store
    clump_masked.stypy_function_name = 'clump_masked'
    clump_masked.stypy_param_names_list = ['a']
    clump_masked.stypy_varargs_param_name = None
    clump_masked.stypy_kwargs_param_name = None
    clump_masked.stypy_call_defaults = defaults
    clump_masked.stypy_call_varargs = varargs
    clump_masked.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'clump_masked', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'clump_masked', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'clump_masked(...)' code ##################

    str_154773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1759, (-1)), 'str', '\n    Returns a list of slices corresponding to the masked clumps of a 1-D array.\n    (A "clump" is defined as a contiguous region of the array).\n\n    Parameters\n    ----------\n    a : ndarray\n        A one-dimensional masked array.\n\n    Returns\n    -------\n    slices : list of slice\n        The list of slices, one for each continuous region of masked elements\n        in `a`.\n\n    Notes\n    -----\n    .. versionadded:: 1.4.0\n\n    See Also\n    --------\n    flatnotmasked_edges, flatnotmasked_contiguous, notmasked_edges,\n    notmasked_contiguous, clump_unmasked\n\n    Examples\n    --------\n    >>> a = np.ma.masked_array(np.arange(10))\n    >>> a[[0, 1, 2, 6, 8, 9]] = np.ma.masked\n    >>> np.ma.clump_masked(a)\n    [slice(0, 3, None), slice(6, 7, None), slice(8, 10, None)]\n\n    ')
    
    # Assigning a Call to a Name (line 1760):
    
    # Assigning a Call to a Name (line 1760):
    
    # Call to getmask(...): (line 1760)
    # Processing the call arguments (line 1760)
    # Getting the type of 'a' (line 1760)
    a_154776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 22), 'a', False)
    # Processing the call keyword arguments (line 1760)
    kwargs_154777 = {}
    # Getting the type of 'ma' (line 1760)
    ma_154774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1760, 11), 'ma', False)
    # Obtaining the member 'getmask' of a type (line 1760)
    getmask_154775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1760, 11), ma_154774, 'getmask')
    # Calling getmask(args, kwargs) (line 1760)
    getmask_call_result_154778 = invoke(stypy.reporting.localization.Localization(__file__, 1760, 11), getmask_154775, *[a_154776], **kwargs_154777)
    
    # Assigning a type to the variable 'mask' (line 1760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1760, 4), 'mask', getmask_call_result_154778)
    
    
    # Getting the type of 'mask' (line 1761)
    mask_154779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 7), 'mask')
    # Getting the type of 'nomask' (line 1761)
    nomask_154780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 15), 'nomask')
    # Applying the binary operator 'is' (line 1761)
    result_is__154781 = python_operator(stypy.reporting.localization.Localization(__file__, 1761, 7), 'is', mask_154779, nomask_154780)
    
    # Testing the type of an if condition (line 1761)
    if_condition_154782 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1761, 4), result_is__154781)
    # Assigning a type to the variable 'if_condition_154782' (line 1761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1761, 4), 'if_condition_154782', if_condition_154782)
    # SSA begins for if statement (line 1761)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 1762)
    list_154783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1762)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'stypy_return_type', list_154783)
    # SSA join for if statement (line 1761)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _ezclump(...): (line 1763)
    # Processing the call arguments (line 1763)
    # Getting the type of 'mask' (line 1763)
    mask_154785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 20), 'mask', False)
    # Processing the call keyword arguments (line 1763)
    kwargs_154786 = {}
    # Getting the type of '_ezclump' (line 1763)
    _ezclump_154784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 11), '_ezclump', False)
    # Calling _ezclump(args, kwargs) (line 1763)
    _ezclump_call_result_154787 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 11), _ezclump_154784, *[mask_154785], **kwargs_154786)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'stypy_return_type', _ezclump_call_result_154787)
    
    # ################# End of 'clump_masked(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'clump_masked' in the type store
    # Getting the type of 'stypy_return_type' (line 1727)
    stypy_return_type_154788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154788)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'clump_masked'
    return stypy_return_type_154788

# Assigning a type to the variable 'clump_masked' (line 1727)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 0), 'clump_masked', clump_masked)

@norecursion
def vander(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1771)
    None_154789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 16), 'None')
    defaults = [None_154789]
    # Create a new context for function 'vander'
    module_type_store = module_type_store.open_function_context('vander', 1771, 0, False)
    
    # Passed parameters checking function
    vander.stypy_localization = localization
    vander.stypy_type_of_self = None
    vander.stypy_type_store = module_type_store
    vander.stypy_function_name = 'vander'
    vander.stypy_param_names_list = ['x', 'n']
    vander.stypy_varargs_param_name = None
    vander.stypy_kwargs_param_name = None
    vander.stypy_call_defaults = defaults
    vander.stypy_call_varargs = varargs
    vander.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'vander', ['x', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'vander', localization, ['x', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'vander(...)' code ##################

    str_154790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, (-1)), 'str', '\n    Masked values in the input array result in rows of zeros.\n\n    ')
    
    # Assigning a Call to a Name (line 1776):
    
    # Assigning a Call to a Name (line 1776):
    
    # Call to vander(...): (line 1776)
    # Processing the call arguments (line 1776)
    # Getting the type of 'x' (line 1776)
    x_154793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 24), 'x', False)
    # Getting the type of 'n' (line 1776)
    n_154794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 27), 'n', False)
    # Processing the call keyword arguments (line 1776)
    kwargs_154795 = {}
    # Getting the type of 'np' (line 1776)
    np_154791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 14), 'np', False)
    # Obtaining the member 'vander' of a type (line 1776)
    vander_154792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 14), np_154791, 'vander')
    # Calling vander(args, kwargs) (line 1776)
    vander_call_result_154796 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 14), vander_154792, *[x_154793, n_154794], **kwargs_154795)
    
    # Assigning a type to the variable '_vander' (line 1776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 4), '_vander', vander_call_result_154796)
    
    # Assigning a Call to a Name (line 1777):
    
    # Assigning a Call to a Name (line 1777):
    
    # Call to getmask(...): (line 1777)
    # Processing the call arguments (line 1777)
    # Getting the type of 'x' (line 1777)
    x_154798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 16), 'x', False)
    # Processing the call keyword arguments (line 1777)
    kwargs_154799 = {}
    # Getting the type of 'getmask' (line 1777)
    getmask_154797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 1777)
    getmask_call_result_154800 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 8), getmask_154797, *[x_154798], **kwargs_154799)
    
    # Assigning a type to the variable 'm' (line 1777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'm', getmask_call_result_154800)
    
    
    # Getting the type of 'm' (line 1778)
    m_154801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 7), 'm')
    # Getting the type of 'nomask' (line 1778)
    nomask_154802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 16), 'nomask')
    # Applying the binary operator 'isnot' (line 1778)
    result_is_not_154803 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 7), 'isnot', m_154801, nomask_154802)
    
    # Testing the type of an if condition (line 1778)
    if_condition_154804 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1778, 4), result_is_not_154803)
    # Assigning a type to the variable 'if_condition_154804' (line 1778)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 4), 'if_condition_154804', if_condition_154804)
    # SSA begins for if statement (line 1778)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Subscript (line 1779):
    
    # Assigning a Num to a Subscript (line 1779):
    int_154805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 21), 'int')
    # Getting the type of '_vander' (line 1779)
    _vander_154806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), '_vander')
    # Getting the type of 'm' (line 1779)
    m_154807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 16), 'm')
    # Storing an element on a container (line 1779)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1779, 8), _vander_154806, (m_154807, int_154805))
    # SSA join for if statement (line 1778)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of '_vander' (line 1780)
    _vander_154808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 11), '_vander')
    # Assigning a type to the variable 'stypy_return_type' (line 1780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 4), 'stypy_return_type', _vander_154808)
    
    # ################# End of 'vander(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'vander' in the type store
    # Getting the type of 'stypy_return_type' (line 1771)
    stypy_return_type_154809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154809)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'vander'
    return stypy_return_type_154809

# Assigning a type to the variable 'vander' (line 1771)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 0), 'vander', vander)

# Assigning a Call to a Attribute (line 1782):

# Assigning a Call to a Attribute (line 1782):

# Call to doc_note(...): (line 1782)
# Processing the call arguments (line 1782)
# Getting the type of 'np' (line 1782)
np_154812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 29), 'np', False)
# Obtaining the member 'vander' of a type (line 1782)
vander_154813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 29), np_154812, 'vander')
# Obtaining the member '__doc__' of a type (line 1782)
doc___154814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 29), vander_154813, '__doc__')
# Getting the type of 'vander' (line 1782)
vander_154815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 48), 'vander', False)
# Obtaining the member '__doc__' of a type (line 1782)
doc___154816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 48), vander_154815, '__doc__')
# Processing the call keyword arguments (line 1782)
kwargs_154817 = {}
# Getting the type of 'ma' (line 1782)
ma_154810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 17), 'ma', False)
# Obtaining the member 'doc_note' of a type (line 1782)
doc_note_154811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 17), ma_154810, 'doc_note')
# Calling doc_note(args, kwargs) (line 1782)
doc_note_call_result_154818 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 17), doc_note_154811, *[doc___154814, doc___154816], **kwargs_154817)

# Getting the type of 'vander' (line 1782)
vander_154819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 0), 'vander')
# Setting the type of the member '__doc__' of a type (line 1782)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 0), vander_154819, '__doc__', doc_note_call_result_154818)

@norecursion
def polyfit(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1785)
    None_154820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 29), 'None')
    # Getting the type of 'False' (line 1785)
    False_154821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 40), 'False')
    # Getting the type of 'None' (line 1785)
    None_154822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 49), 'None')
    # Getting the type of 'False' (line 1785)
    False_154823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 59), 'False')
    defaults = [None_154820, False_154821, None_154822, False_154823]
    # Create a new context for function 'polyfit'
    module_type_store = module_type_store.open_function_context('polyfit', 1785, 0, False)
    
    # Passed parameters checking function
    polyfit.stypy_localization = localization
    polyfit.stypy_type_of_self = None
    polyfit.stypy_type_store = module_type_store
    polyfit.stypy_function_name = 'polyfit'
    polyfit.stypy_param_names_list = ['x', 'y', 'deg', 'rcond', 'full', 'w', 'cov']
    polyfit.stypy_varargs_param_name = None
    polyfit.stypy_kwargs_param_name = None
    polyfit.stypy_call_defaults = defaults
    polyfit.stypy_call_varargs = varargs
    polyfit.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'polyfit', ['x', 'y', 'deg', 'rcond', 'full', 'w', 'cov'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'polyfit', localization, ['x', 'y', 'deg', 'rcond', 'full', 'w', 'cov'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'polyfit(...)' code ##################

    str_154824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, (-1)), 'str', '\n    Any masked values in x is propagated in y, and vice-versa.\n\n    ')
    
    # Assigning a Call to a Name (line 1790):
    
    # Assigning a Call to a Name (line 1790):
    
    # Call to asarray(...): (line 1790)
    # Processing the call arguments (line 1790)
    # Getting the type of 'x' (line 1790)
    x_154826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 16), 'x', False)
    # Processing the call keyword arguments (line 1790)
    kwargs_154827 = {}
    # Getting the type of 'asarray' (line 1790)
    asarray_154825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1790)
    asarray_call_result_154828 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 8), asarray_154825, *[x_154826], **kwargs_154827)
    
    # Assigning a type to the variable 'x' (line 1790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 4), 'x', asarray_call_result_154828)
    
    # Assigning a Call to a Name (line 1791):
    
    # Assigning a Call to a Name (line 1791):
    
    # Call to asarray(...): (line 1791)
    # Processing the call arguments (line 1791)
    # Getting the type of 'y' (line 1791)
    y_154830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 16), 'y', False)
    # Processing the call keyword arguments (line 1791)
    kwargs_154831 = {}
    # Getting the type of 'asarray' (line 1791)
    asarray_154829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1791)
    asarray_call_result_154832 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 8), asarray_154829, *[y_154830], **kwargs_154831)
    
    # Assigning a type to the variable 'y' (line 1791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 4), 'y', asarray_call_result_154832)
    
    # Assigning a Call to a Name (line 1793):
    
    # Assigning a Call to a Name (line 1793):
    
    # Call to getmask(...): (line 1793)
    # Processing the call arguments (line 1793)
    # Getting the type of 'x' (line 1793)
    x_154834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 16), 'x', False)
    # Processing the call keyword arguments (line 1793)
    kwargs_154835 = {}
    # Getting the type of 'getmask' (line 1793)
    getmask_154833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 8), 'getmask', False)
    # Calling getmask(args, kwargs) (line 1793)
    getmask_call_result_154836 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 8), getmask_154833, *[x_154834], **kwargs_154835)
    
    # Assigning a type to the variable 'm' (line 1793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 4), 'm', getmask_call_result_154836)
    
    
    # Getting the type of 'y' (line 1794)
    y_154837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 7), 'y')
    # Obtaining the member 'ndim' of a type (line 1794)
    ndim_154838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 7), y_154837, 'ndim')
    int_154839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1794, 17), 'int')
    # Applying the binary operator '==' (line 1794)
    result_eq_154840 = python_operator(stypy.reporting.localization.Localization(__file__, 1794, 7), '==', ndim_154838, int_154839)
    
    # Testing the type of an if condition (line 1794)
    if_condition_154841 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1794, 4), result_eq_154840)
    # Assigning a type to the variable 'if_condition_154841' (line 1794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1794, 4), 'if_condition_154841', if_condition_154841)
    # SSA begins for if statement (line 1794)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1795):
    
    # Assigning a Call to a Name (line 1795):
    
    # Call to mask_or(...): (line 1795)
    # Processing the call arguments (line 1795)
    # Getting the type of 'm' (line 1795)
    m_154843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 20), 'm', False)
    
    # Call to getmask(...): (line 1795)
    # Processing the call arguments (line 1795)
    # Getting the type of 'y' (line 1795)
    y_154845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 31), 'y', False)
    # Processing the call keyword arguments (line 1795)
    kwargs_154846 = {}
    # Getting the type of 'getmask' (line 1795)
    getmask_154844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 23), 'getmask', False)
    # Calling getmask(args, kwargs) (line 1795)
    getmask_call_result_154847 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 23), getmask_154844, *[y_154845], **kwargs_154846)
    
    # Processing the call keyword arguments (line 1795)
    kwargs_154848 = {}
    # Getting the type of 'mask_or' (line 1795)
    mask_or_154842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 12), 'mask_or', False)
    # Calling mask_or(args, kwargs) (line 1795)
    mask_or_call_result_154849 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 12), mask_or_154842, *[m_154843, getmask_call_result_154847], **kwargs_154848)
    
    # Assigning a type to the variable 'm' (line 1795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 8), 'm', mask_or_call_result_154849)
    # SSA branch for the else part of an if statement (line 1794)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'y' (line 1796)
    y_154850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 9), 'y')
    # Obtaining the member 'ndim' of a type (line 1796)
    ndim_154851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 9), y_154850, 'ndim')
    int_154852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 19), 'int')
    # Applying the binary operator '==' (line 1796)
    result_eq_154853 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 9), '==', ndim_154851, int_154852)
    
    # Testing the type of an if condition (line 1796)
    if_condition_154854 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1796, 9), result_eq_154853)
    # Assigning a type to the variable 'if_condition_154854' (line 1796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 9), 'if_condition_154854', if_condition_154854)
    # SSA begins for if statement (line 1796)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1797):
    
    # Assigning a Call to a Name (line 1797):
    
    # Call to getmask(...): (line 1797)
    # Processing the call arguments (line 1797)
    
    # Call to mask_rows(...): (line 1797)
    # Processing the call arguments (line 1797)
    # Getting the type of 'y' (line 1797)
    y_154857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 31), 'y', False)
    # Processing the call keyword arguments (line 1797)
    kwargs_154858 = {}
    # Getting the type of 'mask_rows' (line 1797)
    mask_rows_154856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 21), 'mask_rows', False)
    # Calling mask_rows(args, kwargs) (line 1797)
    mask_rows_call_result_154859 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 21), mask_rows_154856, *[y_154857], **kwargs_154858)
    
    # Processing the call keyword arguments (line 1797)
    kwargs_154860 = {}
    # Getting the type of 'getmask' (line 1797)
    getmask_154855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 13), 'getmask', False)
    # Calling getmask(args, kwargs) (line 1797)
    getmask_call_result_154861 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 13), getmask_154855, *[mask_rows_call_result_154859], **kwargs_154860)
    
    # Assigning a type to the variable 'my' (line 1797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 8), 'my', getmask_call_result_154861)
    
    
    # Getting the type of 'my' (line 1798)
    my_154862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 11), 'my')
    # Getting the type of 'nomask' (line 1798)
    nomask_154863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 21), 'nomask')
    # Applying the binary operator 'isnot' (line 1798)
    result_is_not_154864 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 11), 'isnot', my_154862, nomask_154863)
    
    # Testing the type of an if condition (line 1798)
    if_condition_154865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1798, 8), result_is_not_154864)
    # Assigning a type to the variable 'if_condition_154865' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'if_condition_154865', if_condition_154865)
    # SSA begins for if statement (line 1798)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1799):
    
    # Assigning a Call to a Name (line 1799):
    
    # Call to mask_or(...): (line 1799)
    # Processing the call arguments (line 1799)
    # Getting the type of 'm' (line 1799)
    m_154867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 24), 'm', False)
    
    # Obtaining the type of the subscript
    slice_154868 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1799, 27), None, None, None)
    int_154869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 33), 'int')
    # Getting the type of 'my' (line 1799)
    my_154870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 27), 'my', False)
    # Obtaining the member '__getitem__' of a type (line 1799)
    getitem___154871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1799, 27), my_154870, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1799)
    subscript_call_result_154872 = invoke(stypy.reporting.localization.Localization(__file__, 1799, 27), getitem___154871, (slice_154868, int_154869))
    
    # Processing the call keyword arguments (line 1799)
    kwargs_154873 = {}
    # Getting the type of 'mask_or' (line 1799)
    mask_or_154866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 16), 'mask_or', False)
    # Calling mask_or(args, kwargs) (line 1799)
    mask_or_call_result_154874 = invoke(stypy.reporting.localization.Localization(__file__, 1799, 16), mask_or_154866, *[m_154867, subscript_call_result_154872], **kwargs_154873)
    
    # Assigning a type to the variable 'm' (line 1799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 12), 'm', mask_or_call_result_154874)
    # SSA join for if statement (line 1798)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1796)
    module_type_store.open_ssa_branch('else')
    
    # Call to TypeError(...): (line 1801)
    # Processing the call arguments (line 1801)
    str_154876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 24), 'str', 'Expected a 1D or 2D array for y!')
    # Processing the call keyword arguments (line 1801)
    kwargs_154877 = {}
    # Getting the type of 'TypeError' (line 1801)
    TypeError_154875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1801)
    TypeError_call_result_154878 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 14), TypeError_154875, *[str_154876], **kwargs_154877)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1801, 8), TypeError_call_result_154878, 'raise parameter', BaseException)
    # SSA join for if statement (line 1796)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1794)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1803)
    # Getting the type of 'w' (line 1803)
    w_154879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 4), 'w')
    # Getting the type of 'None' (line 1803)
    None_154880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 16), 'None')
    
    (may_be_154881, more_types_in_union_154882) = may_not_be_none(w_154879, None_154880)

    if may_be_154881:

        if more_types_in_union_154882:
            # Runtime conditional SSA (line 1803)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1804):
        
        # Assigning a Call to a Name (line 1804):
        
        # Call to asarray(...): (line 1804)
        # Processing the call arguments (line 1804)
        # Getting the type of 'w' (line 1804)
        w_154884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 20), 'w', False)
        # Processing the call keyword arguments (line 1804)
        kwargs_154885 = {}
        # Getting the type of 'asarray' (line 1804)
        asarray_154883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 12), 'asarray', False)
        # Calling asarray(args, kwargs) (line 1804)
        asarray_call_result_154886 = invoke(stypy.reporting.localization.Localization(__file__, 1804, 12), asarray_154883, *[w_154884], **kwargs_154885)
        
        # Assigning a type to the variable 'w' (line 1804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 8), 'w', asarray_call_result_154886)
        
        
        # Getting the type of 'w' (line 1805)
        w_154887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 11), 'w')
        # Obtaining the member 'ndim' of a type (line 1805)
        ndim_154888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 11), w_154887, 'ndim')
        int_154889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 21), 'int')
        # Applying the binary operator '!=' (line 1805)
        result_ne_154890 = python_operator(stypy.reporting.localization.Localization(__file__, 1805, 11), '!=', ndim_154888, int_154889)
        
        # Testing the type of an if condition (line 1805)
        if_condition_154891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1805, 8), result_ne_154890)
        # Assigning a type to the variable 'if_condition_154891' (line 1805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 8), 'if_condition_154891', if_condition_154891)
        # SSA begins for if statement (line 1805)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1806)
        # Processing the call arguments (line 1806)
        str_154893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 28), 'str', 'expected a 1-d array for weights')
        # Processing the call keyword arguments (line 1806)
        kwargs_154894 = {}
        # Getting the type of 'TypeError' (line 1806)
        TypeError_154892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1806)
        TypeError_call_result_154895 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 18), TypeError_154892, *[str_154893], **kwargs_154894)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1806, 12), TypeError_call_result_154895, 'raise parameter', BaseException)
        # SSA join for if statement (line 1805)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_154896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 19), 'int')
        # Getting the type of 'w' (line 1807)
        w_154897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 11), 'w')
        # Obtaining the member 'shape' of a type (line 1807)
        shape_154898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 11), w_154897, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1807)
        getitem___154899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 11), shape_154898, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1807)
        subscript_call_result_154900 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 11), getitem___154899, int_154896)
        
        
        # Obtaining the type of the subscript
        int_154901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 33), 'int')
        # Getting the type of 'y' (line 1807)
        y_154902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 25), 'y')
        # Obtaining the member 'shape' of a type (line 1807)
        shape_154903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 25), y_154902, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1807)
        getitem___154904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 25), shape_154903, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1807)
        subscript_call_result_154905 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 25), getitem___154904, int_154901)
        
        # Applying the binary operator '!=' (line 1807)
        result_ne_154906 = python_operator(stypy.reporting.localization.Localization(__file__, 1807, 11), '!=', subscript_call_result_154900, subscript_call_result_154905)
        
        # Testing the type of an if condition (line 1807)
        if_condition_154907 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1807, 8), result_ne_154906)
        # Assigning a type to the variable 'if_condition_154907' (line 1807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 8), 'if_condition_154907', if_condition_154907)
        # SSA begins for if statement (line 1807)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1808)
        # Processing the call arguments (line 1808)
        str_154909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 28), 'str', 'expected w and y to have the same length')
        # Processing the call keyword arguments (line 1808)
        kwargs_154910 = {}
        # Getting the type of 'TypeError' (line 1808)
        TypeError_154908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1808)
        TypeError_call_result_154911 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 18), TypeError_154908, *[str_154909], **kwargs_154910)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1808, 12), TypeError_call_result_154911, 'raise parameter', BaseException)
        # SSA join for if statement (line 1807)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1809):
        
        # Assigning a Call to a Name (line 1809):
        
        # Call to mask_or(...): (line 1809)
        # Processing the call arguments (line 1809)
        # Getting the type of 'm' (line 1809)
        m_154913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 20), 'm', False)
        
        # Call to getmask(...): (line 1809)
        # Processing the call arguments (line 1809)
        # Getting the type of 'w' (line 1809)
        w_154915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 31), 'w', False)
        # Processing the call keyword arguments (line 1809)
        kwargs_154916 = {}
        # Getting the type of 'getmask' (line 1809)
        getmask_154914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 23), 'getmask', False)
        # Calling getmask(args, kwargs) (line 1809)
        getmask_call_result_154917 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 23), getmask_154914, *[w_154915], **kwargs_154916)
        
        # Processing the call keyword arguments (line 1809)
        kwargs_154918 = {}
        # Getting the type of 'mask_or' (line 1809)
        mask_or_154912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 12), 'mask_or', False)
        # Calling mask_or(args, kwargs) (line 1809)
        mask_or_call_result_154919 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 12), mask_or_154912, *[m_154913, getmask_call_result_154917], **kwargs_154918)
        
        # Assigning a type to the variable 'm' (line 1809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 8), 'm', mask_or_call_result_154919)

        if more_types_in_union_154882:
            # SSA join for if statement (line 1803)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'm' (line 1811)
    m_154920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 7), 'm')
    # Getting the type of 'nomask' (line 1811)
    nomask_154921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 16), 'nomask')
    # Applying the binary operator 'isnot' (line 1811)
    result_is_not_154922 = python_operator(stypy.reporting.localization.Localization(__file__, 1811, 7), 'isnot', m_154920, nomask_154921)
    
    # Testing the type of an if condition (line 1811)
    if_condition_154923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1811, 4), result_is_not_154922)
    # Assigning a type to the variable 'if_condition_154923' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'if_condition_154923', if_condition_154923)
    # SSA begins for if statement (line 1811)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 1812):
    
    # Assigning a UnaryOp to a Name (line 1812):
    
    # Getting the type of 'm' (line 1812)
    m_154924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 17), 'm')
    # Applying the '~' unary operator (line 1812)
    result_inv_154925 = python_operator(stypy.reporting.localization.Localization(__file__, 1812, 16), '~', m_154924)
    
    # Assigning a type to the variable 'not_m' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 8), 'not_m', result_inv_154925)
    
    # Type idiom detected: calculating its left and rigth part (line 1813)
    # Getting the type of 'w' (line 1813)
    w_154926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'w')
    # Getting the type of 'None' (line 1813)
    None_154927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 20), 'None')
    
    (may_be_154928, more_types_in_union_154929) = may_not_be_none(w_154926, None_154927)

    if may_be_154928:

        if more_types_in_union_154929:
            # Runtime conditional SSA (line 1813)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Subscript to a Name (line 1814):
        
        # Assigning a Subscript to a Name (line 1814):
        
        # Obtaining the type of the subscript
        # Getting the type of 'not_m' (line 1814)
        not_m_154930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 18), 'not_m')
        # Getting the type of 'w' (line 1814)
        w_154931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 16), 'w')
        # Obtaining the member '__getitem__' of a type (line 1814)
        getitem___154932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 16), w_154931, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1814)
        subscript_call_result_154933 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 16), getitem___154932, not_m_154930)
        
        # Assigning a type to the variable 'w' (line 1814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 12), 'w', subscript_call_result_154933)

        if more_types_in_union_154929:
            # SSA join for if statement (line 1813)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to polyfit(...): (line 1815)
    # Processing the call arguments (line 1815)
    
    # Obtaining the type of the subscript
    # Getting the type of 'not_m' (line 1815)
    not_m_154936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 28), 'not_m', False)
    # Getting the type of 'x' (line 1815)
    x_154937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 26), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 1815)
    getitem___154938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 26), x_154937, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1815)
    subscript_call_result_154939 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 26), getitem___154938, not_m_154936)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'not_m' (line 1815)
    not_m_154940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 38), 'not_m', False)
    # Getting the type of 'y' (line 1815)
    y_154941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 36), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 1815)
    getitem___154942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 36), y_154941, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1815)
    subscript_call_result_154943 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 36), getitem___154942, not_m_154940)
    
    # Getting the type of 'deg' (line 1815)
    deg_154944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 46), 'deg', False)
    # Getting the type of 'rcond' (line 1815)
    rcond_154945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 51), 'rcond', False)
    # Getting the type of 'full' (line 1815)
    full_154946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 58), 'full', False)
    # Getting the type of 'w' (line 1815)
    w_154947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 64), 'w', False)
    # Getting the type of 'cov' (line 1815)
    cov_154948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 67), 'cov', False)
    # Processing the call keyword arguments (line 1815)
    kwargs_154949 = {}
    # Getting the type of 'np' (line 1815)
    np_154934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 15), 'np', False)
    # Obtaining the member 'polyfit' of a type (line 1815)
    polyfit_154935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1815, 15), np_154934, 'polyfit')
    # Calling polyfit(args, kwargs) (line 1815)
    polyfit_call_result_154950 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 15), polyfit_154935, *[subscript_call_result_154939, subscript_call_result_154943, deg_154944, rcond_154945, full_154946, w_154947, cov_154948], **kwargs_154949)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 8), 'stypy_return_type', polyfit_call_result_154950)
    # SSA branch for the else part of an if statement (line 1811)
    module_type_store.open_ssa_branch('else')
    
    # Call to polyfit(...): (line 1817)
    # Processing the call arguments (line 1817)
    # Getting the type of 'x' (line 1817)
    x_154953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 26), 'x', False)
    # Getting the type of 'y' (line 1817)
    y_154954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 29), 'y', False)
    # Getting the type of 'deg' (line 1817)
    deg_154955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 32), 'deg', False)
    # Getting the type of 'rcond' (line 1817)
    rcond_154956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 37), 'rcond', False)
    # Getting the type of 'full' (line 1817)
    full_154957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 44), 'full', False)
    # Getting the type of 'w' (line 1817)
    w_154958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 50), 'w', False)
    # Getting the type of 'cov' (line 1817)
    cov_154959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 53), 'cov', False)
    # Processing the call keyword arguments (line 1817)
    kwargs_154960 = {}
    # Getting the type of 'np' (line 1817)
    np_154951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 15), 'np', False)
    # Obtaining the member 'polyfit' of a type (line 1817)
    polyfit_154952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 15), np_154951, 'polyfit')
    # Calling polyfit(args, kwargs) (line 1817)
    polyfit_call_result_154961 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 15), polyfit_154952, *[x_154953, y_154954, deg_154955, rcond_154956, full_154957, w_154958, cov_154959], **kwargs_154960)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 8), 'stypy_return_type', polyfit_call_result_154961)
    # SSA join for if statement (line 1811)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'polyfit(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'polyfit' in the type store
    # Getting the type of 'stypy_return_type' (line 1785)
    stypy_return_type_154962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_154962)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'polyfit'
    return stypy_return_type_154962

# Assigning a type to the variable 'polyfit' (line 1785)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 0), 'polyfit', polyfit)

# Assigning a Call to a Attribute (line 1819):

# Assigning a Call to a Attribute (line 1819):

# Call to doc_note(...): (line 1819)
# Processing the call arguments (line 1819)
# Getting the type of 'np' (line 1819)
np_154965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 30), 'np', False)
# Obtaining the member 'polyfit' of a type (line 1819)
polyfit_154966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 30), np_154965, 'polyfit')
# Obtaining the member '__doc__' of a type (line 1819)
doc___154967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 30), polyfit_154966, '__doc__')
# Getting the type of 'polyfit' (line 1819)
polyfit_154968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 50), 'polyfit', False)
# Obtaining the member '__doc__' of a type (line 1819)
doc___154969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 50), polyfit_154968, '__doc__')
# Processing the call keyword arguments (line 1819)
kwargs_154970 = {}
# Getting the type of 'ma' (line 1819)
ma_154963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 18), 'ma', False)
# Obtaining the member 'doc_note' of a type (line 1819)
doc_note_154964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 18), ma_154963, 'doc_note')
# Calling doc_note(args, kwargs) (line 1819)
doc_note_call_result_154971 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 18), doc_note_154964, *[doc___154967, doc___154969], **kwargs_154970)

# Getting the type of 'polyfit' (line 1819)
polyfit_154972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 0), 'polyfit')
# Setting the type of the member '__doc__' of a type (line 1819)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 0), polyfit_154972, '__doc__', doc_note_call_result_154971)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
