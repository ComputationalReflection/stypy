
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''Lite version of scipy.linalg.
2: 
3: Notes
4: -----
5: This module is a lite version of the linalg.py module in SciPy which
6: contains high-level Python interface to the LAPACK library.  The lite
7: version only accesses the following LAPACK functions: dgesv, zgesv,
8: dgeev, zgeev, dgesdd, zgesdd, dgelsd, zgelsd, dsyevd, zheevd, dgetrf,
9: zgetrf, dpotrf, zpotrf, dgeqrf, zgeqrf, zungqr, dorgqr.
10: '''
11: from __future__ import division, absolute_import, print_function
12: 
13: 
14: __all__ = ['matrix_power', 'solve', 'tensorsolve', 'tensorinv', 'inv',
15:            'cholesky', 'eigvals', 'eigvalsh', 'pinv', 'slogdet', 'det',
16:            'svd', 'eig', 'eigh', 'lstsq', 'norm', 'qr', 'cond', 'matrix_rank',
17:            'LinAlgError', 'multi_dot']
18: 
19: import warnings
20: 
21: from numpy.core import (
22:     array, asarray, zeros, empty, empty_like, transpose, intc, single, double,
23:     csingle, cdouble, inexact, complexfloating, newaxis, ravel, all, Inf, dot,
24:     add, multiply, sqrt, maximum, fastCopyAndTranspose, sum, isfinite, size,
25:     finfo, errstate, geterrobj, longdouble, rollaxis, amin, amax, product, abs,
26:     broadcast, atleast_2d, intp, asanyarray, isscalar
27:     )
28: from numpy.lib import triu, asfarray
29: from numpy.linalg import lapack_lite, _umath_linalg
30: from numpy.matrixlib.defmatrix import matrix_power
31: from numpy.compat import asbytes
32: 
33: # For Python2/3 compatibility
34: _N = asbytes('N')
35: _V = asbytes('V')
36: _A = asbytes('A')
37: _S = asbytes('S')
38: _L = asbytes('L')
39: 
40: fortran_int = intc
41: 
42: # Error object
43: class LinAlgError(Exception):
44:     '''
45:     Generic Python-exception-derived object raised by linalg functions.
46: 
47:     General purpose exception class, derived from Python's exception.Exception
48:     class, programmatically raised in linalg functions when a Linear
49:     Algebra-related condition would prevent further correct execution of the
50:     function.
51: 
52:     Parameters
53:     ----------
54:     None
55: 
56:     Examples
57:     --------
58:     >>> from numpy import linalg as LA
59:     >>> LA.inv(np.zeros((2,2)))
60:     Traceback (most recent call last):
61:       File "<stdin>", line 1, in <module>
62:       File "...linalg.py", line 350,
63:         in inv return wrap(solve(a, identity(a.shape[0], dtype=a.dtype)))
64:       File "...linalg.py", line 249,
65:         in solve
66:         raise LinAlgError('Singular matrix')
67:     numpy.linalg.LinAlgError: Singular matrix
68: 
69:     '''
70:     pass
71: 
72: # Dealing with errors in _umath_linalg
73: 
74: _linalg_error_extobj = None
75: 
76: def _determine_error_states():
77:     global _linalg_error_extobj
78:     errobj = geterrobj()
79:     bufsize = errobj[0]
80: 
81:     with errstate(invalid='call', over='ignore',
82:                   divide='ignore', under='ignore'):
83:         invalid_call_errmask = geterrobj()[1]
84: 
85:     _linalg_error_extobj = [bufsize, invalid_call_errmask, None]
86: 
87: _determine_error_states()
88: 
89: def _raise_linalgerror_singular(err, flag):
90:     raise LinAlgError("Singular matrix")
91: 
92: def _raise_linalgerror_nonposdef(err, flag):
93:     raise LinAlgError("Matrix is not positive definite")
94: 
95: def _raise_linalgerror_eigenvalues_nonconvergence(err, flag):
96:     raise LinAlgError("Eigenvalues did not converge")
97: 
98: def _raise_linalgerror_svd_nonconvergence(err, flag):
99:     raise LinAlgError("SVD did not converge")
100: 
101: def get_linalg_error_extobj(callback):
102:     extobj = list(_linalg_error_extobj)
103:     extobj[2] = callback
104:     return extobj
105: 
106: def _makearray(a):
107:     new = asarray(a)
108:     wrap = getattr(a, "__array_prepare__", new.__array_wrap__)
109:     return new, wrap
110: 
111: def isComplexType(t):
112:     return issubclass(t, complexfloating)
113: 
114: _real_types_map = {single : single,
115:                    double : double,
116:                    csingle : single,
117:                    cdouble : double}
118: 
119: _complex_types_map = {single : csingle,
120:                       double : cdouble,
121:                       csingle : csingle,
122:                       cdouble : cdouble}
123: 
124: def _realType(t, default=double):
125:     return _real_types_map.get(t, default)
126: 
127: def _complexType(t, default=cdouble):
128:     return _complex_types_map.get(t, default)
129: 
130: def _linalgRealType(t):
131:     '''Cast the type t to either double or cdouble.'''
132:     return double
133: 
134: _complex_types_map = {single : csingle,
135:                       double : cdouble,
136:                       csingle : csingle,
137:                       cdouble : cdouble}
138: 
139: def _commonType(*arrays):
140:     # in lite version, use higher precision (always double or cdouble)
141:     result_type = single
142:     is_complex = False
143:     for a in arrays:
144:         if issubclass(a.dtype.type, inexact):
145:             if isComplexType(a.dtype.type):
146:                 is_complex = True
147:             rt = _realType(a.dtype.type, default=None)
148:             if rt is None:
149:                 # unsupported inexact scalar
150:                 raise TypeError("array type %s is unsupported in linalg" %
151:                         (a.dtype.name,))
152:         else:
153:             rt = double
154:         if rt is double:
155:             result_type = double
156:     if is_complex:
157:         t = cdouble
158:         result_type = _complex_types_map[result_type]
159:     else:
160:         t = double
161:     return t, result_type
162: 
163: 
164: # _fastCopyAndTranpose assumes the input is 2D (as all the calls in here are).
165: 
166: _fastCT = fastCopyAndTranspose
167: 
168: def _to_native_byte_order(*arrays):
169:     ret = []
170:     for arr in arrays:
171:         if arr.dtype.byteorder not in ('=', '|'):
172:             ret.append(asarray(arr, dtype=arr.dtype.newbyteorder('=')))
173:         else:
174:             ret.append(arr)
175:     if len(ret) == 1:
176:         return ret[0]
177:     else:
178:         return ret
179: 
180: def _fastCopyAndTranspose(type, *arrays):
181:     cast_arrays = ()
182:     for a in arrays:
183:         if a.dtype.type is type:
184:             cast_arrays = cast_arrays + (_fastCT(a),)
185:         else:
186:             cast_arrays = cast_arrays + (_fastCT(a.astype(type)),)
187:     if len(cast_arrays) == 1:
188:         return cast_arrays[0]
189:     else:
190:         return cast_arrays
191: 
192: def _assertRank2(*arrays):
193:     for a in arrays:
194:         if len(a.shape) != 2:
195:             raise LinAlgError('%d-dimensional array given. Array must be '
196:                     'two-dimensional' % len(a.shape))
197: 
198: def _assertRankAtLeast2(*arrays):
199:     for a in arrays:
200:         if len(a.shape) < 2:
201:             raise LinAlgError('%d-dimensional array given. Array must be '
202:                     'at least two-dimensional' % len(a.shape))
203: 
204: def _assertSquareness(*arrays):
205:     for a in arrays:
206:         if max(a.shape) != min(a.shape):
207:             raise LinAlgError('Array must be square')
208: 
209: def _assertNdSquareness(*arrays):
210:     for a in arrays:
211:         if max(a.shape[-2:]) != min(a.shape[-2:]):
212:             raise LinAlgError('Last 2 dimensions of the array must be square')
213: 
214: def _assertFinite(*arrays):
215:     for a in arrays:
216:         if not (isfinite(a).all()):
217:             raise LinAlgError("Array must not contain infs or NaNs")
218: 
219: def _assertNoEmpty2d(*arrays):
220:     for a in arrays:
221:         if a.size == 0 and product(a.shape[-2:]) == 0:
222:             raise LinAlgError("Arrays cannot be empty")
223: 
224: 
225: # Linear equations
226: 
227: def tensorsolve(a, b, axes=None):
228:     '''
229:     Solve the tensor equation ``a x = b`` for x.
230: 
231:     It is assumed that all indices of `x` are summed over in the product,
232:     together with the rightmost indices of `a`, as is done in, for example,
233:     ``tensordot(a, x, axes=len(b.shape))``.
234: 
235:     Parameters
236:     ----------
237:     a : array_like
238:         Coefficient tensor, of shape ``b.shape + Q``. `Q`, a tuple, equals
239:         the shape of that sub-tensor of `a` consisting of the appropriate
240:         number of its rightmost indices, and must be such that
241:         ``prod(Q) == prod(b.shape)`` (in which sense `a` is said to be
242:         'square').
243:     b : array_like
244:         Right-hand tensor, which can be of any shape.
245:     axes : tuple of ints, optional
246:         Axes in `a` to reorder to the right, before inversion.
247:         If None (default), no reordering is done.
248: 
249:     Returns
250:     -------
251:     x : ndarray, shape Q
252: 
253:     Raises
254:     ------
255:     LinAlgError
256:         If `a` is singular or not 'square' (in the above sense).
257: 
258:     See Also
259:     --------
260:     tensordot, tensorinv, einsum
261: 
262:     Examples
263:     --------
264:     >>> a = np.eye(2*3*4)
265:     >>> a.shape = (2*3, 4, 2, 3, 4)
266:     >>> b = np.random.randn(2*3, 4)
267:     >>> x = np.linalg.tensorsolve(a, b)
268:     >>> x.shape
269:     (2, 3, 4)
270:     >>> np.allclose(np.tensordot(a, x, axes=3), b)
271:     True
272: 
273:     '''
274:     a, wrap = _makearray(a)
275:     b = asarray(b)
276:     an = a.ndim
277: 
278:     if axes is not None:
279:         allaxes = list(range(0, an))
280:         for k in axes:
281:             allaxes.remove(k)
282:             allaxes.insert(an, k)
283:         a = a.transpose(allaxes)
284: 
285:     oldshape = a.shape[-(an-b.ndim):]
286:     prod = 1
287:     for k in oldshape:
288:         prod *= k
289: 
290:     a = a.reshape(-1, prod)
291:     b = b.ravel()
292:     res = wrap(solve(a, b))
293:     res.shape = oldshape
294:     return res
295: 
296: def solve(a, b):
297:     '''
298:     Solve a linear matrix equation, or system of linear scalar equations.
299: 
300:     Computes the "exact" solution, `x`, of the well-determined, i.e., full
301:     rank, linear matrix equation `ax = b`.
302: 
303:     Parameters
304:     ----------
305:     a : (..., M, M) array_like
306:         Coefficient matrix.
307:     b : {(..., M,), (..., M, K)}, array_like
308:         Ordinate or "dependent variable" values.
309: 
310:     Returns
311:     -------
312:     x : {(..., M,), (..., M, K)} ndarray
313:         Solution to the system a x = b.  Returned shape is identical to `b`.
314: 
315:     Raises
316:     ------
317:     LinAlgError
318:         If `a` is singular or not square.
319: 
320:     Notes
321:     -----
322: 
323:     .. versionadded:: 1.8.0
324: 
325:     Broadcasting rules apply, see the `numpy.linalg` documentation for
326:     details.
327: 
328:     The solutions are computed using LAPACK routine _gesv
329: 
330:     `a` must be square and of full-rank, i.e., all rows (or, equivalently,
331:     columns) must be linearly independent; if either is not true, use
332:     `lstsq` for the least-squares best "solution" of the
333:     system/equation.
334: 
335:     References
336:     ----------
337:     .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,
338:            FL, Academic Press, Inc., 1980, pg. 22.
339: 
340:     Examples
341:     --------
342:     Solve the system of equations ``3 * x0 + x1 = 9`` and ``x0 + 2 * x1 = 8``:
343: 
344:     >>> a = np.array([[3,1], [1,2]])
345:     >>> b = np.array([9,8])
346:     >>> x = np.linalg.solve(a, b)
347:     >>> x
348:     array([ 2.,  3.])
349: 
350:     Check that the solution is correct:
351: 
352:     >>> np.allclose(np.dot(a, x), b)
353:     True
354: 
355:     '''
356:     a, _ = _makearray(a)
357:     _assertRankAtLeast2(a)
358:     _assertNdSquareness(a)
359:     b, wrap = _makearray(b)
360:     t, result_t = _commonType(a, b)
361: 
362:     # We use the b = (..., M,) logic, only if the number of extra dimensions
363:     # match exactly
364:     if b.ndim == a.ndim - 1:
365:         if a.shape[-1] == 0 and b.shape[-1] == 0:
366:             # Legal, but the ufunc cannot handle the 0-sized inner dims
367:             # let the ufunc handle all wrong cases.
368:             a = a.reshape(a.shape[:-1])
369:             bc = broadcast(a, b)
370:             return wrap(empty(bc.shape, dtype=result_t))
371: 
372:         gufunc = _umath_linalg.solve1
373:     else:
374:         if b.size == 0:
375:             if (a.shape[-1] == 0 and b.shape[-2] == 0) or b.shape[-1] == 0:
376:                 a = a[:,:1].reshape(a.shape[:-1] + (1,))
377:                 bc = broadcast(a, b)
378:                 return wrap(empty(bc.shape, dtype=result_t))
379: 
380:         gufunc = _umath_linalg.solve
381: 
382:     signature = 'DD->D' if isComplexType(t) else 'dd->d'
383:     extobj = get_linalg_error_extobj(_raise_linalgerror_singular)
384:     r = gufunc(a, b, signature=signature, extobj=extobj)
385: 
386:     return wrap(r.astype(result_t, copy=False))
387: 
388: 
389: def tensorinv(a, ind=2):
390:     '''
391:     Compute the 'inverse' of an N-dimensional array.
392: 
393:     The result is an inverse for `a` relative to the tensordot operation
394:     ``tensordot(a, b, ind)``, i. e., up to floating-point accuracy,
395:     ``tensordot(tensorinv(a), a, ind)`` is the "identity" tensor for the
396:     tensordot operation.
397: 
398:     Parameters
399:     ----------
400:     a : array_like
401:         Tensor to 'invert'. Its shape must be 'square', i. e.,
402:         ``prod(a.shape[:ind]) == prod(a.shape[ind:])``.
403:     ind : int, optional
404:         Number of first indices that are involved in the inverse sum.
405:         Must be a positive integer, default is 2.
406: 
407:     Returns
408:     -------
409:     b : ndarray
410:         `a`'s tensordot inverse, shape ``a.shape[ind:] + a.shape[:ind]``.
411: 
412:     Raises
413:     ------
414:     LinAlgError
415:         If `a` is singular or not 'square' (in the above sense).
416: 
417:     See Also
418:     --------
419:     tensordot, tensorsolve
420: 
421:     Examples
422:     --------
423:     >>> a = np.eye(4*6)
424:     >>> a.shape = (4, 6, 8, 3)
425:     >>> ainv = np.linalg.tensorinv(a, ind=2)
426:     >>> ainv.shape
427:     (8, 3, 4, 6)
428:     >>> b = np.random.randn(4, 6)
429:     >>> np.allclose(np.tensordot(ainv, b), np.linalg.tensorsolve(a, b))
430:     True
431: 
432:     >>> a = np.eye(4*6)
433:     >>> a.shape = (24, 8, 3)
434:     >>> ainv = np.linalg.tensorinv(a, ind=1)
435:     >>> ainv.shape
436:     (8, 3, 24)
437:     >>> b = np.random.randn(24)
438:     >>> np.allclose(np.tensordot(ainv, b, 1), np.linalg.tensorsolve(a, b))
439:     True
440: 
441:     '''
442:     a = asarray(a)
443:     oldshape = a.shape
444:     prod = 1
445:     if ind > 0:
446:         invshape = oldshape[ind:] + oldshape[:ind]
447:         for k in oldshape[ind:]:
448:             prod *= k
449:     else:
450:         raise ValueError("Invalid ind argument.")
451:     a = a.reshape(prod, -1)
452:     ia = inv(a)
453:     return ia.reshape(*invshape)
454: 
455: 
456: # Matrix inversion
457: 
458: def inv(a):
459:     '''
460:     Compute the (multiplicative) inverse of a matrix.
461: 
462:     Given a square matrix `a`, return the matrix `ainv` satisfying
463:     ``dot(a, ainv) = dot(ainv, a) = eye(a.shape[0])``.
464: 
465:     Parameters
466:     ----------
467:     a : (..., M, M) array_like
468:         Matrix to be inverted.
469: 
470:     Returns
471:     -------
472:     ainv : (..., M, M) ndarray or matrix
473:         (Multiplicative) inverse of the matrix `a`.
474: 
475:     Raises
476:     ------
477:     LinAlgError
478:         If `a` is not square or inversion fails.
479: 
480:     Notes
481:     -----
482: 
483:     .. versionadded:: 1.8.0
484: 
485:     Broadcasting rules apply, see the `numpy.linalg` documentation for
486:     details.
487: 
488:     Examples
489:     --------
490:     >>> from numpy.linalg import inv
491:     >>> a = np.array([[1., 2.], [3., 4.]])
492:     >>> ainv = inv(a)
493:     >>> np.allclose(np.dot(a, ainv), np.eye(2))
494:     True
495:     >>> np.allclose(np.dot(ainv, a), np.eye(2))
496:     True
497: 
498:     If a is a matrix object, then the return value is a matrix as well:
499: 
500:     >>> ainv = inv(np.matrix(a))
501:     >>> ainv
502:     matrix([[-2. ,  1. ],
503:             [ 1.5, -0.5]])
504: 
505:     Inverses of several matrices can be computed at once:
506: 
507:     >>> a = np.array([[[1., 2.], [3., 4.]], [[1, 3], [3, 5]]])
508:     >>> inv(a)
509:     array([[[-2. ,  1. ],
510:             [ 1.5, -0.5]],
511:            [[-5. ,  2. ],
512:             [ 3. , -1. ]]])
513: 
514:     '''
515:     a, wrap = _makearray(a)
516:     _assertRankAtLeast2(a)
517:     _assertNdSquareness(a)
518:     t, result_t = _commonType(a)
519: 
520:     if a.shape[-1] == 0:
521:         # The inner array is 0x0, the ufunc cannot handle this case
522:         return wrap(empty_like(a, dtype=result_t))
523: 
524:     signature = 'D->D' if isComplexType(t) else 'd->d'
525:     extobj = get_linalg_error_extobj(_raise_linalgerror_singular)
526:     ainv = _umath_linalg.inv(a, signature=signature, extobj=extobj)
527:     return wrap(ainv.astype(result_t, copy=False))
528: 
529: 
530: # Cholesky decomposition
531: 
532: def cholesky(a):
533:     '''
534:     Cholesky decomposition.
535: 
536:     Return the Cholesky decomposition, `L * L.H`, of the square matrix `a`,
537:     where `L` is lower-triangular and .H is the conjugate transpose operator
538:     (which is the ordinary transpose if `a` is real-valued).  `a` must be
539:     Hermitian (symmetric if real-valued) and positive-definite.  Only `L` is
540:     actually returned.
541: 
542:     Parameters
543:     ----------
544:     a : (..., M, M) array_like
545:         Hermitian (symmetric if all elements are real), positive-definite
546:         input matrix.
547: 
548:     Returns
549:     -------
550:     L : (..., M, M) array_like
551:         Upper or lower-triangular Cholesky factor of `a`.  Returns a
552:         matrix object if `a` is a matrix object.
553: 
554:     Raises
555:     ------
556:     LinAlgError
557:        If the decomposition fails, for example, if `a` is not
558:        positive-definite.
559: 
560:     Notes
561:     -----
562: 
563:     .. versionadded:: 1.8.0
564: 
565:     Broadcasting rules apply, see the `numpy.linalg` documentation for
566:     details.
567: 
568:     The Cholesky decomposition is often used as a fast way of solving
569: 
570:     .. math:: A \\mathbf{x} = \\mathbf{b}
571: 
572:     (when `A` is both Hermitian/symmetric and positive-definite).
573: 
574:     First, we solve for :math:`\\mathbf{y}` in
575: 
576:     .. math:: L \\mathbf{y} = \\mathbf{b},
577: 
578:     and then for :math:`\\mathbf{x}` in
579: 
580:     .. math:: L.H \\mathbf{x} = \\mathbf{y}.
581: 
582:     Examples
583:     --------
584:     >>> A = np.array([[1,-2j],[2j,5]])
585:     >>> A
586:     array([[ 1.+0.j,  0.-2.j],
587:            [ 0.+2.j,  5.+0.j]])
588:     >>> L = np.linalg.cholesky(A)
589:     >>> L
590:     array([[ 1.+0.j,  0.+0.j],
591:            [ 0.+2.j,  1.+0.j]])
592:     >>> np.dot(L, L.T.conj()) # verify that L * L.H = A
593:     array([[ 1.+0.j,  0.-2.j],
594:            [ 0.+2.j,  5.+0.j]])
595:     >>> A = [[1,-2j],[2j,5]] # what happens if A is only array_like?
596:     >>> np.linalg.cholesky(A) # an ndarray object is returned
597:     array([[ 1.+0.j,  0.+0.j],
598:            [ 0.+2.j,  1.+0.j]])
599:     >>> # But a matrix object is returned if A is a matrix object
600:     >>> LA.cholesky(np.matrix(A))
601:     matrix([[ 1.+0.j,  0.+0.j],
602:             [ 0.+2.j,  1.+0.j]])
603: 
604:     '''
605:     extobj = get_linalg_error_extobj(_raise_linalgerror_nonposdef)
606:     gufunc = _umath_linalg.cholesky_lo
607:     a, wrap = _makearray(a)
608:     _assertRankAtLeast2(a)
609:     _assertNdSquareness(a)
610:     t, result_t = _commonType(a)
611:     signature = 'D->D' if isComplexType(t) else 'd->d'
612:     r = gufunc(a, signature=signature, extobj=extobj)
613:     return wrap(r.astype(result_t, copy=False))
614: 
615: # QR decompostion
616: 
617: def qr(a, mode='reduced'):
618:     '''
619:     Compute the qr factorization of a matrix.
620: 
621:     Factor the matrix `a` as *qr*, where `q` is orthonormal and `r` is
622:     upper-triangular.
623: 
624:     Parameters
625:     ----------
626:     a : array_like, shape (M, N)
627:         Matrix to be factored.
628:     mode : {'reduced', 'complete', 'r', 'raw', 'full', 'economic'}, optional
629:         If K = min(M, N), then
630: 
631:         'reduced'  : returns q, r with dimensions (M, K), (K, N) (default)
632:         'complete' : returns q, r with dimensions (M, M), (M, N)
633:         'r'        : returns r only with dimensions (K, N)
634:         'raw'      : returns h, tau with dimensions (N, M), (K,)
635:         'full'     : alias of 'reduced', deprecated
636:         'economic' : returns h from 'raw', deprecated.
637: 
638:         The options 'reduced', 'complete, and 'raw' are new in numpy 1.8,
639:         see the notes for more information. The default is 'reduced' and to
640:         maintain backward compatibility with earlier versions of numpy both
641:         it and the old default 'full' can be omitted. Note that array h
642:         returned in 'raw' mode is transposed for calling Fortran. The
643:         'economic' mode is deprecated.  The modes 'full' and 'economic' may
644:         be passed using only the first letter for backwards compatibility,
645:         but all others must be spelled out. See the Notes for more
646:         explanation.
647: 
648: 
649:     Returns
650:     -------
651:     q : ndarray of float or complex, optional
652:         A matrix with orthonormal columns. When mode = 'complete' the
653:         result is an orthogonal/unitary matrix depending on whether or not
654:         a is real/complex. The determinant may be either +/- 1 in that
655:         case.
656:     r : ndarray of float or complex, optional
657:         The upper-triangular matrix.
658:     (h, tau) : ndarrays of np.double or np.cdouble, optional
659:         The array h contains the Householder reflectors that generate q
660:         along with r. The tau array contains scaling factors for the
661:         reflectors. In the deprecated  'economic' mode only h is returned.
662: 
663:     Raises
664:     ------
665:     LinAlgError
666:         If factoring fails.
667: 
668:     Notes
669:     -----
670:     This is an interface to the LAPACK routines dgeqrf, zgeqrf,
671:     dorgqr, and zungqr.
672: 
673:     For more information on the qr factorization, see for example:
674:     http://en.wikipedia.org/wiki/QR_factorization
675: 
676:     Subclasses of `ndarray` are preserved except for the 'raw' mode. So if
677:     `a` is of type `matrix`, all the return values will be matrices too.
678: 
679:     New 'reduced', 'complete', and 'raw' options for mode were added in
680:     Numpy 1.8 and the old option 'full' was made an alias of 'reduced'.  In
681:     addition the options 'full' and 'economic' were deprecated.  Because
682:     'full' was the previous default and 'reduced' is the new default,
683:     backward compatibility can be maintained by letting `mode` default.
684:     The 'raw' option was added so that LAPACK routines that can multiply
685:     arrays by q using the Householder reflectors can be used. Note that in
686:     this case the returned arrays are of type np.double or np.cdouble and
687:     the h array is transposed to be FORTRAN compatible.  No routines using
688:     the 'raw' return are currently exposed by numpy, but some are available
689:     in lapack_lite and just await the necessary work.
690: 
691:     Examples
692:     --------
693:     >>> a = np.random.randn(9, 6)
694:     >>> q, r = np.linalg.qr(a)
695:     >>> np.allclose(a, np.dot(q, r))  # a does equal qr
696:     True
697:     >>> r2 = np.linalg.qr(a, mode='r')
698:     >>> r3 = np.linalg.qr(a, mode='economic')
699:     >>> np.allclose(r, r2)  # mode='r' returns the same r as mode='full'
700:     True
701:     >>> # But only triu parts are guaranteed equal when mode='economic'
702:     >>> np.allclose(r, np.triu(r3[:6,:6], k=0))
703:     True
704: 
705:     Example illustrating a common use of `qr`: solving of least squares
706:     problems
707: 
708:     What are the least-squares-best `m` and `y0` in ``y = y0 + mx`` for
709:     the following data: {(0,1), (1,0), (1,2), (2,1)}. (Graph the points
710:     and you'll see that it should be y0 = 0, m = 1.)  The answer is provided
711:     by solving the over-determined matrix equation ``Ax = b``, where::
712: 
713:       A = array([[0, 1], [1, 1], [1, 1], [2, 1]])
714:       x = array([[y0], [m]])
715:       b = array([[1], [0], [2], [1]])
716: 
717:     If A = qr such that q is orthonormal (which is always possible via
718:     Gram-Schmidt), then ``x = inv(r) * (q.T) * b``.  (In numpy practice,
719:     however, we simply use `lstsq`.)
720: 
721:     >>> A = np.array([[0, 1], [1, 1], [1, 1], [2, 1]])
722:     >>> A
723:     array([[0, 1],
724:            [1, 1],
725:            [1, 1],
726:            [2, 1]])
727:     >>> b = np.array([1, 0, 2, 1])
728:     >>> q, r = LA.qr(A)
729:     >>> p = np.dot(q.T, b)
730:     >>> np.dot(LA.inv(r), p)
731:     array([  1.1e-16,   1.0e+00])
732: 
733:     '''
734:     if mode not in ('reduced', 'complete', 'r', 'raw'):
735:         if mode in ('f', 'full'):
736:             # 2013-04-01, 1.8
737:             msg = "".join((
738:                     "The 'full' option is deprecated in favor of 'reduced'.\n",
739:                     "For backward compatibility let mode default."))
740:             warnings.warn(msg, DeprecationWarning)
741:             mode = 'reduced'
742:         elif mode in ('e', 'economic'):
743:             # 2013-04-01, 1.8
744:             msg = "The 'economic' option is deprecated.",
745:             warnings.warn(msg, DeprecationWarning)
746:             mode = 'economic'
747:         else:
748:             raise ValueError("Unrecognized mode '%s'" % mode)
749: 
750:     a, wrap = _makearray(a)
751:     _assertRank2(a)
752:     _assertNoEmpty2d(a)
753:     m, n = a.shape
754:     t, result_t = _commonType(a)
755:     a = _fastCopyAndTranspose(t, a)
756:     a = _to_native_byte_order(a)
757:     mn = min(m, n)
758:     tau = zeros((mn,), t)
759:     if isComplexType(t):
760:         lapack_routine = lapack_lite.zgeqrf
761:         routine_name = 'zgeqrf'
762:     else:
763:         lapack_routine = lapack_lite.dgeqrf
764:         routine_name = 'dgeqrf'
765: 
766:     # calculate optimal size of work data 'work'
767:     lwork = 1
768:     work = zeros((lwork,), t)
769:     results = lapack_routine(m, n, a, m, tau, work, -1, 0)
770:     if results['info'] != 0:
771:         raise LinAlgError('%s returns %d' % (routine_name, results['info']))
772: 
773:     # do qr decomposition
774:     lwork = int(abs(work[0]))
775:     work = zeros((lwork,), t)
776:     results = lapack_routine(m, n, a, m, tau, work, lwork, 0)
777:     if results['info'] != 0:
778:         raise LinAlgError('%s returns %d' % (routine_name, results['info']))
779: 
780:     # handle modes that don't return q
781:     if mode == 'r':
782:         r = _fastCopyAndTranspose(result_t, a[:, :mn])
783:         return wrap(triu(r))
784: 
785:     if mode == 'raw':
786:         return a, tau
787: 
788:     if mode == 'economic':
789:         if t != result_t :
790:             a = a.astype(result_t, copy=False)
791:         return wrap(a.T)
792: 
793:     #  generate q from a
794:     if mode == 'complete' and m > n:
795:         mc = m
796:         q = empty((m, m), t)
797:     else:
798:         mc = mn
799:         q = empty((n, m), t)
800:     q[:n] = a
801: 
802:     if isComplexType(t):
803:         lapack_routine = lapack_lite.zungqr
804:         routine_name = 'zungqr'
805:     else:
806:         lapack_routine = lapack_lite.dorgqr
807:         routine_name = 'dorgqr'
808: 
809:     # determine optimal lwork
810:     lwork = 1
811:     work = zeros((lwork,), t)
812:     results = lapack_routine(m, mc, mn, q, m, tau, work, -1, 0)
813:     if results['info'] != 0:
814:         raise LinAlgError('%s returns %d' % (routine_name, results['info']))
815: 
816:     # compute q
817:     lwork = int(abs(work[0]))
818:     work = zeros((lwork,), t)
819:     results = lapack_routine(m, mc, mn, q, m, tau, work, lwork, 0)
820:     if results['info'] != 0:
821:         raise LinAlgError('%s returns %d' % (routine_name, results['info']))
822: 
823:     q = _fastCopyAndTranspose(result_t, q[:mc])
824:     r = _fastCopyAndTranspose(result_t, a[:, :mc])
825: 
826:     return wrap(q), wrap(triu(r))
827: 
828: 
829: # Eigenvalues
830: 
831: 
832: def eigvals(a):
833:     '''
834:     Compute the eigenvalues of a general matrix.
835: 
836:     Main difference between `eigvals` and `eig`: the eigenvectors aren't
837:     returned.
838: 
839:     Parameters
840:     ----------
841:     a : (..., M, M) array_like
842:         A complex- or real-valued matrix whose eigenvalues will be computed.
843: 
844:     Returns
845:     -------
846:     w : (..., M,) ndarray
847:         The eigenvalues, each repeated according to its multiplicity.
848:         They are not necessarily ordered, nor are they necessarily
849:         real for real matrices.
850: 
851:     Raises
852:     ------
853:     LinAlgError
854:         If the eigenvalue computation does not converge.
855: 
856:     See Also
857:     --------
858:     eig : eigenvalues and right eigenvectors of general arrays
859:     eigvalsh : eigenvalues of symmetric or Hermitian arrays.
860:     eigh : eigenvalues and eigenvectors of symmetric/Hermitian arrays.
861: 
862:     Notes
863:     -----
864: 
865:     .. versionadded:: 1.8.0
866: 
867:     Broadcasting rules apply, see the `numpy.linalg` documentation for
868:     details.
869: 
870:     This is implemented using the _geev LAPACK routines which compute
871:     the eigenvalues and eigenvectors of general square arrays.
872: 
873:     Examples
874:     --------
875:     Illustration, using the fact that the eigenvalues of a diagonal matrix
876:     are its diagonal elements, that multiplying a matrix on the left
877:     by an orthogonal matrix, `Q`, and on the right by `Q.T` (the transpose
878:     of `Q`), preserves the eigenvalues of the "middle" matrix.  In other words,
879:     if `Q` is orthogonal, then ``Q * A * Q.T`` has the same eigenvalues as
880:     ``A``:
881: 
882:     >>> from numpy import linalg as LA
883:     >>> x = np.random.random()
884:     >>> Q = np.array([[np.cos(x), -np.sin(x)], [np.sin(x), np.cos(x)]])
885:     >>> LA.norm(Q[0, :]), LA.norm(Q[1, :]), np.dot(Q[0, :],Q[1, :])
886:     (1.0, 1.0, 0.0)
887: 
888:     Now multiply a diagonal matrix by Q on one side and by Q.T on the other:
889: 
890:     >>> D = np.diag((-1,1))
891:     >>> LA.eigvals(D)
892:     array([-1.,  1.])
893:     >>> A = np.dot(Q, D)
894:     >>> A = np.dot(A, Q.T)
895:     >>> LA.eigvals(A)
896:     array([ 1., -1.])
897: 
898:     '''
899:     a, wrap = _makearray(a)
900:     _assertNoEmpty2d(a)
901:     _assertRankAtLeast2(a)
902:     _assertNdSquareness(a)
903:     _assertFinite(a)
904:     t, result_t = _commonType(a)
905: 
906:     extobj = get_linalg_error_extobj(
907:         _raise_linalgerror_eigenvalues_nonconvergence)
908:     signature = 'D->D' if isComplexType(t) else 'd->D'
909:     w = _umath_linalg.eigvals(a, signature=signature, extobj=extobj)
910: 
911:     if not isComplexType(t):
912:         if all(w.imag == 0):
913:             w = w.real
914:             result_t = _realType(result_t)
915:         else:
916:             result_t = _complexType(result_t)
917: 
918:     return w.astype(result_t, copy=False)
919: 
920: def eigvalsh(a, UPLO='L'):
921:     '''
922:     Compute the eigenvalues of a Hermitian or real symmetric matrix.
923: 
924:     Main difference from eigh: the eigenvectors are not computed.
925: 
926:     Parameters
927:     ----------
928:     a : (..., M, M) array_like
929:         A complex- or real-valued matrix whose eigenvalues are to be
930:         computed.
931:     UPLO : {'L', 'U'}, optional
932:         Same as `lower`, with 'L' for lower and 'U' for upper triangular.
933:         Deprecated.
934: 
935:     Returns
936:     -------
937:     w : (..., M,) ndarray
938:         The eigenvalues in ascending order, each repeated according to
939:         its multiplicity.
940: 
941:     Raises
942:     ------
943:     LinAlgError
944:         If the eigenvalue computation does not converge.
945: 
946:     See Also
947:     --------
948:     eigh : eigenvalues and eigenvectors of symmetric/Hermitian arrays.
949:     eigvals : eigenvalues of general real or complex arrays.
950:     eig : eigenvalues and right eigenvectors of general real or complex
951:           arrays.
952: 
953:     Notes
954:     -----
955: 
956:     .. versionadded:: 1.8.0
957: 
958:     Broadcasting rules apply, see the `numpy.linalg` documentation for
959:     details.
960: 
961:     The eigenvalues are computed using LAPACK routines _syevd, _heevd
962: 
963:     Examples
964:     --------
965:     >>> from numpy import linalg as LA
966:     >>> a = np.array([[1, -2j], [2j, 5]])
967:     >>> LA.eigvalsh(a)
968:     array([ 0.17157288,  5.82842712])
969: 
970:     '''
971:     UPLO = UPLO.upper()
972:     if UPLO not in ('L', 'U'):
973:         raise ValueError("UPLO argument must be 'L' or 'U'")
974: 
975:     extobj = get_linalg_error_extobj(
976:         _raise_linalgerror_eigenvalues_nonconvergence)
977:     if UPLO == 'L':
978:         gufunc = _umath_linalg.eigvalsh_lo
979:     else:
980:         gufunc = _umath_linalg.eigvalsh_up
981: 
982:     a, wrap = _makearray(a)
983:     _assertNoEmpty2d(a)
984:     _assertRankAtLeast2(a)
985:     _assertNdSquareness(a)
986:     t, result_t = _commonType(a)
987:     signature = 'D->d' if isComplexType(t) else 'd->d'
988:     w = gufunc(a, signature=signature, extobj=extobj)
989:     return w.astype(_realType(result_t), copy=False)
990: 
991: def _convertarray(a):
992:     t, result_t = _commonType(a)
993:     a = _fastCT(a.astype(t))
994:     return a, t, result_t
995: 
996: 
997: # Eigenvectors
998: 
999: 
1000: def eig(a):
1001:     '''
1002:     Compute the eigenvalues and right eigenvectors of a square array.
1003: 
1004:     Parameters
1005:     ----------
1006:     a : (..., M, M) array
1007:         Matrices for which the eigenvalues and right eigenvectors will
1008:         be computed
1009: 
1010:     Returns
1011:     -------
1012:     w : (..., M) array
1013:         The eigenvalues, each repeated according to its multiplicity.
1014:         The eigenvalues are not necessarily ordered. The resulting
1015:         array will be of complex type, unless the imaginary part is
1016:         zero in which case it will be cast to a real type. When `a`
1017:         is real the resulting eigenvalues will be real (0 imaginary
1018:         part) or occur in conjugate pairs
1019: 
1020:     v : (..., M, M) array
1021:         The normalized (unit "length") eigenvectors, such that the
1022:         column ``v[:,i]`` is the eigenvector corresponding to the
1023:         eigenvalue ``w[i]``.
1024: 
1025:     Raises
1026:     ------
1027:     LinAlgError
1028:         If the eigenvalue computation does not converge.
1029: 
1030:     See Also
1031:     --------
1032:     eigvals : eigenvalues of a non-symmetric array.
1033: 
1034:     eigh : eigenvalues and eigenvectors of a symmetric or Hermitian
1035:            (conjugate symmetric) array.
1036: 
1037:     eigvalsh : eigenvalues of a symmetric or Hermitian (conjugate symmetric)
1038:                array.
1039: 
1040:     Notes
1041:     -----
1042: 
1043:     .. versionadded:: 1.8.0
1044: 
1045:     Broadcasting rules apply, see the `numpy.linalg` documentation for
1046:     details.
1047: 
1048:     This is implemented using the _geev LAPACK routines which compute
1049:     the eigenvalues and eigenvectors of general square arrays.
1050: 
1051:     The number `w` is an eigenvalue of `a` if there exists a vector
1052:     `v` such that ``dot(a,v) = w * v``. Thus, the arrays `a`, `w`, and
1053:     `v` satisfy the equations ``dot(a[:,:], v[:,i]) = w[i] * v[:,i]``
1054:     for :math:`i \\in \\{0,...,M-1\\}`.
1055: 
1056:     The array `v` of eigenvectors may not be of maximum rank, that is, some
1057:     of the columns may be linearly dependent, although round-off error may
1058:     obscure that fact. If the eigenvalues are all different, then theoretically
1059:     the eigenvectors are linearly independent. Likewise, the (complex-valued)
1060:     matrix of eigenvectors `v` is unitary if the matrix `a` is normal, i.e.,
1061:     if ``dot(a, a.H) = dot(a.H, a)``, where `a.H` denotes the conjugate
1062:     transpose of `a`.
1063: 
1064:     Finally, it is emphasized that `v` consists of the *right* (as in
1065:     right-hand side) eigenvectors of `a`.  A vector `y` satisfying
1066:     ``dot(y.T, a) = z * y.T`` for some number `z` is called a *left*
1067:     eigenvector of `a`, and, in general, the left and right eigenvectors
1068:     of a matrix are not necessarily the (perhaps conjugate) transposes
1069:     of each other.
1070: 
1071:     References
1072:     ----------
1073:     G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando, FL,
1074:     Academic Press, Inc., 1980, Various pp.
1075: 
1076:     Examples
1077:     --------
1078:     >>> from numpy import linalg as LA
1079: 
1080:     (Almost) trivial example with real e-values and e-vectors.
1081: 
1082:     >>> w, v = LA.eig(np.diag((1, 2, 3)))
1083:     >>> w; v
1084:     array([ 1.,  2.,  3.])
1085:     array([[ 1.,  0.,  0.],
1086:            [ 0.,  1.,  0.],
1087:            [ 0.,  0.,  1.]])
1088: 
1089:     Real matrix possessing complex e-values and e-vectors; note that the
1090:     e-values are complex conjugates of each other.
1091: 
1092:     >>> w, v = LA.eig(np.array([[1, -1], [1, 1]]))
1093:     >>> w; v
1094:     array([ 1. + 1.j,  1. - 1.j])
1095:     array([[ 0.70710678+0.j        ,  0.70710678+0.j        ],
1096:            [ 0.00000000-0.70710678j,  0.00000000+0.70710678j]])
1097: 
1098:     Complex-valued matrix with real e-values (but complex-valued e-vectors);
1099:     note that a.conj().T = a, i.e., a is Hermitian.
1100: 
1101:     >>> a = np.array([[1, 1j], [-1j, 1]])
1102:     >>> w, v = LA.eig(a)
1103:     >>> w; v
1104:     array([  2.00000000e+00+0.j,   5.98651912e-36+0.j]) # i.e., {2, 0}
1105:     array([[ 0.00000000+0.70710678j,  0.70710678+0.j        ],
1106:            [ 0.70710678+0.j        ,  0.00000000+0.70710678j]])
1107: 
1108:     Be careful about round-off error!
1109: 
1110:     >>> a = np.array([[1 + 1e-9, 0], [0, 1 - 1e-9]])
1111:     >>> # Theor. e-values are 1 +/- 1e-9
1112:     >>> w, v = LA.eig(a)
1113:     >>> w; v
1114:     array([ 1.,  1.])
1115:     array([[ 1.,  0.],
1116:            [ 0.,  1.]])
1117: 
1118:     '''
1119:     a, wrap = _makearray(a)
1120:     _assertRankAtLeast2(a)
1121:     _assertNdSquareness(a)
1122:     _assertFinite(a)
1123:     t, result_t = _commonType(a)
1124: 
1125:     extobj = get_linalg_error_extobj(
1126:         _raise_linalgerror_eigenvalues_nonconvergence)
1127:     signature = 'D->DD' if isComplexType(t) else 'd->DD'
1128:     w, vt = _umath_linalg.eig(a, signature=signature, extobj=extobj)
1129: 
1130:     if not isComplexType(t) and all(w.imag == 0.0):
1131:         w = w.real
1132:         vt = vt.real
1133:         result_t = _realType(result_t)
1134:     else:
1135:         result_t = _complexType(result_t)
1136: 
1137:     vt = vt.astype(result_t, copy=False)
1138:     return w.astype(result_t, copy=False), wrap(vt)
1139: 
1140: 
1141: def eigh(a, UPLO='L'):
1142:     '''
1143:     Return the eigenvalues and eigenvectors of a Hermitian or symmetric matrix.
1144: 
1145:     Returns two objects, a 1-D array containing the eigenvalues of `a`, and
1146:     a 2-D square array or matrix (depending on the input type) of the
1147:     corresponding eigenvectors (in columns).
1148: 
1149:     Parameters
1150:     ----------
1151:     a : (..., M, M) array
1152:         Hermitian/Symmetric matrices whose eigenvalues and
1153:         eigenvectors are to be computed.
1154:     UPLO : {'L', 'U'}, optional
1155:         Specifies whether the calculation is done with the lower triangular
1156:         part of `a` ('L', default) or the upper triangular part ('U').
1157: 
1158:     Returns
1159:     -------
1160:     w : (..., M) ndarray
1161:         The eigenvalues in ascending order, each repeated according to
1162:         its multiplicity.
1163:     v : {(..., M, M) ndarray, (..., M, M) matrix}
1164:         The column ``v[:, i]`` is the normalized eigenvector corresponding
1165:         to the eigenvalue ``w[i]``.  Will return a matrix object if `a` is
1166:         a matrix object.
1167: 
1168:     Raises
1169:     ------
1170:     LinAlgError
1171:         If the eigenvalue computation does not converge.
1172: 
1173:     See Also
1174:     --------
1175:     eigvalsh : eigenvalues of symmetric or Hermitian arrays.
1176:     eig : eigenvalues and right eigenvectors for non-symmetric arrays.
1177:     eigvals : eigenvalues of non-symmetric arrays.
1178: 
1179:     Notes
1180:     -----
1181: 
1182:     .. versionadded:: 1.8.0
1183: 
1184:     Broadcasting rules apply, see the `numpy.linalg` documentation for
1185:     details.
1186: 
1187:     The eigenvalues/eigenvectors are computed using LAPACK routines _syevd,
1188:     _heevd
1189: 
1190:     The eigenvalues of real symmetric or complex Hermitian matrices are
1191:     always real. [1]_ The array `v` of (column) eigenvectors is unitary
1192:     and `a`, `w`, and `v` satisfy the equations
1193:     ``dot(a, v[:, i]) = w[i] * v[:, i]``.
1194: 
1195:     References
1196:     ----------
1197:     .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,
1198:            FL, Academic Press, Inc., 1980, pg. 222.
1199: 
1200:     Examples
1201:     --------
1202:     >>> from numpy import linalg as LA
1203:     >>> a = np.array([[1, -2j], [2j, 5]])
1204:     >>> a
1205:     array([[ 1.+0.j,  0.-2.j],
1206:            [ 0.+2.j,  5.+0.j]])
1207:     >>> w, v = LA.eigh(a)
1208:     >>> w; v
1209:     array([ 0.17157288,  5.82842712])
1210:     array([[-0.92387953+0.j        , -0.38268343+0.j        ],
1211:            [ 0.00000000+0.38268343j,  0.00000000-0.92387953j]])
1212: 
1213:     >>> np.dot(a, v[:, 0]) - w[0] * v[:, 0] # verify 1st e-val/vec pair
1214:     array([2.77555756e-17 + 0.j, 0. + 1.38777878e-16j])
1215:     >>> np.dot(a, v[:, 1]) - w[1] * v[:, 1] # verify 2nd e-val/vec pair
1216:     array([ 0.+0.j,  0.+0.j])
1217: 
1218:     >>> A = np.matrix(a) # what happens if input is a matrix object
1219:     >>> A
1220:     matrix([[ 1.+0.j,  0.-2.j],
1221:             [ 0.+2.j,  5.+0.j]])
1222:     >>> w, v = LA.eigh(A)
1223:     >>> w; v
1224:     array([ 0.17157288,  5.82842712])
1225:     matrix([[-0.92387953+0.j        , -0.38268343+0.j        ],
1226:             [ 0.00000000+0.38268343j,  0.00000000-0.92387953j]])
1227: 
1228:     '''
1229:     UPLO = UPLO.upper()
1230:     if UPLO not in ('L', 'U'):
1231:         raise ValueError("UPLO argument must be 'L' or 'U'")
1232: 
1233:     a, wrap = _makearray(a)
1234:     _assertRankAtLeast2(a)
1235:     _assertNdSquareness(a)
1236:     t, result_t = _commonType(a)
1237: 
1238:     extobj = get_linalg_error_extobj(
1239:         _raise_linalgerror_eigenvalues_nonconvergence)
1240:     if UPLO == 'L':
1241:         gufunc = _umath_linalg.eigh_lo
1242:     else:
1243:         gufunc = _umath_linalg.eigh_up
1244: 
1245:     signature = 'D->dD' if isComplexType(t) else 'd->dd'
1246:     w, vt = gufunc(a, signature=signature, extobj=extobj)
1247:     w = w.astype(_realType(result_t), copy=False)
1248:     vt = vt.astype(result_t, copy=False)
1249:     return w, wrap(vt)
1250: 
1251: 
1252: # Singular value decomposition
1253: 
1254: def svd(a, full_matrices=1, compute_uv=1):
1255:     '''
1256:     Singular Value Decomposition.
1257: 
1258:     Factors the matrix `a` as ``u * np.diag(s) * v``, where `u` and `v`
1259:     are unitary and `s` is a 1-d array of `a`'s singular values.
1260: 
1261:     Parameters
1262:     ----------
1263:     a : (..., M, N) array_like
1264:         A real or complex matrix of shape (`M`, `N`) .
1265:     full_matrices : bool, optional
1266:         If True (default), `u` and `v` have the shapes (`M`, `M`) and
1267:         (`N`, `N`), respectively.  Otherwise, the shapes are (`M`, `K`)
1268:         and (`K`, `N`), respectively, where `K` = min(`M`, `N`).
1269:     compute_uv : bool, optional
1270:         Whether or not to compute `u` and `v` in addition to `s`.  True
1271:         by default.
1272: 
1273:     Returns
1274:     -------
1275:     u : { (..., M, M), (..., M, K) } array
1276:         Unitary matrices. The actual shape depends on the value of
1277:         ``full_matrices``. Only returned when ``compute_uv`` is True.
1278:     s : (..., K) array
1279:         The singular values for every matrix, sorted in descending order.
1280:     v : { (..., N, N), (..., K, N) } array
1281:         Unitary matrices. The actual shape depends on the value of
1282:         ``full_matrices``. Only returned when ``compute_uv`` is True.
1283: 
1284:     Raises
1285:     ------
1286:     LinAlgError
1287:         If SVD computation does not converge.
1288: 
1289:     Notes
1290:     -----
1291: 
1292:     .. versionadded:: 1.8.0
1293: 
1294:     Broadcasting rules apply, see the `numpy.linalg` documentation for
1295:     details.
1296: 
1297:     The decomposition is performed using LAPACK routine _gesdd
1298: 
1299:     The SVD is commonly written as ``a = U S V.H``.  The `v` returned
1300:     by this function is ``V.H`` and ``u = U``.
1301: 
1302:     If ``U`` is a unitary matrix, it means that it
1303:     satisfies ``U.H = inv(U)``.
1304: 
1305:     The rows of `v` are the eigenvectors of ``a.H a``. The columns
1306:     of `u` are the eigenvectors of ``a a.H``.  For row ``i`` in
1307:     `v` and column ``i`` in `u`, the corresponding eigenvalue is
1308:     ``s[i]**2``.
1309: 
1310:     If `a` is a `matrix` object (as opposed to an `ndarray`), then so
1311:     are all the return values.
1312: 
1313:     Examples
1314:     --------
1315:     >>> a = np.random.randn(9, 6) + 1j*np.random.randn(9, 6)
1316: 
1317:     Reconstruction based on full SVD:
1318: 
1319:     >>> U, s, V = np.linalg.svd(a, full_matrices=True)
1320:     >>> U.shape, V.shape, s.shape
1321:     ((9, 9), (6, 6), (6,))
1322:     >>> S = np.zeros((9, 6), dtype=complex)
1323:     >>> S[:6, :6] = np.diag(s)
1324:     >>> np.allclose(a, np.dot(U, np.dot(S, V)))
1325:     True
1326: 
1327:     Reconstruction based on reduced SVD:
1328: 
1329:     >>> U, s, V = np.linalg.svd(a, full_matrices=False)
1330:     >>> U.shape, V.shape, s.shape
1331:     ((9, 6), (6, 6), (6,))
1332:     >>> S = np.diag(s)
1333:     >>> np.allclose(a, np.dot(U, np.dot(S, V)))
1334:     True
1335: 
1336:     '''
1337:     a, wrap = _makearray(a)
1338:     _assertNoEmpty2d(a)
1339:     _assertRankAtLeast2(a)
1340:     t, result_t = _commonType(a)
1341: 
1342:     extobj = get_linalg_error_extobj(_raise_linalgerror_svd_nonconvergence)
1343: 
1344:     m = a.shape[-2]
1345:     n = a.shape[-1]
1346:     if compute_uv:
1347:         if full_matrices:
1348:             if m < n:
1349:                 gufunc = _umath_linalg.svd_m_f
1350:             else:
1351:                 gufunc = _umath_linalg.svd_n_f
1352:         else:
1353:             if m < n:
1354:                 gufunc = _umath_linalg.svd_m_s
1355:             else:
1356:                 gufunc = _umath_linalg.svd_n_s
1357: 
1358:         signature = 'D->DdD' if isComplexType(t) else 'd->ddd'
1359:         u, s, vt = gufunc(a, signature=signature, extobj=extobj)
1360:         u = u.astype(result_t, copy=False)
1361:         s = s.astype(_realType(result_t), copy=False)
1362:         vt = vt.astype(result_t, copy=False)
1363:         return wrap(u), s, wrap(vt)
1364:     else:
1365:         if m < n:
1366:             gufunc = _umath_linalg.svd_m
1367:         else:
1368:             gufunc = _umath_linalg.svd_n
1369: 
1370:         signature = 'D->d' if isComplexType(t) else 'd->d'
1371:         s = gufunc(a, signature=signature, extobj=extobj)
1372:         s = s.astype(_realType(result_t), copy=False)
1373:         return s
1374: 
1375: def cond(x, p=None):
1376:     '''
1377:     Compute the condition number of a matrix.
1378: 
1379:     This function is capable of returning the condition number using
1380:     one of seven different norms, depending on the value of `p` (see
1381:     Parameters below).
1382: 
1383:     Parameters
1384:     ----------
1385:     x : (..., M, N) array_like
1386:         The matrix whose condition number is sought.
1387:     p : {None, 1, -1, 2, -2, inf, -inf, 'fro'}, optional
1388:         Order of the norm:
1389: 
1390:         =====  ============================
1391:         p      norm for matrices
1392:         =====  ============================
1393:         None   2-norm, computed directly using the ``SVD``
1394:         'fro'  Frobenius norm
1395:         inf    max(sum(abs(x), axis=1))
1396:         -inf   min(sum(abs(x), axis=1))
1397:         1      max(sum(abs(x), axis=0))
1398:         -1     min(sum(abs(x), axis=0))
1399:         2      2-norm (largest sing. value)
1400:         -2     smallest singular value
1401:         =====  ============================
1402: 
1403:         inf means the numpy.inf object, and the Frobenius norm is
1404:         the root-of-sum-of-squares norm.
1405: 
1406:     Returns
1407:     -------
1408:     c : {float, inf}
1409:         The condition number of the matrix. May be infinite.
1410: 
1411:     See Also
1412:     --------
1413:     numpy.linalg.norm
1414: 
1415:     Notes
1416:     -----
1417:     The condition number of `x` is defined as the norm of `x` times the
1418:     norm of the inverse of `x` [1]_; the norm can be the usual L2-norm
1419:     (root-of-sum-of-squares) or one of a number of other matrix norms.
1420: 
1421:     References
1422:     ----------
1423:     .. [1] G. Strang, *Linear Algebra and Its Applications*, Orlando, FL,
1424:            Academic Press, Inc., 1980, pg. 285.
1425: 
1426:     Examples
1427:     --------
1428:     >>> from numpy import linalg as LA
1429:     >>> a = np.array([[1, 0, -1], [0, 1, 0], [1, 0, 1]])
1430:     >>> a
1431:     array([[ 1,  0, -1],
1432:            [ 0,  1,  0],
1433:            [ 1,  0,  1]])
1434:     >>> LA.cond(a)
1435:     1.4142135623730951
1436:     >>> LA.cond(a, 'fro')
1437:     3.1622776601683795
1438:     >>> LA.cond(a, np.inf)
1439:     2.0
1440:     >>> LA.cond(a, -np.inf)
1441:     1.0
1442:     >>> LA.cond(a, 1)
1443:     2.0
1444:     >>> LA.cond(a, -1)
1445:     1.0
1446:     >>> LA.cond(a, 2)
1447:     1.4142135623730951
1448:     >>> LA.cond(a, -2)
1449:     0.70710678118654746
1450:     >>> min(LA.svd(a, compute_uv=0))*min(LA.svd(LA.inv(a), compute_uv=0))
1451:     0.70710678118654746
1452: 
1453:     '''
1454:     x = asarray(x)  # in case we have a matrix
1455:     if p is None:
1456:         s = svd(x, compute_uv=False)
1457:         return s[..., 0]/s[..., -1]
1458:     else:
1459:         return norm(x, p, axis=(-2, -1)) * norm(inv(x), p, axis=(-2, -1))
1460: 
1461: 
1462: def matrix_rank(M, tol=None):
1463:     '''
1464:     Return matrix rank of array using SVD method
1465: 
1466:     Rank of the array is the number of SVD singular values of the array that are
1467:     greater than `tol`.
1468: 
1469:     Parameters
1470:     ----------
1471:     M : {(M,), (M, N)} array_like
1472:         array of <=2 dimensions
1473:     tol : {None, float}, optional
1474:        threshold below which SVD values are considered zero. If `tol` is
1475:        None, and ``S`` is an array with singular values for `M`, and
1476:        ``eps`` is the epsilon value for datatype of ``S``, then `tol` is
1477:        set to ``S.max() * max(M.shape) * eps``.
1478: 
1479:     Notes
1480:     -----
1481:     The default threshold to detect rank deficiency is a test on the magnitude
1482:     of the singular values of `M`.  By default, we identify singular values less
1483:     than ``S.max() * max(M.shape) * eps`` as indicating rank deficiency (with
1484:     the symbols defined above). This is the algorithm MATLAB uses [1].  It also
1485:     appears in *Numerical recipes* in the discussion of SVD solutions for linear
1486:     least squares [2].
1487: 
1488:     This default threshold is designed to detect rank deficiency accounting for
1489:     the numerical errors of the SVD computation.  Imagine that there is a column
1490:     in `M` that is an exact (in floating point) linear combination of other
1491:     columns in `M`. Computing the SVD on `M` will not produce a singular value
1492:     exactly equal to 0 in general: any difference of the smallest SVD value from
1493:     0 will be caused by numerical imprecision in the calculation of the SVD.
1494:     Our threshold for small SVD values takes this numerical imprecision into
1495:     account, and the default threshold will detect such numerical rank
1496:     deficiency.  The threshold may declare a matrix `M` rank deficient even if
1497:     the linear combination of some columns of `M` is not exactly equal to
1498:     another column of `M` but only numerically very close to another column of
1499:     `M`.
1500: 
1501:     We chose our default threshold because it is in wide use.  Other thresholds
1502:     are possible.  For example, elsewhere in the 2007 edition of *Numerical
1503:     recipes* there is an alternative threshold of ``S.max() *
1504:     np.finfo(M.dtype).eps / 2. * np.sqrt(m + n + 1.)``. The authors describe
1505:     this threshold as being based on "expected roundoff error" (p 71).
1506: 
1507:     The thresholds above deal with floating point roundoff error in the
1508:     calculation of the SVD.  However, you may have more information about the
1509:     sources of error in `M` that would make you consider other tolerance values
1510:     to detect *effective* rank deficiency.  The most useful measure of the
1511:     tolerance depends on the operations you intend to use on your matrix.  For
1512:     example, if your data come from uncertain measurements with uncertainties
1513:     greater than floating point epsilon, choosing a tolerance near that
1514:     uncertainty may be preferable.  The tolerance may be absolute if the
1515:     uncertainties are absolute rather than relative.
1516: 
1517:     References
1518:     ----------
1519:     .. [1] MATLAB reference documention, "Rank"
1520:            http://www.mathworks.com/help/techdoc/ref/rank.html
1521:     .. [2] W. H. Press, S. A. Teukolsky, W. T. Vetterling and B. P. Flannery,
1522:            "Numerical Recipes (3rd edition)", Cambridge University Press, 2007,
1523:            page 795.
1524: 
1525:     Examples
1526:     --------
1527:     >>> from numpy.linalg import matrix_rank
1528:     >>> matrix_rank(np.eye(4)) # Full rank matrix
1529:     4
1530:     >>> I=np.eye(4); I[-1,-1] = 0. # rank deficient matrix
1531:     >>> matrix_rank(I)
1532:     3
1533:     >>> matrix_rank(np.ones((4,))) # 1 dimension - rank 1 unless all 0
1534:     1
1535:     >>> matrix_rank(np.zeros((4,)))
1536:     0
1537:     '''
1538:     M = asarray(M)
1539:     if M.ndim > 2:
1540:         raise TypeError('array should have 2 or fewer dimensions')
1541:     if M.ndim < 2:
1542:         return int(not all(M==0))
1543:     S = svd(M, compute_uv=False)
1544:     if tol is None:
1545:         tol = S.max() * max(M.shape) * finfo(S.dtype).eps
1546:     return sum(S > tol)
1547: 
1548: 
1549: # Generalized inverse
1550: 
1551: def pinv(a, rcond=1e-15 ):
1552:     '''
1553:     Compute the (Moore-Penrose) pseudo-inverse of a matrix.
1554: 
1555:     Calculate the generalized inverse of a matrix using its
1556:     singular-value decomposition (SVD) and including all
1557:     *large* singular values.
1558: 
1559:     Parameters
1560:     ----------
1561:     a : (M, N) array_like
1562:       Matrix to be pseudo-inverted.
1563:     rcond : float
1564:       Cutoff for small singular values.
1565:       Singular values smaller (in modulus) than
1566:       `rcond` * largest_singular_value (again, in modulus)
1567:       are set to zero.
1568: 
1569:     Returns
1570:     -------
1571:     B : (N, M) ndarray
1572:       The pseudo-inverse of `a`. If `a` is a `matrix` instance, then so
1573:       is `B`.
1574: 
1575:     Raises
1576:     ------
1577:     LinAlgError
1578:       If the SVD computation does not converge.
1579: 
1580:     Notes
1581:     -----
1582:     The pseudo-inverse of a matrix A, denoted :math:`A^+`, is
1583:     defined as: "the matrix that 'solves' [the least-squares problem]
1584:     :math:`Ax = b`," i.e., if :math:`\\bar{x}` is said solution, then
1585:     :math:`A^+` is that matrix such that :math:`\\bar{x} = A^+b`.
1586: 
1587:     It can be shown that if :math:`Q_1 \\Sigma Q_2^T = A` is the singular
1588:     value decomposition of A, then
1589:     :math:`A^+ = Q_2 \\Sigma^+ Q_1^T`, where :math:`Q_{1,2}` are
1590:     orthogonal matrices, :math:`\\Sigma` is a diagonal matrix consisting
1591:     of A's so-called singular values, (followed, typically, by
1592:     zeros), and then :math:`\\Sigma^+` is simply the diagonal matrix
1593:     consisting of the reciprocals of A's singular values
1594:     (again, followed by zeros). [1]_
1595: 
1596:     References
1597:     ----------
1598:     .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,
1599:            FL, Academic Press, Inc., 1980, pp. 139-142.
1600: 
1601:     Examples
1602:     --------
1603:     The following example checks that ``a * a+ * a == a`` and
1604:     ``a+ * a * a+ == a+``:
1605: 
1606:     >>> a = np.random.randn(9, 6)
1607:     >>> B = np.linalg.pinv(a)
1608:     >>> np.allclose(a, np.dot(a, np.dot(B, a)))
1609:     True
1610:     >>> np.allclose(B, np.dot(B, np.dot(a, B)))
1611:     True
1612: 
1613:     '''
1614:     a, wrap = _makearray(a)
1615:     _assertNoEmpty2d(a)
1616:     a = a.conjugate()
1617:     u, s, vt = svd(a, 0)
1618:     m = u.shape[0]
1619:     n = vt.shape[1]
1620:     cutoff = rcond*maximum.reduce(s)
1621:     for i in range(min(n, m)):
1622:         if s[i] > cutoff:
1623:             s[i] = 1./s[i]
1624:         else:
1625:             s[i] = 0.
1626:     res = dot(transpose(vt), multiply(s[:, newaxis], transpose(u)))
1627:     return wrap(res)
1628: 
1629: # Determinant
1630: 
1631: def slogdet(a):
1632:     '''
1633:     Compute the sign and (natural) logarithm of the determinant of an array.
1634: 
1635:     If an array has a very small or very large determinant, then a call to
1636:     `det` may overflow or underflow. This routine is more robust against such
1637:     issues, because it computes the logarithm of the determinant rather than
1638:     the determinant itself.
1639: 
1640:     Parameters
1641:     ----------
1642:     a : (..., M, M) array_like
1643:         Input array, has to be a square 2-D array.
1644: 
1645:     Returns
1646:     -------
1647:     sign : (...) array_like
1648:         A number representing the sign of the determinant. For a real matrix,
1649:         this is 1, 0, or -1. For a complex matrix, this is a complex number
1650:         with absolute value 1 (i.e., it is on the unit circle), or else 0.
1651:     logdet : (...) array_like
1652:         The natural log of the absolute value of the determinant.
1653: 
1654:     If the determinant is zero, then `sign` will be 0 and `logdet` will be
1655:     -Inf. In all cases, the determinant is equal to ``sign * np.exp(logdet)``.
1656: 
1657:     See Also
1658:     --------
1659:     det
1660: 
1661:     Notes
1662:     -----
1663: 
1664:     .. versionadded:: 1.8.0
1665: 
1666:     Broadcasting rules apply, see the `numpy.linalg` documentation for
1667:     details.
1668: 
1669:     .. versionadded:: 1.6.0.
1670: 
1671:     The determinant is computed via LU factorization using the LAPACK
1672:     routine z/dgetrf.
1673: 
1674: 
1675:     Examples
1676:     --------
1677:     The determinant of a 2-D array ``[[a, b], [c, d]]`` is ``ad - bc``:
1678: 
1679:     >>> a = np.array([[1, 2], [3, 4]])
1680:     >>> (sign, logdet) = np.linalg.slogdet(a)
1681:     >>> (sign, logdet)
1682:     (-1, 0.69314718055994529)
1683:     >>> sign * np.exp(logdet)
1684:     -2.0
1685: 
1686:     Computing log-determinants for a stack of matrices:
1687: 
1688:     >>> a = np.array([ [[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]] ])
1689:     >>> a.shape
1690:     (3, 2, 2)
1691:     >>> sign, logdet = np.linalg.slogdet(a)
1692:     >>> (sign, logdet)
1693:     (array([-1., -1., -1.]), array([ 0.69314718,  1.09861229,  2.07944154]))
1694:     >>> sign * np.exp(logdet)
1695:     array([-2., -3., -8.])
1696: 
1697:     This routine succeeds where ordinary `det` does not:
1698: 
1699:     >>> np.linalg.det(np.eye(500) * 0.1)
1700:     0.0
1701:     >>> np.linalg.slogdet(np.eye(500) * 0.1)
1702:     (1, -1151.2925464970228)
1703: 
1704:     '''
1705:     a = asarray(a)
1706:     _assertNoEmpty2d(a)
1707:     _assertRankAtLeast2(a)
1708:     _assertNdSquareness(a)
1709:     t, result_t = _commonType(a)
1710:     real_t = _realType(result_t)
1711:     signature = 'D->Dd' if isComplexType(t) else 'd->dd'
1712:     sign, logdet = _umath_linalg.slogdet(a, signature=signature)
1713:     if isscalar(sign):
1714:         sign = sign.astype(result_t)
1715:     else:
1716:         sign = sign.astype(result_t, copy=False)
1717:     if isscalar(logdet):
1718:         logdet = logdet.astype(real_t)
1719:     else:
1720:         logdet = logdet.astype(real_t, copy=False)
1721:     return sign, logdet
1722: 
1723: def det(a):
1724:     '''
1725:     Compute the determinant of an array.
1726: 
1727:     Parameters
1728:     ----------
1729:     a : (..., M, M) array_like
1730:         Input array to compute determinants for.
1731: 
1732:     Returns
1733:     -------
1734:     det : (...) array_like
1735:         Determinant of `a`.
1736: 
1737:     See Also
1738:     --------
1739:     slogdet : Another way to representing the determinant, more suitable
1740:       for large matrices where underflow/overflow may occur.
1741: 
1742:     Notes
1743:     -----
1744: 
1745:     .. versionadded:: 1.8.0
1746: 
1747:     Broadcasting rules apply, see the `numpy.linalg` documentation for
1748:     details.
1749: 
1750:     The determinant is computed via LU factorization using the LAPACK
1751:     routine z/dgetrf.
1752: 
1753:     Examples
1754:     --------
1755:     The determinant of a 2-D array [[a, b], [c, d]] is ad - bc:
1756: 
1757:     >>> a = np.array([[1, 2], [3, 4]])
1758:     >>> np.linalg.det(a)
1759:     -2.0
1760: 
1761:     Computing determinants for a stack of matrices:
1762: 
1763:     >>> a = np.array([ [[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]] ])
1764:     >>> a.shape
1765:     (3, 2, 2)
1766:     >>> np.linalg.det(a)
1767:     array([-2., -3., -8.])
1768: 
1769:     '''
1770:     a = asarray(a)
1771:     _assertNoEmpty2d(a)
1772:     _assertRankAtLeast2(a)
1773:     _assertNdSquareness(a)
1774:     t, result_t = _commonType(a)
1775:     signature = 'D->D' if isComplexType(t) else 'd->d'
1776:     r = _umath_linalg.det(a, signature=signature)
1777:     if isscalar(r):
1778:         r = r.astype(result_t)
1779:     else:
1780:         r = r.astype(result_t, copy=False)
1781:     return r
1782: 
1783: # Linear Least Squares
1784: 
1785: def lstsq(a, b, rcond=-1):
1786:     '''
1787:     Return the least-squares solution to a linear matrix equation.
1788: 
1789:     Solves the equation `a x = b` by computing a vector `x` that
1790:     minimizes the Euclidean 2-norm `|| b - a x ||^2`.  The equation may
1791:     be under-, well-, or over- determined (i.e., the number of
1792:     linearly independent rows of `a` can be less than, equal to, or
1793:     greater than its number of linearly independent columns).  If `a`
1794:     is square and of full rank, then `x` (but for round-off error) is
1795:     the "exact" solution of the equation.
1796: 
1797:     Parameters
1798:     ----------
1799:     a : (M, N) array_like
1800:         "Coefficient" matrix.
1801:     b : {(M,), (M, K)} array_like
1802:         Ordinate or "dependent variable" values. If `b` is two-dimensional,
1803:         the least-squares solution is calculated for each of the `K` columns
1804:         of `b`.
1805:     rcond : float, optional
1806:         Cut-off ratio for small singular values of `a`.
1807:         Singular values are set to zero if they are smaller than `rcond`
1808:         times the largest singular value of `a`.
1809: 
1810:     Returns
1811:     -------
1812:     x : {(N,), (N, K)} ndarray
1813:         Least-squares solution. If `b` is two-dimensional,
1814:         the solutions are in the `K` columns of `x`.
1815:     residuals : {(), (1,), (K,)} ndarray
1816:         Sums of residuals; squared Euclidean 2-norm for each column in
1817:         ``b - a*x``.
1818:         If the rank of `a` is < N or M <= N, this is an empty array.
1819:         If `b` is 1-dimensional, this is a (1,) shape array.
1820:         Otherwise the shape is (K,).
1821:     rank : int
1822:         Rank of matrix `a`.
1823:     s : (min(M, N),) ndarray
1824:         Singular values of `a`.
1825: 
1826:     Raises
1827:     ------
1828:     LinAlgError
1829:         If computation does not converge.
1830: 
1831:     Notes
1832:     -----
1833:     If `b` is a matrix, then all array results are returned as matrices.
1834: 
1835:     Examples
1836:     --------
1837:     Fit a line, ``y = mx + c``, through some noisy data-points:
1838: 
1839:     >>> x = np.array([0, 1, 2, 3])
1840:     >>> y = np.array([-1, 0.2, 0.9, 2.1])
1841: 
1842:     By examining the coefficients, we see that the line should have a
1843:     gradient of roughly 1 and cut the y-axis at, more or less, -1.
1844: 
1845:     We can rewrite the line equation as ``y = Ap``, where ``A = [[x 1]]``
1846:     and ``p = [[m], [c]]``.  Now use `lstsq` to solve for `p`:
1847: 
1848:     >>> A = np.vstack([x, np.ones(len(x))]).T
1849:     >>> A
1850:     array([[ 0.,  1.],
1851:            [ 1.,  1.],
1852:            [ 2.,  1.],
1853:            [ 3.,  1.]])
1854: 
1855:     >>> m, c = np.linalg.lstsq(A, y)[0]
1856:     >>> print(m, c)
1857:     1.0 -0.95
1858: 
1859:     Plot the data along with the fitted line:
1860: 
1861:     >>> import matplotlib.pyplot as plt
1862:     >>> plt.plot(x, y, 'o', label='Original data', markersize=10)
1863:     >>> plt.plot(x, m*x + c, 'r', label='Fitted line')
1864:     >>> plt.legend()
1865:     >>> plt.show()
1866: 
1867:     '''
1868:     import math
1869:     a, _ = _makearray(a)
1870:     b, wrap = _makearray(b)
1871:     is_1d = len(b.shape) == 1
1872:     if is_1d:
1873:         b = b[:, newaxis]
1874:     _assertRank2(a, b)
1875:     m  = a.shape[0]
1876:     n  = a.shape[1]
1877:     n_rhs = b.shape[1]
1878:     ldb = max(n, m)
1879:     if m != b.shape[0]:
1880:         raise LinAlgError('Incompatible dimensions')
1881:     t, result_t = _commonType(a, b)
1882:     result_real_t = _realType(result_t)
1883:     real_t = _linalgRealType(t)
1884:     bstar = zeros((ldb, n_rhs), t)
1885:     bstar[:b.shape[0], :n_rhs] = b.copy()
1886:     a, bstar = _fastCopyAndTranspose(t, a, bstar)
1887:     a, bstar = _to_native_byte_order(a, bstar)
1888:     s = zeros((min(m, n),), real_t)
1889:     nlvl = max( 0, int( math.log( float(min(m, n))/2. ) ) + 1 )
1890:     iwork = zeros((3*min(m, n)*nlvl+11*min(m, n),), fortran_int)
1891:     if isComplexType(t):
1892:         lapack_routine = lapack_lite.zgelsd
1893:         lwork = 1
1894:         rwork = zeros((lwork,), real_t)
1895:         work = zeros((lwork,), t)
1896:         results = lapack_routine(m, n, n_rhs, a, m, bstar, ldb, s, rcond,
1897:                                  0, work, -1, rwork, iwork, 0)
1898:         lwork = int(abs(work[0]))
1899:         rwork = zeros((lwork,), real_t)
1900:         a_real = zeros((m, n), real_t)
1901:         bstar_real = zeros((ldb, n_rhs,), real_t)
1902:         results = lapack_lite.dgelsd(m, n, n_rhs, a_real, m,
1903:                                      bstar_real, ldb, s, rcond,
1904:                                      0, rwork, -1, iwork, 0)
1905:         lrwork = int(rwork[0])
1906:         work = zeros((lwork,), t)
1907:         rwork = zeros((lrwork,), real_t)
1908:         results = lapack_routine(m, n, n_rhs, a, m, bstar, ldb, s, rcond,
1909:                                  0, work, lwork, rwork, iwork, 0)
1910:     else:
1911:         lapack_routine = lapack_lite.dgelsd
1912:         lwork = 1
1913:         work = zeros((lwork,), t)
1914:         results = lapack_routine(m, n, n_rhs, a, m, bstar, ldb, s, rcond,
1915:                                  0, work, -1, iwork, 0)
1916:         lwork = int(work[0])
1917:         work = zeros((lwork,), t)
1918:         results = lapack_routine(m, n, n_rhs, a, m, bstar, ldb, s, rcond,
1919:                                  0, work, lwork, iwork, 0)
1920:     if results['info'] > 0:
1921:         raise LinAlgError('SVD did not converge in Linear Least Squares')
1922:     resids = array([], result_real_t)
1923:     if is_1d:
1924:         x = array(ravel(bstar)[:n], dtype=result_t, copy=True)
1925:         if results['rank'] == n and m > n:
1926:             if isComplexType(t):
1927:                 resids = array([sum(abs(ravel(bstar)[n:])**2)],
1928:                                dtype=result_real_t)
1929:             else:
1930:                 resids = array([sum((ravel(bstar)[n:])**2)],
1931:                                dtype=result_real_t)
1932:     else:
1933:         x = array(transpose(bstar)[:n,:], dtype=result_t, copy=True)
1934:         if results['rank'] == n and m > n:
1935:             if isComplexType(t):
1936:                 resids = sum(abs(transpose(bstar)[n:,:])**2, axis=0).astype(
1937:                     result_real_t, copy=False)
1938:             else:
1939:                 resids = sum((transpose(bstar)[n:,:])**2, axis=0).astype(
1940:                     result_real_t, copy=False)
1941: 
1942:     st = s[:min(n, m)].astype(result_real_t, copy=True)
1943:     return wrap(x), wrap(resids), results['rank'], st
1944: 
1945: 
1946: def _multi_svd_norm(x, row_axis, col_axis, op):
1947:     '''Compute a function of the singular values of the 2-D matrices in `x`.
1948: 
1949:     This is a private utility function used by numpy.linalg.norm().
1950: 
1951:     Parameters
1952:     ----------
1953:     x : ndarray
1954:     row_axis, col_axis : int
1955:         The axes of `x` that hold the 2-D matrices.
1956:     op : callable
1957:         This should be either numpy.amin or numpy.amax or numpy.sum.
1958: 
1959:     Returns
1960:     -------
1961:     result : float or ndarray
1962:         If `x` is 2-D, the return values is a float.
1963:         Otherwise, it is an array with ``x.ndim - 2`` dimensions.
1964:         The return values are either the minimum or maximum or sum of the
1965:         singular values of the matrices, depending on whether `op`
1966:         is `numpy.amin` or `numpy.amax` or `numpy.sum`.
1967: 
1968:     '''
1969:     if row_axis > col_axis:
1970:         row_axis -= 1
1971:     y = rollaxis(rollaxis(x, col_axis, x.ndim), row_axis, -1)
1972:     result = op(svd(y, compute_uv=0), axis=-1)
1973:     return result
1974: 
1975: 
1976: def norm(x, ord=None, axis=None, keepdims=False):
1977:     '''
1978:     Matrix or vector norm.
1979: 
1980:     This function is able to return one of eight different matrix norms,
1981:     or one of an infinite number of vector norms (described below), depending
1982:     on the value of the ``ord`` parameter.
1983: 
1984:     Parameters
1985:     ----------
1986:     x : array_like
1987:         Input array.  If `axis` is None, `x` must be 1-D or 2-D.
1988:     ord : {non-zero int, inf, -inf, 'fro', 'nuc'}, optional
1989:         Order of the norm (see table under ``Notes``). inf means numpy's
1990:         `inf` object.
1991:     axis : {int, 2-tuple of ints, None}, optional
1992:         If `axis` is an integer, it specifies the axis of `x` along which to
1993:         compute the vector norms.  If `axis` is a 2-tuple, it specifies the
1994:         axes that hold 2-D matrices, and the matrix norms of these matrices
1995:         are computed.  If `axis` is None then either a vector norm (when `x`
1996:         is 1-D) or a matrix norm (when `x` is 2-D) is returned.
1997:     keepdims : bool, optional
1998:         If this is set to True, the axes which are normed over are left in the
1999:         result as dimensions with size one.  With this option the result will
2000:         broadcast correctly against the original `x`.
2001: 
2002:         .. versionadded:: 1.10.0
2003: 
2004:     Returns
2005:     -------
2006:     n : float or ndarray
2007:         Norm of the matrix or vector(s).
2008: 
2009:     Notes
2010:     -----
2011:     For values of ``ord <= 0``, the result is, strictly speaking, not a
2012:     mathematical 'norm', but it may still be useful for various numerical
2013:     purposes.
2014: 
2015:     The following norms can be calculated:
2016: 
2017:     =====  ============================  ==========================
2018:     ord    norm for matrices             norm for vectors
2019:     =====  ============================  ==========================
2020:     None   Frobenius norm                2-norm
2021:     'fro'  Frobenius norm                --
2022:     'nuc'  nuclear norm                  --
2023:     inf    max(sum(abs(x), axis=1))      max(abs(x))
2024:     -inf   min(sum(abs(x), axis=1))      min(abs(x))
2025:     0      --                            sum(x != 0)
2026:     1      max(sum(abs(x), axis=0))      as below
2027:     -1     min(sum(abs(x), axis=0))      as below
2028:     2      2-norm (largest sing. value)  as below
2029:     -2     smallest singular value       as below
2030:     other  --                            sum(abs(x)**ord)**(1./ord)
2031:     =====  ============================  ==========================
2032: 
2033:     The Frobenius norm is given by [1]_:
2034: 
2035:         :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`
2036: 
2037:     The nuclear norm is the sum of the singular values.
2038: 
2039:     References
2040:     ----------
2041:     .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,
2042:            Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15
2043: 
2044:     Examples
2045:     --------
2046:     >>> from numpy import linalg as LA
2047:     >>> a = np.arange(9) - 4
2048:     >>> a
2049:     array([-4, -3, -2, -1,  0,  1,  2,  3,  4])
2050:     >>> b = a.reshape((3, 3))
2051:     >>> b
2052:     array([[-4, -3, -2],
2053:            [-1,  0,  1],
2054:            [ 2,  3,  4]])
2055: 
2056:     >>> LA.norm(a)
2057:     7.745966692414834
2058:     >>> LA.norm(b)
2059:     7.745966692414834
2060:     >>> LA.norm(b, 'fro')
2061:     7.745966692414834
2062:     >>> LA.norm(a, np.inf)
2063:     4.0
2064:     >>> LA.norm(b, np.inf)
2065:     9.0
2066:     >>> LA.norm(a, -np.inf)
2067:     0.0
2068:     >>> LA.norm(b, -np.inf)
2069:     2.0
2070: 
2071:     >>> LA.norm(a, 1)
2072:     20.0
2073:     >>> LA.norm(b, 1)
2074:     7.0
2075:     >>> LA.norm(a, -1)
2076:     -4.6566128774142013e-010
2077:     >>> LA.norm(b, -1)
2078:     6.0
2079:     >>> LA.norm(a, 2)
2080:     7.745966692414834
2081:     >>> LA.norm(b, 2)
2082:     7.3484692283495345
2083: 
2084:     >>> LA.norm(a, -2)
2085:     nan
2086:     >>> LA.norm(b, -2)
2087:     1.8570331885190563e-016
2088:     >>> LA.norm(a, 3)
2089:     5.8480354764257312
2090:     >>> LA.norm(a, -3)
2091:     nan
2092: 
2093:     Using the `axis` argument to compute vector norms:
2094: 
2095:     >>> c = np.array([[ 1, 2, 3],
2096:     ...               [-1, 1, 4]])
2097:     >>> LA.norm(c, axis=0)
2098:     array([ 1.41421356,  2.23606798,  5.        ])
2099:     >>> LA.norm(c, axis=1)
2100:     array([ 3.74165739,  4.24264069])
2101:     >>> LA.norm(c, ord=1, axis=1)
2102:     array([ 6.,  6.])
2103: 
2104:     Using the `axis` argument to compute matrix norms:
2105: 
2106:     >>> m = np.arange(8).reshape(2,2,2)
2107:     >>> LA.norm(m, axis=(1,2))
2108:     array([  3.74165739,  11.22497216])
2109:     >>> LA.norm(m[0, :, :]), LA.norm(m[1, :, :])
2110:     (3.7416573867739413, 11.224972160321824)
2111: 
2112:     '''
2113:     x = asarray(x)
2114: 
2115:     if not issubclass(x.dtype.type, inexact):
2116:         x = x.astype(float)
2117: 
2118:     # Immediately handle some default, simple, fast, and common cases.
2119:     if axis is None:
2120:         ndim = x.ndim
2121:         if ((ord is None) or
2122:             (ord in ('f', 'fro') and ndim == 2) or
2123:             (ord == 2 and ndim == 1)):
2124: 
2125:             x = x.ravel(order='K')
2126:             if isComplexType(x.dtype.type):
2127:                 sqnorm = dot(x.real, x.real) + dot(x.imag, x.imag)
2128:             else:
2129:                 sqnorm = dot(x, x)
2130:             ret = sqrt(sqnorm)
2131:             if keepdims:
2132:                 ret = ret.reshape(ndim*[1])
2133:             return ret
2134: 
2135:     # Normalize the `axis` argument to a tuple.
2136:     nd = x.ndim
2137:     if axis is None:
2138:         axis = tuple(range(nd))
2139:     elif not isinstance(axis, tuple):
2140:         try:
2141:             axis = int(axis)
2142:         except:
2143:             raise TypeError("'axis' must be None, an integer or a tuple of integers")
2144:         axis = (axis,)
2145: 
2146:     if len(axis) == 1:
2147:         if ord == Inf:
2148:             return abs(x).max(axis=axis, keepdims=keepdims)
2149:         elif ord == -Inf:
2150:             return abs(x).min(axis=axis, keepdims=keepdims)
2151:         elif ord == 0:
2152:             # Zero norm
2153:             return (x != 0).astype(float).sum(axis=axis, keepdims=keepdims)
2154:         elif ord == 1:
2155:             # special case for speedup
2156:             return add.reduce(abs(x), axis=axis, keepdims=keepdims)
2157:         elif ord is None or ord == 2:
2158:             # special case for speedup
2159:             s = (x.conj() * x).real
2160:             return sqrt(add.reduce(s, axis=axis, keepdims=keepdims))
2161:         else:
2162:             try:
2163:                 ord + 1
2164:             except TypeError:
2165:                 raise ValueError("Invalid norm order for vectors.")
2166:             if x.dtype.type is longdouble:
2167:                 # Convert to a float type, so integer arrays give
2168:                 # float results.  Don't apply asfarray to longdouble arrays,
2169:                 # because it will downcast to float64.
2170:                 absx = abs(x)
2171:             else:
2172:                 absx = x if isComplexType(x.dtype.type) else asfarray(x)
2173:                 if absx.dtype is x.dtype:
2174:                     absx = abs(absx)
2175:                 else:
2176:                     # if the type changed, we can safely overwrite absx
2177:                     abs(absx, out=absx)
2178:             absx **= ord
2179:             return add.reduce(absx, axis=axis, keepdims=keepdims) ** (1.0 / ord)
2180:     elif len(axis) == 2:
2181:         row_axis, col_axis = axis
2182:         if row_axis < 0:
2183:             row_axis += nd
2184:         if col_axis < 0:
2185:             col_axis += nd
2186:         if not (0 <= row_axis < nd and 0 <= col_axis < nd):
2187:             raise ValueError('Invalid axis %r for an array with shape %r' %
2188:                              (axis, x.shape))
2189:         if row_axis == col_axis:
2190:             raise ValueError('Duplicate axes given.')
2191:         if ord == 2:
2192:             ret =  _multi_svd_norm(x, row_axis, col_axis, amax)
2193:         elif ord == -2:
2194:             ret = _multi_svd_norm(x, row_axis, col_axis, amin)
2195:         elif ord == 1:
2196:             if col_axis > row_axis:
2197:                 col_axis -= 1
2198:             ret = add.reduce(abs(x), axis=row_axis).max(axis=col_axis)
2199:         elif ord == Inf:
2200:             if row_axis > col_axis:
2201:                 row_axis -= 1
2202:             ret = add.reduce(abs(x), axis=col_axis).max(axis=row_axis)
2203:         elif ord == -1:
2204:             if col_axis > row_axis:
2205:                 col_axis -= 1
2206:             ret = add.reduce(abs(x), axis=row_axis).min(axis=col_axis)
2207:         elif ord == -Inf:
2208:             if row_axis > col_axis:
2209:                 row_axis -= 1
2210:             ret = add.reduce(abs(x), axis=col_axis).min(axis=row_axis)
2211:         elif ord in [None, 'fro', 'f']:
2212:             ret = sqrt(add.reduce((x.conj() * x).real, axis=axis))
2213:         elif ord == 'nuc':
2214:             ret = _multi_svd_norm(x, row_axis, col_axis, sum)
2215:         else:
2216:             raise ValueError("Invalid norm order for matrices.")
2217:         if keepdims:
2218:             ret_shape = list(x.shape)
2219:             ret_shape[axis[0]] = 1
2220:             ret_shape[axis[1]] = 1
2221:             ret = ret.reshape(ret_shape)
2222:         return ret
2223:     else:
2224:         raise ValueError("Improper number of dimensions to norm.")
2225: 
2226: 
2227: # multi_dot
2228: 
2229: def multi_dot(arrays):
2230:     '''
2231:     Compute the dot product of two or more arrays in a single function call,
2232:     while automatically selecting the fastest evaluation order.
2233: 
2234:     `multi_dot` chains `numpy.dot` and uses optimal parenthesization
2235:     of the matrices [1]_ [2]_. Depending on the shapes of the matrices,
2236:     this can speed up the multiplication a lot.
2237: 
2238:     If the first argument is 1-D it is treated as a row vector.
2239:     If the last argument is 1-D it is treated as a column vector.
2240:     The other arguments must be 2-D.
2241: 
2242:     Think of `multi_dot` as::
2243: 
2244:         def multi_dot(arrays): return functools.reduce(np.dot, arrays)
2245: 
2246: 
2247:     Parameters
2248:     ----------
2249:     arrays : sequence of array_like
2250:         If the first argument is 1-D it is treated as row vector.
2251:         If the last argument is 1-D it is treated as column vector.
2252:         The other arguments must be 2-D.
2253: 
2254:     Returns
2255:     -------
2256:     output : ndarray
2257:         Returns the dot product of the supplied arrays.
2258: 
2259:     See Also
2260:     --------
2261:     dot : dot multiplication with two arguments.
2262: 
2263:     References
2264:     ----------
2265: 
2266:     .. [1] Cormen, "Introduction to Algorithms", Chapter 15.2, p. 370-378
2267:     .. [2] http://en.wikipedia.org/wiki/Matrix_chain_multiplication
2268: 
2269:     Examples
2270:     --------
2271:     `multi_dot` allows you to write::
2272: 
2273:     >>> from numpy.linalg import multi_dot
2274:     >>> # Prepare some data
2275:     >>> A = np.random.random(10000, 100)
2276:     >>> B = np.random.random(100, 1000)
2277:     >>> C = np.random.random(1000, 5)
2278:     >>> D = np.random.random(5, 333)
2279:     >>> # the actual dot multiplication
2280:     >>> multi_dot([A, B, C, D])
2281: 
2282:     instead of::
2283: 
2284:     >>> np.dot(np.dot(np.dot(A, B), C), D)
2285:     >>> # or
2286:     >>> A.dot(B).dot(C).dot(D)
2287: 
2288: 
2289:     Example: multiplication costs of different parenthesizations
2290:     ------------------------------------------------------------
2291: 
2292:     The cost for a matrix multiplication can be calculated with the
2293:     following function::
2294: 
2295:         def cost(A, B): return A.shape[0] * A.shape[1] * B.shape[1]
2296: 
2297:     Let's assume we have three matrices
2298:     :math:`A_{10x100}, B_{100x5}, C_{5x50}$`.
2299: 
2300:     The costs for the two different parenthesizations are as follows::
2301: 
2302:         cost((AB)C) = 10*100*5 + 10*5*50   = 5000 + 2500   = 7500
2303:         cost(A(BC)) = 10*100*50 + 100*5*50 = 50000 + 25000 = 75000
2304: 
2305:     '''
2306:     n = len(arrays)
2307:     # optimization only makes sense for len(arrays) > 2
2308:     if n < 2:
2309:         raise ValueError("Expecting at least two arrays.")
2310:     elif n == 2:
2311:         return dot(arrays[0], arrays[1])
2312: 
2313:     arrays = [asanyarray(a) for a in arrays]
2314: 
2315:     # save original ndim to reshape the result array into the proper form later
2316:     ndim_first, ndim_last = arrays[0].ndim, arrays[-1].ndim
2317:     # Explicitly convert vectors to 2D arrays to keep the logic of the internal
2318:     # _multi_dot_* functions as simple as possible.
2319:     if arrays[0].ndim == 1:
2320:         arrays[0] = atleast_2d(arrays[0])
2321:     if arrays[-1].ndim == 1:
2322:         arrays[-1] = atleast_2d(arrays[-1]).T
2323:     _assertRank2(*arrays)
2324: 
2325:     # _multi_dot_three is much faster than _multi_dot_matrix_chain_order
2326:     if n == 3:
2327:         result = _multi_dot_three(arrays[0], arrays[1], arrays[2])
2328:     else:
2329:         order = _multi_dot_matrix_chain_order(arrays)
2330:         result = _multi_dot(arrays, order, 0, n - 1)
2331: 
2332:     # return proper shape
2333:     if ndim_first == 1 and ndim_last == 1:
2334:         return result[0, 0]  # scalar
2335:     elif ndim_first == 1 or ndim_last == 1:
2336:         return result.ravel()  # 1-D
2337:     else:
2338:         return result
2339: 
2340: 
2341: def _multi_dot_three(A, B, C):
2342:     '''
2343:     Find the best order for three arrays and do the multiplication.
2344: 
2345:     For three arguments `_multi_dot_three` is approximately 15 times faster
2346:     than `_multi_dot_matrix_chain_order`
2347: 
2348:     '''
2349:     # cost1 = cost((AB)C)
2350:     cost1 = (A.shape[0] * A.shape[1] * B.shape[1] +  # (AB)
2351:              A.shape[0] * B.shape[1] * C.shape[1])   # (--)C
2352:     # cost2 = cost((AB)C)
2353:     cost2 = (B.shape[0] * B.shape[1] * C.shape[1] +  #  (BC)
2354:              A.shape[0] * A.shape[1] * C.shape[1])   # A(--)
2355: 
2356:     if cost1 < cost2:
2357:         return dot(dot(A, B), C)
2358:     else:
2359:         return dot(A, dot(B, C))
2360: 
2361: 
2362: def _multi_dot_matrix_chain_order(arrays, return_costs=False):
2363:     '''
2364:     Return a np.array that encodes the optimal order of mutiplications.
2365: 
2366:     The optimal order array is then used by `_multi_dot()` to do the
2367:     multiplication.
2368: 
2369:     Also return the cost matrix if `return_costs` is `True`
2370: 
2371:     The implementation CLOSELY follows Cormen, "Introduction to Algorithms",
2372:     Chapter 15.2, p. 370-378.  Note that Cormen uses 1-based indices.
2373: 
2374:         cost[i, j] = min([
2375:             cost[prefix] + cost[suffix] + cost_mult(prefix, suffix)
2376:             for k in range(i, j)])
2377: 
2378:     '''
2379:     n = len(arrays)
2380:     # p stores the dimensions of the matrices
2381:     # Example for p: A_{10x100}, B_{100x5}, C_{5x50} --> p = [10, 100, 5, 50]
2382:     p = [a.shape[0] for a in arrays] + [arrays[-1].shape[1]]
2383:     # m is a matrix of costs of the subproblems
2384:     # m[i,j]: min number of scalar multiplications needed to compute A_{i..j}
2385:     m = zeros((n, n), dtype=double)
2386:     # s is the actual ordering
2387:     # s[i, j] is the value of k at which we split the product A_i..A_j
2388:     s = empty((n, n), dtype=intp)
2389: 
2390:     for l in range(1, n):
2391:         for i in range(n - l):
2392:             j = i + l
2393:             m[i, j] = Inf
2394:             for k in range(i, j):
2395:                 q = m[i, k] + m[k+1, j] + p[i]*p[k+1]*p[j+1]
2396:                 if q < m[i, j]:
2397:                     m[i, j] = q
2398:                     s[i, j] = k  # Note that Cormen uses 1-based index
2399: 
2400:     return (s, m) if return_costs else s
2401: 
2402: 
2403: def _multi_dot(arrays, order, i, j):
2404:     '''Actually do the multiplication with the given order.'''
2405:     if i == j:
2406:         return arrays[i]
2407:     else:
2408:         return dot(_multi_dot(arrays, order, i, order[i, j]),
2409:                    _multi_dot(arrays, order, order[i, j] + 1, j))
2410: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_134377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 10, (-1)), 'str', 'Lite version of scipy.linalg.\n\nNotes\n-----\nThis module is a lite version of the linalg.py module in SciPy which\ncontains high-level Python interface to the LAPACK library.  The lite\nversion only accesses the following LAPACK functions: dgesv, zgesv,\ndgeev, zgeev, dgesdd, zgesdd, dgelsd, zgelsd, dsyevd, zheevd, dgetrf,\nzgetrf, dpotrf, zpotrf, dgeqrf, zgeqrf, zungqr, dorgqr.\n')

# Assigning a List to a Name (line 14):

# Assigning a List to a Name (line 14):
__all__ = ['matrix_power', 'solve', 'tensorsolve', 'tensorinv', 'inv', 'cholesky', 'eigvals', 'eigvalsh', 'pinv', 'slogdet', 'det', 'svd', 'eig', 'eigh', 'lstsq', 'norm', 'qr', 'cond', 'matrix_rank', 'LinAlgError', 'multi_dot']
module_type_store.set_exportable_members(['matrix_power', 'solve', 'tensorsolve', 'tensorinv', 'inv', 'cholesky', 'eigvals', 'eigvalsh', 'pinv', 'slogdet', 'det', 'svd', 'eig', 'eigh', 'lstsq', 'norm', 'qr', 'cond', 'matrix_rank', 'LinAlgError', 'multi_dot'])

# Obtaining an instance of the builtin type 'list' (line 14)
list_134378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 14)
# Adding element type (line 14)
str_134379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 11), 'str', 'matrix_power')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134379)
# Adding element type (line 14)
str_134380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 27), 'str', 'solve')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134380)
# Adding element type (line 14)
str_134381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 36), 'str', 'tensorsolve')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134381)
# Adding element type (line 14)
str_134382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 51), 'str', 'tensorinv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134382)
# Adding element type (line 14)
str_134383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, 64), 'str', 'inv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134383)
# Adding element type (line 14)
str_134384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 11), 'str', 'cholesky')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134384)
# Adding element type (line 14)
str_134385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 23), 'str', 'eigvals')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134385)
# Adding element type (line 14)
str_134386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 34), 'str', 'eigvalsh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134386)
# Adding element type (line 14)
str_134387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 46), 'str', 'pinv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134387)
# Adding element type (line 14)
str_134388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 54), 'str', 'slogdet')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134388)
# Adding element type (line 14)
str_134389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 15, 65), 'str', 'det')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134389)
# Adding element type (line 14)
str_134390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 11), 'str', 'svd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134390)
# Adding element type (line 14)
str_134391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 18), 'str', 'eig')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134391)
# Adding element type (line 14)
str_134392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 25), 'str', 'eigh')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134392)
# Adding element type (line 14)
str_134393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 33), 'str', 'lstsq')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134393)
# Adding element type (line 14)
str_134394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 42), 'str', 'norm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134394)
# Adding element type (line 14)
str_134395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 50), 'str', 'qr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134395)
# Adding element type (line 14)
str_134396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 56), 'str', 'cond')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134396)
# Adding element type (line 14)
str_134397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 16, 64), 'str', 'matrix_rank')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134397)
# Adding element type (line 14)
str_134398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 11), 'str', 'LinAlgError')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134398)
# Adding element type (line 14)
str_134399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 26), 'str', 'multi_dot')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 14, 10), list_134378, str_134399)

# Assigning a type to the variable '__all__' (line 14)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), '__all__', list_134378)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'import warnings' statement (line 19)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from numpy.core import array, asarray, zeros, empty, empty_like, transpose, intc, single, double, csingle, cdouble, inexact, complexfloating, newaxis, ravel, all, Inf, dot, add, multiply, sqrt, maximum, fastCopyAndTranspose, sum, isfinite, size, finfo, errstate, geterrobj, longdouble, rollaxis, amin, amax, product, abs, broadcast, atleast_2d, intp, asanyarray, isscalar' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/linalg/')
import_134400 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy.core')

if (type(import_134400) is not StypyTypeError):

    if (import_134400 != 'pyd_module'):
        __import__(import_134400)
        sys_modules_134401 = sys.modules[import_134400]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy.core', sys_modules_134401.module_type_store, module_type_store, ['array', 'asarray', 'zeros', 'empty', 'empty_like', 'transpose', 'intc', 'single', 'double', 'csingle', 'cdouble', 'inexact', 'complexfloating', 'newaxis', 'ravel', 'all', 'Inf', 'dot', 'add', 'multiply', 'sqrt', 'maximum', 'fastCopyAndTranspose', 'sum', 'isfinite', 'size', 'finfo', 'errstate', 'geterrobj', 'longdouble', 'rollaxis', 'amin', 'amax', 'product', 'abs', 'broadcast', 'atleast_2d', 'intp', 'asanyarray', 'isscalar'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_134401, sys_modules_134401.module_type_store, module_type_store)
    else:
        from numpy.core import array, asarray, zeros, empty, empty_like, transpose, intc, single, double, csingle, cdouble, inexact, complexfloating, newaxis, ravel, all, Inf, dot, add, multiply, sqrt, maximum, fastCopyAndTranspose, sum, isfinite, size, finfo, errstate, geterrobj, longdouble, rollaxis, amin, amax, product, abs, broadcast, atleast_2d, intp, asanyarray, isscalar

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy.core', None, module_type_store, ['array', 'asarray', 'zeros', 'empty', 'empty_like', 'transpose', 'intc', 'single', 'double', 'csingle', 'cdouble', 'inexact', 'complexfloating', 'newaxis', 'ravel', 'all', 'Inf', 'dot', 'add', 'multiply', 'sqrt', 'maximum', 'fastCopyAndTranspose', 'sum', 'isfinite', 'size', 'finfo', 'errstate', 'geterrobj', 'longdouble', 'rollaxis', 'amin', 'amax', 'product', 'abs', 'broadcast', 'atleast_2d', 'intp', 'asanyarray', 'isscalar'], [array, asarray, zeros, empty, empty_like, transpose, intc, single, double, csingle, cdouble, inexact, complexfloating, newaxis, ravel, all, Inf, dot, add, multiply, sqrt, maximum, fastCopyAndTranspose, sum, isfinite, size, finfo, errstate, geterrobj, longdouble, rollaxis, amin, amax, product, abs, broadcast, atleast_2d, intp, asanyarray, isscalar])

else:
    # Assigning a type to the variable 'numpy.core' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy.core', import_134400)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/linalg/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from numpy.lib import triu, asfarray' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/linalg/')
import_134402 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.lib')

if (type(import_134402) is not StypyTypeError):

    if (import_134402 != 'pyd_module'):
        __import__(import_134402)
        sys_modules_134403 = sys.modules[import_134402]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.lib', sys_modules_134403.module_type_store, module_type_store, ['triu', 'asfarray'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_134403, sys_modules_134403.module_type_store, module_type_store)
    else:
        from numpy.lib import triu, asfarray

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.lib', None, module_type_store, ['triu', 'asfarray'], [triu, asfarray])

else:
    # Assigning a type to the variable 'numpy.lib' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.lib', import_134402)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/linalg/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from numpy.linalg import lapack_lite, _umath_linalg' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/linalg/')
import_134404 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.linalg')

if (type(import_134404) is not StypyTypeError):

    if (import_134404 != 'pyd_module'):
        __import__(import_134404)
        sys_modules_134405 = sys.modules[import_134404]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.linalg', sys_modules_134405.module_type_store, module_type_store, ['lapack_lite', '_umath_linalg'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_134405, sys_modules_134405.module_type_store, module_type_store)
    else:
        from numpy.linalg import lapack_lite, _umath_linalg

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.linalg', None, module_type_store, ['lapack_lite', '_umath_linalg'], [lapack_lite, _umath_linalg])

else:
    # Assigning a type to the variable 'numpy.linalg' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.linalg', import_134404)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/linalg/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from numpy.matrixlib.defmatrix import matrix_power' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/linalg/')
import_134406 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.matrixlib.defmatrix')

if (type(import_134406) is not StypyTypeError):

    if (import_134406 != 'pyd_module'):
        __import__(import_134406)
        sys_modules_134407 = sys.modules[import_134406]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.matrixlib.defmatrix', sys_modules_134407.module_type_store, module_type_store, ['matrix_power'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_134407, sys_modules_134407.module_type_store, module_type_store)
    else:
        from numpy.matrixlib.defmatrix import matrix_power

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.matrixlib.defmatrix', None, module_type_store, ['matrix_power'], [matrix_power])

else:
    # Assigning a type to the variable 'numpy.matrixlib.defmatrix' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.matrixlib.defmatrix', import_134406)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/linalg/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from numpy.compat import asbytes' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/linalg/')
import_134408 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'numpy.compat')

if (type(import_134408) is not StypyTypeError):

    if (import_134408 != 'pyd_module'):
        __import__(import_134408)
        sys_modules_134409 = sys.modules[import_134408]
        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'numpy.compat', sys_modules_134409.module_type_store, module_type_store, ['asbytes'])
        nest_module(stypy.reporting.localization.Localization(__file__, 31, 0), __file__, sys_modules_134409, sys_modules_134409.module_type_store, module_type_store)
    else:
        from numpy.compat import asbytes

        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'numpy.compat', None, module_type_store, ['asbytes'], [asbytes])

else:
    # Assigning a type to the variable 'numpy.compat' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'numpy.compat', import_134408)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/linalg/')


# Assigning a Call to a Name (line 34):

# Assigning a Call to a Name (line 34):

# Call to asbytes(...): (line 34)
# Processing the call arguments (line 34)
str_134411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 13), 'str', 'N')
# Processing the call keyword arguments (line 34)
kwargs_134412 = {}
# Getting the type of 'asbytes' (line 34)
asbytes_134410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 5), 'asbytes', False)
# Calling asbytes(args, kwargs) (line 34)
asbytes_call_result_134413 = invoke(stypy.reporting.localization.Localization(__file__, 34, 5), asbytes_134410, *[str_134411], **kwargs_134412)

# Assigning a type to the variable '_N' (line 34)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), '_N', asbytes_call_result_134413)

# Assigning a Call to a Name (line 35):

# Assigning a Call to a Name (line 35):

# Call to asbytes(...): (line 35)
# Processing the call arguments (line 35)
str_134415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 13), 'str', 'V')
# Processing the call keyword arguments (line 35)
kwargs_134416 = {}
# Getting the type of 'asbytes' (line 35)
asbytes_134414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 5), 'asbytes', False)
# Calling asbytes(args, kwargs) (line 35)
asbytes_call_result_134417 = invoke(stypy.reporting.localization.Localization(__file__, 35, 5), asbytes_134414, *[str_134415], **kwargs_134416)

# Assigning a type to the variable '_V' (line 35)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), '_V', asbytes_call_result_134417)

# Assigning a Call to a Name (line 36):

# Assigning a Call to a Name (line 36):

# Call to asbytes(...): (line 36)
# Processing the call arguments (line 36)
str_134419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 13), 'str', 'A')
# Processing the call keyword arguments (line 36)
kwargs_134420 = {}
# Getting the type of 'asbytes' (line 36)
asbytes_134418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 5), 'asbytes', False)
# Calling asbytes(args, kwargs) (line 36)
asbytes_call_result_134421 = invoke(stypy.reporting.localization.Localization(__file__, 36, 5), asbytes_134418, *[str_134419], **kwargs_134420)

# Assigning a type to the variable '_A' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), '_A', asbytes_call_result_134421)

# Assigning a Call to a Name (line 37):

# Assigning a Call to a Name (line 37):

# Call to asbytes(...): (line 37)
# Processing the call arguments (line 37)
str_134423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 13), 'str', 'S')
# Processing the call keyword arguments (line 37)
kwargs_134424 = {}
# Getting the type of 'asbytes' (line 37)
asbytes_134422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 5), 'asbytes', False)
# Calling asbytes(args, kwargs) (line 37)
asbytes_call_result_134425 = invoke(stypy.reporting.localization.Localization(__file__, 37, 5), asbytes_134422, *[str_134423], **kwargs_134424)

# Assigning a type to the variable '_S' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), '_S', asbytes_call_result_134425)

# Assigning a Call to a Name (line 38):

# Assigning a Call to a Name (line 38):

# Call to asbytes(...): (line 38)
# Processing the call arguments (line 38)
str_134427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 13), 'str', 'L')
# Processing the call keyword arguments (line 38)
kwargs_134428 = {}
# Getting the type of 'asbytes' (line 38)
asbytes_134426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 5), 'asbytes', False)
# Calling asbytes(args, kwargs) (line 38)
asbytes_call_result_134429 = invoke(stypy.reporting.localization.Localization(__file__, 38, 5), asbytes_134426, *[str_134427], **kwargs_134428)

# Assigning a type to the variable '_L' (line 38)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), '_L', asbytes_call_result_134429)

# Assigning a Name to a Name (line 40):

# Assigning a Name to a Name (line 40):
# Getting the type of 'intc' (line 40)
intc_134430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 14), 'intc')
# Assigning a type to the variable 'fortran_int' (line 40)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'fortran_int', intc_134430)
# Declaration of the 'LinAlgError' class
# Getting the type of 'Exception' (line 43)
Exception_134431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 18), 'Exception')

class LinAlgError(Exception_134431, ):
    str_134432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, (-1)), 'str', '\n    Generic Python-exception-derived object raised by linalg functions.\n\n    General purpose exception class, derived from Python\'s exception.Exception\n    class, programmatically raised in linalg functions when a Linear\n    Algebra-related condition would prevent further correct execution of the\n    function.\n\n    Parameters\n    ----------\n    None\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> LA.inv(np.zeros((2,2)))\n    Traceback (most recent call last):\n      File "<stdin>", line 1, in <module>\n      File "...linalg.py", line 350,\n        in inv return wrap(solve(a, identity(a.shape[0], dtype=a.dtype)))\n      File "...linalg.py", line 249,\n        in solve\n        raise LinAlgError(\'Singular matrix\')\n    numpy.linalg.LinAlgError: Singular matrix\n\n    ')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 43, 0, False)
        # Assigning a type to the variable 'self' (line 44)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinAlgError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LinAlgError' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'LinAlgError', LinAlgError)

# Assigning a Name to a Name (line 74):

# Assigning a Name to a Name (line 74):
# Getting the type of 'None' (line 74)
None_134433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 23), 'None')
# Assigning a type to the variable '_linalg_error_extobj' (line 74)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 0), '_linalg_error_extobj', None_134433)

@norecursion
def _determine_error_states(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_determine_error_states'
    module_type_store = module_type_store.open_function_context('_determine_error_states', 76, 0, False)
    
    # Passed parameters checking function
    _determine_error_states.stypy_localization = localization
    _determine_error_states.stypy_type_of_self = None
    _determine_error_states.stypy_type_store = module_type_store
    _determine_error_states.stypy_function_name = '_determine_error_states'
    _determine_error_states.stypy_param_names_list = []
    _determine_error_states.stypy_varargs_param_name = None
    _determine_error_states.stypy_kwargs_param_name = None
    _determine_error_states.stypy_call_defaults = defaults
    _determine_error_states.stypy_call_varargs = varargs
    _determine_error_states.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_determine_error_states', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_determine_error_states', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_determine_error_states(...)' code ##################

    # Marking variables as global (line 77)
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 77, 4), '_linalg_error_extobj')
    
    # Assigning a Call to a Name (line 78):
    
    # Assigning a Call to a Name (line 78):
    
    # Call to geterrobj(...): (line 78)
    # Processing the call keyword arguments (line 78)
    kwargs_134435 = {}
    # Getting the type of 'geterrobj' (line 78)
    geterrobj_134434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 13), 'geterrobj', False)
    # Calling geterrobj(args, kwargs) (line 78)
    geterrobj_call_result_134436 = invoke(stypy.reporting.localization.Localization(__file__, 78, 13), geterrobj_134434, *[], **kwargs_134435)
    
    # Assigning a type to the variable 'errobj' (line 78)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 4), 'errobj', geterrobj_call_result_134436)
    
    # Assigning a Subscript to a Name (line 79):
    
    # Assigning a Subscript to a Name (line 79):
    
    # Obtaining the type of the subscript
    int_134437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 21), 'int')
    # Getting the type of 'errobj' (line 79)
    errobj_134438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 14), 'errobj')
    # Obtaining the member '__getitem__' of a type (line 79)
    getitem___134439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 79, 14), errobj_134438, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 79)
    subscript_call_result_134440 = invoke(stypy.reporting.localization.Localization(__file__, 79, 14), getitem___134439, int_134437)
    
    # Assigning a type to the variable 'bufsize' (line 79)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 4), 'bufsize', subscript_call_result_134440)
    
    # Call to errstate(...): (line 81)
    # Processing the call keyword arguments (line 81)
    str_134442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 26), 'str', 'call')
    keyword_134443 = str_134442
    str_134444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 39), 'str', 'ignore')
    keyword_134445 = str_134444
    str_134446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 25), 'str', 'ignore')
    keyword_134447 = str_134446
    str_134448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 41), 'str', 'ignore')
    keyword_134449 = str_134448
    kwargs_134450 = {'over': keyword_134445, 'divide': keyword_134447, 'invalid': keyword_134443, 'under': keyword_134449}
    # Getting the type of 'errstate' (line 81)
    errstate_134441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 9), 'errstate', False)
    # Calling errstate(args, kwargs) (line 81)
    errstate_call_result_134451 = invoke(stypy.reporting.localization.Localization(__file__, 81, 9), errstate_134441, *[], **kwargs_134450)
    
    with_134452 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 81, 9), errstate_call_result_134451, 'with parameter', '__enter__', '__exit__')

    if with_134452:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 81)
        enter___134453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 9), errstate_call_result_134451, '__enter__')
        with_enter_134454 = invoke(stypy.reporting.localization.Localization(__file__, 81, 9), enter___134453)
        
        # Assigning a Subscript to a Name (line 83):
        
        # Assigning a Subscript to a Name (line 83):
        
        # Obtaining the type of the subscript
        int_134455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, 43), 'int')
        
        # Call to geterrobj(...): (line 83)
        # Processing the call keyword arguments (line 83)
        kwargs_134457 = {}
        # Getting the type of 'geterrobj' (line 83)
        geterrobj_134456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 31), 'geterrobj', False)
        # Calling geterrobj(args, kwargs) (line 83)
        geterrobj_call_result_134458 = invoke(stypy.reporting.localization.Localization(__file__, 83, 31), geterrobj_134456, *[], **kwargs_134457)
        
        # Obtaining the member '__getitem__' of a type (line 83)
        getitem___134459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 31), geterrobj_call_result_134458, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 83)
        subscript_call_result_134460 = invoke(stypy.reporting.localization.Localization(__file__, 83, 31), getitem___134459, int_134455)
        
        # Assigning a type to the variable 'invalid_call_errmask' (line 83)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 8), 'invalid_call_errmask', subscript_call_result_134460)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 81)
        exit___134461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 9), errstate_call_result_134451, '__exit__')
        with_exit_134462 = invoke(stypy.reporting.localization.Localization(__file__, 81, 9), exit___134461, None, None, None)

    
    # Assigning a List to a Name (line 85):
    
    # Assigning a List to a Name (line 85):
    
    # Obtaining an instance of the builtin type 'list' (line 85)
    list_134463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 85)
    # Adding element type (line 85)
    # Getting the type of 'bufsize' (line 85)
    bufsize_134464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 28), 'bufsize')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 27), list_134463, bufsize_134464)
    # Adding element type (line 85)
    # Getting the type of 'invalid_call_errmask' (line 85)
    invalid_call_errmask_134465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 37), 'invalid_call_errmask')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 27), list_134463, invalid_call_errmask_134465)
    # Adding element type (line 85)
    # Getting the type of 'None' (line 85)
    None_134466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 59), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 85, 27), list_134463, None_134466)
    
    # Assigning a type to the variable '_linalg_error_extobj' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 4), '_linalg_error_extobj', list_134463)
    
    # ################# End of '_determine_error_states(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_determine_error_states' in the type store
    # Getting the type of 'stypy_return_type' (line 76)
    stypy_return_type_134467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134467)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_determine_error_states'
    return stypy_return_type_134467

# Assigning a type to the variable '_determine_error_states' (line 76)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 0), '_determine_error_states', _determine_error_states)

# Call to _determine_error_states(...): (line 87)
# Processing the call keyword arguments (line 87)
kwargs_134469 = {}
# Getting the type of '_determine_error_states' (line 87)
_determine_error_states_134468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 0), '_determine_error_states', False)
# Calling _determine_error_states(args, kwargs) (line 87)
_determine_error_states_call_result_134470 = invoke(stypy.reporting.localization.Localization(__file__, 87, 0), _determine_error_states_134468, *[], **kwargs_134469)


@norecursion
def _raise_linalgerror_singular(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_raise_linalgerror_singular'
    module_type_store = module_type_store.open_function_context('_raise_linalgerror_singular', 89, 0, False)
    
    # Passed parameters checking function
    _raise_linalgerror_singular.stypy_localization = localization
    _raise_linalgerror_singular.stypy_type_of_self = None
    _raise_linalgerror_singular.stypy_type_store = module_type_store
    _raise_linalgerror_singular.stypy_function_name = '_raise_linalgerror_singular'
    _raise_linalgerror_singular.stypy_param_names_list = ['err', 'flag']
    _raise_linalgerror_singular.stypy_varargs_param_name = None
    _raise_linalgerror_singular.stypy_kwargs_param_name = None
    _raise_linalgerror_singular.stypy_call_defaults = defaults
    _raise_linalgerror_singular.stypy_call_varargs = varargs
    _raise_linalgerror_singular.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_raise_linalgerror_singular', ['err', 'flag'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_raise_linalgerror_singular', localization, ['err', 'flag'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_raise_linalgerror_singular(...)' code ##################

    
    # Call to LinAlgError(...): (line 90)
    # Processing the call arguments (line 90)
    str_134472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 22), 'str', 'Singular matrix')
    # Processing the call keyword arguments (line 90)
    kwargs_134473 = {}
    # Getting the type of 'LinAlgError' (line 90)
    LinAlgError_134471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 10), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 90)
    LinAlgError_call_result_134474 = invoke(stypy.reporting.localization.Localization(__file__, 90, 10), LinAlgError_134471, *[str_134472], **kwargs_134473)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 90, 4), LinAlgError_call_result_134474, 'raise parameter', BaseException)
    
    # ################# End of '_raise_linalgerror_singular(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_raise_linalgerror_singular' in the type store
    # Getting the type of 'stypy_return_type' (line 89)
    stypy_return_type_134475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134475)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_raise_linalgerror_singular'
    return stypy_return_type_134475

# Assigning a type to the variable '_raise_linalgerror_singular' (line 89)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 0), '_raise_linalgerror_singular', _raise_linalgerror_singular)

@norecursion
def _raise_linalgerror_nonposdef(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_raise_linalgerror_nonposdef'
    module_type_store = module_type_store.open_function_context('_raise_linalgerror_nonposdef', 92, 0, False)
    
    # Passed parameters checking function
    _raise_linalgerror_nonposdef.stypy_localization = localization
    _raise_linalgerror_nonposdef.stypy_type_of_self = None
    _raise_linalgerror_nonposdef.stypy_type_store = module_type_store
    _raise_linalgerror_nonposdef.stypy_function_name = '_raise_linalgerror_nonposdef'
    _raise_linalgerror_nonposdef.stypy_param_names_list = ['err', 'flag']
    _raise_linalgerror_nonposdef.stypy_varargs_param_name = None
    _raise_linalgerror_nonposdef.stypy_kwargs_param_name = None
    _raise_linalgerror_nonposdef.stypy_call_defaults = defaults
    _raise_linalgerror_nonposdef.stypy_call_varargs = varargs
    _raise_linalgerror_nonposdef.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_raise_linalgerror_nonposdef', ['err', 'flag'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_raise_linalgerror_nonposdef', localization, ['err', 'flag'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_raise_linalgerror_nonposdef(...)' code ##################

    
    # Call to LinAlgError(...): (line 93)
    # Processing the call arguments (line 93)
    str_134477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 22), 'str', 'Matrix is not positive definite')
    # Processing the call keyword arguments (line 93)
    kwargs_134478 = {}
    # Getting the type of 'LinAlgError' (line 93)
    LinAlgError_134476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 10), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 93)
    LinAlgError_call_result_134479 = invoke(stypy.reporting.localization.Localization(__file__, 93, 10), LinAlgError_134476, *[str_134477], **kwargs_134478)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 93, 4), LinAlgError_call_result_134479, 'raise parameter', BaseException)
    
    # ################# End of '_raise_linalgerror_nonposdef(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_raise_linalgerror_nonposdef' in the type store
    # Getting the type of 'stypy_return_type' (line 92)
    stypy_return_type_134480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134480)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_raise_linalgerror_nonposdef'
    return stypy_return_type_134480

# Assigning a type to the variable '_raise_linalgerror_nonposdef' (line 92)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 0), '_raise_linalgerror_nonposdef', _raise_linalgerror_nonposdef)

@norecursion
def _raise_linalgerror_eigenvalues_nonconvergence(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_raise_linalgerror_eigenvalues_nonconvergence'
    module_type_store = module_type_store.open_function_context('_raise_linalgerror_eigenvalues_nonconvergence', 95, 0, False)
    
    # Passed parameters checking function
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_localization = localization
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_type_of_self = None
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_type_store = module_type_store
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_function_name = '_raise_linalgerror_eigenvalues_nonconvergence'
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_param_names_list = ['err', 'flag']
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_varargs_param_name = None
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_kwargs_param_name = None
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_call_defaults = defaults
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_call_varargs = varargs
    _raise_linalgerror_eigenvalues_nonconvergence.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_raise_linalgerror_eigenvalues_nonconvergence', ['err', 'flag'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_raise_linalgerror_eigenvalues_nonconvergence', localization, ['err', 'flag'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_raise_linalgerror_eigenvalues_nonconvergence(...)' code ##################

    
    # Call to LinAlgError(...): (line 96)
    # Processing the call arguments (line 96)
    str_134482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 22), 'str', 'Eigenvalues did not converge')
    # Processing the call keyword arguments (line 96)
    kwargs_134483 = {}
    # Getting the type of 'LinAlgError' (line 96)
    LinAlgError_134481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 10), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 96)
    LinAlgError_call_result_134484 = invoke(stypy.reporting.localization.Localization(__file__, 96, 10), LinAlgError_134481, *[str_134482], **kwargs_134483)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 96, 4), LinAlgError_call_result_134484, 'raise parameter', BaseException)
    
    # ################# End of '_raise_linalgerror_eigenvalues_nonconvergence(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_raise_linalgerror_eigenvalues_nonconvergence' in the type store
    # Getting the type of 'stypy_return_type' (line 95)
    stypy_return_type_134485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134485)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_raise_linalgerror_eigenvalues_nonconvergence'
    return stypy_return_type_134485

# Assigning a type to the variable '_raise_linalgerror_eigenvalues_nonconvergence' (line 95)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 0), '_raise_linalgerror_eigenvalues_nonconvergence', _raise_linalgerror_eigenvalues_nonconvergence)

@norecursion
def _raise_linalgerror_svd_nonconvergence(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_raise_linalgerror_svd_nonconvergence'
    module_type_store = module_type_store.open_function_context('_raise_linalgerror_svd_nonconvergence', 98, 0, False)
    
    # Passed parameters checking function
    _raise_linalgerror_svd_nonconvergence.stypy_localization = localization
    _raise_linalgerror_svd_nonconvergence.stypy_type_of_self = None
    _raise_linalgerror_svd_nonconvergence.stypy_type_store = module_type_store
    _raise_linalgerror_svd_nonconvergence.stypy_function_name = '_raise_linalgerror_svd_nonconvergence'
    _raise_linalgerror_svd_nonconvergence.stypy_param_names_list = ['err', 'flag']
    _raise_linalgerror_svd_nonconvergence.stypy_varargs_param_name = None
    _raise_linalgerror_svd_nonconvergence.stypy_kwargs_param_name = None
    _raise_linalgerror_svd_nonconvergence.stypy_call_defaults = defaults
    _raise_linalgerror_svd_nonconvergence.stypy_call_varargs = varargs
    _raise_linalgerror_svd_nonconvergence.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_raise_linalgerror_svd_nonconvergence', ['err', 'flag'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_raise_linalgerror_svd_nonconvergence', localization, ['err', 'flag'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_raise_linalgerror_svd_nonconvergence(...)' code ##################

    
    # Call to LinAlgError(...): (line 99)
    # Processing the call arguments (line 99)
    str_134487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 99, 22), 'str', 'SVD did not converge')
    # Processing the call keyword arguments (line 99)
    kwargs_134488 = {}
    # Getting the type of 'LinAlgError' (line 99)
    LinAlgError_134486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 10), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 99)
    LinAlgError_call_result_134489 = invoke(stypy.reporting.localization.Localization(__file__, 99, 10), LinAlgError_134486, *[str_134487], **kwargs_134488)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 99, 4), LinAlgError_call_result_134489, 'raise parameter', BaseException)
    
    # ################# End of '_raise_linalgerror_svd_nonconvergence(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_raise_linalgerror_svd_nonconvergence' in the type store
    # Getting the type of 'stypy_return_type' (line 98)
    stypy_return_type_134490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134490)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_raise_linalgerror_svd_nonconvergence'
    return stypy_return_type_134490

# Assigning a type to the variable '_raise_linalgerror_svd_nonconvergence' (line 98)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 0), '_raise_linalgerror_svd_nonconvergence', _raise_linalgerror_svd_nonconvergence)

@norecursion
def get_linalg_error_extobj(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_linalg_error_extobj'
    module_type_store = module_type_store.open_function_context('get_linalg_error_extobj', 101, 0, False)
    
    # Passed parameters checking function
    get_linalg_error_extobj.stypy_localization = localization
    get_linalg_error_extobj.stypy_type_of_self = None
    get_linalg_error_extobj.stypy_type_store = module_type_store
    get_linalg_error_extobj.stypy_function_name = 'get_linalg_error_extobj'
    get_linalg_error_extobj.stypy_param_names_list = ['callback']
    get_linalg_error_extobj.stypy_varargs_param_name = None
    get_linalg_error_extobj.stypy_kwargs_param_name = None
    get_linalg_error_extobj.stypy_call_defaults = defaults
    get_linalg_error_extobj.stypy_call_varargs = varargs
    get_linalg_error_extobj.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_linalg_error_extobj', ['callback'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_linalg_error_extobj', localization, ['callback'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_linalg_error_extobj(...)' code ##################

    
    # Assigning a Call to a Name (line 102):
    
    # Assigning a Call to a Name (line 102):
    
    # Call to list(...): (line 102)
    # Processing the call arguments (line 102)
    # Getting the type of '_linalg_error_extobj' (line 102)
    _linalg_error_extobj_134492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 18), '_linalg_error_extobj', False)
    # Processing the call keyword arguments (line 102)
    kwargs_134493 = {}
    # Getting the type of 'list' (line 102)
    list_134491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 13), 'list', False)
    # Calling list(args, kwargs) (line 102)
    list_call_result_134494 = invoke(stypy.reporting.localization.Localization(__file__, 102, 13), list_134491, *[_linalg_error_extobj_134492], **kwargs_134493)
    
    # Assigning a type to the variable 'extobj' (line 102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 4), 'extobj', list_call_result_134494)
    
    # Assigning a Name to a Subscript (line 103):
    
    # Assigning a Name to a Subscript (line 103):
    # Getting the type of 'callback' (line 103)
    callback_134495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 16), 'callback')
    # Getting the type of 'extobj' (line 103)
    extobj_134496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'extobj')
    int_134497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 11), 'int')
    # Storing an element on a container (line 103)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 103, 4), extobj_134496, (int_134497, callback_134495))
    # Getting the type of 'extobj' (line 104)
    extobj_134498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 11), 'extobj')
    # Assigning a type to the variable 'stypy_return_type' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'stypy_return_type', extobj_134498)
    
    # ################# End of 'get_linalg_error_extobj(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_linalg_error_extobj' in the type store
    # Getting the type of 'stypy_return_type' (line 101)
    stypy_return_type_134499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134499)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_linalg_error_extobj'
    return stypy_return_type_134499

# Assigning a type to the variable 'get_linalg_error_extobj' (line 101)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 0), 'get_linalg_error_extobj', get_linalg_error_extobj)

@norecursion
def _makearray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_makearray'
    module_type_store = module_type_store.open_function_context('_makearray', 106, 0, False)
    
    # Passed parameters checking function
    _makearray.stypy_localization = localization
    _makearray.stypy_type_of_self = None
    _makearray.stypy_type_store = module_type_store
    _makearray.stypy_function_name = '_makearray'
    _makearray.stypy_param_names_list = ['a']
    _makearray.stypy_varargs_param_name = None
    _makearray.stypy_kwargs_param_name = None
    _makearray.stypy_call_defaults = defaults
    _makearray.stypy_call_varargs = varargs
    _makearray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_makearray', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_makearray', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_makearray(...)' code ##################

    
    # Assigning a Call to a Name (line 107):
    
    # Assigning a Call to a Name (line 107):
    
    # Call to asarray(...): (line 107)
    # Processing the call arguments (line 107)
    # Getting the type of 'a' (line 107)
    a_134501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 18), 'a', False)
    # Processing the call keyword arguments (line 107)
    kwargs_134502 = {}
    # Getting the type of 'asarray' (line 107)
    asarray_134500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 107)
    asarray_call_result_134503 = invoke(stypy.reporting.localization.Localization(__file__, 107, 10), asarray_134500, *[a_134501], **kwargs_134502)
    
    # Assigning a type to the variable 'new' (line 107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 4), 'new', asarray_call_result_134503)
    
    # Assigning a Call to a Name (line 108):
    
    # Assigning a Call to a Name (line 108):
    
    # Call to getattr(...): (line 108)
    # Processing the call arguments (line 108)
    # Getting the type of 'a' (line 108)
    a_134505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 19), 'a', False)
    str_134506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 22), 'str', '__array_prepare__')
    # Getting the type of 'new' (line 108)
    new_134507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 43), 'new', False)
    # Obtaining the member '__array_wrap__' of a type (line 108)
    array_wrap___134508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 43), new_134507, '__array_wrap__')
    # Processing the call keyword arguments (line 108)
    kwargs_134509 = {}
    # Getting the type of 'getattr' (line 108)
    getattr_134504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 11), 'getattr', False)
    # Calling getattr(args, kwargs) (line 108)
    getattr_call_result_134510 = invoke(stypy.reporting.localization.Localization(__file__, 108, 11), getattr_134504, *[a_134505, str_134506, array_wrap___134508], **kwargs_134509)
    
    # Assigning a type to the variable 'wrap' (line 108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 4), 'wrap', getattr_call_result_134510)
    
    # Obtaining an instance of the builtin type 'tuple' (line 109)
    tuple_134511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 109, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 109)
    # Adding element type (line 109)
    # Getting the type of 'new' (line 109)
    new_134512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 11), 'new')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 109, 11), tuple_134511, new_134512)
    # Adding element type (line 109)
    # Getting the type of 'wrap' (line 109)
    wrap_134513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 16), 'wrap')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 109, 11), tuple_134511, wrap_134513)
    
    # Assigning a type to the variable 'stypy_return_type' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'stypy_return_type', tuple_134511)
    
    # ################# End of '_makearray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_makearray' in the type store
    # Getting the type of 'stypy_return_type' (line 106)
    stypy_return_type_134514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134514)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_makearray'
    return stypy_return_type_134514

# Assigning a type to the variable '_makearray' (line 106)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 106, 0), '_makearray', _makearray)

@norecursion
def isComplexType(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'isComplexType'
    module_type_store = module_type_store.open_function_context('isComplexType', 111, 0, False)
    
    # Passed parameters checking function
    isComplexType.stypy_localization = localization
    isComplexType.stypy_type_of_self = None
    isComplexType.stypy_type_store = module_type_store
    isComplexType.stypy_function_name = 'isComplexType'
    isComplexType.stypy_param_names_list = ['t']
    isComplexType.stypy_varargs_param_name = None
    isComplexType.stypy_kwargs_param_name = None
    isComplexType.stypy_call_defaults = defaults
    isComplexType.stypy_call_varargs = varargs
    isComplexType.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'isComplexType', ['t'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'isComplexType', localization, ['t'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'isComplexType(...)' code ##################

    
    # Call to issubclass(...): (line 112)
    # Processing the call arguments (line 112)
    # Getting the type of 't' (line 112)
    t_134516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 22), 't', False)
    # Getting the type of 'complexfloating' (line 112)
    complexfloating_134517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 25), 'complexfloating', False)
    # Processing the call keyword arguments (line 112)
    kwargs_134518 = {}
    # Getting the type of 'issubclass' (line 112)
    issubclass_134515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 11), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 112)
    issubclass_call_result_134519 = invoke(stypy.reporting.localization.Localization(__file__, 112, 11), issubclass_134515, *[t_134516, complexfloating_134517], **kwargs_134518)
    
    # Assigning a type to the variable 'stypy_return_type' (line 112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'stypy_return_type', issubclass_call_result_134519)
    
    # ################# End of 'isComplexType(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'isComplexType' in the type store
    # Getting the type of 'stypy_return_type' (line 111)
    stypy_return_type_134520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134520)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'isComplexType'
    return stypy_return_type_134520

# Assigning a type to the variable 'isComplexType' (line 111)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 0), 'isComplexType', isComplexType)

# Assigning a Dict to a Name (line 114):

# Assigning a Dict to a Name (line 114):

# Obtaining an instance of the builtin type 'dict' (line 114)
dict_134521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 114)
# Adding element type (key, value) (line 114)
# Getting the type of 'single' (line 114)
single_134522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 19), 'single')
# Getting the type of 'single' (line 114)
single_134523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 28), 'single')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 114, 18), dict_134521, (single_134522, single_134523))
# Adding element type (key, value) (line 114)
# Getting the type of 'double' (line 115)
double_134524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 19), 'double')
# Getting the type of 'double' (line 115)
double_134525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 28), 'double')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 114, 18), dict_134521, (double_134524, double_134525))
# Adding element type (key, value) (line 114)
# Getting the type of 'csingle' (line 116)
csingle_134526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 19), 'csingle')
# Getting the type of 'single' (line 116)
single_134527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 29), 'single')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 114, 18), dict_134521, (csingle_134526, single_134527))
# Adding element type (key, value) (line 114)
# Getting the type of 'cdouble' (line 117)
cdouble_134528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 19), 'cdouble')
# Getting the type of 'double' (line 117)
double_134529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 29), 'double')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 114, 18), dict_134521, (cdouble_134528, double_134529))

# Assigning a type to the variable '_real_types_map' (line 114)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 0), '_real_types_map', dict_134521)

# Assigning a Dict to a Name (line 119):

# Assigning a Dict to a Name (line 119):

# Obtaining an instance of the builtin type 'dict' (line 119)
dict_134530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 21), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 119)
# Adding element type (key, value) (line 119)
# Getting the type of 'single' (line 119)
single_134531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 22), 'single')
# Getting the type of 'csingle' (line 119)
csingle_134532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 31), 'csingle')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 119, 21), dict_134530, (single_134531, csingle_134532))
# Adding element type (key, value) (line 119)
# Getting the type of 'double' (line 120)
double_134533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 22), 'double')
# Getting the type of 'cdouble' (line 120)
cdouble_134534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 31), 'cdouble')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 119, 21), dict_134530, (double_134533, cdouble_134534))
# Adding element type (key, value) (line 119)
# Getting the type of 'csingle' (line 121)
csingle_134535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 22), 'csingle')
# Getting the type of 'csingle' (line 121)
csingle_134536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 32), 'csingle')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 119, 21), dict_134530, (csingle_134535, csingle_134536))
# Adding element type (key, value) (line 119)
# Getting the type of 'cdouble' (line 122)
cdouble_134537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 22), 'cdouble')
# Getting the type of 'cdouble' (line 122)
cdouble_134538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 32), 'cdouble')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 119, 21), dict_134530, (cdouble_134537, cdouble_134538))

# Assigning a type to the variable '_complex_types_map' (line 119)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 0), '_complex_types_map', dict_134530)

@norecursion
def _realType(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'double' (line 124)
    double_134539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 25), 'double')
    defaults = [double_134539]
    # Create a new context for function '_realType'
    module_type_store = module_type_store.open_function_context('_realType', 124, 0, False)
    
    # Passed parameters checking function
    _realType.stypy_localization = localization
    _realType.stypy_type_of_self = None
    _realType.stypy_type_store = module_type_store
    _realType.stypy_function_name = '_realType'
    _realType.stypy_param_names_list = ['t', 'default']
    _realType.stypy_varargs_param_name = None
    _realType.stypy_kwargs_param_name = None
    _realType.stypy_call_defaults = defaults
    _realType.stypy_call_varargs = varargs
    _realType.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_realType', ['t', 'default'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_realType', localization, ['t', 'default'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_realType(...)' code ##################

    
    # Call to get(...): (line 125)
    # Processing the call arguments (line 125)
    # Getting the type of 't' (line 125)
    t_134542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 31), 't', False)
    # Getting the type of 'default' (line 125)
    default_134543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 34), 'default', False)
    # Processing the call keyword arguments (line 125)
    kwargs_134544 = {}
    # Getting the type of '_real_types_map' (line 125)
    _real_types_map_134540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 11), '_real_types_map', False)
    # Obtaining the member 'get' of a type (line 125)
    get_134541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 11), _real_types_map_134540, 'get')
    # Calling get(args, kwargs) (line 125)
    get_call_result_134545 = invoke(stypy.reporting.localization.Localization(__file__, 125, 11), get_134541, *[t_134542, default_134543], **kwargs_134544)
    
    # Assigning a type to the variable 'stypy_return_type' (line 125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 4), 'stypy_return_type', get_call_result_134545)
    
    # ################# End of '_realType(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_realType' in the type store
    # Getting the type of 'stypy_return_type' (line 124)
    stypy_return_type_134546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134546)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_realType'
    return stypy_return_type_134546

# Assigning a type to the variable '_realType' (line 124)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 0), '_realType', _realType)

@norecursion
def _complexType(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'cdouble' (line 127)
    cdouble_134547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 28), 'cdouble')
    defaults = [cdouble_134547]
    # Create a new context for function '_complexType'
    module_type_store = module_type_store.open_function_context('_complexType', 127, 0, False)
    
    # Passed parameters checking function
    _complexType.stypy_localization = localization
    _complexType.stypy_type_of_self = None
    _complexType.stypy_type_store = module_type_store
    _complexType.stypy_function_name = '_complexType'
    _complexType.stypy_param_names_list = ['t', 'default']
    _complexType.stypy_varargs_param_name = None
    _complexType.stypy_kwargs_param_name = None
    _complexType.stypy_call_defaults = defaults
    _complexType.stypy_call_varargs = varargs
    _complexType.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_complexType', ['t', 'default'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_complexType', localization, ['t', 'default'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_complexType(...)' code ##################

    
    # Call to get(...): (line 128)
    # Processing the call arguments (line 128)
    # Getting the type of 't' (line 128)
    t_134550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 34), 't', False)
    # Getting the type of 'default' (line 128)
    default_134551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 37), 'default', False)
    # Processing the call keyword arguments (line 128)
    kwargs_134552 = {}
    # Getting the type of '_complex_types_map' (line 128)
    _complex_types_map_134548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 11), '_complex_types_map', False)
    # Obtaining the member 'get' of a type (line 128)
    get_134549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 11), _complex_types_map_134548, 'get')
    # Calling get(args, kwargs) (line 128)
    get_call_result_134553 = invoke(stypy.reporting.localization.Localization(__file__, 128, 11), get_134549, *[t_134550, default_134551], **kwargs_134552)
    
    # Assigning a type to the variable 'stypy_return_type' (line 128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 4), 'stypy_return_type', get_call_result_134553)
    
    # ################# End of '_complexType(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_complexType' in the type store
    # Getting the type of 'stypy_return_type' (line 127)
    stypy_return_type_134554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134554)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_complexType'
    return stypy_return_type_134554

# Assigning a type to the variable '_complexType' (line 127)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 0), '_complexType', _complexType)

@norecursion
def _linalgRealType(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_linalgRealType'
    module_type_store = module_type_store.open_function_context('_linalgRealType', 130, 0, False)
    
    # Passed parameters checking function
    _linalgRealType.stypy_localization = localization
    _linalgRealType.stypy_type_of_self = None
    _linalgRealType.stypy_type_store = module_type_store
    _linalgRealType.stypy_function_name = '_linalgRealType'
    _linalgRealType.stypy_param_names_list = ['t']
    _linalgRealType.stypy_varargs_param_name = None
    _linalgRealType.stypy_kwargs_param_name = None
    _linalgRealType.stypy_call_defaults = defaults
    _linalgRealType.stypy_call_varargs = varargs
    _linalgRealType.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_linalgRealType', ['t'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_linalgRealType', localization, ['t'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_linalgRealType(...)' code ##################

    str_134555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 131, 4), 'str', 'Cast the type t to either double or cdouble.')
    # Getting the type of 'double' (line 132)
    double_134556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 11), 'double')
    # Assigning a type to the variable 'stypy_return_type' (line 132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 4), 'stypy_return_type', double_134556)
    
    # ################# End of '_linalgRealType(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_linalgRealType' in the type store
    # Getting the type of 'stypy_return_type' (line 130)
    stypy_return_type_134557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134557)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_linalgRealType'
    return stypy_return_type_134557

# Assigning a type to the variable '_linalgRealType' (line 130)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 0), '_linalgRealType', _linalgRealType)

# Assigning a Dict to a Name (line 134):

# Assigning a Dict to a Name (line 134):

# Obtaining an instance of the builtin type 'dict' (line 134)
dict_134558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 134, 21), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 134)
# Adding element type (key, value) (line 134)
# Getting the type of 'single' (line 134)
single_134559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 22), 'single')
# Getting the type of 'csingle' (line 134)
csingle_134560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 31), 'csingle')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 134, 21), dict_134558, (single_134559, csingle_134560))
# Adding element type (key, value) (line 134)
# Getting the type of 'double' (line 135)
double_134561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 22), 'double')
# Getting the type of 'cdouble' (line 135)
cdouble_134562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 31), 'cdouble')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 134, 21), dict_134558, (double_134561, cdouble_134562))
# Adding element type (key, value) (line 134)
# Getting the type of 'csingle' (line 136)
csingle_134563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 22), 'csingle')
# Getting the type of 'csingle' (line 136)
csingle_134564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 32), 'csingle')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 134, 21), dict_134558, (csingle_134563, csingle_134564))
# Adding element type (key, value) (line 134)
# Getting the type of 'cdouble' (line 137)
cdouble_134565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 22), 'cdouble')
# Getting the type of 'cdouble' (line 137)
cdouble_134566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 32), 'cdouble')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 134, 21), dict_134558, (cdouble_134565, cdouble_134566))

# Assigning a type to the variable '_complex_types_map' (line 134)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 0), '_complex_types_map', dict_134558)

@norecursion
def _commonType(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_commonType'
    module_type_store = module_type_store.open_function_context('_commonType', 139, 0, False)
    
    # Passed parameters checking function
    _commonType.stypy_localization = localization
    _commonType.stypy_type_of_self = None
    _commonType.stypy_type_store = module_type_store
    _commonType.stypy_function_name = '_commonType'
    _commonType.stypy_param_names_list = []
    _commonType.stypy_varargs_param_name = 'arrays'
    _commonType.stypy_kwargs_param_name = None
    _commonType.stypy_call_defaults = defaults
    _commonType.stypy_call_varargs = varargs
    _commonType.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_commonType', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_commonType', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_commonType(...)' code ##################

    
    # Assigning a Name to a Name (line 141):
    
    # Assigning a Name to a Name (line 141):
    # Getting the type of 'single' (line 141)
    single_134567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 18), 'single')
    # Assigning a type to the variable 'result_type' (line 141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 4), 'result_type', single_134567)
    
    # Assigning a Name to a Name (line 142):
    
    # Assigning a Name to a Name (line 142):
    # Getting the type of 'False' (line 142)
    False_134568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 17), 'False')
    # Assigning a type to the variable 'is_complex' (line 142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 4), 'is_complex', False_134568)
    
    # Getting the type of 'arrays' (line 143)
    arrays_134569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 13), 'arrays')
    # Testing the type of a for loop iterable (line 143)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 143, 4), arrays_134569)
    # Getting the type of the for loop variable (line 143)
    for_loop_var_134570 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 143, 4), arrays_134569)
    # Assigning a type to the variable 'a' (line 143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 4), 'a', for_loop_var_134570)
    # SSA begins for a for statement (line 143)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to issubclass(...): (line 144)
    # Processing the call arguments (line 144)
    # Getting the type of 'a' (line 144)
    a_134572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 22), 'a', False)
    # Obtaining the member 'dtype' of a type (line 144)
    dtype_134573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 22), a_134572, 'dtype')
    # Obtaining the member 'type' of a type (line 144)
    type_134574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 22), dtype_134573, 'type')
    # Getting the type of 'inexact' (line 144)
    inexact_134575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 36), 'inexact', False)
    # Processing the call keyword arguments (line 144)
    kwargs_134576 = {}
    # Getting the type of 'issubclass' (line 144)
    issubclass_134571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 11), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 144)
    issubclass_call_result_134577 = invoke(stypy.reporting.localization.Localization(__file__, 144, 11), issubclass_134571, *[type_134574, inexact_134575], **kwargs_134576)
    
    # Testing the type of an if condition (line 144)
    if_condition_134578 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 144, 8), issubclass_call_result_134577)
    # Assigning a type to the variable 'if_condition_134578' (line 144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'if_condition_134578', if_condition_134578)
    # SSA begins for if statement (line 144)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isComplexType(...): (line 145)
    # Processing the call arguments (line 145)
    # Getting the type of 'a' (line 145)
    a_134580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 29), 'a', False)
    # Obtaining the member 'dtype' of a type (line 145)
    dtype_134581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 29), a_134580, 'dtype')
    # Obtaining the member 'type' of a type (line 145)
    type_134582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 29), dtype_134581, 'type')
    # Processing the call keyword arguments (line 145)
    kwargs_134583 = {}
    # Getting the type of 'isComplexType' (line 145)
    isComplexType_134579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 15), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 145)
    isComplexType_call_result_134584 = invoke(stypy.reporting.localization.Localization(__file__, 145, 15), isComplexType_134579, *[type_134582], **kwargs_134583)
    
    # Testing the type of an if condition (line 145)
    if_condition_134585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 145, 12), isComplexType_call_result_134584)
    # Assigning a type to the variable 'if_condition_134585' (line 145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 12), 'if_condition_134585', if_condition_134585)
    # SSA begins for if statement (line 145)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 146):
    
    # Assigning a Name to a Name (line 146):
    # Getting the type of 'True' (line 146)
    True_134586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 29), 'True')
    # Assigning a type to the variable 'is_complex' (line 146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 16), 'is_complex', True_134586)
    # SSA join for if statement (line 145)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 147):
    
    # Assigning a Call to a Name (line 147):
    
    # Call to _realType(...): (line 147)
    # Processing the call arguments (line 147)
    # Getting the type of 'a' (line 147)
    a_134588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 27), 'a', False)
    # Obtaining the member 'dtype' of a type (line 147)
    dtype_134589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 27), a_134588, 'dtype')
    # Obtaining the member 'type' of a type (line 147)
    type_134590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 27), dtype_134589, 'type')
    # Processing the call keyword arguments (line 147)
    # Getting the type of 'None' (line 147)
    None_134591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 49), 'None', False)
    keyword_134592 = None_134591
    kwargs_134593 = {'default': keyword_134592}
    # Getting the type of '_realType' (line 147)
    _realType_134587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 17), '_realType', False)
    # Calling _realType(args, kwargs) (line 147)
    _realType_call_result_134594 = invoke(stypy.reporting.localization.Localization(__file__, 147, 17), _realType_134587, *[type_134590], **kwargs_134593)
    
    # Assigning a type to the variable 'rt' (line 147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 12), 'rt', _realType_call_result_134594)
    
    # Type idiom detected: calculating its left and rigth part (line 148)
    # Getting the type of 'rt' (line 148)
    rt_134595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 15), 'rt')
    # Getting the type of 'None' (line 148)
    None_134596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 21), 'None')
    
    (may_be_134597, more_types_in_union_134598) = may_be_none(rt_134595, None_134596)

    if may_be_134597:

        if more_types_in_union_134598:
            # Runtime conditional SSA (line 148)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to TypeError(...): (line 150)
        # Processing the call arguments (line 150)
        str_134600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 32), 'str', 'array type %s is unsupported in linalg')
        
        # Obtaining an instance of the builtin type 'tuple' (line 151)
        tuple_134601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 151)
        # Adding element type (line 151)
        # Getting the type of 'a' (line 151)
        a_134602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 25), 'a', False)
        # Obtaining the member 'dtype' of a type (line 151)
        dtype_134603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 25), a_134602, 'dtype')
        # Obtaining the member 'name' of a type (line 151)
        name_134604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 25), dtype_134603, 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 25), tuple_134601, name_134604)
        
        # Applying the binary operator '%' (line 150)
        result_mod_134605 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 32), '%', str_134600, tuple_134601)
        
        # Processing the call keyword arguments (line 150)
        kwargs_134606 = {}
        # Getting the type of 'TypeError' (line 150)
        TypeError_134599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 22), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 150)
        TypeError_call_result_134607 = invoke(stypy.reporting.localization.Localization(__file__, 150, 22), TypeError_134599, *[result_mod_134605], **kwargs_134606)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 150, 16), TypeError_call_result_134607, 'raise parameter', BaseException)

        if more_types_in_union_134598:
            # SSA join for if statement (line 148)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 144)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 153):
    
    # Assigning a Name to a Name (line 153):
    # Getting the type of 'double' (line 153)
    double_134608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 17), 'double')
    # Assigning a type to the variable 'rt' (line 153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 12), 'rt', double_134608)
    # SSA join for if statement (line 144)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'rt' (line 154)
    rt_134609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 11), 'rt')
    # Getting the type of 'double' (line 154)
    double_134610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 17), 'double')
    # Applying the binary operator 'is' (line 154)
    result_is__134611 = python_operator(stypy.reporting.localization.Localization(__file__, 154, 11), 'is', rt_134609, double_134610)
    
    # Testing the type of an if condition (line 154)
    if_condition_134612 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 154, 8), result_is__134611)
    # Assigning a type to the variable 'if_condition_134612' (line 154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'if_condition_134612', if_condition_134612)
    # SSA begins for if statement (line 154)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 155):
    
    # Assigning a Name to a Name (line 155):
    # Getting the type of 'double' (line 155)
    double_134613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 26), 'double')
    # Assigning a type to the variable 'result_type' (line 155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 12), 'result_type', double_134613)
    # SSA join for if statement (line 154)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'is_complex' (line 156)
    is_complex_134614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 7), 'is_complex')
    # Testing the type of an if condition (line 156)
    if_condition_134615 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 156, 4), is_complex_134614)
    # Assigning a type to the variable 'if_condition_134615' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'if_condition_134615', if_condition_134615)
    # SSA begins for if statement (line 156)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 157):
    
    # Assigning a Name to a Name (line 157):
    # Getting the type of 'cdouble' (line 157)
    cdouble_134616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 12), 'cdouble')
    # Assigning a type to the variable 't' (line 157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 't', cdouble_134616)
    
    # Assigning a Subscript to a Name (line 158):
    
    # Assigning a Subscript to a Name (line 158):
    
    # Obtaining the type of the subscript
    # Getting the type of 'result_type' (line 158)
    result_type_134617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 41), 'result_type')
    # Getting the type of '_complex_types_map' (line 158)
    _complex_types_map_134618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 22), '_complex_types_map')
    # Obtaining the member '__getitem__' of a type (line 158)
    getitem___134619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 22), _complex_types_map_134618, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 158)
    subscript_call_result_134620 = invoke(stypy.reporting.localization.Localization(__file__, 158, 22), getitem___134619, result_type_134617)
    
    # Assigning a type to the variable 'result_type' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 8), 'result_type', subscript_call_result_134620)
    # SSA branch for the else part of an if statement (line 156)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 160):
    
    # Assigning a Name to a Name (line 160):
    # Getting the type of 'double' (line 160)
    double_134621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 12), 'double')
    # Assigning a type to the variable 't' (line 160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 't', double_134621)
    # SSA join for if statement (line 156)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 161)
    tuple_134622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 161)
    # Adding element type (line 161)
    # Getting the type of 't' (line 161)
    t_134623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 11), 't')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 161, 11), tuple_134622, t_134623)
    # Adding element type (line 161)
    # Getting the type of 'result_type' (line 161)
    result_type_134624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 14), 'result_type')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 161, 11), tuple_134622, result_type_134624)
    
    # Assigning a type to the variable 'stypy_return_type' (line 161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 4), 'stypy_return_type', tuple_134622)
    
    # ################# End of '_commonType(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_commonType' in the type store
    # Getting the type of 'stypy_return_type' (line 139)
    stypy_return_type_134625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134625)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_commonType'
    return stypy_return_type_134625

# Assigning a type to the variable '_commonType' (line 139)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), '_commonType', _commonType)

# Assigning a Name to a Name (line 166):

# Assigning a Name to a Name (line 166):
# Getting the type of 'fastCopyAndTranspose' (line 166)
fastCopyAndTranspose_134626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 10), 'fastCopyAndTranspose')
# Assigning a type to the variable '_fastCT' (line 166)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 0), '_fastCT', fastCopyAndTranspose_134626)

@norecursion
def _to_native_byte_order(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_to_native_byte_order'
    module_type_store = module_type_store.open_function_context('_to_native_byte_order', 168, 0, False)
    
    # Passed parameters checking function
    _to_native_byte_order.stypy_localization = localization
    _to_native_byte_order.stypy_type_of_self = None
    _to_native_byte_order.stypy_type_store = module_type_store
    _to_native_byte_order.stypy_function_name = '_to_native_byte_order'
    _to_native_byte_order.stypy_param_names_list = []
    _to_native_byte_order.stypy_varargs_param_name = 'arrays'
    _to_native_byte_order.stypy_kwargs_param_name = None
    _to_native_byte_order.stypy_call_defaults = defaults
    _to_native_byte_order.stypy_call_varargs = varargs
    _to_native_byte_order.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_to_native_byte_order', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_to_native_byte_order', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_to_native_byte_order(...)' code ##################

    
    # Assigning a List to a Name (line 169):
    
    # Assigning a List to a Name (line 169):
    
    # Obtaining an instance of the builtin type 'list' (line 169)
    list_134627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 169)
    
    # Assigning a type to the variable 'ret' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'ret', list_134627)
    
    # Getting the type of 'arrays' (line 170)
    arrays_134628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 15), 'arrays')
    # Testing the type of a for loop iterable (line 170)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 170, 4), arrays_134628)
    # Getting the type of the for loop variable (line 170)
    for_loop_var_134629 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 170, 4), arrays_134628)
    # Assigning a type to the variable 'arr' (line 170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 4), 'arr', for_loop_var_134629)
    # SSA begins for a for statement (line 170)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'arr' (line 171)
    arr_134630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 11), 'arr')
    # Obtaining the member 'dtype' of a type (line 171)
    dtype_134631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 11), arr_134630, 'dtype')
    # Obtaining the member 'byteorder' of a type (line 171)
    byteorder_134632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 11), dtype_134631, 'byteorder')
    
    # Obtaining an instance of the builtin type 'tuple' (line 171)
    tuple_134633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 171)
    # Adding element type (line 171)
    str_134634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 39), 'str', '=')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 171, 39), tuple_134633, str_134634)
    # Adding element type (line 171)
    str_134635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 44), 'str', '|')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 171, 39), tuple_134633, str_134635)
    
    # Applying the binary operator 'notin' (line 171)
    result_contains_134636 = python_operator(stypy.reporting.localization.Localization(__file__, 171, 11), 'notin', byteorder_134632, tuple_134633)
    
    # Testing the type of an if condition (line 171)
    if_condition_134637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 171, 8), result_contains_134636)
    # Assigning a type to the variable 'if_condition_134637' (line 171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 8), 'if_condition_134637', if_condition_134637)
    # SSA begins for if statement (line 171)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 172)
    # Processing the call arguments (line 172)
    
    # Call to asarray(...): (line 172)
    # Processing the call arguments (line 172)
    # Getting the type of 'arr' (line 172)
    arr_134641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 31), 'arr', False)
    # Processing the call keyword arguments (line 172)
    
    # Call to newbyteorder(...): (line 172)
    # Processing the call arguments (line 172)
    str_134645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 65), 'str', '=')
    # Processing the call keyword arguments (line 172)
    kwargs_134646 = {}
    # Getting the type of 'arr' (line 172)
    arr_134642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 42), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 172)
    dtype_134643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 42), arr_134642, 'dtype')
    # Obtaining the member 'newbyteorder' of a type (line 172)
    newbyteorder_134644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 42), dtype_134643, 'newbyteorder')
    # Calling newbyteorder(args, kwargs) (line 172)
    newbyteorder_call_result_134647 = invoke(stypy.reporting.localization.Localization(__file__, 172, 42), newbyteorder_134644, *[str_134645], **kwargs_134646)
    
    keyword_134648 = newbyteorder_call_result_134647
    kwargs_134649 = {'dtype': keyword_134648}
    # Getting the type of 'asarray' (line 172)
    asarray_134640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 23), 'asarray', False)
    # Calling asarray(args, kwargs) (line 172)
    asarray_call_result_134650 = invoke(stypy.reporting.localization.Localization(__file__, 172, 23), asarray_134640, *[arr_134641], **kwargs_134649)
    
    # Processing the call keyword arguments (line 172)
    kwargs_134651 = {}
    # Getting the type of 'ret' (line 172)
    ret_134638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'ret', False)
    # Obtaining the member 'append' of a type (line 172)
    append_134639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 12), ret_134638, 'append')
    # Calling append(args, kwargs) (line 172)
    append_call_result_134652 = invoke(stypy.reporting.localization.Localization(__file__, 172, 12), append_134639, *[asarray_call_result_134650], **kwargs_134651)
    
    # SSA branch for the else part of an if statement (line 171)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 174)
    # Processing the call arguments (line 174)
    # Getting the type of 'arr' (line 174)
    arr_134655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 23), 'arr', False)
    # Processing the call keyword arguments (line 174)
    kwargs_134656 = {}
    # Getting the type of 'ret' (line 174)
    ret_134653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 12), 'ret', False)
    # Obtaining the member 'append' of a type (line 174)
    append_134654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 174, 12), ret_134653, 'append')
    # Calling append(args, kwargs) (line 174)
    append_call_result_134657 = invoke(stypy.reporting.localization.Localization(__file__, 174, 12), append_134654, *[arr_134655], **kwargs_134656)
    
    # SSA join for if statement (line 171)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 175)
    # Processing the call arguments (line 175)
    # Getting the type of 'ret' (line 175)
    ret_134659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 11), 'ret', False)
    # Processing the call keyword arguments (line 175)
    kwargs_134660 = {}
    # Getting the type of 'len' (line 175)
    len_134658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 7), 'len', False)
    # Calling len(args, kwargs) (line 175)
    len_call_result_134661 = invoke(stypy.reporting.localization.Localization(__file__, 175, 7), len_134658, *[ret_134659], **kwargs_134660)
    
    int_134662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 19), 'int')
    # Applying the binary operator '==' (line 175)
    result_eq_134663 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 7), '==', len_call_result_134661, int_134662)
    
    # Testing the type of an if condition (line 175)
    if_condition_134664 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 175, 4), result_eq_134663)
    # Assigning a type to the variable 'if_condition_134664' (line 175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 4), 'if_condition_134664', if_condition_134664)
    # SSA begins for if statement (line 175)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    int_134665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 176, 19), 'int')
    # Getting the type of 'ret' (line 176)
    ret_134666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 15), 'ret')
    # Obtaining the member '__getitem__' of a type (line 176)
    getitem___134667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 176, 15), ret_134666, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 176)
    subscript_call_result_134668 = invoke(stypy.reporting.localization.Localization(__file__, 176, 15), getitem___134667, int_134665)
    
    # Assigning a type to the variable 'stypy_return_type' (line 176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'stypy_return_type', subscript_call_result_134668)
    # SSA branch for the else part of an if statement (line 175)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'ret' (line 178)
    ret_134669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 15), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'stypy_return_type', ret_134669)
    # SSA join for if statement (line 175)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_to_native_byte_order(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_to_native_byte_order' in the type store
    # Getting the type of 'stypy_return_type' (line 168)
    stypy_return_type_134670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134670)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_to_native_byte_order'
    return stypy_return_type_134670

# Assigning a type to the variable '_to_native_byte_order' (line 168)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 0), '_to_native_byte_order', _to_native_byte_order)

@norecursion
def _fastCopyAndTranspose(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_fastCopyAndTranspose'
    module_type_store = module_type_store.open_function_context('_fastCopyAndTranspose', 180, 0, False)
    
    # Passed parameters checking function
    _fastCopyAndTranspose.stypy_localization = localization
    _fastCopyAndTranspose.stypy_type_of_self = None
    _fastCopyAndTranspose.stypy_type_store = module_type_store
    _fastCopyAndTranspose.stypy_function_name = '_fastCopyAndTranspose'
    _fastCopyAndTranspose.stypy_param_names_list = ['type']
    _fastCopyAndTranspose.stypy_varargs_param_name = 'arrays'
    _fastCopyAndTranspose.stypy_kwargs_param_name = None
    _fastCopyAndTranspose.stypy_call_defaults = defaults
    _fastCopyAndTranspose.stypy_call_varargs = varargs
    _fastCopyAndTranspose.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_fastCopyAndTranspose', ['type'], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_fastCopyAndTranspose', localization, ['type'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_fastCopyAndTranspose(...)' code ##################

    
    # Assigning a Tuple to a Name (line 181):
    
    # Assigning a Tuple to a Name (line 181):
    
    # Obtaining an instance of the builtin type 'tuple' (line 181)
    tuple_134671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 181)
    
    # Assigning a type to the variable 'cast_arrays' (line 181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 4), 'cast_arrays', tuple_134671)
    
    # Getting the type of 'arrays' (line 182)
    arrays_134672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 13), 'arrays')
    # Testing the type of a for loop iterable (line 182)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 182, 4), arrays_134672)
    # Getting the type of the for loop variable (line 182)
    for_loop_var_134673 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 182, 4), arrays_134672)
    # Assigning a type to the variable 'a' (line 182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 4), 'a', for_loop_var_134673)
    # SSA begins for a for statement (line 182)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'a' (line 183)
    a_134674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 11), 'a')
    # Obtaining the member 'dtype' of a type (line 183)
    dtype_134675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 11), a_134674, 'dtype')
    # Obtaining the member 'type' of a type (line 183)
    type_134676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 11), dtype_134675, 'type')
    # Getting the type of 'type' (line 183)
    type_134677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 27), 'type')
    # Applying the binary operator 'is' (line 183)
    result_is__134678 = python_operator(stypy.reporting.localization.Localization(__file__, 183, 11), 'is', type_134676, type_134677)
    
    # Testing the type of an if condition (line 183)
    if_condition_134679 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 183, 8), result_is__134678)
    # Assigning a type to the variable 'if_condition_134679' (line 183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'if_condition_134679', if_condition_134679)
    # SSA begins for if statement (line 183)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 184):
    
    # Assigning a BinOp to a Name (line 184):
    # Getting the type of 'cast_arrays' (line 184)
    cast_arrays_134680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 26), 'cast_arrays')
    
    # Obtaining an instance of the builtin type 'tuple' (line 184)
    tuple_134681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 41), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 184)
    # Adding element type (line 184)
    
    # Call to _fastCT(...): (line 184)
    # Processing the call arguments (line 184)
    # Getting the type of 'a' (line 184)
    a_134683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 49), 'a', False)
    # Processing the call keyword arguments (line 184)
    kwargs_134684 = {}
    # Getting the type of '_fastCT' (line 184)
    _fastCT_134682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 41), '_fastCT', False)
    # Calling _fastCT(args, kwargs) (line 184)
    _fastCT_call_result_134685 = invoke(stypy.reporting.localization.Localization(__file__, 184, 41), _fastCT_134682, *[a_134683], **kwargs_134684)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 184, 41), tuple_134681, _fastCT_call_result_134685)
    
    # Applying the binary operator '+' (line 184)
    result_add_134686 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 26), '+', cast_arrays_134680, tuple_134681)
    
    # Assigning a type to the variable 'cast_arrays' (line 184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 12), 'cast_arrays', result_add_134686)
    # SSA branch for the else part of an if statement (line 183)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 186):
    
    # Assigning a BinOp to a Name (line 186):
    # Getting the type of 'cast_arrays' (line 186)
    cast_arrays_134687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 26), 'cast_arrays')
    
    # Obtaining an instance of the builtin type 'tuple' (line 186)
    tuple_134688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 41), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 186)
    # Adding element type (line 186)
    
    # Call to _fastCT(...): (line 186)
    # Processing the call arguments (line 186)
    
    # Call to astype(...): (line 186)
    # Processing the call arguments (line 186)
    # Getting the type of 'type' (line 186)
    type_134692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 58), 'type', False)
    # Processing the call keyword arguments (line 186)
    kwargs_134693 = {}
    # Getting the type of 'a' (line 186)
    a_134690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 49), 'a', False)
    # Obtaining the member 'astype' of a type (line 186)
    astype_134691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 49), a_134690, 'astype')
    # Calling astype(args, kwargs) (line 186)
    astype_call_result_134694 = invoke(stypy.reporting.localization.Localization(__file__, 186, 49), astype_134691, *[type_134692], **kwargs_134693)
    
    # Processing the call keyword arguments (line 186)
    kwargs_134695 = {}
    # Getting the type of '_fastCT' (line 186)
    _fastCT_134689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 41), '_fastCT', False)
    # Calling _fastCT(args, kwargs) (line 186)
    _fastCT_call_result_134696 = invoke(stypy.reporting.localization.Localization(__file__, 186, 41), _fastCT_134689, *[astype_call_result_134694], **kwargs_134695)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 41), tuple_134688, _fastCT_call_result_134696)
    
    # Applying the binary operator '+' (line 186)
    result_add_134697 = python_operator(stypy.reporting.localization.Localization(__file__, 186, 26), '+', cast_arrays_134687, tuple_134688)
    
    # Assigning a type to the variable 'cast_arrays' (line 186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 12), 'cast_arrays', result_add_134697)
    # SSA join for if statement (line 183)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 187)
    # Processing the call arguments (line 187)
    # Getting the type of 'cast_arrays' (line 187)
    cast_arrays_134699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 11), 'cast_arrays', False)
    # Processing the call keyword arguments (line 187)
    kwargs_134700 = {}
    # Getting the type of 'len' (line 187)
    len_134698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 7), 'len', False)
    # Calling len(args, kwargs) (line 187)
    len_call_result_134701 = invoke(stypy.reporting.localization.Localization(__file__, 187, 7), len_134698, *[cast_arrays_134699], **kwargs_134700)
    
    int_134702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 27), 'int')
    # Applying the binary operator '==' (line 187)
    result_eq_134703 = python_operator(stypy.reporting.localization.Localization(__file__, 187, 7), '==', len_call_result_134701, int_134702)
    
    # Testing the type of an if condition (line 187)
    if_condition_134704 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 187, 4), result_eq_134703)
    # Assigning a type to the variable 'if_condition_134704' (line 187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'if_condition_134704', if_condition_134704)
    # SSA begins for if statement (line 187)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    int_134705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 27), 'int')
    # Getting the type of 'cast_arrays' (line 188)
    cast_arrays_134706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 15), 'cast_arrays')
    # Obtaining the member '__getitem__' of a type (line 188)
    getitem___134707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 15), cast_arrays_134706, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 188)
    subscript_call_result_134708 = invoke(stypy.reporting.localization.Localization(__file__, 188, 15), getitem___134707, int_134705)
    
    # Assigning a type to the variable 'stypy_return_type' (line 188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 8), 'stypy_return_type', subscript_call_result_134708)
    # SSA branch for the else part of an if statement (line 187)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'cast_arrays' (line 190)
    cast_arrays_134709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 15), 'cast_arrays')
    # Assigning a type to the variable 'stypy_return_type' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 8), 'stypy_return_type', cast_arrays_134709)
    # SSA join for if statement (line 187)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_fastCopyAndTranspose(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_fastCopyAndTranspose' in the type store
    # Getting the type of 'stypy_return_type' (line 180)
    stypy_return_type_134710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134710)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_fastCopyAndTranspose'
    return stypy_return_type_134710

# Assigning a type to the variable '_fastCopyAndTranspose' (line 180)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 0), '_fastCopyAndTranspose', _fastCopyAndTranspose)

@norecursion
def _assertRank2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_assertRank2'
    module_type_store = module_type_store.open_function_context('_assertRank2', 192, 0, False)
    
    # Passed parameters checking function
    _assertRank2.stypy_localization = localization
    _assertRank2.stypy_type_of_self = None
    _assertRank2.stypy_type_store = module_type_store
    _assertRank2.stypy_function_name = '_assertRank2'
    _assertRank2.stypy_param_names_list = []
    _assertRank2.stypy_varargs_param_name = 'arrays'
    _assertRank2.stypy_kwargs_param_name = None
    _assertRank2.stypy_call_defaults = defaults
    _assertRank2.stypy_call_varargs = varargs
    _assertRank2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assertRank2', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assertRank2', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assertRank2(...)' code ##################

    
    # Getting the type of 'arrays' (line 193)
    arrays_134711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 13), 'arrays')
    # Testing the type of a for loop iterable (line 193)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 193, 4), arrays_134711)
    # Getting the type of the for loop variable (line 193)
    for_loop_var_134712 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 193, 4), arrays_134711)
    # Assigning a type to the variable 'a' (line 193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 4), 'a', for_loop_var_134712)
    # SSA begins for a for statement (line 193)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to len(...): (line 194)
    # Processing the call arguments (line 194)
    # Getting the type of 'a' (line 194)
    a_134714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 15), 'a', False)
    # Obtaining the member 'shape' of a type (line 194)
    shape_134715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 15), a_134714, 'shape')
    # Processing the call keyword arguments (line 194)
    kwargs_134716 = {}
    # Getting the type of 'len' (line 194)
    len_134713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 11), 'len', False)
    # Calling len(args, kwargs) (line 194)
    len_call_result_134717 = invoke(stypy.reporting.localization.Localization(__file__, 194, 11), len_134713, *[shape_134715], **kwargs_134716)
    
    int_134718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 27), 'int')
    # Applying the binary operator '!=' (line 194)
    result_ne_134719 = python_operator(stypy.reporting.localization.Localization(__file__, 194, 11), '!=', len_call_result_134717, int_134718)
    
    # Testing the type of an if condition (line 194)
    if_condition_134720 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 194, 8), result_ne_134719)
    # Assigning a type to the variable 'if_condition_134720' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'if_condition_134720', if_condition_134720)
    # SSA begins for if statement (line 194)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 195)
    # Processing the call arguments (line 195)
    str_134722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 30), 'str', '%d-dimensional array given. Array must be two-dimensional')
    
    # Call to len(...): (line 196)
    # Processing the call arguments (line 196)
    # Getting the type of 'a' (line 196)
    a_134724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 44), 'a', False)
    # Obtaining the member 'shape' of a type (line 196)
    shape_134725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 44), a_134724, 'shape')
    # Processing the call keyword arguments (line 196)
    kwargs_134726 = {}
    # Getting the type of 'len' (line 196)
    len_134723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 40), 'len', False)
    # Calling len(args, kwargs) (line 196)
    len_call_result_134727 = invoke(stypy.reporting.localization.Localization(__file__, 196, 40), len_134723, *[shape_134725], **kwargs_134726)
    
    # Applying the binary operator '%' (line 195)
    result_mod_134728 = python_operator(stypy.reporting.localization.Localization(__file__, 195, 30), '%', str_134722, len_call_result_134727)
    
    # Processing the call keyword arguments (line 195)
    kwargs_134729 = {}
    # Getting the type of 'LinAlgError' (line 195)
    LinAlgError_134721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 18), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 195)
    LinAlgError_call_result_134730 = invoke(stypy.reporting.localization.Localization(__file__, 195, 18), LinAlgError_134721, *[result_mod_134728], **kwargs_134729)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 195, 12), LinAlgError_call_result_134730, 'raise parameter', BaseException)
    # SSA join for if statement (line 194)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_assertRank2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assertRank2' in the type store
    # Getting the type of 'stypy_return_type' (line 192)
    stypy_return_type_134731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134731)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assertRank2'
    return stypy_return_type_134731

# Assigning a type to the variable '_assertRank2' (line 192)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 0), '_assertRank2', _assertRank2)

@norecursion
def _assertRankAtLeast2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_assertRankAtLeast2'
    module_type_store = module_type_store.open_function_context('_assertRankAtLeast2', 198, 0, False)
    
    # Passed parameters checking function
    _assertRankAtLeast2.stypy_localization = localization
    _assertRankAtLeast2.stypy_type_of_self = None
    _assertRankAtLeast2.stypy_type_store = module_type_store
    _assertRankAtLeast2.stypy_function_name = '_assertRankAtLeast2'
    _assertRankAtLeast2.stypy_param_names_list = []
    _assertRankAtLeast2.stypy_varargs_param_name = 'arrays'
    _assertRankAtLeast2.stypy_kwargs_param_name = None
    _assertRankAtLeast2.stypy_call_defaults = defaults
    _assertRankAtLeast2.stypy_call_varargs = varargs
    _assertRankAtLeast2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assertRankAtLeast2', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assertRankAtLeast2', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assertRankAtLeast2(...)' code ##################

    
    # Getting the type of 'arrays' (line 199)
    arrays_134732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 13), 'arrays')
    # Testing the type of a for loop iterable (line 199)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 199, 4), arrays_134732)
    # Getting the type of the for loop variable (line 199)
    for_loop_var_134733 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 199, 4), arrays_134732)
    # Assigning a type to the variable 'a' (line 199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'a', for_loop_var_134733)
    # SSA begins for a for statement (line 199)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to len(...): (line 200)
    # Processing the call arguments (line 200)
    # Getting the type of 'a' (line 200)
    a_134735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 15), 'a', False)
    # Obtaining the member 'shape' of a type (line 200)
    shape_134736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 15), a_134735, 'shape')
    # Processing the call keyword arguments (line 200)
    kwargs_134737 = {}
    # Getting the type of 'len' (line 200)
    len_134734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 11), 'len', False)
    # Calling len(args, kwargs) (line 200)
    len_call_result_134738 = invoke(stypy.reporting.localization.Localization(__file__, 200, 11), len_134734, *[shape_134736], **kwargs_134737)
    
    int_134739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 26), 'int')
    # Applying the binary operator '<' (line 200)
    result_lt_134740 = python_operator(stypy.reporting.localization.Localization(__file__, 200, 11), '<', len_call_result_134738, int_134739)
    
    # Testing the type of an if condition (line 200)
    if_condition_134741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 200, 8), result_lt_134740)
    # Assigning a type to the variable 'if_condition_134741' (line 200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 200, 8), 'if_condition_134741', if_condition_134741)
    # SSA begins for if statement (line 200)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 201)
    # Processing the call arguments (line 201)
    str_134743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 30), 'str', '%d-dimensional array given. Array must be at least two-dimensional')
    
    # Call to len(...): (line 202)
    # Processing the call arguments (line 202)
    # Getting the type of 'a' (line 202)
    a_134745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 53), 'a', False)
    # Obtaining the member 'shape' of a type (line 202)
    shape_134746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 53), a_134745, 'shape')
    # Processing the call keyword arguments (line 202)
    kwargs_134747 = {}
    # Getting the type of 'len' (line 202)
    len_134744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 49), 'len', False)
    # Calling len(args, kwargs) (line 202)
    len_call_result_134748 = invoke(stypy.reporting.localization.Localization(__file__, 202, 49), len_134744, *[shape_134746], **kwargs_134747)
    
    # Applying the binary operator '%' (line 201)
    result_mod_134749 = python_operator(stypy.reporting.localization.Localization(__file__, 201, 30), '%', str_134743, len_call_result_134748)
    
    # Processing the call keyword arguments (line 201)
    kwargs_134750 = {}
    # Getting the type of 'LinAlgError' (line 201)
    LinAlgError_134742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 18), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 201)
    LinAlgError_call_result_134751 = invoke(stypy.reporting.localization.Localization(__file__, 201, 18), LinAlgError_134742, *[result_mod_134749], **kwargs_134750)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 201, 12), LinAlgError_call_result_134751, 'raise parameter', BaseException)
    # SSA join for if statement (line 200)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_assertRankAtLeast2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assertRankAtLeast2' in the type store
    # Getting the type of 'stypy_return_type' (line 198)
    stypy_return_type_134752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134752)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assertRankAtLeast2'
    return stypy_return_type_134752

# Assigning a type to the variable '_assertRankAtLeast2' (line 198)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 0), '_assertRankAtLeast2', _assertRankAtLeast2)

@norecursion
def _assertSquareness(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_assertSquareness'
    module_type_store = module_type_store.open_function_context('_assertSquareness', 204, 0, False)
    
    # Passed parameters checking function
    _assertSquareness.stypy_localization = localization
    _assertSquareness.stypy_type_of_self = None
    _assertSquareness.stypy_type_store = module_type_store
    _assertSquareness.stypy_function_name = '_assertSquareness'
    _assertSquareness.stypy_param_names_list = []
    _assertSquareness.stypy_varargs_param_name = 'arrays'
    _assertSquareness.stypy_kwargs_param_name = None
    _assertSquareness.stypy_call_defaults = defaults
    _assertSquareness.stypy_call_varargs = varargs
    _assertSquareness.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assertSquareness', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assertSquareness', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assertSquareness(...)' code ##################

    
    # Getting the type of 'arrays' (line 205)
    arrays_134753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 13), 'arrays')
    # Testing the type of a for loop iterable (line 205)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 205, 4), arrays_134753)
    # Getting the type of the for loop variable (line 205)
    for_loop_var_134754 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 205, 4), arrays_134753)
    # Assigning a type to the variable 'a' (line 205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'a', for_loop_var_134754)
    # SSA begins for a for statement (line 205)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to max(...): (line 206)
    # Processing the call arguments (line 206)
    # Getting the type of 'a' (line 206)
    a_134756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 15), 'a', False)
    # Obtaining the member 'shape' of a type (line 206)
    shape_134757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 15), a_134756, 'shape')
    # Processing the call keyword arguments (line 206)
    kwargs_134758 = {}
    # Getting the type of 'max' (line 206)
    max_134755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 11), 'max', False)
    # Calling max(args, kwargs) (line 206)
    max_call_result_134759 = invoke(stypy.reporting.localization.Localization(__file__, 206, 11), max_134755, *[shape_134757], **kwargs_134758)
    
    
    # Call to min(...): (line 206)
    # Processing the call arguments (line 206)
    # Getting the type of 'a' (line 206)
    a_134761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 31), 'a', False)
    # Obtaining the member 'shape' of a type (line 206)
    shape_134762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 31), a_134761, 'shape')
    # Processing the call keyword arguments (line 206)
    kwargs_134763 = {}
    # Getting the type of 'min' (line 206)
    min_134760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 27), 'min', False)
    # Calling min(args, kwargs) (line 206)
    min_call_result_134764 = invoke(stypy.reporting.localization.Localization(__file__, 206, 27), min_134760, *[shape_134762], **kwargs_134763)
    
    # Applying the binary operator '!=' (line 206)
    result_ne_134765 = python_operator(stypy.reporting.localization.Localization(__file__, 206, 11), '!=', max_call_result_134759, min_call_result_134764)
    
    # Testing the type of an if condition (line 206)
    if_condition_134766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 206, 8), result_ne_134765)
    # Assigning a type to the variable 'if_condition_134766' (line 206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 8), 'if_condition_134766', if_condition_134766)
    # SSA begins for if statement (line 206)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 207)
    # Processing the call arguments (line 207)
    str_134768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 30), 'str', 'Array must be square')
    # Processing the call keyword arguments (line 207)
    kwargs_134769 = {}
    # Getting the type of 'LinAlgError' (line 207)
    LinAlgError_134767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 18), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 207)
    LinAlgError_call_result_134770 = invoke(stypy.reporting.localization.Localization(__file__, 207, 18), LinAlgError_134767, *[str_134768], **kwargs_134769)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 207, 12), LinAlgError_call_result_134770, 'raise parameter', BaseException)
    # SSA join for if statement (line 206)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_assertSquareness(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assertSquareness' in the type store
    # Getting the type of 'stypy_return_type' (line 204)
    stypy_return_type_134771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134771)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assertSquareness'
    return stypy_return_type_134771

# Assigning a type to the variable '_assertSquareness' (line 204)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 0), '_assertSquareness', _assertSquareness)

@norecursion
def _assertNdSquareness(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_assertNdSquareness'
    module_type_store = module_type_store.open_function_context('_assertNdSquareness', 209, 0, False)
    
    # Passed parameters checking function
    _assertNdSquareness.stypy_localization = localization
    _assertNdSquareness.stypy_type_of_self = None
    _assertNdSquareness.stypy_type_store = module_type_store
    _assertNdSquareness.stypy_function_name = '_assertNdSquareness'
    _assertNdSquareness.stypy_param_names_list = []
    _assertNdSquareness.stypy_varargs_param_name = 'arrays'
    _assertNdSquareness.stypy_kwargs_param_name = None
    _assertNdSquareness.stypy_call_defaults = defaults
    _assertNdSquareness.stypy_call_varargs = varargs
    _assertNdSquareness.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assertNdSquareness', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assertNdSquareness', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assertNdSquareness(...)' code ##################

    
    # Getting the type of 'arrays' (line 210)
    arrays_134772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 13), 'arrays')
    # Testing the type of a for loop iterable (line 210)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 210, 4), arrays_134772)
    # Getting the type of the for loop variable (line 210)
    for_loop_var_134773 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 210, 4), arrays_134772)
    # Assigning a type to the variable 'a' (line 210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'a', for_loop_var_134773)
    # SSA begins for a for statement (line 210)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to max(...): (line 211)
    # Processing the call arguments (line 211)
    
    # Obtaining the type of the subscript
    int_134775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 23), 'int')
    slice_134776 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 211, 15), int_134775, None, None)
    # Getting the type of 'a' (line 211)
    a_134777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 15), 'a', False)
    # Obtaining the member 'shape' of a type (line 211)
    shape_134778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 15), a_134777, 'shape')
    # Obtaining the member '__getitem__' of a type (line 211)
    getitem___134779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 15), shape_134778, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 211)
    subscript_call_result_134780 = invoke(stypy.reporting.localization.Localization(__file__, 211, 15), getitem___134779, slice_134776)
    
    # Processing the call keyword arguments (line 211)
    kwargs_134781 = {}
    # Getting the type of 'max' (line 211)
    max_134774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 11), 'max', False)
    # Calling max(args, kwargs) (line 211)
    max_call_result_134782 = invoke(stypy.reporting.localization.Localization(__file__, 211, 11), max_134774, *[subscript_call_result_134780], **kwargs_134781)
    
    
    # Call to min(...): (line 211)
    # Processing the call arguments (line 211)
    
    # Obtaining the type of the subscript
    int_134784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 44), 'int')
    slice_134785 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 211, 36), int_134784, None, None)
    # Getting the type of 'a' (line 211)
    a_134786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 36), 'a', False)
    # Obtaining the member 'shape' of a type (line 211)
    shape_134787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 36), a_134786, 'shape')
    # Obtaining the member '__getitem__' of a type (line 211)
    getitem___134788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 36), shape_134787, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 211)
    subscript_call_result_134789 = invoke(stypy.reporting.localization.Localization(__file__, 211, 36), getitem___134788, slice_134785)
    
    # Processing the call keyword arguments (line 211)
    kwargs_134790 = {}
    # Getting the type of 'min' (line 211)
    min_134783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 32), 'min', False)
    # Calling min(args, kwargs) (line 211)
    min_call_result_134791 = invoke(stypy.reporting.localization.Localization(__file__, 211, 32), min_134783, *[subscript_call_result_134789], **kwargs_134790)
    
    # Applying the binary operator '!=' (line 211)
    result_ne_134792 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 11), '!=', max_call_result_134782, min_call_result_134791)
    
    # Testing the type of an if condition (line 211)
    if_condition_134793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 211, 8), result_ne_134792)
    # Assigning a type to the variable 'if_condition_134793' (line 211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'if_condition_134793', if_condition_134793)
    # SSA begins for if statement (line 211)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 212)
    # Processing the call arguments (line 212)
    str_134795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 30), 'str', 'Last 2 dimensions of the array must be square')
    # Processing the call keyword arguments (line 212)
    kwargs_134796 = {}
    # Getting the type of 'LinAlgError' (line 212)
    LinAlgError_134794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 18), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 212)
    LinAlgError_call_result_134797 = invoke(stypy.reporting.localization.Localization(__file__, 212, 18), LinAlgError_134794, *[str_134795], **kwargs_134796)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 212, 12), LinAlgError_call_result_134797, 'raise parameter', BaseException)
    # SSA join for if statement (line 211)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_assertNdSquareness(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assertNdSquareness' in the type store
    # Getting the type of 'stypy_return_type' (line 209)
    stypy_return_type_134798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134798)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assertNdSquareness'
    return stypy_return_type_134798

# Assigning a type to the variable '_assertNdSquareness' (line 209)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 0), '_assertNdSquareness', _assertNdSquareness)

@norecursion
def _assertFinite(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_assertFinite'
    module_type_store = module_type_store.open_function_context('_assertFinite', 214, 0, False)
    
    # Passed parameters checking function
    _assertFinite.stypy_localization = localization
    _assertFinite.stypy_type_of_self = None
    _assertFinite.stypy_type_store = module_type_store
    _assertFinite.stypy_function_name = '_assertFinite'
    _assertFinite.stypy_param_names_list = []
    _assertFinite.stypy_varargs_param_name = 'arrays'
    _assertFinite.stypy_kwargs_param_name = None
    _assertFinite.stypy_call_defaults = defaults
    _assertFinite.stypy_call_varargs = varargs
    _assertFinite.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assertFinite', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assertFinite', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assertFinite(...)' code ##################

    
    # Getting the type of 'arrays' (line 215)
    arrays_134799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 13), 'arrays')
    # Testing the type of a for loop iterable (line 215)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 215, 4), arrays_134799)
    # Getting the type of the for loop variable (line 215)
    for_loop_var_134800 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 215, 4), arrays_134799)
    # Assigning a type to the variable 'a' (line 215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 4), 'a', for_loop_var_134800)
    # SSA begins for a for statement (line 215)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to all(...): (line 216)
    # Processing the call keyword arguments (line 216)
    kwargs_134806 = {}
    
    # Call to isfinite(...): (line 216)
    # Processing the call arguments (line 216)
    # Getting the type of 'a' (line 216)
    a_134802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 25), 'a', False)
    # Processing the call keyword arguments (line 216)
    kwargs_134803 = {}
    # Getting the type of 'isfinite' (line 216)
    isfinite_134801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 16), 'isfinite', False)
    # Calling isfinite(args, kwargs) (line 216)
    isfinite_call_result_134804 = invoke(stypy.reporting.localization.Localization(__file__, 216, 16), isfinite_134801, *[a_134802], **kwargs_134803)
    
    # Obtaining the member 'all' of a type (line 216)
    all_134805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 16), isfinite_call_result_134804, 'all')
    # Calling all(args, kwargs) (line 216)
    all_call_result_134807 = invoke(stypy.reporting.localization.Localization(__file__, 216, 16), all_134805, *[], **kwargs_134806)
    
    # Applying the 'not' unary operator (line 216)
    result_not__134808 = python_operator(stypy.reporting.localization.Localization(__file__, 216, 11), 'not', all_call_result_134807)
    
    # Testing the type of an if condition (line 216)
    if_condition_134809 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 216, 8), result_not__134808)
    # Assigning a type to the variable 'if_condition_134809' (line 216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'if_condition_134809', if_condition_134809)
    # SSA begins for if statement (line 216)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 217)
    # Processing the call arguments (line 217)
    str_134811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 30), 'str', 'Array must not contain infs or NaNs')
    # Processing the call keyword arguments (line 217)
    kwargs_134812 = {}
    # Getting the type of 'LinAlgError' (line 217)
    LinAlgError_134810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 18), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 217)
    LinAlgError_call_result_134813 = invoke(stypy.reporting.localization.Localization(__file__, 217, 18), LinAlgError_134810, *[str_134811], **kwargs_134812)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 217, 12), LinAlgError_call_result_134813, 'raise parameter', BaseException)
    # SSA join for if statement (line 216)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_assertFinite(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assertFinite' in the type store
    # Getting the type of 'stypy_return_type' (line 214)
    stypy_return_type_134814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134814)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assertFinite'
    return stypy_return_type_134814

# Assigning a type to the variable '_assertFinite' (line 214)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 0), '_assertFinite', _assertFinite)

@norecursion
def _assertNoEmpty2d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_assertNoEmpty2d'
    module_type_store = module_type_store.open_function_context('_assertNoEmpty2d', 219, 0, False)
    
    # Passed parameters checking function
    _assertNoEmpty2d.stypy_localization = localization
    _assertNoEmpty2d.stypy_type_of_self = None
    _assertNoEmpty2d.stypy_type_store = module_type_store
    _assertNoEmpty2d.stypy_function_name = '_assertNoEmpty2d'
    _assertNoEmpty2d.stypy_param_names_list = []
    _assertNoEmpty2d.stypy_varargs_param_name = 'arrays'
    _assertNoEmpty2d.stypy_kwargs_param_name = None
    _assertNoEmpty2d.stypy_call_defaults = defaults
    _assertNoEmpty2d.stypy_call_varargs = varargs
    _assertNoEmpty2d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_assertNoEmpty2d', [], 'arrays', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_assertNoEmpty2d', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_assertNoEmpty2d(...)' code ##################

    
    # Getting the type of 'arrays' (line 220)
    arrays_134815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 13), 'arrays')
    # Testing the type of a for loop iterable (line 220)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 220, 4), arrays_134815)
    # Getting the type of the for loop variable (line 220)
    for_loop_var_134816 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 220, 4), arrays_134815)
    # Assigning a type to the variable 'a' (line 220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'a', for_loop_var_134816)
    # SSA begins for a for statement (line 220)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 221)
    a_134817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 11), 'a')
    # Obtaining the member 'size' of a type (line 221)
    size_134818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 11), a_134817, 'size')
    int_134819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 21), 'int')
    # Applying the binary operator '==' (line 221)
    result_eq_134820 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 11), '==', size_134818, int_134819)
    
    
    
    # Call to product(...): (line 221)
    # Processing the call arguments (line 221)
    
    # Obtaining the type of the subscript
    int_134822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 43), 'int')
    slice_134823 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 221, 35), int_134822, None, None)
    # Getting the type of 'a' (line 221)
    a_134824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 35), 'a', False)
    # Obtaining the member 'shape' of a type (line 221)
    shape_134825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 35), a_134824, 'shape')
    # Obtaining the member '__getitem__' of a type (line 221)
    getitem___134826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 35), shape_134825, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 221)
    subscript_call_result_134827 = invoke(stypy.reporting.localization.Localization(__file__, 221, 35), getitem___134826, slice_134823)
    
    # Processing the call keyword arguments (line 221)
    kwargs_134828 = {}
    # Getting the type of 'product' (line 221)
    product_134821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 27), 'product', False)
    # Calling product(args, kwargs) (line 221)
    product_call_result_134829 = invoke(stypy.reporting.localization.Localization(__file__, 221, 27), product_134821, *[subscript_call_result_134827], **kwargs_134828)
    
    int_134830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 52), 'int')
    # Applying the binary operator '==' (line 221)
    result_eq_134831 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 27), '==', product_call_result_134829, int_134830)
    
    # Applying the binary operator 'and' (line 221)
    result_and_keyword_134832 = python_operator(stypy.reporting.localization.Localization(__file__, 221, 11), 'and', result_eq_134820, result_eq_134831)
    
    # Testing the type of an if condition (line 221)
    if_condition_134833 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 221, 8), result_and_keyword_134832)
    # Assigning a type to the variable 'if_condition_134833' (line 221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'if_condition_134833', if_condition_134833)
    # SSA begins for if statement (line 221)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 222)
    # Processing the call arguments (line 222)
    str_134835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 30), 'str', 'Arrays cannot be empty')
    # Processing the call keyword arguments (line 222)
    kwargs_134836 = {}
    # Getting the type of 'LinAlgError' (line 222)
    LinAlgError_134834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 18), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 222)
    LinAlgError_call_result_134837 = invoke(stypy.reporting.localization.Localization(__file__, 222, 18), LinAlgError_134834, *[str_134835], **kwargs_134836)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 222, 12), LinAlgError_call_result_134837, 'raise parameter', BaseException)
    # SSA join for if statement (line 221)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_assertNoEmpty2d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_assertNoEmpty2d' in the type store
    # Getting the type of 'stypy_return_type' (line 219)
    stypy_return_type_134838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134838)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_assertNoEmpty2d'
    return stypy_return_type_134838

# Assigning a type to the variable '_assertNoEmpty2d' (line 219)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 0), '_assertNoEmpty2d', _assertNoEmpty2d)

@norecursion
def tensorsolve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 227)
    None_134839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 27), 'None')
    defaults = [None_134839]
    # Create a new context for function 'tensorsolve'
    module_type_store = module_type_store.open_function_context('tensorsolve', 227, 0, False)
    
    # Passed parameters checking function
    tensorsolve.stypy_localization = localization
    tensorsolve.stypy_type_of_self = None
    tensorsolve.stypy_type_store = module_type_store
    tensorsolve.stypy_function_name = 'tensorsolve'
    tensorsolve.stypy_param_names_list = ['a', 'b', 'axes']
    tensorsolve.stypy_varargs_param_name = None
    tensorsolve.stypy_kwargs_param_name = None
    tensorsolve.stypy_call_defaults = defaults
    tensorsolve.stypy_call_varargs = varargs
    tensorsolve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tensorsolve', ['a', 'b', 'axes'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tensorsolve', localization, ['a', 'b', 'axes'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tensorsolve(...)' code ##################

    str_134840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, (-1)), 'str', "\n    Solve the tensor equation ``a x = b`` for x.\n\n    It is assumed that all indices of `x` are summed over in the product,\n    together with the rightmost indices of `a`, as is done in, for example,\n    ``tensordot(a, x, axes=len(b.shape))``.\n\n    Parameters\n    ----------\n    a : array_like\n        Coefficient tensor, of shape ``b.shape + Q``. `Q`, a tuple, equals\n        the shape of that sub-tensor of `a` consisting of the appropriate\n        number of its rightmost indices, and must be such that\n        ``prod(Q) == prod(b.shape)`` (in which sense `a` is said to be\n        'square').\n    b : array_like\n        Right-hand tensor, which can be of any shape.\n    axes : tuple of ints, optional\n        Axes in `a` to reorder to the right, before inversion.\n        If None (default), no reordering is done.\n\n    Returns\n    -------\n    x : ndarray, shape Q\n\n    Raises\n    ------\n    LinAlgError\n        If `a` is singular or not 'square' (in the above sense).\n\n    See Also\n    --------\n    tensordot, tensorinv, einsum\n\n    Examples\n    --------\n    >>> a = np.eye(2*3*4)\n    >>> a.shape = (2*3, 4, 2, 3, 4)\n    >>> b = np.random.randn(2*3, 4)\n    >>> x = np.linalg.tensorsolve(a, b)\n    >>> x.shape\n    (2, 3, 4)\n    >>> np.allclose(np.tensordot(a, x, axes=3), b)\n    True\n\n    ")
    
    # Assigning a Call to a Tuple (line 274):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 274)
    # Processing the call arguments (line 274)
    # Getting the type of 'a' (line 274)
    a_134842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 25), 'a', False)
    # Processing the call keyword arguments (line 274)
    kwargs_134843 = {}
    # Getting the type of '_makearray' (line 274)
    _makearray_134841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 274)
    _makearray_call_result_134844 = invoke(stypy.reporting.localization.Localization(__file__, 274, 14), _makearray_134841, *[a_134842], **kwargs_134843)
    
    # Assigning a type to the variable 'call_assignment_134267' (line 274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'call_assignment_134267', _makearray_call_result_134844)
    
    # Assigning a Call to a Name (line 274):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_134847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 4), 'int')
    # Processing the call keyword arguments
    kwargs_134848 = {}
    # Getting the type of 'call_assignment_134267' (line 274)
    call_assignment_134267_134845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'call_assignment_134267', False)
    # Obtaining the member '__getitem__' of a type (line 274)
    getitem___134846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 4), call_assignment_134267_134845, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_134849 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___134846, *[int_134847], **kwargs_134848)
    
    # Assigning a type to the variable 'call_assignment_134268' (line 274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'call_assignment_134268', getitem___call_result_134849)
    
    # Assigning a Name to a Name (line 274):
    # Getting the type of 'call_assignment_134268' (line 274)
    call_assignment_134268_134850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'call_assignment_134268')
    # Assigning a type to the variable 'a' (line 274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'a', call_assignment_134268_134850)
    
    # Assigning a Call to a Name (line 274):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_134853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 4), 'int')
    # Processing the call keyword arguments
    kwargs_134854 = {}
    # Getting the type of 'call_assignment_134267' (line 274)
    call_assignment_134267_134851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'call_assignment_134267', False)
    # Obtaining the member '__getitem__' of a type (line 274)
    getitem___134852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 4), call_assignment_134267_134851, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_134855 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___134852, *[int_134853], **kwargs_134854)
    
    # Assigning a type to the variable 'call_assignment_134269' (line 274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'call_assignment_134269', getitem___call_result_134855)
    
    # Assigning a Name to a Name (line 274):
    # Getting the type of 'call_assignment_134269' (line 274)
    call_assignment_134269_134856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'call_assignment_134269')
    # Assigning a type to the variable 'wrap' (line 274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 7), 'wrap', call_assignment_134269_134856)
    
    # Assigning a Call to a Name (line 275):
    
    # Assigning a Call to a Name (line 275):
    
    # Call to asarray(...): (line 275)
    # Processing the call arguments (line 275)
    # Getting the type of 'b' (line 275)
    b_134858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 16), 'b', False)
    # Processing the call keyword arguments (line 275)
    kwargs_134859 = {}
    # Getting the type of 'asarray' (line 275)
    asarray_134857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 275)
    asarray_call_result_134860 = invoke(stypy.reporting.localization.Localization(__file__, 275, 8), asarray_134857, *[b_134858], **kwargs_134859)
    
    # Assigning a type to the variable 'b' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'b', asarray_call_result_134860)
    
    # Assigning a Attribute to a Name (line 276):
    
    # Assigning a Attribute to a Name (line 276):
    # Getting the type of 'a' (line 276)
    a_134861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 9), 'a')
    # Obtaining the member 'ndim' of a type (line 276)
    ndim_134862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 9), a_134861, 'ndim')
    # Assigning a type to the variable 'an' (line 276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'an', ndim_134862)
    
    # Type idiom detected: calculating its left and rigth part (line 278)
    # Getting the type of 'axes' (line 278)
    axes_134863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 4), 'axes')
    # Getting the type of 'None' (line 278)
    None_134864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 19), 'None')
    
    (may_be_134865, more_types_in_union_134866) = may_not_be_none(axes_134863, None_134864)

    if may_be_134865:

        if more_types_in_union_134866:
            # Runtime conditional SSA (line 278)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 279):
        
        # Assigning a Call to a Name (line 279):
        
        # Call to list(...): (line 279)
        # Processing the call arguments (line 279)
        
        # Call to range(...): (line 279)
        # Processing the call arguments (line 279)
        int_134869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 29), 'int')
        # Getting the type of 'an' (line 279)
        an_134870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 32), 'an', False)
        # Processing the call keyword arguments (line 279)
        kwargs_134871 = {}
        # Getting the type of 'range' (line 279)
        range_134868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 23), 'range', False)
        # Calling range(args, kwargs) (line 279)
        range_call_result_134872 = invoke(stypy.reporting.localization.Localization(__file__, 279, 23), range_134868, *[int_134869, an_134870], **kwargs_134871)
        
        # Processing the call keyword arguments (line 279)
        kwargs_134873 = {}
        # Getting the type of 'list' (line 279)
        list_134867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 18), 'list', False)
        # Calling list(args, kwargs) (line 279)
        list_call_result_134874 = invoke(stypy.reporting.localization.Localization(__file__, 279, 18), list_134867, *[range_call_result_134872], **kwargs_134873)
        
        # Assigning a type to the variable 'allaxes' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'allaxes', list_call_result_134874)
        
        # Getting the type of 'axes' (line 280)
        axes_134875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 17), 'axes')
        # Testing the type of a for loop iterable (line 280)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 280, 8), axes_134875)
        # Getting the type of the for loop variable (line 280)
        for_loop_var_134876 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 280, 8), axes_134875)
        # Assigning a type to the variable 'k' (line 280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 8), 'k', for_loop_var_134876)
        # SSA begins for a for statement (line 280)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to remove(...): (line 281)
        # Processing the call arguments (line 281)
        # Getting the type of 'k' (line 281)
        k_134879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 27), 'k', False)
        # Processing the call keyword arguments (line 281)
        kwargs_134880 = {}
        # Getting the type of 'allaxes' (line 281)
        allaxes_134877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 12), 'allaxes', False)
        # Obtaining the member 'remove' of a type (line 281)
        remove_134878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 12), allaxes_134877, 'remove')
        # Calling remove(args, kwargs) (line 281)
        remove_call_result_134881 = invoke(stypy.reporting.localization.Localization(__file__, 281, 12), remove_134878, *[k_134879], **kwargs_134880)
        
        
        # Call to insert(...): (line 282)
        # Processing the call arguments (line 282)
        # Getting the type of 'an' (line 282)
        an_134884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 27), 'an', False)
        # Getting the type of 'k' (line 282)
        k_134885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 31), 'k', False)
        # Processing the call keyword arguments (line 282)
        kwargs_134886 = {}
        # Getting the type of 'allaxes' (line 282)
        allaxes_134882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'allaxes', False)
        # Obtaining the member 'insert' of a type (line 282)
        insert_134883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 12), allaxes_134882, 'insert')
        # Calling insert(args, kwargs) (line 282)
        insert_call_result_134887 = invoke(stypy.reporting.localization.Localization(__file__, 282, 12), insert_134883, *[an_134884, k_134885], **kwargs_134886)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 283):
        
        # Assigning a Call to a Name (line 283):
        
        # Call to transpose(...): (line 283)
        # Processing the call arguments (line 283)
        # Getting the type of 'allaxes' (line 283)
        allaxes_134890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 24), 'allaxes', False)
        # Processing the call keyword arguments (line 283)
        kwargs_134891 = {}
        # Getting the type of 'a' (line 283)
        a_134888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 12), 'a', False)
        # Obtaining the member 'transpose' of a type (line 283)
        transpose_134889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 283, 12), a_134888, 'transpose')
        # Calling transpose(args, kwargs) (line 283)
        transpose_call_result_134892 = invoke(stypy.reporting.localization.Localization(__file__, 283, 12), transpose_134889, *[allaxes_134890], **kwargs_134891)
        
        # Assigning a type to the variable 'a' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 8), 'a', transpose_call_result_134892)

        if more_types_in_union_134866:
            # SSA join for if statement (line 278)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 285):
    
    # Assigning a Subscript to a Name (line 285):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'an' (line 285)
    an_134893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 25), 'an')
    # Getting the type of 'b' (line 285)
    b_134894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 28), 'b')
    # Obtaining the member 'ndim' of a type (line 285)
    ndim_134895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 28), b_134894, 'ndim')
    # Applying the binary operator '-' (line 285)
    result_sub_134896 = python_operator(stypy.reporting.localization.Localization(__file__, 285, 25), '-', an_134893, ndim_134895)
    
    # Applying the 'usub' unary operator (line 285)
    result___neg___134897 = python_operator(stypy.reporting.localization.Localization(__file__, 285, 23), 'usub', result_sub_134896)
    
    slice_134898 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 285, 15), result___neg___134897, None, None)
    # Getting the type of 'a' (line 285)
    a_134899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 15), 'a')
    # Obtaining the member 'shape' of a type (line 285)
    shape_134900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 15), a_134899, 'shape')
    # Obtaining the member '__getitem__' of a type (line 285)
    getitem___134901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 15), shape_134900, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 285)
    subscript_call_result_134902 = invoke(stypy.reporting.localization.Localization(__file__, 285, 15), getitem___134901, slice_134898)
    
    # Assigning a type to the variable 'oldshape' (line 285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'oldshape', subscript_call_result_134902)
    
    # Assigning a Num to a Name (line 286):
    
    # Assigning a Num to a Name (line 286):
    int_134903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 286, 11), 'int')
    # Assigning a type to the variable 'prod' (line 286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'prod', int_134903)
    
    # Getting the type of 'oldshape' (line 287)
    oldshape_134904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 13), 'oldshape')
    # Testing the type of a for loop iterable (line 287)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 287, 4), oldshape_134904)
    # Getting the type of the for loop variable (line 287)
    for_loop_var_134905 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 287, 4), oldshape_134904)
    # Assigning a type to the variable 'k' (line 287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'k', for_loop_var_134905)
    # SSA begins for a for statement (line 287)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'prod' (line 288)
    prod_134906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'prod')
    # Getting the type of 'k' (line 288)
    k_134907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 16), 'k')
    # Applying the binary operator '*=' (line 288)
    result_imul_134908 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 8), '*=', prod_134906, k_134907)
    # Assigning a type to the variable 'prod' (line 288)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'prod', result_imul_134908)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 290):
    
    # Assigning a Call to a Name (line 290):
    
    # Call to reshape(...): (line 290)
    # Processing the call arguments (line 290)
    int_134911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 18), 'int')
    # Getting the type of 'prod' (line 290)
    prod_134912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 22), 'prod', False)
    # Processing the call keyword arguments (line 290)
    kwargs_134913 = {}
    # Getting the type of 'a' (line 290)
    a_134909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'a', False)
    # Obtaining the member 'reshape' of a type (line 290)
    reshape_134910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 8), a_134909, 'reshape')
    # Calling reshape(args, kwargs) (line 290)
    reshape_call_result_134914 = invoke(stypy.reporting.localization.Localization(__file__, 290, 8), reshape_134910, *[int_134911, prod_134912], **kwargs_134913)
    
    # Assigning a type to the variable 'a' (line 290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'a', reshape_call_result_134914)
    
    # Assigning a Call to a Name (line 291):
    
    # Assigning a Call to a Name (line 291):
    
    # Call to ravel(...): (line 291)
    # Processing the call keyword arguments (line 291)
    kwargs_134917 = {}
    # Getting the type of 'b' (line 291)
    b_134915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'b', False)
    # Obtaining the member 'ravel' of a type (line 291)
    ravel_134916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 8), b_134915, 'ravel')
    # Calling ravel(args, kwargs) (line 291)
    ravel_call_result_134918 = invoke(stypy.reporting.localization.Localization(__file__, 291, 8), ravel_134916, *[], **kwargs_134917)
    
    # Assigning a type to the variable 'b' (line 291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 4), 'b', ravel_call_result_134918)
    
    # Assigning a Call to a Name (line 292):
    
    # Assigning a Call to a Name (line 292):
    
    # Call to wrap(...): (line 292)
    # Processing the call arguments (line 292)
    
    # Call to solve(...): (line 292)
    # Processing the call arguments (line 292)
    # Getting the type of 'a' (line 292)
    a_134921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 21), 'a', False)
    # Getting the type of 'b' (line 292)
    b_134922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 24), 'b', False)
    # Processing the call keyword arguments (line 292)
    kwargs_134923 = {}
    # Getting the type of 'solve' (line 292)
    solve_134920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 15), 'solve', False)
    # Calling solve(args, kwargs) (line 292)
    solve_call_result_134924 = invoke(stypy.reporting.localization.Localization(__file__, 292, 15), solve_134920, *[a_134921, b_134922], **kwargs_134923)
    
    # Processing the call keyword arguments (line 292)
    kwargs_134925 = {}
    # Getting the type of 'wrap' (line 292)
    wrap_134919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 10), 'wrap', False)
    # Calling wrap(args, kwargs) (line 292)
    wrap_call_result_134926 = invoke(stypy.reporting.localization.Localization(__file__, 292, 10), wrap_134919, *[solve_call_result_134924], **kwargs_134925)
    
    # Assigning a type to the variable 'res' (line 292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'res', wrap_call_result_134926)
    
    # Assigning a Name to a Attribute (line 293):
    
    # Assigning a Name to a Attribute (line 293):
    # Getting the type of 'oldshape' (line 293)
    oldshape_134927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 16), 'oldshape')
    # Getting the type of 'res' (line 293)
    res_134928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 4), 'res')
    # Setting the type of the member 'shape' of a type (line 293)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 4), res_134928, 'shape', oldshape_134927)
    # Getting the type of 'res' (line 294)
    res_134929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 4), 'stypy_return_type', res_134929)
    
    # ################# End of 'tensorsolve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tensorsolve' in the type store
    # Getting the type of 'stypy_return_type' (line 227)
    stypy_return_type_134930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_134930)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tensorsolve'
    return stypy_return_type_134930

# Assigning a type to the variable 'tensorsolve' (line 227)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 0), 'tensorsolve', tensorsolve)

@norecursion
def solve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'solve'
    module_type_store = module_type_store.open_function_context('solve', 296, 0, False)
    
    # Passed parameters checking function
    solve.stypy_localization = localization
    solve.stypy_type_of_self = None
    solve.stypy_type_store = module_type_store
    solve.stypy_function_name = 'solve'
    solve.stypy_param_names_list = ['a', 'b']
    solve.stypy_varargs_param_name = None
    solve.stypy_kwargs_param_name = None
    solve.stypy_call_defaults = defaults
    solve.stypy_call_varargs = varargs
    solve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'solve', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'solve', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'solve(...)' code ##################

    str_134931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, (-1)), 'str', '\n    Solve a linear matrix equation, or system of linear scalar equations.\n\n    Computes the "exact" solution, `x`, of the well-determined, i.e., full\n    rank, linear matrix equation `ax = b`.\n\n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        Coefficient matrix.\n    b : {(..., M,), (..., M, K)}, array_like\n        Ordinate or "dependent variable" values.\n\n    Returns\n    -------\n    x : {(..., M,), (..., M, K)} ndarray\n        Solution to the system a x = b.  Returned shape is identical to `b`.\n\n    Raises\n    ------\n    LinAlgError\n        If `a` is singular or not square.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    The solutions are computed using LAPACK routine _gesv\n\n    `a` must be square and of full-rank, i.e., all rows (or, equivalently,\n    columns) must be linearly independent; if either is not true, use\n    `lstsq` for the least-squares best "solution" of the\n    system/equation.\n\n    References\n    ----------\n    .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n           FL, Academic Press, Inc., 1980, pg. 22.\n\n    Examples\n    --------\n    Solve the system of equations ``3 * x0 + x1 = 9`` and ``x0 + 2 * x1 = 8``:\n\n    >>> a = np.array([[3,1], [1,2]])\n    >>> b = np.array([9,8])\n    >>> x = np.linalg.solve(a, b)\n    >>> x\n    array([ 2.,  3.])\n\n    Check that the solution is correct:\n\n    >>> np.allclose(np.dot(a, x), b)\n    True\n\n    ')
    
    # Assigning a Call to a Tuple (line 356):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 356)
    # Processing the call arguments (line 356)
    # Getting the type of 'a' (line 356)
    a_134933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 22), 'a', False)
    # Processing the call keyword arguments (line 356)
    kwargs_134934 = {}
    # Getting the type of '_makearray' (line 356)
    _makearray_134932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 11), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 356)
    _makearray_call_result_134935 = invoke(stypy.reporting.localization.Localization(__file__, 356, 11), _makearray_134932, *[a_134933], **kwargs_134934)
    
    # Assigning a type to the variable 'call_assignment_134270' (line 356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'call_assignment_134270', _makearray_call_result_134935)
    
    # Assigning a Call to a Name (line 356):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_134938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 4), 'int')
    # Processing the call keyword arguments
    kwargs_134939 = {}
    # Getting the type of 'call_assignment_134270' (line 356)
    call_assignment_134270_134936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'call_assignment_134270', False)
    # Obtaining the member '__getitem__' of a type (line 356)
    getitem___134937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 4), call_assignment_134270_134936, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_134940 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___134937, *[int_134938], **kwargs_134939)
    
    # Assigning a type to the variable 'call_assignment_134271' (line 356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'call_assignment_134271', getitem___call_result_134940)
    
    # Assigning a Name to a Name (line 356):
    # Getting the type of 'call_assignment_134271' (line 356)
    call_assignment_134271_134941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'call_assignment_134271')
    # Assigning a type to the variable 'a' (line 356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'a', call_assignment_134271_134941)
    
    # Assigning a Call to a Name (line 356):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_134944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 4), 'int')
    # Processing the call keyword arguments
    kwargs_134945 = {}
    # Getting the type of 'call_assignment_134270' (line 356)
    call_assignment_134270_134942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'call_assignment_134270', False)
    # Obtaining the member '__getitem__' of a type (line 356)
    getitem___134943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 4), call_assignment_134270_134942, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_134946 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___134943, *[int_134944], **kwargs_134945)
    
    # Assigning a type to the variable 'call_assignment_134272' (line 356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'call_assignment_134272', getitem___call_result_134946)
    
    # Assigning a Name to a Name (line 356):
    # Getting the type of 'call_assignment_134272' (line 356)
    call_assignment_134272_134947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'call_assignment_134272')
    # Assigning a type to the variable '_' (line 356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 7), '_', call_assignment_134272_134947)
    
    # Call to _assertRankAtLeast2(...): (line 357)
    # Processing the call arguments (line 357)
    # Getting the type of 'a' (line 357)
    a_134949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 24), 'a', False)
    # Processing the call keyword arguments (line 357)
    kwargs_134950 = {}
    # Getting the type of '_assertRankAtLeast2' (line 357)
    _assertRankAtLeast2_134948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 357)
    _assertRankAtLeast2_call_result_134951 = invoke(stypy.reporting.localization.Localization(__file__, 357, 4), _assertRankAtLeast2_134948, *[a_134949], **kwargs_134950)
    
    
    # Call to _assertNdSquareness(...): (line 358)
    # Processing the call arguments (line 358)
    # Getting the type of 'a' (line 358)
    a_134953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 24), 'a', False)
    # Processing the call keyword arguments (line 358)
    kwargs_134954 = {}
    # Getting the type of '_assertNdSquareness' (line 358)
    _assertNdSquareness_134952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 358)
    _assertNdSquareness_call_result_134955 = invoke(stypy.reporting.localization.Localization(__file__, 358, 4), _assertNdSquareness_134952, *[a_134953], **kwargs_134954)
    
    
    # Assigning a Call to a Tuple (line 359):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 359)
    # Processing the call arguments (line 359)
    # Getting the type of 'b' (line 359)
    b_134957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 25), 'b', False)
    # Processing the call keyword arguments (line 359)
    kwargs_134958 = {}
    # Getting the type of '_makearray' (line 359)
    _makearray_134956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 359)
    _makearray_call_result_134959 = invoke(stypy.reporting.localization.Localization(__file__, 359, 14), _makearray_134956, *[b_134957], **kwargs_134958)
    
    # Assigning a type to the variable 'call_assignment_134273' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'call_assignment_134273', _makearray_call_result_134959)
    
    # Assigning a Call to a Name (line 359):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_134962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 4), 'int')
    # Processing the call keyword arguments
    kwargs_134963 = {}
    # Getting the type of 'call_assignment_134273' (line 359)
    call_assignment_134273_134960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'call_assignment_134273', False)
    # Obtaining the member '__getitem__' of a type (line 359)
    getitem___134961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 4), call_assignment_134273_134960, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_134964 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___134961, *[int_134962], **kwargs_134963)
    
    # Assigning a type to the variable 'call_assignment_134274' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'call_assignment_134274', getitem___call_result_134964)
    
    # Assigning a Name to a Name (line 359):
    # Getting the type of 'call_assignment_134274' (line 359)
    call_assignment_134274_134965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'call_assignment_134274')
    # Assigning a type to the variable 'b' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'b', call_assignment_134274_134965)
    
    # Assigning a Call to a Name (line 359):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_134968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 4), 'int')
    # Processing the call keyword arguments
    kwargs_134969 = {}
    # Getting the type of 'call_assignment_134273' (line 359)
    call_assignment_134273_134966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'call_assignment_134273', False)
    # Obtaining the member '__getitem__' of a type (line 359)
    getitem___134967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 4), call_assignment_134273_134966, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_134970 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___134967, *[int_134968], **kwargs_134969)
    
    # Assigning a type to the variable 'call_assignment_134275' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'call_assignment_134275', getitem___call_result_134970)
    
    # Assigning a Name to a Name (line 359):
    # Getting the type of 'call_assignment_134275' (line 359)
    call_assignment_134275_134971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 4), 'call_assignment_134275')
    # Assigning a type to the variable 'wrap' (line 359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 7), 'wrap', call_assignment_134275_134971)
    
    # Assigning a Call to a Tuple (line 360):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 360)
    # Processing the call arguments (line 360)
    # Getting the type of 'a' (line 360)
    a_134973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 30), 'a', False)
    # Getting the type of 'b' (line 360)
    b_134974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 33), 'b', False)
    # Processing the call keyword arguments (line 360)
    kwargs_134975 = {}
    # Getting the type of '_commonType' (line 360)
    _commonType_134972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 360)
    _commonType_call_result_134976 = invoke(stypy.reporting.localization.Localization(__file__, 360, 18), _commonType_134972, *[a_134973, b_134974], **kwargs_134975)
    
    # Assigning a type to the variable 'call_assignment_134276' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'call_assignment_134276', _commonType_call_result_134976)
    
    # Assigning a Call to a Name (line 360):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_134979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 4), 'int')
    # Processing the call keyword arguments
    kwargs_134980 = {}
    # Getting the type of 'call_assignment_134276' (line 360)
    call_assignment_134276_134977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'call_assignment_134276', False)
    # Obtaining the member '__getitem__' of a type (line 360)
    getitem___134978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 4), call_assignment_134276_134977, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_134981 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___134978, *[int_134979], **kwargs_134980)
    
    # Assigning a type to the variable 'call_assignment_134277' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'call_assignment_134277', getitem___call_result_134981)
    
    # Assigning a Name to a Name (line 360):
    # Getting the type of 'call_assignment_134277' (line 360)
    call_assignment_134277_134982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'call_assignment_134277')
    # Assigning a type to the variable 't' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 't', call_assignment_134277_134982)
    
    # Assigning a Call to a Name (line 360):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_134985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 4), 'int')
    # Processing the call keyword arguments
    kwargs_134986 = {}
    # Getting the type of 'call_assignment_134276' (line 360)
    call_assignment_134276_134983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'call_assignment_134276', False)
    # Obtaining the member '__getitem__' of a type (line 360)
    getitem___134984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 4), call_assignment_134276_134983, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_134987 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___134984, *[int_134985], **kwargs_134986)
    
    # Assigning a type to the variable 'call_assignment_134278' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'call_assignment_134278', getitem___call_result_134987)
    
    # Assigning a Name to a Name (line 360):
    # Getting the type of 'call_assignment_134278' (line 360)
    call_assignment_134278_134988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'call_assignment_134278')
    # Assigning a type to the variable 'result_t' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 7), 'result_t', call_assignment_134278_134988)
    
    
    # Getting the type of 'b' (line 364)
    b_134989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 7), 'b')
    # Obtaining the member 'ndim' of a type (line 364)
    ndim_134990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 7), b_134989, 'ndim')
    # Getting the type of 'a' (line 364)
    a_134991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 17), 'a')
    # Obtaining the member 'ndim' of a type (line 364)
    ndim_134992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 17), a_134991, 'ndim')
    int_134993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 26), 'int')
    # Applying the binary operator '-' (line 364)
    result_sub_134994 = python_operator(stypy.reporting.localization.Localization(__file__, 364, 17), '-', ndim_134992, int_134993)
    
    # Applying the binary operator '==' (line 364)
    result_eq_134995 = python_operator(stypy.reporting.localization.Localization(__file__, 364, 7), '==', ndim_134990, result_sub_134994)
    
    # Testing the type of an if condition (line 364)
    if_condition_134996 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 364, 4), result_eq_134995)
    # Assigning a type to the variable 'if_condition_134996' (line 364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 4), 'if_condition_134996', if_condition_134996)
    # SSA begins for if statement (line 364)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_134997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 19), 'int')
    # Getting the type of 'a' (line 365)
    a_134998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 11), 'a')
    # Obtaining the member 'shape' of a type (line 365)
    shape_134999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 11), a_134998, 'shape')
    # Obtaining the member '__getitem__' of a type (line 365)
    getitem___135000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 11), shape_134999, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 365)
    subscript_call_result_135001 = invoke(stypy.reporting.localization.Localization(__file__, 365, 11), getitem___135000, int_134997)
    
    int_135002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 26), 'int')
    # Applying the binary operator '==' (line 365)
    result_eq_135003 = python_operator(stypy.reporting.localization.Localization(__file__, 365, 11), '==', subscript_call_result_135001, int_135002)
    
    
    
    # Obtaining the type of the subscript
    int_135004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 40), 'int')
    # Getting the type of 'b' (line 365)
    b_135005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 32), 'b')
    # Obtaining the member 'shape' of a type (line 365)
    shape_135006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 32), b_135005, 'shape')
    # Obtaining the member '__getitem__' of a type (line 365)
    getitem___135007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 32), shape_135006, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 365)
    subscript_call_result_135008 = invoke(stypy.reporting.localization.Localization(__file__, 365, 32), getitem___135007, int_135004)
    
    int_135009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 47), 'int')
    # Applying the binary operator '==' (line 365)
    result_eq_135010 = python_operator(stypy.reporting.localization.Localization(__file__, 365, 32), '==', subscript_call_result_135008, int_135009)
    
    # Applying the binary operator 'and' (line 365)
    result_and_keyword_135011 = python_operator(stypy.reporting.localization.Localization(__file__, 365, 11), 'and', result_eq_135003, result_eq_135010)
    
    # Testing the type of an if condition (line 365)
    if_condition_135012 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 365, 8), result_and_keyword_135011)
    # Assigning a type to the variable 'if_condition_135012' (line 365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'if_condition_135012', if_condition_135012)
    # SSA begins for if statement (line 365)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 368):
    
    # Assigning a Call to a Name (line 368):
    
    # Call to reshape(...): (line 368)
    # Processing the call arguments (line 368)
    
    # Obtaining the type of the subscript
    int_135015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, 35), 'int')
    slice_135016 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 368, 26), None, int_135015, None)
    # Getting the type of 'a' (line 368)
    a_135017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 26), 'a', False)
    # Obtaining the member 'shape' of a type (line 368)
    shape_135018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 26), a_135017, 'shape')
    # Obtaining the member '__getitem__' of a type (line 368)
    getitem___135019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 26), shape_135018, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 368)
    subscript_call_result_135020 = invoke(stypy.reporting.localization.Localization(__file__, 368, 26), getitem___135019, slice_135016)
    
    # Processing the call keyword arguments (line 368)
    kwargs_135021 = {}
    # Getting the type of 'a' (line 368)
    a_135013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 16), 'a', False)
    # Obtaining the member 'reshape' of a type (line 368)
    reshape_135014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 16), a_135013, 'reshape')
    # Calling reshape(args, kwargs) (line 368)
    reshape_call_result_135022 = invoke(stypy.reporting.localization.Localization(__file__, 368, 16), reshape_135014, *[subscript_call_result_135020], **kwargs_135021)
    
    # Assigning a type to the variable 'a' (line 368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 12), 'a', reshape_call_result_135022)
    
    # Assigning a Call to a Name (line 369):
    
    # Assigning a Call to a Name (line 369):
    
    # Call to broadcast(...): (line 369)
    # Processing the call arguments (line 369)
    # Getting the type of 'a' (line 369)
    a_135024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 27), 'a', False)
    # Getting the type of 'b' (line 369)
    b_135025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 30), 'b', False)
    # Processing the call keyword arguments (line 369)
    kwargs_135026 = {}
    # Getting the type of 'broadcast' (line 369)
    broadcast_135023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 17), 'broadcast', False)
    # Calling broadcast(args, kwargs) (line 369)
    broadcast_call_result_135027 = invoke(stypy.reporting.localization.Localization(__file__, 369, 17), broadcast_135023, *[a_135024, b_135025], **kwargs_135026)
    
    # Assigning a type to the variable 'bc' (line 369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 369, 12), 'bc', broadcast_call_result_135027)
    
    # Call to wrap(...): (line 370)
    # Processing the call arguments (line 370)
    
    # Call to empty(...): (line 370)
    # Processing the call arguments (line 370)
    # Getting the type of 'bc' (line 370)
    bc_135030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 30), 'bc', False)
    # Obtaining the member 'shape' of a type (line 370)
    shape_135031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 30), bc_135030, 'shape')
    # Processing the call keyword arguments (line 370)
    # Getting the type of 'result_t' (line 370)
    result_t_135032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 46), 'result_t', False)
    keyword_135033 = result_t_135032
    kwargs_135034 = {'dtype': keyword_135033}
    # Getting the type of 'empty' (line 370)
    empty_135029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 24), 'empty', False)
    # Calling empty(args, kwargs) (line 370)
    empty_call_result_135035 = invoke(stypy.reporting.localization.Localization(__file__, 370, 24), empty_135029, *[shape_135031], **kwargs_135034)
    
    # Processing the call keyword arguments (line 370)
    kwargs_135036 = {}
    # Getting the type of 'wrap' (line 370)
    wrap_135028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 19), 'wrap', False)
    # Calling wrap(args, kwargs) (line 370)
    wrap_call_result_135037 = invoke(stypy.reporting.localization.Localization(__file__, 370, 19), wrap_135028, *[empty_call_result_135035], **kwargs_135036)
    
    # Assigning a type to the variable 'stypy_return_type' (line 370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 12), 'stypy_return_type', wrap_call_result_135037)
    # SSA join for if statement (line 365)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 372):
    
    # Assigning a Attribute to a Name (line 372):
    # Getting the type of '_umath_linalg' (line 372)
    _umath_linalg_135038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 17), '_umath_linalg')
    # Obtaining the member 'solve1' of a type (line 372)
    solve1_135039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 17), _umath_linalg_135038, 'solve1')
    # Assigning a type to the variable 'gufunc' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 8), 'gufunc', solve1_135039)
    # SSA branch for the else part of an if statement (line 364)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'b' (line 374)
    b_135040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 11), 'b')
    # Obtaining the member 'size' of a type (line 374)
    size_135041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 11), b_135040, 'size')
    int_135042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 374, 21), 'int')
    # Applying the binary operator '==' (line 374)
    result_eq_135043 = python_operator(stypy.reporting.localization.Localization(__file__, 374, 11), '==', size_135041, int_135042)
    
    # Testing the type of an if condition (line 374)
    if_condition_135044 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 374, 8), result_eq_135043)
    # Assigning a type to the variable 'if_condition_135044' (line 374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 8), 'if_condition_135044', if_condition_135044)
    # SSA begins for if statement (line 374)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_135045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 24), 'int')
    # Getting the type of 'a' (line 375)
    a_135046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 16), 'a')
    # Obtaining the member 'shape' of a type (line 375)
    shape_135047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 16), a_135046, 'shape')
    # Obtaining the member '__getitem__' of a type (line 375)
    getitem___135048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 16), shape_135047, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 375)
    subscript_call_result_135049 = invoke(stypy.reporting.localization.Localization(__file__, 375, 16), getitem___135048, int_135045)
    
    int_135050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 31), 'int')
    # Applying the binary operator '==' (line 375)
    result_eq_135051 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 16), '==', subscript_call_result_135049, int_135050)
    
    
    
    # Obtaining the type of the subscript
    int_135052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 45), 'int')
    # Getting the type of 'b' (line 375)
    b_135053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 37), 'b')
    # Obtaining the member 'shape' of a type (line 375)
    shape_135054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 37), b_135053, 'shape')
    # Obtaining the member '__getitem__' of a type (line 375)
    getitem___135055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 37), shape_135054, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 375)
    subscript_call_result_135056 = invoke(stypy.reporting.localization.Localization(__file__, 375, 37), getitem___135055, int_135052)
    
    int_135057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 52), 'int')
    # Applying the binary operator '==' (line 375)
    result_eq_135058 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 37), '==', subscript_call_result_135056, int_135057)
    
    # Applying the binary operator 'and' (line 375)
    result_and_keyword_135059 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 16), 'and', result_eq_135051, result_eq_135058)
    
    
    
    # Obtaining the type of the subscript
    int_135060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 66), 'int')
    # Getting the type of 'b' (line 375)
    b_135061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 58), 'b')
    # Obtaining the member 'shape' of a type (line 375)
    shape_135062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 58), b_135061, 'shape')
    # Obtaining the member '__getitem__' of a type (line 375)
    getitem___135063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 58), shape_135062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 375)
    subscript_call_result_135064 = invoke(stypy.reporting.localization.Localization(__file__, 375, 58), getitem___135063, int_135060)
    
    int_135065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 73), 'int')
    # Applying the binary operator '==' (line 375)
    result_eq_135066 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 58), '==', subscript_call_result_135064, int_135065)
    
    # Applying the binary operator 'or' (line 375)
    result_or_keyword_135067 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 15), 'or', result_and_keyword_135059, result_eq_135066)
    
    # Testing the type of an if condition (line 375)
    if_condition_135068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 375, 12), result_or_keyword_135067)
    # Assigning a type to the variable 'if_condition_135068' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 12), 'if_condition_135068', if_condition_135068)
    # SSA begins for if statement (line 375)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 376):
    
    # Assigning a Call to a Name (line 376):
    
    # Call to reshape(...): (line 376)
    # Processing the call arguments (line 376)
    
    # Obtaining the type of the subscript
    int_135076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 45), 'int')
    slice_135077 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 376, 36), None, int_135076, None)
    # Getting the type of 'a' (line 376)
    a_135078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 36), 'a', False)
    # Obtaining the member 'shape' of a type (line 376)
    shape_135079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 36), a_135078, 'shape')
    # Obtaining the member '__getitem__' of a type (line 376)
    getitem___135080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 36), shape_135079, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 376)
    subscript_call_result_135081 = invoke(stypy.reporting.localization.Localization(__file__, 376, 36), getitem___135080, slice_135077)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 376)
    tuple_135082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 52), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 376)
    # Adding element type (line 376)
    int_135083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 52), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 376, 52), tuple_135082, int_135083)
    
    # Applying the binary operator '+' (line 376)
    result_add_135084 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 36), '+', subscript_call_result_135081, tuple_135082)
    
    # Processing the call keyword arguments (line 376)
    kwargs_135085 = {}
    
    # Obtaining the type of the subscript
    slice_135069 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 376, 20), None, None, None)
    int_135070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 25), 'int')
    slice_135071 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 376, 20), None, int_135070, None)
    # Getting the type of 'a' (line 376)
    a_135072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 20), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 376)
    getitem___135073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 20), a_135072, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 376)
    subscript_call_result_135074 = invoke(stypy.reporting.localization.Localization(__file__, 376, 20), getitem___135073, (slice_135069, slice_135071))
    
    # Obtaining the member 'reshape' of a type (line 376)
    reshape_135075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 20), subscript_call_result_135074, 'reshape')
    # Calling reshape(args, kwargs) (line 376)
    reshape_call_result_135086 = invoke(stypy.reporting.localization.Localization(__file__, 376, 20), reshape_135075, *[result_add_135084], **kwargs_135085)
    
    # Assigning a type to the variable 'a' (line 376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 16), 'a', reshape_call_result_135086)
    
    # Assigning a Call to a Name (line 377):
    
    # Assigning a Call to a Name (line 377):
    
    # Call to broadcast(...): (line 377)
    # Processing the call arguments (line 377)
    # Getting the type of 'a' (line 377)
    a_135088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 31), 'a', False)
    # Getting the type of 'b' (line 377)
    b_135089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 34), 'b', False)
    # Processing the call keyword arguments (line 377)
    kwargs_135090 = {}
    # Getting the type of 'broadcast' (line 377)
    broadcast_135087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 21), 'broadcast', False)
    # Calling broadcast(args, kwargs) (line 377)
    broadcast_call_result_135091 = invoke(stypy.reporting.localization.Localization(__file__, 377, 21), broadcast_135087, *[a_135088, b_135089], **kwargs_135090)
    
    # Assigning a type to the variable 'bc' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 16), 'bc', broadcast_call_result_135091)
    
    # Call to wrap(...): (line 378)
    # Processing the call arguments (line 378)
    
    # Call to empty(...): (line 378)
    # Processing the call arguments (line 378)
    # Getting the type of 'bc' (line 378)
    bc_135094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 34), 'bc', False)
    # Obtaining the member 'shape' of a type (line 378)
    shape_135095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 34), bc_135094, 'shape')
    # Processing the call keyword arguments (line 378)
    # Getting the type of 'result_t' (line 378)
    result_t_135096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 50), 'result_t', False)
    keyword_135097 = result_t_135096
    kwargs_135098 = {'dtype': keyword_135097}
    # Getting the type of 'empty' (line 378)
    empty_135093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 28), 'empty', False)
    # Calling empty(args, kwargs) (line 378)
    empty_call_result_135099 = invoke(stypy.reporting.localization.Localization(__file__, 378, 28), empty_135093, *[shape_135095], **kwargs_135098)
    
    # Processing the call keyword arguments (line 378)
    kwargs_135100 = {}
    # Getting the type of 'wrap' (line 378)
    wrap_135092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 23), 'wrap', False)
    # Calling wrap(args, kwargs) (line 378)
    wrap_call_result_135101 = invoke(stypy.reporting.localization.Localization(__file__, 378, 23), wrap_135092, *[empty_call_result_135099], **kwargs_135100)
    
    # Assigning a type to the variable 'stypy_return_type' (line 378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 16), 'stypy_return_type', wrap_call_result_135101)
    # SSA join for if statement (line 375)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 374)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 380):
    
    # Assigning a Attribute to a Name (line 380):
    # Getting the type of '_umath_linalg' (line 380)
    _umath_linalg_135102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 17), '_umath_linalg')
    # Obtaining the member 'solve' of a type (line 380)
    solve_135103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 380, 17), _umath_linalg_135102, 'solve')
    # Assigning a type to the variable 'gufunc' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 8), 'gufunc', solve_135103)
    # SSA join for if statement (line 364)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 382):
    
    # Assigning a IfExp to a Name (line 382):
    
    
    # Call to isComplexType(...): (line 382)
    # Processing the call arguments (line 382)
    # Getting the type of 't' (line 382)
    t_135105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 41), 't', False)
    # Processing the call keyword arguments (line 382)
    kwargs_135106 = {}
    # Getting the type of 'isComplexType' (line 382)
    isComplexType_135104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 27), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 382)
    isComplexType_call_result_135107 = invoke(stypy.reporting.localization.Localization(__file__, 382, 27), isComplexType_135104, *[t_135105], **kwargs_135106)
    
    # Testing the type of an if expression (line 382)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 382, 16), isComplexType_call_result_135107)
    # SSA begins for if expression (line 382)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_135108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 16), 'str', 'DD->D')
    # SSA branch for the else part of an if expression (line 382)
    module_type_store.open_ssa_branch('if expression else')
    str_135109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, 49), 'str', 'dd->d')
    # SSA join for if expression (line 382)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_135110 = union_type.UnionType.add(str_135108, str_135109)
    
    # Assigning a type to the variable 'signature' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'signature', if_exp_135110)
    
    # Assigning a Call to a Name (line 383):
    
    # Assigning a Call to a Name (line 383):
    
    # Call to get_linalg_error_extobj(...): (line 383)
    # Processing the call arguments (line 383)
    # Getting the type of '_raise_linalgerror_singular' (line 383)
    _raise_linalgerror_singular_135112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 37), '_raise_linalgerror_singular', False)
    # Processing the call keyword arguments (line 383)
    kwargs_135113 = {}
    # Getting the type of 'get_linalg_error_extobj' (line 383)
    get_linalg_error_extobj_135111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 13), 'get_linalg_error_extobj', False)
    # Calling get_linalg_error_extobj(args, kwargs) (line 383)
    get_linalg_error_extobj_call_result_135114 = invoke(stypy.reporting.localization.Localization(__file__, 383, 13), get_linalg_error_extobj_135111, *[_raise_linalgerror_singular_135112], **kwargs_135113)
    
    # Assigning a type to the variable 'extobj' (line 383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'extobj', get_linalg_error_extobj_call_result_135114)
    
    # Assigning a Call to a Name (line 384):
    
    # Assigning a Call to a Name (line 384):
    
    # Call to gufunc(...): (line 384)
    # Processing the call arguments (line 384)
    # Getting the type of 'a' (line 384)
    a_135116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 15), 'a', False)
    # Getting the type of 'b' (line 384)
    b_135117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 18), 'b', False)
    # Processing the call keyword arguments (line 384)
    # Getting the type of 'signature' (line 384)
    signature_135118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 31), 'signature', False)
    keyword_135119 = signature_135118
    # Getting the type of 'extobj' (line 384)
    extobj_135120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 49), 'extobj', False)
    keyword_135121 = extobj_135120
    kwargs_135122 = {'extobj': keyword_135121, 'signature': keyword_135119}
    # Getting the type of 'gufunc' (line 384)
    gufunc_135115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'gufunc', False)
    # Calling gufunc(args, kwargs) (line 384)
    gufunc_call_result_135123 = invoke(stypy.reporting.localization.Localization(__file__, 384, 8), gufunc_135115, *[a_135116, b_135117], **kwargs_135122)
    
    # Assigning a type to the variable 'r' (line 384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 4), 'r', gufunc_call_result_135123)
    
    # Call to wrap(...): (line 386)
    # Processing the call arguments (line 386)
    
    # Call to astype(...): (line 386)
    # Processing the call arguments (line 386)
    # Getting the type of 'result_t' (line 386)
    result_t_135127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 25), 'result_t', False)
    # Processing the call keyword arguments (line 386)
    # Getting the type of 'False' (line 386)
    False_135128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 40), 'False', False)
    keyword_135129 = False_135128
    kwargs_135130 = {'copy': keyword_135129}
    # Getting the type of 'r' (line 386)
    r_135125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 16), 'r', False)
    # Obtaining the member 'astype' of a type (line 386)
    astype_135126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 16), r_135125, 'astype')
    # Calling astype(args, kwargs) (line 386)
    astype_call_result_135131 = invoke(stypy.reporting.localization.Localization(__file__, 386, 16), astype_135126, *[result_t_135127], **kwargs_135130)
    
    # Processing the call keyword arguments (line 386)
    kwargs_135132 = {}
    # Getting the type of 'wrap' (line 386)
    wrap_135124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 11), 'wrap', False)
    # Calling wrap(args, kwargs) (line 386)
    wrap_call_result_135133 = invoke(stypy.reporting.localization.Localization(__file__, 386, 11), wrap_135124, *[astype_call_result_135131], **kwargs_135132)
    
    # Assigning a type to the variable 'stypy_return_type' (line 386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'stypy_return_type', wrap_call_result_135133)
    
    # ################# End of 'solve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'solve' in the type store
    # Getting the type of 'stypy_return_type' (line 296)
    stypy_return_type_135134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_135134)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'solve'
    return stypy_return_type_135134

# Assigning a type to the variable 'solve' (line 296)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 0), 'solve', solve)

@norecursion
def tensorinv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_135135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 21), 'int')
    defaults = [int_135135]
    # Create a new context for function 'tensorinv'
    module_type_store = module_type_store.open_function_context('tensorinv', 389, 0, False)
    
    # Passed parameters checking function
    tensorinv.stypy_localization = localization
    tensorinv.stypy_type_of_self = None
    tensorinv.stypy_type_store = module_type_store
    tensorinv.stypy_function_name = 'tensorinv'
    tensorinv.stypy_param_names_list = ['a', 'ind']
    tensorinv.stypy_varargs_param_name = None
    tensorinv.stypy_kwargs_param_name = None
    tensorinv.stypy_call_defaults = defaults
    tensorinv.stypy_call_varargs = varargs
    tensorinv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tensorinv', ['a', 'ind'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tensorinv', localization, ['a', 'ind'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tensorinv(...)' code ##################

    str_135136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, (-1)), 'str', '\n    Compute the \'inverse\' of an N-dimensional array.\n\n    The result is an inverse for `a` relative to the tensordot operation\n    ``tensordot(a, b, ind)``, i. e., up to floating-point accuracy,\n    ``tensordot(tensorinv(a), a, ind)`` is the "identity" tensor for the\n    tensordot operation.\n\n    Parameters\n    ----------\n    a : array_like\n        Tensor to \'invert\'. Its shape must be \'square\', i. e.,\n        ``prod(a.shape[:ind]) == prod(a.shape[ind:])``.\n    ind : int, optional\n        Number of first indices that are involved in the inverse sum.\n        Must be a positive integer, default is 2.\n\n    Returns\n    -------\n    b : ndarray\n        `a`\'s tensordot inverse, shape ``a.shape[ind:] + a.shape[:ind]``.\n\n    Raises\n    ------\n    LinAlgError\n        If `a` is singular or not \'square\' (in the above sense).\n\n    See Also\n    --------\n    tensordot, tensorsolve\n\n    Examples\n    --------\n    >>> a = np.eye(4*6)\n    >>> a.shape = (4, 6, 8, 3)\n    >>> ainv = np.linalg.tensorinv(a, ind=2)\n    >>> ainv.shape\n    (8, 3, 4, 6)\n    >>> b = np.random.randn(4, 6)\n    >>> np.allclose(np.tensordot(ainv, b), np.linalg.tensorsolve(a, b))\n    True\n\n    >>> a = np.eye(4*6)\n    >>> a.shape = (24, 8, 3)\n    >>> ainv = np.linalg.tensorinv(a, ind=1)\n    >>> ainv.shape\n    (8, 3, 24)\n    >>> b = np.random.randn(24)\n    >>> np.allclose(np.tensordot(ainv, b, 1), np.linalg.tensorsolve(a, b))\n    True\n\n    ')
    
    # Assigning a Call to a Name (line 442):
    
    # Assigning a Call to a Name (line 442):
    
    # Call to asarray(...): (line 442)
    # Processing the call arguments (line 442)
    # Getting the type of 'a' (line 442)
    a_135138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 16), 'a', False)
    # Processing the call keyword arguments (line 442)
    kwargs_135139 = {}
    # Getting the type of 'asarray' (line 442)
    asarray_135137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 442)
    asarray_call_result_135140 = invoke(stypy.reporting.localization.Localization(__file__, 442, 8), asarray_135137, *[a_135138], **kwargs_135139)
    
    # Assigning a type to the variable 'a' (line 442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 4), 'a', asarray_call_result_135140)
    
    # Assigning a Attribute to a Name (line 443):
    
    # Assigning a Attribute to a Name (line 443):
    # Getting the type of 'a' (line 443)
    a_135141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 15), 'a')
    # Obtaining the member 'shape' of a type (line 443)
    shape_135142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 15), a_135141, 'shape')
    # Assigning a type to the variable 'oldshape' (line 443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 4), 'oldshape', shape_135142)
    
    # Assigning a Num to a Name (line 444):
    
    # Assigning a Num to a Name (line 444):
    int_135143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, 11), 'int')
    # Assigning a type to the variable 'prod' (line 444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 4), 'prod', int_135143)
    
    
    # Getting the type of 'ind' (line 445)
    ind_135144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 7), 'ind')
    int_135145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 13), 'int')
    # Applying the binary operator '>' (line 445)
    result_gt_135146 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 7), '>', ind_135144, int_135145)
    
    # Testing the type of an if condition (line 445)
    if_condition_135147 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 445, 4), result_gt_135146)
    # Assigning a type to the variable 'if_condition_135147' (line 445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 4), 'if_condition_135147', if_condition_135147)
    # SSA begins for if statement (line 445)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 446):
    
    # Assigning a BinOp to a Name (line 446):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 446)
    ind_135148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 28), 'ind')
    slice_135149 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 446, 19), ind_135148, None, None)
    # Getting the type of 'oldshape' (line 446)
    oldshape_135150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 19), 'oldshape')
    # Obtaining the member '__getitem__' of a type (line 446)
    getitem___135151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 19), oldshape_135150, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 446)
    subscript_call_result_135152 = invoke(stypy.reporting.localization.Localization(__file__, 446, 19), getitem___135151, slice_135149)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 446)
    ind_135153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 46), 'ind')
    slice_135154 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 446, 36), None, ind_135153, None)
    # Getting the type of 'oldshape' (line 446)
    oldshape_135155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 36), 'oldshape')
    # Obtaining the member '__getitem__' of a type (line 446)
    getitem___135156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 36), oldshape_135155, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 446)
    subscript_call_result_135157 = invoke(stypy.reporting.localization.Localization(__file__, 446, 36), getitem___135156, slice_135154)
    
    # Applying the binary operator '+' (line 446)
    result_add_135158 = python_operator(stypy.reporting.localization.Localization(__file__, 446, 19), '+', subscript_call_result_135152, subscript_call_result_135157)
    
    # Assigning a type to the variable 'invshape' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'invshape', result_add_135158)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 447)
    ind_135159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 26), 'ind')
    slice_135160 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 447, 17), ind_135159, None, None)
    # Getting the type of 'oldshape' (line 447)
    oldshape_135161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 17), 'oldshape')
    # Obtaining the member '__getitem__' of a type (line 447)
    getitem___135162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 17), oldshape_135161, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 447)
    subscript_call_result_135163 = invoke(stypy.reporting.localization.Localization(__file__, 447, 17), getitem___135162, slice_135160)
    
    # Testing the type of a for loop iterable (line 447)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 447, 8), subscript_call_result_135163)
    # Getting the type of the for loop variable (line 447)
    for_loop_var_135164 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 447, 8), subscript_call_result_135163)
    # Assigning a type to the variable 'k' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'k', for_loop_var_135164)
    # SSA begins for a for statement (line 447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'prod' (line 448)
    prod_135165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 12), 'prod')
    # Getting the type of 'k' (line 448)
    k_135166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 20), 'k')
    # Applying the binary operator '*=' (line 448)
    result_imul_135167 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 12), '*=', prod_135165, k_135166)
    # Assigning a type to the variable 'prod' (line 448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 12), 'prod', result_imul_135167)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 445)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 450)
    # Processing the call arguments (line 450)
    str_135169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 25), 'str', 'Invalid ind argument.')
    # Processing the call keyword arguments (line 450)
    kwargs_135170 = {}
    # Getting the type of 'ValueError' (line 450)
    ValueError_135168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 450)
    ValueError_call_result_135171 = invoke(stypy.reporting.localization.Localization(__file__, 450, 14), ValueError_135168, *[str_135169], **kwargs_135170)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 450, 8), ValueError_call_result_135171, 'raise parameter', BaseException)
    # SSA join for if statement (line 445)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 451):
    
    # Assigning a Call to a Name (line 451):
    
    # Call to reshape(...): (line 451)
    # Processing the call arguments (line 451)
    # Getting the type of 'prod' (line 451)
    prod_135174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 18), 'prod', False)
    int_135175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, 24), 'int')
    # Processing the call keyword arguments (line 451)
    kwargs_135176 = {}
    # Getting the type of 'a' (line 451)
    a_135172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 8), 'a', False)
    # Obtaining the member 'reshape' of a type (line 451)
    reshape_135173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 8), a_135172, 'reshape')
    # Calling reshape(args, kwargs) (line 451)
    reshape_call_result_135177 = invoke(stypy.reporting.localization.Localization(__file__, 451, 8), reshape_135173, *[prod_135174, int_135175], **kwargs_135176)
    
    # Assigning a type to the variable 'a' (line 451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 4), 'a', reshape_call_result_135177)
    
    # Assigning a Call to a Name (line 452):
    
    # Assigning a Call to a Name (line 452):
    
    # Call to inv(...): (line 452)
    # Processing the call arguments (line 452)
    # Getting the type of 'a' (line 452)
    a_135179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 13), 'a', False)
    # Processing the call keyword arguments (line 452)
    kwargs_135180 = {}
    # Getting the type of 'inv' (line 452)
    inv_135178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 9), 'inv', False)
    # Calling inv(args, kwargs) (line 452)
    inv_call_result_135181 = invoke(stypy.reporting.localization.Localization(__file__, 452, 9), inv_135178, *[a_135179], **kwargs_135180)
    
    # Assigning a type to the variable 'ia' (line 452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 4), 'ia', inv_call_result_135181)
    
    # Call to reshape(...): (line 453)
    # Getting the type of 'invshape' (line 453)
    invshape_135184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 23), 'invshape', False)
    # Processing the call keyword arguments (line 453)
    kwargs_135185 = {}
    # Getting the type of 'ia' (line 453)
    ia_135182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 11), 'ia', False)
    # Obtaining the member 'reshape' of a type (line 453)
    reshape_135183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 11), ia_135182, 'reshape')
    # Calling reshape(args, kwargs) (line 453)
    reshape_call_result_135186 = invoke(stypy.reporting.localization.Localization(__file__, 453, 11), reshape_135183, *[invshape_135184], **kwargs_135185)
    
    # Assigning a type to the variable 'stypy_return_type' (line 453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 4), 'stypy_return_type', reshape_call_result_135186)
    
    # ################# End of 'tensorinv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tensorinv' in the type store
    # Getting the type of 'stypy_return_type' (line 389)
    stypy_return_type_135187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_135187)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tensorinv'
    return stypy_return_type_135187

# Assigning a type to the variable 'tensorinv' (line 389)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 0), 'tensorinv', tensorinv)

@norecursion
def inv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'inv'
    module_type_store = module_type_store.open_function_context('inv', 458, 0, False)
    
    # Passed parameters checking function
    inv.stypy_localization = localization
    inv.stypy_type_of_self = None
    inv.stypy_type_store = module_type_store
    inv.stypy_function_name = 'inv'
    inv.stypy_param_names_list = ['a']
    inv.stypy_varargs_param_name = None
    inv.stypy_kwargs_param_name = None
    inv.stypy_call_defaults = defaults
    inv.stypy_call_varargs = varargs
    inv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'inv', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'inv', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'inv(...)' code ##################

    str_135188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, (-1)), 'str', '\n    Compute the (multiplicative) inverse of a matrix.\n\n    Given a square matrix `a`, return the matrix `ainv` satisfying\n    ``dot(a, ainv) = dot(ainv, a) = eye(a.shape[0])``.\n\n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        Matrix to be inverted.\n\n    Returns\n    -------\n    ainv : (..., M, M) ndarray or matrix\n        (Multiplicative) inverse of the matrix `a`.\n\n    Raises\n    ------\n    LinAlgError\n        If `a` is not square or inversion fails.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    Examples\n    --------\n    >>> from numpy.linalg import inv\n    >>> a = np.array([[1., 2.], [3., 4.]])\n    >>> ainv = inv(a)\n    >>> np.allclose(np.dot(a, ainv), np.eye(2))\n    True\n    >>> np.allclose(np.dot(ainv, a), np.eye(2))\n    True\n\n    If a is a matrix object, then the return value is a matrix as well:\n\n    >>> ainv = inv(np.matrix(a))\n    >>> ainv\n    matrix([[-2. ,  1. ],\n            [ 1.5, -0.5]])\n\n    Inverses of several matrices can be computed at once:\n\n    >>> a = np.array([[[1., 2.], [3., 4.]], [[1, 3], [3, 5]]])\n    >>> inv(a)\n    array([[[-2. ,  1. ],\n            [ 1.5, -0.5]],\n           [[-5. ,  2. ],\n            [ 3. , -1. ]]])\n\n    ')
    
    # Assigning a Call to a Tuple (line 515):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 515)
    # Processing the call arguments (line 515)
    # Getting the type of 'a' (line 515)
    a_135190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 25), 'a', False)
    # Processing the call keyword arguments (line 515)
    kwargs_135191 = {}
    # Getting the type of '_makearray' (line 515)
    _makearray_135189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 515)
    _makearray_call_result_135192 = invoke(stypy.reporting.localization.Localization(__file__, 515, 14), _makearray_135189, *[a_135190], **kwargs_135191)
    
    # Assigning a type to the variable 'call_assignment_134279' (line 515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'call_assignment_134279', _makearray_call_result_135192)
    
    # Assigning a Call to a Name (line 515):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135196 = {}
    # Getting the type of 'call_assignment_134279' (line 515)
    call_assignment_134279_135193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'call_assignment_134279', False)
    # Obtaining the member '__getitem__' of a type (line 515)
    getitem___135194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 4), call_assignment_134279_135193, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135197 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135194, *[int_135195], **kwargs_135196)
    
    # Assigning a type to the variable 'call_assignment_134280' (line 515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'call_assignment_134280', getitem___call_result_135197)
    
    # Assigning a Name to a Name (line 515):
    # Getting the type of 'call_assignment_134280' (line 515)
    call_assignment_134280_135198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'call_assignment_134280')
    # Assigning a type to the variable 'a' (line 515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'a', call_assignment_134280_135198)
    
    # Assigning a Call to a Name (line 515):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135202 = {}
    # Getting the type of 'call_assignment_134279' (line 515)
    call_assignment_134279_135199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'call_assignment_134279', False)
    # Obtaining the member '__getitem__' of a type (line 515)
    getitem___135200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 4), call_assignment_134279_135199, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135203 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135200, *[int_135201], **kwargs_135202)
    
    # Assigning a type to the variable 'call_assignment_134281' (line 515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'call_assignment_134281', getitem___call_result_135203)
    
    # Assigning a Name to a Name (line 515):
    # Getting the type of 'call_assignment_134281' (line 515)
    call_assignment_134281_135204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 4), 'call_assignment_134281')
    # Assigning a type to the variable 'wrap' (line 515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 7), 'wrap', call_assignment_134281_135204)
    
    # Call to _assertRankAtLeast2(...): (line 516)
    # Processing the call arguments (line 516)
    # Getting the type of 'a' (line 516)
    a_135206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 24), 'a', False)
    # Processing the call keyword arguments (line 516)
    kwargs_135207 = {}
    # Getting the type of '_assertRankAtLeast2' (line 516)
    _assertRankAtLeast2_135205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 516)
    _assertRankAtLeast2_call_result_135208 = invoke(stypy.reporting.localization.Localization(__file__, 516, 4), _assertRankAtLeast2_135205, *[a_135206], **kwargs_135207)
    
    
    # Call to _assertNdSquareness(...): (line 517)
    # Processing the call arguments (line 517)
    # Getting the type of 'a' (line 517)
    a_135210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 24), 'a', False)
    # Processing the call keyword arguments (line 517)
    kwargs_135211 = {}
    # Getting the type of '_assertNdSquareness' (line 517)
    _assertNdSquareness_135209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 517)
    _assertNdSquareness_call_result_135212 = invoke(stypy.reporting.localization.Localization(__file__, 517, 4), _assertNdSquareness_135209, *[a_135210], **kwargs_135211)
    
    
    # Assigning a Call to a Tuple (line 518):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 518)
    # Processing the call arguments (line 518)
    # Getting the type of 'a' (line 518)
    a_135214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 30), 'a', False)
    # Processing the call keyword arguments (line 518)
    kwargs_135215 = {}
    # Getting the type of '_commonType' (line 518)
    _commonType_135213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 518)
    _commonType_call_result_135216 = invoke(stypy.reporting.localization.Localization(__file__, 518, 18), _commonType_135213, *[a_135214], **kwargs_135215)
    
    # Assigning a type to the variable 'call_assignment_134282' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'call_assignment_134282', _commonType_call_result_135216)
    
    # Assigning a Call to a Name (line 518):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135220 = {}
    # Getting the type of 'call_assignment_134282' (line 518)
    call_assignment_134282_135217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'call_assignment_134282', False)
    # Obtaining the member '__getitem__' of a type (line 518)
    getitem___135218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 4), call_assignment_134282_135217, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135221 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135218, *[int_135219], **kwargs_135220)
    
    # Assigning a type to the variable 'call_assignment_134283' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'call_assignment_134283', getitem___call_result_135221)
    
    # Assigning a Name to a Name (line 518):
    # Getting the type of 'call_assignment_134283' (line 518)
    call_assignment_134283_135222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'call_assignment_134283')
    # Assigning a type to the variable 't' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 't', call_assignment_134283_135222)
    
    # Assigning a Call to a Name (line 518):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135226 = {}
    # Getting the type of 'call_assignment_134282' (line 518)
    call_assignment_134282_135223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'call_assignment_134282', False)
    # Obtaining the member '__getitem__' of a type (line 518)
    getitem___135224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 4), call_assignment_134282_135223, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135227 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135224, *[int_135225], **kwargs_135226)
    
    # Assigning a type to the variable 'call_assignment_134284' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'call_assignment_134284', getitem___call_result_135227)
    
    # Assigning a Name to a Name (line 518):
    # Getting the type of 'call_assignment_134284' (line 518)
    call_assignment_134284_135228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'call_assignment_134284')
    # Assigning a type to the variable 'result_t' (line 518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 7), 'result_t', call_assignment_134284_135228)
    
    
    
    # Obtaining the type of the subscript
    int_135229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 15), 'int')
    # Getting the type of 'a' (line 520)
    a_135230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 7), 'a')
    # Obtaining the member 'shape' of a type (line 520)
    shape_135231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 7), a_135230, 'shape')
    # Obtaining the member '__getitem__' of a type (line 520)
    getitem___135232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 7), shape_135231, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 520)
    subscript_call_result_135233 = invoke(stypy.reporting.localization.Localization(__file__, 520, 7), getitem___135232, int_135229)
    
    int_135234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 22), 'int')
    # Applying the binary operator '==' (line 520)
    result_eq_135235 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 7), '==', subscript_call_result_135233, int_135234)
    
    # Testing the type of an if condition (line 520)
    if_condition_135236 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 520, 4), result_eq_135235)
    # Assigning a type to the variable 'if_condition_135236' (line 520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 4), 'if_condition_135236', if_condition_135236)
    # SSA begins for if statement (line 520)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to wrap(...): (line 522)
    # Processing the call arguments (line 522)
    
    # Call to empty_like(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'a' (line 522)
    a_135239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 31), 'a', False)
    # Processing the call keyword arguments (line 522)
    # Getting the type of 'result_t' (line 522)
    result_t_135240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 40), 'result_t', False)
    keyword_135241 = result_t_135240
    kwargs_135242 = {'dtype': keyword_135241}
    # Getting the type of 'empty_like' (line 522)
    empty_like_135238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 20), 'empty_like', False)
    # Calling empty_like(args, kwargs) (line 522)
    empty_like_call_result_135243 = invoke(stypy.reporting.localization.Localization(__file__, 522, 20), empty_like_135238, *[a_135239], **kwargs_135242)
    
    # Processing the call keyword arguments (line 522)
    kwargs_135244 = {}
    # Getting the type of 'wrap' (line 522)
    wrap_135237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 15), 'wrap', False)
    # Calling wrap(args, kwargs) (line 522)
    wrap_call_result_135245 = invoke(stypy.reporting.localization.Localization(__file__, 522, 15), wrap_135237, *[empty_like_call_result_135243], **kwargs_135244)
    
    # Assigning a type to the variable 'stypy_return_type' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'stypy_return_type', wrap_call_result_135245)
    # SSA join for if statement (line 520)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 524):
    
    # Assigning a IfExp to a Name (line 524):
    
    
    # Call to isComplexType(...): (line 524)
    # Processing the call arguments (line 524)
    # Getting the type of 't' (line 524)
    t_135247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 40), 't', False)
    # Processing the call keyword arguments (line 524)
    kwargs_135248 = {}
    # Getting the type of 'isComplexType' (line 524)
    isComplexType_135246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 26), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 524)
    isComplexType_call_result_135249 = invoke(stypy.reporting.localization.Localization(__file__, 524, 26), isComplexType_135246, *[t_135247], **kwargs_135248)
    
    # Testing the type of an if expression (line 524)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 524, 16), isComplexType_call_result_135249)
    # SSA begins for if expression (line 524)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_135250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 16), 'str', 'D->D')
    # SSA branch for the else part of an if expression (line 524)
    module_type_store.open_ssa_branch('if expression else')
    str_135251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 48), 'str', 'd->d')
    # SSA join for if expression (line 524)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_135252 = union_type.UnionType.add(str_135250, str_135251)
    
    # Assigning a type to the variable 'signature' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'signature', if_exp_135252)
    
    # Assigning a Call to a Name (line 525):
    
    # Assigning a Call to a Name (line 525):
    
    # Call to get_linalg_error_extobj(...): (line 525)
    # Processing the call arguments (line 525)
    # Getting the type of '_raise_linalgerror_singular' (line 525)
    _raise_linalgerror_singular_135254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 37), '_raise_linalgerror_singular', False)
    # Processing the call keyword arguments (line 525)
    kwargs_135255 = {}
    # Getting the type of 'get_linalg_error_extobj' (line 525)
    get_linalg_error_extobj_135253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 13), 'get_linalg_error_extobj', False)
    # Calling get_linalg_error_extobj(args, kwargs) (line 525)
    get_linalg_error_extobj_call_result_135256 = invoke(stypy.reporting.localization.Localization(__file__, 525, 13), get_linalg_error_extobj_135253, *[_raise_linalgerror_singular_135254], **kwargs_135255)
    
    # Assigning a type to the variable 'extobj' (line 525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 4), 'extobj', get_linalg_error_extobj_call_result_135256)
    
    # Assigning a Call to a Name (line 526):
    
    # Assigning a Call to a Name (line 526):
    
    # Call to inv(...): (line 526)
    # Processing the call arguments (line 526)
    # Getting the type of 'a' (line 526)
    a_135259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 29), 'a', False)
    # Processing the call keyword arguments (line 526)
    # Getting the type of 'signature' (line 526)
    signature_135260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 42), 'signature', False)
    keyword_135261 = signature_135260
    # Getting the type of 'extobj' (line 526)
    extobj_135262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 60), 'extobj', False)
    keyword_135263 = extobj_135262
    kwargs_135264 = {'extobj': keyword_135263, 'signature': keyword_135261}
    # Getting the type of '_umath_linalg' (line 526)
    _umath_linalg_135257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 11), '_umath_linalg', False)
    # Obtaining the member 'inv' of a type (line 526)
    inv_135258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 11), _umath_linalg_135257, 'inv')
    # Calling inv(args, kwargs) (line 526)
    inv_call_result_135265 = invoke(stypy.reporting.localization.Localization(__file__, 526, 11), inv_135258, *[a_135259], **kwargs_135264)
    
    # Assigning a type to the variable 'ainv' (line 526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 4), 'ainv', inv_call_result_135265)
    
    # Call to wrap(...): (line 527)
    # Processing the call arguments (line 527)
    
    # Call to astype(...): (line 527)
    # Processing the call arguments (line 527)
    # Getting the type of 'result_t' (line 527)
    result_t_135269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 28), 'result_t', False)
    # Processing the call keyword arguments (line 527)
    # Getting the type of 'False' (line 527)
    False_135270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 43), 'False', False)
    keyword_135271 = False_135270
    kwargs_135272 = {'copy': keyword_135271}
    # Getting the type of 'ainv' (line 527)
    ainv_135267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 16), 'ainv', False)
    # Obtaining the member 'astype' of a type (line 527)
    astype_135268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 16), ainv_135267, 'astype')
    # Calling astype(args, kwargs) (line 527)
    astype_call_result_135273 = invoke(stypy.reporting.localization.Localization(__file__, 527, 16), astype_135268, *[result_t_135269], **kwargs_135272)
    
    # Processing the call keyword arguments (line 527)
    kwargs_135274 = {}
    # Getting the type of 'wrap' (line 527)
    wrap_135266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 11), 'wrap', False)
    # Calling wrap(args, kwargs) (line 527)
    wrap_call_result_135275 = invoke(stypy.reporting.localization.Localization(__file__, 527, 11), wrap_135266, *[astype_call_result_135273], **kwargs_135274)
    
    # Assigning a type to the variable 'stypy_return_type' (line 527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 4), 'stypy_return_type', wrap_call_result_135275)
    
    # ################# End of 'inv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'inv' in the type store
    # Getting the type of 'stypy_return_type' (line 458)
    stypy_return_type_135276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_135276)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'inv'
    return stypy_return_type_135276

# Assigning a type to the variable 'inv' (line 458)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 0), 'inv', inv)

@norecursion
def cholesky(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cholesky'
    module_type_store = module_type_store.open_function_context('cholesky', 532, 0, False)
    
    # Passed parameters checking function
    cholesky.stypy_localization = localization
    cholesky.stypy_type_of_self = None
    cholesky.stypy_type_store = module_type_store
    cholesky.stypy_function_name = 'cholesky'
    cholesky.stypy_param_names_list = ['a']
    cholesky.stypy_varargs_param_name = None
    cholesky.stypy_kwargs_param_name = None
    cholesky.stypy_call_defaults = defaults
    cholesky.stypy_call_varargs = varargs
    cholesky.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cholesky', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cholesky', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cholesky(...)' code ##################

    str_135277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, (-1)), 'str', '\n    Cholesky decomposition.\n\n    Return the Cholesky decomposition, `L * L.H`, of the square matrix `a`,\n    where `L` is lower-triangular and .H is the conjugate transpose operator\n    (which is the ordinary transpose if `a` is real-valued).  `a` must be\n    Hermitian (symmetric if real-valued) and positive-definite.  Only `L` is\n    actually returned.\n\n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        Hermitian (symmetric if all elements are real), positive-definite\n        input matrix.\n\n    Returns\n    -------\n    L : (..., M, M) array_like\n        Upper or lower-triangular Cholesky factor of `a`.  Returns a\n        matrix object if `a` is a matrix object.\n\n    Raises\n    ------\n    LinAlgError\n       If the decomposition fails, for example, if `a` is not\n       positive-definite.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    The Cholesky decomposition is often used as a fast way of solving\n\n    .. math:: A \\mathbf{x} = \\mathbf{b}\n\n    (when `A` is both Hermitian/symmetric and positive-definite).\n\n    First, we solve for :math:`\\mathbf{y}` in\n\n    .. math:: L \\mathbf{y} = \\mathbf{b},\n\n    and then for :math:`\\mathbf{x}` in\n\n    .. math:: L.H \\mathbf{x} = \\mathbf{y}.\n\n    Examples\n    --------\n    >>> A = np.array([[1,-2j],[2j,5]])\n    >>> A\n    array([[ 1.+0.j,  0.-2.j],\n           [ 0.+2.j,  5.+0.j]])\n    >>> L = np.linalg.cholesky(A)\n    >>> L\n    array([[ 1.+0.j,  0.+0.j],\n           [ 0.+2.j,  1.+0.j]])\n    >>> np.dot(L, L.T.conj()) # verify that L * L.H = A\n    array([[ 1.+0.j,  0.-2.j],\n           [ 0.+2.j,  5.+0.j]])\n    >>> A = [[1,-2j],[2j,5]] # what happens if A is only array_like?\n    >>> np.linalg.cholesky(A) # an ndarray object is returned\n    array([[ 1.+0.j,  0.+0.j],\n           [ 0.+2.j,  1.+0.j]])\n    >>> # But a matrix object is returned if A is a matrix object\n    >>> LA.cholesky(np.matrix(A))\n    matrix([[ 1.+0.j,  0.+0.j],\n            [ 0.+2.j,  1.+0.j]])\n\n    ')
    
    # Assigning a Call to a Name (line 605):
    
    # Assigning a Call to a Name (line 605):
    
    # Call to get_linalg_error_extobj(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of '_raise_linalgerror_nonposdef' (line 605)
    _raise_linalgerror_nonposdef_135279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 37), '_raise_linalgerror_nonposdef', False)
    # Processing the call keyword arguments (line 605)
    kwargs_135280 = {}
    # Getting the type of 'get_linalg_error_extobj' (line 605)
    get_linalg_error_extobj_135278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 13), 'get_linalg_error_extobj', False)
    # Calling get_linalg_error_extobj(args, kwargs) (line 605)
    get_linalg_error_extobj_call_result_135281 = invoke(stypy.reporting.localization.Localization(__file__, 605, 13), get_linalg_error_extobj_135278, *[_raise_linalgerror_nonposdef_135279], **kwargs_135280)
    
    # Assigning a type to the variable 'extobj' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 4), 'extobj', get_linalg_error_extobj_call_result_135281)
    
    # Assigning a Attribute to a Name (line 606):
    
    # Assigning a Attribute to a Name (line 606):
    # Getting the type of '_umath_linalg' (line 606)
    _umath_linalg_135282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 13), '_umath_linalg')
    # Obtaining the member 'cholesky_lo' of a type (line 606)
    cholesky_lo_135283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 13), _umath_linalg_135282, 'cholesky_lo')
    # Assigning a type to the variable 'gufunc' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 4), 'gufunc', cholesky_lo_135283)
    
    # Assigning a Call to a Tuple (line 607):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 607)
    # Processing the call arguments (line 607)
    # Getting the type of 'a' (line 607)
    a_135285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 25), 'a', False)
    # Processing the call keyword arguments (line 607)
    kwargs_135286 = {}
    # Getting the type of '_makearray' (line 607)
    _makearray_135284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 607)
    _makearray_call_result_135287 = invoke(stypy.reporting.localization.Localization(__file__, 607, 14), _makearray_135284, *[a_135285], **kwargs_135286)
    
    # Assigning a type to the variable 'call_assignment_134285' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'call_assignment_134285', _makearray_call_result_135287)
    
    # Assigning a Call to a Name (line 607):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135291 = {}
    # Getting the type of 'call_assignment_134285' (line 607)
    call_assignment_134285_135288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'call_assignment_134285', False)
    # Obtaining the member '__getitem__' of a type (line 607)
    getitem___135289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 4), call_assignment_134285_135288, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135292 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135289, *[int_135290], **kwargs_135291)
    
    # Assigning a type to the variable 'call_assignment_134286' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'call_assignment_134286', getitem___call_result_135292)
    
    # Assigning a Name to a Name (line 607):
    # Getting the type of 'call_assignment_134286' (line 607)
    call_assignment_134286_135293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'call_assignment_134286')
    # Assigning a type to the variable 'a' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'a', call_assignment_134286_135293)
    
    # Assigning a Call to a Name (line 607):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135297 = {}
    # Getting the type of 'call_assignment_134285' (line 607)
    call_assignment_134285_135294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'call_assignment_134285', False)
    # Obtaining the member '__getitem__' of a type (line 607)
    getitem___135295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 4), call_assignment_134285_135294, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135298 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135295, *[int_135296], **kwargs_135297)
    
    # Assigning a type to the variable 'call_assignment_134287' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'call_assignment_134287', getitem___call_result_135298)
    
    # Assigning a Name to a Name (line 607):
    # Getting the type of 'call_assignment_134287' (line 607)
    call_assignment_134287_135299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'call_assignment_134287')
    # Assigning a type to the variable 'wrap' (line 607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 7), 'wrap', call_assignment_134287_135299)
    
    # Call to _assertRankAtLeast2(...): (line 608)
    # Processing the call arguments (line 608)
    # Getting the type of 'a' (line 608)
    a_135301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 24), 'a', False)
    # Processing the call keyword arguments (line 608)
    kwargs_135302 = {}
    # Getting the type of '_assertRankAtLeast2' (line 608)
    _assertRankAtLeast2_135300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 608)
    _assertRankAtLeast2_call_result_135303 = invoke(stypy.reporting.localization.Localization(__file__, 608, 4), _assertRankAtLeast2_135300, *[a_135301], **kwargs_135302)
    
    
    # Call to _assertNdSquareness(...): (line 609)
    # Processing the call arguments (line 609)
    # Getting the type of 'a' (line 609)
    a_135305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 24), 'a', False)
    # Processing the call keyword arguments (line 609)
    kwargs_135306 = {}
    # Getting the type of '_assertNdSquareness' (line 609)
    _assertNdSquareness_135304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 609)
    _assertNdSquareness_call_result_135307 = invoke(stypy.reporting.localization.Localization(__file__, 609, 4), _assertNdSquareness_135304, *[a_135305], **kwargs_135306)
    
    
    # Assigning a Call to a Tuple (line 610):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 610)
    # Processing the call arguments (line 610)
    # Getting the type of 'a' (line 610)
    a_135309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 30), 'a', False)
    # Processing the call keyword arguments (line 610)
    kwargs_135310 = {}
    # Getting the type of '_commonType' (line 610)
    _commonType_135308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 610)
    _commonType_call_result_135311 = invoke(stypy.reporting.localization.Localization(__file__, 610, 18), _commonType_135308, *[a_135309], **kwargs_135310)
    
    # Assigning a type to the variable 'call_assignment_134288' (line 610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'call_assignment_134288', _commonType_call_result_135311)
    
    # Assigning a Call to a Name (line 610):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135315 = {}
    # Getting the type of 'call_assignment_134288' (line 610)
    call_assignment_134288_135312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'call_assignment_134288', False)
    # Obtaining the member '__getitem__' of a type (line 610)
    getitem___135313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 4), call_assignment_134288_135312, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135316 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135313, *[int_135314], **kwargs_135315)
    
    # Assigning a type to the variable 'call_assignment_134289' (line 610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'call_assignment_134289', getitem___call_result_135316)
    
    # Assigning a Name to a Name (line 610):
    # Getting the type of 'call_assignment_134289' (line 610)
    call_assignment_134289_135317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'call_assignment_134289')
    # Assigning a type to the variable 't' (line 610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 't', call_assignment_134289_135317)
    
    # Assigning a Call to a Name (line 610):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135321 = {}
    # Getting the type of 'call_assignment_134288' (line 610)
    call_assignment_134288_135318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'call_assignment_134288', False)
    # Obtaining the member '__getitem__' of a type (line 610)
    getitem___135319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 4), call_assignment_134288_135318, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135322 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135319, *[int_135320], **kwargs_135321)
    
    # Assigning a type to the variable 'call_assignment_134290' (line 610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'call_assignment_134290', getitem___call_result_135322)
    
    # Assigning a Name to a Name (line 610):
    # Getting the type of 'call_assignment_134290' (line 610)
    call_assignment_134290_135323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'call_assignment_134290')
    # Assigning a type to the variable 'result_t' (line 610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 7), 'result_t', call_assignment_134290_135323)
    
    # Assigning a IfExp to a Name (line 611):
    
    # Assigning a IfExp to a Name (line 611):
    
    
    # Call to isComplexType(...): (line 611)
    # Processing the call arguments (line 611)
    # Getting the type of 't' (line 611)
    t_135325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 40), 't', False)
    # Processing the call keyword arguments (line 611)
    kwargs_135326 = {}
    # Getting the type of 'isComplexType' (line 611)
    isComplexType_135324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 26), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 611)
    isComplexType_call_result_135327 = invoke(stypy.reporting.localization.Localization(__file__, 611, 26), isComplexType_135324, *[t_135325], **kwargs_135326)
    
    # Testing the type of an if expression (line 611)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 611, 16), isComplexType_call_result_135327)
    # SSA begins for if expression (line 611)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_135328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 16), 'str', 'D->D')
    # SSA branch for the else part of an if expression (line 611)
    module_type_store.open_ssa_branch('if expression else')
    str_135329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 48), 'str', 'd->d')
    # SSA join for if expression (line 611)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_135330 = union_type.UnionType.add(str_135328, str_135329)
    
    # Assigning a type to the variable 'signature' (line 611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 4), 'signature', if_exp_135330)
    
    # Assigning a Call to a Name (line 612):
    
    # Assigning a Call to a Name (line 612):
    
    # Call to gufunc(...): (line 612)
    # Processing the call arguments (line 612)
    # Getting the type of 'a' (line 612)
    a_135332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 15), 'a', False)
    # Processing the call keyword arguments (line 612)
    # Getting the type of 'signature' (line 612)
    signature_135333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 28), 'signature', False)
    keyword_135334 = signature_135333
    # Getting the type of 'extobj' (line 612)
    extobj_135335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 46), 'extobj', False)
    keyword_135336 = extobj_135335
    kwargs_135337 = {'extobj': keyword_135336, 'signature': keyword_135334}
    # Getting the type of 'gufunc' (line 612)
    gufunc_135331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'gufunc', False)
    # Calling gufunc(args, kwargs) (line 612)
    gufunc_call_result_135338 = invoke(stypy.reporting.localization.Localization(__file__, 612, 8), gufunc_135331, *[a_135332], **kwargs_135337)
    
    # Assigning a type to the variable 'r' (line 612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 4), 'r', gufunc_call_result_135338)
    
    # Call to wrap(...): (line 613)
    # Processing the call arguments (line 613)
    
    # Call to astype(...): (line 613)
    # Processing the call arguments (line 613)
    # Getting the type of 'result_t' (line 613)
    result_t_135342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 25), 'result_t', False)
    # Processing the call keyword arguments (line 613)
    # Getting the type of 'False' (line 613)
    False_135343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 40), 'False', False)
    keyword_135344 = False_135343
    kwargs_135345 = {'copy': keyword_135344}
    # Getting the type of 'r' (line 613)
    r_135340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 16), 'r', False)
    # Obtaining the member 'astype' of a type (line 613)
    astype_135341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 16), r_135340, 'astype')
    # Calling astype(args, kwargs) (line 613)
    astype_call_result_135346 = invoke(stypy.reporting.localization.Localization(__file__, 613, 16), astype_135341, *[result_t_135342], **kwargs_135345)
    
    # Processing the call keyword arguments (line 613)
    kwargs_135347 = {}
    # Getting the type of 'wrap' (line 613)
    wrap_135339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 11), 'wrap', False)
    # Calling wrap(args, kwargs) (line 613)
    wrap_call_result_135348 = invoke(stypy.reporting.localization.Localization(__file__, 613, 11), wrap_135339, *[astype_call_result_135346], **kwargs_135347)
    
    # Assigning a type to the variable 'stypy_return_type' (line 613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 4), 'stypy_return_type', wrap_call_result_135348)
    
    # ################# End of 'cholesky(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cholesky' in the type store
    # Getting the type of 'stypy_return_type' (line 532)
    stypy_return_type_135349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_135349)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cholesky'
    return stypy_return_type_135349

# Assigning a type to the variable 'cholesky' (line 532)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 0), 'cholesky', cholesky)

@norecursion
def qr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_135350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 15), 'str', 'reduced')
    defaults = [str_135350]
    # Create a new context for function 'qr'
    module_type_store = module_type_store.open_function_context('qr', 617, 0, False)
    
    # Passed parameters checking function
    qr.stypy_localization = localization
    qr.stypy_type_of_self = None
    qr.stypy_type_store = module_type_store
    qr.stypy_function_name = 'qr'
    qr.stypy_param_names_list = ['a', 'mode']
    qr.stypy_varargs_param_name = None
    qr.stypy_kwargs_param_name = None
    qr.stypy_call_defaults = defaults
    qr.stypy_call_varargs = varargs
    qr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'qr', ['a', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'qr', localization, ['a', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'qr(...)' code ##################

    str_135351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, (-1)), 'str', "\n    Compute the qr factorization of a matrix.\n\n    Factor the matrix `a` as *qr*, where `q` is orthonormal and `r` is\n    upper-triangular.\n\n    Parameters\n    ----------\n    a : array_like, shape (M, N)\n        Matrix to be factored.\n    mode : {'reduced', 'complete', 'r', 'raw', 'full', 'economic'}, optional\n        If K = min(M, N), then\n\n        'reduced'  : returns q, r with dimensions (M, K), (K, N) (default)\n        'complete' : returns q, r with dimensions (M, M), (M, N)\n        'r'        : returns r only with dimensions (K, N)\n        'raw'      : returns h, tau with dimensions (N, M), (K,)\n        'full'     : alias of 'reduced', deprecated\n        'economic' : returns h from 'raw', deprecated.\n\n        The options 'reduced', 'complete, and 'raw' are new in numpy 1.8,\n        see the notes for more information. The default is 'reduced' and to\n        maintain backward compatibility with earlier versions of numpy both\n        it and the old default 'full' can be omitted. Note that array h\n        returned in 'raw' mode is transposed for calling Fortran. The\n        'economic' mode is deprecated.  The modes 'full' and 'economic' may\n        be passed using only the first letter for backwards compatibility,\n        but all others must be spelled out. See the Notes for more\n        explanation.\n\n\n    Returns\n    -------\n    q : ndarray of float or complex, optional\n        A matrix with orthonormal columns. When mode = 'complete' the\n        result is an orthogonal/unitary matrix depending on whether or not\n        a is real/complex. The determinant may be either +/- 1 in that\n        case.\n    r : ndarray of float or complex, optional\n        The upper-triangular matrix.\n    (h, tau) : ndarrays of np.double or np.cdouble, optional\n        The array h contains the Householder reflectors that generate q\n        along with r. The tau array contains scaling factors for the\n        reflectors. In the deprecated  'economic' mode only h is returned.\n\n    Raises\n    ------\n    LinAlgError\n        If factoring fails.\n\n    Notes\n    -----\n    This is an interface to the LAPACK routines dgeqrf, zgeqrf,\n    dorgqr, and zungqr.\n\n    For more information on the qr factorization, see for example:\n    http://en.wikipedia.org/wiki/QR_factorization\n\n    Subclasses of `ndarray` are preserved except for the 'raw' mode. So if\n    `a` is of type `matrix`, all the return values will be matrices too.\n\n    New 'reduced', 'complete', and 'raw' options for mode were added in\n    Numpy 1.8 and the old option 'full' was made an alias of 'reduced'.  In\n    addition the options 'full' and 'economic' were deprecated.  Because\n    'full' was the previous default and 'reduced' is the new default,\n    backward compatibility can be maintained by letting `mode` default.\n    The 'raw' option was added so that LAPACK routines that can multiply\n    arrays by q using the Householder reflectors can be used. Note that in\n    this case the returned arrays are of type np.double or np.cdouble and\n    the h array is transposed to be FORTRAN compatible.  No routines using\n    the 'raw' return are currently exposed by numpy, but some are available\n    in lapack_lite and just await the necessary work.\n\n    Examples\n    --------\n    >>> a = np.random.randn(9, 6)\n    >>> q, r = np.linalg.qr(a)\n    >>> np.allclose(a, np.dot(q, r))  # a does equal qr\n    True\n    >>> r2 = np.linalg.qr(a, mode='r')\n    >>> r3 = np.linalg.qr(a, mode='economic')\n    >>> np.allclose(r, r2)  # mode='r' returns the same r as mode='full'\n    True\n    >>> # But only triu parts are guaranteed equal when mode='economic'\n    >>> np.allclose(r, np.triu(r3[:6,:6], k=0))\n    True\n\n    Example illustrating a common use of `qr`: solving of least squares\n    problems\n\n    What are the least-squares-best `m` and `y0` in ``y = y0 + mx`` for\n    the following data: {(0,1), (1,0), (1,2), (2,1)}. (Graph the points\n    and you'll see that it should be y0 = 0, m = 1.)  The answer is provided\n    by solving the over-determined matrix equation ``Ax = b``, where::\n\n      A = array([[0, 1], [1, 1], [1, 1], [2, 1]])\n      x = array([[y0], [m]])\n      b = array([[1], [0], [2], [1]])\n\n    If A = qr such that q is orthonormal (which is always possible via\n    Gram-Schmidt), then ``x = inv(r) * (q.T) * b``.  (In numpy practice,\n    however, we simply use `lstsq`.)\n\n    >>> A = np.array([[0, 1], [1, 1], [1, 1], [2, 1]])\n    >>> A\n    array([[0, 1],\n           [1, 1],\n           [1, 1],\n           [2, 1]])\n    >>> b = np.array([1, 0, 2, 1])\n    >>> q, r = LA.qr(A)\n    >>> p = np.dot(q.T, b)\n    >>> np.dot(LA.inv(r), p)\n    array([  1.1e-16,   1.0e+00])\n\n    ")
    
    
    # Getting the type of 'mode' (line 734)
    mode_135352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 7), 'mode')
    
    # Obtaining an instance of the builtin type 'tuple' (line 734)
    tuple_135353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 734)
    # Adding element type (line 734)
    str_135354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 20), 'str', 'reduced')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 20), tuple_135353, str_135354)
    # Adding element type (line 734)
    str_135355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 31), 'str', 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 20), tuple_135353, str_135355)
    # Adding element type (line 734)
    str_135356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 43), 'str', 'r')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 20), tuple_135353, str_135356)
    # Adding element type (line 734)
    str_135357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 48), 'str', 'raw')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 20), tuple_135353, str_135357)
    
    # Applying the binary operator 'notin' (line 734)
    result_contains_135358 = python_operator(stypy.reporting.localization.Localization(__file__, 734, 7), 'notin', mode_135352, tuple_135353)
    
    # Testing the type of an if condition (line 734)
    if_condition_135359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 734, 4), result_contains_135358)
    # Assigning a type to the variable 'if_condition_135359' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 4), 'if_condition_135359', if_condition_135359)
    # SSA begins for if statement (line 734)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'mode' (line 735)
    mode_135360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 11), 'mode')
    
    # Obtaining an instance of the builtin type 'tuple' (line 735)
    tuple_135361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 735)
    # Adding element type (line 735)
    str_135362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 20), 'str', 'f')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 20), tuple_135361, str_135362)
    # Adding element type (line 735)
    str_135363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 25), 'str', 'full')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 735, 20), tuple_135361, str_135363)
    
    # Applying the binary operator 'in' (line 735)
    result_contains_135364 = python_operator(stypy.reporting.localization.Localization(__file__, 735, 11), 'in', mode_135360, tuple_135361)
    
    # Testing the type of an if condition (line 735)
    if_condition_135365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 735, 8), result_contains_135364)
    # Assigning a type to the variable 'if_condition_135365' (line 735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'if_condition_135365', if_condition_135365)
    # SSA begins for if statement (line 735)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 737):
    
    # Assigning a Call to a Name (line 737):
    
    # Call to join(...): (line 737)
    # Processing the call arguments (line 737)
    
    # Obtaining an instance of the builtin type 'tuple' (line 738)
    tuple_135368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 738)
    # Adding element type (line 738)
    str_135369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 20), 'str', "The 'full' option is deprecated in favor of 'reduced'.\n")
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 20), tuple_135368, str_135369)
    # Adding element type (line 738)
    str_135370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 20), 'str', 'For backward compatibility let mode default.')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 20), tuple_135368, str_135370)
    
    # Processing the call keyword arguments (line 737)
    kwargs_135371 = {}
    str_135366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 18), 'str', '')
    # Obtaining the member 'join' of a type (line 737)
    join_135367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 18), str_135366, 'join')
    # Calling join(args, kwargs) (line 737)
    join_call_result_135372 = invoke(stypy.reporting.localization.Localization(__file__, 737, 18), join_135367, *[tuple_135368], **kwargs_135371)
    
    # Assigning a type to the variable 'msg' (line 737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 12), 'msg', join_call_result_135372)
    
    # Call to warn(...): (line 740)
    # Processing the call arguments (line 740)
    # Getting the type of 'msg' (line 740)
    msg_135375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 26), 'msg', False)
    # Getting the type of 'DeprecationWarning' (line 740)
    DeprecationWarning_135376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 31), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 740)
    kwargs_135377 = {}
    # Getting the type of 'warnings' (line 740)
    warnings_135373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 740)
    warn_135374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 12), warnings_135373, 'warn')
    # Calling warn(args, kwargs) (line 740)
    warn_call_result_135378 = invoke(stypy.reporting.localization.Localization(__file__, 740, 12), warn_135374, *[msg_135375, DeprecationWarning_135376], **kwargs_135377)
    
    
    # Assigning a Str to a Name (line 741):
    
    # Assigning a Str to a Name (line 741):
    str_135379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 19), 'str', 'reduced')
    # Assigning a type to the variable 'mode' (line 741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 12), 'mode', str_135379)
    # SSA branch for the else part of an if statement (line 735)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 742)
    mode_135380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 13), 'mode')
    
    # Obtaining an instance of the builtin type 'tuple' (line 742)
    tuple_135381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 742)
    # Adding element type (line 742)
    str_135382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 22), 'str', 'e')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 22), tuple_135381, str_135382)
    # Adding element type (line 742)
    str_135383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 27), 'str', 'economic')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 22), tuple_135381, str_135383)
    
    # Applying the binary operator 'in' (line 742)
    result_contains_135384 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 13), 'in', mode_135380, tuple_135381)
    
    # Testing the type of an if condition (line 742)
    if_condition_135385 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 742, 13), result_contains_135384)
    # Assigning a type to the variable 'if_condition_135385' (line 742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 13), 'if_condition_135385', if_condition_135385)
    # SSA begins for if statement (line 742)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 744):
    
    # Assigning a Tuple to a Name (line 744):
    
    # Obtaining an instance of the builtin type 'tuple' (line 744)
    tuple_135386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 744)
    # Adding element type (line 744)
    str_135387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 18), 'str', "The 'economic' option is deprecated.")
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 744, 18), tuple_135386, str_135387)
    
    # Assigning a type to the variable 'msg' (line 744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 12), 'msg', tuple_135386)
    
    # Call to warn(...): (line 745)
    # Processing the call arguments (line 745)
    # Getting the type of 'msg' (line 745)
    msg_135390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 26), 'msg', False)
    # Getting the type of 'DeprecationWarning' (line 745)
    DeprecationWarning_135391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 31), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 745)
    kwargs_135392 = {}
    # Getting the type of 'warnings' (line 745)
    warnings_135388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 745)
    warn_135389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 12), warnings_135388, 'warn')
    # Calling warn(args, kwargs) (line 745)
    warn_call_result_135393 = invoke(stypy.reporting.localization.Localization(__file__, 745, 12), warn_135389, *[msg_135390, DeprecationWarning_135391], **kwargs_135392)
    
    
    # Assigning a Str to a Name (line 746):
    
    # Assigning a Str to a Name (line 746):
    str_135394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 746, 19), 'str', 'economic')
    # Assigning a type to the variable 'mode' (line 746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 12), 'mode', str_135394)
    # SSA branch for the else part of an if statement (line 742)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 748)
    # Processing the call arguments (line 748)
    str_135396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 29), 'str', "Unrecognized mode '%s'")
    # Getting the type of 'mode' (line 748)
    mode_135397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 56), 'mode', False)
    # Applying the binary operator '%' (line 748)
    result_mod_135398 = python_operator(stypy.reporting.localization.Localization(__file__, 748, 29), '%', str_135396, mode_135397)
    
    # Processing the call keyword arguments (line 748)
    kwargs_135399 = {}
    # Getting the type of 'ValueError' (line 748)
    ValueError_135395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 748)
    ValueError_call_result_135400 = invoke(stypy.reporting.localization.Localization(__file__, 748, 18), ValueError_135395, *[result_mod_135398], **kwargs_135399)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 748, 12), ValueError_call_result_135400, 'raise parameter', BaseException)
    # SSA join for if statement (line 742)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 735)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 734)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 750):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 750)
    # Processing the call arguments (line 750)
    # Getting the type of 'a' (line 750)
    a_135402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 25), 'a', False)
    # Processing the call keyword arguments (line 750)
    kwargs_135403 = {}
    # Getting the type of '_makearray' (line 750)
    _makearray_135401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 750)
    _makearray_call_result_135404 = invoke(stypy.reporting.localization.Localization(__file__, 750, 14), _makearray_135401, *[a_135402], **kwargs_135403)
    
    # Assigning a type to the variable 'call_assignment_134291' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'call_assignment_134291', _makearray_call_result_135404)
    
    # Assigning a Call to a Name (line 750):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135408 = {}
    # Getting the type of 'call_assignment_134291' (line 750)
    call_assignment_134291_135405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'call_assignment_134291', False)
    # Obtaining the member '__getitem__' of a type (line 750)
    getitem___135406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 4), call_assignment_134291_135405, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135409 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135406, *[int_135407], **kwargs_135408)
    
    # Assigning a type to the variable 'call_assignment_134292' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'call_assignment_134292', getitem___call_result_135409)
    
    # Assigning a Name to a Name (line 750):
    # Getting the type of 'call_assignment_134292' (line 750)
    call_assignment_134292_135410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'call_assignment_134292')
    # Assigning a type to the variable 'a' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'a', call_assignment_134292_135410)
    
    # Assigning a Call to a Name (line 750):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 750, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135414 = {}
    # Getting the type of 'call_assignment_134291' (line 750)
    call_assignment_134291_135411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'call_assignment_134291', False)
    # Obtaining the member '__getitem__' of a type (line 750)
    getitem___135412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 4), call_assignment_134291_135411, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135415 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135412, *[int_135413], **kwargs_135414)
    
    # Assigning a type to the variable 'call_assignment_134293' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'call_assignment_134293', getitem___call_result_135415)
    
    # Assigning a Name to a Name (line 750):
    # Getting the type of 'call_assignment_134293' (line 750)
    call_assignment_134293_135416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'call_assignment_134293')
    # Assigning a type to the variable 'wrap' (line 750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 7), 'wrap', call_assignment_134293_135416)
    
    # Call to _assertRank2(...): (line 751)
    # Processing the call arguments (line 751)
    # Getting the type of 'a' (line 751)
    a_135418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 17), 'a', False)
    # Processing the call keyword arguments (line 751)
    kwargs_135419 = {}
    # Getting the type of '_assertRank2' (line 751)
    _assertRank2_135417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), '_assertRank2', False)
    # Calling _assertRank2(args, kwargs) (line 751)
    _assertRank2_call_result_135420 = invoke(stypy.reporting.localization.Localization(__file__, 751, 4), _assertRank2_135417, *[a_135418], **kwargs_135419)
    
    
    # Call to _assertNoEmpty2d(...): (line 752)
    # Processing the call arguments (line 752)
    # Getting the type of 'a' (line 752)
    a_135422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 21), 'a', False)
    # Processing the call keyword arguments (line 752)
    kwargs_135423 = {}
    # Getting the type of '_assertNoEmpty2d' (line 752)
    _assertNoEmpty2d_135421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 4), '_assertNoEmpty2d', False)
    # Calling _assertNoEmpty2d(args, kwargs) (line 752)
    _assertNoEmpty2d_call_result_135424 = invoke(stypy.reporting.localization.Localization(__file__, 752, 4), _assertNoEmpty2d_135421, *[a_135422], **kwargs_135423)
    
    
    # Assigning a Attribute to a Tuple (line 753):
    
    # Assigning a Subscript to a Name (line 753):
    
    # Obtaining the type of the subscript
    int_135425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 4), 'int')
    # Getting the type of 'a' (line 753)
    a_135426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 11), 'a')
    # Obtaining the member 'shape' of a type (line 753)
    shape_135427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 11), a_135426, 'shape')
    # Obtaining the member '__getitem__' of a type (line 753)
    getitem___135428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 4), shape_135427, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 753)
    subscript_call_result_135429 = invoke(stypy.reporting.localization.Localization(__file__, 753, 4), getitem___135428, int_135425)
    
    # Assigning a type to the variable 'tuple_var_assignment_134294' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'tuple_var_assignment_134294', subscript_call_result_135429)
    
    # Assigning a Subscript to a Name (line 753):
    
    # Obtaining the type of the subscript
    int_135430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 4), 'int')
    # Getting the type of 'a' (line 753)
    a_135431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 11), 'a')
    # Obtaining the member 'shape' of a type (line 753)
    shape_135432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 11), a_135431, 'shape')
    # Obtaining the member '__getitem__' of a type (line 753)
    getitem___135433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 753, 4), shape_135432, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 753)
    subscript_call_result_135434 = invoke(stypy.reporting.localization.Localization(__file__, 753, 4), getitem___135433, int_135430)
    
    # Assigning a type to the variable 'tuple_var_assignment_134295' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'tuple_var_assignment_134295', subscript_call_result_135434)
    
    # Assigning a Name to a Name (line 753):
    # Getting the type of 'tuple_var_assignment_134294' (line 753)
    tuple_var_assignment_134294_135435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'tuple_var_assignment_134294')
    # Assigning a type to the variable 'm' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'm', tuple_var_assignment_134294_135435)
    
    # Assigning a Name to a Name (line 753):
    # Getting the type of 'tuple_var_assignment_134295' (line 753)
    tuple_var_assignment_134295_135436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'tuple_var_assignment_134295')
    # Assigning a type to the variable 'n' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 7), 'n', tuple_var_assignment_134295_135436)
    
    # Assigning a Call to a Tuple (line 754):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 754)
    # Processing the call arguments (line 754)
    # Getting the type of 'a' (line 754)
    a_135438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 30), 'a', False)
    # Processing the call keyword arguments (line 754)
    kwargs_135439 = {}
    # Getting the type of '_commonType' (line 754)
    _commonType_135437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 754)
    _commonType_call_result_135440 = invoke(stypy.reporting.localization.Localization(__file__, 754, 18), _commonType_135437, *[a_135438], **kwargs_135439)
    
    # Assigning a type to the variable 'call_assignment_134296' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'call_assignment_134296', _commonType_call_result_135440)
    
    # Assigning a Call to a Name (line 754):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135444 = {}
    # Getting the type of 'call_assignment_134296' (line 754)
    call_assignment_134296_135441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'call_assignment_134296', False)
    # Obtaining the member '__getitem__' of a type (line 754)
    getitem___135442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 4), call_assignment_134296_135441, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135445 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135442, *[int_135443], **kwargs_135444)
    
    # Assigning a type to the variable 'call_assignment_134297' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'call_assignment_134297', getitem___call_result_135445)
    
    # Assigning a Name to a Name (line 754):
    # Getting the type of 'call_assignment_134297' (line 754)
    call_assignment_134297_135446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'call_assignment_134297')
    # Assigning a type to the variable 't' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 't', call_assignment_134297_135446)
    
    # Assigning a Call to a Name (line 754):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135450 = {}
    # Getting the type of 'call_assignment_134296' (line 754)
    call_assignment_134296_135447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'call_assignment_134296', False)
    # Obtaining the member '__getitem__' of a type (line 754)
    getitem___135448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 754, 4), call_assignment_134296_135447, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135451 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135448, *[int_135449], **kwargs_135450)
    
    # Assigning a type to the variable 'call_assignment_134298' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'call_assignment_134298', getitem___call_result_135451)
    
    # Assigning a Name to a Name (line 754):
    # Getting the type of 'call_assignment_134298' (line 754)
    call_assignment_134298_135452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'call_assignment_134298')
    # Assigning a type to the variable 'result_t' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 7), 'result_t', call_assignment_134298_135452)
    
    # Assigning a Call to a Name (line 755):
    
    # Assigning a Call to a Name (line 755):
    
    # Call to _fastCopyAndTranspose(...): (line 755)
    # Processing the call arguments (line 755)
    # Getting the type of 't' (line 755)
    t_135454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 30), 't', False)
    # Getting the type of 'a' (line 755)
    a_135455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 33), 'a', False)
    # Processing the call keyword arguments (line 755)
    kwargs_135456 = {}
    # Getting the type of '_fastCopyAndTranspose' (line 755)
    _fastCopyAndTranspose_135453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), '_fastCopyAndTranspose', False)
    # Calling _fastCopyAndTranspose(args, kwargs) (line 755)
    _fastCopyAndTranspose_call_result_135457 = invoke(stypy.reporting.localization.Localization(__file__, 755, 8), _fastCopyAndTranspose_135453, *[t_135454, a_135455], **kwargs_135456)
    
    # Assigning a type to the variable 'a' (line 755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'a', _fastCopyAndTranspose_call_result_135457)
    
    # Assigning a Call to a Name (line 756):
    
    # Assigning a Call to a Name (line 756):
    
    # Call to _to_native_byte_order(...): (line 756)
    # Processing the call arguments (line 756)
    # Getting the type of 'a' (line 756)
    a_135459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 30), 'a', False)
    # Processing the call keyword arguments (line 756)
    kwargs_135460 = {}
    # Getting the type of '_to_native_byte_order' (line 756)
    _to_native_byte_order_135458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), '_to_native_byte_order', False)
    # Calling _to_native_byte_order(args, kwargs) (line 756)
    _to_native_byte_order_call_result_135461 = invoke(stypy.reporting.localization.Localization(__file__, 756, 8), _to_native_byte_order_135458, *[a_135459], **kwargs_135460)
    
    # Assigning a type to the variable 'a' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'a', _to_native_byte_order_call_result_135461)
    
    # Assigning a Call to a Name (line 757):
    
    # Assigning a Call to a Name (line 757):
    
    # Call to min(...): (line 757)
    # Processing the call arguments (line 757)
    # Getting the type of 'm' (line 757)
    m_135463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 13), 'm', False)
    # Getting the type of 'n' (line 757)
    n_135464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 16), 'n', False)
    # Processing the call keyword arguments (line 757)
    kwargs_135465 = {}
    # Getting the type of 'min' (line 757)
    min_135462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 9), 'min', False)
    # Calling min(args, kwargs) (line 757)
    min_call_result_135466 = invoke(stypy.reporting.localization.Localization(__file__, 757, 9), min_135462, *[m_135463, n_135464], **kwargs_135465)
    
    # Assigning a type to the variable 'mn' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 4), 'mn', min_call_result_135466)
    
    # Assigning a Call to a Name (line 758):
    
    # Assigning a Call to a Name (line 758):
    
    # Call to zeros(...): (line 758)
    # Processing the call arguments (line 758)
    
    # Obtaining an instance of the builtin type 'tuple' (line 758)
    tuple_135468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 758)
    # Adding element type (line 758)
    # Getting the type of 'mn' (line 758)
    mn_135469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 17), 'mn', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 17), tuple_135468, mn_135469)
    
    # Getting the type of 't' (line 758)
    t_135470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 23), 't', False)
    # Processing the call keyword arguments (line 758)
    kwargs_135471 = {}
    # Getting the type of 'zeros' (line 758)
    zeros_135467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 10), 'zeros', False)
    # Calling zeros(args, kwargs) (line 758)
    zeros_call_result_135472 = invoke(stypy.reporting.localization.Localization(__file__, 758, 10), zeros_135467, *[tuple_135468, t_135470], **kwargs_135471)
    
    # Assigning a type to the variable 'tau' (line 758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 4), 'tau', zeros_call_result_135472)
    
    
    # Call to isComplexType(...): (line 759)
    # Processing the call arguments (line 759)
    # Getting the type of 't' (line 759)
    t_135474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 21), 't', False)
    # Processing the call keyword arguments (line 759)
    kwargs_135475 = {}
    # Getting the type of 'isComplexType' (line 759)
    isComplexType_135473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 7), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 759)
    isComplexType_call_result_135476 = invoke(stypy.reporting.localization.Localization(__file__, 759, 7), isComplexType_135473, *[t_135474], **kwargs_135475)
    
    # Testing the type of an if condition (line 759)
    if_condition_135477 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 759, 4), isComplexType_call_result_135476)
    # Assigning a type to the variable 'if_condition_135477' (line 759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 4), 'if_condition_135477', if_condition_135477)
    # SSA begins for if statement (line 759)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 760):
    
    # Assigning a Attribute to a Name (line 760):
    # Getting the type of 'lapack_lite' (line 760)
    lapack_lite_135478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 25), 'lapack_lite')
    # Obtaining the member 'zgeqrf' of a type (line 760)
    zgeqrf_135479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 25), lapack_lite_135478, 'zgeqrf')
    # Assigning a type to the variable 'lapack_routine' (line 760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 8), 'lapack_routine', zgeqrf_135479)
    
    # Assigning a Str to a Name (line 761):
    
    # Assigning a Str to a Name (line 761):
    str_135480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 23), 'str', 'zgeqrf')
    # Assigning a type to the variable 'routine_name' (line 761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'routine_name', str_135480)
    # SSA branch for the else part of an if statement (line 759)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 763):
    
    # Assigning a Attribute to a Name (line 763):
    # Getting the type of 'lapack_lite' (line 763)
    lapack_lite_135481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 25), 'lapack_lite')
    # Obtaining the member 'dgeqrf' of a type (line 763)
    dgeqrf_135482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 25), lapack_lite_135481, 'dgeqrf')
    # Assigning a type to the variable 'lapack_routine' (line 763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'lapack_routine', dgeqrf_135482)
    
    # Assigning a Str to a Name (line 764):
    
    # Assigning a Str to a Name (line 764):
    str_135483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 23), 'str', 'dgeqrf')
    # Assigning a type to the variable 'routine_name' (line 764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'routine_name', str_135483)
    # SSA join for if statement (line 759)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 767):
    
    # Assigning a Num to a Name (line 767):
    int_135484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 12), 'int')
    # Assigning a type to the variable 'lwork' (line 767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 4), 'lwork', int_135484)
    
    # Assigning a Call to a Name (line 768):
    
    # Assigning a Call to a Name (line 768):
    
    # Call to zeros(...): (line 768)
    # Processing the call arguments (line 768)
    
    # Obtaining an instance of the builtin type 'tuple' (line 768)
    tuple_135486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 768)
    # Adding element type (line 768)
    # Getting the type of 'lwork' (line 768)
    lwork_135487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 18), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 768, 18), tuple_135486, lwork_135487)
    
    # Getting the type of 't' (line 768)
    t_135488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 27), 't', False)
    # Processing the call keyword arguments (line 768)
    kwargs_135489 = {}
    # Getting the type of 'zeros' (line 768)
    zeros_135485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 11), 'zeros', False)
    # Calling zeros(args, kwargs) (line 768)
    zeros_call_result_135490 = invoke(stypy.reporting.localization.Localization(__file__, 768, 11), zeros_135485, *[tuple_135486, t_135488], **kwargs_135489)
    
    # Assigning a type to the variable 'work' (line 768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 4), 'work', zeros_call_result_135490)
    
    # Assigning a Call to a Name (line 769):
    
    # Assigning a Call to a Name (line 769):
    
    # Call to lapack_routine(...): (line 769)
    # Processing the call arguments (line 769)
    # Getting the type of 'm' (line 769)
    m_135492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 29), 'm', False)
    # Getting the type of 'n' (line 769)
    n_135493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 32), 'n', False)
    # Getting the type of 'a' (line 769)
    a_135494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 35), 'a', False)
    # Getting the type of 'm' (line 769)
    m_135495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 38), 'm', False)
    # Getting the type of 'tau' (line 769)
    tau_135496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 41), 'tau', False)
    # Getting the type of 'work' (line 769)
    work_135497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 46), 'work', False)
    int_135498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 52), 'int')
    int_135499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 56), 'int')
    # Processing the call keyword arguments (line 769)
    kwargs_135500 = {}
    # Getting the type of 'lapack_routine' (line 769)
    lapack_routine_135491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 14), 'lapack_routine', False)
    # Calling lapack_routine(args, kwargs) (line 769)
    lapack_routine_call_result_135501 = invoke(stypy.reporting.localization.Localization(__file__, 769, 14), lapack_routine_135491, *[m_135492, n_135493, a_135494, m_135495, tau_135496, work_135497, int_135498, int_135499], **kwargs_135500)
    
    # Assigning a type to the variable 'results' (line 769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 4), 'results', lapack_routine_call_result_135501)
    
    
    
    # Obtaining the type of the subscript
    str_135502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 15), 'str', 'info')
    # Getting the type of 'results' (line 770)
    results_135503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 7), 'results')
    # Obtaining the member '__getitem__' of a type (line 770)
    getitem___135504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 7), results_135503, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 770)
    subscript_call_result_135505 = invoke(stypy.reporting.localization.Localization(__file__, 770, 7), getitem___135504, str_135502)
    
    int_135506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 26), 'int')
    # Applying the binary operator '!=' (line 770)
    result_ne_135507 = python_operator(stypy.reporting.localization.Localization(__file__, 770, 7), '!=', subscript_call_result_135505, int_135506)
    
    # Testing the type of an if condition (line 770)
    if_condition_135508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 770, 4), result_ne_135507)
    # Assigning a type to the variable 'if_condition_135508' (line 770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 4), 'if_condition_135508', if_condition_135508)
    # SSA begins for if statement (line 770)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 771)
    # Processing the call arguments (line 771)
    str_135510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 26), 'str', '%s returns %d')
    
    # Obtaining an instance of the builtin type 'tuple' (line 771)
    tuple_135511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 771)
    # Adding element type (line 771)
    # Getting the type of 'routine_name' (line 771)
    routine_name_135512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 45), 'routine_name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 771, 45), tuple_135511, routine_name_135512)
    # Adding element type (line 771)
    
    # Obtaining the type of the subscript
    str_135513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 771, 67), 'str', 'info')
    # Getting the type of 'results' (line 771)
    results_135514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 59), 'results', False)
    # Obtaining the member '__getitem__' of a type (line 771)
    getitem___135515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 59), results_135514, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 771)
    subscript_call_result_135516 = invoke(stypy.reporting.localization.Localization(__file__, 771, 59), getitem___135515, str_135513)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 771, 45), tuple_135511, subscript_call_result_135516)
    
    # Applying the binary operator '%' (line 771)
    result_mod_135517 = python_operator(stypy.reporting.localization.Localization(__file__, 771, 26), '%', str_135510, tuple_135511)
    
    # Processing the call keyword arguments (line 771)
    kwargs_135518 = {}
    # Getting the type of 'LinAlgError' (line 771)
    LinAlgError_135509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 14), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 771)
    LinAlgError_call_result_135519 = invoke(stypy.reporting.localization.Localization(__file__, 771, 14), LinAlgError_135509, *[result_mod_135517], **kwargs_135518)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 771, 8), LinAlgError_call_result_135519, 'raise parameter', BaseException)
    # SSA join for if statement (line 770)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 774):
    
    # Assigning a Call to a Name (line 774):
    
    # Call to int(...): (line 774)
    # Processing the call arguments (line 774)
    
    # Call to abs(...): (line 774)
    # Processing the call arguments (line 774)
    
    # Obtaining the type of the subscript
    int_135522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 25), 'int')
    # Getting the type of 'work' (line 774)
    work_135523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 20), 'work', False)
    # Obtaining the member '__getitem__' of a type (line 774)
    getitem___135524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 20), work_135523, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 774)
    subscript_call_result_135525 = invoke(stypy.reporting.localization.Localization(__file__, 774, 20), getitem___135524, int_135522)
    
    # Processing the call keyword arguments (line 774)
    kwargs_135526 = {}
    # Getting the type of 'abs' (line 774)
    abs_135521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 16), 'abs', False)
    # Calling abs(args, kwargs) (line 774)
    abs_call_result_135527 = invoke(stypy.reporting.localization.Localization(__file__, 774, 16), abs_135521, *[subscript_call_result_135525], **kwargs_135526)
    
    # Processing the call keyword arguments (line 774)
    kwargs_135528 = {}
    # Getting the type of 'int' (line 774)
    int_135520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 12), 'int', False)
    # Calling int(args, kwargs) (line 774)
    int_call_result_135529 = invoke(stypy.reporting.localization.Localization(__file__, 774, 12), int_135520, *[abs_call_result_135527], **kwargs_135528)
    
    # Assigning a type to the variable 'lwork' (line 774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 4), 'lwork', int_call_result_135529)
    
    # Assigning a Call to a Name (line 775):
    
    # Assigning a Call to a Name (line 775):
    
    # Call to zeros(...): (line 775)
    # Processing the call arguments (line 775)
    
    # Obtaining an instance of the builtin type 'tuple' (line 775)
    tuple_135531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 775)
    # Adding element type (line 775)
    # Getting the type of 'lwork' (line 775)
    lwork_135532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 18), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 775, 18), tuple_135531, lwork_135532)
    
    # Getting the type of 't' (line 775)
    t_135533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 27), 't', False)
    # Processing the call keyword arguments (line 775)
    kwargs_135534 = {}
    # Getting the type of 'zeros' (line 775)
    zeros_135530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 11), 'zeros', False)
    # Calling zeros(args, kwargs) (line 775)
    zeros_call_result_135535 = invoke(stypy.reporting.localization.Localization(__file__, 775, 11), zeros_135530, *[tuple_135531, t_135533], **kwargs_135534)
    
    # Assigning a type to the variable 'work' (line 775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 4), 'work', zeros_call_result_135535)
    
    # Assigning a Call to a Name (line 776):
    
    # Assigning a Call to a Name (line 776):
    
    # Call to lapack_routine(...): (line 776)
    # Processing the call arguments (line 776)
    # Getting the type of 'm' (line 776)
    m_135537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 29), 'm', False)
    # Getting the type of 'n' (line 776)
    n_135538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 32), 'n', False)
    # Getting the type of 'a' (line 776)
    a_135539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 35), 'a', False)
    # Getting the type of 'm' (line 776)
    m_135540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 38), 'm', False)
    # Getting the type of 'tau' (line 776)
    tau_135541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 41), 'tau', False)
    # Getting the type of 'work' (line 776)
    work_135542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 46), 'work', False)
    # Getting the type of 'lwork' (line 776)
    lwork_135543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 52), 'lwork', False)
    int_135544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 776, 59), 'int')
    # Processing the call keyword arguments (line 776)
    kwargs_135545 = {}
    # Getting the type of 'lapack_routine' (line 776)
    lapack_routine_135536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 14), 'lapack_routine', False)
    # Calling lapack_routine(args, kwargs) (line 776)
    lapack_routine_call_result_135546 = invoke(stypy.reporting.localization.Localization(__file__, 776, 14), lapack_routine_135536, *[m_135537, n_135538, a_135539, m_135540, tau_135541, work_135542, lwork_135543, int_135544], **kwargs_135545)
    
    # Assigning a type to the variable 'results' (line 776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'results', lapack_routine_call_result_135546)
    
    
    
    # Obtaining the type of the subscript
    str_135547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 15), 'str', 'info')
    # Getting the type of 'results' (line 777)
    results_135548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 7), 'results')
    # Obtaining the member '__getitem__' of a type (line 777)
    getitem___135549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 7), results_135548, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 777)
    subscript_call_result_135550 = invoke(stypy.reporting.localization.Localization(__file__, 777, 7), getitem___135549, str_135547)
    
    int_135551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 26), 'int')
    # Applying the binary operator '!=' (line 777)
    result_ne_135552 = python_operator(stypy.reporting.localization.Localization(__file__, 777, 7), '!=', subscript_call_result_135550, int_135551)
    
    # Testing the type of an if condition (line 777)
    if_condition_135553 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 777, 4), result_ne_135552)
    # Assigning a type to the variable 'if_condition_135553' (line 777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'if_condition_135553', if_condition_135553)
    # SSA begins for if statement (line 777)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 778)
    # Processing the call arguments (line 778)
    str_135555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 26), 'str', '%s returns %d')
    
    # Obtaining an instance of the builtin type 'tuple' (line 778)
    tuple_135556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 778)
    # Adding element type (line 778)
    # Getting the type of 'routine_name' (line 778)
    routine_name_135557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 45), 'routine_name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 778, 45), tuple_135556, routine_name_135557)
    # Adding element type (line 778)
    
    # Obtaining the type of the subscript
    str_135558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 67), 'str', 'info')
    # Getting the type of 'results' (line 778)
    results_135559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 59), 'results', False)
    # Obtaining the member '__getitem__' of a type (line 778)
    getitem___135560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 59), results_135559, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 778)
    subscript_call_result_135561 = invoke(stypy.reporting.localization.Localization(__file__, 778, 59), getitem___135560, str_135558)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 778, 45), tuple_135556, subscript_call_result_135561)
    
    # Applying the binary operator '%' (line 778)
    result_mod_135562 = python_operator(stypy.reporting.localization.Localization(__file__, 778, 26), '%', str_135555, tuple_135556)
    
    # Processing the call keyword arguments (line 778)
    kwargs_135563 = {}
    # Getting the type of 'LinAlgError' (line 778)
    LinAlgError_135554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 14), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 778)
    LinAlgError_call_result_135564 = invoke(stypy.reporting.localization.Localization(__file__, 778, 14), LinAlgError_135554, *[result_mod_135562], **kwargs_135563)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 778, 8), LinAlgError_call_result_135564, 'raise parameter', BaseException)
    # SSA join for if statement (line 777)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mode' (line 781)
    mode_135565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 7), 'mode')
    str_135566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 15), 'str', 'r')
    # Applying the binary operator '==' (line 781)
    result_eq_135567 = python_operator(stypy.reporting.localization.Localization(__file__, 781, 7), '==', mode_135565, str_135566)
    
    # Testing the type of an if condition (line 781)
    if_condition_135568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 781, 4), result_eq_135567)
    # Assigning a type to the variable 'if_condition_135568' (line 781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'if_condition_135568', if_condition_135568)
    # SSA begins for if statement (line 781)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 782):
    
    # Assigning a Call to a Name (line 782):
    
    # Call to _fastCopyAndTranspose(...): (line 782)
    # Processing the call arguments (line 782)
    # Getting the type of 'result_t' (line 782)
    result_t_135570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 34), 'result_t', False)
    
    # Obtaining the type of the subscript
    slice_135571 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 782, 44), None, None, None)
    # Getting the type of 'mn' (line 782)
    mn_135572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 50), 'mn', False)
    slice_135573 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 782, 44), None, mn_135572, None)
    # Getting the type of 'a' (line 782)
    a_135574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 44), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 782)
    getitem___135575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 44), a_135574, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 782)
    subscript_call_result_135576 = invoke(stypy.reporting.localization.Localization(__file__, 782, 44), getitem___135575, (slice_135571, slice_135573))
    
    # Processing the call keyword arguments (line 782)
    kwargs_135577 = {}
    # Getting the type of '_fastCopyAndTranspose' (line 782)
    _fastCopyAndTranspose_135569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 12), '_fastCopyAndTranspose', False)
    # Calling _fastCopyAndTranspose(args, kwargs) (line 782)
    _fastCopyAndTranspose_call_result_135578 = invoke(stypy.reporting.localization.Localization(__file__, 782, 12), _fastCopyAndTranspose_135569, *[result_t_135570, subscript_call_result_135576], **kwargs_135577)
    
    # Assigning a type to the variable 'r' (line 782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'r', _fastCopyAndTranspose_call_result_135578)
    
    # Call to wrap(...): (line 783)
    # Processing the call arguments (line 783)
    
    # Call to triu(...): (line 783)
    # Processing the call arguments (line 783)
    # Getting the type of 'r' (line 783)
    r_135581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 25), 'r', False)
    # Processing the call keyword arguments (line 783)
    kwargs_135582 = {}
    # Getting the type of 'triu' (line 783)
    triu_135580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 20), 'triu', False)
    # Calling triu(args, kwargs) (line 783)
    triu_call_result_135583 = invoke(stypy.reporting.localization.Localization(__file__, 783, 20), triu_135580, *[r_135581], **kwargs_135582)
    
    # Processing the call keyword arguments (line 783)
    kwargs_135584 = {}
    # Getting the type of 'wrap' (line 783)
    wrap_135579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 15), 'wrap', False)
    # Calling wrap(args, kwargs) (line 783)
    wrap_call_result_135585 = invoke(stypy.reporting.localization.Localization(__file__, 783, 15), wrap_135579, *[triu_call_result_135583], **kwargs_135584)
    
    # Assigning a type to the variable 'stypy_return_type' (line 783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 8), 'stypy_return_type', wrap_call_result_135585)
    # SSA join for if statement (line 781)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mode' (line 785)
    mode_135586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 7), 'mode')
    str_135587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 15), 'str', 'raw')
    # Applying the binary operator '==' (line 785)
    result_eq_135588 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 7), '==', mode_135586, str_135587)
    
    # Testing the type of an if condition (line 785)
    if_condition_135589 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 785, 4), result_eq_135588)
    # Assigning a type to the variable 'if_condition_135589' (line 785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 4), 'if_condition_135589', if_condition_135589)
    # SSA begins for if statement (line 785)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 786)
    tuple_135590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 786)
    # Adding element type (line 786)
    # Getting the type of 'a' (line 786)
    a_135591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 15), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 15), tuple_135590, a_135591)
    # Adding element type (line 786)
    # Getting the type of 'tau' (line 786)
    tau_135592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 18), 'tau')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 15), tuple_135590, tau_135592)
    
    # Assigning a type to the variable 'stypy_return_type' (line 786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 8), 'stypy_return_type', tuple_135590)
    # SSA join for if statement (line 785)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mode' (line 788)
    mode_135593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 7), 'mode')
    str_135594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 15), 'str', 'economic')
    # Applying the binary operator '==' (line 788)
    result_eq_135595 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 7), '==', mode_135593, str_135594)
    
    # Testing the type of an if condition (line 788)
    if_condition_135596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 788, 4), result_eq_135595)
    # Assigning a type to the variable 'if_condition_135596' (line 788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 4), 'if_condition_135596', if_condition_135596)
    # SSA begins for if statement (line 788)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 't' (line 789)
    t_135597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 11), 't')
    # Getting the type of 'result_t' (line 789)
    result_t_135598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 16), 'result_t')
    # Applying the binary operator '!=' (line 789)
    result_ne_135599 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 11), '!=', t_135597, result_t_135598)
    
    # Testing the type of an if condition (line 789)
    if_condition_135600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 789, 8), result_ne_135599)
    # Assigning a type to the variable 'if_condition_135600' (line 789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 8), 'if_condition_135600', if_condition_135600)
    # SSA begins for if statement (line 789)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 790):
    
    # Assigning a Call to a Name (line 790):
    
    # Call to astype(...): (line 790)
    # Processing the call arguments (line 790)
    # Getting the type of 'result_t' (line 790)
    result_t_135603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 25), 'result_t', False)
    # Processing the call keyword arguments (line 790)
    # Getting the type of 'False' (line 790)
    False_135604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 40), 'False', False)
    keyword_135605 = False_135604
    kwargs_135606 = {'copy': keyword_135605}
    # Getting the type of 'a' (line 790)
    a_135601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 16), 'a', False)
    # Obtaining the member 'astype' of a type (line 790)
    astype_135602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 16), a_135601, 'astype')
    # Calling astype(args, kwargs) (line 790)
    astype_call_result_135607 = invoke(stypy.reporting.localization.Localization(__file__, 790, 16), astype_135602, *[result_t_135603], **kwargs_135606)
    
    # Assigning a type to the variable 'a' (line 790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 12), 'a', astype_call_result_135607)
    # SSA join for if statement (line 789)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to wrap(...): (line 791)
    # Processing the call arguments (line 791)
    # Getting the type of 'a' (line 791)
    a_135609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 20), 'a', False)
    # Obtaining the member 'T' of a type (line 791)
    T_135610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 20), a_135609, 'T')
    # Processing the call keyword arguments (line 791)
    kwargs_135611 = {}
    # Getting the type of 'wrap' (line 791)
    wrap_135608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 15), 'wrap', False)
    # Calling wrap(args, kwargs) (line 791)
    wrap_call_result_135612 = invoke(stypy.reporting.localization.Localization(__file__, 791, 15), wrap_135608, *[T_135610], **kwargs_135611)
    
    # Assigning a type to the variable 'stypy_return_type' (line 791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 8), 'stypy_return_type', wrap_call_result_135612)
    # SSA join for if statement (line 788)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'mode' (line 794)
    mode_135613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 7), 'mode')
    str_135614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 15), 'str', 'complete')
    # Applying the binary operator '==' (line 794)
    result_eq_135615 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 7), '==', mode_135613, str_135614)
    
    
    # Getting the type of 'm' (line 794)
    m_135616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 30), 'm')
    # Getting the type of 'n' (line 794)
    n_135617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 34), 'n')
    # Applying the binary operator '>' (line 794)
    result_gt_135618 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 30), '>', m_135616, n_135617)
    
    # Applying the binary operator 'and' (line 794)
    result_and_keyword_135619 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 7), 'and', result_eq_135615, result_gt_135618)
    
    # Testing the type of an if condition (line 794)
    if_condition_135620 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 794, 4), result_and_keyword_135619)
    # Assigning a type to the variable 'if_condition_135620' (line 794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 4), 'if_condition_135620', if_condition_135620)
    # SSA begins for if statement (line 794)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 795):
    
    # Assigning a Name to a Name (line 795):
    # Getting the type of 'm' (line 795)
    m_135621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 13), 'm')
    # Assigning a type to the variable 'mc' (line 795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 8), 'mc', m_135621)
    
    # Assigning a Call to a Name (line 796):
    
    # Assigning a Call to a Name (line 796):
    
    # Call to empty(...): (line 796)
    # Processing the call arguments (line 796)
    
    # Obtaining an instance of the builtin type 'tuple' (line 796)
    tuple_135623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 796)
    # Adding element type (line 796)
    # Getting the type of 'm' (line 796)
    m_135624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 19), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 19), tuple_135623, m_135624)
    # Adding element type (line 796)
    # Getting the type of 'm' (line 796)
    m_135625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 22), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 19), tuple_135623, m_135625)
    
    # Getting the type of 't' (line 796)
    t_135626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 26), 't', False)
    # Processing the call keyword arguments (line 796)
    kwargs_135627 = {}
    # Getting the type of 'empty' (line 796)
    empty_135622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 12), 'empty', False)
    # Calling empty(args, kwargs) (line 796)
    empty_call_result_135628 = invoke(stypy.reporting.localization.Localization(__file__, 796, 12), empty_135622, *[tuple_135623, t_135626], **kwargs_135627)
    
    # Assigning a type to the variable 'q' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 8), 'q', empty_call_result_135628)
    # SSA branch for the else part of an if statement (line 794)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 798):
    
    # Assigning a Name to a Name (line 798):
    # Getting the type of 'mn' (line 798)
    mn_135629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 13), 'mn')
    # Assigning a type to the variable 'mc' (line 798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 8), 'mc', mn_135629)
    
    # Assigning a Call to a Name (line 799):
    
    # Assigning a Call to a Name (line 799):
    
    # Call to empty(...): (line 799)
    # Processing the call arguments (line 799)
    
    # Obtaining an instance of the builtin type 'tuple' (line 799)
    tuple_135631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 799)
    # Adding element type (line 799)
    # Getting the type of 'n' (line 799)
    n_135632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 19), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 799, 19), tuple_135631, n_135632)
    # Adding element type (line 799)
    # Getting the type of 'm' (line 799)
    m_135633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 22), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 799, 19), tuple_135631, m_135633)
    
    # Getting the type of 't' (line 799)
    t_135634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 26), 't', False)
    # Processing the call keyword arguments (line 799)
    kwargs_135635 = {}
    # Getting the type of 'empty' (line 799)
    empty_135630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'empty', False)
    # Calling empty(args, kwargs) (line 799)
    empty_call_result_135636 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), empty_135630, *[tuple_135631, t_135634], **kwargs_135635)
    
    # Assigning a type to the variable 'q' (line 799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 8), 'q', empty_call_result_135636)
    # SSA join for if statement (line 794)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 800):
    
    # Assigning a Name to a Subscript (line 800):
    # Getting the type of 'a' (line 800)
    a_135637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 12), 'a')
    # Getting the type of 'q' (line 800)
    q_135638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 4), 'q')
    # Getting the type of 'n' (line 800)
    n_135639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 7), 'n')
    slice_135640 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 800, 4), None, n_135639, None)
    # Storing an element on a container (line 800)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 800, 4), q_135638, (slice_135640, a_135637))
    
    
    # Call to isComplexType(...): (line 802)
    # Processing the call arguments (line 802)
    # Getting the type of 't' (line 802)
    t_135642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 21), 't', False)
    # Processing the call keyword arguments (line 802)
    kwargs_135643 = {}
    # Getting the type of 'isComplexType' (line 802)
    isComplexType_135641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 7), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 802)
    isComplexType_call_result_135644 = invoke(stypy.reporting.localization.Localization(__file__, 802, 7), isComplexType_135641, *[t_135642], **kwargs_135643)
    
    # Testing the type of an if condition (line 802)
    if_condition_135645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 802, 4), isComplexType_call_result_135644)
    # Assigning a type to the variable 'if_condition_135645' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'if_condition_135645', if_condition_135645)
    # SSA begins for if statement (line 802)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 803):
    
    # Assigning a Attribute to a Name (line 803):
    # Getting the type of 'lapack_lite' (line 803)
    lapack_lite_135646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 25), 'lapack_lite')
    # Obtaining the member 'zungqr' of a type (line 803)
    zungqr_135647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 25), lapack_lite_135646, 'zungqr')
    # Assigning a type to the variable 'lapack_routine' (line 803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'lapack_routine', zungqr_135647)
    
    # Assigning a Str to a Name (line 804):
    
    # Assigning a Str to a Name (line 804):
    str_135648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 23), 'str', 'zungqr')
    # Assigning a type to the variable 'routine_name' (line 804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'routine_name', str_135648)
    # SSA branch for the else part of an if statement (line 802)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 806):
    
    # Assigning a Attribute to a Name (line 806):
    # Getting the type of 'lapack_lite' (line 806)
    lapack_lite_135649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 25), 'lapack_lite')
    # Obtaining the member 'dorgqr' of a type (line 806)
    dorgqr_135650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 25), lapack_lite_135649, 'dorgqr')
    # Assigning a type to the variable 'lapack_routine' (line 806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'lapack_routine', dorgqr_135650)
    
    # Assigning a Str to a Name (line 807):
    
    # Assigning a Str to a Name (line 807):
    str_135651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 23), 'str', 'dorgqr')
    # Assigning a type to the variable 'routine_name' (line 807)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 8), 'routine_name', str_135651)
    # SSA join for if statement (line 802)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 810):
    
    # Assigning a Num to a Name (line 810):
    int_135652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 12), 'int')
    # Assigning a type to the variable 'lwork' (line 810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 4), 'lwork', int_135652)
    
    # Assigning a Call to a Name (line 811):
    
    # Assigning a Call to a Name (line 811):
    
    # Call to zeros(...): (line 811)
    # Processing the call arguments (line 811)
    
    # Obtaining an instance of the builtin type 'tuple' (line 811)
    tuple_135654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 811)
    # Adding element type (line 811)
    # Getting the type of 'lwork' (line 811)
    lwork_135655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 18), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 18), tuple_135654, lwork_135655)
    
    # Getting the type of 't' (line 811)
    t_135656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 27), 't', False)
    # Processing the call keyword arguments (line 811)
    kwargs_135657 = {}
    # Getting the type of 'zeros' (line 811)
    zeros_135653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 11), 'zeros', False)
    # Calling zeros(args, kwargs) (line 811)
    zeros_call_result_135658 = invoke(stypy.reporting.localization.Localization(__file__, 811, 11), zeros_135653, *[tuple_135654, t_135656], **kwargs_135657)
    
    # Assigning a type to the variable 'work' (line 811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 4), 'work', zeros_call_result_135658)
    
    # Assigning a Call to a Name (line 812):
    
    # Assigning a Call to a Name (line 812):
    
    # Call to lapack_routine(...): (line 812)
    # Processing the call arguments (line 812)
    # Getting the type of 'm' (line 812)
    m_135660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 29), 'm', False)
    # Getting the type of 'mc' (line 812)
    mc_135661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 32), 'mc', False)
    # Getting the type of 'mn' (line 812)
    mn_135662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 36), 'mn', False)
    # Getting the type of 'q' (line 812)
    q_135663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 40), 'q', False)
    # Getting the type of 'm' (line 812)
    m_135664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 43), 'm', False)
    # Getting the type of 'tau' (line 812)
    tau_135665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 46), 'tau', False)
    # Getting the type of 'work' (line 812)
    work_135666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 51), 'work', False)
    int_135667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 57), 'int')
    int_135668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 61), 'int')
    # Processing the call keyword arguments (line 812)
    kwargs_135669 = {}
    # Getting the type of 'lapack_routine' (line 812)
    lapack_routine_135659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 14), 'lapack_routine', False)
    # Calling lapack_routine(args, kwargs) (line 812)
    lapack_routine_call_result_135670 = invoke(stypy.reporting.localization.Localization(__file__, 812, 14), lapack_routine_135659, *[m_135660, mc_135661, mn_135662, q_135663, m_135664, tau_135665, work_135666, int_135667, int_135668], **kwargs_135669)
    
    # Assigning a type to the variable 'results' (line 812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 4), 'results', lapack_routine_call_result_135670)
    
    
    
    # Obtaining the type of the subscript
    str_135671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 15), 'str', 'info')
    # Getting the type of 'results' (line 813)
    results_135672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 7), 'results')
    # Obtaining the member '__getitem__' of a type (line 813)
    getitem___135673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 7), results_135672, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 813)
    subscript_call_result_135674 = invoke(stypy.reporting.localization.Localization(__file__, 813, 7), getitem___135673, str_135671)
    
    int_135675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 26), 'int')
    # Applying the binary operator '!=' (line 813)
    result_ne_135676 = python_operator(stypy.reporting.localization.Localization(__file__, 813, 7), '!=', subscript_call_result_135674, int_135675)
    
    # Testing the type of an if condition (line 813)
    if_condition_135677 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 813, 4), result_ne_135676)
    # Assigning a type to the variable 'if_condition_135677' (line 813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 4), 'if_condition_135677', if_condition_135677)
    # SSA begins for if statement (line 813)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 814)
    # Processing the call arguments (line 814)
    str_135679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 26), 'str', '%s returns %d')
    
    # Obtaining an instance of the builtin type 'tuple' (line 814)
    tuple_135680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 814)
    # Adding element type (line 814)
    # Getting the type of 'routine_name' (line 814)
    routine_name_135681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 45), 'routine_name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 814, 45), tuple_135680, routine_name_135681)
    # Adding element type (line 814)
    
    # Obtaining the type of the subscript
    str_135682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 67), 'str', 'info')
    # Getting the type of 'results' (line 814)
    results_135683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 59), 'results', False)
    # Obtaining the member '__getitem__' of a type (line 814)
    getitem___135684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 59), results_135683, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 814)
    subscript_call_result_135685 = invoke(stypy.reporting.localization.Localization(__file__, 814, 59), getitem___135684, str_135682)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 814, 45), tuple_135680, subscript_call_result_135685)
    
    # Applying the binary operator '%' (line 814)
    result_mod_135686 = python_operator(stypy.reporting.localization.Localization(__file__, 814, 26), '%', str_135679, tuple_135680)
    
    # Processing the call keyword arguments (line 814)
    kwargs_135687 = {}
    # Getting the type of 'LinAlgError' (line 814)
    LinAlgError_135678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 14), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 814)
    LinAlgError_call_result_135688 = invoke(stypy.reporting.localization.Localization(__file__, 814, 14), LinAlgError_135678, *[result_mod_135686], **kwargs_135687)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 814, 8), LinAlgError_call_result_135688, 'raise parameter', BaseException)
    # SSA join for if statement (line 813)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 817):
    
    # Assigning a Call to a Name (line 817):
    
    # Call to int(...): (line 817)
    # Processing the call arguments (line 817)
    
    # Call to abs(...): (line 817)
    # Processing the call arguments (line 817)
    
    # Obtaining the type of the subscript
    int_135691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 25), 'int')
    # Getting the type of 'work' (line 817)
    work_135692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 20), 'work', False)
    # Obtaining the member '__getitem__' of a type (line 817)
    getitem___135693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 20), work_135692, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 817)
    subscript_call_result_135694 = invoke(stypy.reporting.localization.Localization(__file__, 817, 20), getitem___135693, int_135691)
    
    # Processing the call keyword arguments (line 817)
    kwargs_135695 = {}
    # Getting the type of 'abs' (line 817)
    abs_135690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 16), 'abs', False)
    # Calling abs(args, kwargs) (line 817)
    abs_call_result_135696 = invoke(stypy.reporting.localization.Localization(__file__, 817, 16), abs_135690, *[subscript_call_result_135694], **kwargs_135695)
    
    # Processing the call keyword arguments (line 817)
    kwargs_135697 = {}
    # Getting the type of 'int' (line 817)
    int_135689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 12), 'int', False)
    # Calling int(args, kwargs) (line 817)
    int_call_result_135698 = invoke(stypy.reporting.localization.Localization(__file__, 817, 12), int_135689, *[abs_call_result_135696], **kwargs_135697)
    
    # Assigning a type to the variable 'lwork' (line 817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'lwork', int_call_result_135698)
    
    # Assigning a Call to a Name (line 818):
    
    # Assigning a Call to a Name (line 818):
    
    # Call to zeros(...): (line 818)
    # Processing the call arguments (line 818)
    
    # Obtaining an instance of the builtin type 'tuple' (line 818)
    tuple_135700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 818)
    # Adding element type (line 818)
    # Getting the type of 'lwork' (line 818)
    lwork_135701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 18), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 818, 18), tuple_135700, lwork_135701)
    
    # Getting the type of 't' (line 818)
    t_135702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 27), 't', False)
    # Processing the call keyword arguments (line 818)
    kwargs_135703 = {}
    # Getting the type of 'zeros' (line 818)
    zeros_135699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 11), 'zeros', False)
    # Calling zeros(args, kwargs) (line 818)
    zeros_call_result_135704 = invoke(stypy.reporting.localization.Localization(__file__, 818, 11), zeros_135699, *[tuple_135700, t_135702], **kwargs_135703)
    
    # Assigning a type to the variable 'work' (line 818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'work', zeros_call_result_135704)
    
    # Assigning a Call to a Name (line 819):
    
    # Assigning a Call to a Name (line 819):
    
    # Call to lapack_routine(...): (line 819)
    # Processing the call arguments (line 819)
    # Getting the type of 'm' (line 819)
    m_135706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 29), 'm', False)
    # Getting the type of 'mc' (line 819)
    mc_135707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 32), 'mc', False)
    # Getting the type of 'mn' (line 819)
    mn_135708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 36), 'mn', False)
    # Getting the type of 'q' (line 819)
    q_135709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 40), 'q', False)
    # Getting the type of 'm' (line 819)
    m_135710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 43), 'm', False)
    # Getting the type of 'tau' (line 819)
    tau_135711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 46), 'tau', False)
    # Getting the type of 'work' (line 819)
    work_135712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 51), 'work', False)
    # Getting the type of 'lwork' (line 819)
    lwork_135713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 57), 'lwork', False)
    int_135714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 64), 'int')
    # Processing the call keyword arguments (line 819)
    kwargs_135715 = {}
    # Getting the type of 'lapack_routine' (line 819)
    lapack_routine_135705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 14), 'lapack_routine', False)
    # Calling lapack_routine(args, kwargs) (line 819)
    lapack_routine_call_result_135716 = invoke(stypy.reporting.localization.Localization(__file__, 819, 14), lapack_routine_135705, *[m_135706, mc_135707, mn_135708, q_135709, m_135710, tau_135711, work_135712, lwork_135713, int_135714], **kwargs_135715)
    
    # Assigning a type to the variable 'results' (line 819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 4), 'results', lapack_routine_call_result_135716)
    
    
    
    # Obtaining the type of the subscript
    str_135717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 15), 'str', 'info')
    # Getting the type of 'results' (line 820)
    results_135718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 7), 'results')
    # Obtaining the member '__getitem__' of a type (line 820)
    getitem___135719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 7), results_135718, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 820)
    subscript_call_result_135720 = invoke(stypy.reporting.localization.Localization(__file__, 820, 7), getitem___135719, str_135717)
    
    int_135721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 26), 'int')
    # Applying the binary operator '!=' (line 820)
    result_ne_135722 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 7), '!=', subscript_call_result_135720, int_135721)
    
    # Testing the type of an if condition (line 820)
    if_condition_135723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 820, 4), result_ne_135722)
    # Assigning a type to the variable 'if_condition_135723' (line 820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 4), 'if_condition_135723', if_condition_135723)
    # SSA begins for if statement (line 820)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 821)
    # Processing the call arguments (line 821)
    str_135725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 26), 'str', '%s returns %d')
    
    # Obtaining an instance of the builtin type 'tuple' (line 821)
    tuple_135726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 821)
    # Adding element type (line 821)
    # Getting the type of 'routine_name' (line 821)
    routine_name_135727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 45), 'routine_name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 821, 45), tuple_135726, routine_name_135727)
    # Adding element type (line 821)
    
    # Obtaining the type of the subscript
    str_135728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 67), 'str', 'info')
    # Getting the type of 'results' (line 821)
    results_135729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 59), 'results', False)
    # Obtaining the member '__getitem__' of a type (line 821)
    getitem___135730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 59), results_135729, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 821)
    subscript_call_result_135731 = invoke(stypy.reporting.localization.Localization(__file__, 821, 59), getitem___135730, str_135728)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 821, 45), tuple_135726, subscript_call_result_135731)
    
    # Applying the binary operator '%' (line 821)
    result_mod_135732 = python_operator(stypy.reporting.localization.Localization(__file__, 821, 26), '%', str_135725, tuple_135726)
    
    # Processing the call keyword arguments (line 821)
    kwargs_135733 = {}
    # Getting the type of 'LinAlgError' (line 821)
    LinAlgError_135724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 14), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 821)
    LinAlgError_call_result_135734 = invoke(stypy.reporting.localization.Localization(__file__, 821, 14), LinAlgError_135724, *[result_mod_135732], **kwargs_135733)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 821, 8), LinAlgError_call_result_135734, 'raise parameter', BaseException)
    # SSA join for if statement (line 820)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 823):
    
    # Assigning a Call to a Name (line 823):
    
    # Call to _fastCopyAndTranspose(...): (line 823)
    # Processing the call arguments (line 823)
    # Getting the type of 'result_t' (line 823)
    result_t_135736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 30), 'result_t', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'mc' (line 823)
    mc_135737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 43), 'mc', False)
    slice_135738 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 823, 40), None, mc_135737, None)
    # Getting the type of 'q' (line 823)
    q_135739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 40), 'q', False)
    # Obtaining the member '__getitem__' of a type (line 823)
    getitem___135740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 40), q_135739, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 823)
    subscript_call_result_135741 = invoke(stypy.reporting.localization.Localization(__file__, 823, 40), getitem___135740, slice_135738)
    
    # Processing the call keyword arguments (line 823)
    kwargs_135742 = {}
    # Getting the type of '_fastCopyAndTranspose' (line 823)
    _fastCopyAndTranspose_135735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), '_fastCopyAndTranspose', False)
    # Calling _fastCopyAndTranspose(args, kwargs) (line 823)
    _fastCopyAndTranspose_call_result_135743 = invoke(stypy.reporting.localization.Localization(__file__, 823, 8), _fastCopyAndTranspose_135735, *[result_t_135736, subscript_call_result_135741], **kwargs_135742)
    
    # Assigning a type to the variable 'q' (line 823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 4), 'q', _fastCopyAndTranspose_call_result_135743)
    
    # Assigning a Call to a Name (line 824):
    
    # Assigning a Call to a Name (line 824):
    
    # Call to _fastCopyAndTranspose(...): (line 824)
    # Processing the call arguments (line 824)
    # Getting the type of 'result_t' (line 824)
    result_t_135745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 30), 'result_t', False)
    
    # Obtaining the type of the subscript
    slice_135746 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 824, 40), None, None, None)
    # Getting the type of 'mc' (line 824)
    mc_135747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 46), 'mc', False)
    slice_135748 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 824, 40), None, mc_135747, None)
    # Getting the type of 'a' (line 824)
    a_135749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 40), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 824)
    getitem___135750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 40), a_135749, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 824)
    subscript_call_result_135751 = invoke(stypy.reporting.localization.Localization(__file__, 824, 40), getitem___135750, (slice_135746, slice_135748))
    
    # Processing the call keyword arguments (line 824)
    kwargs_135752 = {}
    # Getting the type of '_fastCopyAndTranspose' (line 824)
    _fastCopyAndTranspose_135744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), '_fastCopyAndTranspose', False)
    # Calling _fastCopyAndTranspose(args, kwargs) (line 824)
    _fastCopyAndTranspose_call_result_135753 = invoke(stypy.reporting.localization.Localization(__file__, 824, 8), _fastCopyAndTranspose_135744, *[result_t_135745, subscript_call_result_135751], **kwargs_135752)
    
    # Assigning a type to the variable 'r' (line 824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 4), 'r', _fastCopyAndTranspose_call_result_135753)
    
    # Obtaining an instance of the builtin type 'tuple' (line 826)
    tuple_135754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 826)
    # Adding element type (line 826)
    
    # Call to wrap(...): (line 826)
    # Processing the call arguments (line 826)
    # Getting the type of 'q' (line 826)
    q_135756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 16), 'q', False)
    # Processing the call keyword arguments (line 826)
    kwargs_135757 = {}
    # Getting the type of 'wrap' (line 826)
    wrap_135755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 11), 'wrap', False)
    # Calling wrap(args, kwargs) (line 826)
    wrap_call_result_135758 = invoke(stypy.reporting.localization.Localization(__file__, 826, 11), wrap_135755, *[q_135756], **kwargs_135757)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 11), tuple_135754, wrap_call_result_135758)
    # Adding element type (line 826)
    
    # Call to wrap(...): (line 826)
    # Processing the call arguments (line 826)
    
    # Call to triu(...): (line 826)
    # Processing the call arguments (line 826)
    # Getting the type of 'r' (line 826)
    r_135761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 30), 'r', False)
    # Processing the call keyword arguments (line 826)
    kwargs_135762 = {}
    # Getting the type of 'triu' (line 826)
    triu_135760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 25), 'triu', False)
    # Calling triu(args, kwargs) (line 826)
    triu_call_result_135763 = invoke(stypy.reporting.localization.Localization(__file__, 826, 25), triu_135760, *[r_135761], **kwargs_135762)
    
    # Processing the call keyword arguments (line 826)
    kwargs_135764 = {}
    # Getting the type of 'wrap' (line 826)
    wrap_135759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 20), 'wrap', False)
    # Calling wrap(args, kwargs) (line 826)
    wrap_call_result_135765 = invoke(stypy.reporting.localization.Localization(__file__, 826, 20), wrap_135759, *[triu_call_result_135763], **kwargs_135764)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 11), tuple_135754, wrap_call_result_135765)
    
    # Assigning a type to the variable 'stypy_return_type' (line 826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'stypy_return_type', tuple_135754)
    
    # ################# End of 'qr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'qr' in the type store
    # Getting the type of 'stypy_return_type' (line 617)
    stypy_return_type_135766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_135766)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'qr'
    return stypy_return_type_135766

# Assigning a type to the variable 'qr' (line 617)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 0), 'qr', qr)

@norecursion
def eigvals(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'eigvals'
    module_type_store = module_type_store.open_function_context('eigvals', 832, 0, False)
    
    # Passed parameters checking function
    eigvals.stypy_localization = localization
    eigvals.stypy_type_of_self = None
    eigvals.stypy_type_store = module_type_store
    eigvals.stypy_function_name = 'eigvals'
    eigvals.stypy_param_names_list = ['a']
    eigvals.stypy_varargs_param_name = None
    eigvals.stypy_kwargs_param_name = None
    eigvals.stypy_call_defaults = defaults
    eigvals.stypy_call_varargs = varargs
    eigvals.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'eigvals', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'eigvals', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'eigvals(...)' code ##################

    str_135767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, (-1)), 'str', '\n    Compute the eigenvalues of a general matrix.\n\n    Main difference between `eigvals` and `eig`: the eigenvectors aren\'t\n    returned.\n\n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        A complex- or real-valued matrix whose eigenvalues will be computed.\n\n    Returns\n    -------\n    w : (..., M,) ndarray\n        The eigenvalues, each repeated according to its multiplicity.\n        They are not necessarily ordered, nor are they necessarily\n        real for real matrices.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eig : eigenvalues and right eigenvectors of general arrays\n    eigvalsh : eigenvalues of symmetric or Hermitian arrays.\n    eigh : eigenvalues and eigenvectors of symmetric/Hermitian arrays.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    This is implemented using the _geev LAPACK routines which compute\n    the eigenvalues and eigenvectors of general square arrays.\n\n    Examples\n    --------\n    Illustration, using the fact that the eigenvalues of a diagonal matrix\n    are its diagonal elements, that multiplying a matrix on the left\n    by an orthogonal matrix, `Q`, and on the right by `Q.T` (the transpose\n    of `Q`), preserves the eigenvalues of the "middle" matrix.  In other words,\n    if `Q` is orthogonal, then ``Q * A * Q.T`` has the same eigenvalues as\n    ``A``:\n\n    >>> from numpy import linalg as LA\n    >>> x = np.random.random()\n    >>> Q = np.array([[np.cos(x), -np.sin(x)], [np.sin(x), np.cos(x)]])\n    >>> LA.norm(Q[0, :]), LA.norm(Q[1, :]), np.dot(Q[0, :],Q[1, :])\n    (1.0, 1.0, 0.0)\n\n    Now multiply a diagonal matrix by Q on one side and by Q.T on the other:\n\n    >>> D = np.diag((-1,1))\n    >>> LA.eigvals(D)\n    array([-1.,  1.])\n    >>> A = np.dot(Q, D)\n    >>> A = np.dot(A, Q.T)\n    >>> LA.eigvals(A)\n    array([ 1., -1.])\n\n    ')
    
    # Assigning a Call to a Tuple (line 899):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 899)
    # Processing the call arguments (line 899)
    # Getting the type of 'a' (line 899)
    a_135769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 25), 'a', False)
    # Processing the call keyword arguments (line 899)
    kwargs_135770 = {}
    # Getting the type of '_makearray' (line 899)
    _makearray_135768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 899)
    _makearray_call_result_135771 = invoke(stypy.reporting.localization.Localization(__file__, 899, 14), _makearray_135768, *[a_135769], **kwargs_135770)
    
    # Assigning a type to the variable 'call_assignment_134299' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'call_assignment_134299', _makearray_call_result_135771)
    
    # Assigning a Call to a Name (line 899):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135775 = {}
    # Getting the type of 'call_assignment_134299' (line 899)
    call_assignment_134299_135772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'call_assignment_134299', False)
    # Obtaining the member '__getitem__' of a type (line 899)
    getitem___135773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 4), call_assignment_134299_135772, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135776 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135773, *[int_135774], **kwargs_135775)
    
    # Assigning a type to the variable 'call_assignment_134300' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'call_assignment_134300', getitem___call_result_135776)
    
    # Assigning a Name to a Name (line 899):
    # Getting the type of 'call_assignment_134300' (line 899)
    call_assignment_134300_135777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'call_assignment_134300')
    # Assigning a type to the variable 'a' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'a', call_assignment_134300_135777)
    
    # Assigning a Call to a Name (line 899):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135781 = {}
    # Getting the type of 'call_assignment_134299' (line 899)
    call_assignment_134299_135778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'call_assignment_134299', False)
    # Obtaining the member '__getitem__' of a type (line 899)
    getitem___135779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 4), call_assignment_134299_135778, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135782 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135779, *[int_135780], **kwargs_135781)
    
    # Assigning a type to the variable 'call_assignment_134301' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'call_assignment_134301', getitem___call_result_135782)
    
    # Assigning a Name to a Name (line 899):
    # Getting the type of 'call_assignment_134301' (line 899)
    call_assignment_134301_135783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 4), 'call_assignment_134301')
    # Assigning a type to the variable 'wrap' (line 899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 7), 'wrap', call_assignment_134301_135783)
    
    # Call to _assertNoEmpty2d(...): (line 900)
    # Processing the call arguments (line 900)
    # Getting the type of 'a' (line 900)
    a_135785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 21), 'a', False)
    # Processing the call keyword arguments (line 900)
    kwargs_135786 = {}
    # Getting the type of '_assertNoEmpty2d' (line 900)
    _assertNoEmpty2d_135784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 4), '_assertNoEmpty2d', False)
    # Calling _assertNoEmpty2d(args, kwargs) (line 900)
    _assertNoEmpty2d_call_result_135787 = invoke(stypy.reporting.localization.Localization(__file__, 900, 4), _assertNoEmpty2d_135784, *[a_135785], **kwargs_135786)
    
    
    # Call to _assertRankAtLeast2(...): (line 901)
    # Processing the call arguments (line 901)
    # Getting the type of 'a' (line 901)
    a_135789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 24), 'a', False)
    # Processing the call keyword arguments (line 901)
    kwargs_135790 = {}
    # Getting the type of '_assertRankAtLeast2' (line 901)
    _assertRankAtLeast2_135788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 901)
    _assertRankAtLeast2_call_result_135791 = invoke(stypy.reporting.localization.Localization(__file__, 901, 4), _assertRankAtLeast2_135788, *[a_135789], **kwargs_135790)
    
    
    # Call to _assertNdSquareness(...): (line 902)
    # Processing the call arguments (line 902)
    # Getting the type of 'a' (line 902)
    a_135793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 24), 'a', False)
    # Processing the call keyword arguments (line 902)
    kwargs_135794 = {}
    # Getting the type of '_assertNdSquareness' (line 902)
    _assertNdSquareness_135792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 902)
    _assertNdSquareness_call_result_135795 = invoke(stypy.reporting.localization.Localization(__file__, 902, 4), _assertNdSquareness_135792, *[a_135793], **kwargs_135794)
    
    
    # Call to _assertFinite(...): (line 903)
    # Processing the call arguments (line 903)
    # Getting the type of 'a' (line 903)
    a_135797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 18), 'a', False)
    # Processing the call keyword arguments (line 903)
    kwargs_135798 = {}
    # Getting the type of '_assertFinite' (line 903)
    _assertFinite_135796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 4), '_assertFinite', False)
    # Calling _assertFinite(args, kwargs) (line 903)
    _assertFinite_call_result_135799 = invoke(stypy.reporting.localization.Localization(__file__, 903, 4), _assertFinite_135796, *[a_135797], **kwargs_135798)
    
    
    # Assigning a Call to a Tuple (line 904):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 904)
    # Processing the call arguments (line 904)
    # Getting the type of 'a' (line 904)
    a_135801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 30), 'a', False)
    # Processing the call keyword arguments (line 904)
    kwargs_135802 = {}
    # Getting the type of '_commonType' (line 904)
    _commonType_135800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 904)
    _commonType_call_result_135803 = invoke(stypy.reporting.localization.Localization(__file__, 904, 18), _commonType_135800, *[a_135801], **kwargs_135802)
    
    # Assigning a type to the variable 'call_assignment_134302' (line 904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'call_assignment_134302', _commonType_call_result_135803)
    
    # Assigning a Call to a Name (line 904):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135807 = {}
    # Getting the type of 'call_assignment_134302' (line 904)
    call_assignment_134302_135804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'call_assignment_134302', False)
    # Obtaining the member '__getitem__' of a type (line 904)
    getitem___135805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 4), call_assignment_134302_135804, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135808 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135805, *[int_135806], **kwargs_135807)
    
    # Assigning a type to the variable 'call_assignment_134303' (line 904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'call_assignment_134303', getitem___call_result_135808)
    
    # Assigning a Name to a Name (line 904):
    # Getting the type of 'call_assignment_134303' (line 904)
    call_assignment_134303_135809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'call_assignment_134303')
    # Assigning a type to the variable 't' (line 904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 't', call_assignment_134303_135809)
    
    # Assigning a Call to a Name (line 904):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135813 = {}
    # Getting the type of 'call_assignment_134302' (line 904)
    call_assignment_134302_135810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'call_assignment_134302', False)
    # Obtaining the member '__getitem__' of a type (line 904)
    getitem___135811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 904, 4), call_assignment_134302_135810, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135814 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135811, *[int_135812], **kwargs_135813)
    
    # Assigning a type to the variable 'call_assignment_134304' (line 904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'call_assignment_134304', getitem___call_result_135814)
    
    # Assigning a Name to a Name (line 904):
    # Getting the type of 'call_assignment_134304' (line 904)
    call_assignment_134304_135815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 4), 'call_assignment_134304')
    # Assigning a type to the variable 'result_t' (line 904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 7), 'result_t', call_assignment_134304_135815)
    
    # Assigning a Call to a Name (line 906):
    
    # Assigning a Call to a Name (line 906):
    
    # Call to get_linalg_error_extobj(...): (line 906)
    # Processing the call arguments (line 906)
    # Getting the type of '_raise_linalgerror_eigenvalues_nonconvergence' (line 907)
    _raise_linalgerror_eigenvalues_nonconvergence_135817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 8), '_raise_linalgerror_eigenvalues_nonconvergence', False)
    # Processing the call keyword arguments (line 906)
    kwargs_135818 = {}
    # Getting the type of 'get_linalg_error_extobj' (line 906)
    get_linalg_error_extobj_135816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 13), 'get_linalg_error_extobj', False)
    # Calling get_linalg_error_extobj(args, kwargs) (line 906)
    get_linalg_error_extobj_call_result_135819 = invoke(stypy.reporting.localization.Localization(__file__, 906, 13), get_linalg_error_extobj_135816, *[_raise_linalgerror_eigenvalues_nonconvergence_135817], **kwargs_135818)
    
    # Assigning a type to the variable 'extobj' (line 906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 4), 'extobj', get_linalg_error_extobj_call_result_135819)
    
    # Assigning a IfExp to a Name (line 908):
    
    # Assigning a IfExp to a Name (line 908):
    
    
    # Call to isComplexType(...): (line 908)
    # Processing the call arguments (line 908)
    # Getting the type of 't' (line 908)
    t_135821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 40), 't', False)
    # Processing the call keyword arguments (line 908)
    kwargs_135822 = {}
    # Getting the type of 'isComplexType' (line 908)
    isComplexType_135820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 26), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 908)
    isComplexType_call_result_135823 = invoke(stypy.reporting.localization.Localization(__file__, 908, 26), isComplexType_135820, *[t_135821], **kwargs_135822)
    
    # Testing the type of an if expression (line 908)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 908, 16), isComplexType_call_result_135823)
    # SSA begins for if expression (line 908)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_135824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 16), 'str', 'D->D')
    # SSA branch for the else part of an if expression (line 908)
    module_type_store.open_ssa_branch('if expression else')
    str_135825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 48), 'str', 'd->D')
    # SSA join for if expression (line 908)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_135826 = union_type.UnionType.add(str_135824, str_135825)
    
    # Assigning a type to the variable 'signature' (line 908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 4), 'signature', if_exp_135826)
    
    # Assigning a Call to a Name (line 909):
    
    # Assigning a Call to a Name (line 909):
    
    # Call to eigvals(...): (line 909)
    # Processing the call arguments (line 909)
    # Getting the type of 'a' (line 909)
    a_135829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 30), 'a', False)
    # Processing the call keyword arguments (line 909)
    # Getting the type of 'signature' (line 909)
    signature_135830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 43), 'signature', False)
    keyword_135831 = signature_135830
    # Getting the type of 'extobj' (line 909)
    extobj_135832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 61), 'extobj', False)
    keyword_135833 = extobj_135832
    kwargs_135834 = {'extobj': keyword_135833, 'signature': keyword_135831}
    # Getting the type of '_umath_linalg' (line 909)
    _umath_linalg_135827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 8), '_umath_linalg', False)
    # Obtaining the member 'eigvals' of a type (line 909)
    eigvals_135828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 8), _umath_linalg_135827, 'eigvals')
    # Calling eigvals(args, kwargs) (line 909)
    eigvals_call_result_135835 = invoke(stypy.reporting.localization.Localization(__file__, 909, 8), eigvals_135828, *[a_135829], **kwargs_135834)
    
    # Assigning a type to the variable 'w' (line 909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 4), 'w', eigvals_call_result_135835)
    
    
    
    # Call to isComplexType(...): (line 911)
    # Processing the call arguments (line 911)
    # Getting the type of 't' (line 911)
    t_135837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 25), 't', False)
    # Processing the call keyword arguments (line 911)
    kwargs_135838 = {}
    # Getting the type of 'isComplexType' (line 911)
    isComplexType_135836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 11), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 911)
    isComplexType_call_result_135839 = invoke(stypy.reporting.localization.Localization(__file__, 911, 11), isComplexType_135836, *[t_135837], **kwargs_135838)
    
    # Applying the 'not' unary operator (line 911)
    result_not__135840 = python_operator(stypy.reporting.localization.Localization(__file__, 911, 7), 'not', isComplexType_call_result_135839)
    
    # Testing the type of an if condition (line 911)
    if_condition_135841 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 911, 4), result_not__135840)
    # Assigning a type to the variable 'if_condition_135841' (line 911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 4), 'if_condition_135841', if_condition_135841)
    # SSA begins for if statement (line 911)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to all(...): (line 912)
    # Processing the call arguments (line 912)
    
    # Getting the type of 'w' (line 912)
    w_135843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 15), 'w', False)
    # Obtaining the member 'imag' of a type (line 912)
    imag_135844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 15), w_135843, 'imag')
    int_135845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 25), 'int')
    # Applying the binary operator '==' (line 912)
    result_eq_135846 = python_operator(stypy.reporting.localization.Localization(__file__, 912, 15), '==', imag_135844, int_135845)
    
    # Processing the call keyword arguments (line 912)
    kwargs_135847 = {}
    # Getting the type of 'all' (line 912)
    all_135842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 11), 'all', False)
    # Calling all(args, kwargs) (line 912)
    all_call_result_135848 = invoke(stypy.reporting.localization.Localization(__file__, 912, 11), all_135842, *[result_eq_135846], **kwargs_135847)
    
    # Testing the type of an if condition (line 912)
    if_condition_135849 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 912, 8), all_call_result_135848)
    # Assigning a type to the variable 'if_condition_135849' (line 912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'if_condition_135849', if_condition_135849)
    # SSA begins for if statement (line 912)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 913):
    
    # Assigning a Attribute to a Name (line 913):
    # Getting the type of 'w' (line 913)
    w_135850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 16), 'w')
    # Obtaining the member 'real' of a type (line 913)
    real_135851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 16), w_135850, 'real')
    # Assigning a type to the variable 'w' (line 913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 12), 'w', real_135851)
    
    # Assigning a Call to a Name (line 914):
    
    # Assigning a Call to a Name (line 914):
    
    # Call to _realType(...): (line 914)
    # Processing the call arguments (line 914)
    # Getting the type of 'result_t' (line 914)
    result_t_135853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 33), 'result_t', False)
    # Processing the call keyword arguments (line 914)
    kwargs_135854 = {}
    # Getting the type of '_realType' (line 914)
    _realType_135852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 23), '_realType', False)
    # Calling _realType(args, kwargs) (line 914)
    _realType_call_result_135855 = invoke(stypy.reporting.localization.Localization(__file__, 914, 23), _realType_135852, *[result_t_135853], **kwargs_135854)
    
    # Assigning a type to the variable 'result_t' (line 914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 12), 'result_t', _realType_call_result_135855)
    # SSA branch for the else part of an if statement (line 912)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 916):
    
    # Assigning a Call to a Name (line 916):
    
    # Call to _complexType(...): (line 916)
    # Processing the call arguments (line 916)
    # Getting the type of 'result_t' (line 916)
    result_t_135857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 36), 'result_t', False)
    # Processing the call keyword arguments (line 916)
    kwargs_135858 = {}
    # Getting the type of '_complexType' (line 916)
    _complexType_135856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 23), '_complexType', False)
    # Calling _complexType(args, kwargs) (line 916)
    _complexType_call_result_135859 = invoke(stypy.reporting.localization.Localization(__file__, 916, 23), _complexType_135856, *[result_t_135857], **kwargs_135858)
    
    # Assigning a type to the variable 'result_t' (line 916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 916, 12), 'result_t', _complexType_call_result_135859)
    # SSA join for if statement (line 912)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 911)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to astype(...): (line 918)
    # Processing the call arguments (line 918)
    # Getting the type of 'result_t' (line 918)
    result_t_135862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 20), 'result_t', False)
    # Processing the call keyword arguments (line 918)
    # Getting the type of 'False' (line 918)
    False_135863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 35), 'False', False)
    keyword_135864 = False_135863
    kwargs_135865 = {'copy': keyword_135864}
    # Getting the type of 'w' (line 918)
    w_135860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 11), 'w', False)
    # Obtaining the member 'astype' of a type (line 918)
    astype_135861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 11), w_135860, 'astype')
    # Calling astype(args, kwargs) (line 918)
    astype_call_result_135866 = invoke(stypy.reporting.localization.Localization(__file__, 918, 11), astype_135861, *[result_t_135862], **kwargs_135865)
    
    # Assigning a type to the variable 'stypy_return_type' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 4), 'stypy_return_type', astype_call_result_135866)
    
    # ################# End of 'eigvals(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'eigvals' in the type store
    # Getting the type of 'stypy_return_type' (line 832)
    stypy_return_type_135867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_135867)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'eigvals'
    return stypy_return_type_135867

# Assigning a type to the variable 'eigvals' (line 832)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 0), 'eigvals', eigvals)

@norecursion
def eigvalsh(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_135868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 21), 'str', 'L')
    defaults = [str_135868]
    # Create a new context for function 'eigvalsh'
    module_type_store = module_type_store.open_function_context('eigvalsh', 920, 0, False)
    
    # Passed parameters checking function
    eigvalsh.stypy_localization = localization
    eigvalsh.stypy_type_of_self = None
    eigvalsh.stypy_type_store = module_type_store
    eigvalsh.stypy_function_name = 'eigvalsh'
    eigvalsh.stypy_param_names_list = ['a', 'UPLO']
    eigvalsh.stypy_varargs_param_name = None
    eigvalsh.stypy_kwargs_param_name = None
    eigvalsh.stypy_call_defaults = defaults
    eigvalsh.stypy_call_varargs = varargs
    eigvalsh.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'eigvalsh', ['a', 'UPLO'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'eigvalsh', localization, ['a', 'UPLO'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'eigvalsh(...)' code ##################

    str_135869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, (-1)), 'str', "\n    Compute the eigenvalues of a Hermitian or real symmetric matrix.\n\n    Main difference from eigh: the eigenvectors are not computed.\n\n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        A complex- or real-valued matrix whose eigenvalues are to be\n        computed.\n    UPLO : {'L', 'U'}, optional\n        Same as `lower`, with 'L' for lower and 'U' for upper triangular.\n        Deprecated.\n\n    Returns\n    -------\n    w : (..., M,) ndarray\n        The eigenvalues in ascending order, each repeated according to\n        its multiplicity.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eigh : eigenvalues and eigenvectors of symmetric/Hermitian arrays.\n    eigvals : eigenvalues of general real or complex arrays.\n    eig : eigenvalues and right eigenvectors of general real or complex\n          arrays.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    The eigenvalues are computed using LAPACK routines _syevd, _heevd\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.array([[1, -2j], [2j, 5]])\n    >>> LA.eigvalsh(a)\n    array([ 0.17157288,  5.82842712])\n\n    ")
    
    # Assigning a Call to a Name (line 971):
    
    # Assigning a Call to a Name (line 971):
    
    # Call to upper(...): (line 971)
    # Processing the call keyword arguments (line 971)
    kwargs_135872 = {}
    # Getting the type of 'UPLO' (line 971)
    UPLO_135870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 11), 'UPLO', False)
    # Obtaining the member 'upper' of a type (line 971)
    upper_135871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 11), UPLO_135870, 'upper')
    # Calling upper(args, kwargs) (line 971)
    upper_call_result_135873 = invoke(stypy.reporting.localization.Localization(__file__, 971, 11), upper_135871, *[], **kwargs_135872)
    
    # Assigning a type to the variable 'UPLO' (line 971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 4), 'UPLO', upper_call_result_135873)
    
    
    # Getting the type of 'UPLO' (line 972)
    UPLO_135874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 7), 'UPLO')
    
    # Obtaining an instance of the builtin type 'tuple' (line 972)
    tuple_135875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 972)
    # Adding element type (line 972)
    str_135876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 20), 'str', 'L')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 972, 20), tuple_135875, str_135876)
    # Adding element type (line 972)
    str_135877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, 25), 'str', 'U')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 972, 20), tuple_135875, str_135877)
    
    # Applying the binary operator 'notin' (line 972)
    result_contains_135878 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 7), 'notin', UPLO_135874, tuple_135875)
    
    # Testing the type of an if condition (line 972)
    if_condition_135879 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 972, 4), result_contains_135878)
    # Assigning a type to the variable 'if_condition_135879' (line 972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 4), 'if_condition_135879', if_condition_135879)
    # SSA begins for if statement (line 972)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 973)
    # Processing the call arguments (line 973)
    str_135881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 25), 'str', "UPLO argument must be 'L' or 'U'")
    # Processing the call keyword arguments (line 973)
    kwargs_135882 = {}
    # Getting the type of 'ValueError' (line 973)
    ValueError_135880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 973)
    ValueError_call_result_135883 = invoke(stypy.reporting.localization.Localization(__file__, 973, 14), ValueError_135880, *[str_135881], **kwargs_135882)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 973, 8), ValueError_call_result_135883, 'raise parameter', BaseException)
    # SSA join for if statement (line 972)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 975):
    
    # Assigning a Call to a Name (line 975):
    
    # Call to get_linalg_error_extobj(...): (line 975)
    # Processing the call arguments (line 975)
    # Getting the type of '_raise_linalgerror_eigenvalues_nonconvergence' (line 976)
    _raise_linalgerror_eigenvalues_nonconvergence_135885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), '_raise_linalgerror_eigenvalues_nonconvergence', False)
    # Processing the call keyword arguments (line 975)
    kwargs_135886 = {}
    # Getting the type of 'get_linalg_error_extobj' (line 975)
    get_linalg_error_extobj_135884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 13), 'get_linalg_error_extobj', False)
    # Calling get_linalg_error_extobj(args, kwargs) (line 975)
    get_linalg_error_extobj_call_result_135887 = invoke(stypy.reporting.localization.Localization(__file__, 975, 13), get_linalg_error_extobj_135884, *[_raise_linalgerror_eigenvalues_nonconvergence_135885], **kwargs_135886)
    
    # Assigning a type to the variable 'extobj' (line 975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 4), 'extobj', get_linalg_error_extobj_call_result_135887)
    
    
    # Getting the type of 'UPLO' (line 977)
    UPLO_135888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 7), 'UPLO')
    str_135889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 15), 'str', 'L')
    # Applying the binary operator '==' (line 977)
    result_eq_135890 = python_operator(stypy.reporting.localization.Localization(__file__, 977, 7), '==', UPLO_135888, str_135889)
    
    # Testing the type of an if condition (line 977)
    if_condition_135891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 977, 4), result_eq_135890)
    # Assigning a type to the variable 'if_condition_135891' (line 977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 4), 'if_condition_135891', if_condition_135891)
    # SSA begins for if statement (line 977)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 978):
    
    # Assigning a Attribute to a Name (line 978):
    # Getting the type of '_umath_linalg' (line 978)
    _umath_linalg_135892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 17), '_umath_linalg')
    # Obtaining the member 'eigvalsh_lo' of a type (line 978)
    eigvalsh_lo_135893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 17), _umath_linalg_135892, 'eigvalsh_lo')
    # Assigning a type to the variable 'gufunc' (line 978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 8), 'gufunc', eigvalsh_lo_135893)
    # SSA branch for the else part of an if statement (line 977)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 980):
    
    # Assigning a Attribute to a Name (line 980):
    # Getting the type of '_umath_linalg' (line 980)
    _umath_linalg_135894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 17), '_umath_linalg')
    # Obtaining the member 'eigvalsh_up' of a type (line 980)
    eigvalsh_up_135895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 17), _umath_linalg_135894, 'eigvalsh_up')
    # Assigning a type to the variable 'gufunc' (line 980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 8), 'gufunc', eigvalsh_up_135895)
    # SSA join for if statement (line 977)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 982):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 982)
    # Processing the call arguments (line 982)
    # Getting the type of 'a' (line 982)
    a_135897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 25), 'a', False)
    # Processing the call keyword arguments (line 982)
    kwargs_135898 = {}
    # Getting the type of '_makearray' (line 982)
    _makearray_135896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 982)
    _makearray_call_result_135899 = invoke(stypy.reporting.localization.Localization(__file__, 982, 14), _makearray_135896, *[a_135897], **kwargs_135898)
    
    # Assigning a type to the variable 'call_assignment_134305' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'call_assignment_134305', _makearray_call_result_135899)
    
    # Assigning a Call to a Name (line 982):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135903 = {}
    # Getting the type of 'call_assignment_134305' (line 982)
    call_assignment_134305_135900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'call_assignment_134305', False)
    # Obtaining the member '__getitem__' of a type (line 982)
    getitem___135901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 4), call_assignment_134305_135900, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135904 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135901, *[int_135902], **kwargs_135903)
    
    # Assigning a type to the variable 'call_assignment_134306' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'call_assignment_134306', getitem___call_result_135904)
    
    # Assigning a Name to a Name (line 982):
    # Getting the type of 'call_assignment_134306' (line 982)
    call_assignment_134306_135905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'call_assignment_134306')
    # Assigning a type to the variable 'a' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'a', call_assignment_134306_135905)
    
    # Assigning a Call to a Name (line 982):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135909 = {}
    # Getting the type of 'call_assignment_134305' (line 982)
    call_assignment_134305_135906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'call_assignment_134305', False)
    # Obtaining the member '__getitem__' of a type (line 982)
    getitem___135907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 4), call_assignment_134305_135906, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135910 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135907, *[int_135908], **kwargs_135909)
    
    # Assigning a type to the variable 'call_assignment_134307' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'call_assignment_134307', getitem___call_result_135910)
    
    # Assigning a Name to a Name (line 982):
    # Getting the type of 'call_assignment_134307' (line 982)
    call_assignment_134307_135911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'call_assignment_134307')
    # Assigning a type to the variable 'wrap' (line 982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 7), 'wrap', call_assignment_134307_135911)
    
    # Call to _assertNoEmpty2d(...): (line 983)
    # Processing the call arguments (line 983)
    # Getting the type of 'a' (line 983)
    a_135913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 21), 'a', False)
    # Processing the call keyword arguments (line 983)
    kwargs_135914 = {}
    # Getting the type of '_assertNoEmpty2d' (line 983)
    _assertNoEmpty2d_135912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 4), '_assertNoEmpty2d', False)
    # Calling _assertNoEmpty2d(args, kwargs) (line 983)
    _assertNoEmpty2d_call_result_135915 = invoke(stypy.reporting.localization.Localization(__file__, 983, 4), _assertNoEmpty2d_135912, *[a_135913], **kwargs_135914)
    
    
    # Call to _assertRankAtLeast2(...): (line 984)
    # Processing the call arguments (line 984)
    # Getting the type of 'a' (line 984)
    a_135917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 24), 'a', False)
    # Processing the call keyword arguments (line 984)
    kwargs_135918 = {}
    # Getting the type of '_assertRankAtLeast2' (line 984)
    _assertRankAtLeast2_135916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 984)
    _assertRankAtLeast2_call_result_135919 = invoke(stypy.reporting.localization.Localization(__file__, 984, 4), _assertRankAtLeast2_135916, *[a_135917], **kwargs_135918)
    
    
    # Call to _assertNdSquareness(...): (line 985)
    # Processing the call arguments (line 985)
    # Getting the type of 'a' (line 985)
    a_135921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 24), 'a', False)
    # Processing the call keyword arguments (line 985)
    kwargs_135922 = {}
    # Getting the type of '_assertNdSquareness' (line 985)
    _assertNdSquareness_135920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 985)
    _assertNdSquareness_call_result_135923 = invoke(stypy.reporting.localization.Localization(__file__, 985, 4), _assertNdSquareness_135920, *[a_135921], **kwargs_135922)
    
    
    # Assigning a Call to a Tuple (line 986):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 986)
    # Processing the call arguments (line 986)
    # Getting the type of 'a' (line 986)
    a_135925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 30), 'a', False)
    # Processing the call keyword arguments (line 986)
    kwargs_135926 = {}
    # Getting the type of '_commonType' (line 986)
    _commonType_135924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 986)
    _commonType_call_result_135927 = invoke(stypy.reporting.localization.Localization(__file__, 986, 18), _commonType_135924, *[a_135925], **kwargs_135926)
    
    # Assigning a type to the variable 'call_assignment_134308' (line 986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'call_assignment_134308', _commonType_call_result_135927)
    
    # Assigning a Call to a Name (line 986):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135931 = {}
    # Getting the type of 'call_assignment_134308' (line 986)
    call_assignment_134308_135928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'call_assignment_134308', False)
    # Obtaining the member '__getitem__' of a type (line 986)
    getitem___135929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 4), call_assignment_134308_135928, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135932 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135929, *[int_135930], **kwargs_135931)
    
    # Assigning a type to the variable 'call_assignment_134309' (line 986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'call_assignment_134309', getitem___call_result_135932)
    
    # Assigning a Name to a Name (line 986):
    # Getting the type of 'call_assignment_134309' (line 986)
    call_assignment_134309_135933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'call_assignment_134309')
    # Assigning a type to the variable 't' (line 986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 't', call_assignment_134309_135933)
    
    # Assigning a Call to a Name (line 986):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135937 = {}
    # Getting the type of 'call_assignment_134308' (line 986)
    call_assignment_134308_135934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'call_assignment_134308', False)
    # Obtaining the member '__getitem__' of a type (line 986)
    getitem___135935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 4), call_assignment_134308_135934, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135938 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135935, *[int_135936], **kwargs_135937)
    
    # Assigning a type to the variable 'call_assignment_134310' (line 986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'call_assignment_134310', getitem___call_result_135938)
    
    # Assigning a Name to a Name (line 986):
    # Getting the type of 'call_assignment_134310' (line 986)
    call_assignment_134310_135939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 4), 'call_assignment_134310')
    # Assigning a type to the variable 'result_t' (line 986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 7), 'result_t', call_assignment_134310_135939)
    
    # Assigning a IfExp to a Name (line 987):
    
    # Assigning a IfExp to a Name (line 987):
    
    
    # Call to isComplexType(...): (line 987)
    # Processing the call arguments (line 987)
    # Getting the type of 't' (line 987)
    t_135941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 40), 't', False)
    # Processing the call keyword arguments (line 987)
    kwargs_135942 = {}
    # Getting the type of 'isComplexType' (line 987)
    isComplexType_135940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 26), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 987)
    isComplexType_call_result_135943 = invoke(stypy.reporting.localization.Localization(__file__, 987, 26), isComplexType_135940, *[t_135941], **kwargs_135942)
    
    # Testing the type of an if expression (line 987)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 987, 16), isComplexType_call_result_135943)
    # SSA begins for if expression (line 987)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_135944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 16), 'str', 'D->d')
    # SSA branch for the else part of an if expression (line 987)
    module_type_store.open_ssa_branch('if expression else')
    str_135945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 48), 'str', 'd->d')
    # SSA join for if expression (line 987)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_135946 = union_type.UnionType.add(str_135944, str_135945)
    
    # Assigning a type to the variable 'signature' (line 987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 4), 'signature', if_exp_135946)
    
    # Assigning a Call to a Name (line 988):
    
    # Assigning a Call to a Name (line 988):
    
    # Call to gufunc(...): (line 988)
    # Processing the call arguments (line 988)
    # Getting the type of 'a' (line 988)
    a_135948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 15), 'a', False)
    # Processing the call keyword arguments (line 988)
    # Getting the type of 'signature' (line 988)
    signature_135949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 28), 'signature', False)
    keyword_135950 = signature_135949
    # Getting the type of 'extobj' (line 988)
    extobj_135951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 46), 'extobj', False)
    keyword_135952 = extobj_135951
    kwargs_135953 = {'extobj': keyword_135952, 'signature': keyword_135950}
    # Getting the type of 'gufunc' (line 988)
    gufunc_135947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'gufunc', False)
    # Calling gufunc(args, kwargs) (line 988)
    gufunc_call_result_135954 = invoke(stypy.reporting.localization.Localization(__file__, 988, 8), gufunc_135947, *[a_135948], **kwargs_135953)
    
    # Assigning a type to the variable 'w' (line 988)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 4), 'w', gufunc_call_result_135954)
    
    # Call to astype(...): (line 989)
    # Processing the call arguments (line 989)
    
    # Call to _realType(...): (line 989)
    # Processing the call arguments (line 989)
    # Getting the type of 'result_t' (line 989)
    result_t_135958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 30), 'result_t', False)
    # Processing the call keyword arguments (line 989)
    kwargs_135959 = {}
    # Getting the type of '_realType' (line 989)
    _realType_135957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 20), '_realType', False)
    # Calling _realType(args, kwargs) (line 989)
    _realType_call_result_135960 = invoke(stypy.reporting.localization.Localization(__file__, 989, 20), _realType_135957, *[result_t_135958], **kwargs_135959)
    
    # Processing the call keyword arguments (line 989)
    # Getting the type of 'False' (line 989)
    False_135961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 46), 'False', False)
    keyword_135962 = False_135961
    kwargs_135963 = {'copy': keyword_135962}
    # Getting the type of 'w' (line 989)
    w_135955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 11), 'w', False)
    # Obtaining the member 'astype' of a type (line 989)
    astype_135956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 11), w_135955, 'astype')
    # Calling astype(args, kwargs) (line 989)
    astype_call_result_135964 = invoke(stypy.reporting.localization.Localization(__file__, 989, 11), astype_135956, *[_realType_call_result_135960], **kwargs_135963)
    
    # Assigning a type to the variable 'stypy_return_type' (line 989)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 4), 'stypy_return_type', astype_call_result_135964)
    
    # ################# End of 'eigvalsh(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'eigvalsh' in the type store
    # Getting the type of 'stypy_return_type' (line 920)
    stypy_return_type_135965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_135965)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'eigvalsh'
    return stypy_return_type_135965

# Assigning a type to the variable 'eigvalsh' (line 920)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 0), 'eigvalsh', eigvalsh)

@norecursion
def _convertarray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_convertarray'
    module_type_store = module_type_store.open_function_context('_convertarray', 991, 0, False)
    
    # Passed parameters checking function
    _convertarray.stypy_localization = localization
    _convertarray.stypy_type_of_self = None
    _convertarray.stypy_type_store = module_type_store
    _convertarray.stypy_function_name = '_convertarray'
    _convertarray.stypy_param_names_list = ['a']
    _convertarray.stypy_varargs_param_name = None
    _convertarray.stypy_kwargs_param_name = None
    _convertarray.stypy_call_defaults = defaults
    _convertarray.stypy_call_varargs = varargs
    _convertarray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_convertarray', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_convertarray', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_convertarray(...)' code ##################

    
    # Assigning a Call to a Tuple (line 992):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 992)
    # Processing the call arguments (line 992)
    # Getting the type of 'a' (line 992)
    a_135967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 30), 'a', False)
    # Processing the call keyword arguments (line 992)
    kwargs_135968 = {}
    # Getting the type of '_commonType' (line 992)
    _commonType_135966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 992)
    _commonType_call_result_135969 = invoke(stypy.reporting.localization.Localization(__file__, 992, 18), _commonType_135966, *[a_135967], **kwargs_135968)
    
    # Assigning a type to the variable 'call_assignment_134311' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'call_assignment_134311', _commonType_call_result_135969)
    
    # Assigning a Call to a Name (line 992):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135973 = {}
    # Getting the type of 'call_assignment_134311' (line 992)
    call_assignment_134311_135970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'call_assignment_134311', False)
    # Obtaining the member '__getitem__' of a type (line 992)
    getitem___135971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 4), call_assignment_134311_135970, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135974 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135971, *[int_135972], **kwargs_135973)
    
    # Assigning a type to the variable 'call_assignment_134312' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'call_assignment_134312', getitem___call_result_135974)
    
    # Assigning a Name to a Name (line 992):
    # Getting the type of 'call_assignment_134312' (line 992)
    call_assignment_134312_135975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'call_assignment_134312')
    # Assigning a type to the variable 't' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 't', call_assignment_134312_135975)
    
    # Assigning a Call to a Name (line 992):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_135978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 4), 'int')
    # Processing the call keyword arguments
    kwargs_135979 = {}
    # Getting the type of 'call_assignment_134311' (line 992)
    call_assignment_134311_135976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'call_assignment_134311', False)
    # Obtaining the member '__getitem__' of a type (line 992)
    getitem___135977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 4), call_assignment_134311_135976, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_135980 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___135977, *[int_135978], **kwargs_135979)
    
    # Assigning a type to the variable 'call_assignment_134313' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'call_assignment_134313', getitem___call_result_135980)
    
    # Assigning a Name to a Name (line 992):
    # Getting the type of 'call_assignment_134313' (line 992)
    call_assignment_134313_135981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 4), 'call_assignment_134313')
    # Assigning a type to the variable 'result_t' (line 992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 7), 'result_t', call_assignment_134313_135981)
    
    # Assigning a Call to a Name (line 993):
    
    # Assigning a Call to a Name (line 993):
    
    # Call to _fastCT(...): (line 993)
    # Processing the call arguments (line 993)
    
    # Call to astype(...): (line 993)
    # Processing the call arguments (line 993)
    # Getting the type of 't' (line 993)
    t_135985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 25), 't', False)
    # Processing the call keyword arguments (line 993)
    kwargs_135986 = {}
    # Getting the type of 'a' (line 993)
    a_135983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 16), 'a', False)
    # Obtaining the member 'astype' of a type (line 993)
    astype_135984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 16), a_135983, 'astype')
    # Calling astype(args, kwargs) (line 993)
    astype_call_result_135987 = invoke(stypy.reporting.localization.Localization(__file__, 993, 16), astype_135984, *[t_135985], **kwargs_135986)
    
    # Processing the call keyword arguments (line 993)
    kwargs_135988 = {}
    # Getting the type of '_fastCT' (line 993)
    _fastCT_135982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), '_fastCT', False)
    # Calling _fastCT(args, kwargs) (line 993)
    _fastCT_call_result_135989 = invoke(stypy.reporting.localization.Localization(__file__, 993, 8), _fastCT_135982, *[astype_call_result_135987], **kwargs_135988)
    
    # Assigning a type to the variable 'a' (line 993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 4), 'a', _fastCT_call_result_135989)
    
    # Obtaining an instance of the builtin type 'tuple' (line 994)
    tuple_135990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 994)
    # Adding element type (line 994)
    # Getting the type of 'a' (line 994)
    a_135991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 11), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 994, 11), tuple_135990, a_135991)
    # Adding element type (line 994)
    # Getting the type of 't' (line 994)
    t_135992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 14), 't')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 994, 11), tuple_135990, t_135992)
    # Adding element type (line 994)
    # Getting the type of 'result_t' (line 994)
    result_t_135993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 17), 'result_t')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 994, 11), tuple_135990, result_t_135993)
    
    # Assigning a type to the variable 'stypy_return_type' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'stypy_return_type', tuple_135990)
    
    # ################# End of '_convertarray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_convertarray' in the type store
    # Getting the type of 'stypy_return_type' (line 991)
    stypy_return_type_135994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_135994)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_convertarray'
    return stypy_return_type_135994

# Assigning a type to the variable '_convertarray' (line 991)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 0), '_convertarray', _convertarray)

@norecursion
def eig(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'eig'
    module_type_store = module_type_store.open_function_context('eig', 1000, 0, False)
    
    # Passed parameters checking function
    eig.stypy_localization = localization
    eig.stypy_type_of_self = None
    eig.stypy_type_store = module_type_store
    eig.stypy_function_name = 'eig'
    eig.stypy_param_names_list = ['a']
    eig.stypy_varargs_param_name = None
    eig.stypy_kwargs_param_name = None
    eig.stypy_call_defaults = defaults
    eig.stypy_call_varargs = varargs
    eig.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'eig', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'eig', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'eig(...)' code ##################

    str_135995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, (-1)), 'str', '\n    Compute the eigenvalues and right eigenvectors of a square array.\n\n    Parameters\n    ----------\n    a : (..., M, M) array\n        Matrices for which the eigenvalues and right eigenvectors will\n        be computed\n\n    Returns\n    -------\n    w : (..., M) array\n        The eigenvalues, each repeated according to its multiplicity.\n        The eigenvalues are not necessarily ordered. The resulting\n        array will be of complex type, unless the imaginary part is\n        zero in which case it will be cast to a real type. When `a`\n        is real the resulting eigenvalues will be real (0 imaginary\n        part) or occur in conjugate pairs\n\n    v : (..., M, M) array\n        The normalized (unit "length") eigenvectors, such that the\n        column ``v[:,i]`` is the eigenvector corresponding to the\n        eigenvalue ``w[i]``.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eigvals : eigenvalues of a non-symmetric array.\n\n    eigh : eigenvalues and eigenvectors of a symmetric or Hermitian\n           (conjugate symmetric) array.\n\n    eigvalsh : eigenvalues of a symmetric or Hermitian (conjugate symmetric)\n               array.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    This is implemented using the _geev LAPACK routines which compute\n    the eigenvalues and eigenvectors of general square arrays.\n\n    The number `w` is an eigenvalue of `a` if there exists a vector\n    `v` such that ``dot(a,v) = w * v``. Thus, the arrays `a`, `w`, and\n    `v` satisfy the equations ``dot(a[:,:], v[:,i]) = w[i] * v[:,i]``\n    for :math:`i \\in \\{0,...,M-1\\}`.\n\n    The array `v` of eigenvectors may not be of maximum rank, that is, some\n    of the columns may be linearly dependent, although round-off error may\n    obscure that fact. If the eigenvalues are all different, then theoretically\n    the eigenvectors are linearly independent. Likewise, the (complex-valued)\n    matrix of eigenvectors `v` is unitary if the matrix `a` is normal, i.e.,\n    if ``dot(a, a.H) = dot(a.H, a)``, where `a.H` denotes the conjugate\n    transpose of `a`.\n\n    Finally, it is emphasized that `v` consists of the *right* (as in\n    right-hand side) eigenvectors of `a`.  A vector `y` satisfying\n    ``dot(y.T, a) = z * y.T`` for some number `z` is called a *left*\n    eigenvector of `a`, and, in general, the left and right eigenvectors\n    of a matrix are not necessarily the (perhaps conjugate) transposes\n    of each other.\n\n    References\n    ----------\n    G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando, FL,\n    Academic Press, Inc., 1980, Various pp.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n\n    (Almost) trivial example with real e-values and e-vectors.\n\n    >>> w, v = LA.eig(np.diag((1, 2, 3)))\n    >>> w; v\n    array([ 1.,  2.,  3.])\n    array([[ 1.,  0.,  0.],\n           [ 0.,  1.,  0.],\n           [ 0.,  0.,  1.]])\n\n    Real matrix possessing complex e-values and e-vectors; note that the\n    e-values are complex conjugates of each other.\n\n    >>> w, v = LA.eig(np.array([[1, -1], [1, 1]]))\n    >>> w; v\n    array([ 1. + 1.j,  1. - 1.j])\n    array([[ 0.70710678+0.j        ,  0.70710678+0.j        ],\n           [ 0.00000000-0.70710678j,  0.00000000+0.70710678j]])\n\n    Complex-valued matrix with real e-values (but complex-valued e-vectors);\n    note that a.conj().T = a, i.e., a is Hermitian.\n\n    >>> a = np.array([[1, 1j], [-1j, 1]])\n    >>> w, v = LA.eig(a)\n    >>> w; v\n    array([  2.00000000e+00+0.j,   5.98651912e-36+0.j]) # i.e., {2, 0}\n    array([[ 0.00000000+0.70710678j,  0.70710678+0.j        ],\n           [ 0.70710678+0.j        ,  0.00000000+0.70710678j]])\n\n    Be careful about round-off error!\n\n    >>> a = np.array([[1 + 1e-9, 0], [0, 1 - 1e-9]])\n    >>> # Theor. e-values are 1 +/- 1e-9\n    >>> w, v = LA.eig(a)\n    >>> w; v\n    array([ 1.,  1.])\n    array([[ 1.,  0.],\n           [ 0.,  1.]])\n\n    ')
    
    # Assigning a Call to a Tuple (line 1119):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 1119)
    # Processing the call arguments (line 1119)
    # Getting the type of 'a' (line 1119)
    a_135997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 25), 'a', False)
    # Processing the call keyword arguments (line 1119)
    kwargs_135998 = {}
    # Getting the type of '_makearray' (line 1119)
    _makearray_135996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 1119)
    _makearray_call_result_135999 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 14), _makearray_135996, *[a_135997], **kwargs_135998)
    
    # Assigning a type to the variable 'call_assignment_134314' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'call_assignment_134314', _makearray_call_result_135999)
    
    # Assigning a Call to a Name (line 1119):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136003 = {}
    # Getting the type of 'call_assignment_134314' (line 1119)
    call_assignment_134314_136000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'call_assignment_134314', False)
    # Obtaining the member '__getitem__' of a type (line 1119)
    getitem___136001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 4), call_assignment_134314_136000, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136004 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136001, *[int_136002], **kwargs_136003)
    
    # Assigning a type to the variable 'call_assignment_134315' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'call_assignment_134315', getitem___call_result_136004)
    
    # Assigning a Name to a Name (line 1119):
    # Getting the type of 'call_assignment_134315' (line 1119)
    call_assignment_134315_136005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'call_assignment_134315')
    # Assigning a type to the variable 'a' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'a', call_assignment_134315_136005)
    
    # Assigning a Call to a Name (line 1119):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136009 = {}
    # Getting the type of 'call_assignment_134314' (line 1119)
    call_assignment_134314_136006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'call_assignment_134314', False)
    # Obtaining the member '__getitem__' of a type (line 1119)
    getitem___136007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 4), call_assignment_134314_136006, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136010 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136007, *[int_136008], **kwargs_136009)
    
    # Assigning a type to the variable 'call_assignment_134316' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'call_assignment_134316', getitem___call_result_136010)
    
    # Assigning a Name to a Name (line 1119):
    # Getting the type of 'call_assignment_134316' (line 1119)
    call_assignment_134316_136011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'call_assignment_134316')
    # Assigning a type to the variable 'wrap' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 7), 'wrap', call_assignment_134316_136011)
    
    # Call to _assertRankAtLeast2(...): (line 1120)
    # Processing the call arguments (line 1120)
    # Getting the type of 'a' (line 1120)
    a_136013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 24), 'a', False)
    # Processing the call keyword arguments (line 1120)
    kwargs_136014 = {}
    # Getting the type of '_assertRankAtLeast2' (line 1120)
    _assertRankAtLeast2_136012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 1120)
    _assertRankAtLeast2_call_result_136015 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 4), _assertRankAtLeast2_136012, *[a_136013], **kwargs_136014)
    
    
    # Call to _assertNdSquareness(...): (line 1121)
    # Processing the call arguments (line 1121)
    # Getting the type of 'a' (line 1121)
    a_136017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 24), 'a', False)
    # Processing the call keyword arguments (line 1121)
    kwargs_136018 = {}
    # Getting the type of '_assertNdSquareness' (line 1121)
    _assertNdSquareness_136016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 1121)
    _assertNdSquareness_call_result_136019 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 4), _assertNdSquareness_136016, *[a_136017], **kwargs_136018)
    
    
    # Call to _assertFinite(...): (line 1122)
    # Processing the call arguments (line 1122)
    # Getting the type of 'a' (line 1122)
    a_136021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 18), 'a', False)
    # Processing the call keyword arguments (line 1122)
    kwargs_136022 = {}
    # Getting the type of '_assertFinite' (line 1122)
    _assertFinite_136020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 4), '_assertFinite', False)
    # Calling _assertFinite(args, kwargs) (line 1122)
    _assertFinite_call_result_136023 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 4), _assertFinite_136020, *[a_136021], **kwargs_136022)
    
    
    # Assigning a Call to a Tuple (line 1123):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 1123)
    # Processing the call arguments (line 1123)
    # Getting the type of 'a' (line 1123)
    a_136025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 30), 'a', False)
    # Processing the call keyword arguments (line 1123)
    kwargs_136026 = {}
    # Getting the type of '_commonType' (line 1123)
    _commonType_136024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 1123)
    _commonType_call_result_136027 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 18), _commonType_136024, *[a_136025], **kwargs_136026)
    
    # Assigning a type to the variable 'call_assignment_134317' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'call_assignment_134317', _commonType_call_result_136027)
    
    # Assigning a Call to a Name (line 1123):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136031 = {}
    # Getting the type of 'call_assignment_134317' (line 1123)
    call_assignment_134317_136028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'call_assignment_134317', False)
    # Obtaining the member '__getitem__' of a type (line 1123)
    getitem___136029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 4), call_assignment_134317_136028, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136032 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136029, *[int_136030], **kwargs_136031)
    
    # Assigning a type to the variable 'call_assignment_134318' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'call_assignment_134318', getitem___call_result_136032)
    
    # Assigning a Name to a Name (line 1123):
    # Getting the type of 'call_assignment_134318' (line 1123)
    call_assignment_134318_136033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'call_assignment_134318')
    # Assigning a type to the variable 't' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 't', call_assignment_134318_136033)
    
    # Assigning a Call to a Name (line 1123):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136037 = {}
    # Getting the type of 'call_assignment_134317' (line 1123)
    call_assignment_134317_136034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'call_assignment_134317', False)
    # Obtaining the member '__getitem__' of a type (line 1123)
    getitem___136035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 4), call_assignment_134317_136034, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136038 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136035, *[int_136036], **kwargs_136037)
    
    # Assigning a type to the variable 'call_assignment_134319' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'call_assignment_134319', getitem___call_result_136038)
    
    # Assigning a Name to a Name (line 1123):
    # Getting the type of 'call_assignment_134319' (line 1123)
    call_assignment_134319_136039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'call_assignment_134319')
    # Assigning a type to the variable 'result_t' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 7), 'result_t', call_assignment_134319_136039)
    
    # Assigning a Call to a Name (line 1125):
    
    # Assigning a Call to a Name (line 1125):
    
    # Call to get_linalg_error_extobj(...): (line 1125)
    # Processing the call arguments (line 1125)
    # Getting the type of '_raise_linalgerror_eigenvalues_nonconvergence' (line 1126)
    _raise_linalgerror_eigenvalues_nonconvergence_136041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), '_raise_linalgerror_eigenvalues_nonconvergence', False)
    # Processing the call keyword arguments (line 1125)
    kwargs_136042 = {}
    # Getting the type of 'get_linalg_error_extobj' (line 1125)
    get_linalg_error_extobj_136040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 13), 'get_linalg_error_extobj', False)
    # Calling get_linalg_error_extobj(args, kwargs) (line 1125)
    get_linalg_error_extobj_call_result_136043 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 13), get_linalg_error_extobj_136040, *[_raise_linalgerror_eigenvalues_nonconvergence_136041], **kwargs_136042)
    
    # Assigning a type to the variable 'extobj' (line 1125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 4), 'extobj', get_linalg_error_extobj_call_result_136043)
    
    # Assigning a IfExp to a Name (line 1127):
    
    # Assigning a IfExp to a Name (line 1127):
    
    
    # Call to isComplexType(...): (line 1127)
    # Processing the call arguments (line 1127)
    # Getting the type of 't' (line 1127)
    t_136045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 41), 't', False)
    # Processing the call keyword arguments (line 1127)
    kwargs_136046 = {}
    # Getting the type of 'isComplexType' (line 1127)
    isComplexType_136044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 27), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1127)
    isComplexType_call_result_136047 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 27), isComplexType_136044, *[t_136045], **kwargs_136046)
    
    # Testing the type of an if expression (line 1127)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1127, 16), isComplexType_call_result_136047)
    # SSA begins for if expression (line 1127)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_136048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 16), 'str', 'D->DD')
    # SSA branch for the else part of an if expression (line 1127)
    module_type_store.open_ssa_branch('if expression else')
    str_136049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 49), 'str', 'd->DD')
    # SSA join for if expression (line 1127)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_136050 = union_type.UnionType.add(str_136048, str_136049)
    
    # Assigning a type to the variable 'signature' (line 1127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 4), 'signature', if_exp_136050)
    
    # Assigning a Call to a Tuple (line 1128):
    
    # Assigning a Call to a Name:
    
    # Call to eig(...): (line 1128)
    # Processing the call arguments (line 1128)
    # Getting the type of 'a' (line 1128)
    a_136053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 30), 'a', False)
    # Processing the call keyword arguments (line 1128)
    # Getting the type of 'signature' (line 1128)
    signature_136054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 43), 'signature', False)
    keyword_136055 = signature_136054
    # Getting the type of 'extobj' (line 1128)
    extobj_136056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 61), 'extobj', False)
    keyword_136057 = extobj_136056
    kwargs_136058 = {'extobj': keyword_136057, 'signature': keyword_136055}
    # Getting the type of '_umath_linalg' (line 1128)
    _umath_linalg_136051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 12), '_umath_linalg', False)
    # Obtaining the member 'eig' of a type (line 1128)
    eig_136052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 12), _umath_linalg_136051, 'eig')
    # Calling eig(args, kwargs) (line 1128)
    eig_call_result_136059 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 12), eig_136052, *[a_136053], **kwargs_136058)
    
    # Assigning a type to the variable 'call_assignment_134320' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'call_assignment_134320', eig_call_result_136059)
    
    # Assigning a Call to a Name (line 1128):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136063 = {}
    # Getting the type of 'call_assignment_134320' (line 1128)
    call_assignment_134320_136060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'call_assignment_134320', False)
    # Obtaining the member '__getitem__' of a type (line 1128)
    getitem___136061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 4), call_assignment_134320_136060, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136064 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136061, *[int_136062], **kwargs_136063)
    
    # Assigning a type to the variable 'call_assignment_134321' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'call_assignment_134321', getitem___call_result_136064)
    
    # Assigning a Name to a Name (line 1128):
    # Getting the type of 'call_assignment_134321' (line 1128)
    call_assignment_134321_136065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'call_assignment_134321')
    # Assigning a type to the variable 'w' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'w', call_assignment_134321_136065)
    
    # Assigning a Call to a Name (line 1128):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136069 = {}
    # Getting the type of 'call_assignment_134320' (line 1128)
    call_assignment_134320_136066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'call_assignment_134320', False)
    # Obtaining the member '__getitem__' of a type (line 1128)
    getitem___136067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 4), call_assignment_134320_136066, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136070 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136067, *[int_136068], **kwargs_136069)
    
    # Assigning a type to the variable 'call_assignment_134322' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'call_assignment_134322', getitem___call_result_136070)
    
    # Assigning a Name to a Name (line 1128):
    # Getting the type of 'call_assignment_134322' (line 1128)
    call_assignment_134322_136071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'call_assignment_134322')
    # Assigning a type to the variable 'vt' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 7), 'vt', call_assignment_134322_136071)
    
    
    # Evaluating a boolean operation
    
    
    # Call to isComplexType(...): (line 1130)
    # Processing the call arguments (line 1130)
    # Getting the type of 't' (line 1130)
    t_136073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 25), 't', False)
    # Processing the call keyword arguments (line 1130)
    kwargs_136074 = {}
    # Getting the type of 'isComplexType' (line 1130)
    isComplexType_136072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 11), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1130)
    isComplexType_call_result_136075 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 11), isComplexType_136072, *[t_136073], **kwargs_136074)
    
    # Applying the 'not' unary operator (line 1130)
    result_not__136076 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 7), 'not', isComplexType_call_result_136075)
    
    
    # Call to all(...): (line 1130)
    # Processing the call arguments (line 1130)
    
    # Getting the type of 'w' (line 1130)
    w_136078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 36), 'w', False)
    # Obtaining the member 'imag' of a type (line 1130)
    imag_136079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 36), w_136078, 'imag')
    float_136080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 46), 'float')
    # Applying the binary operator '==' (line 1130)
    result_eq_136081 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 36), '==', imag_136079, float_136080)
    
    # Processing the call keyword arguments (line 1130)
    kwargs_136082 = {}
    # Getting the type of 'all' (line 1130)
    all_136077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 32), 'all', False)
    # Calling all(args, kwargs) (line 1130)
    all_call_result_136083 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 32), all_136077, *[result_eq_136081], **kwargs_136082)
    
    # Applying the binary operator 'and' (line 1130)
    result_and_keyword_136084 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 7), 'and', result_not__136076, all_call_result_136083)
    
    # Testing the type of an if condition (line 1130)
    if_condition_136085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1130, 4), result_and_keyword_136084)
    # Assigning a type to the variable 'if_condition_136085' (line 1130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 4), 'if_condition_136085', if_condition_136085)
    # SSA begins for if statement (line 1130)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1131):
    
    # Assigning a Attribute to a Name (line 1131):
    # Getting the type of 'w' (line 1131)
    w_136086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 12), 'w')
    # Obtaining the member 'real' of a type (line 1131)
    real_136087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 12), w_136086, 'real')
    # Assigning a type to the variable 'w' (line 1131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'w', real_136087)
    
    # Assigning a Attribute to a Name (line 1132):
    
    # Assigning a Attribute to a Name (line 1132):
    # Getting the type of 'vt' (line 1132)
    vt_136088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 13), 'vt')
    # Obtaining the member 'real' of a type (line 1132)
    real_136089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 13), vt_136088, 'real')
    # Assigning a type to the variable 'vt' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'vt', real_136089)
    
    # Assigning a Call to a Name (line 1133):
    
    # Assigning a Call to a Name (line 1133):
    
    # Call to _realType(...): (line 1133)
    # Processing the call arguments (line 1133)
    # Getting the type of 'result_t' (line 1133)
    result_t_136091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 29), 'result_t', False)
    # Processing the call keyword arguments (line 1133)
    kwargs_136092 = {}
    # Getting the type of '_realType' (line 1133)
    _realType_136090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 19), '_realType', False)
    # Calling _realType(args, kwargs) (line 1133)
    _realType_call_result_136093 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 19), _realType_136090, *[result_t_136091], **kwargs_136092)
    
    # Assigning a type to the variable 'result_t' (line 1133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'result_t', _realType_call_result_136093)
    # SSA branch for the else part of an if statement (line 1130)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1135):
    
    # Assigning a Call to a Name (line 1135):
    
    # Call to _complexType(...): (line 1135)
    # Processing the call arguments (line 1135)
    # Getting the type of 'result_t' (line 1135)
    result_t_136095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 32), 'result_t', False)
    # Processing the call keyword arguments (line 1135)
    kwargs_136096 = {}
    # Getting the type of '_complexType' (line 1135)
    _complexType_136094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 19), '_complexType', False)
    # Calling _complexType(args, kwargs) (line 1135)
    _complexType_call_result_136097 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 19), _complexType_136094, *[result_t_136095], **kwargs_136096)
    
    # Assigning a type to the variable 'result_t' (line 1135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 8), 'result_t', _complexType_call_result_136097)
    # SSA join for if statement (line 1130)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1137):
    
    # Assigning a Call to a Name (line 1137):
    
    # Call to astype(...): (line 1137)
    # Processing the call arguments (line 1137)
    # Getting the type of 'result_t' (line 1137)
    result_t_136100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 19), 'result_t', False)
    # Processing the call keyword arguments (line 1137)
    # Getting the type of 'False' (line 1137)
    False_136101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 34), 'False', False)
    keyword_136102 = False_136101
    kwargs_136103 = {'copy': keyword_136102}
    # Getting the type of 'vt' (line 1137)
    vt_136098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 9), 'vt', False)
    # Obtaining the member 'astype' of a type (line 1137)
    astype_136099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1137, 9), vt_136098, 'astype')
    # Calling astype(args, kwargs) (line 1137)
    astype_call_result_136104 = invoke(stypy.reporting.localization.Localization(__file__, 1137, 9), astype_136099, *[result_t_136100], **kwargs_136103)
    
    # Assigning a type to the variable 'vt' (line 1137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'vt', astype_call_result_136104)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1138)
    tuple_136105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1138)
    # Adding element type (line 1138)
    
    # Call to astype(...): (line 1138)
    # Processing the call arguments (line 1138)
    # Getting the type of 'result_t' (line 1138)
    result_t_136108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 20), 'result_t', False)
    # Processing the call keyword arguments (line 1138)
    # Getting the type of 'False' (line 1138)
    False_136109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 35), 'False', False)
    keyword_136110 = False_136109
    kwargs_136111 = {'copy': keyword_136110}
    # Getting the type of 'w' (line 1138)
    w_136106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 11), 'w', False)
    # Obtaining the member 'astype' of a type (line 1138)
    astype_136107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 11), w_136106, 'astype')
    # Calling astype(args, kwargs) (line 1138)
    astype_call_result_136112 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 11), astype_136107, *[result_t_136108], **kwargs_136111)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 11), tuple_136105, astype_call_result_136112)
    # Adding element type (line 1138)
    
    # Call to wrap(...): (line 1138)
    # Processing the call arguments (line 1138)
    # Getting the type of 'vt' (line 1138)
    vt_136114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 48), 'vt', False)
    # Processing the call keyword arguments (line 1138)
    kwargs_136115 = {}
    # Getting the type of 'wrap' (line 1138)
    wrap_136113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 43), 'wrap', False)
    # Calling wrap(args, kwargs) (line 1138)
    wrap_call_result_136116 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 43), wrap_136113, *[vt_136114], **kwargs_136115)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 11), tuple_136105, wrap_call_result_136116)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 4), 'stypy_return_type', tuple_136105)
    
    # ################# End of 'eig(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'eig' in the type store
    # Getting the type of 'stypy_return_type' (line 1000)
    stypy_return_type_136117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_136117)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'eig'
    return stypy_return_type_136117

# Assigning a type to the variable 'eig' (line 1000)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 0), 'eig', eig)

@norecursion
def eigh(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_136118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 17), 'str', 'L')
    defaults = [str_136118]
    # Create a new context for function 'eigh'
    module_type_store = module_type_store.open_function_context('eigh', 1141, 0, False)
    
    # Passed parameters checking function
    eigh.stypy_localization = localization
    eigh.stypy_type_of_self = None
    eigh.stypy_type_store = module_type_store
    eigh.stypy_function_name = 'eigh'
    eigh.stypy_param_names_list = ['a', 'UPLO']
    eigh.stypy_varargs_param_name = None
    eigh.stypy_kwargs_param_name = None
    eigh.stypy_call_defaults = defaults
    eigh.stypy_call_varargs = varargs
    eigh.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'eigh', ['a', 'UPLO'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'eigh', localization, ['a', 'UPLO'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'eigh(...)' code ##################

    str_136119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, (-1)), 'str', "\n    Return the eigenvalues and eigenvectors of a Hermitian or symmetric matrix.\n\n    Returns two objects, a 1-D array containing the eigenvalues of `a`, and\n    a 2-D square array or matrix (depending on the input type) of the\n    corresponding eigenvectors (in columns).\n\n    Parameters\n    ----------\n    a : (..., M, M) array\n        Hermitian/Symmetric matrices whose eigenvalues and\n        eigenvectors are to be computed.\n    UPLO : {'L', 'U'}, optional\n        Specifies whether the calculation is done with the lower triangular\n        part of `a` ('L', default) or the upper triangular part ('U').\n\n    Returns\n    -------\n    w : (..., M) ndarray\n        The eigenvalues in ascending order, each repeated according to\n        its multiplicity.\n    v : {(..., M, M) ndarray, (..., M, M) matrix}\n        The column ``v[:, i]`` is the normalized eigenvector corresponding\n        to the eigenvalue ``w[i]``.  Will return a matrix object if `a` is\n        a matrix object.\n\n    Raises\n    ------\n    LinAlgError\n        If the eigenvalue computation does not converge.\n\n    See Also\n    --------\n    eigvalsh : eigenvalues of symmetric or Hermitian arrays.\n    eig : eigenvalues and right eigenvectors for non-symmetric arrays.\n    eigvals : eigenvalues of non-symmetric arrays.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    The eigenvalues/eigenvectors are computed using LAPACK routines _syevd,\n    _heevd\n\n    The eigenvalues of real symmetric or complex Hermitian matrices are\n    always real. [1]_ The array `v` of (column) eigenvectors is unitary\n    and `a`, `w`, and `v` satisfy the equations\n    ``dot(a, v[:, i]) = w[i] * v[:, i]``.\n\n    References\n    ----------\n    .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n           FL, Academic Press, Inc., 1980, pg. 222.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.array([[1, -2j], [2j, 5]])\n    >>> a\n    array([[ 1.+0.j,  0.-2.j],\n           [ 0.+2.j,  5.+0.j]])\n    >>> w, v = LA.eigh(a)\n    >>> w; v\n    array([ 0.17157288,  5.82842712])\n    array([[-0.92387953+0.j        , -0.38268343+0.j        ],\n           [ 0.00000000+0.38268343j,  0.00000000-0.92387953j]])\n\n    >>> np.dot(a, v[:, 0]) - w[0] * v[:, 0] # verify 1st e-val/vec pair\n    array([2.77555756e-17 + 0.j, 0. + 1.38777878e-16j])\n    >>> np.dot(a, v[:, 1]) - w[1] * v[:, 1] # verify 2nd e-val/vec pair\n    array([ 0.+0.j,  0.+0.j])\n\n    >>> A = np.matrix(a) # what happens if input is a matrix object\n    >>> A\n    matrix([[ 1.+0.j,  0.-2.j],\n            [ 0.+2.j,  5.+0.j]])\n    >>> w, v = LA.eigh(A)\n    >>> w; v\n    array([ 0.17157288,  5.82842712])\n    matrix([[-0.92387953+0.j        , -0.38268343+0.j        ],\n            [ 0.00000000+0.38268343j,  0.00000000-0.92387953j]])\n\n    ")
    
    # Assigning a Call to a Name (line 1229):
    
    # Assigning a Call to a Name (line 1229):
    
    # Call to upper(...): (line 1229)
    # Processing the call keyword arguments (line 1229)
    kwargs_136122 = {}
    # Getting the type of 'UPLO' (line 1229)
    UPLO_136120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 11), 'UPLO', False)
    # Obtaining the member 'upper' of a type (line 1229)
    upper_136121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 11), UPLO_136120, 'upper')
    # Calling upper(args, kwargs) (line 1229)
    upper_call_result_136123 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 11), upper_136121, *[], **kwargs_136122)
    
    # Assigning a type to the variable 'UPLO' (line 1229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 4), 'UPLO', upper_call_result_136123)
    
    
    # Getting the type of 'UPLO' (line 1230)
    UPLO_136124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 7), 'UPLO')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1230)
    tuple_136125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1230)
    # Adding element type (line 1230)
    str_136126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 20), 'str', 'L')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1230, 20), tuple_136125, str_136126)
    # Adding element type (line 1230)
    str_136127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 25), 'str', 'U')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1230, 20), tuple_136125, str_136127)
    
    # Applying the binary operator 'notin' (line 1230)
    result_contains_136128 = python_operator(stypy.reporting.localization.Localization(__file__, 1230, 7), 'notin', UPLO_136124, tuple_136125)
    
    # Testing the type of an if condition (line 1230)
    if_condition_136129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1230, 4), result_contains_136128)
    # Assigning a type to the variable 'if_condition_136129' (line 1230)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 4), 'if_condition_136129', if_condition_136129)
    # SSA begins for if statement (line 1230)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1231)
    # Processing the call arguments (line 1231)
    str_136131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 25), 'str', "UPLO argument must be 'L' or 'U'")
    # Processing the call keyword arguments (line 1231)
    kwargs_136132 = {}
    # Getting the type of 'ValueError' (line 1231)
    ValueError_136130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1231)
    ValueError_call_result_136133 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 14), ValueError_136130, *[str_136131], **kwargs_136132)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1231, 8), ValueError_call_result_136133, 'raise parameter', BaseException)
    # SSA join for if statement (line 1230)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1233):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 1233)
    # Processing the call arguments (line 1233)
    # Getting the type of 'a' (line 1233)
    a_136135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 25), 'a', False)
    # Processing the call keyword arguments (line 1233)
    kwargs_136136 = {}
    # Getting the type of '_makearray' (line 1233)
    _makearray_136134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 1233)
    _makearray_call_result_136137 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 14), _makearray_136134, *[a_136135], **kwargs_136136)
    
    # Assigning a type to the variable 'call_assignment_134323' (line 1233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'call_assignment_134323', _makearray_call_result_136137)
    
    # Assigning a Call to a Name (line 1233):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1233, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136141 = {}
    # Getting the type of 'call_assignment_134323' (line 1233)
    call_assignment_134323_136138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'call_assignment_134323', False)
    # Obtaining the member '__getitem__' of a type (line 1233)
    getitem___136139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 4), call_assignment_134323_136138, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136142 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136139, *[int_136140], **kwargs_136141)
    
    # Assigning a type to the variable 'call_assignment_134324' (line 1233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'call_assignment_134324', getitem___call_result_136142)
    
    # Assigning a Name to a Name (line 1233):
    # Getting the type of 'call_assignment_134324' (line 1233)
    call_assignment_134324_136143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'call_assignment_134324')
    # Assigning a type to the variable 'a' (line 1233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'a', call_assignment_134324_136143)
    
    # Assigning a Call to a Name (line 1233):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1233, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136147 = {}
    # Getting the type of 'call_assignment_134323' (line 1233)
    call_assignment_134323_136144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'call_assignment_134323', False)
    # Obtaining the member '__getitem__' of a type (line 1233)
    getitem___136145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 4), call_assignment_134323_136144, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136148 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136145, *[int_136146], **kwargs_136147)
    
    # Assigning a type to the variable 'call_assignment_134325' (line 1233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'call_assignment_134325', getitem___call_result_136148)
    
    # Assigning a Name to a Name (line 1233):
    # Getting the type of 'call_assignment_134325' (line 1233)
    call_assignment_134325_136149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 4), 'call_assignment_134325')
    # Assigning a type to the variable 'wrap' (line 1233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 7), 'wrap', call_assignment_134325_136149)
    
    # Call to _assertRankAtLeast2(...): (line 1234)
    # Processing the call arguments (line 1234)
    # Getting the type of 'a' (line 1234)
    a_136151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 24), 'a', False)
    # Processing the call keyword arguments (line 1234)
    kwargs_136152 = {}
    # Getting the type of '_assertRankAtLeast2' (line 1234)
    _assertRankAtLeast2_136150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 1234)
    _assertRankAtLeast2_call_result_136153 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 4), _assertRankAtLeast2_136150, *[a_136151], **kwargs_136152)
    
    
    # Call to _assertNdSquareness(...): (line 1235)
    # Processing the call arguments (line 1235)
    # Getting the type of 'a' (line 1235)
    a_136155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 24), 'a', False)
    # Processing the call keyword arguments (line 1235)
    kwargs_136156 = {}
    # Getting the type of '_assertNdSquareness' (line 1235)
    _assertNdSquareness_136154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 1235)
    _assertNdSquareness_call_result_136157 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 4), _assertNdSquareness_136154, *[a_136155], **kwargs_136156)
    
    
    # Assigning a Call to a Tuple (line 1236):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 1236)
    # Processing the call arguments (line 1236)
    # Getting the type of 'a' (line 1236)
    a_136159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 30), 'a', False)
    # Processing the call keyword arguments (line 1236)
    kwargs_136160 = {}
    # Getting the type of '_commonType' (line 1236)
    _commonType_136158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 1236)
    _commonType_call_result_136161 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 18), _commonType_136158, *[a_136159], **kwargs_136160)
    
    # Assigning a type to the variable 'call_assignment_134326' (line 1236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'call_assignment_134326', _commonType_call_result_136161)
    
    # Assigning a Call to a Name (line 1236):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136165 = {}
    # Getting the type of 'call_assignment_134326' (line 1236)
    call_assignment_134326_136162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'call_assignment_134326', False)
    # Obtaining the member '__getitem__' of a type (line 1236)
    getitem___136163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 4), call_assignment_134326_136162, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136166 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136163, *[int_136164], **kwargs_136165)
    
    # Assigning a type to the variable 'call_assignment_134327' (line 1236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'call_assignment_134327', getitem___call_result_136166)
    
    # Assigning a Name to a Name (line 1236):
    # Getting the type of 'call_assignment_134327' (line 1236)
    call_assignment_134327_136167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'call_assignment_134327')
    # Assigning a type to the variable 't' (line 1236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 't', call_assignment_134327_136167)
    
    # Assigning a Call to a Name (line 1236):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136171 = {}
    # Getting the type of 'call_assignment_134326' (line 1236)
    call_assignment_134326_136168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'call_assignment_134326', False)
    # Obtaining the member '__getitem__' of a type (line 1236)
    getitem___136169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 4), call_assignment_134326_136168, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136172 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136169, *[int_136170], **kwargs_136171)
    
    # Assigning a type to the variable 'call_assignment_134328' (line 1236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'call_assignment_134328', getitem___call_result_136172)
    
    # Assigning a Name to a Name (line 1236):
    # Getting the type of 'call_assignment_134328' (line 1236)
    call_assignment_134328_136173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'call_assignment_134328')
    # Assigning a type to the variable 'result_t' (line 1236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 7), 'result_t', call_assignment_134328_136173)
    
    # Assigning a Call to a Name (line 1238):
    
    # Assigning a Call to a Name (line 1238):
    
    # Call to get_linalg_error_extobj(...): (line 1238)
    # Processing the call arguments (line 1238)
    # Getting the type of '_raise_linalgerror_eigenvalues_nonconvergence' (line 1239)
    _raise_linalgerror_eigenvalues_nonconvergence_136175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), '_raise_linalgerror_eigenvalues_nonconvergence', False)
    # Processing the call keyword arguments (line 1238)
    kwargs_136176 = {}
    # Getting the type of 'get_linalg_error_extobj' (line 1238)
    get_linalg_error_extobj_136174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 13), 'get_linalg_error_extobj', False)
    # Calling get_linalg_error_extobj(args, kwargs) (line 1238)
    get_linalg_error_extobj_call_result_136177 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 13), get_linalg_error_extobj_136174, *[_raise_linalgerror_eigenvalues_nonconvergence_136175], **kwargs_136176)
    
    # Assigning a type to the variable 'extobj' (line 1238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'extobj', get_linalg_error_extobj_call_result_136177)
    
    
    # Getting the type of 'UPLO' (line 1240)
    UPLO_136178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 7), 'UPLO')
    str_136179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 15), 'str', 'L')
    # Applying the binary operator '==' (line 1240)
    result_eq_136180 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 7), '==', UPLO_136178, str_136179)
    
    # Testing the type of an if condition (line 1240)
    if_condition_136181 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1240, 4), result_eq_136180)
    # Assigning a type to the variable 'if_condition_136181' (line 1240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 4), 'if_condition_136181', if_condition_136181)
    # SSA begins for if statement (line 1240)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1241):
    
    # Assigning a Attribute to a Name (line 1241):
    # Getting the type of '_umath_linalg' (line 1241)
    _umath_linalg_136182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 17), '_umath_linalg')
    # Obtaining the member 'eigh_lo' of a type (line 1241)
    eigh_lo_136183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 17), _umath_linalg_136182, 'eigh_lo')
    # Assigning a type to the variable 'gufunc' (line 1241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'gufunc', eigh_lo_136183)
    # SSA branch for the else part of an if statement (line 1240)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 1243):
    
    # Assigning a Attribute to a Name (line 1243):
    # Getting the type of '_umath_linalg' (line 1243)
    _umath_linalg_136184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 17), '_umath_linalg')
    # Obtaining the member 'eigh_up' of a type (line 1243)
    eigh_up_136185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 17), _umath_linalg_136184, 'eigh_up')
    # Assigning a type to the variable 'gufunc' (line 1243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'gufunc', eigh_up_136185)
    # SSA join for if statement (line 1240)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 1245):
    
    # Assigning a IfExp to a Name (line 1245):
    
    
    # Call to isComplexType(...): (line 1245)
    # Processing the call arguments (line 1245)
    # Getting the type of 't' (line 1245)
    t_136187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 41), 't', False)
    # Processing the call keyword arguments (line 1245)
    kwargs_136188 = {}
    # Getting the type of 'isComplexType' (line 1245)
    isComplexType_136186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 27), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1245)
    isComplexType_call_result_136189 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 27), isComplexType_136186, *[t_136187], **kwargs_136188)
    
    # Testing the type of an if expression (line 1245)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1245, 16), isComplexType_call_result_136189)
    # SSA begins for if expression (line 1245)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_136190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 16), 'str', 'D->dD')
    # SSA branch for the else part of an if expression (line 1245)
    module_type_store.open_ssa_branch('if expression else')
    str_136191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 49), 'str', 'd->dd')
    # SSA join for if expression (line 1245)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_136192 = union_type.UnionType.add(str_136190, str_136191)
    
    # Assigning a type to the variable 'signature' (line 1245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 4), 'signature', if_exp_136192)
    
    # Assigning a Call to a Tuple (line 1246):
    
    # Assigning a Call to a Name:
    
    # Call to gufunc(...): (line 1246)
    # Processing the call arguments (line 1246)
    # Getting the type of 'a' (line 1246)
    a_136194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 19), 'a', False)
    # Processing the call keyword arguments (line 1246)
    # Getting the type of 'signature' (line 1246)
    signature_136195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 32), 'signature', False)
    keyword_136196 = signature_136195
    # Getting the type of 'extobj' (line 1246)
    extobj_136197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 50), 'extobj', False)
    keyword_136198 = extobj_136197
    kwargs_136199 = {'extobj': keyword_136198, 'signature': keyword_136196}
    # Getting the type of 'gufunc' (line 1246)
    gufunc_136193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 12), 'gufunc', False)
    # Calling gufunc(args, kwargs) (line 1246)
    gufunc_call_result_136200 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 12), gufunc_136193, *[a_136194], **kwargs_136199)
    
    # Assigning a type to the variable 'call_assignment_134329' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'call_assignment_134329', gufunc_call_result_136200)
    
    # Assigning a Call to a Name (line 1246):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136204 = {}
    # Getting the type of 'call_assignment_134329' (line 1246)
    call_assignment_134329_136201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'call_assignment_134329', False)
    # Obtaining the member '__getitem__' of a type (line 1246)
    getitem___136202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 4), call_assignment_134329_136201, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136205 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136202, *[int_136203], **kwargs_136204)
    
    # Assigning a type to the variable 'call_assignment_134330' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'call_assignment_134330', getitem___call_result_136205)
    
    # Assigning a Name to a Name (line 1246):
    # Getting the type of 'call_assignment_134330' (line 1246)
    call_assignment_134330_136206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'call_assignment_134330')
    # Assigning a type to the variable 'w' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'w', call_assignment_134330_136206)
    
    # Assigning a Call to a Name (line 1246):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136210 = {}
    # Getting the type of 'call_assignment_134329' (line 1246)
    call_assignment_134329_136207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'call_assignment_134329', False)
    # Obtaining the member '__getitem__' of a type (line 1246)
    getitem___136208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 4), call_assignment_134329_136207, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136211 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136208, *[int_136209], **kwargs_136210)
    
    # Assigning a type to the variable 'call_assignment_134331' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'call_assignment_134331', getitem___call_result_136211)
    
    # Assigning a Name to a Name (line 1246):
    # Getting the type of 'call_assignment_134331' (line 1246)
    call_assignment_134331_136212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'call_assignment_134331')
    # Assigning a type to the variable 'vt' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 7), 'vt', call_assignment_134331_136212)
    
    # Assigning a Call to a Name (line 1247):
    
    # Assigning a Call to a Name (line 1247):
    
    # Call to astype(...): (line 1247)
    # Processing the call arguments (line 1247)
    
    # Call to _realType(...): (line 1247)
    # Processing the call arguments (line 1247)
    # Getting the type of 'result_t' (line 1247)
    result_t_136216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 27), 'result_t', False)
    # Processing the call keyword arguments (line 1247)
    kwargs_136217 = {}
    # Getting the type of '_realType' (line 1247)
    _realType_136215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 17), '_realType', False)
    # Calling _realType(args, kwargs) (line 1247)
    _realType_call_result_136218 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 17), _realType_136215, *[result_t_136216], **kwargs_136217)
    
    # Processing the call keyword arguments (line 1247)
    # Getting the type of 'False' (line 1247)
    False_136219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 43), 'False', False)
    keyword_136220 = False_136219
    kwargs_136221 = {'copy': keyword_136220}
    # Getting the type of 'w' (line 1247)
    w_136213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 8), 'w', False)
    # Obtaining the member 'astype' of a type (line 1247)
    astype_136214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1247, 8), w_136213, 'astype')
    # Calling astype(args, kwargs) (line 1247)
    astype_call_result_136222 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 8), astype_136214, *[_realType_call_result_136218], **kwargs_136221)
    
    # Assigning a type to the variable 'w' (line 1247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 4), 'w', astype_call_result_136222)
    
    # Assigning a Call to a Name (line 1248):
    
    # Assigning a Call to a Name (line 1248):
    
    # Call to astype(...): (line 1248)
    # Processing the call arguments (line 1248)
    # Getting the type of 'result_t' (line 1248)
    result_t_136225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 19), 'result_t', False)
    # Processing the call keyword arguments (line 1248)
    # Getting the type of 'False' (line 1248)
    False_136226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 34), 'False', False)
    keyword_136227 = False_136226
    kwargs_136228 = {'copy': keyword_136227}
    # Getting the type of 'vt' (line 1248)
    vt_136223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 9), 'vt', False)
    # Obtaining the member 'astype' of a type (line 1248)
    astype_136224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 9), vt_136223, 'astype')
    # Calling astype(args, kwargs) (line 1248)
    astype_call_result_136229 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 9), astype_136224, *[result_t_136225], **kwargs_136228)
    
    # Assigning a type to the variable 'vt' (line 1248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 4), 'vt', astype_call_result_136229)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1249)
    tuple_136230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1249)
    # Adding element type (line 1249)
    # Getting the type of 'w' (line 1249)
    w_136231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1249, 11), tuple_136230, w_136231)
    # Adding element type (line 1249)
    
    # Call to wrap(...): (line 1249)
    # Processing the call arguments (line 1249)
    # Getting the type of 'vt' (line 1249)
    vt_136233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 19), 'vt', False)
    # Processing the call keyword arguments (line 1249)
    kwargs_136234 = {}
    # Getting the type of 'wrap' (line 1249)
    wrap_136232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 14), 'wrap', False)
    # Calling wrap(args, kwargs) (line 1249)
    wrap_call_result_136235 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 14), wrap_136232, *[vt_136233], **kwargs_136234)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1249, 11), tuple_136230, wrap_call_result_136235)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 4), 'stypy_return_type', tuple_136230)
    
    # ################# End of 'eigh(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'eigh' in the type store
    # Getting the type of 'stypy_return_type' (line 1141)
    stypy_return_type_136236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_136236)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'eigh'
    return stypy_return_type_136236

# Assigning a type to the variable 'eigh' (line 1141)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 0), 'eigh', eigh)

@norecursion
def svd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_136237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 25), 'int')
    int_136238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 39), 'int')
    defaults = [int_136237, int_136238]
    # Create a new context for function 'svd'
    module_type_store = module_type_store.open_function_context('svd', 1254, 0, False)
    
    # Passed parameters checking function
    svd.stypy_localization = localization
    svd.stypy_type_of_self = None
    svd.stypy_type_store = module_type_store
    svd.stypy_function_name = 'svd'
    svd.stypy_param_names_list = ['a', 'full_matrices', 'compute_uv']
    svd.stypy_varargs_param_name = None
    svd.stypy_kwargs_param_name = None
    svd.stypy_call_defaults = defaults
    svd.stypy_call_varargs = varargs
    svd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'svd', ['a', 'full_matrices', 'compute_uv'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'svd', localization, ['a', 'full_matrices', 'compute_uv'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'svd(...)' code ##################

    str_136239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, (-1)), 'str', "\n    Singular Value Decomposition.\n\n    Factors the matrix `a` as ``u * np.diag(s) * v``, where `u` and `v`\n    are unitary and `s` is a 1-d array of `a`'s singular values.\n\n    Parameters\n    ----------\n    a : (..., M, N) array_like\n        A real or complex matrix of shape (`M`, `N`) .\n    full_matrices : bool, optional\n        If True (default), `u` and `v` have the shapes (`M`, `M`) and\n        (`N`, `N`), respectively.  Otherwise, the shapes are (`M`, `K`)\n        and (`K`, `N`), respectively, where `K` = min(`M`, `N`).\n    compute_uv : bool, optional\n        Whether or not to compute `u` and `v` in addition to `s`.  True\n        by default.\n\n    Returns\n    -------\n    u : { (..., M, M), (..., M, K) } array\n        Unitary matrices. The actual shape depends on the value of\n        ``full_matrices``. Only returned when ``compute_uv`` is True.\n    s : (..., K) array\n        The singular values for every matrix, sorted in descending order.\n    v : { (..., N, N), (..., K, N) } array\n        Unitary matrices. The actual shape depends on the value of\n        ``full_matrices``. Only returned when ``compute_uv`` is True.\n\n    Raises\n    ------\n    LinAlgError\n        If SVD computation does not converge.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    The decomposition is performed using LAPACK routine _gesdd\n\n    The SVD is commonly written as ``a = U S V.H``.  The `v` returned\n    by this function is ``V.H`` and ``u = U``.\n\n    If ``U`` is a unitary matrix, it means that it\n    satisfies ``U.H = inv(U)``.\n\n    The rows of `v` are the eigenvectors of ``a.H a``. The columns\n    of `u` are the eigenvectors of ``a a.H``.  For row ``i`` in\n    `v` and column ``i`` in `u`, the corresponding eigenvalue is\n    ``s[i]**2``.\n\n    If `a` is a `matrix` object (as opposed to an `ndarray`), then so\n    are all the return values.\n\n    Examples\n    --------\n    >>> a = np.random.randn(9, 6) + 1j*np.random.randn(9, 6)\n\n    Reconstruction based on full SVD:\n\n    >>> U, s, V = np.linalg.svd(a, full_matrices=True)\n    >>> U.shape, V.shape, s.shape\n    ((9, 9), (6, 6), (6,))\n    >>> S = np.zeros((9, 6), dtype=complex)\n    >>> S[:6, :6] = np.diag(s)\n    >>> np.allclose(a, np.dot(U, np.dot(S, V)))\n    True\n\n    Reconstruction based on reduced SVD:\n\n    >>> U, s, V = np.linalg.svd(a, full_matrices=False)\n    >>> U.shape, V.shape, s.shape\n    ((9, 6), (6, 6), (6,))\n    >>> S = np.diag(s)\n    >>> np.allclose(a, np.dot(U, np.dot(S, V)))\n    True\n\n    ")
    
    # Assigning a Call to a Tuple (line 1337):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 1337)
    # Processing the call arguments (line 1337)
    # Getting the type of 'a' (line 1337)
    a_136241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 25), 'a', False)
    # Processing the call keyword arguments (line 1337)
    kwargs_136242 = {}
    # Getting the type of '_makearray' (line 1337)
    _makearray_136240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 1337)
    _makearray_call_result_136243 = invoke(stypy.reporting.localization.Localization(__file__, 1337, 14), _makearray_136240, *[a_136241], **kwargs_136242)
    
    # Assigning a type to the variable 'call_assignment_134332' (line 1337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'call_assignment_134332', _makearray_call_result_136243)
    
    # Assigning a Call to a Name (line 1337):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136247 = {}
    # Getting the type of 'call_assignment_134332' (line 1337)
    call_assignment_134332_136244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'call_assignment_134332', False)
    # Obtaining the member '__getitem__' of a type (line 1337)
    getitem___136245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 4), call_assignment_134332_136244, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136248 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136245, *[int_136246], **kwargs_136247)
    
    # Assigning a type to the variable 'call_assignment_134333' (line 1337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'call_assignment_134333', getitem___call_result_136248)
    
    # Assigning a Name to a Name (line 1337):
    # Getting the type of 'call_assignment_134333' (line 1337)
    call_assignment_134333_136249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'call_assignment_134333')
    # Assigning a type to the variable 'a' (line 1337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'a', call_assignment_134333_136249)
    
    # Assigning a Call to a Name (line 1337):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136253 = {}
    # Getting the type of 'call_assignment_134332' (line 1337)
    call_assignment_134332_136250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'call_assignment_134332', False)
    # Obtaining the member '__getitem__' of a type (line 1337)
    getitem___136251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 4), call_assignment_134332_136250, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136254 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136251, *[int_136252], **kwargs_136253)
    
    # Assigning a type to the variable 'call_assignment_134334' (line 1337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'call_assignment_134334', getitem___call_result_136254)
    
    # Assigning a Name to a Name (line 1337):
    # Getting the type of 'call_assignment_134334' (line 1337)
    call_assignment_134334_136255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'call_assignment_134334')
    # Assigning a type to the variable 'wrap' (line 1337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 7), 'wrap', call_assignment_134334_136255)
    
    # Call to _assertNoEmpty2d(...): (line 1338)
    # Processing the call arguments (line 1338)
    # Getting the type of 'a' (line 1338)
    a_136257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 21), 'a', False)
    # Processing the call keyword arguments (line 1338)
    kwargs_136258 = {}
    # Getting the type of '_assertNoEmpty2d' (line 1338)
    _assertNoEmpty2d_136256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 4), '_assertNoEmpty2d', False)
    # Calling _assertNoEmpty2d(args, kwargs) (line 1338)
    _assertNoEmpty2d_call_result_136259 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 4), _assertNoEmpty2d_136256, *[a_136257], **kwargs_136258)
    
    
    # Call to _assertRankAtLeast2(...): (line 1339)
    # Processing the call arguments (line 1339)
    # Getting the type of 'a' (line 1339)
    a_136261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 24), 'a', False)
    # Processing the call keyword arguments (line 1339)
    kwargs_136262 = {}
    # Getting the type of '_assertRankAtLeast2' (line 1339)
    _assertRankAtLeast2_136260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 1339)
    _assertRankAtLeast2_call_result_136263 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 4), _assertRankAtLeast2_136260, *[a_136261], **kwargs_136262)
    
    
    # Assigning a Call to a Tuple (line 1340):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 1340)
    # Processing the call arguments (line 1340)
    # Getting the type of 'a' (line 1340)
    a_136265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 30), 'a', False)
    # Processing the call keyword arguments (line 1340)
    kwargs_136266 = {}
    # Getting the type of '_commonType' (line 1340)
    _commonType_136264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 1340)
    _commonType_call_result_136267 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 18), _commonType_136264, *[a_136265], **kwargs_136266)
    
    # Assigning a type to the variable 'call_assignment_134335' (line 1340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'call_assignment_134335', _commonType_call_result_136267)
    
    # Assigning a Call to a Name (line 1340):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1340, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136271 = {}
    # Getting the type of 'call_assignment_134335' (line 1340)
    call_assignment_134335_136268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'call_assignment_134335', False)
    # Obtaining the member '__getitem__' of a type (line 1340)
    getitem___136269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 4), call_assignment_134335_136268, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136272 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136269, *[int_136270], **kwargs_136271)
    
    # Assigning a type to the variable 'call_assignment_134336' (line 1340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'call_assignment_134336', getitem___call_result_136272)
    
    # Assigning a Name to a Name (line 1340):
    # Getting the type of 'call_assignment_134336' (line 1340)
    call_assignment_134336_136273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'call_assignment_134336')
    # Assigning a type to the variable 't' (line 1340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 't', call_assignment_134336_136273)
    
    # Assigning a Call to a Name (line 1340):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1340, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136277 = {}
    # Getting the type of 'call_assignment_134335' (line 1340)
    call_assignment_134335_136274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'call_assignment_134335', False)
    # Obtaining the member '__getitem__' of a type (line 1340)
    getitem___136275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 4), call_assignment_134335_136274, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136278 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136275, *[int_136276], **kwargs_136277)
    
    # Assigning a type to the variable 'call_assignment_134337' (line 1340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'call_assignment_134337', getitem___call_result_136278)
    
    # Assigning a Name to a Name (line 1340):
    # Getting the type of 'call_assignment_134337' (line 1340)
    call_assignment_134337_136279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'call_assignment_134337')
    # Assigning a type to the variable 'result_t' (line 1340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 7), 'result_t', call_assignment_134337_136279)
    
    # Assigning a Call to a Name (line 1342):
    
    # Assigning a Call to a Name (line 1342):
    
    # Call to get_linalg_error_extobj(...): (line 1342)
    # Processing the call arguments (line 1342)
    # Getting the type of '_raise_linalgerror_svd_nonconvergence' (line 1342)
    _raise_linalgerror_svd_nonconvergence_136281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 37), '_raise_linalgerror_svd_nonconvergence', False)
    # Processing the call keyword arguments (line 1342)
    kwargs_136282 = {}
    # Getting the type of 'get_linalg_error_extobj' (line 1342)
    get_linalg_error_extobj_136280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 13), 'get_linalg_error_extobj', False)
    # Calling get_linalg_error_extobj(args, kwargs) (line 1342)
    get_linalg_error_extobj_call_result_136283 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 13), get_linalg_error_extobj_136280, *[_raise_linalgerror_svd_nonconvergence_136281], **kwargs_136282)
    
    # Assigning a type to the variable 'extobj' (line 1342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1342, 4), 'extobj', get_linalg_error_extobj_call_result_136283)
    
    # Assigning a Subscript to a Name (line 1344):
    
    # Assigning a Subscript to a Name (line 1344):
    
    # Obtaining the type of the subscript
    int_136284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 16), 'int')
    # Getting the type of 'a' (line 1344)
    a_136285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 8), 'a')
    # Obtaining the member 'shape' of a type (line 1344)
    shape_136286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 8), a_136285, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1344)
    getitem___136287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 8), shape_136286, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1344)
    subscript_call_result_136288 = invoke(stypy.reporting.localization.Localization(__file__, 1344, 8), getitem___136287, int_136284)
    
    # Assigning a type to the variable 'm' (line 1344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1344, 4), 'm', subscript_call_result_136288)
    
    # Assigning a Subscript to a Name (line 1345):
    
    # Assigning a Subscript to a Name (line 1345):
    
    # Obtaining the type of the subscript
    int_136289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 16), 'int')
    # Getting the type of 'a' (line 1345)
    a_136290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 8), 'a')
    # Obtaining the member 'shape' of a type (line 1345)
    shape_136291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 8), a_136290, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1345)
    getitem___136292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 8), shape_136291, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1345)
    subscript_call_result_136293 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 8), getitem___136292, int_136289)
    
    # Assigning a type to the variable 'n' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'n', subscript_call_result_136293)
    
    # Getting the type of 'compute_uv' (line 1346)
    compute_uv_136294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 7), 'compute_uv')
    # Testing the type of an if condition (line 1346)
    if_condition_136295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1346, 4), compute_uv_136294)
    # Assigning a type to the variable 'if_condition_136295' (line 1346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 4), 'if_condition_136295', if_condition_136295)
    # SSA begins for if statement (line 1346)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'full_matrices' (line 1347)
    full_matrices_136296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 11), 'full_matrices')
    # Testing the type of an if condition (line 1347)
    if_condition_136297 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1347, 8), full_matrices_136296)
    # Assigning a type to the variable 'if_condition_136297' (line 1347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'if_condition_136297', if_condition_136297)
    # SSA begins for if statement (line 1347)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'm' (line 1348)
    m_136298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 15), 'm')
    # Getting the type of 'n' (line 1348)
    n_136299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 19), 'n')
    # Applying the binary operator '<' (line 1348)
    result_lt_136300 = python_operator(stypy.reporting.localization.Localization(__file__, 1348, 15), '<', m_136298, n_136299)
    
    # Testing the type of an if condition (line 1348)
    if_condition_136301 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1348, 12), result_lt_136300)
    # Assigning a type to the variable 'if_condition_136301' (line 1348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 12), 'if_condition_136301', if_condition_136301)
    # SSA begins for if statement (line 1348)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1349):
    
    # Assigning a Attribute to a Name (line 1349):
    # Getting the type of '_umath_linalg' (line 1349)
    _umath_linalg_136302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 25), '_umath_linalg')
    # Obtaining the member 'svd_m_f' of a type (line 1349)
    svd_m_f_136303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 25), _umath_linalg_136302, 'svd_m_f')
    # Assigning a type to the variable 'gufunc' (line 1349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 16), 'gufunc', svd_m_f_136303)
    # SSA branch for the else part of an if statement (line 1348)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 1351):
    
    # Assigning a Attribute to a Name (line 1351):
    # Getting the type of '_umath_linalg' (line 1351)
    _umath_linalg_136304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 25), '_umath_linalg')
    # Obtaining the member 'svd_n_f' of a type (line 1351)
    svd_n_f_136305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 25), _umath_linalg_136304, 'svd_n_f')
    # Assigning a type to the variable 'gufunc' (line 1351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 16), 'gufunc', svd_n_f_136305)
    # SSA join for if statement (line 1348)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1347)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'm' (line 1353)
    m_136306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 15), 'm')
    # Getting the type of 'n' (line 1353)
    n_136307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 19), 'n')
    # Applying the binary operator '<' (line 1353)
    result_lt_136308 = python_operator(stypy.reporting.localization.Localization(__file__, 1353, 15), '<', m_136306, n_136307)
    
    # Testing the type of an if condition (line 1353)
    if_condition_136309 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1353, 12), result_lt_136308)
    # Assigning a type to the variable 'if_condition_136309' (line 1353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 12), 'if_condition_136309', if_condition_136309)
    # SSA begins for if statement (line 1353)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1354):
    
    # Assigning a Attribute to a Name (line 1354):
    # Getting the type of '_umath_linalg' (line 1354)
    _umath_linalg_136310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 25), '_umath_linalg')
    # Obtaining the member 'svd_m_s' of a type (line 1354)
    svd_m_s_136311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 25), _umath_linalg_136310, 'svd_m_s')
    # Assigning a type to the variable 'gufunc' (line 1354)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1354, 16), 'gufunc', svd_m_s_136311)
    # SSA branch for the else part of an if statement (line 1353)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 1356):
    
    # Assigning a Attribute to a Name (line 1356):
    # Getting the type of '_umath_linalg' (line 1356)
    _umath_linalg_136312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 25), '_umath_linalg')
    # Obtaining the member 'svd_n_s' of a type (line 1356)
    svd_n_s_136313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 25), _umath_linalg_136312, 'svd_n_s')
    # Assigning a type to the variable 'gufunc' (line 1356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 16), 'gufunc', svd_n_s_136313)
    # SSA join for if statement (line 1353)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1347)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 1358):
    
    # Assigning a IfExp to a Name (line 1358):
    
    
    # Call to isComplexType(...): (line 1358)
    # Processing the call arguments (line 1358)
    # Getting the type of 't' (line 1358)
    t_136315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 46), 't', False)
    # Processing the call keyword arguments (line 1358)
    kwargs_136316 = {}
    # Getting the type of 'isComplexType' (line 1358)
    isComplexType_136314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 32), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1358)
    isComplexType_call_result_136317 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 32), isComplexType_136314, *[t_136315], **kwargs_136316)
    
    # Testing the type of an if expression (line 1358)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1358, 20), isComplexType_call_result_136317)
    # SSA begins for if expression (line 1358)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_136318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 20), 'str', 'D->DdD')
    # SSA branch for the else part of an if expression (line 1358)
    module_type_store.open_ssa_branch('if expression else')
    str_136319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 54), 'str', 'd->ddd')
    # SSA join for if expression (line 1358)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_136320 = union_type.UnionType.add(str_136318, str_136319)
    
    # Assigning a type to the variable 'signature' (line 1358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 8), 'signature', if_exp_136320)
    
    # Assigning a Call to a Tuple (line 1359):
    
    # Assigning a Call to a Name:
    
    # Call to gufunc(...): (line 1359)
    # Processing the call arguments (line 1359)
    # Getting the type of 'a' (line 1359)
    a_136322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 26), 'a', False)
    # Processing the call keyword arguments (line 1359)
    # Getting the type of 'signature' (line 1359)
    signature_136323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 39), 'signature', False)
    keyword_136324 = signature_136323
    # Getting the type of 'extobj' (line 1359)
    extobj_136325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 57), 'extobj', False)
    keyword_136326 = extobj_136325
    kwargs_136327 = {'extobj': keyword_136326, 'signature': keyword_136324}
    # Getting the type of 'gufunc' (line 1359)
    gufunc_136321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 19), 'gufunc', False)
    # Calling gufunc(args, kwargs) (line 1359)
    gufunc_call_result_136328 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 19), gufunc_136321, *[a_136322], **kwargs_136327)
    
    # Assigning a type to the variable 'call_assignment_134338' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134338', gufunc_call_result_136328)
    
    # Assigning a Call to a Name (line 1359):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 8), 'int')
    # Processing the call keyword arguments
    kwargs_136332 = {}
    # Getting the type of 'call_assignment_134338' (line 1359)
    call_assignment_134338_136329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134338', False)
    # Obtaining the member '__getitem__' of a type (line 1359)
    getitem___136330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 8), call_assignment_134338_136329, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136333 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136330, *[int_136331], **kwargs_136332)
    
    # Assigning a type to the variable 'call_assignment_134339' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134339', getitem___call_result_136333)
    
    # Assigning a Name to a Name (line 1359):
    # Getting the type of 'call_assignment_134339' (line 1359)
    call_assignment_134339_136334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134339')
    # Assigning a type to the variable 'u' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'u', call_assignment_134339_136334)
    
    # Assigning a Call to a Name (line 1359):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 8), 'int')
    # Processing the call keyword arguments
    kwargs_136338 = {}
    # Getting the type of 'call_assignment_134338' (line 1359)
    call_assignment_134338_136335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134338', False)
    # Obtaining the member '__getitem__' of a type (line 1359)
    getitem___136336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 8), call_assignment_134338_136335, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136339 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136336, *[int_136337], **kwargs_136338)
    
    # Assigning a type to the variable 'call_assignment_134340' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134340', getitem___call_result_136339)
    
    # Assigning a Name to a Name (line 1359):
    # Getting the type of 'call_assignment_134340' (line 1359)
    call_assignment_134340_136340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134340')
    # Assigning a type to the variable 's' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 11), 's', call_assignment_134340_136340)
    
    # Assigning a Call to a Name (line 1359):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 8), 'int')
    # Processing the call keyword arguments
    kwargs_136344 = {}
    # Getting the type of 'call_assignment_134338' (line 1359)
    call_assignment_134338_136341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134338', False)
    # Obtaining the member '__getitem__' of a type (line 1359)
    getitem___136342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 8), call_assignment_134338_136341, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136345 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136342, *[int_136343], **kwargs_136344)
    
    # Assigning a type to the variable 'call_assignment_134341' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134341', getitem___call_result_136345)
    
    # Assigning a Name to a Name (line 1359):
    # Getting the type of 'call_assignment_134341' (line 1359)
    call_assignment_134341_136346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'call_assignment_134341')
    # Assigning a type to the variable 'vt' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 14), 'vt', call_assignment_134341_136346)
    
    # Assigning a Call to a Name (line 1360):
    
    # Assigning a Call to a Name (line 1360):
    
    # Call to astype(...): (line 1360)
    # Processing the call arguments (line 1360)
    # Getting the type of 'result_t' (line 1360)
    result_t_136349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 21), 'result_t', False)
    # Processing the call keyword arguments (line 1360)
    # Getting the type of 'False' (line 1360)
    False_136350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 36), 'False', False)
    keyword_136351 = False_136350
    kwargs_136352 = {'copy': keyword_136351}
    # Getting the type of 'u' (line 1360)
    u_136347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 12), 'u', False)
    # Obtaining the member 'astype' of a type (line 1360)
    astype_136348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 12), u_136347, 'astype')
    # Calling astype(args, kwargs) (line 1360)
    astype_call_result_136353 = invoke(stypy.reporting.localization.Localization(__file__, 1360, 12), astype_136348, *[result_t_136349], **kwargs_136352)
    
    # Assigning a type to the variable 'u' (line 1360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 8), 'u', astype_call_result_136353)
    
    # Assigning a Call to a Name (line 1361):
    
    # Assigning a Call to a Name (line 1361):
    
    # Call to astype(...): (line 1361)
    # Processing the call arguments (line 1361)
    
    # Call to _realType(...): (line 1361)
    # Processing the call arguments (line 1361)
    # Getting the type of 'result_t' (line 1361)
    result_t_136357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 31), 'result_t', False)
    # Processing the call keyword arguments (line 1361)
    kwargs_136358 = {}
    # Getting the type of '_realType' (line 1361)
    _realType_136356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 21), '_realType', False)
    # Calling _realType(args, kwargs) (line 1361)
    _realType_call_result_136359 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 21), _realType_136356, *[result_t_136357], **kwargs_136358)
    
    # Processing the call keyword arguments (line 1361)
    # Getting the type of 'False' (line 1361)
    False_136360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 47), 'False', False)
    keyword_136361 = False_136360
    kwargs_136362 = {'copy': keyword_136361}
    # Getting the type of 's' (line 1361)
    s_136354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 12), 's', False)
    # Obtaining the member 'astype' of a type (line 1361)
    astype_136355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 12), s_136354, 'astype')
    # Calling astype(args, kwargs) (line 1361)
    astype_call_result_136363 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 12), astype_136355, *[_realType_call_result_136359], **kwargs_136362)
    
    # Assigning a type to the variable 's' (line 1361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 's', astype_call_result_136363)
    
    # Assigning a Call to a Name (line 1362):
    
    # Assigning a Call to a Name (line 1362):
    
    # Call to astype(...): (line 1362)
    # Processing the call arguments (line 1362)
    # Getting the type of 'result_t' (line 1362)
    result_t_136366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 23), 'result_t', False)
    # Processing the call keyword arguments (line 1362)
    # Getting the type of 'False' (line 1362)
    False_136367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 38), 'False', False)
    keyword_136368 = False_136367
    kwargs_136369 = {'copy': keyword_136368}
    # Getting the type of 'vt' (line 1362)
    vt_136364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 13), 'vt', False)
    # Obtaining the member 'astype' of a type (line 1362)
    astype_136365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 13), vt_136364, 'astype')
    # Calling astype(args, kwargs) (line 1362)
    astype_call_result_136370 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 13), astype_136365, *[result_t_136366], **kwargs_136369)
    
    # Assigning a type to the variable 'vt' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'vt', astype_call_result_136370)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1363)
    tuple_136371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1363)
    # Adding element type (line 1363)
    
    # Call to wrap(...): (line 1363)
    # Processing the call arguments (line 1363)
    # Getting the type of 'u' (line 1363)
    u_136373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 20), 'u', False)
    # Processing the call keyword arguments (line 1363)
    kwargs_136374 = {}
    # Getting the type of 'wrap' (line 1363)
    wrap_136372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 15), 'wrap', False)
    # Calling wrap(args, kwargs) (line 1363)
    wrap_call_result_136375 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 15), wrap_136372, *[u_136373], **kwargs_136374)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 15), tuple_136371, wrap_call_result_136375)
    # Adding element type (line 1363)
    # Getting the type of 's' (line 1363)
    s_136376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 24), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 15), tuple_136371, s_136376)
    # Adding element type (line 1363)
    
    # Call to wrap(...): (line 1363)
    # Processing the call arguments (line 1363)
    # Getting the type of 'vt' (line 1363)
    vt_136378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 32), 'vt', False)
    # Processing the call keyword arguments (line 1363)
    kwargs_136379 = {}
    # Getting the type of 'wrap' (line 1363)
    wrap_136377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 27), 'wrap', False)
    # Calling wrap(args, kwargs) (line 1363)
    wrap_call_result_136380 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 27), wrap_136377, *[vt_136378], **kwargs_136379)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 15), tuple_136371, wrap_call_result_136380)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'stypy_return_type', tuple_136371)
    # SSA branch for the else part of an if statement (line 1346)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'm' (line 1365)
    m_136381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 11), 'm')
    # Getting the type of 'n' (line 1365)
    n_136382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 15), 'n')
    # Applying the binary operator '<' (line 1365)
    result_lt_136383 = python_operator(stypy.reporting.localization.Localization(__file__, 1365, 11), '<', m_136381, n_136382)
    
    # Testing the type of an if condition (line 1365)
    if_condition_136384 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1365, 8), result_lt_136383)
    # Assigning a type to the variable 'if_condition_136384' (line 1365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'if_condition_136384', if_condition_136384)
    # SSA begins for if statement (line 1365)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1366):
    
    # Assigning a Attribute to a Name (line 1366):
    # Getting the type of '_umath_linalg' (line 1366)
    _umath_linalg_136385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 21), '_umath_linalg')
    # Obtaining the member 'svd_m' of a type (line 1366)
    svd_m_136386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 21), _umath_linalg_136385, 'svd_m')
    # Assigning a type to the variable 'gufunc' (line 1366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'gufunc', svd_m_136386)
    # SSA branch for the else part of an if statement (line 1365)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 1368):
    
    # Assigning a Attribute to a Name (line 1368):
    # Getting the type of '_umath_linalg' (line 1368)
    _umath_linalg_136387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 21), '_umath_linalg')
    # Obtaining the member 'svd_n' of a type (line 1368)
    svd_n_136388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 21), _umath_linalg_136387, 'svd_n')
    # Assigning a type to the variable 'gufunc' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 12), 'gufunc', svd_n_136388)
    # SSA join for if statement (line 1365)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 1370):
    
    # Assigning a IfExp to a Name (line 1370):
    
    
    # Call to isComplexType(...): (line 1370)
    # Processing the call arguments (line 1370)
    # Getting the type of 't' (line 1370)
    t_136390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 44), 't', False)
    # Processing the call keyword arguments (line 1370)
    kwargs_136391 = {}
    # Getting the type of 'isComplexType' (line 1370)
    isComplexType_136389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 30), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1370)
    isComplexType_call_result_136392 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 30), isComplexType_136389, *[t_136390], **kwargs_136391)
    
    # Testing the type of an if expression (line 1370)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1370, 20), isComplexType_call_result_136392)
    # SSA begins for if expression (line 1370)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_136393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 20), 'str', 'D->d')
    # SSA branch for the else part of an if expression (line 1370)
    module_type_store.open_ssa_branch('if expression else')
    str_136394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 52), 'str', 'd->d')
    # SSA join for if expression (line 1370)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_136395 = union_type.UnionType.add(str_136393, str_136394)
    
    # Assigning a type to the variable 'signature' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'signature', if_exp_136395)
    
    # Assigning a Call to a Name (line 1371):
    
    # Assigning a Call to a Name (line 1371):
    
    # Call to gufunc(...): (line 1371)
    # Processing the call arguments (line 1371)
    # Getting the type of 'a' (line 1371)
    a_136397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 19), 'a', False)
    # Processing the call keyword arguments (line 1371)
    # Getting the type of 'signature' (line 1371)
    signature_136398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 32), 'signature', False)
    keyword_136399 = signature_136398
    # Getting the type of 'extobj' (line 1371)
    extobj_136400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 50), 'extobj', False)
    keyword_136401 = extobj_136400
    kwargs_136402 = {'extobj': keyword_136401, 'signature': keyword_136399}
    # Getting the type of 'gufunc' (line 1371)
    gufunc_136396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 12), 'gufunc', False)
    # Calling gufunc(args, kwargs) (line 1371)
    gufunc_call_result_136403 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 12), gufunc_136396, *[a_136397], **kwargs_136402)
    
    # Assigning a type to the variable 's' (line 1371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 's', gufunc_call_result_136403)
    
    # Assigning a Call to a Name (line 1372):
    
    # Assigning a Call to a Name (line 1372):
    
    # Call to astype(...): (line 1372)
    # Processing the call arguments (line 1372)
    
    # Call to _realType(...): (line 1372)
    # Processing the call arguments (line 1372)
    # Getting the type of 'result_t' (line 1372)
    result_t_136407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 31), 'result_t', False)
    # Processing the call keyword arguments (line 1372)
    kwargs_136408 = {}
    # Getting the type of '_realType' (line 1372)
    _realType_136406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 21), '_realType', False)
    # Calling _realType(args, kwargs) (line 1372)
    _realType_call_result_136409 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 21), _realType_136406, *[result_t_136407], **kwargs_136408)
    
    # Processing the call keyword arguments (line 1372)
    # Getting the type of 'False' (line 1372)
    False_136410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 47), 'False', False)
    keyword_136411 = False_136410
    kwargs_136412 = {'copy': keyword_136411}
    # Getting the type of 's' (line 1372)
    s_136404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 12), 's', False)
    # Obtaining the member 'astype' of a type (line 1372)
    astype_136405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 12), s_136404, 'astype')
    # Calling astype(args, kwargs) (line 1372)
    astype_call_result_136413 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 12), astype_136405, *[_realType_call_result_136409], **kwargs_136412)
    
    # Assigning a type to the variable 's' (line 1372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 8), 's', astype_call_result_136413)
    # Getting the type of 's' (line 1373)
    s_136414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 15), 's')
    # Assigning a type to the variable 'stypy_return_type' (line 1373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 8), 'stypy_return_type', s_136414)
    # SSA join for if statement (line 1346)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'svd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'svd' in the type store
    # Getting the type of 'stypy_return_type' (line 1254)
    stypy_return_type_136415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_136415)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'svd'
    return stypy_return_type_136415

# Assigning a type to the variable 'svd' (line 1254)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 0), 'svd', svd)

@norecursion
def cond(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1375)
    None_136416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 14), 'None')
    defaults = [None_136416]
    # Create a new context for function 'cond'
    module_type_store = module_type_store.open_function_context('cond', 1375, 0, False)
    
    # Passed parameters checking function
    cond.stypy_localization = localization
    cond.stypy_type_of_self = None
    cond.stypy_type_store = module_type_store
    cond.stypy_function_name = 'cond'
    cond.stypy_param_names_list = ['x', 'p']
    cond.stypy_varargs_param_name = None
    cond.stypy_kwargs_param_name = None
    cond.stypy_call_defaults = defaults
    cond.stypy_call_varargs = varargs
    cond.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cond', ['x', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cond', localization, ['x', 'p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cond(...)' code ##################

    str_136417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, (-1)), 'str', "\n    Compute the condition number of a matrix.\n\n    This function is capable of returning the condition number using\n    one of seven different norms, depending on the value of `p` (see\n    Parameters below).\n\n    Parameters\n    ----------\n    x : (..., M, N) array_like\n        The matrix whose condition number is sought.\n    p : {None, 1, -1, 2, -2, inf, -inf, 'fro'}, optional\n        Order of the norm:\n\n        =====  ============================\n        p      norm for matrices\n        =====  ============================\n        None   2-norm, computed directly using the ``SVD``\n        'fro'  Frobenius norm\n        inf    max(sum(abs(x), axis=1))\n        -inf   min(sum(abs(x), axis=1))\n        1      max(sum(abs(x), axis=0))\n        -1     min(sum(abs(x), axis=0))\n        2      2-norm (largest sing. value)\n        -2     smallest singular value\n        =====  ============================\n\n        inf means the numpy.inf object, and the Frobenius norm is\n        the root-of-sum-of-squares norm.\n\n    Returns\n    -------\n    c : {float, inf}\n        The condition number of the matrix. May be infinite.\n\n    See Also\n    --------\n    numpy.linalg.norm\n\n    Notes\n    -----\n    The condition number of `x` is defined as the norm of `x` times the\n    norm of the inverse of `x` [1]_; the norm can be the usual L2-norm\n    (root-of-sum-of-squares) or one of a number of other matrix norms.\n\n    References\n    ----------\n    .. [1] G. Strang, *Linear Algebra and Its Applications*, Orlando, FL,\n           Academic Press, Inc., 1980, pg. 285.\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.array([[1, 0, -1], [0, 1, 0], [1, 0, 1]])\n    >>> a\n    array([[ 1,  0, -1],\n           [ 0,  1,  0],\n           [ 1,  0,  1]])\n    >>> LA.cond(a)\n    1.4142135623730951\n    >>> LA.cond(a, 'fro')\n    3.1622776601683795\n    >>> LA.cond(a, np.inf)\n    2.0\n    >>> LA.cond(a, -np.inf)\n    1.0\n    >>> LA.cond(a, 1)\n    2.0\n    >>> LA.cond(a, -1)\n    1.0\n    >>> LA.cond(a, 2)\n    1.4142135623730951\n    >>> LA.cond(a, -2)\n    0.70710678118654746\n    >>> min(LA.svd(a, compute_uv=0))*min(LA.svd(LA.inv(a), compute_uv=0))\n    0.70710678118654746\n\n    ")
    
    # Assigning a Call to a Name (line 1454):
    
    # Assigning a Call to a Name (line 1454):
    
    # Call to asarray(...): (line 1454)
    # Processing the call arguments (line 1454)
    # Getting the type of 'x' (line 1454)
    x_136419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 16), 'x', False)
    # Processing the call keyword arguments (line 1454)
    kwargs_136420 = {}
    # Getting the type of 'asarray' (line 1454)
    asarray_136418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1454)
    asarray_call_result_136421 = invoke(stypy.reporting.localization.Localization(__file__, 1454, 8), asarray_136418, *[x_136419], **kwargs_136420)
    
    # Assigning a type to the variable 'x' (line 1454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 4), 'x', asarray_call_result_136421)
    
    # Type idiom detected: calculating its left and rigth part (line 1455)
    # Getting the type of 'p' (line 1455)
    p_136422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 7), 'p')
    # Getting the type of 'None' (line 1455)
    None_136423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 12), 'None')
    
    (may_be_136424, more_types_in_union_136425) = may_be_none(p_136422, None_136423)

    if may_be_136424:

        if more_types_in_union_136425:
            # Runtime conditional SSA (line 1455)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1456):
        
        # Assigning a Call to a Name (line 1456):
        
        # Call to svd(...): (line 1456)
        # Processing the call arguments (line 1456)
        # Getting the type of 'x' (line 1456)
        x_136427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 16), 'x', False)
        # Processing the call keyword arguments (line 1456)
        # Getting the type of 'False' (line 1456)
        False_136428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 30), 'False', False)
        keyword_136429 = False_136428
        kwargs_136430 = {'compute_uv': keyword_136429}
        # Getting the type of 'svd' (line 1456)
        svd_136426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'svd', False)
        # Calling svd(args, kwargs) (line 1456)
        svd_call_result_136431 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 12), svd_136426, *[x_136427], **kwargs_136430)
        
        # Assigning a type to the variable 's' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 's', svd_call_result_136431)
        
        # Obtaining the type of the subscript
        Ellipsis_136432 = Ellipsis
        int_136433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 22), 'int')
        # Getting the type of 's' (line 1457)
        s_136434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 15), 's')
        # Obtaining the member '__getitem__' of a type (line 1457)
        getitem___136435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 15), s_136434, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
        subscript_call_result_136436 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 15), getitem___136435, (Ellipsis_136432, int_136433))
        
        
        # Obtaining the type of the subscript
        Ellipsis_136437 = Ellipsis
        int_136438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1457, 32), 'int')
        # Getting the type of 's' (line 1457)
        s_136439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 25), 's')
        # Obtaining the member '__getitem__' of a type (line 1457)
        getitem___136440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1457, 25), s_136439, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1457)
        subscript_call_result_136441 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 25), getitem___136440, (Ellipsis_136437, int_136438))
        
        # Applying the binary operator 'div' (line 1457)
        result_div_136442 = python_operator(stypy.reporting.localization.Localization(__file__, 1457, 15), 'div', subscript_call_result_136436, subscript_call_result_136441)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 8), 'stypy_return_type', result_div_136442)

        if more_types_in_union_136425:
            # Runtime conditional SSA for else branch (line 1455)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_136424) or more_types_in_union_136425):
        
        # Call to norm(...): (line 1459)
        # Processing the call arguments (line 1459)
        # Getting the type of 'x' (line 1459)
        x_136444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 20), 'x', False)
        # Getting the type of 'p' (line 1459)
        p_136445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 23), 'p', False)
        # Processing the call keyword arguments (line 1459)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1459)
        tuple_136446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1459)
        # Adding element type (line 1459)
        int_136447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1459, 32), tuple_136446, int_136447)
        # Adding element type (line 1459)
        int_136448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1459, 32), tuple_136446, int_136448)
        
        keyword_136449 = tuple_136446
        kwargs_136450 = {'axis': keyword_136449}
        # Getting the type of 'norm' (line 1459)
        norm_136443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 15), 'norm', False)
        # Calling norm(args, kwargs) (line 1459)
        norm_call_result_136451 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 15), norm_136443, *[x_136444, p_136445], **kwargs_136450)
        
        
        # Call to norm(...): (line 1459)
        # Processing the call arguments (line 1459)
        
        # Call to inv(...): (line 1459)
        # Processing the call arguments (line 1459)
        # Getting the type of 'x' (line 1459)
        x_136454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 52), 'x', False)
        # Processing the call keyword arguments (line 1459)
        kwargs_136455 = {}
        # Getting the type of 'inv' (line 1459)
        inv_136453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 48), 'inv', False)
        # Calling inv(args, kwargs) (line 1459)
        inv_call_result_136456 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 48), inv_136453, *[x_136454], **kwargs_136455)
        
        # Getting the type of 'p' (line 1459)
        p_136457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 56), 'p', False)
        # Processing the call keyword arguments (line 1459)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1459)
        tuple_136458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 65), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1459)
        # Adding element type (line 1459)
        int_136459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 65), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1459, 65), tuple_136458, int_136459)
        # Adding element type (line 1459)
        int_136460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 69), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1459, 65), tuple_136458, int_136460)
        
        keyword_136461 = tuple_136458
        kwargs_136462 = {'axis': keyword_136461}
        # Getting the type of 'norm' (line 1459)
        norm_136452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 43), 'norm', False)
        # Calling norm(args, kwargs) (line 1459)
        norm_call_result_136463 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 43), norm_136452, *[inv_call_result_136456, p_136457], **kwargs_136462)
        
        # Applying the binary operator '*' (line 1459)
        result_mul_136464 = python_operator(stypy.reporting.localization.Localization(__file__, 1459, 15), '*', norm_call_result_136451, norm_call_result_136463)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'stypy_return_type', result_mul_136464)

        if (may_be_136424 and more_types_in_union_136425):
            # SSA join for if statement (line 1455)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'cond(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cond' in the type store
    # Getting the type of 'stypy_return_type' (line 1375)
    stypy_return_type_136465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_136465)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cond'
    return stypy_return_type_136465

# Assigning a type to the variable 'cond' (line 1375)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 0), 'cond', cond)

@norecursion
def matrix_rank(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1462)
    None_136466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 23), 'None')
    defaults = [None_136466]
    # Create a new context for function 'matrix_rank'
    module_type_store = module_type_store.open_function_context('matrix_rank', 1462, 0, False)
    
    # Passed parameters checking function
    matrix_rank.stypy_localization = localization
    matrix_rank.stypy_type_of_self = None
    matrix_rank.stypy_type_store = module_type_store
    matrix_rank.stypy_function_name = 'matrix_rank'
    matrix_rank.stypy_param_names_list = ['M', 'tol']
    matrix_rank.stypy_varargs_param_name = None
    matrix_rank.stypy_kwargs_param_name = None
    matrix_rank.stypy_call_defaults = defaults
    matrix_rank.stypy_call_varargs = varargs
    matrix_rank.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'matrix_rank', ['M', 'tol'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'matrix_rank', localization, ['M', 'tol'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'matrix_rank(...)' code ##################

    str_136467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, (-1)), 'str', '\n    Return matrix rank of array using SVD method\n\n    Rank of the array is the number of SVD singular values of the array that are\n    greater than `tol`.\n\n    Parameters\n    ----------\n    M : {(M,), (M, N)} array_like\n        array of <=2 dimensions\n    tol : {None, float}, optional\n       threshold below which SVD values are considered zero. If `tol` is\n       None, and ``S`` is an array with singular values for `M`, and\n       ``eps`` is the epsilon value for datatype of ``S``, then `tol` is\n       set to ``S.max() * max(M.shape) * eps``.\n\n    Notes\n    -----\n    The default threshold to detect rank deficiency is a test on the magnitude\n    of the singular values of `M`.  By default, we identify singular values less\n    than ``S.max() * max(M.shape) * eps`` as indicating rank deficiency (with\n    the symbols defined above). This is the algorithm MATLAB uses [1].  It also\n    appears in *Numerical recipes* in the discussion of SVD solutions for linear\n    least squares [2].\n\n    This default threshold is designed to detect rank deficiency accounting for\n    the numerical errors of the SVD computation.  Imagine that there is a column\n    in `M` that is an exact (in floating point) linear combination of other\n    columns in `M`. Computing the SVD on `M` will not produce a singular value\n    exactly equal to 0 in general: any difference of the smallest SVD value from\n    0 will be caused by numerical imprecision in the calculation of the SVD.\n    Our threshold for small SVD values takes this numerical imprecision into\n    account, and the default threshold will detect such numerical rank\n    deficiency.  The threshold may declare a matrix `M` rank deficient even if\n    the linear combination of some columns of `M` is not exactly equal to\n    another column of `M` but only numerically very close to another column of\n    `M`.\n\n    We chose our default threshold because it is in wide use.  Other thresholds\n    are possible.  For example, elsewhere in the 2007 edition of *Numerical\n    recipes* there is an alternative threshold of ``S.max() *\n    np.finfo(M.dtype).eps / 2. * np.sqrt(m + n + 1.)``. The authors describe\n    this threshold as being based on "expected roundoff error" (p 71).\n\n    The thresholds above deal with floating point roundoff error in the\n    calculation of the SVD.  However, you may have more information about the\n    sources of error in `M` that would make you consider other tolerance values\n    to detect *effective* rank deficiency.  The most useful measure of the\n    tolerance depends on the operations you intend to use on your matrix.  For\n    example, if your data come from uncertain measurements with uncertainties\n    greater than floating point epsilon, choosing a tolerance near that\n    uncertainty may be preferable.  The tolerance may be absolute if the\n    uncertainties are absolute rather than relative.\n\n    References\n    ----------\n    .. [1] MATLAB reference documention, "Rank"\n           http://www.mathworks.com/help/techdoc/ref/rank.html\n    .. [2] W. H. Press, S. A. Teukolsky, W. T. Vetterling and B. P. Flannery,\n           "Numerical Recipes (3rd edition)", Cambridge University Press, 2007,\n           page 795.\n\n    Examples\n    --------\n    >>> from numpy.linalg import matrix_rank\n    >>> matrix_rank(np.eye(4)) # Full rank matrix\n    4\n    >>> I=np.eye(4); I[-1,-1] = 0. # rank deficient matrix\n    >>> matrix_rank(I)\n    3\n    >>> matrix_rank(np.ones((4,))) # 1 dimension - rank 1 unless all 0\n    1\n    >>> matrix_rank(np.zeros((4,)))\n    0\n    ')
    
    # Assigning a Call to a Name (line 1538):
    
    # Assigning a Call to a Name (line 1538):
    
    # Call to asarray(...): (line 1538)
    # Processing the call arguments (line 1538)
    # Getting the type of 'M' (line 1538)
    M_136469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 16), 'M', False)
    # Processing the call keyword arguments (line 1538)
    kwargs_136470 = {}
    # Getting the type of 'asarray' (line 1538)
    asarray_136468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1538)
    asarray_call_result_136471 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 8), asarray_136468, *[M_136469], **kwargs_136470)
    
    # Assigning a type to the variable 'M' (line 1538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 4), 'M', asarray_call_result_136471)
    
    
    # Getting the type of 'M' (line 1539)
    M_136472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 7), 'M')
    # Obtaining the member 'ndim' of a type (line 1539)
    ndim_136473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 7), M_136472, 'ndim')
    int_136474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 16), 'int')
    # Applying the binary operator '>' (line 1539)
    result_gt_136475 = python_operator(stypy.reporting.localization.Localization(__file__, 1539, 7), '>', ndim_136473, int_136474)
    
    # Testing the type of an if condition (line 1539)
    if_condition_136476 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1539, 4), result_gt_136475)
    # Assigning a type to the variable 'if_condition_136476' (line 1539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 4), 'if_condition_136476', if_condition_136476)
    # SSA begins for if statement (line 1539)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1540)
    # Processing the call arguments (line 1540)
    str_136478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 24), 'str', 'array should have 2 or fewer dimensions')
    # Processing the call keyword arguments (line 1540)
    kwargs_136479 = {}
    # Getting the type of 'TypeError' (line 1540)
    TypeError_136477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1540)
    TypeError_call_result_136480 = invoke(stypy.reporting.localization.Localization(__file__, 1540, 14), TypeError_136477, *[str_136478], **kwargs_136479)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1540, 8), TypeError_call_result_136480, 'raise parameter', BaseException)
    # SSA join for if statement (line 1539)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'M' (line 1541)
    M_136481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 7), 'M')
    # Obtaining the member 'ndim' of a type (line 1541)
    ndim_136482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1541, 7), M_136481, 'ndim')
    int_136483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 16), 'int')
    # Applying the binary operator '<' (line 1541)
    result_lt_136484 = python_operator(stypy.reporting.localization.Localization(__file__, 1541, 7), '<', ndim_136482, int_136483)
    
    # Testing the type of an if condition (line 1541)
    if_condition_136485 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1541, 4), result_lt_136484)
    # Assigning a type to the variable 'if_condition_136485' (line 1541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 4), 'if_condition_136485', if_condition_136485)
    # SSA begins for if statement (line 1541)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to int(...): (line 1542)
    # Processing the call arguments (line 1542)
    
    
    # Call to all(...): (line 1542)
    # Processing the call arguments (line 1542)
    
    # Getting the type of 'M' (line 1542)
    M_136488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 27), 'M', False)
    int_136489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 30), 'int')
    # Applying the binary operator '==' (line 1542)
    result_eq_136490 = python_operator(stypy.reporting.localization.Localization(__file__, 1542, 27), '==', M_136488, int_136489)
    
    # Processing the call keyword arguments (line 1542)
    kwargs_136491 = {}
    # Getting the type of 'all' (line 1542)
    all_136487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 23), 'all', False)
    # Calling all(args, kwargs) (line 1542)
    all_call_result_136492 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 23), all_136487, *[result_eq_136490], **kwargs_136491)
    
    # Applying the 'not' unary operator (line 1542)
    result_not__136493 = python_operator(stypy.reporting.localization.Localization(__file__, 1542, 19), 'not', all_call_result_136492)
    
    # Processing the call keyword arguments (line 1542)
    kwargs_136494 = {}
    # Getting the type of 'int' (line 1542)
    int_136486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 15), 'int', False)
    # Calling int(args, kwargs) (line 1542)
    int_call_result_136495 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 15), int_136486, *[result_not__136493], **kwargs_136494)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 8), 'stypy_return_type', int_call_result_136495)
    # SSA join for if statement (line 1541)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1543):
    
    # Assigning a Call to a Name (line 1543):
    
    # Call to svd(...): (line 1543)
    # Processing the call arguments (line 1543)
    # Getting the type of 'M' (line 1543)
    M_136497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'M', False)
    # Processing the call keyword arguments (line 1543)
    # Getting the type of 'False' (line 1543)
    False_136498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 26), 'False', False)
    keyword_136499 = False_136498
    kwargs_136500 = {'compute_uv': keyword_136499}
    # Getting the type of 'svd' (line 1543)
    svd_136496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 8), 'svd', False)
    # Calling svd(args, kwargs) (line 1543)
    svd_call_result_136501 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 8), svd_136496, *[M_136497], **kwargs_136500)
    
    # Assigning a type to the variable 'S' (line 1543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'S', svd_call_result_136501)
    
    # Type idiom detected: calculating its left and rigth part (line 1544)
    # Getting the type of 'tol' (line 1544)
    tol_136502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 7), 'tol')
    # Getting the type of 'None' (line 1544)
    None_136503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 14), 'None')
    
    (may_be_136504, more_types_in_union_136505) = may_be_none(tol_136502, None_136503)

    if may_be_136504:

        if more_types_in_union_136505:
            # Runtime conditional SSA (line 1544)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 1545):
        
        # Assigning a BinOp to a Name (line 1545):
        
        # Call to max(...): (line 1545)
        # Processing the call keyword arguments (line 1545)
        kwargs_136508 = {}
        # Getting the type of 'S' (line 1545)
        S_136506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 14), 'S', False)
        # Obtaining the member 'max' of a type (line 1545)
        max_136507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 14), S_136506, 'max')
        # Calling max(args, kwargs) (line 1545)
        max_call_result_136509 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 14), max_136507, *[], **kwargs_136508)
        
        
        # Call to max(...): (line 1545)
        # Processing the call arguments (line 1545)
        # Getting the type of 'M' (line 1545)
        M_136511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 28), 'M', False)
        # Obtaining the member 'shape' of a type (line 1545)
        shape_136512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 28), M_136511, 'shape')
        # Processing the call keyword arguments (line 1545)
        kwargs_136513 = {}
        # Getting the type of 'max' (line 1545)
        max_136510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 24), 'max', False)
        # Calling max(args, kwargs) (line 1545)
        max_call_result_136514 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 24), max_136510, *[shape_136512], **kwargs_136513)
        
        # Applying the binary operator '*' (line 1545)
        result_mul_136515 = python_operator(stypy.reporting.localization.Localization(__file__, 1545, 14), '*', max_call_result_136509, max_call_result_136514)
        
        
        # Call to finfo(...): (line 1545)
        # Processing the call arguments (line 1545)
        # Getting the type of 'S' (line 1545)
        S_136517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 45), 'S', False)
        # Obtaining the member 'dtype' of a type (line 1545)
        dtype_136518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 45), S_136517, 'dtype')
        # Processing the call keyword arguments (line 1545)
        kwargs_136519 = {}
        # Getting the type of 'finfo' (line 1545)
        finfo_136516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 39), 'finfo', False)
        # Calling finfo(args, kwargs) (line 1545)
        finfo_call_result_136520 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 39), finfo_136516, *[dtype_136518], **kwargs_136519)
        
        # Obtaining the member 'eps' of a type (line 1545)
        eps_136521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1545, 39), finfo_call_result_136520, 'eps')
        # Applying the binary operator '*' (line 1545)
        result_mul_136522 = python_operator(stypy.reporting.localization.Localization(__file__, 1545, 37), '*', result_mul_136515, eps_136521)
        
        # Assigning a type to the variable 'tol' (line 1545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 8), 'tol', result_mul_136522)

        if more_types_in_union_136505:
            # SSA join for if statement (line 1544)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to sum(...): (line 1546)
    # Processing the call arguments (line 1546)
    
    # Getting the type of 'S' (line 1546)
    S_136524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 15), 'S', False)
    # Getting the type of 'tol' (line 1546)
    tol_136525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 19), 'tol', False)
    # Applying the binary operator '>' (line 1546)
    result_gt_136526 = python_operator(stypy.reporting.localization.Localization(__file__, 1546, 15), '>', S_136524, tol_136525)
    
    # Processing the call keyword arguments (line 1546)
    kwargs_136527 = {}
    # Getting the type of 'sum' (line 1546)
    sum_136523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 11), 'sum', False)
    # Calling sum(args, kwargs) (line 1546)
    sum_call_result_136528 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 11), sum_136523, *[result_gt_136526], **kwargs_136527)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 4), 'stypy_return_type', sum_call_result_136528)
    
    # ################# End of 'matrix_rank(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'matrix_rank' in the type store
    # Getting the type of 'stypy_return_type' (line 1462)
    stypy_return_type_136529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_136529)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'matrix_rank'
    return stypy_return_type_136529

# Assigning a type to the variable 'matrix_rank' (line 1462)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 0), 'matrix_rank', matrix_rank)

@norecursion
def pinv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_136530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 18), 'float')
    defaults = [float_136530]
    # Create a new context for function 'pinv'
    module_type_store = module_type_store.open_function_context('pinv', 1551, 0, False)
    
    # Passed parameters checking function
    pinv.stypy_localization = localization
    pinv.stypy_type_of_self = None
    pinv.stypy_type_store = module_type_store
    pinv.stypy_function_name = 'pinv'
    pinv.stypy_param_names_list = ['a', 'rcond']
    pinv.stypy_varargs_param_name = None
    pinv.stypy_kwargs_param_name = None
    pinv.stypy_call_defaults = defaults
    pinv.stypy_call_varargs = varargs
    pinv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pinv', ['a', 'rcond'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pinv', localization, ['a', 'rcond'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pinv(...)' code ##################

    str_136531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, (-1)), 'str', '\n    Compute the (Moore-Penrose) pseudo-inverse of a matrix.\n\n    Calculate the generalized inverse of a matrix using its\n    singular-value decomposition (SVD) and including all\n    *large* singular values.\n\n    Parameters\n    ----------\n    a : (M, N) array_like\n      Matrix to be pseudo-inverted.\n    rcond : float\n      Cutoff for small singular values.\n      Singular values smaller (in modulus) than\n      `rcond` * largest_singular_value (again, in modulus)\n      are set to zero.\n\n    Returns\n    -------\n    B : (N, M) ndarray\n      The pseudo-inverse of `a`. If `a` is a `matrix` instance, then so\n      is `B`.\n\n    Raises\n    ------\n    LinAlgError\n      If the SVD computation does not converge.\n\n    Notes\n    -----\n    The pseudo-inverse of a matrix A, denoted :math:`A^+`, is\n    defined as: "the matrix that \'solves\' [the least-squares problem]\n    :math:`Ax = b`," i.e., if :math:`\\bar{x}` is said solution, then\n    :math:`A^+` is that matrix such that :math:`\\bar{x} = A^+b`.\n\n    It can be shown that if :math:`Q_1 \\Sigma Q_2^T = A` is the singular\n    value decomposition of A, then\n    :math:`A^+ = Q_2 \\Sigma^+ Q_1^T`, where :math:`Q_{1,2}` are\n    orthogonal matrices, :math:`\\Sigma` is a diagonal matrix consisting\n    of A\'s so-called singular values, (followed, typically, by\n    zeros), and then :math:`\\Sigma^+` is simply the diagonal matrix\n    consisting of the reciprocals of A\'s singular values\n    (again, followed by zeros). [1]_\n\n    References\n    ----------\n    .. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n           FL, Academic Press, Inc., 1980, pp. 139-142.\n\n    Examples\n    --------\n    The following example checks that ``a * a+ * a == a`` and\n    ``a+ * a * a+ == a+``:\n\n    >>> a = np.random.randn(9, 6)\n    >>> B = np.linalg.pinv(a)\n    >>> np.allclose(a, np.dot(a, np.dot(B, a)))\n    True\n    >>> np.allclose(B, np.dot(B, np.dot(a, B)))\n    True\n\n    ')
    
    # Assigning a Call to a Tuple (line 1614):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 1614)
    # Processing the call arguments (line 1614)
    # Getting the type of 'a' (line 1614)
    a_136533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 25), 'a', False)
    # Processing the call keyword arguments (line 1614)
    kwargs_136534 = {}
    # Getting the type of '_makearray' (line 1614)
    _makearray_136532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 1614)
    _makearray_call_result_136535 = invoke(stypy.reporting.localization.Localization(__file__, 1614, 14), _makearray_136532, *[a_136533], **kwargs_136534)
    
    # Assigning a type to the variable 'call_assignment_134342' (line 1614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'call_assignment_134342', _makearray_call_result_136535)
    
    # Assigning a Call to a Name (line 1614):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1614, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136539 = {}
    # Getting the type of 'call_assignment_134342' (line 1614)
    call_assignment_134342_136536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'call_assignment_134342', False)
    # Obtaining the member '__getitem__' of a type (line 1614)
    getitem___136537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1614, 4), call_assignment_134342_136536, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136540 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136537, *[int_136538], **kwargs_136539)
    
    # Assigning a type to the variable 'call_assignment_134343' (line 1614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'call_assignment_134343', getitem___call_result_136540)
    
    # Assigning a Name to a Name (line 1614):
    # Getting the type of 'call_assignment_134343' (line 1614)
    call_assignment_134343_136541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'call_assignment_134343')
    # Assigning a type to the variable 'a' (line 1614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'a', call_assignment_134343_136541)
    
    # Assigning a Call to a Name (line 1614):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1614, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136545 = {}
    # Getting the type of 'call_assignment_134342' (line 1614)
    call_assignment_134342_136542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'call_assignment_134342', False)
    # Obtaining the member '__getitem__' of a type (line 1614)
    getitem___136543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1614, 4), call_assignment_134342_136542, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136546 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136543, *[int_136544], **kwargs_136545)
    
    # Assigning a type to the variable 'call_assignment_134344' (line 1614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'call_assignment_134344', getitem___call_result_136546)
    
    # Assigning a Name to a Name (line 1614):
    # Getting the type of 'call_assignment_134344' (line 1614)
    call_assignment_134344_136547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'call_assignment_134344')
    # Assigning a type to the variable 'wrap' (line 1614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 7), 'wrap', call_assignment_134344_136547)
    
    # Call to _assertNoEmpty2d(...): (line 1615)
    # Processing the call arguments (line 1615)
    # Getting the type of 'a' (line 1615)
    a_136549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 21), 'a', False)
    # Processing the call keyword arguments (line 1615)
    kwargs_136550 = {}
    # Getting the type of '_assertNoEmpty2d' (line 1615)
    _assertNoEmpty2d_136548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 4), '_assertNoEmpty2d', False)
    # Calling _assertNoEmpty2d(args, kwargs) (line 1615)
    _assertNoEmpty2d_call_result_136551 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 4), _assertNoEmpty2d_136548, *[a_136549], **kwargs_136550)
    
    
    # Assigning a Call to a Name (line 1616):
    
    # Assigning a Call to a Name (line 1616):
    
    # Call to conjugate(...): (line 1616)
    # Processing the call keyword arguments (line 1616)
    kwargs_136554 = {}
    # Getting the type of 'a' (line 1616)
    a_136552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 8), 'a', False)
    # Obtaining the member 'conjugate' of a type (line 1616)
    conjugate_136553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 8), a_136552, 'conjugate')
    # Calling conjugate(args, kwargs) (line 1616)
    conjugate_call_result_136555 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 8), conjugate_136553, *[], **kwargs_136554)
    
    # Assigning a type to the variable 'a' (line 1616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 4), 'a', conjugate_call_result_136555)
    
    # Assigning a Call to a Tuple (line 1617):
    
    # Assigning a Call to a Name:
    
    # Call to svd(...): (line 1617)
    # Processing the call arguments (line 1617)
    # Getting the type of 'a' (line 1617)
    a_136557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 19), 'a', False)
    int_136558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 22), 'int')
    # Processing the call keyword arguments (line 1617)
    kwargs_136559 = {}
    # Getting the type of 'svd' (line 1617)
    svd_136556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 15), 'svd', False)
    # Calling svd(args, kwargs) (line 1617)
    svd_call_result_136560 = invoke(stypy.reporting.localization.Localization(__file__, 1617, 15), svd_136556, *[a_136557, int_136558], **kwargs_136559)
    
    # Assigning a type to the variable 'call_assignment_134345' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134345', svd_call_result_136560)
    
    # Assigning a Call to a Name (line 1617):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136564 = {}
    # Getting the type of 'call_assignment_134345' (line 1617)
    call_assignment_134345_136561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134345', False)
    # Obtaining the member '__getitem__' of a type (line 1617)
    getitem___136562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 4), call_assignment_134345_136561, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136565 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136562, *[int_136563], **kwargs_136564)
    
    # Assigning a type to the variable 'call_assignment_134346' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134346', getitem___call_result_136565)
    
    # Assigning a Name to a Name (line 1617):
    # Getting the type of 'call_assignment_134346' (line 1617)
    call_assignment_134346_136566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134346')
    # Assigning a type to the variable 'u' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'u', call_assignment_134346_136566)
    
    # Assigning a Call to a Name (line 1617):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136570 = {}
    # Getting the type of 'call_assignment_134345' (line 1617)
    call_assignment_134345_136567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134345', False)
    # Obtaining the member '__getitem__' of a type (line 1617)
    getitem___136568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 4), call_assignment_134345_136567, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136571 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136568, *[int_136569], **kwargs_136570)
    
    # Assigning a type to the variable 'call_assignment_134347' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134347', getitem___call_result_136571)
    
    # Assigning a Name to a Name (line 1617):
    # Getting the type of 'call_assignment_134347' (line 1617)
    call_assignment_134347_136572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134347')
    # Assigning a type to the variable 's' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 7), 's', call_assignment_134347_136572)
    
    # Assigning a Call to a Name (line 1617):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136576 = {}
    # Getting the type of 'call_assignment_134345' (line 1617)
    call_assignment_134345_136573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134345', False)
    # Obtaining the member '__getitem__' of a type (line 1617)
    getitem___136574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 4), call_assignment_134345_136573, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136577 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136574, *[int_136575], **kwargs_136576)
    
    # Assigning a type to the variable 'call_assignment_134348' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134348', getitem___call_result_136577)
    
    # Assigning a Name to a Name (line 1617):
    # Getting the type of 'call_assignment_134348' (line 1617)
    call_assignment_134348_136578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 4), 'call_assignment_134348')
    # Assigning a type to the variable 'vt' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 10), 'vt', call_assignment_134348_136578)
    
    # Assigning a Subscript to a Name (line 1618):
    
    # Assigning a Subscript to a Name (line 1618):
    
    # Obtaining the type of the subscript
    int_136579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1618, 16), 'int')
    # Getting the type of 'u' (line 1618)
    u_136580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 8), 'u')
    # Obtaining the member 'shape' of a type (line 1618)
    shape_136581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 8), u_136580, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1618)
    getitem___136582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 8), shape_136581, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1618)
    subscript_call_result_136583 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 8), getitem___136582, int_136579)
    
    # Assigning a type to the variable 'm' (line 1618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 4), 'm', subscript_call_result_136583)
    
    # Assigning a Subscript to a Name (line 1619):
    
    # Assigning a Subscript to a Name (line 1619):
    
    # Obtaining the type of the subscript
    int_136584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 17), 'int')
    # Getting the type of 'vt' (line 1619)
    vt_136585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'vt')
    # Obtaining the member 'shape' of a type (line 1619)
    shape_136586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 8), vt_136585, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1619)
    getitem___136587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 8), shape_136586, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1619)
    subscript_call_result_136588 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 8), getitem___136587, int_136584)
    
    # Assigning a type to the variable 'n' (line 1619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 4), 'n', subscript_call_result_136588)
    
    # Assigning a BinOp to a Name (line 1620):
    
    # Assigning a BinOp to a Name (line 1620):
    # Getting the type of 'rcond' (line 1620)
    rcond_136589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 13), 'rcond')
    
    # Call to reduce(...): (line 1620)
    # Processing the call arguments (line 1620)
    # Getting the type of 's' (line 1620)
    s_136592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 34), 's', False)
    # Processing the call keyword arguments (line 1620)
    kwargs_136593 = {}
    # Getting the type of 'maximum' (line 1620)
    maximum_136590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 19), 'maximum', False)
    # Obtaining the member 'reduce' of a type (line 1620)
    reduce_136591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 19), maximum_136590, 'reduce')
    # Calling reduce(args, kwargs) (line 1620)
    reduce_call_result_136594 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 19), reduce_136591, *[s_136592], **kwargs_136593)
    
    # Applying the binary operator '*' (line 1620)
    result_mul_136595 = python_operator(stypy.reporting.localization.Localization(__file__, 1620, 13), '*', rcond_136589, reduce_call_result_136594)
    
    # Assigning a type to the variable 'cutoff' (line 1620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 4), 'cutoff', result_mul_136595)
    
    
    # Call to range(...): (line 1621)
    # Processing the call arguments (line 1621)
    
    # Call to min(...): (line 1621)
    # Processing the call arguments (line 1621)
    # Getting the type of 'n' (line 1621)
    n_136598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 23), 'n', False)
    # Getting the type of 'm' (line 1621)
    m_136599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 26), 'm', False)
    # Processing the call keyword arguments (line 1621)
    kwargs_136600 = {}
    # Getting the type of 'min' (line 1621)
    min_136597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 19), 'min', False)
    # Calling min(args, kwargs) (line 1621)
    min_call_result_136601 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 19), min_136597, *[n_136598, m_136599], **kwargs_136600)
    
    # Processing the call keyword arguments (line 1621)
    kwargs_136602 = {}
    # Getting the type of 'range' (line 1621)
    range_136596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 13), 'range', False)
    # Calling range(args, kwargs) (line 1621)
    range_call_result_136603 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 13), range_136596, *[min_call_result_136601], **kwargs_136602)
    
    # Testing the type of a for loop iterable (line 1621)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1621, 4), range_call_result_136603)
    # Getting the type of the for loop variable (line 1621)
    for_loop_var_136604 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1621, 4), range_call_result_136603)
    # Assigning a type to the variable 'i' (line 1621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 4), 'i', for_loop_var_136604)
    # SSA begins for a for statement (line 1621)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1622)
    i_136605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 13), 'i')
    # Getting the type of 's' (line 1622)
    s_136606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 11), 's')
    # Obtaining the member '__getitem__' of a type (line 1622)
    getitem___136607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 11), s_136606, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1622)
    subscript_call_result_136608 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 11), getitem___136607, i_136605)
    
    # Getting the type of 'cutoff' (line 1622)
    cutoff_136609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 18), 'cutoff')
    # Applying the binary operator '>' (line 1622)
    result_gt_136610 = python_operator(stypy.reporting.localization.Localization(__file__, 1622, 11), '>', subscript_call_result_136608, cutoff_136609)
    
    # Testing the type of an if condition (line 1622)
    if_condition_136611 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1622, 8), result_gt_136610)
    # Assigning a type to the variable 'if_condition_136611' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 8), 'if_condition_136611', if_condition_136611)
    # SSA begins for if statement (line 1622)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Subscript (line 1623):
    
    # Assigning a BinOp to a Subscript (line 1623):
    float_136612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1623, 19), 'float')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1623)
    i_136613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 24), 'i')
    # Getting the type of 's' (line 1623)
    s_136614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 22), 's')
    # Obtaining the member '__getitem__' of a type (line 1623)
    getitem___136615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 22), s_136614, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1623)
    subscript_call_result_136616 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 22), getitem___136615, i_136613)
    
    # Applying the binary operator 'div' (line 1623)
    result_div_136617 = python_operator(stypy.reporting.localization.Localization(__file__, 1623, 19), 'div', float_136612, subscript_call_result_136616)
    
    # Getting the type of 's' (line 1623)
    s_136618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 12), 's')
    # Getting the type of 'i' (line 1623)
    i_136619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 14), 'i')
    # Storing an element on a container (line 1623)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1623, 12), s_136618, (i_136619, result_div_136617))
    # SSA branch for the else part of an if statement (line 1622)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Subscript (line 1625):
    
    # Assigning a Num to a Subscript (line 1625):
    float_136620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 19), 'float')
    # Getting the type of 's' (line 1625)
    s_136621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 12), 's')
    # Getting the type of 'i' (line 1625)
    i_136622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 14), 'i')
    # Storing an element on a container (line 1625)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1625, 12), s_136621, (i_136622, float_136620))
    # SSA join for if statement (line 1622)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1626):
    
    # Assigning a Call to a Name (line 1626):
    
    # Call to dot(...): (line 1626)
    # Processing the call arguments (line 1626)
    
    # Call to transpose(...): (line 1626)
    # Processing the call arguments (line 1626)
    # Getting the type of 'vt' (line 1626)
    vt_136625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 24), 'vt', False)
    # Processing the call keyword arguments (line 1626)
    kwargs_136626 = {}
    # Getting the type of 'transpose' (line 1626)
    transpose_136624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 14), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1626)
    transpose_call_result_136627 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 14), transpose_136624, *[vt_136625], **kwargs_136626)
    
    
    # Call to multiply(...): (line 1626)
    # Processing the call arguments (line 1626)
    
    # Obtaining the type of the subscript
    slice_136629 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1626, 38), None, None, None)
    # Getting the type of 'newaxis' (line 1626)
    newaxis_136630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 43), 'newaxis', False)
    # Getting the type of 's' (line 1626)
    s_136631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 38), 's', False)
    # Obtaining the member '__getitem__' of a type (line 1626)
    getitem___136632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 38), s_136631, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1626)
    subscript_call_result_136633 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 38), getitem___136632, (slice_136629, newaxis_136630))
    
    
    # Call to transpose(...): (line 1626)
    # Processing the call arguments (line 1626)
    # Getting the type of 'u' (line 1626)
    u_136635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 63), 'u', False)
    # Processing the call keyword arguments (line 1626)
    kwargs_136636 = {}
    # Getting the type of 'transpose' (line 1626)
    transpose_136634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 53), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1626)
    transpose_call_result_136637 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 53), transpose_136634, *[u_136635], **kwargs_136636)
    
    # Processing the call keyword arguments (line 1626)
    kwargs_136638 = {}
    # Getting the type of 'multiply' (line 1626)
    multiply_136628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 29), 'multiply', False)
    # Calling multiply(args, kwargs) (line 1626)
    multiply_call_result_136639 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 29), multiply_136628, *[subscript_call_result_136633, transpose_call_result_136637], **kwargs_136638)
    
    # Processing the call keyword arguments (line 1626)
    kwargs_136640 = {}
    # Getting the type of 'dot' (line 1626)
    dot_136623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 10), 'dot', False)
    # Calling dot(args, kwargs) (line 1626)
    dot_call_result_136641 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 10), dot_136623, *[transpose_call_result_136627, multiply_call_result_136639], **kwargs_136640)
    
    # Assigning a type to the variable 'res' (line 1626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 4), 'res', dot_call_result_136641)
    
    # Call to wrap(...): (line 1627)
    # Processing the call arguments (line 1627)
    # Getting the type of 'res' (line 1627)
    res_136643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 16), 'res', False)
    # Processing the call keyword arguments (line 1627)
    kwargs_136644 = {}
    # Getting the type of 'wrap' (line 1627)
    wrap_136642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 11), 'wrap', False)
    # Calling wrap(args, kwargs) (line 1627)
    wrap_call_result_136645 = invoke(stypy.reporting.localization.Localization(__file__, 1627, 11), wrap_136642, *[res_136643], **kwargs_136644)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1627, 4), 'stypy_return_type', wrap_call_result_136645)
    
    # ################# End of 'pinv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pinv' in the type store
    # Getting the type of 'stypy_return_type' (line 1551)
    stypy_return_type_136646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_136646)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pinv'
    return stypy_return_type_136646

# Assigning a type to the variable 'pinv' (line 1551)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 0), 'pinv', pinv)

@norecursion
def slogdet(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'slogdet'
    module_type_store = module_type_store.open_function_context('slogdet', 1631, 0, False)
    
    # Passed parameters checking function
    slogdet.stypy_localization = localization
    slogdet.stypy_type_of_self = None
    slogdet.stypy_type_store = module_type_store
    slogdet.stypy_function_name = 'slogdet'
    slogdet.stypy_param_names_list = ['a']
    slogdet.stypy_varargs_param_name = None
    slogdet.stypy_kwargs_param_name = None
    slogdet.stypy_call_defaults = defaults
    slogdet.stypy_call_varargs = varargs
    slogdet.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'slogdet', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'slogdet', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'slogdet(...)' code ##################

    str_136647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, (-1)), 'str', '\n    Compute the sign and (natural) logarithm of the determinant of an array.\n\n    If an array has a very small or very large determinant, then a call to\n    `det` may overflow or underflow. This routine is more robust against such\n    issues, because it computes the logarithm of the determinant rather than\n    the determinant itself.\n\n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        Input array, has to be a square 2-D array.\n\n    Returns\n    -------\n    sign : (...) array_like\n        A number representing the sign of the determinant. For a real matrix,\n        this is 1, 0, or -1. For a complex matrix, this is a complex number\n        with absolute value 1 (i.e., it is on the unit circle), or else 0.\n    logdet : (...) array_like\n        The natural log of the absolute value of the determinant.\n\n    If the determinant is zero, then `sign` will be 0 and `logdet` will be\n    -Inf. In all cases, the determinant is equal to ``sign * np.exp(logdet)``.\n\n    See Also\n    --------\n    det\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    .. versionadded:: 1.6.0.\n\n    The determinant is computed via LU factorization using the LAPACK\n    routine z/dgetrf.\n\n\n    Examples\n    --------\n    The determinant of a 2-D array ``[[a, b], [c, d]]`` is ``ad - bc``:\n\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> (sign, logdet) = np.linalg.slogdet(a)\n    >>> (sign, logdet)\n    (-1, 0.69314718055994529)\n    >>> sign * np.exp(logdet)\n    -2.0\n\n    Computing log-determinants for a stack of matrices:\n\n    >>> a = np.array([ [[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]] ])\n    >>> a.shape\n    (3, 2, 2)\n    >>> sign, logdet = np.linalg.slogdet(a)\n    >>> (sign, logdet)\n    (array([-1., -1., -1.]), array([ 0.69314718,  1.09861229,  2.07944154]))\n    >>> sign * np.exp(logdet)\n    array([-2., -3., -8.])\n\n    This routine succeeds where ordinary `det` does not:\n\n    >>> np.linalg.det(np.eye(500) * 0.1)\n    0.0\n    >>> np.linalg.slogdet(np.eye(500) * 0.1)\n    (1, -1151.2925464970228)\n\n    ')
    
    # Assigning a Call to a Name (line 1705):
    
    # Assigning a Call to a Name (line 1705):
    
    # Call to asarray(...): (line 1705)
    # Processing the call arguments (line 1705)
    # Getting the type of 'a' (line 1705)
    a_136649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 16), 'a', False)
    # Processing the call keyword arguments (line 1705)
    kwargs_136650 = {}
    # Getting the type of 'asarray' (line 1705)
    asarray_136648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1705)
    asarray_call_result_136651 = invoke(stypy.reporting.localization.Localization(__file__, 1705, 8), asarray_136648, *[a_136649], **kwargs_136650)
    
    # Assigning a type to the variable 'a' (line 1705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1705, 4), 'a', asarray_call_result_136651)
    
    # Call to _assertNoEmpty2d(...): (line 1706)
    # Processing the call arguments (line 1706)
    # Getting the type of 'a' (line 1706)
    a_136653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 21), 'a', False)
    # Processing the call keyword arguments (line 1706)
    kwargs_136654 = {}
    # Getting the type of '_assertNoEmpty2d' (line 1706)
    _assertNoEmpty2d_136652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 4), '_assertNoEmpty2d', False)
    # Calling _assertNoEmpty2d(args, kwargs) (line 1706)
    _assertNoEmpty2d_call_result_136655 = invoke(stypy.reporting.localization.Localization(__file__, 1706, 4), _assertNoEmpty2d_136652, *[a_136653], **kwargs_136654)
    
    
    # Call to _assertRankAtLeast2(...): (line 1707)
    # Processing the call arguments (line 1707)
    # Getting the type of 'a' (line 1707)
    a_136657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 24), 'a', False)
    # Processing the call keyword arguments (line 1707)
    kwargs_136658 = {}
    # Getting the type of '_assertRankAtLeast2' (line 1707)
    _assertRankAtLeast2_136656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 1707)
    _assertRankAtLeast2_call_result_136659 = invoke(stypy.reporting.localization.Localization(__file__, 1707, 4), _assertRankAtLeast2_136656, *[a_136657], **kwargs_136658)
    
    
    # Call to _assertNdSquareness(...): (line 1708)
    # Processing the call arguments (line 1708)
    # Getting the type of 'a' (line 1708)
    a_136661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 24), 'a', False)
    # Processing the call keyword arguments (line 1708)
    kwargs_136662 = {}
    # Getting the type of '_assertNdSquareness' (line 1708)
    _assertNdSquareness_136660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 1708)
    _assertNdSquareness_call_result_136663 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 4), _assertNdSquareness_136660, *[a_136661], **kwargs_136662)
    
    
    # Assigning a Call to a Tuple (line 1709):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 1709)
    # Processing the call arguments (line 1709)
    # Getting the type of 'a' (line 1709)
    a_136665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 30), 'a', False)
    # Processing the call keyword arguments (line 1709)
    kwargs_136666 = {}
    # Getting the type of '_commonType' (line 1709)
    _commonType_136664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 1709)
    _commonType_call_result_136667 = invoke(stypy.reporting.localization.Localization(__file__, 1709, 18), _commonType_136664, *[a_136665], **kwargs_136666)
    
    # Assigning a type to the variable 'call_assignment_134349' (line 1709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'call_assignment_134349', _commonType_call_result_136667)
    
    # Assigning a Call to a Name (line 1709):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136671 = {}
    # Getting the type of 'call_assignment_134349' (line 1709)
    call_assignment_134349_136668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'call_assignment_134349', False)
    # Obtaining the member '__getitem__' of a type (line 1709)
    getitem___136669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 4), call_assignment_134349_136668, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136672 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136669, *[int_136670], **kwargs_136671)
    
    # Assigning a type to the variable 'call_assignment_134350' (line 1709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'call_assignment_134350', getitem___call_result_136672)
    
    # Assigning a Name to a Name (line 1709):
    # Getting the type of 'call_assignment_134350' (line 1709)
    call_assignment_134350_136673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'call_assignment_134350')
    # Assigning a type to the variable 't' (line 1709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 't', call_assignment_134350_136673)
    
    # Assigning a Call to a Name (line 1709):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1709, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136677 = {}
    # Getting the type of 'call_assignment_134349' (line 1709)
    call_assignment_134349_136674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'call_assignment_134349', False)
    # Obtaining the member '__getitem__' of a type (line 1709)
    getitem___136675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1709, 4), call_assignment_134349_136674, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136678 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136675, *[int_136676], **kwargs_136677)
    
    # Assigning a type to the variable 'call_assignment_134351' (line 1709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'call_assignment_134351', getitem___call_result_136678)
    
    # Assigning a Name to a Name (line 1709):
    # Getting the type of 'call_assignment_134351' (line 1709)
    call_assignment_134351_136679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'call_assignment_134351')
    # Assigning a type to the variable 'result_t' (line 1709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 7), 'result_t', call_assignment_134351_136679)
    
    # Assigning a Call to a Name (line 1710):
    
    # Assigning a Call to a Name (line 1710):
    
    # Call to _realType(...): (line 1710)
    # Processing the call arguments (line 1710)
    # Getting the type of 'result_t' (line 1710)
    result_t_136681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 23), 'result_t', False)
    # Processing the call keyword arguments (line 1710)
    kwargs_136682 = {}
    # Getting the type of '_realType' (line 1710)
    _realType_136680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 13), '_realType', False)
    # Calling _realType(args, kwargs) (line 1710)
    _realType_call_result_136683 = invoke(stypy.reporting.localization.Localization(__file__, 1710, 13), _realType_136680, *[result_t_136681], **kwargs_136682)
    
    # Assigning a type to the variable 'real_t' (line 1710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1710, 4), 'real_t', _realType_call_result_136683)
    
    # Assigning a IfExp to a Name (line 1711):
    
    # Assigning a IfExp to a Name (line 1711):
    
    
    # Call to isComplexType(...): (line 1711)
    # Processing the call arguments (line 1711)
    # Getting the type of 't' (line 1711)
    t_136685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 41), 't', False)
    # Processing the call keyword arguments (line 1711)
    kwargs_136686 = {}
    # Getting the type of 'isComplexType' (line 1711)
    isComplexType_136684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 27), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1711)
    isComplexType_call_result_136687 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 27), isComplexType_136684, *[t_136685], **kwargs_136686)
    
    # Testing the type of an if expression (line 1711)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1711, 16), isComplexType_call_result_136687)
    # SSA begins for if expression (line 1711)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_136688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 16), 'str', 'D->Dd')
    # SSA branch for the else part of an if expression (line 1711)
    module_type_store.open_ssa_branch('if expression else')
    str_136689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 49), 'str', 'd->dd')
    # SSA join for if expression (line 1711)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_136690 = union_type.UnionType.add(str_136688, str_136689)
    
    # Assigning a type to the variable 'signature' (line 1711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1711, 4), 'signature', if_exp_136690)
    
    # Assigning a Call to a Tuple (line 1712):
    
    # Assigning a Call to a Name:
    
    # Call to slogdet(...): (line 1712)
    # Processing the call arguments (line 1712)
    # Getting the type of 'a' (line 1712)
    a_136693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 41), 'a', False)
    # Processing the call keyword arguments (line 1712)
    # Getting the type of 'signature' (line 1712)
    signature_136694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 54), 'signature', False)
    keyword_136695 = signature_136694
    kwargs_136696 = {'signature': keyword_136695}
    # Getting the type of '_umath_linalg' (line 1712)
    _umath_linalg_136691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 19), '_umath_linalg', False)
    # Obtaining the member 'slogdet' of a type (line 1712)
    slogdet_136692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 19), _umath_linalg_136691, 'slogdet')
    # Calling slogdet(args, kwargs) (line 1712)
    slogdet_call_result_136697 = invoke(stypy.reporting.localization.Localization(__file__, 1712, 19), slogdet_136692, *[a_136693], **kwargs_136696)
    
    # Assigning a type to the variable 'call_assignment_134352' (line 1712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'call_assignment_134352', slogdet_call_result_136697)
    
    # Assigning a Call to a Name (line 1712):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136701 = {}
    # Getting the type of 'call_assignment_134352' (line 1712)
    call_assignment_134352_136698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'call_assignment_134352', False)
    # Obtaining the member '__getitem__' of a type (line 1712)
    getitem___136699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 4), call_assignment_134352_136698, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136702 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136699, *[int_136700], **kwargs_136701)
    
    # Assigning a type to the variable 'call_assignment_134353' (line 1712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'call_assignment_134353', getitem___call_result_136702)
    
    # Assigning a Name to a Name (line 1712):
    # Getting the type of 'call_assignment_134353' (line 1712)
    call_assignment_134353_136703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'call_assignment_134353')
    # Assigning a type to the variable 'sign' (line 1712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'sign', call_assignment_134353_136703)
    
    # Assigning a Call to a Name (line 1712):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136707 = {}
    # Getting the type of 'call_assignment_134352' (line 1712)
    call_assignment_134352_136704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'call_assignment_134352', False)
    # Obtaining the member '__getitem__' of a type (line 1712)
    getitem___136705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 4), call_assignment_134352_136704, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136708 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136705, *[int_136706], **kwargs_136707)
    
    # Assigning a type to the variable 'call_assignment_134354' (line 1712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'call_assignment_134354', getitem___call_result_136708)
    
    # Assigning a Name to a Name (line 1712):
    # Getting the type of 'call_assignment_134354' (line 1712)
    call_assignment_134354_136709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'call_assignment_134354')
    # Assigning a type to the variable 'logdet' (line 1712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 10), 'logdet', call_assignment_134354_136709)
    
    
    # Call to isscalar(...): (line 1713)
    # Processing the call arguments (line 1713)
    # Getting the type of 'sign' (line 1713)
    sign_136711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 16), 'sign', False)
    # Processing the call keyword arguments (line 1713)
    kwargs_136712 = {}
    # Getting the type of 'isscalar' (line 1713)
    isscalar_136710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 7), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1713)
    isscalar_call_result_136713 = invoke(stypy.reporting.localization.Localization(__file__, 1713, 7), isscalar_136710, *[sign_136711], **kwargs_136712)
    
    # Testing the type of an if condition (line 1713)
    if_condition_136714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1713, 4), isscalar_call_result_136713)
    # Assigning a type to the variable 'if_condition_136714' (line 1713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 4), 'if_condition_136714', if_condition_136714)
    # SSA begins for if statement (line 1713)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1714):
    
    # Assigning a Call to a Name (line 1714):
    
    # Call to astype(...): (line 1714)
    # Processing the call arguments (line 1714)
    # Getting the type of 'result_t' (line 1714)
    result_t_136717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 27), 'result_t', False)
    # Processing the call keyword arguments (line 1714)
    kwargs_136718 = {}
    # Getting the type of 'sign' (line 1714)
    sign_136715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 15), 'sign', False)
    # Obtaining the member 'astype' of a type (line 1714)
    astype_136716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 15), sign_136715, 'astype')
    # Calling astype(args, kwargs) (line 1714)
    astype_call_result_136719 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 15), astype_136716, *[result_t_136717], **kwargs_136718)
    
    # Assigning a type to the variable 'sign' (line 1714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 8), 'sign', astype_call_result_136719)
    # SSA branch for the else part of an if statement (line 1713)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1716):
    
    # Assigning a Call to a Name (line 1716):
    
    # Call to astype(...): (line 1716)
    # Processing the call arguments (line 1716)
    # Getting the type of 'result_t' (line 1716)
    result_t_136722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 27), 'result_t', False)
    # Processing the call keyword arguments (line 1716)
    # Getting the type of 'False' (line 1716)
    False_136723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 42), 'False', False)
    keyword_136724 = False_136723
    kwargs_136725 = {'copy': keyword_136724}
    # Getting the type of 'sign' (line 1716)
    sign_136720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 15), 'sign', False)
    # Obtaining the member 'astype' of a type (line 1716)
    astype_136721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 15), sign_136720, 'astype')
    # Calling astype(args, kwargs) (line 1716)
    astype_call_result_136726 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 15), astype_136721, *[result_t_136722], **kwargs_136725)
    
    # Assigning a type to the variable 'sign' (line 1716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 8), 'sign', astype_call_result_136726)
    # SSA join for if statement (line 1713)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isscalar(...): (line 1717)
    # Processing the call arguments (line 1717)
    # Getting the type of 'logdet' (line 1717)
    logdet_136728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 16), 'logdet', False)
    # Processing the call keyword arguments (line 1717)
    kwargs_136729 = {}
    # Getting the type of 'isscalar' (line 1717)
    isscalar_136727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 7), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1717)
    isscalar_call_result_136730 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 7), isscalar_136727, *[logdet_136728], **kwargs_136729)
    
    # Testing the type of an if condition (line 1717)
    if_condition_136731 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1717, 4), isscalar_call_result_136730)
    # Assigning a type to the variable 'if_condition_136731' (line 1717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 4), 'if_condition_136731', if_condition_136731)
    # SSA begins for if statement (line 1717)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1718):
    
    # Assigning a Call to a Name (line 1718):
    
    # Call to astype(...): (line 1718)
    # Processing the call arguments (line 1718)
    # Getting the type of 'real_t' (line 1718)
    real_t_136734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 31), 'real_t', False)
    # Processing the call keyword arguments (line 1718)
    kwargs_136735 = {}
    # Getting the type of 'logdet' (line 1718)
    logdet_136732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 17), 'logdet', False)
    # Obtaining the member 'astype' of a type (line 1718)
    astype_136733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 17), logdet_136732, 'astype')
    # Calling astype(args, kwargs) (line 1718)
    astype_call_result_136736 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 17), astype_136733, *[real_t_136734], **kwargs_136735)
    
    # Assigning a type to the variable 'logdet' (line 1718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 8), 'logdet', astype_call_result_136736)
    # SSA branch for the else part of an if statement (line 1717)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1720):
    
    # Assigning a Call to a Name (line 1720):
    
    # Call to astype(...): (line 1720)
    # Processing the call arguments (line 1720)
    # Getting the type of 'real_t' (line 1720)
    real_t_136739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 31), 'real_t', False)
    # Processing the call keyword arguments (line 1720)
    # Getting the type of 'False' (line 1720)
    False_136740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 44), 'False', False)
    keyword_136741 = False_136740
    kwargs_136742 = {'copy': keyword_136741}
    # Getting the type of 'logdet' (line 1720)
    logdet_136737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 17), 'logdet', False)
    # Obtaining the member 'astype' of a type (line 1720)
    astype_136738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 17), logdet_136737, 'astype')
    # Calling astype(args, kwargs) (line 1720)
    astype_call_result_136743 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 17), astype_136738, *[real_t_136739], **kwargs_136742)
    
    # Assigning a type to the variable 'logdet' (line 1720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 8), 'logdet', astype_call_result_136743)
    # SSA join for if statement (line 1717)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1721)
    tuple_136744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1721)
    # Adding element type (line 1721)
    # Getting the type of 'sign' (line 1721)
    sign_136745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 11), 'sign')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1721, 11), tuple_136744, sign_136745)
    # Adding element type (line 1721)
    # Getting the type of 'logdet' (line 1721)
    logdet_136746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 17), 'logdet')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1721, 11), tuple_136744, logdet_136746)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 4), 'stypy_return_type', tuple_136744)
    
    # ################# End of 'slogdet(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'slogdet' in the type store
    # Getting the type of 'stypy_return_type' (line 1631)
    stypy_return_type_136747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_136747)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'slogdet'
    return stypy_return_type_136747

# Assigning a type to the variable 'slogdet' (line 1631)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 0), 'slogdet', slogdet)

@norecursion
def det(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'det'
    module_type_store = module_type_store.open_function_context('det', 1723, 0, False)
    
    # Passed parameters checking function
    det.stypy_localization = localization
    det.stypy_type_of_self = None
    det.stypy_type_store = module_type_store
    det.stypy_function_name = 'det'
    det.stypy_param_names_list = ['a']
    det.stypy_varargs_param_name = None
    det.stypy_kwargs_param_name = None
    det.stypy_call_defaults = defaults
    det.stypy_call_varargs = varargs
    det.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'det', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'det', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'det(...)' code ##################

    str_136748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, (-1)), 'str', '\n    Compute the determinant of an array.\n\n    Parameters\n    ----------\n    a : (..., M, M) array_like\n        Input array to compute determinants for.\n\n    Returns\n    -------\n    det : (...) array_like\n        Determinant of `a`.\n\n    See Also\n    --------\n    slogdet : Another way to representing the determinant, more suitable\n      for large matrices where underflow/overflow may occur.\n\n    Notes\n    -----\n\n    .. versionadded:: 1.8.0\n\n    Broadcasting rules apply, see the `numpy.linalg` documentation for\n    details.\n\n    The determinant is computed via LU factorization using the LAPACK\n    routine z/dgetrf.\n\n    Examples\n    --------\n    The determinant of a 2-D array [[a, b], [c, d]] is ad - bc:\n\n    >>> a = np.array([[1, 2], [3, 4]])\n    >>> np.linalg.det(a)\n    -2.0\n\n    Computing determinants for a stack of matrices:\n\n    >>> a = np.array([ [[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]] ])\n    >>> a.shape\n    (3, 2, 2)\n    >>> np.linalg.det(a)\n    array([-2., -3., -8.])\n\n    ')
    
    # Assigning a Call to a Name (line 1770):
    
    # Assigning a Call to a Name (line 1770):
    
    # Call to asarray(...): (line 1770)
    # Processing the call arguments (line 1770)
    # Getting the type of 'a' (line 1770)
    a_136750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 16), 'a', False)
    # Processing the call keyword arguments (line 1770)
    kwargs_136751 = {}
    # Getting the type of 'asarray' (line 1770)
    asarray_136749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1770)
    asarray_call_result_136752 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 8), asarray_136749, *[a_136750], **kwargs_136751)
    
    # Assigning a type to the variable 'a' (line 1770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 4), 'a', asarray_call_result_136752)
    
    # Call to _assertNoEmpty2d(...): (line 1771)
    # Processing the call arguments (line 1771)
    # Getting the type of 'a' (line 1771)
    a_136754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 21), 'a', False)
    # Processing the call keyword arguments (line 1771)
    kwargs_136755 = {}
    # Getting the type of '_assertNoEmpty2d' (line 1771)
    _assertNoEmpty2d_136753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 4), '_assertNoEmpty2d', False)
    # Calling _assertNoEmpty2d(args, kwargs) (line 1771)
    _assertNoEmpty2d_call_result_136756 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 4), _assertNoEmpty2d_136753, *[a_136754], **kwargs_136755)
    
    
    # Call to _assertRankAtLeast2(...): (line 1772)
    # Processing the call arguments (line 1772)
    # Getting the type of 'a' (line 1772)
    a_136758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 24), 'a', False)
    # Processing the call keyword arguments (line 1772)
    kwargs_136759 = {}
    # Getting the type of '_assertRankAtLeast2' (line 1772)
    _assertRankAtLeast2_136757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 4), '_assertRankAtLeast2', False)
    # Calling _assertRankAtLeast2(args, kwargs) (line 1772)
    _assertRankAtLeast2_call_result_136760 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 4), _assertRankAtLeast2_136757, *[a_136758], **kwargs_136759)
    
    
    # Call to _assertNdSquareness(...): (line 1773)
    # Processing the call arguments (line 1773)
    # Getting the type of 'a' (line 1773)
    a_136762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 24), 'a', False)
    # Processing the call keyword arguments (line 1773)
    kwargs_136763 = {}
    # Getting the type of '_assertNdSquareness' (line 1773)
    _assertNdSquareness_136761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 4), '_assertNdSquareness', False)
    # Calling _assertNdSquareness(args, kwargs) (line 1773)
    _assertNdSquareness_call_result_136764 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 4), _assertNdSquareness_136761, *[a_136762], **kwargs_136763)
    
    
    # Assigning a Call to a Tuple (line 1774):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 1774)
    # Processing the call arguments (line 1774)
    # Getting the type of 'a' (line 1774)
    a_136766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 30), 'a', False)
    # Processing the call keyword arguments (line 1774)
    kwargs_136767 = {}
    # Getting the type of '_commonType' (line 1774)
    _commonType_136765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 1774)
    _commonType_call_result_136768 = invoke(stypy.reporting.localization.Localization(__file__, 1774, 18), _commonType_136765, *[a_136766], **kwargs_136767)
    
    # Assigning a type to the variable 'call_assignment_134355' (line 1774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'call_assignment_134355', _commonType_call_result_136768)
    
    # Assigning a Call to a Name (line 1774):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136772 = {}
    # Getting the type of 'call_assignment_134355' (line 1774)
    call_assignment_134355_136769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'call_assignment_134355', False)
    # Obtaining the member '__getitem__' of a type (line 1774)
    getitem___136770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 4), call_assignment_134355_136769, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136773 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136770, *[int_136771], **kwargs_136772)
    
    # Assigning a type to the variable 'call_assignment_134356' (line 1774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'call_assignment_134356', getitem___call_result_136773)
    
    # Assigning a Name to a Name (line 1774):
    # Getting the type of 'call_assignment_134356' (line 1774)
    call_assignment_134356_136774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'call_assignment_134356')
    # Assigning a type to the variable 't' (line 1774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 't', call_assignment_134356_136774)
    
    # Assigning a Call to a Name (line 1774):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136778 = {}
    # Getting the type of 'call_assignment_134355' (line 1774)
    call_assignment_134355_136775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'call_assignment_134355', False)
    # Obtaining the member '__getitem__' of a type (line 1774)
    getitem___136776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 4), call_assignment_134355_136775, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136779 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136776, *[int_136777], **kwargs_136778)
    
    # Assigning a type to the variable 'call_assignment_134357' (line 1774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'call_assignment_134357', getitem___call_result_136779)
    
    # Assigning a Name to a Name (line 1774):
    # Getting the type of 'call_assignment_134357' (line 1774)
    call_assignment_134357_136780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'call_assignment_134357')
    # Assigning a type to the variable 'result_t' (line 1774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 7), 'result_t', call_assignment_134357_136780)
    
    # Assigning a IfExp to a Name (line 1775):
    
    # Assigning a IfExp to a Name (line 1775):
    
    
    # Call to isComplexType(...): (line 1775)
    # Processing the call arguments (line 1775)
    # Getting the type of 't' (line 1775)
    t_136782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 40), 't', False)
    # Processing the call keyword arguments (line 1775)
    kwargs_136783 = {}
    # Getting the type of 'isComplexType' (line 1775)
    isComplexType_136781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 26), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1775)
    isComplexType_call_result_136784 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 26), isComplexType_136781, *[t_136782], **kwargs_136783)
    
    # Testing the type of an if expression (line 1775)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1775, 16), isComplexType_call_result_136784)
    # SSA begins for if expression (line 1775)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_136785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 16), 'str', 'D->D')
    # SSA branch for the else part of an if expression (line 1775)
    module_type_store.open_ssa_branch('if expression else')
    str_136786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 48), 'str', 'd->d')
    # SSA join for if expression (line 1775)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_136787 = union_type.UnionType.add(str_136785, str_136786)
    
    # Assigning a type to the variable 'signature' (line 1775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 4), 'signature', if_exp_136787)
    
    # Assigning a Call to a Name (line 1776):
    
    # Assigning a Call to a Name (line 1776):
    
    # Call to det(...): (line 1776)
    # Processing the call arguments (line 1776)
    # Getting the type of 'a' (line 1776)
    a_136790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 26), 'a', False)
    # Processing the call keyword arguments (line 1776)
    # Getting the type of 'signature' (line 1776)
    signature_136791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 39), 'signature', False)
    keyword_136792 = signature_136791
    kwargs_136793 = {'signature': keyword_136792}
    # Getting the type of '_umath_linalg' (line 1776)
    _umath_linalg_136788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 8), '_umath_linalg', False)
    # Obtaining the member 'det' of a type (line 1776)
    det_136789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 8), _umath_linalg_136788, 'det')
    # Calling det(args, kwargs) (line 1776)
    det_call_result_136794 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 8), det_136789, *[a_136790], **kwargs_136793)
    
    # Assigning a type to the variable 'r' (line 1776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 4), 'r', det_call_result_136794)
    
    
    # Call to isscalar(...): (line 1777)
    # Processing the call arguments (line 1777)
    # Getting the type of 'r' (line 1777)
    r_136796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 16), 'r', False)
    # Processing the call keyword arguments (line 1777)
    kwargs_136797 = {}
    # Getting the type of 'isscalar' (line 1777)
    isscalar_136795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 7), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1777)
    isscalar_call_result_136798 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 7), isscalar_136795, *[r_136796], **kwargs_136797)
    
    # Testing the type of an if condition (line 1777)
    if_condition_136799 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1777, 4), isscalar_call_result_136798)
    # Assigning a type to the variable 'if_condition_136799' (line 1777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'if_condition_136799', if_condition_136799)
    # SSA begins for if statement (line 1777)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1778):
    
    # Assigning a Call to a Name (line 1778):
    
    # Call to astype(...): (line 1778)
    # Processing the call arguments (line 1778)
    # Getting the type of 'result_t' (line 1778)
    result_t_136802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 21), 'result_t', False)
    # Processing the call keyword arguments (line 1778)
    kwargs_136803 = {}
    # Getting the type of 'r' (line 1778)
    r_136800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 12), 'r', False)
    # Obtaining the member 'astype' of a type (line 1778)
    astype_136801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 12), r_136800, 'astype')
    # Calling astype(args, kwargs) (line 1778)
    astype_call_result_136804 = invoke(stypy.reporting.localization.Localization(__file__, 1778, 12), astype_136801, *[result_t_136802], **kwargs_136803)
    
    # Assigning a type to the variable 'r' (line 1778)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'r', astype_call_result_136804)
    # SSA branch for the else part of an if statement (line 1777)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1780):
    
    # Assigning a Call to a Name (line 1780):
    
    # Call to astype(...): (line 1780)
    # Processing the call arguments (line 1780)
    # Getting the type of 'result_t' (line 1780)
    result_t_136807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 21), 'result_t', False)
    # Processing the call keyword arguments (line 1780)
    # Getting the type of 'False' (line 1780)
    False_136808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 36), 'False', False)
    keyword_136809 = False_136808
    kwargs_136810 = {'copy': keyword_136809}
    # Getting the type of 'r' (line 1780)
    r_136805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 12), 'r', False)
    # Obtaining the member 'astype' of a type (line 1780)
    astype_136806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 12), r_136805, 'astype')
    # Calling astype(args, kwargs) (line 1780)
    astype_call_result_136811 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 12), astype_136806, *[result_t_136807], **kwargs_136810)
    
    # Assigning a type to the variable 'r' (line 1780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 8), 'r', astype_call_result_136811)
    # SSA join for if statement (line 1777)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'r' (line 1781)
    r_136812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 11), 'r')
    # Assigning a type to the variable 'stypy_return_type' (line 1781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'stypy_return_type', r_136812)
    
    # ################# End of 'det(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'det' in the type store
    # Getting the type of 'stypy_return_type' (line 1723)
    stypy_return_type_136813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_136813)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'det'
    return stypy_return_type_136813

# Assigning a type to the variable 'det' (line 1723)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 0), 'det', det)

@norecursion
def lstsq(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_136814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1785, 22), 'int')
    defaults = [int_136814]
    # Create a new context for function 'lstsq'
    module_type_store = module_type_store.open_function_context('lstsq', 1785, 0, False)
    
    # Passed parameters checking function
    lstsq.stypy_localization = localization
    lstsq.stypy_type_of_self = None
    lstsq.stypy_type_store = module_type_store
    lstsq.stypy_function_name = 'lstsq'
    lstsq.stypy_param_names_list = ['a', 'b', 'rcond']
    lstsq.stypy_varargs_param_name = None
    lstsq.stypy_kwargs_param_name = None
    lstsq.stypy_call_defaults = defaults
    lstsq.stypy_call_varargs = varargs
    lstsq.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lstsq', ['a', 'b', 'rcond'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lstsq', localization, ['a', 'b', 'rcond'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lstsq(...)' code ##################

    str_136815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, (-1)), 'str', '\n    Return the least-squares solution to a linear matrix equation.\n\n    Solves the equation `a x = b` by computing a vector `x` that\n    minimizes the Euclidean 2-norm `|| b - a x ||^2`.  The equation may\n    be under-, well-, or over- determined (i.e., the number of\n    linearly independent rows of `a` can be less than, equal to, or\n    greater than its number of linearly independent columns).  If `a`\n    is square and of full rank, then `x` (but for round-off error) is\n    the "exact" solution of the equation.\n\n    Parameters\n    ----------\n    a : (M, N) array_like\n        "Coefficient" matrix.\n    b : {(M,), (M, K)} array_like\n        Ordinate or "dependent variable" values. If `b` is two-dimensional,\n        the least-squares solution is calculated for each of the `K` columns\n        of `b`.\n    rcond : float, optional\n        Cut-off ratio for small singular values of `a`.\n        Singular values are set to zero if they are smaller than `rcond`\n        times the largest singular value of `a`.\n\n    Returns\n    -------\n    x : {(N,), (N, K)} ndarray\n        Least-squares solution. If `b` is two-dimensional,\n        the solutions are in the `K` columns of `x`.\n    residuals : {(), (1,), (K,)} ndarray\n        Sums of residuals; squared Euclidean 2-norm for each column in\n        ``b - a*x``.\n        If the rank of `a` is < N or M <= N, this is an empty array.\n        If `b` is 1-dimensional, this is a (1,) shape array.\n        Otherwise the shape is (K,).\n    rank : int\n        Rank of matrix `a`.\n    s : (min(M, N),) ndarray\n        Singular values of `a`.\n\n    Raises\n    ------\n    LinAlgError\n        If computation does not converge.\n\n    Notes\n    -----\n    If `b` is a matrix, then all array results are returned as matrices.\n\n    Examples\n    --------\n    Fit a line, ``y = mx + c``, through some noisy data-points:\n\n    >>> x = np.array([0, 1, 2, 3])\n    >>> y = np.array([-1, 0.2, 0.9, 2.1])\n\n    By examining the coefficients, we see that the line should have a\n    gradient of roughly 1 and cut the y-axis at, more or less, -1.\n\n    We can rewrite the line equation as ``y = Ap``, where ``A = [[x 1]]``\n    and ``p = [[m], [c]]``.  Now use `lstsq` to solve for `p`:\n\n    >>> A = np.vstack([x, np.ones(len(x))]).T\n    >>> A\n    array([[ 0.,  1.],\n           [ 1.,  1.],\n           [ 2.,  1.],\n           [ 3.,  1.]])\n\n    >>> m, c = np.linalg.lstsq(A, y)[0]\n    >>> print(m, c)\n    1.0 -0.95\n\n    Plot the data along with the fitted line:\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(x, y, \'o\', label=\'Original data\', markersize=10)\n    >>> plt.plot(x, m*x + c, \'r\', label=\'Fitted line\')\n    >>> plt.legend()\n    >>> plt.show()\n\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1868, 4))
    
    # 'import math' statement (line 1868)
    import math

    import_module(stypy.reporting.localization.Localization(__file__, 1868, 4), 'math', math, module_type_store)
    
    
    # Assigning a Call to a Tuple (line 1869):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 1869)
    # Processing the call arguments (line 1869)
    # Getting the type of 'a' (line 1869)
    a_136817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 22), 'a', False)
    # Processing the call keyword arguments (line 1869)
    kwargs_136818 = {}
    # Getting the type of '_makearray' (line 1869)
    _makearray_136816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 11), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 1869)
    _makearray_call_result_136819 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 11), _makearray_136816, *[a_136817], **kwargs_136818)
    
    # Assigning a type to the variable 'call_assignment_134358' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'call_assignment_134358', _makearray_call_result_136819)
    
    # Assigning a Call to a Name (line 1869):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136823 = {}
    # Getting the type of 'call_assignment_134358' (line 1869)
    call_assignment_134358_136820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'call_assignment_134358', False)
    # Obtaining the member '__getitem__' of a type (line 1869)
    getitem___136821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 4), call_assignment_134358_136820, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136824 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136821, *[int_136822], **kwargs_136823)
    
    # Assigning a type to the variable 'call_assignment_134359' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'call_assignment_134359', getitem___call_result_136824)
    
    # Assigning a Name to a Name (line 1869):
    # Getting the type of 'call_assignment_134359' (line 1869)
    call_assignment_134359_136825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'call_assignment_134359')
    # Assigning a type to the variable 'a' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'a', call_assignment_134359_136825)
    
    # Assigning a Call to a Name (line 1869):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136829 = {}
    # Getting the type of 'call_assignment_134358' (line 1869)
    call_assignment_134358_136826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'call_assignment_134358', False)
    # Obtaining the member '__getitem__' of a type (line 1869)
    getitem___136827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 4), call_assignment_134358_136826, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136830 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136827, *[int_136828], **kwargs_136829)
    
    # Assigning a type to the variable 'call_assignment_134360' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'call_assignment_134360', getitem___call_result_136830)
    
    # Assigning a Name to a Name (line 1869):
    # Getting the type of 'call_assignment_134360' (line 1869)
    call_assignment_134360_136831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 4), 'call_assignment_134360')
    # Assigning a type to the variable '_' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 7), '_', call_assignment_134360_136831)
    
    # Assigning a Call to a Tuple (line 1870):
    
    # Assigning a Call to a Name:
    
    # Call to _makearray(...): (line 1870)
    # Processing the call arguments (line 1870)
    # Getting the type of 'b' (line 1870)
    b_136833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 25), 'b', False)
    # Processing the call keyword arguments (line 1870)
    kwargs_136834 = {}
    # Getting the type of '_makearray' (line 1870)
    _makearray_136832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 14), '_makearray', False)
    # Calling _makearray(args, kwargs) (line 1870)
    _makearray_call_result_136835 = invoke(stypy.reporting.localization.Localization(__file__, 1870, 14), _makearray_136832, *[b_136833], **kwargs_136834)
    
    # Assigning a type to the variable 'call_assignment_134361' (line 1870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'call_assignment_134361', _makearray_call_result_136835)
    
    # Assigning a Call to a Name (line 1870):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1870, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136839 = {}
    # Getting the type of 'call_assignment_134361' (line 1870)
    call_assignment_134361_136836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'call_assignment_134361', False)
    # Obtaining the member '__getitem__' of a type (line 1870)
    getitem___136837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 4), call_assignment_134361_136836, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136840 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136837, *[int_136838], **kwargs_136839)
    
    # Assigning a type to the variable 'call_assignment_134362' (line 1870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'call_assignment_134362', getitem___call_result_136840)
    
    # Assigning a Name to a Name (line 1870):
    # Getting the type of 'call_assignment_134362' (line 1870)
    call_assignment_134362_136841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'call_assignment_134362')
    # Assigning a type to the variable 'b' (line 1870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'b', call_assignment_134362_136841)
    
    # Assigning a Call to a Name (line 1870):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1870, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136845 = {}
    # Getting the type of 'call_assignment_134361' (line 1870)
    call_assignment_134361_136842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'call_assignment_134361', False)
    # Obtaining the member '__getitem__' of a type (line 1870)
    getitem___136843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 4), call_assignment_134361_136842, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136846 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136843, *[int_136844], **kwargs_136845)
    
    # Assigning a type to the variable 'call_assignment_134363' (line 1870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'call_assignment_134363', getitem___call_result_136846)
    
    # Assigning a Name to a Name (line 1870):
    # Getting the type of 'call_assignment_134363' (line 1870)
    call_assignment_134363_136847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 4), 'call_assignment_134363')
    # Assigning a type to the variable 'wrap' (line 1870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 7), 'wrap', call_assignment_134363_136847)
    
    # Assigning a Compare to a Name (line 1871):
    
    # Assigning a Compare to a Name (line 1871):
    
    
    # Call to len(...): (line 1871)
    # Processing the call arguments (line 1871)
    # Getting the type of 'b' (line 1871)
    b_136849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 16), 'b', False)
    # Obtaining the member 'shape' of a type (line 1871)
    shape_136850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 16), b_136849, 'shape')
    # Processing the call keyword arguments (line 1871)
    kwargs_136851 = {}
    # Getting the type of 'len' (line 1871)
    len_136848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'len', False)
    # Calling len(args, kwargs) (line 1871)
    len_call_result_136852 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 12), len_136848, *[shape_136850], **kwargs_136851)
    
    int_136853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1871, 28), 'int')
    # Applying the binary operator '==' (line 1871)
    result_eq_136854 = python_operator(stypy.reporting.localization.Localization(__file__, 1871, 12), '==', len_call_result_136852, int_136853)
    
    # Assigning a type to the variable 'is_1d' (line 1871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 4), 'is_1d', result_eq_136854)
    
    # Getting the type of 'is_1d' (line 1872)
    is_1d_136855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 7), 'is_1d')
    # Testing the type of an if condition (line 1872)
    if_condition_136856 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1872, 4), is_1d_136855)
    # Assigning a type to the variable 'if_condition_136856' (line 1872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'if_condition_136856', if_condition_136856)
    # SSA begins for if statement (line 1872)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1873):
    
    # Assigning a Subscript to a Name (line 1873):
    
    # Obtaining the type of the subscript
    slice_136857 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1873, 12), None, None, None)
    # Getting the type of 'newaxis' (line 1873)
    newaxis_136858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 17), 'newaxis')
    # Getting the type of 'b' (line 1873)
    b_136859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 12), 'b')
    # Obtaining the member '__getitem__' of a type (line 1873)
    getitem___136860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 12), b_136859, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1873)
    subscript_call_result_136861 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 12), getitem___136860, (slice_136857, newaxis_136858))
    
    # Assigning a type to the variable 'b' (line 1873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 8), 'b', subscript_call_result_136861)
    # SSA join for if statement (line 1872)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _assertRank2(...): (line 1874)
    # Processing the call arguments (line 1874)
    # Getting the type of 'a' (line 1874)
    a_136863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 17), 'a', False)
    # Getting the type of 'b' (line 1874)
    b_136864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 20), 'b', False)
    # Processing the call keyword arguments (line 1874)
    kwargs_136865 = {}
    # Getting the type of '_assertRank2' (line 1874)
    _assertRank2_136862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 4), '_assertRank2', False)
    # Calling _assertRank2(args, kwargs) (line 1874)
    _assertRank2_call_result_136866 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 4), _assertRank2_136862, *[a_136863, b_136864], **kwargs_136865)
    
    
    # Assigning a Subscript to a Name (line 1875):
    
    # Assigning a Subscript to a Name (line 1875):
    
    # Obtaining the type of the subscript
    int_136867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 17), 'int')
    # Getting the type of 'a' (line 1875)
    a_136868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 9), 'a')
    # Obtaining the member 'shape' of a type (line 1875)
    shape_136869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 9), a_136868, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1875)
    getitem___136870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 9), shape_136869, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1875)
    subscript_call_result_136871 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 9), getitem___136870, int_136867)
    
    # Assigning a type to the variable 'm' (line 1875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 4), 'm', subscript_call_result_136871)
    
    # Assigning a Subscript to a Name (line 1876):
    
    # Assigning a Subscript to a Name (line 1876):
    
    # Obtaining the type of the subscript
    int_136872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 17), 'int')
    # Getting the type of 'a' (line 1876)
    a_136873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 9), 'a')
    # Obtaining the member 'shape' of a type (line 1876)
    shape_136874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1876, 9), a_136873, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1876)
    getitem___136875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1876, 9), shape_136874, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1876)
    subscript_call_result_136876 = invoke(stypy.reporting.localization.Localization(__file__, 1876, 9), getitem___136875, int_136872)
    
    # Assigning a type to the variable 'n' (line 1876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 4), 'n', subscript_call_result_136876)
    
    # Assigning a Subscript to a Name (line 1877):
    
    # Assigning a Subscript to a Name (line 1877):
    
    # Obtaining the type of the subscript
    int_136877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 20), 'int')
    # Getting the type of 'b' (line 1877)
    b_136878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'b')
    # Obtaining the member 'shape' of a type (line 1877)
    shape_136879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 12), b_136878, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1877)
    getitem___136880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 12), shape_136879, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1877)
    subscript_call_result_136881 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 12), getitem___136880, int_136877)
    
    # Assigning a type to the variable 'n_rhs' (line 1877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 4), 'n_rhs', subscript_call_result_136881)
    
    # Assigning a Call to a Name (line 1878):
    
    # Assigning a Call to a Name (line 1878):
    
    # Call to max(...): (line 1878)
    # Processing the call arguments (line 1878)
    # Getting the type of 'n' (line 1878)
    n_136883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 14), 'n', False)
    # Getting the type of 'm' (line 1878)
    m_136884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 17), 'm', False)
    # Processing the call keyword arguments (line 1878)
    kwargs_136885 = {}
    # Getting the type of 'max' (line 1878)
    max_136882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 10), 'max', False)
    # Calling max(args, kwargs) (line 1878)
    max_call_result_136886 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 10), max_136882, *[n_136883, m_136884], **kwargs_136885)
    
    # Assigning a type to the variable 'ldb' (line 1878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 4), 'ldb', max_call_result_136886)
    
    
    # Getting the type of 'm' (line 1879)
    m_136887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 7), 'm')
    
    # Obtaining the type of the subscript
    int_136888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1879, 20), 'int')
    # Getting the type of 'b' (line 1879)
    b_136889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'b')
    # Obtaining the member 'shape' of a type (line 1879)
    shape_136890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 12), b_136889, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1879)
    getitem___136891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 12), shape_136890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1879)
    subscript_call_result_136892 = invoke(stypy.reporting.localization.Localization(__file__, 1879, 12), getitem___136891, int_136888)
    
    # Applying the binary operator '!=' (line 1879)
    result_ne_136893 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 7), '!=', m_136887, subscript_call_result_136892)
    
    # Testing the type of an if condition (line 1879)
    if_condition_136894 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1879, 4), result_ne_136893)
    # Assigning a type to the variable 'if_condition_136894' (line 1879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 4), 'if_condition_136894', if_condition_136894)
    # SSA begins for if statement (line 1879)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 1880)
    # Processing the call arguments (line 1880)
    str_136896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1880, 26), 'str', 'Incompatible dimensions')
    # Processing the call keyword arguments (line 1880)
    kwargs_136897 = {}
    # Getting the type of 'LinAlgError' (line 1880)
    LinAlgError_136895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 14), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 1880)
    LinAlgError_call_result_136898 = invoke(stypy.reporting.localization.Localization(__file__, 1880, 14), LinAlgError_136895, *[str_136896], **kwargs_136897)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1880, 8), LinAlgError_call_result_136898, 'raise parameter', BaseException)
    # SSA join for if statement (line 1879)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1881):
    
    # Assigning a Call to a Name:
    
    # Call to _commonType(...): (line 1881)
    # Processing the call arguments (line 1881)
    # Getting the type of 'a' (line 1881)
    a_136900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 30), 'a', False)
    # Getting the type of 'b' (line 1881)
    b_136901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 33), 'b', False)
    # Processing the call keyword arguments (line 1881)
    kwargs_136902 = {}
    # Getting the type of '_commonType' (line 1881)
    _commonType_136899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 18), '_commonType', False)
    # Calling _commonType(args, kwargs) (line 1881)
    _commonType_call_result_136903 = invoke(stypy.reporting.localization.Localization(__file__, 1881, 18), _commonType_136899, *[a_136900, b_136901], **kwargs_136902)
    
    # Assigning a type to the variable 'call_assignment_134364' (line 1881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'call_assignment_134364', _commonType_call_result_136903)
    
    # Assigning a Call to a Name (line 1881):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1881, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136907 = {}
    # Getting the type of 'call_assignment_134364' (line 1881)
    call_assignment_134364_136904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'call_assignment_134364', False)
    # Obtaining the member '__getitem__' of a type (line 1881)
    getitem___136905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 4), call_assignment_134364_136904, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136908 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136905, *[int_136906], **kwargs_136907)
    
    # Assigning a type to the variable 'call_assignment_134365' (line 1881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'call_assignment_134365', getitem___call_result_136908)
    
    # Assigning a Name to a Name (line 1881):
    # Getting the type of 'call_assignment_134365' (line 1881)
    call_assignment_134365_136909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'call_assignment_134365')
    # Assigning a type to the variable 't' (line 1881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 't', call_assignment_134365_136909)
    
    # Assigning a Call to a Name (line 1881):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1881, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136913 = {}
    # Getting the type of 'call_assignment_134364' (line 1881)
    call_assignment_134364_136910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'call_assignment_134364', False)
    # Obtaining the member '__getitem__' of a type (line 1881)
    getitem___136911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 4), call_assignment_134364_136910, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136914 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136911, *[int_136912], **kwargs_136913)
    
    # Assigning a type to the variable 'call_assignment_134366' (line 1881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'call_assignment_134366', getitem___call_result_136914)
    
    # Assigning a Name to a Name (line 1881):
    # Getting the type of 'call_assignment_134366' (line 1881)
    call_assignment_134366_136915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 4), 'call_assignment_134366')
    # Assigning a type to the variable 'result_t' (line 1881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 7), 'result_t', call_assignment_134366_136915)
    
    # Assigning a Call to a Name (line 1882):
    
    # Assigning a Call to a Name (line 1882):
    
    # Call to _realType(...): (line 1882)
    # Processing the call arguments (line 1882)
    # Getting the type of 'result_t' (line 1882)
    result_t_136917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 30), 'result_t', False)
    # Processing the call keyword arguments (line 1882)
    kwargs_136918 = {}
    # Getting the type of '_realType' (line 1882)
    _realType_136916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 20), '_realType', False)
    # Calling _realType(args, kwargs) (line 1882)
    _realType_call_result_136919 = invoke(stypy.reporting.localization.Localization(__file__, 1882, 20), _realType_136916, *[result_t_136917], **kwargs_136918)
    
    # Assigning a type to the variable 'result_real_t' (line 1882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1882, 4), 'result_real_t', _realType_call_result_136919)
    
    # Assigning a Call to a Name (line 1883):
    
    # Assigning a Call to a Name (line 1883):
    
    # Call to _linalgRealType(...): (line 1883)
    # Processing the call arguments (line 1883)
    # Getting the type of 't' (line 1883)
    t_136921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 29), 't', False)
    # Processing the call keyword arguments (line 1883)
    kwargs_136922 = {}
    # Getting the type of '_linalgRealType' (line 1883)
    _linalgRealType_136920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 13), '_linalgRealType', False)
    # Calling _linalgRealType(args, kwargs) (line 1883)
    _linalgRealType_call_result_136923 = invoke(stypy.reporting.localization.Localization(__file__, 1883, 13), _linalgRealType_136920, *[t_136921], **kwargs_136922)
    
    # Assigning a type to the variable 'real_t' (line 1883)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1883, 4), 'real_t', _linalgRealType_call_result_136923)
    
    # Assigning a Call to a Name (line 1884):
    
    # Assigning a Call to a Name (line 1884):
    
    # Call to zeros(...): (line 1884)
    # Processing the call arguments (line 1884)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1884)
    tuple_136925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1884)
    # Adding element type (line 1884)
    # Getting the type of 'ldb' (line 1884)
    ldb_136926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 19), 'ldb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1884, 19), tuple_136925, ldb_136926)
    # Adding element type (line 1884)
    # Getting the type of 'n_rhs' (line 1884)
    n_rhs_136927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 24), 'n_rhs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1884, 19), tuple_136925, n_rhs_136927)
    
    # Getting the type of 't' (line 1884)
    t_136928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 32), 't', False)
    # Processing the call keyword arguments (line 1884)
    kwargs_136929 = {}
    # Getting the type of 'zeros' (line 1884)
    zeros_136924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1884)
    zeros_call_result_136930 = invoke(stypy.reporting.localization.Localization(__file__, 1884, 12), zeros_136924, *[tuple_136925, t_136928], **kwargs_136929)
    
    # Assigning a type to the variable 'bstar' (line 1884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1884, 4), 'bstar', zeros_call_result_136930)
    
    # Assigning a Call to a Subscript (line 1885):
    
    # Assigning a Call to a Subscript (line 1885):
    
    # Call to copy(...): (line 1885)
    # Processing the call keyword arguments (line 1885)
    kwargs_136933 = {}
    # Getting the type of 'b' (line 1885)
    b_136931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 33), 'b', False)
    # Obtaining the member 'copy' of a type (line 1885)
    copy_136932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 33), b_136931, 'copy')
    # Calling copy(args, kwargs) (line 1885)
    copy_call_result_136934 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 33), copy_136932, *[], **kwargs_136933)
    
    # Getting the type of 'bstar' (line 1885)
    bstar_136935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 4), 'bstar')
    
    # Obtaining the type of the subscript
    int_136936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, 19), 'int')
    # Getting the type of 'b' (line 1885)
    b_136937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 11), 'b')
    # Obtaining the member 'shape' of a type (line 1885)
    shape_136938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 11), b_136937, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1885)
    getitem___136939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1885, 11), shape_136938, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1885)
    subscript_call_result_136940 = invoke(stypy.reporting.localization.Localization(__file__, 1885, 11), getitem___136939, int_136936)
    
    slice_136941 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1885, 4), None, subscript_call_result_136940, None)
    # Getting the type of 'n_rhs' (line 1885)
    n_rhs_136942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1885, 24), 'n_rhs')
    slice_136943 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1885, 4), None, n_rhs_136942, None)
    # Storing an element on a container (line 1885)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1885, 4), bstar_136935, ((slice_136941, slice_136943), copy_call_result_136934))
    
    # Assigning a Call to a Tuple (line 1886):
    
    # Assigning a Call to a Name:
    
    # Call to _fastCopyAndTranspose(...): (line 1886)
    # Processing the call arguments (line 1886)
    # Getting the type of 't' (line 1886)
    t_136945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 37), 't', False)
    # Getting the type of 'a' (line 1886)
    a_136946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 40), 'a', False)
    # Getting the type of 'bstar' (line 1886)
    bstar_136947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 43), 'bstar', False)
    # Processing the call keyword arguments (line 1886)
    kwargs_136948 = {}
    # Getting the type of '_fastCopyAndTranspose' (line 1886)
    _fastCopyAndTranspose_136944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 15), '_fastCopyAndTranspose', False)
    # Calling _fastCopyAndTranspose(args, kwargs) (line 1886)
    _fastCopyAndTranspose_call_result_136949 = invoke(stypy.reporting.localization.Localization(__file__, 1886, 15), _fastCopyAndTranspose_136944, *[t_136945, a_136946, bstar_136947], **kwargs_136948)
    
    # Assigning a type to the variable 'call_assignment_134367' (line 1886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'call_assignment_134367', _fastCopyAndTranspose_call_result_136949)
    
    # Assigning a Call to a Name (line 1886):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136953 = {}
    # Getting the type of 'call_assignment_134367' (line 1886)
    call_assignment_134367_136950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'call_assignment_134367', False)
    # Obtaining the member '__getitem__' of a type (line 1886)
    getitem___136951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 4), call_assignment_134367_136950, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136954 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136951, *[int_136952], **kwargs_136953)
    
    # Assigning a type to the variable 'call_assignment_134368' (line 1886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'call_assignment_134368', getitem___call_result_136954)
    
    # Assigning a Name to a Name (line 1886):
    # Getting the type of 'call_assignment_134368' (line 1886)
    call_assignment_134368_136955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'call_assignment_134368')
    # Assigning a type to the variable 'a' (line 1886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'a', call_assignment_134368_136955)
    
    # Assigning a Call to a Name (line 1886):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1886, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136959 = {}
    # Getting the type of 'call_assignment_134367' (line 1886)
    call_assignment_134367_136956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'call_assignment_134367', False)
    # Obtaining the member '__getitem__' of a type (line 1886)
    getitem___136957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1886, 4), call_assignment_134367_136956, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136960 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136957, *[int_136958], **kwargs_136959)
    
    # Assigning a type to the variable 'call_assignment_134369' (line 1886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'call_assignment_134369', getitem___call_result_136960)
    
    # Assigning a Name to a Name (line 1886):
    # Getting the type of 'call_assignment_134369' (line 1886)
    call_assignment_134369_136961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'call_assignment_134369')
    # Assigning a type to the variable 'bstar' (line 1886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 7), 'bstar', call_assignment_134369_136961)
    
    # Assigning a Call to a Tuple (line 1887):
    
    # Assigning a Call to a Name:
    
    # Call to _to_native_byte_order(...): (line 1887)
    # Processing the call arguments (line 1887)
    # Getting the type of 'a' (line 1887)
    a_136963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 37), 'a', False)
    # Getting the type of 'bstar' (line 1887)
    bstar_136964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 40), 'bstar', False)
    # Processing the call keyword arguments (line 1887)
    kwargs_136965 = {}
    # Getting the type of '_to_native_byte_order' (line 1887)
    _to_native_byte_order_136962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 15), '_to_native_byte_order', False)
    # Calling _to_native_byte_order(args, kwargs) (line 1887)
    _to_native_byte_order_call_result_136966 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 15), _to_native_byte_order_136962, *[a_136963, bstar_136964], **kwargs_136965)
    
    # Assigning a type to the variable 'call_assignment_134370' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'call_assignment_134370', _to_native_byte_order_call_result_136966)
    
    # Assigning a Call to a Name (line 1887):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136970 = {}
    # Getting the type of 'call_assignment_134370' (line 1887)
    call_assignment_134370_136967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'call_assignment_134370', False)
    # Obtaining the member '__getitem__' of a type (line 1887)
    getitem___136968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 4), call_assignment_134370_136967, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136971 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136968, *[int_136969], **kwargs_136970)
    
    # Assigning a type to the variable 'call_assignment_134371' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'call_assignment_134371', getitem___call_result_136971)
    
    # Assigning a Name to a Name (line 1887):
    # Getting the type of 'call_assignment_134371' (line 1887)
    call_assignment_134371_136972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'call_assignment_134371')
    # Assigning a type to the variable 'a' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'a', call_assignment_134371_136972)
    
    # Assigning a Call to a Name (line 1887):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_136975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 4), 'int')
    # Processing the call keyword arguments
    kwargs_136976 = {}
    # Getting the type of 'call_assignment_134370' (line 1887)
    call_assignment_134370_136973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'call_assignment_134370', False)
    # Obtaining the member '__getitem__' of a type (line 1887)
    getitem___136974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 4), call_assignment_134370_136973, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_136977 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___136974, *[int_136975], **kwargs_136976)
    
    # Assigning a type to the variable 'call_assignment_134372' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'call_assignment_134372', getitem___call_result_136977)
    
    # Assigning a Name to a Name (line 1887):
    # Getting the type of 'call_assignment_134372' (line 1887)
    call_assignment_134372_136978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'call_assignment_134372')
    # Assigning a type to the variable 'bstar' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 7), 'bstar', call_assignment_134372_136978)
    
    # Assigning a Call to a Name (line 1888):
    
    # Assigning a Call to a Name (line 1888):
    
    # Call to zeros(...): (line 1888)
    # Processing the call arguments (line 1888)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1888)
    tuple_136980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1888)
    # Adding element type (line 1888)
    
    # Call to min(...): (line 1888)
    # Processing the call arguments (line 1888)
    # Getting the type of 'm' (line 1888)
    m_136982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 19), 'm', False)
    # Getting the type of 'n' (line 1888)
    n_136983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 22), 'n', False)
    # Processing the call keyword arguments (line 1888)
    kwargs_136984 = {}
    # Getting the type of 'min' (line 1888)
    min_136981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 15), 'min', False)
    # Calling min(args, kwargs) (line 1888)
    min_call_result_136985 = invoke(stypy.reporting.localization.Localization(__file__, 1888, 15), min_136981, *[m_136982, n_136983], **kwargs_136984)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1888, 15), tuple_136980, min_call_result_136985)
    
    # Getting the type of 'real_t' (line 1888)
    real_t_136986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 28), 'real_t', False)
    # Processing the call keyword arguments (line 1888)
    kwargs_136987 = {}
    # Getting the type of 'zeros' (line 1888)
    zeros_136979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1888)
    zeros_call_result_136988 = invoke(stypy.reporting.localization.Localization(__file__, 1888, 8), zeros_136979, *[tuple_136980, real_t_136986], **kwargs_136987)
    
    # Assigning a type to the variable 's' (line 1888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1888, 4), 's', zeros_call_result_136988)
    
    # Assigning a Call to a Name (line 1889):
    
    # Assigning a Call to a Name (line 1889):
    
    # Call to max(...): (line 1889)
    # Processing the call arguments (line 1889)
    int_136990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 16), 'int')
    
    # Call to int(...): (line 1889)
    # Processing the call arguments (line 1889)
    
    # Call to log(...): (line 1889)
    # Processing the call arguments (line 1889)
    
    # Call to float(...): (line 1889)
    # Processing the call arguments (line 1889)
    
    # Call to min(...): (line 1889)
    # Processing the call arguments (line 1889)
    # Getting the type of 'm' (line 1889)
    m_136996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 44), 'm', False)
    # Getting the type of 'n' (line 1889)
    n_136997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 47), 'n', False)
    # Processing the call keyword arguments (line 1889)
    kwargs_136998 = {}
    # Getting the type of 'min' (line 1889)
    min_136995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 40), 'min', False)
    # Calling min(args, kwargs) (line 1889)
    min_call_result_136999 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 40), min_136995, *[m_136996, n_136997], **kwargs_136998)
    
    # Processing the call keyword arguments (line 1889)
    kwargs_137000 = {}
    # Getting the type of 'float' (line 1889)
    float_136994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 34), 'float', False)
    # Calling float(args, kwargs) (line 1889)
    float_call_result_137001 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 34), float_136994, *[min_call_result_136999], **kwargs_137000)
    
    float_137002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 51), 'float')
    # Applying the binary operator 'div' (line 1889)
    result_div_137003 = python_operator(stypy.reporting.localization.Localization(__file__, 1889, 34), 'div', float_call_result_137001, float_137002)
    
    # Processing the call keyword arguments (line 1889)
    kwargs_137004 = {}
    # Getting the type of 'math' (line 1889)
    math_136992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 24), 'math', False)
    # Obtaining the member 'log' of a type (line 1889)
    log_136993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 24), math_136992, 'log')
    # Calling log(args, kwargs) (line 1889)
    log_call_result_137005 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 24), log_136993, *[result_div_137003], **kwargs_137004)
    
    # Processing the call keyword arguments (line 1889)
    kwargs_137006 = {}
    # Getting the type of 'int' (line 1889)
    int_136991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 19), 'int', False)
    # Calling int(args, kwargs) (line 1889)
    int_call_result_137007 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 19), int_136991, *[log_call_result_137005], **kwargs_137006)
    
    int_137008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 60), 'int')
    # Applying the binary operator '+' (line 1889)
    result_add_137009 = python_operator(stypy.reporting.localization.Localization(__file__, 1889, 19), '+', int_call_result_137007, int_137008)
    
    # Processing the call keyword arguments (line 1889)
    kwargs_137010 = {}
    # Getting the type of 'max' (line 1889)
    max_136989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 11), 'max', False)
    # Calling max(args, kwargs) (line 1889)
    max_call_result_137011 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 11), max_136989, *[int_136990, result_add_137009], **kwargs_137010)
    
    # Assigning a type to the variable 'nlvl' (line 1889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'nlvl', max_call_result_137011)
    
    # Assigning a Call to a Name (line 1890):
    
    # Assigning a Call to a Name (line 1890):
    
    # Call to zeros(...): (line 1890)
    # Processing the call arguments (line 1890)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1890)
    tuple_137013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1890)
    # Adding element type (line 1890)
    int_137014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 19), 'int')
    
    # Call to min(...): (line 1890)
    # Processing the call arguments (line 1890)
    # Getting the type of 'm' (line 1890)
    m_137016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 25), 'm', False)
    # Getting the type of 'n' (line 1890)
    n_137017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 28), 'n', False)
    # Processing the call keyword arguments (line 1890)
    kwargs_137018 = {}
    # Getting the type of 'min' (line 1890)
    min_137015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 21), 'min', False)
    # Calling min(args, kwargs) (line 1890)
    min_call_result_137019 = invoke(stypy.reporting.localization.Localization(__file__, 1890, 21), min_137015, *[m_137016, n_137017], **kwargs_137018)
    
    # Applying the binary operator '*' (line 1890)
    result_mul_137020 = python_operator(stypy.reporting.localization.Localization(__file__, 1890, 19), '*', int_137014, min_call_result_137019)
    
    # Getting the type of 'nlvl' (line 1890)
    nlvl_137021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 31), 'nlvl', False)
    # Applying the binary operator '*' (line 1890)
    result_mul_137022 = python_operator(stypy.reporting.localization.Localization(__file__, 1890, 30), '*', result_mul_137020, nlvl_137021)
    
    int_137023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 36), 'int')
    
    # Call to min(...): (line 1890)
    # Processing the call arguments (line 1890)
    # Getting the type of 'm' (line 1890)
    m_137025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 43), 'm', False)
    # Getting the type of 'n' (line 1890)
    n_137026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 46), 'n', False)
    # Processing the call keyword arguments (line 1890)
    kwargs_137027 = {}
    # Getting the type of 'min' (line 1890)
    min_137024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 39), 'min', False)
    # Calling min(args, kwargs) (line 1890)
    min_call_result_137028 = invoke(stypy.reporting.localization.Localization(__file__, 1890, 39), min_137024, *[m_137025, n_137026], **kwargs_137027)
    
    # Applying the binary operator '*' (line 1890)
    result_mul_137029 = python_operator(stypy.reporting.localization.Localization(__file__, 1890, 36), '*', int_137023, min_call_result_137028)
    
    # Applying the binary operator '+' (line 1890)
    result_add_137030 = python_operator(stypy.reporting.localization.Localization(__file__, 1890, 19), '+', result_mul_137022, result_mul_137029)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1890, 19), tuple_137013, result_add_137030)
    
    # Getting the type of 'fortran_int' (line 1890)
    fortran_int_137031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 52), 'fortran_int', False)
    # Processing the call keyword arguments (line 1890)
    kwargs_137032 = {}
    # Getting the type of 'zeros' (line 1890)
    zeros_137012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1890)
    zeros_call_result_137033 = invoke(stypy.reporting.localization.Localization(__file__, 1890, 12), zeros_137012, *[tuple_137013, fortran_int_137031], **kwargs_137032)
    
    # Assigning a type to the variable 'iwork' (line 1890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 4), 'iwork', zeros_call_result_137033)
    
    
    # Call to isComplexType(...): (line 1891)
    # Processing the call arguments (line 1891)
    # Getting the type of 't' (line 1891)
    t_137035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 21), 't', False)
    # Processing the call keyword arguments (line 1891)
    kwargs_137036 = {}
    # Getting the type of 'isComplexType' (line 1891)
    isComplexType_137034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 7), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1891)
    isComplexType_call_result_137037 = invoke(stypy.reporting.localization.Localization(__file__, 1891, 7), isComplexType_137034, *[t_137035], **kwargs_137036)
    
    # Testing the type of an if condition (line 1891)
    if_condition_137038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1891, 4), isComplexType_call_result_137037)
    # Assigning a type to the variable 'if_condition_137038' (line 1891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 4), 'if_condition_137038', if_condition_137038)
    # SSA begins for if statement (line 1891)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1892):
    
    # Assigning a Attribute to a Name (line 1892):
    # Getting the type of 'lapack_lite' (line 1892)
    lapack_lite_137039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 25), 'lapack_lite')
    # Obtaining the member 'zgelsd' of a type (line 1892)
    zgelsd_137040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 25), lapack_lite_137039, 'zgelsd')
    # Assigning a type to the variable 'lapack_routine' (line 1892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'lapack_routine', zgelsd_137040)
    
    # Assigning a Num to a Name (line 1893):
    
    # Assigning a Num to a Name (line 1893):
    int_137041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, 16), 'int')
    # Assigning a type to the variable 'lwork' (line 1893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1893, 8), 'lwork', int_137041)
    
    # Assigning a Call to a Name (line 1894):
    
    # Assigning a Call to a Name (line 1894):
    
    # Call to zeros(...): (line 1894)
    # Processing the call arguments (line 1894)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1894)
    tuple_137043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1894)
    # Adding element type (line 1894)
    # Getting the type of 'lwork' (line 1894)
    lwork_137044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 23), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1894, 23), tuple_137043, lwork_137044)
    
    # Getting the type of 'real_t' (line 1894)
    real_t_137045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 32), 'real_t', False)
    # Processing the call keyword arguments (line 1894)
    kwargs_137046 = {}
    # Getting the type of 'zeros' (line 1894)
    zeros_137042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 16), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1894)
    zeros_call_result_137047 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 16), zeros_137042, *[tuple_137043, real_t_137045], **kwargs_137046)
    
    # Assigning a type to the variable 'rwork' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 8), 'rwork', zeros_call_result_137047)
    
    # Assigning a Call to a Name (line 1895):
    
    # Assigning a Call to a Name (line 1895):
    
    # Call to zeros(...): (line 1895)
    # Processing the call arguments (line 1895)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1895)
    tuple_137049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1895, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1895)
    # Adding element type (line 1895)
    # Getting the type of 'lwork' (line 1895)
    lwork_137050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 22), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1895, 22), tuple_137049, lwork_137050)
    
    # Getting the type of 't' (line 1895)
    t_137051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 31), 't', False)
    # Processing the call keyword arguments (line 1895)
    kwargs_137052 = {}
    # Getting the type of 'zeros' (line 1895)
    zeros_137048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 15), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1895)
    zeros_call_result_137053 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 15), zeros_137048, *[tuple_137049, t_137051], **kwargs_137052)
    
    # Assigning a type to the variable 'work' (line 1895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1895, 8), 'work', zeros_call_result_137053)
    
    # Assigning a Call to a Name (line 1896):
    
    # Assigning a Call to a Name (line 1896):
    
    # Call to lapack_routine(...): (line 1896)
    # Processing the call arguments (line 1896)
    # Getting the type of 'm' (line 1896)
    m_137055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 33), 'm', False)
    # Getting the type of 'n' (line 1896)
    n_137056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 36), 'n', False)
    # Getting the type of 'n_rhs' (line 1896)
    n_rhs_137057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 39), 'n_rhs', False)
    # Getting the type of 'a' (line 1896)
    a_137058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 46), 'a', False)
    # Getting the type of 'm' (line 1896)
    m_137059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 49), 'm', False)
    # Getting the type of 'bstar' (line 1896)
    bstar_137060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 52), 'bstar', False)
    # Getting the type of 'ldb' (line 1896)
    ldb_137061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 59), 'ldb', False)
    # Getting the type of 's' (line 1896)
    s_137062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 64), 's', False)
    # Getting the type of 'rcond' (line 1896)
    rcond_137063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 67), 'rcond', False)
    int_137064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 33), 'int')
    # Getting the type of 'work' (line 1897)
    work_137065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 36), 'work', False)
    int_137066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 42), 'int')
    # Getting the type of 'rwork' (line 1897)
    rwork_137067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 46), 'rwork', False)
    # Getting the type of 'iwork' (line 1897)
    iwork_137068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 53), 'iwork', False)
    int_137069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1897, 60), 'int')
    # Processing the call keyword arguments (line 1896)
    kwargs_137070 = {}
    # Getting the type of 'lapack_routine' (line 1896)
    lapack_routine_137054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 18), 'lapack_routine', False)
    # Calling lapack_routine(args, kwargs) (line 1896)
    lapack_routine_call_result_137071 = invoke(stypy.reporting.localization.Localization(__file__, 1896, 18), lapack_routine_137054, *[m_137055, n_137056, n_rhs_137057, a_137058, m_137059, bstar_137060, ldb_137061, s_137062, rcond_137063, int_137064, work_137065, int_137066, rwork_137067, iwork_137068, int_137069], **kwargs_137070)
    
    # Assigning a type to the variable 'results' (line 1896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1896, 8), 'results', lapack_routine_call_result_137071)
    
    # Assigning a Call to a Name (line 1898):
    
    # Assigning a Call to a Name (line 1898):
    
    # Call to int(...): (line 1898)
    # Processing the call arguments (line 1898)
    
    # Call to abs(...): (line 1898)
    # Processing the call arguments (line 1898)
    
    # Obtaining the type of the subscript
    int_137074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 29), 'int')
    # Getting the type of 'work' (line 1898)
    work_137075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 24), 'work', False)
    # Obtaining the member '__getitem__' of a type (line 1898)
    getitem___137076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 24), work_137075, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1898)
    subscript_call_result_137077 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 24), getitem___137076, int_137074)
    
    # Processing the call keyword arguments (line 1898)
    kwargs_137078 = {}
    # Getting the type of 'abs' (line 1898)
    abs_137073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 20), 'abs', False)
    # Calling abs(args, kwargs) (line 1898)
    abs_call_result_137079 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 20), abs_137073, *[subscript_call_result_137077], **kwargs_137078)
    
    # Processing the call keyword arguments (line 1898)
    kwargs_137080 = {}
    # Getting the type of 'int' (line 1898)
    int_137072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 16), 'int', False)
    # Calling int(args, kwargs) (line 1898)
    int_call_result_137081 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 16), int_137072, *[abs_call_result_137079], **kwargs_137080)
    
    # Assigning a type to the variable 'lwork' (line 1898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 8), 'lwork', int_call_result_137081)
    
    # Assigning a Call to a Name (line 1899):
    
    # Assigning a Call to a Name (line 1899):
    
    # Call to zeros(...): (line 1899)
    # Processing the call arguments (line 1899)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1899)
    tuple_137083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1899)
    # Adding element type (line 1899)
    # Getting the type of 'lwork' (line 1899)
    lwork_137084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 23), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1899, 23), tuple_137083, lwork_137084)
    
    # Getting the type of 'real_t' (line 1899)
    real_t_137085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 32), 'real_t', False)
    # Processing the call keyword arguments (line 1899)
    kwargs_137086 = {}
    # Getting the type of 'zeros' (line 1899)
    zeros_137082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 16), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1899)
    zeros_call_result_137087 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 16), zeros_137082, *[tuple_137083, real_t_137085], **kwargs_137086)
    
    # Assigning a type to the variable 'rwork' (line 1899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 8), 'rwork', zeros_call_result_137087)
    
    # Assigning a Call to a Name (line 1900):
    
    # Assigning a Call to a Name (line 1900):
    
    # Call to zeros(...): (line 1900)
    # Processing the call arguments (line 1900)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1900)
    tuple_137089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1900, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1900)
    # Adding element type (line 1900)
    # Getting the type of 'm' (line 1900)
    m_137090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 24), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1900, 24), tuple_137089, m_137090)
    # Adding element type (line 1900)
    # Getting the type of 'n' (line 1900)
    n_137091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 27), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1900, 24), tuple_137089, n_137091)
    
    # Getting the type of 'real_t' (line 1900)
    real_t_137092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 31), 'real_t', False)
    # Processing the call keyword arguments (line 1900)
    kwargs_137093 = {}
    # Getting the type of 'zeros' (line 1900)
    zeros_137088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 17), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1900)
    zeros_call_result_137094 = invoke(stypy.reporting.localization.Localization(__file__, 1900, 17), zeros_137088, *[tuple_137089, real_t_137092], **kwargs_137093)
    
    # Assigning a type to the variable 'a_real' (line 1900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1900, 8), 'a_real', zeros_call_result_137094)
    
    # Assigning a Call to a Name (line 1901):
    
    # Assigning a Call to a Name (line 1901):
    
    # Call to zeros(...): (line 1901)
    # Processing the call arguments (line 1901)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1901)
    tuple_137096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1901, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1901)
    # Adding element type (line 1901)
    # Getting the type of 'ldb' (line 1901)
    ldb_137097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 28), 'ldb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1901, 28), tuple_137096, ldb_137097)
    # Adding element type (line 1901)
    # Getting the type of 'n_rhs' (line 1901)
    n_rhs_137098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 33), 'n_rhs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1901, 28), tuple_137096, n_rhs_137098)
    
    # Getting the type of 'real_t' (line 1901)
    real_t_137099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 42), 'real_t', False)
    # Processing the call keyword arguments (line 1901)
    kwargs_137100 = {}
    # Getting the type of 'zeros' (line 1901)
    zeros_137095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 21), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1901)
    zeros_call_result_137101 = invoke(stypy.reporting.localization.Localization(__file__, 1901, 21), zeros_137095, *[tuple_137096, real_t_137099], **kwargs_137100)
    
    # Assigning a type to the variable 'bstar_real' (line 1901)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1901, 8), 'bstar_real', zeros_call_result_137101)
    
    # Assigning a Call to a Name (line 1902):
    
    # Assigning a Call to a Name (line 1902):
    
    # Call to dgelsd(...): (line 1902)
    # Processing the call arguments (line 1902)
    # Getting the type of 'm' (line 1902)
    m_137104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 37), 'm', False)
    # Getting the type of 'n' (line 1902)
    n_137105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 40), 'n', False)
    # Getting the type of 'n_rhs' (line 1902)
    n_rhs_137106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 43), 'n_rhs', False)
    # Getting the type of 'a_real' (line 1902)
    a_real_137107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 50), 'a_real', False)
    # Getting the type of 'm' (line 1902)
    m_137108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 58), 'm', False)
    # Getting the type of 'bstar_real' (line 1903)
    bstar_real_137109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 37), 'bstar_real', False)
    # Getting the type of 'ldb' (line 1903)
    ldb_137110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 49), 'ldb', False)
    # Getting the type of 's' (line 1903)
    s_137111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 54), 's', False)
    # Getting the type of 'rcond' (line 1903)
    rcond_137112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 57), 'rcond', False)
    int_137113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 37), 'int')
    # Getting the type of 'rwork' (line 1904)
    rwork_137114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 40), 'rwork', False)
    int_137115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 47), 'int')
    # Getting the type of 'iwork' (line 1904)
    iwork_137116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 51), 'iwork', False)
    int_137117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 58), 'int')
    # Processing the call keyword arguments (line 1902)
    kwargs_137118 = {}
    # Getting the type of 'lapack_lite' (line 1902)
    lapack_lite_137102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 18), 'lapack_lite', False)
    # Obtaining the member 'dgelsd' of a type (line 1902)
    dgelsd_137103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1902, 18), lapack_lite_137102, 'dgelsd')
    # Calling dgelsd(args, kwargs) (line 1902)
    dgelsd_call_result_137119 = invoke(stypy.reporting.localization.Localization(__file__, 1902, 18), dgelsd_137103, *[m_137104, n_137105, n_rhs_137106, a_real_137107, m_137108, bstar_real_137109, ldb_137110, s_137111, rcond_137112, int_137113, rwork_137114, int_137115, iwork_137116, int_137117], **kwargs_137118)
    
    # Assigning a type to the variable 'results' (line 1902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1902, 8), 'results', dgelsd_call_result_137119)
    
    # Assigning a Call to a Name (line 1905):
    
    # Assigning a Call to a Name (line 1905):
    
    # Call to int(...): (line 1905)
    # Processing the call arguments (line 1905)
    
    # Obtaining the type of the subscript
    int_137121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1905, 27), 'int')
    # Getting the type of 'rwork' (line 1905)
    rwork_137122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 21), 'rwork', False)
    # Obtaining the member '__getitem__' of a type (line 1905)
    getitem___137123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1905, 21), rwork_137122, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1905)
    subscript_call_result_137124 = invoke(stypy.reporting.localization.Localization(__file__, 1905, 21), getitem___137123, int_137121)
    
    # Processing the call keyword arguments (line 1905)
    kwargs_137125 = {}
    # Getting the type of 'int' (line 1905)
    int_137120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 17), 'int', False)
    # Calling int(args, kwargs) (line 1905)
    int_call_result_137126 = invoke(stypy.reporting.localization.Localization(__file__, 1905, 17), int_137120, *[subscript_call_result_137124], **kwargs_137125)
    
    # Assigning a type to the variable 'lrwork' (line 1905)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1905, 8), 'lrwork', int_call_result_137126)
    
    # Assigning a Call to a Name (line 1906):
    
    # Assigning a Call to a Name (line 1906):
    
    # Call to zeros(...): (line 1906)
    # Processing the call arguments (line 1906)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1906)
    tuple_137128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1906, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1906)
    # Adding element type (line 1906)
    # Getting the type of 'lwork' (line 1906)
    lwork_137129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 22), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1906, 22), tuple_137128, lwork_137129)
    
    # Getting the type of 't' (line 1906)
    t_137130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 31), 't', False)
    # Processing the call keyword arguments (line 1906)
    kwargs_137131 = {}
    # Getting the type of 'zeros' (line 1906)
    zeros_137127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 15), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1906)
    zeros_call_result_137132 = invoke(stypy.reporting.localization.Localization(__file__, 1906, 15), zeros_137127, *[tuple_137128, t_137130], **kwargs_137131)
    
    # Assigning a type to the variable 'work' (line 1906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1906, 8), 'work', zeros_call_result_137132)
    
    # Assigning a Call to a Name (line 1907):
    
    # Assigning a Call to a Name (line 1907):
    
    # Call to zeros(...): (line 1907)
    # Processing the call arguments (line 1907)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1907)
    tuple_137134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1907)
    # Adding element type (line 1907)
    # Getting the type of 'lrwork' (line 1907)
    lrwork_137135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 23), 'lrwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 23), tuple_137134, lrwork_137135)
    
    # Getting the type of 'real_t' (line 1907)
    real_t_137136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 33), 'real_t', False)
    # Processing the call keyword arguments (line 1907)
    kwargs_137137 = {}
    # Getting the type of 'zeros' (line 1907)
    zeros_137133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 16), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1907)
    zeros_call_result_137138 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 16), zeros_137133, *[tuple_137134, real_t_137136], **kwargs_137137)
    
    # Assigning a type to the variable 'rwork' (line 1907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 8), 'rwork', zeros_call_result_137138)
    
    # Assigning a Call to a Name (line 1908):
    
    # Assigning a Call to a Name (line 1908):
    
    # Call to lapack_routine(...): (line 1908)
    # Processing the call arguments (line 1908)
    # Getting the type of 'm' (line 1908)
    m_137140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 33), 'm', False)
    # Getting the type of 'n' (line 1908)
    n_137141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 36), 'n', False)
    # Getting the type of 'n_rhs' (line 1908)
    n_rhs_137142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 39), 'n_rhs', False)
    # Getting the type of 'a' (line 1908)
    a_137143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 46), 'a', False)
    # Getting the type of 'm' (line 1908)
    m_137144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 49), 'm', False)
    # Getting the type of 'bstar' (line 1908)
    bstar_137145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 52), 'bstar', False)
    # Getting the type of 'ldb' (line 1908)
    ldb_137146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 59), 'ldb', False)
    # Getting the type of 's' (line 1908)
    s_137147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 64), 's', False)
    # Getting the type of 'rcond' (line 1908)
    rcond_137148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 67), 'rcond', False)
    int_137149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 33), 'int')
    # Getting the type of 'work' (line 1909)
    work_137150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 36), 'work', False)
    # Getting the type of 'lwork' (line 1909)
    lwork_137151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 42), 'lwork', False)
    # Getting the type of 'rwork' (line 1909)
    rwork_137152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 49), 'rwork', False)
    # Getting the type of 'iwork' (line 1909)
    iwork_137153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 56), 'iwork', False)
    int_137154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 63), 'int')
    # Processing the call keyword arguments (line 1908)
    kwargs_137155 = {}
    # Getting the type of 'lapack_routine' (line 1908)
    lapack_routine_137139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 18), 'lapack_routine', False)
    # Calling lapack_routine(args, kwargs) (line 1908)
    lapack_routine_call_result_137156 = invoke(stypy.reporting.localization.Localization(__file__, 1908, 18), lapack_routine_137139, *[m_137140, n_137141, n_rhs_137142, a_137143, m_137144, bstar_137145, ldb_137146, s_137147, rcond_137148, int_137149, work_137150, lwork_137151, rwork_137152, iwork_137153, int_137154], **kwargs_137155)
    
    # Assigning a type to the variable 'results' (line 1908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 'results', lapack_routine_call_result_137156)
    # SSA branch for the else part of an if statement (line 1891)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 1911):
    
    # Assigning a Attribute to a Name (line 1911):
    # Getting the type of 'lapack_lite' (line 1911)
    lapack_lite_137157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 25), 'lapack_lite')
    # Obtaining the member 'dgelsd' of a type (line 1911)
    dgelsd_137158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1911, 25), lapack_lite_137157, 'dgelsd')
    # Assigning a type to the variable 'lapack_routine' (line 1911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1911, 8), 'lapack_routine', dgelsd_137158)
    
    # Assigning a Num to a Name (line 1912):
    
    # Assigning a Num to a Name (line 1912):
    int_137159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 16), 'int')
    # Assigning a type to the variable 'lwork' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 8), 'lwork', int_137159)
    
    # Assigning a Call to a Name (line 1913):
    
    # Assigning a Call to a Name (line 1913):
    
    # Call to zeros(...): (line 1913)
    # Processing the call arguments (line 1913)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1913)
    tuple_137161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1913, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1913)
    # Adding element type (line 1913)
    # Getting the type of 'lwork' (line 1913)
    lwork_137162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 22), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1913, 22), tuple_137161, lwork_137162)
    
    # Getting the type of 't' (line 1913)
    t_137163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 31), 't', False)
    # Processing the call keyword arguments (line 1913)
    kwargs_137164 = {}
    # Getting the type of 'zeros' (line 1913)
    zeros_137160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 15), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1913)
    zeros_call_result_137165 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 15), zeros_137160, *[tuple_137161, t_137163], **kwargs_137164)
    
    # Assigning a type to the variable 'work' (line 1913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1913, 8), 'work', zeros_call_result_137165)
    
    # Assigning a Call to a Name (line 1914):
    
    # Assigning a Call to a Name (line 1914):
    
    # Call to lapack_routine(...): (line 1914)
    # Processing the call arguments (line 1914)
    # Getting the type of 'm' (line 1914)
    m_137167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 33), 'm', False)
    # Getting the type of 'n' (line 1914)
    n_137168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 36), 'n', False)
    # Getting the type of 'n_rhs' (line 1914)
    n_rhs_137169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 39), 'n_rhs', False)
    # Getting the type of 'a' (line 1914)
    a_137170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 46), 'a', False)
    # Getting the type of 'm' (line 1914)
    m_137171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 49), 'm', False)
    # Getting the type of 'bstar' (line 1914)
    bstar_137172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 52), 'bstar', False)
    # Getting the type of 'ldb' (line 1914)
    ldb_137173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 59), 'ldb', False)
    # Getting the type of 's' (line 1914)
    s_137174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 64), 's', False)
    # Getting the type of 'rcond' (line 1914)
    rcond_137175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 67), 'rcond', False)
    int_137176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 33), 'int')
    # Getting the type of 'work' (line 1915)
    work_137177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 36), 'work', False)
    int_137178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 42), 'int')
    # Getting the type of 'iwork' (line 1915)
    iwork_137179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 46), 'iwork', False)
    int_137180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 53), 'int')
    # Processing the call keyword arguments (line 1914)
    kwargs_137181 = {}
    # Getting the type of 'lapack_routine' (line 1914)
    lapack_routine_137166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 18), 'lapack_routine', False)
    # Calling lapack_routine(args, kwargs) (line 1914)
    lapack_routine_call_result_137182 = invoke(stypy.reporting.localization.Localization(__file__, 1914, 18), lapack_routine_137166, *[m_137167, n_137168, n_rhs_137169, a_137170, m_137171, bstar_137172, ldb_137173, s_137174, rcond_137175, int_137176, work_137177, int_137178, iwork_137179, int_137180], **kwargs_137181)
    
    # Assigning a type to the variable 'results' (line 1914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'results', lapack_routine_call_result_137182)
    
    # Assigning a Call to a Name (line 1916):
    
    # Assigning a Call to a Name (line 1916):
    
    # Call to int(...): (line 1916)
    # Processing the call arguments (line 1916)
    
    # Obtaining the type of the subscript
    int_137184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 25), 'int')
    # Getting the type of 'work' (line 1916)
    work_137185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 20), 'work', False)
    # Obtaining the member '__getitem__' of a type (line 1916)
    getitem___137186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 20), work_137185, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1916)
    subscript_call_result_137187 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 20), getitem___137186, int_137184)
    
    # Processing the call keyword arguments (line 1916)
    kwargs_137188 = {}
    # Getting the type of 'int' (line 1916)
    int_137183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 16), 'int', False)
    # Calling int(args, kwargs) (line 1916)
    int_call_result_137189 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 16), int_137183, *[subscript_call_result_137187], **kwargs_137188)
    
    # Assigning a type to the variable 'lwork' (line 1916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 8), 'lwork', int_call_result_137189)
    
    # Assigning a Call to a Name (line 1917):
    
    # Assigning a Call to a Name (line 1917):
    
    # Call to zeros(...): (line 1917)
    # Processing the call arguments (line 1917)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1917)
    tuple_137191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1917)
    # Adding element type (line 1917)
    # Getting the type of 'lwork' (line 1917)
    lwork_137192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 22), 'lwork', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 22), tuple_137191, lwork_137192)
    
    # Getting the type of 't' (line 1917)
    t_137193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 31), 't', False)
    # Processing the call keyword arguments (line 1917)
    kwargs_137194 = {}
    # Getting the type of 'zeros' (line 1917)
    zeros_137190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 15), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1917)
    zeros_call_result_137195 = invoke(stypy.reporting.localization.Localization(__file__, 1917, 15), zeros_137190, *[tuple_137191, t_137193], **kwargs_137194)
    
    # Assigning a type to the variable 'work' (line 1917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1917, 8), 'work', zeros_call_result_137195)
    
    # Assigning a Call to a Name (line 1918):
    
    # Assigning a Call to a Name (line 1918):
    
    # Call to lapack_routine(...): (line 1918)
    # Processing the call arguments (line 1918)
    # Getting the type of 'm' (line 1918)
    m_137197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 33), 'm', False)
    # Getting the type of 'n' (line 1918)
    n_137198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 36), 'n', False)
    # Getting the type of 'n_rhs' (line 1918)
    n_rhs_137199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 39), 'n_rhs', False)
    # Getting the type of 'a' (line 1918)
    a_137200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 46), 'a', False)
    # Getting the type of 'm' (line 1918)
    m_137201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 49), 'm', False)
    # Getting the type of 'bstar' (line 1918)
    bstar_137202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 52), 'bstar', False)
    # Getting the type of 'ldb' (line 1918)
    ldb_137203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 59), 'ldb', False)
    # Getting the type of 's' (line 1918)
    s_137204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 64), 's', False)
    # Getting the type of 'rcond' (line 1918)
    rcond_137205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 67), 'rcond', False)
    int_137206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 33), 'int')
    # Getting the type of 'work' (line 1919)
    work_137207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 36), 'work', False)
    # Getting the type of 'lwork' (line 1919)
    lwork_137208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 42), 'lwork', False)
    # Getting the type of 'iwork' (line 1919)
    iwork_137209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 49), 'iwork', False)
    int_137210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 56), 'int')
    # Processing the call keyword arguments (line 1918)
    kwargs_137211 = {}
    # Getting the type of 'lapack_routine' (line 1918)
    lapack_routine_137196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 18), 'lapack_routine', False)
    # Calling lapack_routine(args, kwargs) (line 1918)
    lapack_routine_call_result_137212 = invoke(stypy.reporting.localization.Localization(__file__, 1918, 18), lapack_routine_137196, *[m_137197, n_137198, n_rhs_137199, a_137200, m_137201, bstar_137202, ldb_137203, s_137204, rcond_137205, int_137206, work_137207, lwork_137208, iwork_137209, int_137210], **kwargs_137211)
    
    # Assigning a type to the variable 'results' (line 1918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 8), 'results', lapack_routine_call_result_137212)
    # SSA join for if statement (line 1891)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    str_137213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 15), 'str', 'info')
    # Getting the type of 'results' (line 1920)
    results_137214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 7), 'results')
    # Obtaining the member '__getitem__' of a type (line 1920)
    getitem___137215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 7), results_137214, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1920)
    subscript_call_result_137216 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 7), getitem___137215, str_137213)
    
    int_137217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 25), 'int')
    # Applying the binary operator '>' (line 1920)
    result_gt_137218 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 7), '>', subscript_call_result_137216, int_137217)
    
    # Testing the type of an if condition (line 1920)
    if_condition_137219 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1920, 4), result_gt_137218)
    # Assigning a type to the variable 'if_condition_137219' (line 1920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 4), 'if_condition_137219', if_condition_137219)
    # SSA begins for if statement (line 1920)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to LinAlgError(...): (line 1921)
    # Processing the call arguments (line 1921)
    str_137221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 26), 'str', 'SVD did not converge in Linear Least Squares')
    # Processing the call keyword arguments (line 1921)
    kwargs_137222 = {}
    # Getting the type of 'LinAlgError' (line 1921)
    LinAlgError_137220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 14), 'LinAlgError', False)
    # Calling LinAlgError(args, kwargs) (line 1921)
    LinAlgError_call_result_137223 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 14), LinAlgError_137220, *[str_137221], **kwargs_137222)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1921, 8), LinAlgError_call_result_137223, 'raise parameter', BaseException)
    # SSA join for if statement (line 1920)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1922):
    
    # Assigning a Call to a Name (line 1922):
    
    # Call to array(...): (line 1922)
    # Processing the call arguments (line 1922)
    
    # Obtaining an instance of the builtin type 'list' (line 1922)
    list_137225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1922)
    
    # Getting the type of 'result_real_t' (line 1922)
    result_real_t_137226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 23), 'result_real_t', False)
    # Processing the call keyword arguments (line 1922)
    kwargs_137227 = {}
    # Getting the type of 'array' (line 1922)
    array_137224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 13), 'array', False)
    # Calling array(args, kwargs) (line 1922)
    array_call_result_137228 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 13), array_137224, *[list_137225, result_real_t_137226], **kwargs_137227)
    
    # Assigning a type to the variable 'resids' (line 1922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 4), 'resids', array_call_result_137228)
    
    # Getting the type of 'is_1d' (line 1923)
    is_1d_137229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 7), 'is_1d')
    # Testing the type of an if condition (line 1923)
    if_condition_137230 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1923, 4), is_1d_137229)
    # Assigning a type to the variable 'if_condition_137230' (line 1923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 4), 'if_condition_137230', if_condition_137230)
    # SSA begins for if statement (line 1923)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1924):
    
    # Assigning a Call to a Name (line 1924):
    
    # Call to array(...): (line 1924)
    # Processing the call arguments (line 1924)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1924)
    n_137232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 32), 'n', False)
    slice_137233 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1924, 18), None, n_137232, None)
    
    # Call to ravel(...): (line 1924)
    # Processing the call arguments (line 1924)
    # Getting the type of 'bstar' (line 1924)
    bstar_137235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 24), 'bstar', False)
    # Processing the call keyword arguments (line 1924)
    kwargs_137236 = {}
    # Getting the type of 'ravel' (line 1924)
    ravel_137234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 18), 'ravel', False)
    # Calling ravel(args, kwargs) (line 1924)
    ravel_call_result_137237 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 18), ravel_137234, *[bstar_137235], **kwargs_137236)
    
    # Obtaining the member '__getitem__' of a type (line 1924)
    getitem___137238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 18), ravel_call_result_137237, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1924)
    subscript_call_result_137239 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 18), getitem___137238, slice_137233)
    
    # Processing the call keyword arguments (line 1924)
    # Getting the type of 'result_t' (line 1924)
    result_t_137240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 42), 'result_t', False)
    keyword_137241 = result_t_137240
    # Getting the type of 'True' (line 1924)
    True_137242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 57), 'True', False)
    keyword_137243 = True_137242
    kwargs_137244 = {'dtype': keyword_137241, 'copy': keyword_137243}
    # Getting the type of 'array' (line 1924)
    array_137231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 12), 'array', False)
    # Calling array(args, kwargs) (line 1924)
    array_call_result_137245 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 12), array_137231, *[subscript_call_result_137239], **kwargs_137244)
    
    # Assigning a type to the variable 'x' (line 1924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 8), 'x', array_call_result_137245)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    str_137246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, 19), 'str', 'rank')
    # Getting the type of 'results' (line 1925)
    results_137247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 11), 'results')
    # Obtaining the member '__getitem__' of a type (line 1925)
    getitem___137248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1925, 11), results_137247, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1925)
    subscript_call_result_137249 = invoke(stypy.reporting.localization.Localization(__file__, 1925, 11), getitem___137248, str_137246)
    
    # Getting the type of 'n' (line 1925)
    n_137250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 30), 'n')
    # Applying the binary operator '==' (line 1925)
    result_eq_137251 = python_operator(stypy.reporting.localization.Localization(__file__, 1925, 11), '==', subscript_call_result_137249, n_137250)
    
    
    # Getting the type of 'm' (line 1925)
    m_137252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 36), 'm')
    # Getting the type of 'n' (line 1925)
    n_137253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 40), 'n')
    # Applying the binary operator '>' (line 1925)
    result_gt_137254 = python_operator(stypy.reporting.localization.Localization(__file__, 1925, 36), '>', m_137252, n_137253)
    
    # Applying the binary operator 'and' (line 1925)
    result_and_keyword_137255 = python_operator(stypy.reporting.localization.Localization(__file__, 1925, 11), 'and', result_eq_137251, result_gt_137254)
    
    # Testing the type of an if condition (line 1925)
    if_condition_137256 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1925, 8), result_and_keyword_137255)
    # Assigning a type to the variable 'if_condition_137256' (line 1925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 8), 'if_condition_137256', if_condition_137256)
    # SSA begins for if statement (line 1925)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isComplexType(...): (line 1926)
    # Processing the call arguments (line 1926)
    # Getting the type of 't' (line 1926)
    t_137258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 29), 't', False)
    # Processing the call keyword arguments (line 1926)
    kwargs_137259 = {}
    # Getting the type of 'isComplexType' (line 1926)
    isComplexType_137257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 15), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1926)
    isComplexType_call_result_137260 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 15), isComplexType_137257, *[t_137258], **kwargs_137259)
    
    # Testing the type of an if condition (line 1926)
    if_condition_137261 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1926, 12), isComplexType_call_result_137260)
    # Assigning a type to the variable 'if_condition_137261' (line 1926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 12), 'if_condition_137261', if_condition_137261)
    # SSA begins for if statement (line 1926)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1927):
    
    # Assigning a Call to a Name (line 1927):
    
    # Call to array(...): (line 1927)
    # Processing the call arguments (line 1927)
    
    # Obtaining an instance of the builtin type 'list' (line 1927)
    list_137263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1927)
    # Adding element type (line 1927)
    
    # Call to sum(...): (line 1927)
    # Processing the call arguments (line 1927)
    
    # Call to abs(...): (line 1927)
    # Processing the call arguments (line 1927)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1927)
    n_137266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 53), 'n', False)
    slice_137267 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1927, 40), n_137266, None, None)
    
    # Call to ravel(...): (line 1927)
    # Processing the call arguments (line 1927)
    # Getting the type of 'bstar' (line 1927)
    bstar_137269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 46), 'bstar', False)
    # Processing the call keyword arguments (line 1927)
    kwargs_137270 = {}
    # Getting the type of 'ravel' (line 1927)
    ravel_137268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 40), 'ravel', False)
    # Calling ravel(args, kwargs) (line 1927)
    ravel_call_result_137271 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 40), ravel_137268, *[bstar_137269], **kwargs_137270)
    
    # Obtaining the member '__getitem__' of a type (line 1927)
    getitem___137272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1927, 40), ravel_call_result_137271, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1927)
    subscript_call_result_137273 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 40), getitem___137272, slice_137267)
    
    # Processing the call keyword arguments (line 1927)
    kwargs_137274 = {}
    # Getting the type of 'abs' (line 1927)
    abs_137265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 36), 'abs', False)
    # Calling abs(args, kwargs) (line 1927)
    abs_call_result_137275 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 36), abs_137265, *[subscript_call_result_137273], **kwargs_137274)
    
    int_137276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 59), 'int')
    # Applying the binary operator '**' (line 1927)
    result_pow_137277 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 36), '**', abs_call_result_137275, int_137276)
    
    # Processing the call keyword arguments (line 1927)
    kwargs_137278 = {}
    # Getting the type of 'sum' (line 1927)
    sum_137264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 32), 'sum', False)
    # Calling sum(args, kwargs) (line 1927)
    sum_call_result_137279 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 32), sum_137264, *[result_pow_137277], **kwargs_137278)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1927, 31), list_137263, sum_call_result_137279)
    
    # Processing the call keyword arguments (line 1927)
    # Getting the type of 'result_real_t' (line 1928)
    result_real_t_137280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 37), 'result_real_t', False)
    keyword_137281 = result_real_t_137280
    kwargs_137282 = {'dtype': keyword_137281}
    # Getting the type of 'array' (line 1927)
    array_137262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 25), 'array', False)
    # Calling array(args, kwargs) (line 1927)
    array_call_result_137283 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 25), array_137262, *[list_137263], **kwargs_137282)
    
    # Assigning a type to the variable 'resids' (line 1927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 16), 'resids', array_call_result_137283)
    # SSA branch for the else part of an if statement (line 1926)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1930):
    
    # Assigning a Call to a Name (line 1930):
    
    # Call to array(...): (line 1930)
    # Processing the call arguments (line 1930)
    
    # Obtaining an instance of the builtin type 'list' (line 1930)
    list_137285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1930)
    # Adding element type (line 1930)
    
    # Call to sum(...): (line 1930)
    # Processing the call arguments (line 1930)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1930)
    n_137287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 50), 'n', False)
    slice_137288 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1930, 37), n_137287, None, None)
    
    # Call to ravel(...): (line 1930)
    # Processing the call arguments (line 1930)
    # Getting the type of 'bstar' (line 1930)
    bstar_137290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 43), 'bstar', False)
    # Processing the call keyword arguments (line 1930)
    kwargs_137291 = {}
    # Getting the type of 'ravel' (line 1930)
    ravel_137289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 37), 'ravel', False)
    # Calling ravel(args, kwargs) (line 1930)
    ravel_call_result_137292 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 37), ravel_137289, *[bstar_137290], **kwargs_137291)
    
    # Obtaining the member '__getitem__' of a type (line 1930)
    getitem___137293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1930, 37), ravel_call_result_137292, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1930)
    subscript_call_result_137294 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 37), getitem___137293, slice_137288)
    
    int_137295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, 56), 'int')
    # Applying the binary operator '**' (line 1930)
    result_pow_137296 = python_operator(stypy.reporting.localization.Localization(__file__, 1930, 36), '**', subscript_call_result_137294, int_137295)
    
    # Processing the call keyword arguments (line 1930)
    kwargs_137297 = {}
    # Getting the type of 'sum' (line 1930)
    sum_137286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 32), 'sum', False)
    # Calling sum(args, kwargs) (line 1930)
    sum_call_result_137298 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 32), sum_137286, *[result_pow_137296], **kwargs_137297)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1930, 31), list_137285, sum_call_result_137298)
    
    # Processing the call keyword arguments (line 1930)
    # Getting the type of 'result_real_t' (line 1931)
    result_real_t_137299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 37), 'result_real_t', False)
    keyword_137300 = result_real_t_137299
    kwargs_137301 = {'dtype': keyword_137300}
    # Getting the type of 'array' (line 1930)
    array_137284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 25), 'array', False)
    # Calling array(args, kwargs) (line 1930)
    array_call_result_137302 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 25), array_137284, *[list_137285], **kwargs_137301)
    
    # Assigning a type to the variable 'resids' (line 1930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 16), 'resids', array_call_result_137302)
    # SSA join for if statement (line 1926)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1925)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1923)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1933):
    
    # Assigning a Call to a Name (line 1933):
    
    # Call to array(...): (line 1933)
    # Processing the call arguments (line 1933)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1933)
    n_137304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 36), 'n', False)
    slice_137305 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1933, 18), None, n_137304, None)
    slice_137306 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1933, 18), None, None, None)
    
    # Call to transpose(...): (line 1933)
    # Processing the call arguments (line 1933)
    # Getting the type of 'bstar' (line 1933)
    bstar_137308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 28), 'bstar', False)
    # Processing the call keyword arguments (line 1933)
    kwargs_137309 = {}
    # Getting the type of 'transpose' (line 1933)
    transpose_137307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 18), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1933)
    transpose_call_result_137310 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 18), transpose_137307, *[bstar_137308], **kwargs_137309)
    
    # Obtaining the member '__getitem__' of a type (line 1933)
    getitem___137311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 18), transpose_call_result_137310, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1933)
    subscript_call_result_137312 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 18), getitem___137311, (slice_137305, slice_137306))
    
    # Processing the call keyword arguments (line 1933)
    # Getting the type of 'result_t' (line 1933)
    result_t_137313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 48), 'result_t', False)
    keyword_137314 = result_t_137313
    # Getting the type of 'True' (line 1933)
    True_137315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 63), 'True', False)
    keyword_137316 = True_137315
    kwargs_137317 = {'dtype': keyword_137314, 'copy': keyword_137316}
    # Getting the type of 'array' (line 1933)
    array_137303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 12), 'array', False)
    # Calling array(args, kwargs) (line 1933)
    array_call_result_137318 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 12), array_137303, *[subscript_call_result_137312], **kwargs_137317)
    
    # Assigning a type to the variable 'x' (line 1933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 8), 'x', array_call_result_137318)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    str_137319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1934, 19), 'str', 'rank')
    # Getting the type of 'results' (line 1934)
    results_137320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 11), 'results')
    # Obtaining the member '__getitem__' of a type (line 1934)
    getitem___137321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1934, 11), results_137320, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1934)
    subscript_call_result_137322 = invoke(stypy.reporting.localization.Localization(__file__, 1934, 11), getitem___137321, str_137319)
    
    # Getting the type of 'n' (line 1934)
    n_137323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 30), 'n')
    # Applying the binary operator '==' (line 1934)
    result_eq_137324 = python_operator(stypy.reporting.localization.Localization(__file__, 1934, 11), '==', subscript_call_result_137322, n_137323)
    
    
    # Getting the type of 'm' (line 1934)
    m_137325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 36), 'm')
    # Getting the type of 'n' (line 1934)
    n_137326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 40), 'n')
    # Applying the binary operator '>' (line 1934)
    result_gt_137327 = python_operator(stypy.reporting.localization.Localization(__file__, 1934, 36), '>', m_137325, n_137326)
    
    # Applying the binary operator 'and' (line 1934)
    result_and_keyword_137328 = python_operator(stypy.reporting.localization.Localization(__file__, 1934, 11), 'and', result_eq_137324, result_gt_137327)
    
    # Testing the type of an if condition (line 1934)
    if_condition_137329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1934, 8), result_and_keyword_137328)
    # Assigning a type to the variable 'if_condition_137329' (line 1934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 8), 'if_condition_137329', if_condition_137329)
    # SSA begins for if statement (line 1934)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isComplexType(...): (line 1935)
    # Processing the call arguments (line 1935)
    # Getting the type of 't' (line 1935)
    t_137331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 29), 't', False)
    # Processing the call keyword arguments (line 1935)
    kwargs_137332 = {}
    # Getting the type of 'isComplexType' (line 1935)
    isComplexType_137330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 15), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 1935)
    isComplexType_call_result_137333 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 15), isComplexType_137330, *[t_137331], **kwargs_137332)
    
    # Testing the type of an if condition (line 1935)
    if_condition_137334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1935, 12), isComplexType_call_result_137333)
    # Assigning a type to the variable 'if_condition_137334' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 12), 'if_condition_137334', if_condition_137334)
    # SSA begins for if statement (line 1935)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1936):
    
    # Assigning a Call to a Name (line 1936):
    
    # Call to astype(...): (line 1936)
    # Processing the call arguments (line 1936)
    # Getting the type of 'result_real_t' (line 1937)
    result_real_t_137355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 20), 'result_real_t', False)
    # Processing the call keyword arguments (line 1936)
    # Getting the type of 'False' (line 1937)
    False_137356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 40), 'False', False)
    keyword_137357 = False_137356
    kwargs_137358 = {'copy': keyword_137357}
    
    # Call to sum(...): (line 1936)
    # Processing the call arguments (line 1936)
    
    # Call to abs(...): (line 1936)
    # Processing the call arguments (line 1936)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1936)
    n_137337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 50), 'n', False)
    slice_137338 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1936, 33), n_137337, None, None)
    slice_137339 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1936, 33), None, None, None)
    
    # Call to transpose(...): (line 1936)
    # Processing the call arguments (line 1936)
    # Getting the type of 'bstar' (line 1936)
    bstar_137341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 43), 'bstar', False)
    # Processing the call keyword arguments (line 1936)
    kwargs_137342 = {}
    # Getting the type of 'transpose' (line 1936)
    transpose_137340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 33), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1936)
    transpose_call_result_137343 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 33), transpose_137340, *[bstar_137341], **kwargs_137342)
    
    # Obtaining the member '__getitem__' of a type (line 1936)
    getitem___137344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1936, 33), transpose_call_result_137343, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1936)
    subscript_call_result_137345 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 33), getitem___137344, (slice_137338, slice_137339))
    
    # Processing the call keyword arguments (line 1936)
    kwargs_137346 = {}
    # Getting the type of 'abs' (line 1936)
    abs_137336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 1936)
    abs_call_result_137347 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 29), abs_137336, *[subscript_call_result_137345], **kwargs_137346)
    
    int_137348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 58), 'int')
    # Applying the binary operator '**' (line 1936)
    result_pow_137349 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 29), '**', abs_call_result_137347, int_137348)
    
    # Processing the call keyword arguments (line 1936)
    int_137350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 66), 'int')
    keyword_137351 = int_137350
    kwargs_137352 = {'axis': keyword_137351}
    # Getting the type of 'sum' (line 1936)
    sum_137335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 25), 'sum', False)
    # Calling sum(args, kwargs) (line 1936)
    sum_call_result_137353 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 25), sum_137335, *[result_pow_137349], **kwargs_137352)
    
    # Obtaining the member 'astype' of a type (line 1936)
    astype_137354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1936, 25), sum_call_result_137353, 'astype')
    # Calling astype(args, kwargs) (line 1936)
    astype_call_result_137359 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 25), astype_137354, *[result_real_t_137355], **kwargs_137358)
    
    # Assigning a type to the variable 'resids' (line 1936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 16), 'resids', astype_call_result_137359)
    # SSA branch for the else part of an if statement (line 1935)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1939):
    
    # Assigning a Call to a Name (line 1939):
    
    # Call to astype(...): (line 1939)
    # Processing the call arguments (line 1939)
    # Getting the type of 'result_real_t' (line 1940)
    result_real_t_137377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 20), 'result_real_t', False)
    # Processing the call keyword arguments (line 1939)
    # Getting the type of 'False' (line 1940)
    False_137378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 40), 'False', False)
    keyword_137379 = False_137378
    kwargs_137380 = {'copy': keyword_137379}
    
    # Call to sum(...): (line 1939)
    # Processing the call arguments (line 1939)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1939)
    n_137361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 47), 'n', False)
    slice_137362 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1939, 30), n_137361, None, None)
    slice_137363 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1939, 30), None, None, None)
    
    # Call to transpose(...): (line 1939)
    # Processing the call arguments (line 1939)
    # Getting the type of 'bstar' (line 1939)
    bstar_137365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 40), 'bstar', False)
    # Processing the call keyword arguments (line 1939)
    kwargs_137366 = {}
    # Getting the type of 'transpose' (line 1939)
    transpose_137364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 30), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1939)
    transpose_call_result_137367 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 30), transpose_137364, *[bstar_137365], **kwargs_137366)
    
    # Obtaining the member '__getitem__' of a type (line 1939)
    getitem___137368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 30), transpose_call_result_137367, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1939)
    subscript_call_result_137369 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 30), getitem___137368, (slice_137362, slice_137363))
    
    int_137370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1939, 55), 'int')
    # Applying the binary operator '**' (line 1939)
    result_pow_137371 = python_operator(stypy.reporting.localization.Localization(__file__, 1939, 29), '**', subscript_call_result_137369, int_137370)
    
    # Processing the call keyword arguments (line 1939)
    int_137372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1939, 63), 'int')
    keyword_137373 = int_137372
    kwargs_137374 = {'axis': keyword_137373}
    # Getting the type of 'sum' (line 1939)
    sum_137360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 25), 'sum', False)
    # Calling sum(args, kwargs) (line 1939)
    sum_call_result_137375 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 25), sum_137360, *[result_pow_137371], **kwargs_137374)
    
    # Obtaining the member 'astype' of a type (line 1939)
    astype_137376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 25), sum_call_result_137375, 'astype')
    # Calling astype(args, kwargs) (line 1939)
    astype_call_result_137381 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 25), astype_137376, *[result_real_t_137377], **kwargs_137380)
    
    # Assigning a type to the variable 'resids' (line 1939)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 16), 'resids', astype_call_result_137381)
    # SSA join for if statement (line 1935)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1934)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1923)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1942):
    
    # Assigning a Call to a Name (line 1942):
    
    # Call to astype(...): (line 1942)
    # Processing the call arguments (line 1942)
    # Getting the type of 'result_real_t' (line 1942)
    result_real_t_137392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 30), 'result_real_t', False)
    # Processing the call keyword arguments (line 1942)
    # Getting the type of 'True' (line 1942)
    True_137393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 50), 'True', False)
    keyword_137394 = True_137393
    kwargs_137395 = {'copy': keyword_137394}
    
    # Obtaining the type of the subscript
    
    # Call to min(...): (line 1942)
    # Processing the call arguments (line 1942)
    # Getting the type of 'n' (line 1942)
    n_137383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 16), 'n', False)
    # Getting the type of 'm' (line 1942)
    m_137384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 19), 'm', False)
    # Processing the call keyword arguments (line 1942)
    kwargs_137385 = {}
    # Getting the type of 'min' (line 1942)
    min_137382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 12), 'min', False)
    # Calling min(args, kwargs) (line 1942)
    min_call_result_137386 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 12), min_137382, *[n_137383, m_137384], **kwargs_137385)
    
    slice_137387 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1942, 9), None, min_call_result_137386, None)
    # Getting the type of 's' (line 1942)
    s_137388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 9), 's', False)
    # Obtaining the member '__getitem__' of a type (line 1942)
    getitem___137389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1942, 9), s_137388, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1942)
    subscript_call_result_137390 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 9), getitem___137389, slice_137387)
    
    # Obtaining the member 'astype' of a type (line 1942)
    astype_137391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1942, 9), subscript_call_result_137390, 'astype')
    # Calling astype(args, kwargs) (line 1942)
    astype_call_result_137396 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 9), astype_137391, *[result_real_t_137392], **kwargs_137395)
    
    # Assigning a type to the variable 'st' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 4), 'st', astype_call_result_137396)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1943)
    tuple_137397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1943, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1943)
    # Adding element type (line 1943)
    
    # Call to wrap(...): (line 1943)
    # Processing the call arguments (line 1943)
    # Getting the type of 'x' (line 1943)
    x_137399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 16), 'x', False)
    # Processing the call keyword arguments (line 1943)
    kwargs_137400 = {}
    # Getting the type of 'wrap' (line 1943)
    wrap_137398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 11), 'wrap', False)
    # Calling wrap(args, kwargs) (line 1943)
    wrap_call_result_137401 = invoke(stypy.reporting.localization.Localization(__file__, 1943, 11), wrap_137398, *[x_137399], **kwargs_137400)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1943, 11), tuple_137397, wrap_call_result_137401)
    # Adding element type (line 1943)
    
    # Call to wrap(...): (line 1943)
    # Processing the call arguments (line 1943)
    # Getting the type of 'resids' (line 1943)
    resids_137403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 25), 'resids', False)
    # Processing the call keyword arguments (line 1943)
    kwargs_137404 = {}
    # Getting the type of 'wrap' (line 1943)
    wrap_137402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 20), 'wrap', False)
    # Calling wrap(args, kwargs) (line 1943)
    wrap_call_result_137405 = invoke(stypy.reporting.localization.Localization(__file__, 1943, 20), wrap_137402, *[resids_137403], **kwargs_137404)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1943, 11), tuple_137397, wrap_call_result_137405)
    # Adding element type (line 1943)
    
    # Obtaining the type of the subscript
    str_137406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1943, 42), 'str', 'rank')
    # Getting the type of 'results' (line 1943)
    results_137407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 34), 'results')
    # Obtaining the member '__getitem__' of a type (line 1943)
    getitem___137408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1943, 34), results_137407, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1943)
    subscript_call_result_137409 = invoke(stypy.reporting.localization.Localization(__file__, 1943, 34), getitem___137408, str_137406)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1943, 11), tuple_137397, subscript_call_result_137409)
    # Adding element type (line 1943)
    # Getting the type of 'st' (line 1943)
    st_137410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 51), 'st')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1943, 11), tuple_137397, st_137410)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1943)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 4), 'stypy_return_type', tuple_137397)
    
    # ################# End of 'lstsq(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lstsq' in the type store
    # Getting the type of 'stypy_return_type' (line 1785)
    stypy_return_type_137411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_137411)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lstsq'
    return stypy_return_type_137411

# Assigning a type to the variable 'lstsq' (line 1785)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 0), 'lstsq', lstsq)

@norecursion
def _multi_svd_norm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_multi_svd_norm'
    module_type_store = module_type_store.open_function_context('_multi_svd_norm', 1946, 0, False)
    
    # Passed parameters checking function
    _multi_svd_norm.stypy_localization = localization
    _multi_svd_norm.stypy_type_of_self = None
    _multi_svd_norm.stypy_type_store = module_type_store
    _multi_svd_norm.stypy_function_name = '_multi_svd_norm'
    _multi_svd_norm.stypy_param_names_list = ['x', 'row_axis', 'col_axis', 'op']
    _multi_svd_norm.stypy_varargs_param_name = None
    _multi_svd_norm.stypy_kwargs_param_name = None
    _multi_svd_norm.stypy_call_defaults = defaults
    _multi_svd_norm.stypy_call_varargs = varargs
    _multi_svd_norm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_multi_svd_norm', ['x', 'row_axis', 'col_axis', 'op'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_multi_svd_norm', localization, ['x', 'row_axis', 'col_axis', 'op'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_multi_svd_norm(...)' code ##################

    str_137412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, (-1)), 'str', 'Compute a function of the singular values of the 2-D matrices in `x`.\n\n    This is a private utility function used by numpy.linalg.norm().\n\n    Parameters\n    ----------\n    x : ndarray\n    row_axis, col_axis : int\n        The axes of `x` that hold the 2-D matrices.\n    op : callable\n        This should be either numpy.amin or numpy.amax or numpy.sum.\n\n    Returns\n    -------\n    result : float or ndarray\n        If `x` is 2-D, the return values is a float.\n        Otherwise, it is an array with ``x.ndim - 2`` dimensions.\n        The return values are either the minimum or maximum or sum of the\n        singular values of the matrices, depending on whether `op`\n        is `numpy.amin` or `numpy.amax` or `numpy.sum`.\n\n    ')
    
    
    # Getting the type of 'row_axis' (line 1969)
    row_axis_137413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 7), 'row_axis')
    # Getting the type of 'col_axis' (line 1969)
    col_axis_137414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 18), 'col_axis')
    # Applying the binary operator '>' (line 1969)
    result_gt_137415 = python_operator(stypy.reporting.localization.Localization(__file__, 1969, 7), '>', row_axis_137413, col_axis_137414)
    
    # Testing the type of an if condition (line 1969)
    if_condition_137416 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1969, 4), result_gt_137415)
    # Assigning a type to the variable 'if_condition_137416' (line 1969)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1969, 4), 'if_condition_137416', if_condition_137416)
    # SSA begins for if statement (line 1969)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'row_axis' (line 1970)
    row_axis_137417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 8), 'row_axis')
    int_137418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 20), 'int')
    # Applying the binary operator '-=' (line 1970)
    result_isub_137419 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 8), '-=', row_axis_137417, int_137418)
    # Assigning a type to the variable 'row_axis' (line 1970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 8), 'row_axis', result_isub_137419)
    
    # SSA join for if statement (line 1969)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1971):
    
    # Assigning a Call to a Name (line 1971):
    
    # Call to rollaxis(...): (line 1971)
    # Processing the call arguments (line 1971)
    
    # Call to rollaxis(...): (line 1971)
    # Processing the call arguments (line 1971)
    # Getting the type of 'x' (line 1971)
    x_137422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 26), 'x', False)
    # Getting the type of 'col_axis' (line 1971)
    col_axis_137423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 29), 'col_axis', False)
    # Getting the type of 'x' (line 1971)
    x_137424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 39), 'x', False)
    # Obtaining the member 'ndim' of a type (line 1971)
    ndim_137425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 39), x_137424, 'ndim')
    # Processing the call keyword arguments (line 1971)
    kwargs_137426 = {}
    # Getting the type of 'rollaxis' (line 1971)
    rollaxis_137421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 17), 'rollaxis', False)
    # Calling rollaxis(args, kwargs) (line 1971)
    rollaxis_call_result_137427 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 17), rollaxis_137421, *[x_137422, col_axis_137423, ndim_137425], **kwargs_137426)
    
    # Getting the type of 'row_axis' (line 1971)
    row_axis_137428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 48), 'row_axis', False)
    int_137429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 58), 'int')
    # Processing the call keyword arguments (line 1971)
    kwargs_137430 = {}
    # Getting the type of 'rollaxis' (line 1971)
    rollaxis_137420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 8), 'rollaxis', False)
    # Calling rollaxis(args, kwargs) (line 1971)
    rollaxis_call_result_137431 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 8), rollaxis_137420, *[rollaxis_call_result_137427, row_axis_137428, int_137429], **kwargs_137430)
    
    # Assigning a type to the variable 'y' (line 1971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 4), 'y', rollaxis_call_result_137431)
    
    # Assigning a Call to a Name (line 1972):
    
    # Assigning a Call to a Name (line 1972):
    
    # Call to op(...): (line 1972)
    # Processing the call arguments (line 1972)
    
    # Call to svd(...): (line 1972)
    # Processing the call arguments (line 1972)
    # Getting the type of 'y' (line 1972)
    y_137434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 20), 'y', False)
    # Processing the call keyword arguments (line 1972)
    int_137435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 34), 'int')
    keyword_137436 = int_137435
    kwargs_137437 = {'compute_uv': keyword_137436}
    # Getting the type of 'svd' (line 1972)
    svd_137433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 16), 'svd', False)
    # Calling svd(args, kwargs) (line 1972)
    svd_call_result_137438 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 16), svd_137433, *[y_137434], **kwargs_137437)
    
    # Processing the call keyword arguments (line 1972)
    int_137439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 43), 'int')
    keyword_137440 = int_137439
    kwargs_137441 = {'axis': keyword_137440}
    # Getting the type of 'op' (line 1972)
    op_137432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 13), 'op', False)
    # Calling op(args, kwargs) (line 1972)
    op_call_result_137442 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 13), op_137432, *[svd_call_result_137438], **kwargs_137441)
    
    # Assigning a type to the variable 'result' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 4), 'result', op_call_result_137442)
    # Getting the type of 'result' (line 1973)
    result_137443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'stypy_return_type', result_137443)
    
    # ################# End of '_multi_svd_norm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_multi_svd_norm' in the type store
    # Getting the type of 'stypy_return_type' (line 1946)
    stypy_return_type_137444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_137444)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_multi_svd_norm'
    return stypy_return_type_137444

# Assigning a type to the variable '_multi_svd_norm' (line 1946)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 0), '_multi_svd_norm', _multi_svd_norm)

@norecursion
def norm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1976)
    None_137445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 16), 'None')
    # Getting the type of 'None' (line 1976)
    None_137446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 27), 'None')
    # Getting the type of 'False' (line 1976)
    False_137447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 42), 'False')
    defaults = [None_137445, None_137446, False_137447]
    # Create a new context for function 'norm'
    module_type_store = module_type_store.open_function_context('norm', 1976, 0, False)
    
    # Passed parameters checking function
    norm.stypy_localization = localization
    norm.stypy_type_of_self = None
    norm.stypy_type_store = module_type_store
    norm.stypy_function_name = 'norm'
    norm.stypy_param_names_list = ['x', 'ord', 'axis', 'keepdims']
    norm.stypy_varargs_param_name = None
    norm.stypy_kwargs_param_name = None
    norm.stypy_call_defaults = defaults
    norm.stypy_call_varargs = varargs
    norm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'norm', ['x', 'ord', 'axis', 'keepdims'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'norm', localization, ['x', 'ord', 'axis', 'keepdims'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'norm(...)' code ##################

    str_137448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, (-1)), 'str', "\n    Matrix or vector norm.\n\n    This function is able to return one of eight different matrix norms,\n    or one of an infinite number of vector norms (described below), depending\n    on the value of the ``ord`` parameter.\n\n    Parameters\n    ----------\n    x : array_like\n        Input array.  If `axis` is None, `x` must be 1-D or 2-D.\n    ord : {non-zero int, inf, -inf, 'fro', 'nuc'}, optional\n        Order of the norm (see table under ``Notes``). inf means numpy's\n        `inf` object.\n    axis : {int, 2-tuple of ints, None}, optional\n        If `axis` is an integer, it specifies the axis of `x` along which to\n        compute the vector norms.  If `axis` is a 2-tuple, it specifies the\n        axes that hold 2-D matrices, and the matrix norms of these matrices\n        are computed.  If `axis` is None then either a vector norm (when `x`\n        is 1-D) or a matrix norm (when `x` is 2-D) is returned.\n    keepdims : bool, optional\n        If this is set to True, the axes which are normed over are left in the\n        result as dimensions with size one.  With this option the result will\n        broadcast correctly against the original `x`.\n\n        .. versionadded:: 1.10.0\n\n    Returns\n    -------\n    n : float or ndarray\n        Norm of the matrix or vector(s).\n\n    Notes\n    -----\n    For values of ``ord <= 0``, the result is, strictly speaking, not a\n    mathematical 'norm', but it may still be useful for various numerical\n    purposes.\n\n    The following norms can be calculated:\n\n    =====  ============================  ==========================\n    ord    norm for matrices             norm for vectors\n    =====  ============================  ==========================\n    None   Frobenius norm                2-norm\n    'fro'  Frobenius norm                --\n    'nuc'  nuclear norm                  --\n    inf    max(sum(abs(x), axis=1))      max(abs(x))\n    -inf   min(sum(abs(x), axis=1))      min(abs(x))\n    0      --                            sum(x != 0)\n    1      max(sum(abs(x), axis=0))      as below\n    -1     min(sum(abs(x), axis=0))      as below\n    2      2-norm (largest sing. value)  as below\n    -2     smallest singular value       as below\n    other  --                            sum(abs(x)**ord)**(1./ord)\n    =====  ============================  ==========================\n\n    The Frobenius norm is given by [1]_:\n\n        :math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\n\n    The nuclear norm is the sum of the singular values.\n\n    References\n    ----------\n    .. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n           Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\n\n    Examples\n    --------\n    >>> from numpy import linalg as LA\n    >>> a = np.arange(9) - 4\n    >>> a\n    array([-4, -3, -2, -1,  0,  1,  2,  3,  4])\n    >>> b = a.reshape((3, 3))\n    >>> b\n    array([[-4, -3, -2],\n           [-1,  0,  1],\n           [ 2,  3,  4]])\n\n    >>> LA.norm(a)\n    7.745966692414834\n    >>> LA.norm(b)\n    7.745966692414834\n    >>> LA.norm(b, 'fro')\n    7.745966692414834\n    >>> LA.norm(a, np.inf)\n    4.0\n    >>> LA.norm(b, np.inf)\n    9.0\n    >>> LA.norm(a, -np.inf)\n    0.0\n    >>> LA.norm(b, -np.inf)\n    2.0\n\n    >>> LA.norm(a, 1)\n    20.0\n    >>> LA.norm(b, 1)\n    7.0\n    >>> LA.norm(a, -1)\n    -4.6566128774142013e-010\n    >>> LA.norm(b, -1)\n    6.0\n    >>> LA.norm(a, 2)\n    7.745966692414834\n    >>> LA.norm(b, 2)\n    7.3484692283495345\n\n    >>> LA.norm(a, -2)\n    nan\n    >>> LA.norm(b, -2)\n    1.8570331885190563e-016\n    >>> LA.norm(a, 3)\n    5.8480354764257312\n    >>> LA.norm(a, -3)\n    nan\n\n    Using the `axis` argument to compute vector norms:\n\n    >>> c = np.array([[ 1, 2, 3],\n    ...               [-1, 1, 4]])\n    >>> LA.norm(c, axis=0)\n    array([ 1.41421356,  2.23606798,  5.        ])\n    >>> LA.norm(c, axis=1)\n    array([ 3.74165739,  4.24264069])\n    >>> LA.norm(c, ord=1, axis=1)\n    array([ 6.,  6.])\n\n    Using the `axis` argument to compute matrix norms:\n\n    >>> m = np.arange(8).reshape(2,2,2)\n    >>> LA.norm(m, axis=(1,2))\n    array([  3.74165739,  11.22497216])\n    >>> LA.norm(m[0, :, :]), LA.norm(m[1, :, :])\n    (3.7416573867739413, 11.224972160321824)\n\n    ")
    
    # Assigning a Call to a Name (line 2113):
    
    # Assigning a Call to a Name (line 2113):
    
    # Call to asarray(...): (line 2113)
    # Processing the call arguments (line 2113)
    # Getting the type of 'x' (line 2113)
    x_137450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 16), 'x', False)
    # Processing the call keyword arguments (line 2113)
    kwargs_137451 = {}
    # Getting the type of 'asarray' (line 2113)
    asarray_137449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2113)
    asarray_call_result_137452 = invoke(stypy.reporting.localization.Localization(__file__, 2113, 8), asarray_137449, *[x_137450], **kwargs_137451)
    
    # Assigning a type to the variable 'x' (line 2113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 4), 'x', asarray_call_result_137452)
    
    
    
    # Call to issubclass(...): (line 2115)
    # Processing the call arguments (line 2115)
    # Getting the type of 'x' (line 2115)
    x_137454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 22), 'x', False)
    # Obtaining the member 'dtype' of a type (line 2115)
    dtype_137455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 22), x_137454, 'dtype')
    # Obtaining the member 'type' of a type (line 2115)
    type_137456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2115, 22), dtype_137455, 'type')
    # Getting the type of 'inexact' (line 2115)
    inexact_137457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 36), 'inexact', False)
    # Processing the call keyword arguments (line 2115)
    kwargs_137458 = {}
    # Getting the type of 'issubclass' (line 2115)
    issubclass_137453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 11), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 2115)
    issubclass_call_result_137459 = invoke(stypy.reporting.localization.Localization(__file__, 2115, 11), issubclass_137453, *[type_137456, inexact_137457], **kwargs_137458)
    
    # Applying the 'not' unary operator (line 2115)
    result_not__137460 = python_operator(stypy.reporting.localization.Localization(__file__, 2115, 7), 'not', issubclass_call_result_137459)
    
    # Testing the type of an if condition (line 2115)
    if_condition_137461 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2115, 4), result_not__137460)
    # Assigning a type to the variable 'if_condition_137461' (line 2115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 4), 'if_condition_137461', if_condition_137461)
    # SSA begins for if statement (line 2115)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2116):
    
    # Assigning a Call to a Name (line 2116):
    
    # Call to astype(...): (line 2116)
    # Processing the call arguments (line 2116)
    # Getting the type of 'float' (line 2116)
    float_137464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 21), 'float', False)
    # Processing the call keyword arguments (line 2116)
    kwargs_137465 = {}
    # Getting the type of 'x' (line 2116)
    x_137462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 12), 'x', False)
    # Obtaining the member 'astype' of a type (line 2116)
    astype_137463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2116, 12), x_137462, 'astype')
    # Calling astype(args, kwargs) (line 2116)
    astype_call_result_137466 = invoke(stypy.reporting.localization.Localization(__file__, 2116, 12), astype_137463, *[float_137464], **kwargs_137465)
    
    # Assigning a type to the variable 'x' (line 2116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2116, 8), 'x', astype_call_result_137466)
    # SSA join for if statement (line 2115)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2119)
    # Getting the type of 'axis' (line 2119)
    axis_137467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 7), 'axis')
    # Getting the type of 'None' (line 2119)
    None_137468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 15), 'None')
    
    (may_be_137469, more_types_in_union_137470) = may_be_none(axis_137467, None_137468)

    if may_be_137469:

        if more_types_in_union_137470:
            # Runtime conditional SSA (line 2119)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 2120):
        
        # Assigning a Attribute to a Name (line 2120):
        # Getting the type of 'x' (line 2120)
        x_137471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 15), 'x')
        # Obtaining the member 'ndim' of a type (line 2120)
        ndim_137472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2120, 15), x_137471, 'ndim')
        # Assigning a type to the variable 'ndim' (line 2120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2120, 8), 'ndim', ndim_137472)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ord' (line 2121)
        ord_137473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 13), 'ord')
        # Getting the type of 'None' (line 2121)
        None_137474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 20), 'None')
        # Applying the binary operator 'is' (line 2121)
        result_is__137475 = python_operator(stypy.reporting.localization.Localization(__file__, 2121, 13), 'is', ord_137473, None_137474)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ord' (line 2122)
        ord_137476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 13), 'ord')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2122)
        tuple_137477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2122, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2122)
        # Adding element type (line 2122)
        str_137478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2122, 21), 'str', 'f')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2122, 21), tuple_137477, str_137478)
        # Adding element type (line 2122)
        str_137479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2122, 26), 'str', 'fro')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2122, 21), tuple_137477, str_137479)
        
        # Applying the binary operator 'in' (line 2122)
        result_contains_137480 = python_operator(stypy.reporting.localization.Localization(__file__, 2122, 13), 'in', ord_137476, tuple_137477)
        
        
        # Getting the type of 'ndim' (line 2122)
        ndim_137481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2122, 37), 'ndim')
        int_137482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2122, 45), 'int')
        # Applying the binary operator '==' (line 2122)
        result_eq_137483 = python_operator(stypy.reporting.localization.Localization(__file__, 2122, 37), '==', ndim_137481, int_137482)
        
        # Applying the binary operator 'and' (line 2122)
        result_and_keyword_137484 = python_operator(stypy.reporting.localization.Localization(__file__, 2122, 13), 'and', result_contains_137480, result_eq_137483)
        
        # Applying the binary operator 'or' (line 2121)
        result_or_keyword_137485 = python_operator(stypy.reporting.localization.Localization(__file__, 2121, 12), 'or', result_is__137475, result_and_keyword_137484)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ord' (line 2123)
        ord_137486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 13), 'ord')
        int_137487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2123, 20), 'int')
        # Applying the binary operator '==' (line 2123)
        result_eq_137488 = python_operator(stypy.reporting.localization.Localization(__file__, 2123, 13), '==', ord_137486, int_137487)
        
        
        # Getting the type of 'ndim' (line 2123)
        ndim_137489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2123, 26), 'ndim')
        int_137490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2123, 34), 'int')
        # Applying the binary operator '==' (line 2123)
        result_eq_137491 = python_operator(stypy.reporting.localization.Localization(__file__, 2123, 26), '==', ndim_137489, int_137490)
        
        # Applying the binary operator 'and' (line 2123)
        result_and_keyword_137492 = python_operator(stypy.reporting.localization.Localization(__file__, 2123, 13), 'and', result_eq_137488, result_eq_137491)
        
        # Applying the binary operator 'or' (line 2121)
        result_or_keyword_137493 = python_operator(stypy.reporting.localization.Localization(__file__, 2121, 12), 'or', result_or_keyword_137485, result_and_keyword_137492)
        
        # Testing the type of an if condition (line 2121)
        if_condition_137494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2121, 8), result_or_keyword_137493)
        # Assigning a type to the variable 'if_condition_137494' (line 2121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2121, 8), 'if_condition_137494', if_condition_137494)
        # SSA begins for if statement (line 2121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2125):
        
        # Assigning a Call to a Name (line 2125):
        
        # Call to ravel(...): (line 2125)
        # Processing the call keyword arguments (line 2125)
        str_137497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2125, 30), 'str', 'K')
        keyword_137498 = str_137497
        kwargs_137499 = {'order': keyword_137498}
        # Getting the type of 'x' (line 2125)
        x_137495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2125, 16), 'x', False)
        # Obtaining the member 'ravel' of a type (line 2125)
        ravel_137496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2125, 16), x_137495, 'ravel')
        # Calling ravel(args, kwargs) (line 2125)
        ravel_call_result_137500 = invoke(stypy.reporting.localization.Localization(__file__, 2125, 16), ravel_137496, *[], **kwargs_137499)
        
        # Assigning a type to the variable 'x' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 12), 'x', ravel_call_result_137500)
        
        
        # Call to isComplexType(...): (line 2126)
        # Processing the call arguments (line 2126)
        # Getting the type of 'x' (line 2126)
        x_137502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 29), 'x', False)
        # Obtaining the member 'dtype' of a type (line 2126)
        dtype_137503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2126, 29), x_137502, 'dtype')
        # Obtaining the member 'type' of a type (line 2126)
        type_137504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2126, 29), dtype_137503, 'type')
        # Processing the call keyword arguments (line 2126)
        kwargs_137505 = {}
        # Getting the type of 'isComplexType' (line 2126)
        isComplexType_137501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 15), 'isComplexType', False)
        # Calling isComplexType(args, kwargs) (line 2126)
        isComplexType_call_result_137506 = invoke(stypy.reporting.localization.Localization(__file__, 2126, 15), isComplexType_137501, *[type_137504], **kwargs_137505)
        
        # Testing the type of an if condition (line 2126)
        if_condition_137507 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2126, 12), isComplexType_call_result_137506)
        # Assigning a type to the variable 'if_condition_137507' (line 2126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2126, 12), 'if_condition_137507', if_condition_137507)
        # SSA begins for if statement (line 2126)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 2127):
        
        # Assigning a BinOp to a Name (line 2127):
        
        # Call to dot(...): (line 2127)
        # Processing the call arguments (line 2127)
        # Getting the type of 'x' (line 2127)
        x_137509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 29), 'x', False)
        # Obtaining the member 'real' of a type (line 2127)
        real_137510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 29), x_137509, 'real')
        # Getting the type of 'x' (line 2127)
        x_137511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 37), 'x', False)
        # Obtaining the member 'real' of a type (line 2127)
        real_137512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 37), x_137511, 'real')
        # Processing the call keyword arguments (line 2127)
        kwargs_137513 = {}
        # Getting the type of 'dot' (line 2127)
        dot_137508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 25), 'dot', False)
        # Calling dot(args, kwargs) (line 2127)
        dot_call_result_137514 = invoke(stypy.reporting.localization.Localization(__file__, 2127, 25), dot_137508, *[real_137510, real_137512], **kwargs_137513)
        
        
        # Call to dot(...): (line 2127)
        # Processing the call arguments (line 2127)
        # Getting the type of 'x' (line 2127)
        x_137516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 51), 'x', False)
        # Obtaining the member 'imag' of a type (line 2127)
        imag_137517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 51), x_137516, 'imag')
        # Getting the type of 'x' (line 2127)
        x_137518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 59), 'x', False)
        # Obtaining the member 'imag' of a type (line 2127)
        imag_137519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 59), x_137518, 'imag')
        # Processing the call keyword arguments (line 2127)
        kwargs_137520 = {}
        # Getting the type of 'dot' (line 2127)
        dot_137515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 47), 'dot', False)
        # Calling dot(args, kwargs) (line 2127)
        dot_call_result_137521 = invoke(stypy.reporting.localization.Localization(__file__, 2127, 47), dot_137515, *[imag_137517, imag_137519], **kwargs_137520)
        
        # Applying the binary operator '+' (line 2127)
        result_add_137522 = python_operator(stypy.reporting.localization.Localization(__file__, 2127, 25), '+', dot_call_result_137514, dot_call_result_137521)
        
        # Assigning a type to the variable 'sqnorm' (line 2127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2127, 16), 'sqnorm', result_add_137522)
        # SSA branch for the else part of an if statement (line 2126)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2129):
        
        # Assigning a Call to a Name (line 2129):
        
        # Call to dot(...): (line 2129)
        # Processing the call arguments (line 2129)
        # Getting the type of 'x' (line 2129)
        x_137524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 29), 'x', False)
        # Getting the type of 'x' (line 2129)
        x_137525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 32), 'x', False)
        # Processing the call keyword arguments (line 2129)
        kwargs_137526 = {}
        # Getting the type of 'dot' (line 2129)
        dot_137523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 25), 'dot', False)
        # Calling dot(args, kwargs) (line 2129)
        dot_call_result_137527 = invoke(stypy.reporting.localization.Localization(__file__, 2129, 25), dot_137523, *[x_137524, x_137525], **kwargs_137526)
        
        # Assigning a type to the variable 'sqnorm' (line 2129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2129, 16), 'sqnorm', dot_call_result_137527)
        # SSA join for if statement (line 2126)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2130):
        
        # Assigning a Call to a Name (line 2130):
        
        # Call to sqrt(...): (line 2130)
        # Processing the call arguments (line 2130)
        # Getting the type of 'sqnorm' (line 2130)
        sqnorm_137529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 23), 'sqnorm', False)
        # Processing the call keyword arguments (line 2130)
        kwargs_137530 = {}
        # Getting the type of 'sqrt' (line 2130)
        sqrt_137528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 18), 'sqrt', False)
        # Calling sqrt(args, kwargs) (line 2130)
        sqrt_call_result_137531 = invoke(stypy.reporting.localization.Localization(__file__, 2130, 18), sqrt_137528, *[sqnorm_137529], **kwargs_137530)
        
        # Assigning a type to the variable 'ret' (line 2130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2130, 12), 'ret', sqrt_call_result_137531)
        
        # Getting the type of 'keepdims' (line 2131)
        keepdims_137532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 15), 'keepdims')
        # Testing the type of an if condition (line 2131)
        if_condition_137533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2131, 12), keepdims_137532)
        # Assigning a type to the variable 'if_condition_137533' (line 2131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2131, 12), 'if_condition_137533', if_condition_137533)
        # SSA begins for if statement (line 2131)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2132):
        
        # Assigning a Call to a Name (line 2132):
        
        # Call to reshape(...): (line 2132)
        # Processing the call arguments (line 2132)
        # Getting the type of 'ndim' (line 2132)
        ndim_137536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 34), 'ndim', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2132)
        list_137537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2132, 39), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2132)
        # Adding element type (line 2132)
        int_137538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2132, 40), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2132, 39), list_137537, int_137538)
        
        # Applying the binary operator '*' (line 2132)
        result_mul_137539 = python_operator(stypy.reporting.localization.Localization(__file__, 2132, 34), '*', ndim_137536, list_137537)
        
        # Processing the call keyword arguments (line 2132)
        kwargs_137540 = {}
        # Getting the type of 'ret' (line 2132)
        ret_137534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 22), 'ret', False)
        # Obtaining the member 'reshape' of a type (line 2132)
        reshape_137535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 22), ret_137534, 'reshape')
        # Calling reshape(args, kwargs) (line 2132)
        reshape_call_result_137541 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 22), reshape_137535, *[result_mul_137539], **kwargs_137540)
        
        # Assigning a type to the variable 'ret' (line 2132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2132, 16), 'ret', reshape_call_result_137541)
        # SSA join for if statement (line 2131)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'ret' (line 2133)
        ret_137542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 19), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 2133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2133, 12), 'stypy_return_type', ret_137542)
        # SSA join for if statement (line 2121)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_137470:
            # SSA join for if statement (line 2119)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Attribute to a Name (line 2136):
    
    # Assigning a Attribute to a Name (line 2136):
    # Getting the type of 'x' (line 2136)
    x_137543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 9), 'x')
    # Obtaining the member 'ndim' of a type (line 2136)
    ndim_137544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2136, 9), x_137543, 'ndim')
    # Assigning a type to the variable 'nd' (line 2136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2136, 4), 'nd', ndim_137544)
    
    # Type idiom detected: calculating its left and rigth part (line 2137)
    # Getting the type of 'axis' (line 2137)
    axis_137545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 7), 'axis')
    # Getting the type of 'None' (line 2137)
    None_137546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 15), 'None')
    
    (may_be_137547, more_types_in_union_137548) = may_be_none(axis_137545, None_137546)

    if may_be_137547:

        if more_types_in_union_137548:
            # Runtime conditional SSA (line 2137)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2138):
        
        # Assigning a Call to a Name (line 2138):
        
        # Call to tuple(...): (line 2138)
        # Processing the call arguments (line 2138)
        
        # Call to range(...): (line 2138)
        # Processing the call arguments (line 2138)
        # Getting the type of 'nd' (line 2138)
        nd_137551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 27), 'nd', False)
        # Processing the call keyword arguments (line 2138)
        kwargs_137552 = {}
        # Getting the type of 'range' (line 2138)
        range_137550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 21), 'range', False)
        # Calling range(args, kwargs) (line 2138)
        range_call_result_137553 = invoke(stypy.reporting.localization.Localization(__file__, 2138, 21), range_137550, *[nd_137551], **kwargs_137552)
        
        # Processing the call keyword arguments (line 2138)
        kwargs_137554 = {}
        # Getting the type of 'tuple' (line 2138)
        tuple_137549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2138)
        tuple_call_result_137555 = invoke(stypy.reporting.localization.Localization(__file__, 2138, 15), tuple_137549, *[range_call_result_137553], **kwargs_137554)
        
        # Assigning a type to the variable 'axis' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 8), 'axis', tuple_call_result_137555)

        if more_types_in_union_137548:
            # Runtime conditional SSA for else branch (line 2137)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_137547) or more_types_in_union_137548):
        
        # Type idiom detected: calculating its left and rigth part (line 2139)
        # Getting the type of 'tuple' (line 2139)
        tuple_137556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 30), 'tuple')
        # Getting the type of 'axis' (line 2139)
        axis_137557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 24), 'axis')
        
        (may_be_137558, more_types_in_union_137559) = may_not_be_subtype(tuple_137556, axis_137557)

        if may_be_137558:

            if more_types_in_union_137559:
                # Runtime conditional SSA (line 2139)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'axis' (line 2139)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2139, 9), 'axis', remove_subtype_from_union(axis_137557, tuple))
            
            
            # SSA begins for try-except statement (line 2140)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Name (line 2141):
            
            # Assigning a Call to a Name (line 2141):
            
            # Call to int(...): (line 2141)
            # Processing the call arguments (line 2141)
            # Getting the type of 'axis' (line 2141)
            axis_137561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 23), 'axis', False)
            # Processing the call keyword arguments (line 2141)
            kwargs_137562 = {}
            # Getting the type of 'int' (line 2141)
            int_137560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 19), 'int', False)
            # Calling int(args, kwargs) (line 2141)
            int_call_result_137563 = invoke(stypy.reporting.localization.Localization(__file__, 2141, 19), int_137560, *[axis_137561], **kwargs_137562)
            
            # Assigning a type to the variable 'axis' (line 2141)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2141, 12), 'axis', int_call_result_137563)
            # SSA branch for the except part of a try statement (line 2140)
            # SSA branch for the except '<any exception>' branch of a try statement (line 2140)
            module_type_store.open_ssa_branch('except')
            
            # Call to TypeError(...): (line 2143)
            # Processing the call arguments (line 2143)
            str_137565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2143, 28), 'str', "'axis' must be None, an integer or a tuple of integers")
            # Processing the call keyword arguments (line 2143)
            kwargs_137566 = {}
            # Getting the type of 'TypeError' (line 2143)
            TypeError_137564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 18), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 2143)
            TypeError_call_result_137567 = invoke(stypy.reporting.localization.Localization(__file__, 2143, 18), TypeError_137564, *[str_137565], **kwargs_137566)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2143, 12), TypeError_call_result_137567, 'raise parameter', BaseException)
            # SSA join for try-except statement (line 2140)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Tuple to a Name (line 2144):
            
            # Assigning a Tuple to a Name (line 2144):
            
            # Obtaining an instance of the builtin type 'tuple' (line 2144)
            tuple_137568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 16), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2144)
            # Adding element type (line 2144)
            # Getting the type of 'axis' (line 2144)
            axis_137569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 16), 'axis')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2144, 16), tuple_137568, axis_137569)
            
            # Assigning a type to the variable 'axis' (line 2144)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2144, 8), 'axis', tuple_137568)

            if more_types_in_union_137559:
                # SSA join for if statement (line 2139)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_137547 and more_types_in_union_137548):
            # SSA join for if statement (line 2137)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to len(...): (line 2146)
    # Processing the call arguments (line 2146)
    # Getting the type of 'axis' (line 2146)
    axis_137571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 11), 'axis', False)
    # Processing the call keyword arguments (line 2146)
    kwargs_137572 = {}
    # Getting the type of 'len' (line 2146)
    len_137570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 7), 'len', False)
    # Calling len(args, kwargs) (line 2146)
    len_call_result_137573 = invoke(stypy.reporting.localization.Localization(__file__, 2146, 7), len_137570, *[axis_137571], **kwargs_137572)
    
    int_137574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 20), 'int')
    # Applying the binary operator '==' (line 2146)
    result_eq_137575 = python_operator(stypy.reporting.localization.Localization(__file__, 2146, 7), '==', len_call_result_137573, int_137574)
    
    # Testing the type of an if condition (line 2146)
    if_condition_137576 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2146, 4), result_eq_137575)
    # Assigning a type to the variable 'if_condition_137576' (line 2146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2146, 4), 'if_condition_137576', if_condition_137576)
    # SSA begins for if statement (line 2146)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'ord' (line 2147)
    ord_137577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 11), 'ord')
    # Getting the type of 'Inf' (line 2147)
    Inf_137578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 18), 'Inf')
    # Applying the binary operator '==' (line 2147)
    result_eq_137579 = python_operator(stypy.reporting.localization.Localization(__file__, 2147, 11), '==', ord_137577, Inf_137578)
    
    # Testing the type of an if condition (line 2147)
    if_condition_137580 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2147, 8), result_eq_137579)
    # Assigning a type to the variable 'if_condition_137580' (line 2147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 8), 'if_condition_137580', if_condition_137580)
    # SSA begins for if statement (line 2147)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to max(...): (line 2148)
    # Processing the call keyword arguments (line 2148)
    # Getting the type of 'axis' (line 2148)
    axis_137586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 35), 'axis', False)
    keyword_137587 = axis_137586
    # Getting the type of 'keepdims' (line 2148)
    keepdims_137588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 50), 'keepdims', False)
    keyword_137589 = keepdims_137588
    kwargs_137590 = {'keepdims': keyword_137589, 'axis': keyword_137587}
    
    # Call to abs(...): (line 2148)
    # Processing the call arguments (line 2148)
    # Getting the type of 'x' (line 2148)
    x_137582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 23), 'x', False)
    # Processing the call keyword arguments (line 2148)
    kwargs_137583 = {}
    # Getting the type of 'abs' (line 2148)
    abs_137581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 19), 'abs', False)
    # Calling abs(args, kwargs) (line 2148)
    abs_call_result_137584 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 19), abs_137581, *[x_137582], **kwargs_137583)
    
    # Obtaining the member 'max' of a type (line 2148)
    max_137585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 19), abs_call_result_137584, 'max')
    # Calling max(args, kwargs) (line 2148)
    max_call_result_137591 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 19), max_137585, *[], **kwargs_137590)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2148, 12), 'stypy_return_type', max_call_result_137591)
    # SSA branch for the else part of an if statement (line 2147)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2149)
    ord_137592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 13), 'ord')
    
    # Getting the type of 'Inf' (line 2149)
    Inf_137593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 21), 'Inf')
    # Applying the 'usub' unary operator (line 2149)
    result___neg___137594 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 20), 'usub', Inf_137593)
    
    # Applying the binary operator '==' (line 2149)
    result_eq_137595 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 13), '==', ord_137592, result___neg___137594)
    
    # Testing the type of an if condition (line 2149)
    if_condition_137596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2149, 13), result_eq_137595)
    # Assigning a type to the variable 'if_condition_137596' (line 2149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2149, 13), 'if_condition_137596', if_condition_137596)
    # SSA begins for if statement (line 2149)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to min(...): (line 2150)
    # Processing the call keyword arguments (line 2150)
    # Getting the type of 'axis' (line 2150)
    axis_137602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 35), 'axis', False)
    keyword_137603 = axis_137602
    # Getting the type of 'keepdims' (line 2150)
    keepdims_137604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 50), 'keepdims', False)
    keyword_137605 = keepdims_137604
    kwargs_137606 = {'keepdims': keyword_137605, 'axis': keyword_137603}
    
    # Call to abs(...): (line 2150)
    # Processing the call arguments (line 2150)
    # Getting the type of 'x' (line 2150)
    x_137598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 23), 'x', False)
    # Processing the call keyword arguments (line 2150)
    kwargs_137599 = {}
    # Getting the type of 'abs' (line 2150)
    abs_137597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 19), 'abs', False)
    # Calling abs(args, kwargs) (line 2150)
    abs_call_result_137600 = invoke(stypy.reporting.localization.Localization(__file__, 2150, 19), abs_137597, *[x_137598], **kwargs_137599)
    
    # Obtaining the member 'min' of a type (line 2150)
    min_137601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2150, 19), abs_call_result_137600, 'min')
    # Calling min(args, kwargs) (line 2150)
    min_call_result_137607 = invoke(stypy.reporting.localization.Localization(__file__, 2150, 19), min_137601, *[], **kwargs_137606)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2150, 12), 'stypy_return_type', min_call_result_137607)
    # SSA branch for the else part of an if statement (line 2149)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2151)
    ord_137608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 13), 'ord')
    int_137609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2151, 20), 'int')
    # Applying the binary operator '==' (line 2151)
    result_eq_137610 = python_operator(stypy.reporting.localization.Localization(__file__, 2151, 13), '==', ord_137608, int_137609)
    
    # Testing the type of an if condition (line 2151)
    if_condition_137611 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2151, 13), result_eq_137610)
    # Assigning a type to the variable 'if_condition_137611' (line 2151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2151, 13), 'if_condition_137611', if_condition_137611)
    # SSA begins for if statement (line 2151)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sum(...): (line 2153)
    # Processing the call keyword arguments (line 2153)
    # Getting the type of 'axis' (line 2153)
    axis_137620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 51), 'axis', False)
    keyword_137621 = axis_137620
    # Getting the type of 'keepdims' (line 2153)
    keepdims_137622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 66), 'keepdims', False)
    keyword_137623 = keepdims_137622
    kwargs_137624 = {'keepdims': keyword_137623, 'axis': keyword_137621}
    
    # Call to astype(...): (line 2153)
    # Processing the call arguments (line 2153)
    # Getting the type of 'float' (line 2153)
    float_137616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 35), 'float', False)
    # Processing the call keyword arguments (line 2153)
    kwargs_137617 = {}
    
    # Getting the type of 'x' (line 2153)
    x_137612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 20), 'x', False)
    int_137613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2153, 25), 'int')
    # Applying the binary operator '!=' (line 2153)
    result_ne_137614 = python_operator(stypy.reporting.localization.Localization(__file__, 2153, 20), '!=', x_137612, int_137613)
    
    # Obtaining the member 'astype' of a type (line 2153)
    astype_137615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 20), result_ne_137614, 'astype')
    # Calling astype(args, kwargs) (line 2153)
    astype_call_result_137618 = invoke(stypy.reporting.localization.Localization(__file__, 2153, 20), astype_137615, *[float_137616], **kwargs_137617)
    
    # Obtaining the member 'sum' of a type (line 2153)
    sum_137619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 20), astype_call_result_137618, 'sum')
    # Calling sum(args, kwargs) (line 2153)
    sum_call_result_137625 = invoke(stypy.reporting.localization.Localization(__file__, 2153, 20), sum_137619, *[], **kwargs_137624)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 12), 'stypy_return_type', sum_call_result_137625)
    # SSA branch for the else part of an if statement (line 2151)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2154)
    ord_137626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 13), 'ord')
    int_137627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 20), 'int')
    # Applying the binary operator '==' (line 2154)
    result_eq_137628 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 13), '==', ord_137626, int_137627)
    
    # Testing the type of an if condition (line 2154)
    if_condition_137629 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2154, 13), result_eq_137628)
    # Assigning a type to the variable 'if_condition_137629' (line 2154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 13), 'if_condition_137629', if_condition_137629)
    # SSA begins for if statement (line 2154)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to reduce(...): (line 2156)
    # Processing the call arguments (line 2156)
    
    # Call to abs(...): (line 2156)
    # Processing the call arguments (line 2156)
    # Getting the type of 'x' (line 2156)
    x_137633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 34), 'x', False)
    # Processing the call keyword arguments (line 2156)
    kwargs_137634 = {}
    # Getting the type of 'abs' (line 2156)
    abs_137632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 30), 'abs', False)
    # Calling abs(args, kwargs) (line 2156)
    abs_call_result_137635 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 30), abs_137632, *[x_137633], **kwargs_137634)
    
    # Processing the call keyword arguments (line 2156)
    # Getting the type of 'axis' (line 2156)
    axis_137636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 43), 'axis', False)
    keyword_137637 = axis_137636
    # Getting the type of 'keepdims' (line 2156)
    keepdims_137638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 58), 'keepdims', False)
    keyword_137639 = keepdims_137638
    kwargs_137640 = {'keepdims': keyword_137639, 'axis': keyword_137637}
    # Getting the type of 'add' (line 2156)
    add_137630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 19), 'add', False)
    # Obtaining the member 'reduce' of a type (line 2156)
    reduce_137631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2156, 19), add_137630, 'reduce')
    # Calling reduce(args, kwargs) (line 2156)
    reduce_call_result_137641 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 19), reduce_137631, *[abs_call_result_137635], **kwargs_137640)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2156, 12), 'stypy_return_type', reduce_call_result_137641)
    # SSA branch for the else part of an if statement (line 2154)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'ord' (line 2157)
    ord_137642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 13), 'ord')
    # Getting the type of 'None' (line 2157)
    None_137643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 20), 'None')
    # Applying the binary operator 'is' (line 2157)
    result_is__137644 = python_operator(stypy.reporting.localization.Localization(__file__, 2157, 13), 'is', ord_137642, None_137643)
    
    
    # Getting the type of 'ord' (line 2157)
    ord_137645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 28), 'ord')
    int_137646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, 35), 'int')
    # Applying the binary operator '==' (line 2157)
    result_eq_137647 = python_operator(stypy.reporting.localization.Localization(__file__, 2157, 28), '==', ord_137645, int_137646)
    
    # Applying the binary operator 'or' (line 2157)
    result_or_keyword_137648 = python_operator(stypy.reporting.localization.Localization(__file__, 2157, 13), 'or', result_is__137644, result_eq_137647)
    
    # Testing the type of an if condition (line 2157)
    if_condition_137649 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2157, 13), result_or_keyword_137648)
    # Assigning a type to the variable 'if_condition_137649' (line 2157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2157, 13), 'if_condition_137649', if_condition_137649)
    # SSA begins for if statement (line 2157)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 2159):
    
    # Assigning a Attribute to a Name (line 2159):
    
    # Call to conj(...): (line 2159)
    # Processing the call keyword arguments (line 2159)
    kwargs_137652 = {}
    # Getting the type of 'x' (line 2159)
    x_137650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 17), 'x', False)
    # Obtaining the member 'conj' of a type (line 2159)
    conj_137651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 17), x_137650, 'conj')
    # Calling conj(args, kwargs) (line 2159)
    conj_call_result_137653 = invoke(stypy.reporting.localization.Localization(__file__, 2159, 17), conj_137651, *[], **kwargs_137652)
    
    # Getting the type of 'x' (line 2159)
    x_137654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 28), 'x')
    # Applying the binary operator '*' (line 2159)
    result_mul_137655 = python_operator(stypy.reporting.localization.Localization(__file__, 2159, 17), '*', conj_call_result_137653, x_137654)
    
    # Obtaining the member 'real' of a type (line 2159)
    real_137656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 17), result_mul_137655, 'real')
    # Assigning a type to the variable 's' (line 2159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2159, 12), 's', real_137656)
    
    # Call to sqrt(...): (line 2160)
    # Processing the call arguments (line 2160)
    
    # Call to reduce(...): (line 2160)
    # Processing the call arguments (line 2160)
    # Getting the type of 's' (line 2160)
    s_137660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 35), 's', False)
    # Processing the call keyword arguments (line 2160)
    # Getting the type of 'axis' (line 2160)
    axis_137661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 43), 'axis', False)
    keyword_137662 = axis_137661
    # Getting the type of 'keepdims' (line 2160)
    keepdims_137663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 58), 'keepdims', False)
    keyword_137664 = keepdims_137663
    kwargs_137665 = {'keepdims': keyword_137664, 'axis': keyword_137662}
    # Getting the type of 'add' (line 2160)
    add_137658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 24), 'add', False)
    # Obtaining the member 'reduce' of a type (line 2160)
    reduce_137659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2160, 24), add_137658, 'reduce')
    # Calling reduce(args, kwargs) (line 2160)
    reduce_call_result_137666 = invoke(stypy.reporting.localization.Localization(__file__, 2160, 24), reduce_137659, *[s_137660], **kwargs_137665)
    
    # Processing the call keyword arguments (line 2160)
    kwargs_137667 = {}
    # Getting the type of 'sqrt' (line 2160)
    sqrt_137657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 19), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2160)
    sqrt_call_result_137668 = invoke(stypy.reporting.localization.Localization(__file__, 2160, 19), sqrt_137657, *[reduce_call_result_137666], **kwargs_137667)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 12), 'stypy_return_type', sqrt_call_result_137668)
    # SSA branch for the else part of an if statement (line 2157)
    module_type_store.open_ssa_branch('else')
    
    
    # SSA begins for try-except statement (line 2162)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    # Getting the type of 'ord' (line 2163)
    ord_137669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 16), 'ord')
    int_137670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2163, 22), 'int')
    # Applying the binary operator '+' (line 2163)
    result_add_137671 = python_operator(stypy.reporting.localization.Localization(__file__, 2163, 16), '+', ord_137669, int_137670)
    
    # SSA branch for the except part of a try statement (line 2162)
    # SSA branch for the except 'TypeError' branch of a try statement (line 2162)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 2165)
    # Processing the call arguments (line 2165)
    str_137673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2165, 33), 'str', 'Invalid norm order for vectors.')
    # Processing the call keyword arguments (line 2165)
    kwargs_137674 = {}
    # Getting the type of 'ValueError' (line 2165)
    ValueError_137672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2165)
    ValueError_call_result_137675 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 22), ValueError_137672, *[str_137673], **kwargs_137674)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2165, 16), ValueError_call_result_137675, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 2162)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x' (line 2166)
    x_137676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 15), 'x')
    # Obtaining the member 'dtype' of a type (line 2166)
    dtype_137677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 15), x_137676, 'dtype')
    # Obtaining the member 'type' of a type (line 2166)
    type_137678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 15), dtype_137677, 'type')
    # Getting the type of 'longdouble' (line 2166)
    longdouble_137679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 31), 'longdouble')
    # Applying the binary operator 'is' (line 2166)
    result_is__137680 = python_operator(stypy.reporting.localization.Localization(__file__, 2166, 15), 'is', type_137678, longdouble_137679)
    
    # Testing the type of an if condition (line 2166)
    if_condition_137681 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2166, 12), result_is__137680)
    # Assigning a type to the variable 'if_condition_137681' (line 2166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 12), 'if_condition_137681', if_condition_137681)
    # SSA begins for if statement (line 2166)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2170):
    
    # Assigning a Call to a Name (line 2170):
    
    # Call to abs(...): (line 2170)
    # Processing the call arguments (line 2170)
    # Getting the type of 'x' (line 2170)
    x_137683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 27), 'x', False)
    # Processing the call keyword arguments (line 2170)
    kwargs_137684 = {}
    # Getting the type of 'abs' (line 2170)
    abs_137682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 23), 'abs', False)
    # Calling abs(args, kwargs) (line 2170)
    abs_call_result_137685 = invoke(stypy.reporting.localization.Localization(__file__, 2170, 23), abs_137682, *[x_137683], **kwargs_137684)
    
    # Assigning a type to the variable 'absx' (line 2170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 16), 'absx', abs_call_result_137685)
    # SSA branch for the else part of an if statement (line 2166)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a IfExp to a Name (line 2172):
    
    # Assigning a IfExp to a Name (line 2172):
    
    
    # Call to isComplexType(...): (line 2172)
    # Processing the call arguments (line 2172)
    # Getting the type of 'x' (line 2172)
    x_137687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 42), 'x', False)
    # Obtaining the member 'dtype' of a type (line 2172)
    dtype_137688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2172, 42), x_137687, 'dtype')
    # Obtaining the member 'type' of a type (line 2172)
    type_137689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2172, 42), dtype_137688, 'type')
    # Processing the call keyword arguments (line 2172)
    kwargs_137690 = {}
    # Getting the type of 'isComplexType' (line 2172)
    isComplexType_137686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 28), 'isComplexType', False)
    # Calling isComplexType(args, kwargs) (line 2172)
    isComplexType_call_result_137691 = invoke(stypy.reporting.localization.Localization(__file__, 2172, 28), isComplexType_137686, *[type_137689], **kwargs_137690)
    
    # Testing the type of an if expression (line 2172)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2172, 23), isComplexType_call_result_137691)
    # SSA begins for if expression (line 2172)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'x' (line 2172)
    x_137692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 23), 'x')
    # SSA branch for the else part of an if expression (line 2172)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to asfarray(...): (line 2172)
    # Processing the call arguments (line 2172)
    # Getting the type of 'x' (line 2172)
    x_137694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 70), 'x', False)
    # Processing the call keyword arguments (line 2172)
    kwargs_137695 = {}
    # Getting the type of 'asfarray' (line 2172)
    asfarray_137693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 61), 'asfarray', False)
    # Calling asfarray(args, kwargs) (line 2172)
    asfarray_call_result_137696 = invoke(stypy.reporting.localization.Localization(__file__, 2172, 61), asfarray_137693, *[x_137694], **kwargs_137695)
    
    # SSA join for if expression (line 2172)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_137697 = union_type.UnionType.add(x_137692, asfarray_call_result_137696)
    
    # Assigning a type to the variable 'absx' (line 2172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 16), 'absx', if_exp_137697)
    
    
    # Getting the type of 'absx' (line 2173)
    absx_137698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 19), 'absx')
    # Obtaining the member 'dtype' of a type (line 2173)
    dtype_137699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 19), absx_137698, 'dtype')
    # Getting the type of 'x' (line 2173)
    x_137700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 33), 'x')
    # Obtaining the member 'dtype' of a type (line 2173)
    dtype_137701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 33), x_137700, 'dtype')
    # Applying the binary operator 'is' (line 2173)
    result_is__137702 = python_operator(stypy.reporting.localization.Localization(__file__, 2173, 19), 'is', dtype_137699, dtype_137701)
    
    # Testing the type of an if condition (line 2173)
    if_condition_137703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2173, 16), result_is__137702)
    # Assigning a type to the variable 'if_condition_137703' (line 2173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2173, 16), 'if_condition_137703', if_condition_137703)
    # SSA begins for if statement (line 2173)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2174):
    
    # Assigning a Call to a Name (line 2174):
    
    # Call to abs(...): (line 2174)
    # Processing the call arguments (line 2174)
    # Getting the type of 'absx' (line 2174)
    absx_137705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 31), 'absx', False)
    # Processing the call keyword arguments (line 2174)
    kwargs_137706 = {}
    # Getting the type of 'abs' (line 2174)
    abs_137704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 27), 'abs', False)
    # Calling abs(args, kwargs) (line 2174)
    abs_call_result_137707 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 27), abs_137704, *[absx_137705], **kwargs_137706)
    
    # Assigning a type to the variable 'absx' (line 2174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 20), 'absx', abs_call_result_137707)
    # SSA branch for the else part of an if statement (line 2173)
    module_type_store.open_ssa_branch('else')
    
    # Call to abs(...): (line 2177)
    # Processing the call arguments (line 2177)
    # Getting the type of 'absx' (line 2177)
    absx_137709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 24), 'absx', False)
    # Processing the call keyword arguments (line 2177)
    # Getting the type of 'absx' (line 2177)
    absx_137710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 34), 'absx', False)
    keyword_137711 = absx_137710
    kwargs_137712 = {'out': keyword_137711}
    # Getting the type of 'abs' (line 2177)
    abs_137708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 20), 'abs', False)
    # Calling abs(args, kwargs) (line 2177)
    abs_call_result_137713 = invoke(stypy.reporting.localization.Localization(__file__, 2177, 20), abs_137708, *[absx_137709], **kwargs_137712)
    
    # SSA join for if statement (line 2173)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2166)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'absx' (line 2178)
    absx_137714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 12), 'absx')
    # Getting the type of 'ord' (line 2178)
    ord_137715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 21), 'ord')
    # Applying the binary operator '**=' (line 2178)
    result_ipow_137716 = python_operator(stypy.reporting.localization.Localization(__file__, 2178, 12), '**=', absx_137714, ord_137715)
    # Assigning a type to the variable 'absx' (line 2178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 12), 'absx', result_ipow_137716)
    
    
    # Call to reduce(...): (line 2179)
    # Processing the call arguments (line 2179)
    # Getting the type of 'absx' (line 2179)
    absx_137719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 30), 'absx', False)
    # Processing the call keyword arguments (line 2179)
    # Getting the type of 'axis' (line 2179)
    axis_137720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 41), 'axis', False)
    keyword_137721 = axis_137720
    # Getting the type of 'keepdims' (line 2179)
    keepdims_137722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 56), 'keepdims', False)
    keyword_137723 = keepdims_137722
    kwargs_137724 = {'keepdims': keyword_137723, 'axis': keyword_137721}
    # Getting the type of 'add' (line 2179)
    add_137717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 19), 'add', False)
    # Obtaining the member 'reduce' of a type (line 2179)
    reduce_137718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2179, 19), add_137717, 'reduce')
    # Calling reduce(args, kwargs) (line 2179)
    reduce_call_result_137725 = invoke(stypy.reporting.localization.Localization(__file__, 2179, 19), reduce_137718, *[absx_137719], **kwargs_137724)
    
    float_137726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2179, 70), 'float')
    # Getting the type of 'ord' (line 2179)
    ord_137727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 76), 'ord')
    # Applying the binary operator 'div' (line 2179)
    result_div_137728 = python_operator(stypy.reporting.localization.Localization(__file__, 2179, 70), 'div', float_137726, ord_137727)
    
    # Applying the binary operator '**' (line 2179)
    result_pow_137729 = python_operator(stypy.reporting.localization.Localization(__file__, 2179, 19), '**', reduce_call_result_137725, result_div_137728)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 12), 'stypy_return_type', result_pow_137729)
    # SSA join for if statement (line 2157)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2154)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2151)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2149)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2147)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2146)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 2180)
    # Processing the call arguments (line 2180)
    # Getting the type of 'axis' (line 2180)
    axis_137731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 13), 'axis', False)
    # Processing the call keyword arguments (line 2180)
    kwargs_137732 = {}
    # Getting the type of 'len' (line 2180)
    len_137730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 9), 'len', False)
    # Calling len(args, kwargs) (line 2180)
    len_call_result_137733 = invoke(stypy.reporting.localization.Localization(__file__, 2180, 9), len_137730, *[axis_137731], **kwargs_137732)
    
    int_137734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2180, 22), 'int')
    # Applying the binary operator '==' (line 2180)
    result_eq_137735 = python_operator(stypy.reporting.localization.Localization(__file__, 2180, 9), '==', len_call_result_137733, int_137734)
    
    # Testing the type of an if condition (line 2180)
    if_condition_137736 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2180, 9), result_eq_137735)
    # Assigning a type to the variable 'if_condition_137736' (line 2180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2180, 9), 'if_condition_137736', if_condition_137736)
    # SSA begins for if statement (line 2180)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Tuple (line 2181):
    
    # Assigning a Subscript to a Name (line 2181):
    
    # Obtaining the type of the subscript
    int_137737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, 8), 'int')
    # Getting the type of 'axis' (line 2181)
    axis_137738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 29), 'axis')
    # Obtaining the member '__getitem__' of a type (line 2181)
    getitem___137739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 8), axis_137738, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2181)
    subscript_call_result_137740 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 8), getitem___137739, int_137737)
    
    # Assigning a type to the variable 'tuple_var_assignment_134373' (line 2181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'tuple_var_assignment_134373', subscript_call_result_137740)
    
    # Assigning a Subscript to a Name (line 2181):
    
    # Obtaining the type of the subscript
    int_137741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, 8), 'int')
    # Getting the type of 'axis' (line 2181)
    axis_137742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 29), 'axis')
    # Obtaining the member '__getitem__' of a type (line 2181)
    getitem___137743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 8), axis_137742, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2181)
    subscript_call_result_137744 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 8), getitem___137743, int_137741)
    
    # Assigning a type to the variable 'tuple_var_assignment_134374' (line 2181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'tuple_var_assignment_134374', subscript_call_result_137744)
    
    # Assigning a Name to a Name (line 2181):
    # Getting the type of 'tuple_var_assignment_134373' (line 2181)
    tuple_var_assignment_134373_137745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'tuple_var_assignment_134373')
    # Assigning a type to the variable 'row_axis' (line 2181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'row_axis', tuple_var_assignment_134373_137745)
    
    # Assigning a Name to a Name (line 2181):
    # Getting the type of 'tuple_var_assignment_134374' (line 2181)
    tuple_var_assignment_134374_137746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 8), 'tuple_var_assignment_134374')
    # Assigning a type to the variable 'col_axis' (line 2181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 18), 'col_axis', tuple_var_assignment_134374_137746)
    
    
    # Getting the type of 'row_axis' (line 2182)
    row_axis_137747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 11), 'row_axis')
    int_137748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 22), 'int')
    # Applying the binary operator '<' (line 2182)
    result_lt_137749 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 11), '<', row_axis_137747, int_137748)
    
    # Testing the type of an if condition (line 2182)
    if_condition_137750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2182, 8), result_lt_137749)
    # Assigning a type to the variable 'if_condition_137750' (line 2182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 8), 'if_condition_137750', if_condition_137750)
    # SSA begins for if statement (line 2182)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'row_axis' (line 2183)
    row_axis_137751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 12), 'row_axis')
    # Getting the type of 'nd' (line 2183)
    nd_137752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 24), 'nd')
    # Applying the binary operator '+=' (line 2183)
    result_iadd_137753 = python_operator(stypy.reporting.localization.Localization(__file__, 2183, 12), '+=', row_axis_137751, nd_137752)
    # Assigning a type to the variable 'row_axis' (line 2183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2183, 12), 'row_axis', result_iadd_137753)
    
    # SSA join for if statement (line 2182)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'col_axis' (line 2184)
    col_axis_137754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 11), 'col_axis')
    int_137755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 22), 'int')
    # Applying the binary operator '<' (line 2184)
    result_lt_137756 = python_operator(stypy.reporting.localization.Localization(__file__, 2184, 11), '<', col_axis_137754, int_137755)
    
    # Testing the type of an if condition (line 2184)
    if_condition_137757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2184, 8), result_lt_137756)
    # Assigning a type to the variable 'if_condition_137757' (line 2184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 8), 'if_condition_137757', if_condition_137757)
    # SSA begins for if statement (line 2184)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'col_axis' (line 2185)
    col_axis_137758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 12), 'col_axis')
    # Getting the type of 'nd' (line 2185)
    nd_137759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 24), 'nd')
    # Applying the binary operator '+=' (line 2185)
    result_iadd_137760 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 12), '+=', col_axis_137758, nd_137759)
    # Assigning a type to the variable 'col_axis' (line 2185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 12), 'col_axis', result_iadd_137760)
    
    # SSA join for if statement (line 2184)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Evaluating a boolean operation
    
    int_137761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 16), 'int')
    # Getting the type of 'row_axis' (line 2186)
    row_axis_137762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 21), 'row_axis')
    # Applying the binary operator '<=' (line 2186)
    result_le_137763 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 16), '<=', int_137761, row_axis_137762)
    # Getting the type of 'nd' (line 2186)
    nd_137764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 32), 'nd')
    # Applying the binary operator '<' (line 2186)
    result_lt_137765 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 16), '<', row_axis_137762, nd_137764)
    # Applying the binary operator '&' (line 2186)
    result_and__137766 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 16), '&', result_le_137763, result_lt_137765)
    
    
    int_137767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 39), 'int')
    # Getting the type of 'col_axis' (line 2186)
    col_axis_137768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 44), 'col_axis')
    # Applying the binary operator '<=' (line 2186)
    result_le_137769 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 39), '<=', int_137767, col_axis_137768)
    # Getting the type of 'nd' (line 2186)
    nd_137770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 55), 'nd')
    # Applying the binary operator '<' (line 2186)
    result_lt_137771 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 39), '<', col_axis_137768, nd_137770)
    # Applying the binary operator '&' (line 2186)
    result_and__137772 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 39), '&', result_le_137769, result_lt_137771)
    
    # Applying the binary operator 'and' (line 2186)
    result_and_keyword_137773 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 16), 'and', result_and__137766, result_and__137772)
    
    # Applying the 'not' unary operator (line 2186)
    result_not__137774 = python_operator(stypy.reporting.localization.Localization(__file__, 2186, 11), 'not', result_and_keyword_137773)
    
    # Testing the type of an if condition (line 2186)
    if_condition_137775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2186, 8), result_not__137774)
    # Assigning a type to the variable 'if_condition_137775' (line 2186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'if_condition_137775', if_condition_137775)
    # SSA begins for if statement (line 2186)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2187)
    # Processing the call arguments (line 2187)
    str_137777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2187, 29), 'str', 'Invalid axis %r for an array with shape %r')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2188)
    tuple_137778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2188)
    # Adding element type (line 2188)
    # Getting the type of 'axis' (line 2188)
    axis_137779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 30), 'axis', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2188, 30), tuple_137778, axis_137779)
    # Adding element type (line 2188)
    # Getting the type of 'x' (line 2188)
    x_137780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 36), 'x', False)
    # Obtaining the member 'shape' of a type (line 2188)
    shape_137781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 36), x_137780, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2188, 30), tuple_137778, shape_137781)
    
    # Applying the binary operator '%' (line 2187)
    result_mod_137782 = python_operator(stypy.reporting.localization.Localization(__file__, 2187, 29), '%', str_137777, tuple_137778)
    
    # Processing the call keyword arguments (line 2187)
    kwargs_137783 = {}
    # Getting the type of 'ValueError' (line 2187)
    ValueError_137776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2187)
    ValueError_call_result_137784 = invoke(stypy.reporting.localization.Localization(__file__, 2187, 18), ValueError_137776, *[result_mod_137782], **kwargs_137783)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2187, 12), ValueError_call_result_137784, 'raise parameter', BaseException)
    # SSA join for if statement (line 2186)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'row_axis' (line 2189)
    row_axis_137785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 11), 'row_axis')
    # Getting the type of 'col_axis' (line 2189)
    col_axis_137786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 23), 'col_axis')
    # Applying the binary operator '==' (line 2189)
    result_eq_137787 = python_operator(stypy.reporting.localization.Localization(__file__, 2189, 11), '==', row_axis_137785, col_axis_137786)
    
    # Testing the type of an if condition (line 2189)
    if_condition_137788 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2189, 8), result_eq_137787)
    # Assigning a type to the variable 'if_condition_137788' (line 2189)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2189, 8), 'if_condition_137788', if_condition_137788)
    # SSA begins for if statement (line 2189)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2190)
    # Processing the call arguments (line 2190)
    str_137790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2190, 29), 'str', 'Duplicate axes given.')
    # Processing the call keyword arguments (line 2190)
    kwargs_137791 = {}
    # Getting the type of 'ValueError' (line 2190)
    ValueError_137789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2190)
    ValueError_call_result_137792 = invoke(stypy.reporting.localization.Localization(__file__, 2190, 18), ValueError_137789, *[str_137790], **kwargs_137791)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2190, 12), ValueError_call_result_137792, 'raise parameter', BaseException)
    # SSA join for if statement (line 2189)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'ord' (line 2191)
    ord_137793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 11), 'ord')
    int_137794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2191, 18), 'int')
    # Applying the binary operator '==' (line 2191)
    result_eq_137795 = python_operator(stypy.reporting.localization.Localization(__file__, 2191, 11), '==', ord_137793, int_137794)
    
    # Testing the type of an if condition (line 2191)
    if_condition_137796 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2191, 8), result_eq_137795)
    # Assigning a type to the variable 'if_condition_137796' (line 2191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2191, 8), 'if_condition_137796', if_condition_137796)
    # SSA begins for if statement (line 2191)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2192):
    
    # Assigning a Call to a Name (line 2192):
    
    # Call to _multi_svd_norm(...): (line 2192)
    # Processing the call arguments (line 2192)
    # Getting the type of 'x' (line 2192)
    x_137798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 35), 'x', False)
    # Getting the type of 'row_axis' (line 2192)
    row_axis_137799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 38), 'row_axis', False)
    # Getting the type of 'col_axis' (line 2192)
    col_axis_137800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 48), 'col_axis', False)
    # Getting the type of 'amax' (line 2192)
    amax_137801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 58), 'amax', False)
    # Processing the call keyword arguments (line 2192)
    kwargs_137802 = {}
    # Getting the type of '_multi_svd_norm' (line 2192)
    _multi_svd_norm_137797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 19), '_multi_svd_norm', False)
    # Calling _multi_svd_norm(args, kwargs) (line 2192)
    _multi_svd_norm_call_result_137803 = invoke(stypy.reporting.localization.Localization(__file__, 2192, 19), _multi_svd_norm_137797, *[x_137798, row_axis_137799, col_axis_137800, amax_137801], **kwargs_137802)
    
    # Assigning a type to the variable 'ret' (line 2192)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 12), 'ret', _multi_svd_norm_call_result_137803)
    # SSA branch for the else part of an if statement (line 2191)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2193)
    ord_137804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 13), 'ord')
    int_137805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2193, 20), 'int')
    # Applying the binary operator '==' (line 2193)
    result_eq_137806 = python_operator(stypy.reporting.localization.Localization(__file__, 2193, 13), '==', ord_137804, int_137805)
    
    # Testing the type of an if condition (line 2193)
    if_condition_137807 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2193, 13), result_eq_137806)
    # Assigning a type to the variable 'if_condition_137807' (line 2193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 13), 'if_condition_137807', if_condition_137807)
    # SSA begins for if statement (line 2193)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2194):
    
    # Assigning a Call to a Name (line 2194):
    
    # Call to _multi_svd_norm(...): (line 2194)
    # Processing the call arguments (line 2194)
    # Getting the type of 'x' (line 2194)
    x_137809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 34), 'x', False)
    # Getting the type of 'row_axis' (line 2194)
    row_axis_137810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 37), 'row_axis', False)
    # Getting the type of 'col_axis' (line 2194)
    col_axis_137811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 47), 'col_axis', False)
    # Getting the type of 'amin' (line 2194)
    amin_137812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 57), 'amin', False)
    # Processing the call keyword arguments (line 2194)
    kwargs_137813 = {}
    # Getting the type of '_multi_svd_norm' (line 2194)
    _multi_svd_norm_137808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 18), '_multi_svd_norm', False)
    # Calling _multi_svd_norm(args, kwargs) (line 2194)
    _multi_svd_norm_call_result_137814 = invoke(stypy.reporting.localization.Localization(__file__, 2194, 18), _multi_svd_norm_137808, *[x_137809, row_axis_137810, col_axis_137811, amin_137812], **kwargs_137813)
    
    # Assigning a type to the variable 'ret' (line 2194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 12), 'ret', _multi_svd_norm_call_result_137814)
    # SSA branch for the else part of an if statement (line 2193)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2195)
    ord_137815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 13), 'ord')
    int_137816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 20), 'int')
    # Applying the binary operator '==' (line 2195)
    result_eq_137817 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 13), '==', ord_137815, int_137816)
    
    # Testing the type of an if condition (line 2195)
    if_condition_137818 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2195, 13), result_eq_137817)
    # Assigning a type to the variable 'if_condition_137818' (line 2195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 13), 'if_condition_137818', if_condition_137818)
    # SSA begins for if statement (line 2195)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'col_axis' (line 2196)
    col_axis_137819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 15), 'col_axis')
    # Getting the type of 'row_axis' (line 2196)
    row_axis_137820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 26), 'row_axis')
    # Applying the binary operator '>' (line 2196)
    result_gt_137821 = python_operator(stypy.reporting.localization.Localization(__file__, 2196, 15), '>', col_axis_137819, row_axis_137820)
    
    # Testing the type of an if condition (line 2196)
    if_condition_137822 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2196, 12), result_gt_137821)
    # Assigning a type to the variable 'if_condition_137822' (line 2196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2196, 12), 'if_condition_137822', if_condition_137822)
    # SSA begins for if statement (line 2196)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'col_axis' (line 2197)
    col_axis_137823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 16), 'col_axis')
    int_137824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 28), 'int')
    # Applying the binary operator '-=' (line 2197)
    result_isub_137825 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 16), '-=', col_axis_137823, int_137824)
    # Assigning a type to the variable 'col_axis' (line 2197)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 16), 'col_axis', result_isub_137825)
    
    # SSA join for if statement (line 2196)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2198):
    
    # Assigning a Call to a Name (line 2198):
    
    # Call to max(...): (line 2198)
    # Processing the call keyword arguments (line 2198)
    # Getting the type of 'col_axis' (line 2198)
    col_axis_137837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 61), 'col_axis', False)
    keyword_137838 = col_axis_137837
    kwargs_137839 = {'axis': keyword_137838}
    
    # Call to reduce(...): (line 2198)
    # Processing the call arguments (line 2198)
    
    # Call to abs(...): (line 2198)
    # Processing the call arguments (line 2198)
    # Getting the type of 'x' (line 2198)
    x_137829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 33), 'x', False)
    # Processing the call keyword arguments (line 2198)
    kwargs_137830 = {}
    # Getting the type of 'abs' (line 2198)
    abs_137828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2198)
    abs_call_result_137831 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 29), abs_137828, *[x_137829], **kwargs_137830)
    
    # Processing the call keyword arguments (line 2198)
    # Getting the type of 'row_axis' (line 2198)
    row_axis_137832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 42), 'row_axis', False)
    keyword_137833 = row_axis_137832
    kwargs_137834 = {'axis': keyword_137833}
    # Getting the type of 'add' (line 2198)
    add_137826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 18), 'add', False)
    # Obtaining the member 'reduce' of a type (line 2198)
    reduce_137827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 18), add_137826, 'reduce')
    # Calling reduce(args, kwargs) (line 2198)
    reduce_call_result_137835 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 18), reduce_137827, *[abs_call_result_137831], **kwargs_137834)
    
    # Obtaining the member 'max' of a type (line 2198)
    max_137836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 18), reduce_call_result_137835, 'max')
    # Calling max(args, kwargs) (line 2198)
    max_call_result_137840 = invoke(stypy.reporting.localization.Localization(__file__, 2198, 18), max_137836, *[], **kwargs_137839)
    
    # Assigning a type to the variable 'ret' (line 2198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 12), 'ret', max_call_result_137840)
    # SSA branch for the else part of an if statement (line 2195)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2199)
    ord_137841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 13), 'ord')
    # Getting the type of 'Inf' (line 2199)
    Inf_137842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 20), 'Inf')
    # Applying the binary operator '==' (line 2199)
    result_eq_137843 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 13), '==', ord_137841, Inf_137842)
    
    # Testing the type of an if condition (line 2199)
    if_condition_137844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2199, 13), result_eq_137843)
    # Assigning a type to the variable 'if_condition_137844' (line 2199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 13), 'if_condition_137844', if_condition_137844)
    # SSA begins for if statement (line 2199)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'row_axis' (line 2200)
    row_axis_137845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 15), 'row_axis')
    # Getting the type of 'col_axis' (line 2200)
    col_axis_137846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 26), 'col_axis')
    # Applying the binary operator '>' (line 2200)
    result_gt_137847 = python_operator(stypy.reporting.localization.Localization(__file__, 2200, 15), '>', row_axis_137845, col_axis_137846)
    
    # Testing the type of an if condition (line 2200)
    if_condition_137848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2200, 12), result_gt_137847)
    # Assigning a type to the variable 'if_condition_137848' (line 2200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 12), 'if_condition_137848', if_condition_137848)
    # SSA begins for if statement (line 2200)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'row_axis' (line 2201)
    row_axis_137849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 16), 'row_axis')
    int_137850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2201, 28), 'int')
    # Applying the binary operator '-=' (line 2201)
    result_isub_137851 = python_operator(stypy.reporting.localization.Localization(__file__, 2201, 16), '-=', row_axis_137849, int_137850)
    # Assigning a type to the variable 'row_axis' (line 2201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 16), 'row_axis', result_isub_137851)
    
    # SSA join for if statement (line 2200)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2202):
    
    # Assigning a Call to a Name (line 2202):
    
    # Call to max(...): (line 2202)
    # Processing the call keyword arguments (line 2202)
    # Getting the type of 'row_axis' (line 2202)
    row_axis_137863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 61), 'row_axis', False)
    keyword_137864 = row_axis_137863
    kwargs_137865 = {'axis': keyword_137864}
    
    # Call to reduce(...): (line 2202)
    # Processing the call arguments (line 2202)
    
    # Call to abs(...): (line 2202)
    # Processing the call arguments (line 2202)
    # Getting the type of 'x' (line 2202)
    x_137855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 33), 'x', False)
    # Processing the call keyword arguments (line 2202)
    kwargs_137856 = {}
    # Getting the type of 'abs' (line 2202)
    abs_137854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2202)
    abs_call_result_137857 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 29), abs_137854, *[x_137855], **kwargs_137856)
    
    # Processing the call keyword arguments (line 2202)
    # Getting the type of 'col_axis' (line 2202)
    col_axis_137858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 42), 'col_axis', False)
    keyword_137859 = col_axis_137858
    kwargs_137860 = {'axis': keyword_137859}
    # Getting the type of 'add' (line 2202)
    add_137852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 18), 'add', False)
    # Obtaining the member 'reduce' of a type (line 2202)
    reduce_137853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 18), add_137852, 'reduce')
    # Calling reduce(args, kwargs) (line 2202)
    reduce_call_result_137861 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 18), reduce_137853, *[abs_call_result_137857], **kwargs_137860)
    
    # Obtaining the member 'max' of a type (line 2202)
    max_137862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 18), reduce_call_result_137861, 'max')
    # Calling max(args, kwargs) (line 2202)
    max_call_result_137866 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 18), max_137862, *[], **kwargs_137865)
    
    # Assigning a type to the variable 'ret' (line 2202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 12), 'ret', max_call_result_137866)
    # SSA branch for the else part of an if statement (line 2199)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2203)
    ord_137867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 13), 'ord')
    int_137868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2203, 20), 'int')
    # Applying the binary operator '==' (line 2203)
    result_eq_137869 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 13), '==', ord_137867, int_137868)
    
    # Testing the type of an if condition (line 2203)
    if_condition_137870 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2203, 13), result_eq_137869)
    # Assigning a type to the variable 'if_condition_137870' (line 2203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 13), 'if_condition_137870', if_condition_137870)
    # SSA begins for if statement (line 2203)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'col_axis' (line 2204)
    col_axis_137871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 15), 'col_axis')
    # Getting the type of 'row_axis' (line 2204)
    row_axis_137872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 26), 'row_axis')
    # Applying the binary operator '>' (line 2204)
    result_gt_137873 = python_operator(stypy.reporting.localization.Localization(__file__, 2204, 15), '>', col_axis_137871, row_axis_137872)
    
    # Testing the type of an if condition (line 2204)
    if_condition_137874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2204, 12), result_gt_137873)
    # Assigning a type to the variable 'if_condition_137874' (line 2204)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 12), 'if_condition_137874', if_condition_137874)
    # SSA begins for if statement (line 2204)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'col_axis' (line 2205)
    col_axis_137875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 16), 'col_axis')
    int_137876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2205, 28), 'int')
    # Applying the binary operator '-=' (line 2205)
    result_isub_137877 = python_operator(stypy.reporting.localization.Localization(__file__, 2205, 16), '-=', col_axis_137875, int_137876)
    # Assigning a type to the variable 'col_axis' (line 2205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 16), 'col_axis', result_isub_137877)
    
    # SSA join for if statement (line 2204)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2206):
    
    # Assigning a Call to a Name (line 2206):
    
    # Call to min(...): (line 2206)
    # Processing the call keyword arguments (line 2206)
    # Getting the type of 'col_axis' (line 2206)
    col_axis_137889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 61), 'col_axis', False)
    keyword_137890 = col_axis_137889
    kwargs_137891 = {'axis': keyword_137890}
    
    # Call to reduce(...): (line 2206)
    # Processing the call arguments (line 2206)
    
    # Call to abs(...): (line 2206)
    # Processing the call arguments (line 2206)
    # Getting the type of 'x' (line 2206)
    x_137881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 33), 'x', False)
    # Processing the call keyword arguments (line 2206)
    kwargs_137882 = {}
    # Getting the type of 'abs' (line 2206)
    abs_137880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2206)
    abs_call_result_137883 = invoke(stypy.reporting.localization.Localization(__file__, 2206, 29), abs_137880, *[x_137881], **kwargs_137882)
    
    # Processing the call keyword arguments (line 2206)
    # Getting the type of 'row_axis' (line 2206)
    row_axis_137884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 42), 'row_axis', False)
    keyword_137885 = row_axis_137884
    kwargs_137886 = {'axis': keyword_137885}
    # Getting the type of 'add' (line 2206)
    add_137878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 18), 'add', False)
    # Obtaining the member 'reduce' of a type (line 2206)
    reduce_137879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2206, 18), add_137878, 'reduce')
    # Calling reduce(args, kwargs) (line 2206)
    reduce_call_result_137887 = invoke(stypy.reporting.localization.Localization(__file__, 2206, 18), reduce_137879, *[abs_call_result_137883], **kwargs_137886)
    
    # Obtaining the member 'min' of a type (line 2206)
    min_137888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2206, 18), reduce_call_result_137887, 'min')
    # Calling min(args, kwargs) (line 2206)
    min_call_result_137892 = invoke(stypy.reporting.localization.Localization(__file__, 2206, 18), min_137888, *[], **kwargs_137891)
    
    # Assigning a type to the variable 'ret' (line 2206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 12), 'ret', min_call_result_137892)
    # SSA branch for the else part of an if statement (line 2203)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2207)
    ord_137893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 13), 'ord')
    
    # Getting the type of 'Inf' (line 2207)
    Inf_137894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 21), 'Inf')
    # Applying the 'usub' unary operator (line 2207)
    result___neg___137895 = python_operator(stypy.reporting.localization.Localization(__file__, 2207, 20), 'usub', Inf_137894)
    
    # Applying the binary operator '==' (line 2207)
    result_eq_137896 = python_operator(stypy.reporting.localization.Localization(__file__, 2207, 13), '==', ord_137893, result___neg___137895)
    
    # Testing the type of an if condition (line 2207)
    if_condition_137897 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2207, 13), result_eq_137896)
    # Assigning a type to the variable 'if_condition_137897' (line 2207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 13), 'if_condition_137897', if_condition_137897)
    # SSA begins for if statement (line 2207)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'row_axis' (line 2208)
    row_axis_137898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 15), 'row_axis')
    # Getting the type of 'col_axis' (line 2208)
    col_axis_137899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 26), 'col_axis')
    # Applying the binary operator '>' (line 2208)
    result_gt_137900 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 15), '>', row_axis_137898, col_axis_137899)
    
    # Testing the type of an if condition (line 2208)
    if_condition_137901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2208, 12), result_gt_137900)
    # Assigning a type to the variable 'if_condition_137901' (line 2208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2208, 12), 'if_condition_137901', if_condition_137901)
    # SSA begins for if statement (line 2208)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'row_axis' (line 2209)
    row_axis_137902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 16), 'row_axis')
    int_137903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2209, 28), 'int')
    # Applying the binary operator '-=' (line 2209)
    result_isub_137904 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 16), '-=', row_axis_137902, int_137903)
    # Assigning a type to the variable 'row_axis' (line 2209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 16), 'row_axis', result_isub_137904)
    
    # SSA join for if statement (line 2208)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2210):
    
    # Assigning a Call to a Name (line 2210):
    
    # Call to min(...): (line 2210)
    # Processing the call keyword arguments (line 2210)
    # Getting the type of 'row_axis' (line 2210)
    row_axis_137916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 61), 'row_axis', False)
    keyword_137917 = row_axis_137916
    kwargs_137918 = {'axis': keyword_137917}
    
    # Call to reduce(...): (line 2210)
    # Processing the call arguments (line 2210)
    
    # Call to abs(...): (line 2210)
    # Processing the call arguments (line 2210)
    # Getting the type of 'x' (line 2210)
    x_137908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 33), 'x', False)
    # Processing the call keyword arguments (line 2210)
    kwargs_137909 = {}
    # Getting the type of 'abs' (line 2210)
    abs_137907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2210)
    abs_call_result_137910 = invoke(stypy.reporting.localization.Localization(__file__, 2210, 29), abs_137907, *[x_137908], **kwargs_137909)
    
    # Processing the call keyword arguments (line 2210)
    # Getting the type of 'col_axis' (line 2210)
    col_axis_137911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 42), 'col_axis', False)
    keyword_137912 = col_axis_137911
    kwargs_137913 = {'axis': keyword_137912}
    # Getting the type of 'add' (line 2210)
    add_137905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 18), 'add', False)
    # Obtaining the member 'reduce' of a type (line 2210)
    reduce_137906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2210, 18), add_137905, 'reduce')
    # Calling reduce(args, kwargs) (line 2210)
    reduce_call_result_137914 = invoke(stypy.reporting.localization.Localization(__file__, 2210, 18), reduce_137906, *[abs_call_result_137910], **kwargs_137913)
    
    # Obtaining the member 'min' of a type (line 2210)
    min_137915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2210, 18), reduce_call_result_137914, 'min')
    # Calling min(args, kwargs) (line 2210)
    min_call_result_137919 = invoke(stypy.reporting.localization.Localization(__file__, 2210, 18), min_137915, *[], **kwargs_137918)
    
    # Assigning a type to the variable 'ret' (line 2210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 12), 'ret', min_call_result_137919)
    # SSA branch for the else part of an if statement (line 2207)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2211)
    ord_137920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 13), 'ord')
    
    # Obtaining an instance of the builtin type 'list' (line 2211)
    list_137921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2211)
    # Adding element type (line 2211)
    # Getting the type of 'None' (line 2211)
    None_137922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 21), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2211, 20), list_137921, None_137922)
    # Adding element type (line 2211)
    str_137923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 27), 'str', 'fro')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2211, 20), list_137921, str_137923)
    # Adding element type (line 2211)
    str_137924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 34), 'str', 'f')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2211, 20), list_137921, str_137924)
    
    # Applying the binary operator 'in' (line 2211)
    result_contains_137925 = python_operator(stypy.reporting.localization.Localization(__file__, 2211, 13), 'in', ord_137920, list_137921)
    
    # Testing the type of an if condition (line 2211)
    if_condition_137926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2211, 13), result_contains_137925)
    # Assigning a type to the variable 'if_condition_137926' (line 2211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2211, 13), 'if_condition_137926', if_condition_137926)
    # SSA begins for if statement (line 2211)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2212):
    
    # Assigning a Call to a Name (line 2212):
    
    # Call to sqrt(...): (line 2212)
    # Processing the call arguments (line 2212)
    
    # Call to reduce(...): (line 2212)
    # Processing the call arguments (line 2212)
    
    # Call to conj(...): (line 2212)
    # Processing the call keyword arguments (line 2212)
    kwargs_137932 = {}
    # Getting the type of 'x' (line 2212)
    x_137930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 35), 'x', False)
    # Obtaining the member 'conj' of a type (line 2212)
    conj_137931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 35), x_137930, 'conj')
    # Calling conj(args, kwargs) (line 2212)
    conj_call_result_137933 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 35), conj_137931, *[], **kwargs_137932)
    
    # Getting the type of 'x' (line 2212)
    x_137934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 46), 'x', False)
    # Applying the binary operator '*' (line 2212)
    result_mul_137935 = python_operator(stypy.reporting.localization.Localization(__file__, 2212, 35), '*', conj_call_result_137933, x_137934)
    
    # Obtaining the member 'real' of a type (line 2212)
    real_137936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 35), result_mul_137935, 'real')
    # Processing the call keyword arguments (line 2212)
    # Getting the type of 'axis' (line 2212)
    axis_137937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 60), 'axis', False)
    keyword_137938 = axis_137937
    kwargs_137939 = {'axis': keyword_137938}
    # Getting the type of 'add' (line 2212)
    add_137928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 23), 'add', False)
    # Obtaining the member 'reduce' of a type (line 2212)
    reduce_137929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 23), add_137928, 'reduce')
    # Calling reduce(args, kwargs) (line 2212)
    reduce_call_result_137940 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 23), reduce_137929, *[real_137936], **kwargs_137939)
    
    # Processing the call keyword arguments (line 2212)
    kwargs_137941 = {}
    # Getting the type of 'sqrt' (line 2212)
    sqrt_137927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 18), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2212)
    sqrt_call_result_137942 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 18), sqrt_137927, *[reduce_call_result_137940], **kwargs_137941)
    
    # Assigning a type to the variable 'ret' (line 2212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 12), 'ret', sqrt_call_result_137942)
    # SSA branch for the else part of an if statement (line 2211)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ord' (line 2213)
    ord_137943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 13), 'ord')
    str_137944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2213, 20), 'str', 'nuc')
    # Applying the binary operator '==' (line 2213)
    result_eq_137945 = python_operator(stypy.reporting.localization.Localization(__file__, 2213, 13), '==', ord_137943, str_137944)
    
    # Testing the type of an if condition (line 2213)
    if_condition_137946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2213, 13), result_eq_137945)
    # Assigning a type to the variable 'if_condition_137946' (line 2213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 13), 'if_condition_137946', if_condition_137946)
    # SSA begins for if statement (line 2213)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2214):
    
    # Assigning a Call to a Name (line 2214):
    
    # Call to _multi_svd_norm(...): (line 2214)
    # Processing the call arguments (line 2214)
    # Getting the type of 'x' (line 2214)
    x_137948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 34), 'x', False)
    # Getting the type of 'row_axis' (line 2214)
    row_axis_137949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 37), 'row_axis', False)
    # Getting the type of 'col_axis' (line 2214)
    col_axis_137950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 47), 'col_axis', False)
    # Getting the type of 'sum' (line 2214)
    sum_137951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 57), 'sum', False)
    # Processing the call keyword arguments (line 2214)
    kwargs_137952 = {}
    # Getting the type of '_multi_svd_norm' (line 2214)
    _multi_svd_norm_137947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 18), '_multi_svd_norm', False)
    # Calling _multi_svd_norm(args, kwargs) (line 2214)
    _multi_svd_norm_call_result_137953 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 18), _multi_svd_norm_137947, *[x_137948, row_axis_137949, col_axis_137950, sum_137951], **kwargs_137952)
    
    # Assigning a type to the variable 'ret' (line 2214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 12), 'ret', _multi_svd_norm_call_result_137953)
    # SSA branch for the else part of an if statement (line 2213)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 2216)
    # Processing the call arguments (line 2216)
    str_137955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2216, 29), 'str', 'Invalid norm order for matrices.')
    # Processing the call keyword arguments (line 2216)
    kwargs_137956 = {}
    # Getting the type of 'ValueError' (line 2216)
    ValueError_137954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2216)
    ValueError_call_result_137957 = invoke(stypy.reporting.localization.Localization(__file__, 2216, 18), ValueError_137954, *[str_137955], **kwargs_137956)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2216, 12), ValueError_call_result_137957, 'raise parameter', BaseException)
    # SSA join for if statement (line 2213)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2211)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2207)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2203)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2199)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2195)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2193)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2191)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'keepdims' (line 2217)
    keepdims_137958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 11), 'keepdims')
    # Testing the type of an if condition (line 2217)
    if_condition_137959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2217, 8), keepdims_137958)
    # Assigning a type to the variable 'if_condition_137959' (line 2217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 8), 'if_condition_137959', if_condition_137959)
    # SSA begins for if statement (line 2217)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2218):
    
    # Assigning a Call to a Name (line 2218):
    
    # Call to list(...): (line 2218)
    # Processing the call arguments (line 2218)
    # Getting the type of 'x' (line 2218)
    x_137961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 29), 'x', False)
    # Obtaining the member 'shape' of a type (line 2218)
    shape_137962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2218, 29), x_137961, 'shape')
    # Processing the call keyword arguments (line 2218)
    kwargs_137963 = {}
    # Getting the type of 'list' (line 2218)
    list_137960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 24), 'list', False)
    # Calling list(args, kwargs) (line 2218)
    list_call_result_137964 = invoke(stypy.reporting.localization.Localization(__file__, 2218, 24), list_137960, *[shape_137962], **kwargs_137963)
    
    # Assigning a type to the variable 'ret_shape' (line 2218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2218, 12), 'ret_shape', list_call_result_137964)
    
    # Assigning a Num to a Subscript (line 2219):
    
    # Assigning a Num to a Subscript (line 2219):
    int_137965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2219, 33), 'int')
    # Getting the type of 'ret_shape' (line 2219)
    ret_shape_137966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 12), 'ret_shape')
    
    # Obtaining the type of the subscript
    int_137967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2219, 27), 'int')
    # Getting the type of 'axis' (line 2219)
    axis_137968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 22), 'axis')
    # Obtaining the member '__getitem__' of a type (line 2219)
    getitem___137969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2219, 22), axis_137968, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2219)
    subscript_call_result_137970 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 22), getitem___137969, int_137967)
    
    # Storing an element on a container (line 2219)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2219, 12), ret_shape_137966, (subscript_call_result_137970, int_137965))
    
    # Assigning a Num to a Subscript (line 2220):
    
    # Assigning a Num to a Subscript (line 2220):
    int_137971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2220, 33), 'int')
    # Getting the type of 'ret_shape' (line 2220)
    ret_shape_137972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 12), 'ret_shape')
    
    # Obtaining the type of the subscript
    int_137973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2220, 27), 'int')
    # Getting the type of 'axis' (line 2220)
    axis_137974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 22), 'axis')
    # Obtaining the member '__getitem__' of a type (line 2220)
    getitem___137975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2220, 22), axis_137974, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2220)
    subscript_call_result_137976 = invoke(stypy.reporting.localization.Localization(__file__, 2220, 22), getitem___137975, int_137973)
    
    # Storing an element on a container (line 2220)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2220, 12), ret_shape_137972, (subscript_call_result_137976, int_137971))
    
    # Assigning a Call to a Name (line 2221):
    
    # Assigning a Call to a Name (line 2221):
    
    # Call to reshape(...): (line 2221)
    # Processing the call arguments (line 2221)
    # Getting the type of 'ret_shape' (line 2221)
    ret_shape_137979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 30), 'ret_shape', False)
    # Processing the call keyword arguments (line 2221)
    kwargs_137980 = {}
    # Getting the type of 'ret' (line 2221)
    ret_137977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 18), 'ret', False)
    # Obtaining the member 'reshape' of a type (line 2221)
    reshape_137978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 18), ret_137977, 'reshape')
    # Calling reshape(args, kwargs) (line 2221)
    reshape_call_result_137981 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 18), reshape_137978, *[ret_shape_137979], **kwargs_137980)
    
    # Assigning a type to the variable 'ret' (line 2221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'ret', reshape_call_result_137981)
    # SSA join for if statement (line 2217)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 2222)
    ret_137982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 15), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 8), 'stypy_return_type', ret_137982)
    # SSA branch for the else part of an if statement (line 2180)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 2224)
    # Processing the call arguments (line 2224)
    str_137984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 25), 'str', 'Improper number of dimensions to norm.')
    # Processing the call keyword arguments (line 2224)
    kwargs_137985 = {}
    # Getting the type of 'ValueError' (line 2224)
    ValueError_137983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2224)
    ValueError_call_result_137986 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 14), ValueError_137983, *[str_137984], **kwargs_137985)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2224, 8), ValueError_call_result_137986, 'raise parameter', BaseException)
    # SSA join for if statement (line 2180)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2146)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'norm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'norm' in the type store
    # Getting the type of 'stypy_return_type' (line 1976)
    stypy_return_type_137987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_137987)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'norm'
    return stypy_return_type_137987

# Assigning a type to the variable 'norm' (line 1976)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 0), 'norm', norm)

@norecursion
def multi_dot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'multi_dot'
    module_type_store = module_type_store.open_function_context('multi_dot', 2229, 0, False)
    
    # Passed parameters checking function
    multi_dot.stypy_localization = localization
    multi_dot.stypy_type_of_self = None
    multi_dot.stypy_type_store = module_type_store
    multi_dot.stypy_function_name = 'multi_dot'
    multi_dot.stypy_param_names_list = ['arrays']
    multi_dot.stypy_varargs_param_name = None
    multi_dot.stypy_kwargs_param_name = None
    multi_dot.stypy_call_defaults = defaults
    multi_dot.stypy_call_varargs = varargs
    multi_dot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'multi_dot', ['arrays'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'multi_dot', localization, ['arrays'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'multi_dot(...)' code ##################

    str_137988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, (-1)), 'str', '\n    Compute the dot product of two or more arrays in a single function call,\n    while automatically selecting the fastest evaluation order.\n\n    `multi_dot` chains `numpy.dot` and uses optimal parenthesization\n    of the matrices [1]_ [2]_. Depending on the shapes of the matrices,\n    this can speed up the multiplication a lot.\n\n    If the first argument is 1-D it is treated as a row vector.\n    If the last argument is 1-D it is treated as a column vector.\n    The other arguments must be 2-D.\n\n    Think of `multi_dot` as::\n\n        def multi_dot(arrays): return functools.reduce(np.dot, arrays)\n\n\n    Parameters\n    ----------\n    arrays : sequence of array_like\n        If the first argument is 1-D it is treated as row vector.\n        If the last argument is 1-D it is treated as column vector.\n        The other arguments must be 2-D.\n\n    Returns\n    -------\n    output : ndarray\n        Returns the dot product of the supplied arrays.\n\n    See Also\n    --------\n    dot : dot multiplication with two arguments.\n\n    References\n    ----------\n\n    .. [1] Cormen, "Introduction to Algorithms", Chapter 15.2, p. 370-378\n    .. [2] http://en.wikipedia.org/wiki/Matrix_chain_multiplication\n\n    Examples\n    --------\n    `multi_dot` allows you to write::\n\n    >>> from numpy.linalg import multi_dot\n    >>> # Prepare some data\n    >>> A = np.random.random(10000, 100)\n    >>> B = np.random.random(100, 1000)\n    >>> C = np.random.random(1000, 5)\n    >>> D = np.random.random(5, 333)\n    >>> # the actual dot multiplication\n    >>> multi_dot([A, B, C, D])\n\n    instead of::\n\n    >>> np.dot(np.dot(np.dot(A, B), C), D)\n    >>> # or\n    >>> A.dot(B).dot(C).dot(D)\n\n\n    Example: multiplication costs of different parenthesizations\n    ------------------------------------------------------------\n\n    The cost for a matrix multiplication can be calculated with the\n    following function::\n\n        def cost(A, B): return A.shape[0] * A.shape[1] * B.shape[1]\n\n    Let\'s assume we have three matrices\n    :math:`A_{10x100}, B_{100x5}, C_{5x50}$`.\n\n    The costs for the two different parenthesizations are as follows::\n\n        cost((AB)C) = 10*100*5 + 10*5*50   = 5000 + 2500   = 7500\n        cost(A(BC)) = 10*100*50 + 100*5*50 = 50000 + 25000 = 75000\n\n    ')
    
    # Assigning a Call to a Name (line 2306):
    
    # Assigning a Call to a Name (line 2306):
    
    # Call to len(...): (line 2306)
    # Processing the call arguments (line 2306)
    # Getting the type of 'arrays' (line 2306)
    arrays_137990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 12), 'arrays', False)
    # Processing the call keyword arguments (line 2306)
    kwargs_137991 = {}
    # Getting the type of 'len' (line 2306)
    len_137989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 8), 'len', False)
    # Calling len(args, kwargs) (line 2306)
    len_call_result_137992 = invoke(stypy.reporting.localization.Localization(__file__, 2306, 8), len_137989, *[arrays_137990], **kwargs_137991)
    
    # Assigning a type to the variable 'n' (line 2306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2306, 4), 'n', len_call_result_137992)
    
    
    # Getting the type of 'n' (line 2308)
    n_137993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 7), 'n')
    int_137994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2308, 11), 'int')
    # Applying the binary operator '<' (line 2308)
    result_lt_137995 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 7), '<', n_137993, int_137994)
    
    # Testing the type of an if condition (line 2308)
    if_condition_137996 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2308, 4), result_lt_137995)
    # Assigning a type to the variable 'if_condition_137996' (line 2308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 4), 'if_condition_137996', if_condition_137996)
    # SSA begins for if statement (line 2308)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2309)
    # Processing the call arguments (line 2309)
    str_137998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 25), 'str', 'Expecting at least two arrays.')
    # Processing the call keyword arguments (line 2309)
    kwargs_137999 = {}
    # Getting the type of 'ValueError' (line 2309)
    ValueError_137997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2309)
    ValueError_call_result_138000 = invoke(stypy.reporting.localization.Localization(__file__, 2309, 14), ValueError_137997, *[str_137998], **kwargs_137999)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2309, 8), ValueError_call_result_138000, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 2308)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n' (line 2310)
    n_138001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 9), 'n')
    int_138002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 14), 'int')
    # Applying the binary operator '==' (line 2310)
    result_eq_138003 = python_operator(stypy.reporting.localization.Localization(__file__, 2310, 9), '==', n_138001, int_138002)
    
    # Testing the type of an if condition (line 2310)
    if_condition_138004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2310, 9), result_eq_138003)
    # Assigning a type to the variable 'if_condition_138004' (line 2310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 9), 'if_condition_138004', if_condition_138004)
    # SSA begins for if statement (line 2310)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to dot(...): (line 2311)
    # Processing the call arguments (line 2311)
    
    # Obtaining the type of the subscript
    int_138006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2311, 26), 'int')
    # Getting the type of 'arrays' (line 2311)
    arrays_138007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 19), 'arrays', False)
    # Obtaining the member '__getitem__' of a type (line 2311)
    getitem___138008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2311, 19), arrays_138007, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2311)
    subscript_call_result_138009 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 19), getitem___138008, int_138006)
    
    
    # Obtaining the type of the subscript
    int_138010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2311, 37), 'int')
    # Getting the type of 'arrays' (line 2311)
    arrays_138011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 30), 'arrays', False)
    # Obtaining the member '__getitem__' of a type (line 2311)
    getitem___138012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2311, 30), arrays_138011, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2311)
    subscript_call_result_138013 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 30), getitem___138012, int_138010)
    
    # Processing the call keyword arguments (line 2311)
    kwargs_138014 = {}
    # Getting the type of 'dot' (line 2311)
    dot_138005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 15), 'dot', False)
    # Calling dot(args, kwargs) (line 2311)
    dot_call_result_138015 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 15), dot_138005, *[subscript_call_result_138009, subscript_call_result_138013], **kwargs_138014)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2311)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2311, 8), 'stypy_return_type', dot_call_result_138015)
    # SSA join for if statement (line 2310)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2308)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 2313):
    
    # Assigning a ListComp to a Name (line 2313):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'arrays' (line 2313)
    arrays_138020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 37), 'arrays')
    comprehension_138021 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2313, 14), arrays_138020)
    # Assigning a type to the variable 'a' (line 2313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2313, 14), 'a', comprehension_138021)
    
    # Call to asanyarray(...): (line 2313)
    # Processing the call arguments (line 2313)
    # Getting the type of 'a' (line 2313)
    a_138017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 25), 'a', False)
    # Processing the call keyword arguments (line 2313)
    kwargs_138018 = {}
    # Getting the type of 'asanyarray' (line 2313)
    asanyarray_138016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 14), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 2313)
    asanyarray_call_result_138019 = invoke(stypy.reporting.localization.Localization(__file__, 2313, 14), asanyarray_138016, *[a_138017], **kwargs_138018)
    
    list_138022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2313, 14), list_138022, asanyarray_call_result_138019)
    # Assigning a type to the variable 'arrays' (line 2313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2313, 4), 'arrays', list_138022)
    
    # Assigning a Tuple to a Tuple (line 2316):
    
    # Assigning a Attribute to a Name (line 2316):
    
    # Obtaining the type of the subscript
    int_138023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2316, 35), 'int')
    # Getting the type of 'arrays' (line 2316)
    arrays_138024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 28), 'arrays')
    # Obtaining the member '__getitem__' of a type (line 2316)
    getitem___138025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 28), arrays_138024, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2316)
    subscript_call_result_138026 = invoke(stypy.reporting.localization.Localization(__file__, 2316, 28), getitem___138025, int_138023)
    
    # Obtaining the member 'ndim' of a type (line 2316)
    ndim_138027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 28), subscript_call_result_138026, 'ndim')
    # Assigning a type to the variable 'tuple_assignment_134375' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 4), 'tuple_assignment_134375', ndim_138027)
    
    # Assigning a Attribute to a Name (line 2316):
    
    # Obtaining the type of the subscript
    int_138028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2316, 51), 'int')
    # Getting the type of 'arrays' (line 2316)
    arrays_138029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 44), 'arrays')
    # Obtaining the member '__getitem__' of a type (line 2316)
    getitem___138030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 44), arrays_138029, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2316)
    subscript_call_result_138031 = invoke(stypy.reporting.localization.Localization(__file__, 2316, 44), getitem___138030, int_138028)
    
    # Obtaining the member 'ndim' of a type (line 2316)
    ndim_138032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2316, 44), subscript_call_result_138031, 'ndim')
    # Assigning a type to the variable 'tuple_assignment_134376' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 4), 'tuple_assignment_134376', ndim_138032)
    
    # Assigning a Name to a Name (line 2316):
    # Getting the type of 'tuple_assignment_134375' (line 2316)
    tuple_assignment_134375_138033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 4), 'tuple_assignment_134375')
    # Assigning a type to the variable 'ndim_first' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 4), 'ndim_first', tuple_assignment_134375_138033)
    
    # Assigning a Name to a Name (line 2316):
    # Getting the type of 'tuple_assignment_134376' (line 2316)
    tuple_assignment_134376_138034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 4), 'tuple_assignment_134376')
    # Assigning a type to the variable 'ndim_last' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 16), 'ndim_last', tuple_assignment_134376_138034)
    
    
    
    # Obtaining the type of the subscript
    int_138035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2319, 14), 'int')
    # Getting the type of 'arrays' (line 2319)
    arrays_138036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 7), 'arrays')
    # Obtaining the member '__getitem__' of a type (line 2319)
    getitem___138037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2319, 7), arrays_138036, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2319)
    subscript_call_result_138038 = invoke(stypy.reporting.localization.Localization(__file__, 2319, 7), getitem___138037, int_138035)
    
    # Obtaining the member 'ndim' of a type (line 2319)
    ndim_138039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2319, 7), subscript_call_result_138038, 'ndim')
    int_138040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2319, 25), 'int')
    # Applying the binary operator '==' (line 2319)
    result_eq_138041 = python_operator(stypy.reporting.localization.Localization(__file__, 2319, 7), '==', ndim_138039, int_138040)
    
    # Testing the type of an if condition (line 2319)
    if_condition_138042 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2319, 4), result_eq_138041)
    # Assigning a type to the variable 'if_condition_138042' (line 2319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2319, 4), 'if_condition_138042', if_condition_138042)
    # SSA begins for if statement (line 2319)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 2320):
    
    # Assigning a Call to a Subscript (line 2320):
    
    # Call to atleast_2d(...): (line 2320)
    # Processing the call arguments (line 2320)
    
    # Obtaining the type of the subscript
    int_138044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2320, 38), 'int')
    # Getting the type of 'arrays' (line 2320)
    arrays_138045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 31), 'arrays', False)
    # Obtaining the member '__getitem__' of a type (line 2320)
    getitem___138046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2320, 31), arrays_138045, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2320)
    subscript_call_result_138047 = invoke(stypy.reporting.localization.Localization(__file__, 2320, 31), getitem___138046, int_138044)
    
    # Processing the call keyword arguments (line 2320)
    kwargs_138048 = {}
    # Getting the type of 'atleast_2d' (line 2320)
    atleast_2d_138043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 20), 'atleast_2d', False)
    # Calling atleast_2d(args, kwargs) (line 2320)
    atleast_2d_call_result_138049 = invoke(stypy.reporting.localization.Localization(__file__, 2320, 20), atleast_2d_138043, *[subscript_call_result_138047], **kwargs_138048)
    
    # Getting the type of 'arrays' (line 2320)
    arrays_138050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 8), 'arrays')
    int_138051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2320, 15), 'int')
    # Storing an element on a container (line 2320)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2320, 8), arrays_138050, (int_138051, atleast_2d_call_result_138049))
    # SSA join for if statement (line 2319)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_138052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2321, 14), 'int')
    # Getting the type of 'arrays' (line 2321)
    arrays_138053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 7), 'arrays')
    # Obtaining the member '__getitem__' of a type (line 2321)
    getitem___138054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2321, 7), arrays_138053, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2321)
    subscript_call_result_138055 = invoke(stypy.reporting.localization.Localization(__file__, 2321, 7), getitem___138054, int_138052)
    
    # Obtaining the member 'ndim' of a type (line 2321)
    ndim_138056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2321, 7), subscript_call_result_138055, 'ndim')
    int_138057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2321, 26), 'int')
    # Applying the binary operator '==' (line 2321)
    result_eq_138058 = python_operator(stypy.reporting.localization.Localization(__file__, 2321, 7), '==', ndim_138056, int_138057)
    
    # Testing the type of an if condition (line 2321)
    if_condition_138059 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2321, 4), result_eq_138058)
    # Assigning a type to the variable 'if_condition_138059' (line 2321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2321, 4), 'if_condition_138059', if_condition_138059)
    # SSA begins for if statement (line 2321)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Subscript (line 2322):
    
    # Assigning a Attribute to a Subscript (line 2322):
    
    # Call to atleast_2d(...): (line 2322)
    # Processing the call arguments (line 2322)
    
    # Obtaining the type of the subscript
    int_138061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2322, 39), 'int')
    # Getting the type of 'arrays' (line 2322)
    arrays_138062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 32), 'arrays', False)
    # Obtaining the member '__getitem__' of a type (line 2322)
    getitem___138063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2322, 32), arrays_138062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2322)
    subscript_call_result_138064 = invoke(stypy.reporting.localization.Localization(__file__, 2322, 32), getitem___138063, int_138061)
    
    # Processing the call keyword arguments (line 2322)
    kwargs_138065 = {}
    # Getting the type of 'atleast_2d' (line 2322)
    atleast_2d_138060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 21), 'atleast_2d', False)
    # Calling atleast_2d(args, kwargs) (line 2322)
    atleast_2d_call_result_138066 = invoke(stypy.reporting.localization.Localization(__file__, 2322, 21), atleast_2d_138060, *[subscript_call_result_138064], **kwargs_138065)
    
    # Obtaining the member 'T' of a type (line 2322)
    T_138067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2322, 21), atleast_2d_call_result_138066, 'T')
    # Getting the type of 'arrays' (line 2322)
    arrays_138068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 8), 'arrays')
    int_138069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2322, 15), 'int')
    # Storing an element on a container (line 2322)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2322, 8), arrays_138068, (int_138069, T_138067))
    # SSA join for if statement (line 2321)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _assertRank2(...): (line 2323)
    # Getting the type of 'arrays' (line 2323)
    arrays_138071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 18), 'arrays', False)
    # Processing the call keyword arguments (line 2323)
    kwargs_138072 = {}
    # Getting the type of '_assertRank2' (line 2323)
    _assertRank2_138070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 4), '_assertRank2', False)
    # Calling _assertRank2(args, kwargs) (line 2323)
    _assertRank2_call_result_138073 = invoke(stypy.reporting.localization.Localization(__file__, 2323, 4), _assertRank2_138070, *[arrays_138071], **kwargs_138072)
    
    
    
    # Getting the type of 'n' (line 2326)
    n_138074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 7), 'n')
    int_138075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2326, 12), 'int')
    # Applying the binary operator '==' (line 2326)
    result_eq_138076 = python_operator(stypy.reporting.localization.Localization(__file__, 2326, 7), '==', n_138074, int_138075)
    
    # Testing the type of an if condition (line 2326)
    if_condition_138077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2326, 4), result_eq_138076)
    # Assigning a type to the variable 'if_condition_138077' (line 2326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2326, 4), 'if_condition_138077', if_condition_138077)
    # SSA begins for if statement (line 2326)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2327):
    
    # Assigning a Call to a Name (line 2327):
    
    # Call to _multi_dot_three(...): (line 2327)
    # Processing the call arguments (line 2327)
    
    # Obtaining the type of the subscript
    int_138079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 41), 'int')
    # Getting the type of 'arrays' (line 2327)
    arrays_138080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 34), 'arrays', False)
    # Obtaining the member '__getitem__' of a type (line 2327)
    getitem___138081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 34), arrays_138080, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2327)
    subscript_call_result_138082 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 34), getitem___138081, int_138079)
    
    
    # Obtaining the type of the subscript
    int_138083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 52), 'int')
    # Getting the type of 'arrays' (line 2327)
    arrays_138084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 45), 'arrays', False)
    # Obtaining the member '__getitem__' of a type (line 2327)
    getitem___138085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 45), arrays_138084, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2327)
    subscript_call_result_138086 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 45), getitem___138085, int_138083)
    
    
    # Obtaining the type of the subscript
    int_138087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 63), 'int')
    # Getting the type of 'arrays' (line 2327)
    arrays_138088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 56), 'arrays', False)
    # Obtaining the member '__getitem__' of a type (line 2327)
    getitem___138089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2327, 56), arrays_138088, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2327)
    subscript_call_result_138090 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 56), getitem___138089, int_138087)
    
    # Processing the call keyword arguments (line 2327)
    kwargs_138091 = {}
    # Getting the type of '_multi_dot_three' (line 2327)
    _multi_dot_three_138078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 17), '_multi_dot_three', False)
    # Calling _multi_dot_three(args, kwargs) (line 2327)
    _multi_dot_three_call_result_138092 = invoke(stypy.reporting.localization.Localization(__file__, 2327, 17), _multi_dot_three_138078, *[subscript_call_result_138082, subscript_call_result_138086, subscript_call_result_138090], **kwargs_138091)
    
    # Assigning a type to the variable 'result' (line 2327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'result', _multi_dot_three_call_result_138092)
    # SSA branch for the else part of an if statement (line 2326)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2329):
    
    # Assigning a Call to a Name (line 2329):
    
    # Call to _multi_dot_matrix_chain_order(...): (line 2329)
    # Processing the call arguments (line 2329)
    # Getting the type of 'arrays' (line 2329)
    arrays_138094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 46), 'arrays', False)
    # Processing the call keyword arguments (line 2329)
    kwargs_138095 = {}
    # Getting the type of '_multi_dot_matrix_chain_order' (line 2329)
    _multi_dot_matrix_chain_order_138093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 16), '_multi_dot_matrix_chain_order', False)
    # Calling _multi_dot_matrix_chain_order(args, kwargs) (line 2329)
    _multi_dot_matrix_chain_order_call_result_138096 = invoke(stypy.reporting.localization.Localization(__file__, 2329, 16), _multi_dot_matrix_chain_order_138093, *[arrays_138094], **kwargs_138095)
    
    # Assigning a type to the variable 'order' (line 2329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2329, 8), 'order', _multi_dot_matrix_chain_order_call_result_138096)
    
    # Assigning a Call to a Name (line 2330):
    
    # Assigning a Call to a Name (line 2330):
    
    # Call to _multi_dot(...): (line 2330)
    # Processing the call arguments (line 2330)
    # Getting the type of 'arrays' (line 2330)
    arrays_138098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 28), 'arrays', False)
    # Getting the type of 'order' (line 2330)
    order_138099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 36), 'order', False)
    int_138100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2330, 43), 'int')
    # Getting the type of 'n' (line 2330)
    n_138101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 46), 'n', False)
    int_138102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2330, 50), 'int')
    # Applying the binary operator '-' (line 2330)
    result_sub_138103 = python_operator(stypy.reporting.localization.Localization(__file__, 2330, 46), '-', n_138101, int_138102)
    
    # Processing the call keyword arguments (line 2330)
    kwargs_138104 = {}
    # Getting the type of '_multi_dot' (line 2330)
    _multi_dot_138097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 17), '_multi_dot', False)
    # Calling _multi_dot(args, kwargs) (line 2330)
    _multi_dot_call_result_138105 = invoke(stypy.reporting.localization.Localization(__file__, 2330, 17), _multi_dot_138097, *[arrays_138098, order_138099, int_138100, result_sub_138103], **kwargs_138104)
    
    # Assigning a type to the variable 'result' (line 2330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 8), 'result', _multi_dot_call_result_138105)
    # SSA join for if statement (line 2326)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'ndim_first' (line 2333)
    ndim_first_138106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 7), 'ndim_first')
    int_138107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2333, 21), 'int')
    # Applying the binary operator '==' (line 2333)
    result_eq_138108 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 7), '==', ndim_first_138106, int_138107)
    
    
    # Getting the type of 'ndim_last' (line 2333)
    ndim_last_138109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 27), 'ndim_last')
    int_138110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2333, 40), 'int')
    # Applying the binary operator '==' (line 2333)
    result_eq_138111 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 27), '==', ndim_last_138109, int_138110)
    
    # Applying the binary operator 'and' (line 2333)
    result_and_keyword_138112 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 7), 'and', result_eq_138108, result_eq_138111)
    
    # Testing the type of an if condition (line 2333)
    if_condition_138113 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2333, 4), result_and_keyword_138112)
    # Assigning a type to the variable 'if_condition_138113' (line 2333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2333, 4), 'if_condition_138113', if_condition_138113)
    # SSA begins for if statement (line 2333)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2334)
    tuple_138114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2334)
    # Adding element type (line 2334)
    int_138115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2334, 22), tuple_138114, int_138115)
    # Adding element type (line 2334)
    int_138116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2334, 22), tuple_138114, int_138116)
    
    # Getting the type of 'result' (line 2334)
    result_138117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 15), 'result')
    # Obtaining the member '__getitem__' of a type (line 2334)
    getitem___138118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2334, 15), result_138117, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2334)
    subscript_call_result_138119 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 15), getitem___138118, tuple_138114)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2334, 8), 'stypy_return_type', subscript_call_result_138119)
    # SSA branch for the else part of an if statement (line 2333)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'ndim_first' (line 2335)
    ndim_first_138120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 9), 'ndim_first')
    int_138121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2335, 23), 'int')
    # Applying the binary operator '==' (line 2335)
    result_eq_138122 = python_operator(stypy.reporting.localization.Localization(__file__, 2335, 9), '==', ndim_first_138120, int_138121)
    
    
    # Getting the type of 'ndim_last' (line 2335)
    ndim_last_138123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 28), 'ndim_last')
    int_138124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2335, 41), 'int')
    # Applying the binary operator '==' (line 2335)
    result_eq_138125 = python_operator(stypy.reporting.localization.Localization(__file__, 2335, 28), '==', ndim_last_138123, int_138124)
    
    # Applying the binary operator 'or' (line 2335)
    result_or_keyword_138126 = python_operator(stypy.reporting.localization.Localization(__file__, 2335, 9), 'or', result_eq_138122, result_eq_138125)
    
    # Testing the type of an if condition (line 2335)
    if_condition_138127 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2335, 9), result_or_keyword_138126)
    # Assigning a type to the variable 'if_condition_138127' (line 2335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2335, 9), 'if_condition_138127', if_condition_138127)
    # SSA begins for if statement (line 2335)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ravel(...): (line 2336)
    # Processing the call keyword arguments (line 2336)
    kwargs_138130 = {}
    # Getting the type of 'result' (line 2336)
    result_138128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 15), 'result', False)
    # Obtaining the member 'ravel' of a type (line 2336)
    ravel_138129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2336, 15), result_138128, 'ravel')
    # Calling ravel(args, kwargs) (line 2336)
    ravel_call_result_138131 = invoke(stypy.reporting.localization.Localization(__file__, 2336, 15), ravel_138129, *[], **kwargs_138130)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2336, 8), 'stypy_return_type', ravel_call_result_138131)
    # SSA branch for the else part of an if statement (line 2335)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'result' (line 2338)
    result_138132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2338, 15), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 2338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2338, 8), 'stypy_return_type', result_138132)
    # SSA join for if statement (line 2335)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2333)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'multi_dot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'multi_dot' in the type store
    # Getting the type of 'stypy_return_type' (line 2229)
    stypy_return_type_138133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_138133)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'multi_dot'
    return stypy_return_type_138133

# Assigning a type to the variable 'multi_dot' (line 2229)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 0), 'multi_dot', multi_dot)

@norecursion
def _multi_dot_three(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_multi_dot_three'
    module_type_store = module_type_store.open_function_context('_multi_dot_three', 2341, 0, False)
    
    # Passed parameters checking function
    _multi_dot_three.stypy_localization = localization
    _multi_dot_three.stypy_type_of_self = None
    _multi_dot_three.stypy_type_store = module_type_store
    _multi_dot_three.stypy_function_name = '_multi_dot_three'
    _multi_dot_three.stypy_param_names_list = ['A', 'B', 'C']
    _multi_dot_three.stypy_varargs_param_name = None
    _multi_dot_three.stypy_kwargs_param_name = None
    _multi_dot_three.stypy_call_defaults = defaults
    _multi_dot_three.stypy_call_varargs = varargs
    _multi_dot_three.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_multi_dot_three', ['A', 'B', 'C'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_multi_dot_three', localization, ['A', 'B', 'C'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_multi_dot_three(...)' code ##################

    str_138134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, (-1)), 'str', '\n    Find the best order for three arrays and do the multiplication.\n\n    For three arguments `_multi_dot_three` is approximately 15 times faster\n    than `_multi_dot_matrix_chain_order`\n\n    ')
    
    # Assigning a BinOp to a Name (line 2350):
    
    # Assigning a BinOp to a Name (line 2350):
    
    # Obtaining the type of the subscript
    int_138135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, 21), 'int')
    # Getting the type of 'A' (line 2350)
    A_138136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 13), 'A')
    # Obtaining the member 'shape' of a type (line 2350)
    shape_138137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 13), A_138136, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2350)
    getitem___138138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 13), shape_138137, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2350)
    subscript_call_result_138139 = invoke(stypy.reporting.localization.Localization(__file__, 2350, 13), getitem___138138, int_138135)
    
    
    # Obtaining the type of the subscript
    int_138140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, 34), 'int')
    # Getting the type of 'A' (line 2350)
    A_138141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 26), 'A')
    # Obtaining the member 'shape' of a type (line 2350)
    shape_138142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 26), A_138141, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2350)
    getitem___138143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 26), shape_138142, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2350)
    subscript_call_result_138144 = invoke(stypy.reporting.localization.Localization(__file__, 2350, 26), getitem___138143, int_138140)
    
    # Applying the binary operator '*' (line 2350)
    result_mul_138145 = python_operator(stypy.reporting.localization.Localization(__file__, 2350, 13), '*', subscript_call_result_138139, subscript_call_result_138144)
    
    
    # Obtaining the type of the subscript
    int_138146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, 47), 'int')
    # Getting the type of 'B' (line 2350)
    B_138147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 39), 'B')
    # Obtaining the member 'shape' of a type (line 2350)
    shape_138148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 39), B_138147, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2350)
    getitem___138149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2350, 39), shape_138148, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2350)
    subscript_call_result_138150 = invoke(stypy.reporting.localization.Localization(__file__, 2350, 39), getitem___138149, int_138146)
    
    # Applying the binary operator '*' (line 2350)
    result_mul_138151 = python_operator(stypy.reporting.localization.Localization(__file__, 2350, 37), '*', result_mul_138145, subscript_call_result_138150)
    
    
    # Obtaining the type of the subscript
    int_138152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 21), 'int')
    # Getting the type of 'A' (line 2351)
    A_138153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 13), 'A')
    # Obtaining the member 'shape' of a type (line 2351)
    shape_138154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 13), A_138153, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2351)
    getitem___138155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 13), shape_138154, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2351)
    subscript_call_result_138156 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 13), getitem___138155, int_138152)
    
    
    # Obtaining the type of the subscript
    int_138157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 34), 'int')
    # Getting the type of 'B' (line 2351)
    B_138158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 26), 'B')
    # Obtaining the member 'shape' of a type (line 2351)
    shape_138159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 26), B_138158, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2351)
    getitem___138160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 26), shape_138159, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2351)
    subscript_call_result_138161 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 26), getitem___138160, int_138157)
    
    # Applying the binary operator '*' (line 2351)
    result_mul_138162 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 13), '*', subscript_call_result_138156, subscript_call_result_138161)
    
    
    # Obtaining the type of the subscript
    int_138163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 47), 'int')
    # Getting the type of 'C' (line 2351)
    C_138164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 39), 'C')
    # Obtaining the member 'shape' of a type (line 2351)
    shape_138165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 39), C_138164, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2351)
    getitem___138166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 39), shape_138165, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2351)
    subscript_call_result_138167 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 39), getitem___138166, int_138163)
    
    # Applying the binary operator '*' (line 2351)
    result_mul_138168 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 37), '*', result_mul_138162, subscript_call_result_138167)
    
    # Applying the binary operator '+' (line 2350)
    result_add_138169 = python_operator(stypy.reporting.localization.Localization(__file__, 2350, 13), '+', result_mul_138151, result_mul_138168)
    
    # Assigning a type to the variable 'cost1' (line 2350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2350, 4), 'cost1', result_add_138169)
    
    # Assigning a BinOp to a Name (line 2353):
    
    # Assigning a BinOp to a Name (line 2353):
    
    # Obtaining the type of the subscript
    int_138170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2353, 21), 'int')
    # Getting the type of 'B' (line 2353)
    B_138171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 13), 'B')
    # Obtaining the member 'shape' of a type (line 2353)
    shape_138172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 13), B_138171, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2353)
    getitem___138173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 13), shape_138172, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2353)
    subscript_call_result_138174 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 13), getitem___138173, int_138170)
    
    
    # Obtaining the type of the subscript
    int_138175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2353, 34), 'int')
    # Getting the type of 'B' (line 2353)
    B_138176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 26), 'B')
    # Obtaining the member 'shape' of a type (line 2353)
    shape_138177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 26), B_138176, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2353)
    getitem___138178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 26), shape_138177, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2353)
    subscript_call_result_138179 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 26), getitem___138178, int_138175)
    
    # Applying the binary operator '*' (line 2353)
    result_mul_138180 = python_operator(stypy.reporting.localization.Localization(__file__, 2353, 13), '*', subscript_call_result_138174, subscript_call_result_138179)
    
    
    # Obtaining the type of the subscript
    int_138181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2353, 47), 'int')
    # Getting the type of 'C' (line 2353)
    C_138182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 39), 'C')
    # Obtaining the member 'shape' of a type (line 2353)
    shape_138183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 39), C_138182, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2353)
    getitem___138184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 39), shape_138183, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2353)
    subscript_call_result_138185 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 39), getitem___138184, int_138181)
    
    # Applying the binary operator '*' (line 2353)
    result_mul_138186 = python_operator(stypy.reporting.localization.Localization(__file__, 2353, 37), '*', result_mul_138180, subscript_call_result_138185)
    
    
    # Obtaining the type of the subscript
    int_138187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2354, 21), 'int')
    # Getting the type of 'A' (line 2354)
    A_138188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 13), 'A')
    # Obtaining the member 'shape' of a type (line 2354)
    shape_138189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 13), A_138188, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2354)
    getitem___138190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 13), shape_138189, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2354)
    subscript_call_result_138191 = invoke(stypy.reporting.localization.Localization(__file__, 2354, 13), getitem___138190, int_138187)
    
    
    # Obtaining the type of the subscript
    int_138192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2354, 34), 'int')
    # Getting the type of 'A' (line 2354)
    A_138193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 26), 'A')
    # Obtaining the member 'shape' of a type (line 2354)
    shape_138194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 26), A_138193, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2354)
    getitem___138195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 26), shape_138194, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2354)
    subscript_call_result_138196 = invoke(stypy.reporting.localization.Localization(__file__, 2354, 26), getitem___138195, int_138192)
    
    # Applying the binary operator '*' (line 2354)
    result_mul_138197 = python_operator(stypy.reporting.localization.Localization(__file__, 2354, 13), '*', subscript_call_result_138191, subscript_call_result_138196)
    
    
    # Obtaining the type of the subscript
    int_138198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2354, 47), 'int')
    # Getting the type of 'C' (line 2354)
    C_138199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 39), 'C')
    # Obtaining the member 'shape' of a type (line 2354)
    shape_138200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 39), C_138199, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2354)
    getitem___138201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2354, 39), shape_138200, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2354)
    subscript_call_result_138202 = invoke(stypy.reporting.localization.Localization(__file__, 2354, 39), getitem___138201, int_138198)
    
    # Applying the binary operator '*' (line 2354)
    result_mul_138203 = python_operator(stypy.reporting.localization.Localization(__file__, 2354, 37), '*', result_mul_138197, subscript_call_result_138202)
    
    # Applying the binary operator '+' (line 2353)
    result_add_138204 = python_operator(stypy.reporting.localization.Localization(__file__, 2353, 13), '+', result_mul_138186, result_mul_138203)
    
    # Assigning a type to the variable 'cost2' (line 2353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2353, 4), 'cost2', result_add_138204)
    
    
    # Getting the type of 'cost1' (line 2356)
    cost1_138205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 7), 'cost1')
    # Getting the type of 'cost2' (line 2356)
    cost2_138206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 15), 'cost2')
    # Applying the binary operator '<' (line 2356)
    result_lt_138207 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 7), '<', cost1_138205, cost2_138206)
    
    # Testing the type of an if condition (line 2356)
    if_condition_138208 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2356, 4), result_lt_138207)
    # Assigning a type to the variable 'if_condition_138208' (line 2356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 4), 'if_condition_138208', if_condition_138208)
    # SSA begins for if statement (line 2356)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to dot(...): (line 2357)
    # Processing the call arguments (line 2357)
    
    # Call to dot(...): (line 2357)
    # Processing the call arguments (line 2357)
    # Getting the type of 'A' (line 2357)
    A_138211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 23), 'A', False)
    # Getting the type of 'B' (line 2357)
    B_138212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 26), 'B', False)
    # Processing the call keyword arguments (line 2357)
    kwargs_138213 = {}
    # Getting the type of 'dot' (line 2357)
    dot_138210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 19), 'dot', False)
    # Calling dot(args, kwargs) (line 2357)
    dot_call_result_138214 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 19), dot_138210, *[A_138211, B_138212], **kwargs_138213)
    
    # Getting the type of 'C' (line 2357)
    C_138215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 30), 'C', False)
    # Processing the call keyword arguments (line 2357)
    kwargs_138216 = {}
    # Getting the type of 'dot' (line 2357)
    dot_138209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 15), 'dot', False)
    # Calling dot(args, kwargs) (line 2357)
    dot_call_result_138217 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 15), dot_138209, *[dot_call_result_138214, C_138215], **kwargs_138216)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'stypy_return_type', dot_call_result_138217)
    # SSA branch for the else part of an if statement (line 2356)
    module_type_store.open_ssa_branch('else')
    
    # Call to dot(...): (line 2359)
    # Processing the call arguments (line 2359)
    # Getting the type of 'A' (line 2359)
    A_138219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 19), 'A', False)
    
    # Call to dot(...): (line 2359)
    # Processing the call arguments (line 2359)
    # Getting the type of 'B' (line 2359)
    B_138221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 26), 'B', False)
    # Getting the type of 'C' (line 2359)
    C_138222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 29), 'C', False)
    # Processing the call keyword arguments (line 2359)
    kwargs_138223 = {}
    # Getting the type of 'dot' (line 2359)
    dot_138220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 22), 'dot', False)
    # Calling dot(args, kwargs) (line 2359)
    dot_call_result_138224 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 22), dot_138220, *[B_138221, C_138222], **kwargs_138223)
    
    # Processing the call keyword arguments (line 2359)
    kwargs_138225 = {}
    # Getting the type of 'dot' (line 2359)
    dot_138218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 15), 'dot', False)
    # Calling dot(args, kwargs) (line 2359)
    dot_call_result_138226 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 15), dot_138218, *[A_138219, dot_call_result_138224], **kwargs_138225)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 8), 'stypy_return_type', dot_call_result_138226)
    # SSA join for if statement (line 2356)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_multi_dot_three(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_multi_dot_three' in the type store
    # Getting the type of 'stypy_return_type' (line 2341)
    stypy_return_type_138227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_138227)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_multi_dot_three'
    return stypy_return_type_138227

# Assigning a type to the variable '_multi_dot_three' (line 2341)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2341, 0), '_multi_dot_three', _multi_dot_three)

@norecursion
def _multi_dot_matrix_chain_order(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 2362)
    False_138228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 55), 'False')
    defaults = [False_138228]
    # Create a new context for function '_multi_dot_matrix_chain_order'
    module_type_store = module_type_store.open_function_context('_multi_dot_matrix_chain_order', 2362, 0, False)
    
    # Passed parameters checking function
    _multi_dot_matrix_chain_order.stypy_localization = localization
    _multi_dot_matrix_chain_order.stypy_type_of_self = None
    _multi_dot_matrix_chain_order.stypy_type_store = module_type_store
    _multi_dot_matrix_chain_order.stypy_function_name = '_multi_dot_matrix_chain_order'
    _multi_dot_matrix_chain_order.stypy_param_names_list = ['arrays', 'return_costs']
    _multi_dot_matrix_chain_order.stypy_varargs_param_name = None
    _multi_dot_matrix_chain_order.stypy_kwargs_param_name = None
    _multi_dot_matrix_chain_order.stypy_call_defaults = defaults
    _multi_dot_matrix_chain_order.stypy_call_varargs = varargs
    _multi_dot_matrix_chain_order.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_multi_dot_matrix_chain_order', ['arrays', 'return_costs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_multi_dot_matrix_chain_order', localization, ['arrays', 'return_costs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_multi_dot_matrix_chain_order(...)' code ##################

    str_138229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, (-1)), 'str', '\n    Return a np.array that encodes the optimal order of mutiplications.\n\n    The optimal order array is then used by `_multi_dot()` to do the\n    multiplication.\n\n    Also return the cost matrix if `return_costs` is `True`\n\n    The implementation CLOSELY follows Cormen, "Introduction to Algorithms",\n    Chapter 15.2, p. 370-378.  Note that Cormen uses 1-based indices.\n\n        cost[i, j] = min([\n            cost[prefix] + cost[suffix] + cost_mult(prefix, suffix)\n            for k in range(i, j)])\n\n    ')
    
    # Assigning a Call to a Name (line 2379):
    
    # Assigning a Call to a Name (line 2379):
    
    # Call to len(...): (line 2379)
    # Processing the call arguments (line 2379)
    # Getting the type of 'arrays' (line 2379)
    arrays_138231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 12), 'arrays', False)
    # Processing the call keyword arguments (line 2379)
    kwargs_138232 = {}
    # Getting the type of 'len' (line 2379)
    len_138230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 8), 'len', False)
    # Calling len(args, kwargs) (line 2379)
    len_call_result_138233 = invoke(stypy.reporting.localization.Localization(__file__, 2379, 8), len_138230, *[arrays_138231], **kwargs_138232)
    
    # Assigning a type to the variable 'n' (line 2379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2379, 4), 'n', len_call_result_138233)
    
    # Assigning a BinOp to a Name (line 2382):
    
    # Assigning a BinOp to a Name (line 2382):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'arrays' (line 2382)
    arrays_138239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 29), 'arrays')
    comprehension_138240 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2382, 9), arrays_138239)
    # Assigning a type to the variable 'a' (line 2382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 9), 'a', comprehension_138240)
    
    # Obtaining the type of the subscript
    int_138234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 17), 'int')
    # Getting the type of 'a' (line 2382)
    a_138235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 9), 'a')
    # Obtaining the member 'shape' of a type (line 2382)
    shape_138236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2382, 9), a_138235, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2382)
    getitem___138237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2382, 9), shape_138236, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2382)
    subscript_call_result_138238 = invoke(stypy.reporting.localization.Localization(__file__, 2382, 9), getitem___138237, int_138234)
    
    list_138241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 9), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2382, 9), list_138241, subscript_call_result_138238)
    
    # Obtaining an instance of the builtin type 'list' (line 2382)
    list_138242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2382)
    # Adding element type (line 2382)
    
    # Obtaining the type of the subscript
    int_138243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 57), 'int')
    
    # Obtaining the type of the subscript
    int_138244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 47), 'int')
    # Getting the type of 'arrays' (line 2382)
    arrays_138245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 40), 'arrays')
    # Obtaining the member '__getitem__' of a type (line 2382)
    getitem___138246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2382, 40), arrays_138245, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2382)
    subscript_call_result_138247 = invoke(stypy.reporting.localization.Localization(__file__, 2382, 40), getitem___138246, int_138244)
    
    # Obtaining the member 'shape' of a type (line 2382)
    shape_138248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2382, 40), subscript_call_result_138247, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2382)
    getitem___138249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2382, 40), shape_138248, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2382)
    subscript_call_result_138250 = invoke(stypy.reporting.localization.Localization(__file__, 2382, 40), getitem___138249, int_138243)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2382, 39), list_138242, subscript_call_result_138250)
    
    # Applying the binary operator '+' (line 2382)
    result_add_138251 = python_operator(stypy.reporting.localization.Localization(__file__, 2382, 8), '+', list_138241, list_138242)
    
    # Assigning a type to the variable 'p' (line 2382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'p', result_add_138251)
    
    # Assigning a Call to a Name (line 2385):
    
    # Assigning a Call to a Name (line 2385):
    
    # Call to zeros(...): (line 2385)
    # Processing the call arguments (line 2385)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2385)
    tuple_138253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2385, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2385)
    # Adding element type (line 2385)
    # Getting the type of 'n' (line 2385)
    n_138254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 15), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2385, 15), tuple_138253, n_138254)
    # Adding element type (line 2385)
    # Getting the type of 'n' (line 2385)
    n_138255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 18), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2385, 15), tuple_138253, n_138255)
    
    # Processing the call keyword arguments (line 2385)
    # Getting the type of 'double' (line 2385)
    double_138256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 28), 'double', False)
    keyword_138257 = double_138256
    kwargs_138258 = {'dtype': keyword_138257}
    # Getting the type of 'zeros' (line 2385)
    zeros_138252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 2385)
    zeros_call_result_138259 = invoke(stypy.reporting.localization.Localization(__file__, 2385, 8), zeros_138252, *[tuple_138253], **kwargs_138258)
    
    # Assigning a type to the variable 'm' (line 2385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2385, 4), 'm', zeros_call_result_138259)
    
    # Assigning a Call to a Name (line 2388):
    
    # Assigning a Call to a Name (line 2388):
    
    # Call to empty(...): (line 2388)
    # Processing the call arguments (line 2388)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2388)
    tuple_138261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2388, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2388)
    # Adding element type (line 2388)
    # Getting the type of 'n' (line 2388)
    n_138262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 15), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2388, 15), tuple_138261, n_138262)
    # Adding element type (line 2388)
    # Getting the type of 'n' (line 2388)
    n_138263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 18), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2388, 15), tuple_138261, n_138263)
    
    # Processing the call keyword arguments (line 2388)
    # Getting the type of 'intp' (line 2388)
    intp_138264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 28), 'intp', False)
    keyword_138265 = intp_138264
    kwargs_138266 = {'dtype': keyword_138265}
    # Getting the type of 'empty' (line 2388)
    empty_138260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 8), 'empty', False)
    # Calling empty(args, kwargs) (line 2388)
    empty_call_result_138267 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 8), empty_138260, *[tuple_138261], **kwargs_138266)
    
    # Assigning a type to the variable 's' (line 2388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2388, 4), 's', empty_call_result_138267)
    
    
    # Call to range(...): (line 2390)
    # Processing the call arguments (line 2390)
    int_138269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2390, 19), 'int')
    # Getting the type of 'n' (line 2390)
    n_138270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 22), 'n', False)
    # Processing the call keyword arguments (line 2390)
    kwargs_138271 = {}
    # Getting the type of 'range' (line 2390)
    range_138268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 13), 'range', False)
    # Calling range(args, kwargs) (line 2390)
    range_call_result_138272 = invoke(stypy.reporting.localization.Localization(__file__, 2390, 13), range_138268, *[int_138269, n_138270], **kwargs_138271)
    
    # Testing the type of a for loop iterable (line 2390)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2390, 4), range_call_result_138272)
    # Getting the type of the for loop variable (line 2390)
    for_loop_var_138273 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2390, 4), range_call_result_138272)
    # Assigning a type to the variable 'l' (line 2390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2390, 4), 'l', for_loop_var_138273)
    # SSA begins for a for statement (line 2390)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 2391)
    # Processing the call arguments (line 2391)
    # Getting the type of 'n' (line 2391)
    n_138275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 23), 'n', False)
    # Getting the type of 'l' (line 2391)
    l_138276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 27), 'l', False)
    # Applying the binary operator '-' (line 2391)
    result_sub_138277 = python_operator(stypy.reporting.localization.Localization(__file__, 2391, 23), '-', n_138275, l_138276)
    
    # Processing the call keyword arguments (line 2391)
    kwargs_138278 = {}
    # Getting the type of 'range' (line 2391)
    range_138274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 17), 'range', False)
    # Calling range(args, kwargs) (line 2391)
    range_call_result_138279 = invoke(stypy.reporting.localization.Localization(__file__, 2391, 17), range_138274, *[result_sub_138277], **kwargs_138278)
    
    # Testing the type of a for loop iterable (line 2391)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2391, 8), range_call_result_138279)
    # Getting the type of the for loop variable (line 2391)
    for_loop_var_138280 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2391, 8), range_call_result_138279)
    # Assigning a type to the variable 'i' (line 2391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2391, 8), 'i', for_loop_var_138280)
    # SSA begins for a for statement (line 2391)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 2392):
    
    # Assigning a BinOp to a Name (line 2392):
    # Getting the type of 'i' (line 2392)
    i_138281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 16), 'i')
    # Getting the type of 'l' (line 2392)
    l_138282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 20), 'l')
    # Applying the binary operator '+' (line 2392)
    result_add_138283 = python_operator(stypy.reporting.localization.Localization(__file__, 2392, 16), '+', i_138281, l_138282)
    
    # Assigning a type to the variable 'j' (line 2392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 12), 'j', result_add_138283)
    
    # Assigning a Name to a Subscript (line 2393):
    
    # Assigning a Name to a Subscript (line 2393):
    # Getting the type of 'Inf' (line 2393)
    Inf_138284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 22), 'Inf')
    # Getting the type of 'm' (line 2393)
    m_138285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 12), 'm')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2393)
    tuple_138286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2393)
    # Adding element type (line 2393)
    # Getting the type of 'i' (line 2393)
    i_138287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 14), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2393, 14), tuple_138286, i_138287)
    # Adding element type (line 2393)
    # Getting the type of 'j' (line 2393)
    j_138288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 17), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2393, 14), tuple_138286, j_138288)
    
    # Storing an element on a container (line 2393)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2393, 12), m_138285, (tuple_138286, Inf_138284))
    
    
    # Call to range(...): (line 2394)
    # Processing the call arguments (line 2394)
    # Getting the type of 'i' (line 2394)
    i_138290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 27), 'i', False)
    # Getting the type of 'j' (line 2394)
    j_138291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 30), 'j', False)
    # Processing the call keyword arguments (line 2394)
    kwargs_138292 = {}
    # Getting the type of 'range' (line 2394)
    range_138289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 21), 'range', False)
    # Calling range(args, kwargs) (line 2394)
    range_call_result_138293 = invoke(stypy.reporting.localization.Localization(__file__, 2394, 21), range_138289, *[i_138290, j_138291], **kwargs_138292)
    
    # Testing the type of a for loop iterable (line 2394)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2394, 12), range_call_result_138293)
    # Getting the type of the for loop variable (line 2394)
    for_loop_var_138294 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2394, 12), range_call_result_138293)
    # Assigning a type to the variable 'k' (line 2394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 12), 'k', for_loop_var_138294)
    # SSA begins for a for statement (line 2394)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 2395):
    
    # Assigning a BinOp to a Name (line 2395):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2395)
    tuple_138295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2395)
    # Adding element type (line 2395)
    # Getting the type of 'i' (line 2395)
    i_138296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 22), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2395, 22), tuple_138295, i_138296)
    # Adding element type (line 2395)
    # Getting the type of 'k' (line 2395)
    k_138297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 25), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2395, 22), tuple_138295, k_138297)
    
    # Getting the type of 'm' (line 2395)
    m_138298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 20), 'm')
    # Obtaining the member '__getitem__' of a type (line 2395)
    getitem___138299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2395, 20), m_138298, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2395)
    subscript_call_result_138300 = invoke(stypy.reporting.localization.Localization(__file__, 2395, 20), getitem___138299, tuple_138295)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2395)
    tuple_138301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2395)
    # Adding element type (line 2395)
    # Getting the type of 'k' (line 2395)
    k_138302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 32), 'k')
    int_138303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 34), 'int')
    # Applying the binary operator '+' (line 2395)
    result_add_138304 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 32), '+', k_138302, int_138303)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2395, 32), tuple_138301, result_add_138304)
    # Adding element type (line 2395)
    # Getting the type of 'j' (line 2395)
    j_138305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 37), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2395, 32), tuple_138301, j_138305)
    
    # Getting the type of 'm' (line 2395)
    m_138306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 30), 'm')
    # Obtaining the member '__getitem__' of a type (line 2395)
    getitem___138307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2395, 30), m_138306, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2395)
    subscript_call_result_138308 = invoke(stypy.reporting.localization.Localization(__file__, 2395, 30), getitem___138307, tuple_138301)
    
    # Applying the binary operator '+' (line 2395)
    result_add_138309 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 20), '+', subscript_call_result_138300, subscript_call_result_138308)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2395)
    i_138310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 44), 'i')
    # Getting the type of 'p' (line 2395)
    p_138311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 42), 'p')
    # Obtaining the member '__getitem__' of a type (line 2395)
    getitem___138312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2395, 42), p_138311, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2395)
    subscript_call_result_138313 = invoke(stypy.reporting.localization.Localization(__file__, 2395, 42), getitem___138312, i_138310)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2395)
    k_138314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 49), 'k')
    int_138315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 51), 'int')
    # Applying the binary operator '+' (line 2395)
    result_add_138316 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 49), '+', k_138314, int_138315)
    
    # Getting the type of 'p' (line 2395)
    p_138317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 47), 'p')
    # Obtaining the member '__getitem__' of a type (line 2395)
    getitem___138318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2395, 47), p_138317, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2395)
    subscript_call_result_138319 = invoke(stypy.reporting.localization.Localization(__file__, 2395, 47), getitem___138318, result_add_138316)
    
    # Applying the binary operator '*' (line 2395)
    result_mul_138320 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 42), '*', subscript_call_result_138313, subscript_call_result_138319)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2395)
    j_138321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 56), 'j')
    int_138322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 58), 'int')
    # Applying the binary operator '+' (line 2395)
    result_add_138323 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 56), '+', j_138321, int_138322)
    
    # Getting the type of 'p' (line 2395)
    p_138324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 54), 'p')
    # Obtaining the member '__getitem__' of a type (line 2395)
    getitem___138325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2395, 54), p_138324, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2395)
    subscript_call_result_138326 = invoke(stypy.reporting.localization.Localization(__file__, 2395, 54), getitem___138325, result_add_138323)
    
    # Applying the binary operator '*' (line 2395)
    result_mul_138327 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 53), '*', result_mul_138320, subscript_call_result_138326)
    
    # Applying the binary operator '+' (line 2395)
    result_add_138328 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 40), '+', result_add_138309, result_mul_138327)
    
    # Assigning a type to the variable 'q' (line 2395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2395, 16), 'q', result_add_138328)
    
    
    # Getting the type of 'q' (line 2396)
    q_138329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 19), 'q')
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2396)
    tuple_138330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2396, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2396)
    # Adding element type (line 2396)
    # Getting the type of 'i' (line 2396)
    i_138331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 25), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2396, 25), tuple_138330, i_138331)
    # Adding element type (line 2396)
    # Getting the type of 'j' (line 2396)
    j_138332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 28), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2396, 25), tuple_138330, j_138332)
    
    # Getting the type of 'm' (line 2396)
    m_138333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 23), 'm')
    # Obtaining the member '__getitem__' of a type (line 2396)
    getitem___138334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2396, 23), m_138333, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2396)
    subscript_call_result_138335 = invoke(stypy.reporting.localization.Localization(__file__, 2396, 23), getitem___138334, tuple_138330)
    
    # Applying the binary operator '<' (line 2396)
    result_lt_138336 = python_operator(stypy.reporting.localization.Localization(__file__, 2396, 19), '<', q_138329, subscript_call_result_138335)
    
    # Testing the type of an if condition (line 2396)
    if_condition_138337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2396, 16), result_lt_138336)
    # Assigning a type to the variable 'if_condition_138337' (line 2396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2396, 16), 'if_condition_138337', if_condition_138337)
    # SSA begins for if statement (line 2396)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 2397):
    
    # Assigning a Name to a Subscript (line 2397):
    # Getting the type of 'q' (line 2397)
    q_138338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 30), 'q')
    # Getting the type of 'm' (line 2397)
    m_138339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 20), 'm')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2397)
    tuple_138340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2397)
    # Adding element type (line 2397)
    # Getting the type of 'i' (line 2397)
    i_138341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 22), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2397, 22), tuple_138340, i_138341)
    # Adding element type (line 2397)
    # Getting the type of 'j' (line 2397)
    j_138342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 25), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2397, 22), tuple_138340, j_138342)
    
    # Storing an element on a container (line 2397)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2397, 20), m_138339, (tuple_138340, q_138338))
    
    # Assigning a Name to a Subscript (line 2398):
    
    # Assigning a Name to a Subscript (line 2398):
    # Getting the type of 'k' (line 2398)
    k_138343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 30), 'k')
    # Getting the type of 's' (line 2398)
    s_138344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 20), 's')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2398)
    tuple_138345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2398, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2398)
    # Adding element type (line 2398)
    # Getting the type of 'i' (line 2398)
    i_138346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 22), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2398, 22), tuple_138345, i_138346)
    # Adding element type (line 2398)
    # Getting the type of 'j' (line 2398)
    j_138347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 25), 'j')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2398, 22), tuple_138345, j_138347)
    
    # Storing an element on a container (line 2398)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2398, 20), s_138344, (tuple_138345, k_138343))
    # SSA join for if statement (line 2396)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'return_costs' (line 2400)
    return_costs_138348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 21), 'return_costs')
    # Testing the type of an if expression (line 2400)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2400, 11), return_costs_138348)
    # SSA begins for if expression (line 2400)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2400)
    tuple_138349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2400, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2400)
    # Adding element type (line 2400)
    # Getting the type of 's' (line 2400)
    s_138350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 12), 's')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2400, 12), tuple_138349, s_138350)
    # Adding element type (line 2400)
    # Getting the type of 'm' (line 2400)
    m_138351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 15), 'm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2400, 12), tuple_138349, m_138351)
    
    # SSA branch for the else part of an if expression (line 2400)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 's' (line 2400)
    s_138352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 39), 's')
    # SSA join for if expression (line 2400)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_138353 = union_type.UnionType.add(tuple_138349, s_138352)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2400, 4), 'stypy_return_type', if_exp_138353)
    
    # ################# End of '_multi_dot_matrix_chain_order(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_multi_dot_matrix_chain_order' in the type store
    # Getting the type of 'stypy_return_type' (line 2362)
    stypy_return_type_138354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_138354)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_multi_dot_matrix_chain_order'
    return stypy_return_type_138354

# Assigning a type to the variable '_multi_dot_matrix_chain_order' (line 2362)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2362, 0), '_multi_dot_matrix_chain_order', _multi_dot_matrix_chain_order)

@norecursion
def _multi_dot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_multi_dot'
    module_type_store = module_type_store.open_function_context('_multi_dot', 2403, 0, False)
    
    # Passed parameters checking function
    _multi_dot.stypy_localization = localization
    _multi_dot.stypy_type_of_self = None
    _multi_dot.stypy_type_store = module_type_store
    _multi_dot.stypy_function_name = '_multi_dot'
    _multi_dot.stypy_param_names_list = ['arrays', 'order', 'i', 'j']
    _multi_dot.stypy_varargs_param_name = None
    _multi_dot.stypy_kwargs_param_name = None
    _multi_dot.stypy_call_defaults = defaults
    _multi_dot.stypy_call_varargs = varargs
    _multi_dot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_multi_dot', ['arrays', 'order', 'i', 'j'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_multi_dot', localization, ['arrays', 'order', 'i', 'j'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_multi_dot(...)' code ##################

    str_138355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2404, 4), 'str', 'Actually do the multiplication with the given order.')
    
    
    # Getting the type of 'i' (line 2405)
    i_138356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 7), 'i')
    # Getting the type of 'j' (line 2405)
    j_138357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 12), 'j')
    # Applying the binary operator '==' (line 2405)
    result_eq_138358 = python_operator(stypy.reporting.localization.Localization(__file__, 2405, 7), '==', i_138356, j_138357)
    
    # Testing the type of an if condition (line 2405)
    if_condition_138359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2405, 4), result_eq_138358)
    # Assigning a type to the variable 'if_condition_138359' (line 2405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2405, 4), 'if_condition_138359', if_condition_138359)
    # SSA begins for if statement (line 2405)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2406)
    i_138360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 22), 'i')
    # Getting the type of 'arrays' (line 2406)
    arrays_138361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 15), 'arrays')
    # Obtaining the member '__getitem__' of a type (line 2406)
    getitem___138362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2406, 15), arrays_138361, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2406)
    subscript_call_result_138363 = invoke(stypy.reporting.localization.Localization(__file__, 2406, 15), getitem___138362, i_138360)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2406, 8), 'stypy_return_type', subscript_call_result_138363)
    # SSA branch for the else part of an if statement (line 2405)
    module_type_store.open_ssa_branch('else')
    
    # Call to dot(...): (line 2408)
    # Processing the call arguments (line 2408)
    
    # Call to _multi_dot(...): (line 2408)
    # Processing the call arguments (line 2408)
    # Getting the type of 'arrays' (line 2408)
    arrays_138366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 30), 'arrays', False)
    # Getting the type of 'order' (line 2408)
    order_138367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 38), 'order', False)
    # Getting the type of 'i' (line 2408)
    i_138368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 45), 'i', False)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2408)
    tuple_138369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2408, 54), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2408)
    # Adding element type (line 2408)
    # Getting the type of 'i' (line 2408)
    i_138370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 54), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2408, 54), tuple_138369, i_138370)
    # Adding element type (line 2408)
    # Getting the type of 'j' (line 2408)
    j_138371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 57), 'j', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2408, 54), tuple_138369, j_138371)
    
    # Getting the type of 'order' (line 2408)
    order_138372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 48), 'order', False)
    # Obtaining the member '__getitem__' of a type (line 2408)
    getitem___138373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2408, 48), order_138372, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2408)
    subscript_call_result_138374 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 48), getitem___138373, tuple_138369)
    
    # Processing the call keyword arguments (line 2408)
    kwargs_138375 = {}
    # Getting the type of '_multi_dot' (line 2408)
    _multi_dot_138365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 19), '_multi_dot', False)
    # Calling _multi_dot(args, kwargs) (line 2408)
    _multi_dot_call_result_138376 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 19), _multi_dot_138365, *[arrays_138366, order_138367, i_138368, subscript_call_result_138374], **kwargs_138375)
    
    
    # Call to _multi_dot(...): (line 2409)
    # Processing the call arguments (line 2409)
    # Getting the type of 'arrays' (line 2409)
    arrays_138378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 30), 'arrays', False)
    # Getting the type of 'order' (line 2409)
    order_138379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 38), 'order', False)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2409)
    tuple_138380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2409, 51), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2409)
    # Adding element type (line 2409)
    # Getting the type of 'i' (line 2409)
    i_138381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 51), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2409, 51), tuple_138380, i_138381)
    # Adding element type (line 2409)
    # Getting the type of 'j' (line 2409)
    j_138382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 54), 'j', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2409, 51), tuple_138380, j_138382)
    
    # Getting the type of 'order' (line 2409)
    order_138383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 45), 'order', False)
    # Obtaining the member '__getitem__' of a type (line 2409)
    getitem___138384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2409, 45), order_138383, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2409)
    subscript_call_result_138385 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 45), getitem___138384, tuple_138380)
    
    int_138386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2409, 59), 'int')
    # Applying the binary operator '+' (line 2409)
    result_add_138387 = python_operator(stypy.reporting.localization.Localization(__file__, 2409, 45), '+', subscript_call_result_138385, int_138386)
    
    # Getting the type of 'j' (line 2409)
    j_138388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 62), 'j', False)
    # Processing the call keyword arguments (line 2409)
    kwargs_138389 = {}
    # Getting the type of '_multi_dot' (line 2409)
    _multi_dot_138377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 19), '_multi_dot', False)
    # Calling _multi_dot(args, kwargs) (line 2409)
    _multi_dot_call_result_138390 = invoke(stypy.reporting.localization.Localization(__file__, 2409, 19), _multi_dot_138377, *[arrays_138378, order_138379, result_add_138387, j_138388], **kwargs_138389)
    
    # Processing the call keyword arguments (line 2408)
    kwargs_138391 = {}
    # Getting the type of 'dot' (line 2408)
    dot_138364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 15), 'dot', False)
    # Calling dot(args, kwargs) (line 2408)
    dot_call_result_138392 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 15), dot_138364, *[_multi_dot_call_result_138376, _multi_dot_call_result_138390], **kwargs_138391)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2408, 8), 'stypy_return_type', dot_call_result_138392)
    # SSA join for if statement (line 2405)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_multi_dot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_multi_dot' in the type store
    # Getting the type of 'stypy_return_type' (line 2403)
    stypy_return_type_138393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_138393)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_multi_dot'
    return stypy_return_type_138393

# Assigning a type to the variable '_multi_dot' (line 2403)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2403, 0), '_multi_dot', _multi_dot)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
