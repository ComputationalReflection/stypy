
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # -*- coding: utf-8 -*-
2: '''
3: The rrule module offers a small, complete, and very fast, implementation of
4: the recurrence rules documented in the
5: `iCalendar RFC <http://www.ietf.org/rfc/rfc2445.txt>`_,
6: including support for caching of results.
7: '''
8: import itertools
9: import datetime
10: import calendar
11: import sys
12: 
13: try:
14:     from math import gcd
15: except ImportError:
16:     from fractions import gcd
17: 
18: from six import advance_iterator, integer_types
19: from six.moves import _thread, range
20: import heapq
21: 
22: from ._common import weekday as weekdaybase
23: 
24: # For warning about deprecation of until and count
25: from warnings import warn
26: 
27: __all__ = ["rrule", "rruleset", "rrulestr",
28:            "YEARLY", "MONTHLY", "WEEKLY", "DAILY",
29:            "HOURLY", "MINUTELY", "SECONDLY",
30:            "MO", "TU", "WE", "TH", "FR", "SA", "SU"]
31: 
32: # Every mask is 7 days longer to handle cross-year weekly periods.
33: M366MASK = tuple([1]*31+[2]*29+[3]*31+[4]*30+[5]*31+[6]*30 +
34:                  [7]*31+[8]*31+[9]*30+[10]*31+[11]*30+[12]*31+[1]*7)
35: M365MASK = list(M366MASK)
36: M29, M30, M31 = list(range(1, 30)), list(range(1, 31)), list(range(1, 32))
37: MDAY366MASK = tuple(M31+M29+M31+M30+M31+M30+M31+M31+M30+M31+M30+M31+M31[:7])
38: MDAY365MASK = list(MDAY366MASK)
39: M29, M30, M31 = list(range(-29, 0)), list(range(-30, 0)), list(range(-31, 0))
40: NMDAY366MASK = tuple(M31+M29+M31+M30+M31+M30+M31+M31+M30+M31+M30+M31+M31[:7])
41: NMDAY365MASK = list(NMDAY366MASK)
42: M366RANGE = (0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366)
43: M365RANGE = (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365)
44: WDAYMASK = [0, 1, 2, 3, 4, 5, 6]*55
45: del M29, M30, M31, M365MASK[59], MDAY365MASK[59], NMDAY365MASK[31]
46: MDAY365MASK = tuple(MDAY365MASK)
47: M365MASK = tuple(M365MASK)
48: 
49: FREQNAMES = ['YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY']
50: 
51: (YEARLY,
52:  MONTHLY,
53:  WEEKLY,
54:  DAILY,
55:  HOURLY,
56:  MINUTELY,
57:  SECONDLY) = list(range(7))
58: 
59: # Imported on demand.
60: easter = None
61: parser = None
62: 
63: 
64: class weekday(weekdaybase):
65:     '''
66:     This version of weekday does not allow n = 0.
67:     '''
68:     def __init__(self, wkday, n=None):
69:         if n == 0:
70:             raise ValueError("Can't create weekday with n==0")
71: 
72:         super(weekday, self).__init__(wkday, n)
73: 
74: 
75: MO, TU, WE, TH, FR, SA, SU = weekdays = tuple(weekday(x) for x in range(7))
76: 
77: 
78: def _invalidates_cache(f):
79:     '''
80:     Decorator for rruleset methods which may invalidate the
81:     cached length.
82:     '''
83:     def inner_func(self, *args, **kwargs):
84:         rv = f(self, *args, **kwargs)
85:         self._invalidate_cache()
86:         return rv
87: 
88:     return inner_func
89: 
90: 
91: class rrulebase(object):
92:     def __init__(self, cache=False):
93:         if cache:
94:             self._cache = []
95:             self._cache_lock = _thread.allocate_lock()
96:             self._invalidate_cache()
97:         else:
98:             self._cache = None
99:             self._cache_complete = False
100:             self._len = None
101: 
102:     def __iter__(self):
103:         if self._cache_complete:
104:             return iter(self._cache)
105:         elif self._cache is None:
106:             return self._iter()
107:         else:
108:             return self._iter_cached()
109: 
110:     def _invalidate_cache(self):
111:         if self._cache is not None:
112:             self._cache = []
113:             self._cache_complete = False
114:             self._cache_gen = self._iter()
115: 
116:             if self._cache_lock.locked():
117:                 self._cache_lock.release()
118: 
119:         self._len = None
120: 
121:     def _iter_cached(self):
122:         i = 0
123:         gen = self._cache_gen
124:         cache = self._cache
125:         acquire = self._cache_lock.acquire
126:         release = self._cache_lock.release
127:         while gen:
128:             if i == len(cache):
129:                 acquire()
130:                 if self._cache_complete:
131:                     break
132:                 try:
133:                     for j in range(10):
134:                         cache.append(advance_iterator(gen))
135:                 except StopIteration:
136:                     self._cache_gen = gen = None
137:                     self._cache_complete = True
138:                     break
139:                 release()
140:             yield cache[i]
141:             i += 1
142:         while i < self._len:
143:             yield cache[i]
144:             i += 1
145: 
146:     def __getitem__(self, item):
147:         if self._cache_complete:
148:             return self._cache[item]
149:         elif isinstance(item, slice):
150:             if item.step and item.step < 0:
151:                 return list(iter(self))[item]
152:             else:
153:                 return list(itertools.islice(self,
154:                                              item.start or 0,
155:                                              item.stop or sys.maxsize,
156:                                              item.step or 1))
157:         elif item >= 0:
158:             gen = iter(self)
159:             try:
160:                 for i in range(item+1):
161:                     res = advance_iterator(gen)
162:             except StopIteration:
163:                 raise IndexError
164:             return res
165:         else:
166:             return list(iter(self))[item]
167: 
168:     def __contains__(self, item):
169:         if self._cache_complete:
170:             return item in self._cache
171:         else:
172:             for i in self:
173:                 if i == item:
174:                     return True
175:                 elif i > item:
176:                     return False
177:         return False
178: 
179:     # __len__() introduces a large performance penality.
180:     def count(self):
181:         ''' Returns the number of recurrences in this set. It will have go
182:             trough the whole recurrence, if this hasn't been done before. '''
183:         if self._len is None:
184:             for x in self:
185:                 pass
186:         return self._len
187: 
188:     def before(self, dt, inc=False):
189:         ''' Returns the last recurrence before the given datetime instance. The
190:             inc keyword defines what happens if dt is an occurrence. With
191:             inc=True, if dt itself is an occurrence, it will be returned. '''
192:         if self._cache_complete:
193:             gen = self._cache
194:         else:
195:             gen = self
196:         last = None
197:         if inc:
198:             for i in gen:
199:                 if i > dt:
200:                     break
201:                 last = i
202:         else:
203:             for i in gen:
204:                 if i >= dt:
205:                     break
206:                 last = i
207:         return last
208: 
209:     def after(self, dt, inc=False):
210:         ''' Returns the first recurrence after the given datetime instance. The
211:             inc keyword defines what happens if dt is an occurrence. With
212:             inc=True, if dt itself is an occurrence, it will be returned.  '''
213:         if self._cache_complete:
214:             gen = self._cache
215:         else:
216:             gen = self
217:         if inc:
218:             for i in gen:
219:                 if i >= dt:
220:                     return i
221:         else:
222:             for i in gen:
223:                 if i > dt:
224:                     return i
225:         return None
226: 
227:     def xafter(self, dt, count=None, inc=False):
228:         '''
229:         Generator which yields up to `count` recurrences after the given
230:         datetime instance, equivalent to `after`.
231: 
232:         :param dt:
233:             The datetime at which to start generating recurrences.
234: 
235:         :param count:
236:             The maximum number of recurrences to generate. If `None` (default),
237:             dates are generated until the recurrence rule is exhausted.
238: 
239:         :param inc:
240:             If `dt` is an instance of the rule and `inc` is `True`, it is
241:             included in the output.
242: 
243:         :yields: Yields a sequence of `datetime` objects.
244:         '''
245: 
246:         if self._cache_complete:
247:             gen = self._cache
248:         else:
249:             gen = self
250: 
251:         # Select the comparison function
252:         if inc:
253:             comp = lambda dc, dtc: dc >= dtc
254:         else:
255:             comp = lambda dc, dtc: dc > dtc
256: 
257:         # Generate dates
258:         n = 0
259:         for d in gen:
260:             if comp(d, dt):
261:                 if count is not None:
262:                     n += 1
263:                     if n > count:
264:                         break
265: 
266:                 yield d
267: 
268:     def between(self, after, before, inc=False, count=1):
269:         ''' Returns all the occurrences of the rrule between after and before.
270:         The inc keyword defines what happens if after and/or before are
271:         themselves occurrences. With inc=True, they will be included in the
272:         list, if they are found in the recurrence set. '''
273:         if self._cache_complete:
274:             gen = self._cache
275:         else:
276:             gen = self
277:         started = False
278:         l = []
279:         if inc:
280:             for i in gen:
281:                 if i > before:
282:                     break
283:                 elif not started:
284:                     if i >= after:
285:                         started = True
286:                         l.append(i)
287:                 else:
288:                     l.append(i)
289:         else:
290:             for i in gen:
291:                 if i >= before:
292:                     break
293:                 elif not started:
294:                     if i > after:
295:                         started = True
296:                         l.append(i)
297:                 else:
298:                     l.append(i)
299:         return l
300: 
301: 
302: class rrule(rrulebase):
303:     '''
304:     That's the base of the rrule operation. It accepts all the keywords
305:     defined in the RFC as its constructor parameters (except byday,
306:     which was renamed to byweekday) and more. The constructor prototype is::
307: 
308:             rrule(freq)
309: 
310:     Where freq must be one of YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY,
311:     or SECONDLY.
312: 
313:     .. note::
314:         Per RFC section 3.3.10, recurrence instances falling on invalid dates
315:         and times are ignored rather than coerced:
316: 
317:             Recurrence rules may generate recurrence instances with an invalid
318:             date (e.g., February 30) or nonexistent local time (e.g., 1:30 AM
319:             on a day where the local time is moved forward by an hour at 1:00
320:             AM).  Such recurrence instances MUST be ignored and MUST NOT be
321:             counted as part of the recurrence set.
322: 
323:         This can lead to possibly surprising behavior when, for example, the
324:         start date occurs at the end of the month:
325: 
326:         >>> from dateutil.rrule import rrule, MONTHLY
327:         >>> from datetime import datetime
328:         >>> start_date = datetime(2014, 12, 31)
329:         >>> list(rrule(freq=MONTHLY, count=4, dtstart=start_date))
330:         ... # doctest: +NORMALIZE_WHITESPACE
331:         [datetime.datetime(2014, 12, 31, 0, 0),
332:          datetime.datetime(2015, 1, 31, 0, 0),
333:          datetime.datetime(2015, 3, 31, 0, 0),
334:          datetime.datetime(2015, 5, 31, 0, 0)]
335: 
336:     Additionally, it supports the following keyword arguments:
337: 
338:     :param cache:
339:         If given, it must be a boolean value specifying to enable or disable
340:         caching of results. If you will use the same rrule instance multiple
341:         times, enabling caching will improve the performance considerably.
342:     :param dtstart:
343:         The recurrence start. Besides being the base for the recurrence,
344:         missing parameters in the final recurrence instances will also be
345:         extracted from this date. If not given, datetime.now() will be used
346:         instead.
347:     :param interval:
348:         The interval between each freq iteration. For example, when using
349:         YEARLY, an interval of 2 means once every two years, but with HOURLY,
350:         it means once every two hours. The default interval is 1.
351:     :param wkst:
352:         The week start day. Must be one of the MO, TU, WE constants, or an
353:         integer, specifying the first day of the week. This will affect
354:         recurrences based on weekly periods. The default week start is got
355:         from calendar.firstweekday(), and may be modified by
356:         calendar.setfirstweekday().
357:     :param count:
358:         How many occurrences will be generated.
359: 
360:         .. note::
361:             As of version 2.5.0, the use of the ``until`` keyword together
362:             with the ``count`` keyword is deprecated per RFC-2445 Sec. 4.3.10.
363:     :param until:
364:         If given, this must be a datetime instance, that will specify the
365:         limit of the recurrence. The last recurrence in the rule is the greatest
366:         datetime that is less than or equal to the value specified in the
367:         ``until`` parameter.
368: 
369:         .. note::
370:             As of version 2.5.0, the use of the ``until`` keyword together
371:             with the ``count`` keyword is deprecated per RFC-2445 Sec. 4.3.10.
372:     :param bysetpos:
373:         If given, it must be either an integer, or a sequence of integers,
374:         positive or negative. Each given integer will specify an occurrence
375:         number, corresponding to the nth occurrence of the rule inside the
376:         frequency period. For example, a bysetpos of -1 if combined with a
377:         MONTHLY frequency, and a byweekday of (MO, TU, WE, TH, FR), will
378:         result in the last work day of every month.
379:     :param bymonth:
380:         If given, it must be either an integer, or a sequence of integers,
381:         meaning the months to apply the recurrence to.
382:     :param bymonthday:
383:         If given, it must be either an integer, or a sequence of integers,
384:         meaning the month days to apply the recurrence to.
385:     :param byyearday:
386:         If given, it must be either an integer, or a sequence of integers,
387:         meaning the year days to apply the recurrence to.
388:     :param byweekno:
389:         If given, it must be either an integer, or a sequence of integers,
390:         meaning the week numbers to apply the recurrence to. Week numbers
391:         have the meaning described in ISO8601, that is, the first week of
392:         the year is that containing at least four days of the new year.
393:     :param byweekday:
394:         If given, it must be either an integer (0 == MO), a sequence of
395:         integers, one of the weekday constants (MO, TU, etc), or a sequence
396:         of these constants. When given, these variables will define the
397:         weekdays where the recurrence will be applied. It's also possible to
398:         use an argument n for the weekday instances, which will mean the nth
399:         occurrence of this weekday in the period. For example, with MONTHLY,
400:         or with YEARLY and BYMONTH, using FR(+1) in byweekday will specify the
401:         first friday of the month where the recurrence happens. Notice that in
402:         the RFC documentation, this is specified as BYDAY, but was renamed to
403:         avoid the ambiguity of that keyword.
404:     :param byhour:
405:         If given, it must be either an integer, or a sequence of integers,
406:         meaning the hours to apply the recurrence to.
407:     :param byminute:
408:         If given, it must be either an integer, or a sequence of integers,
409:         meaning the minutes to apply the recurrence to.
410:     :param bysecond:
411:         If given, it must be either an integer, or a sequence of integers,
412:         meaning the seconds to apply the recurrence to.
413:     :param byeaster:
414:         If given, it must be either an integer, or a sequence of integers,
415:         positive or negative. Each integer will define an offset from the
416:         Easter Sunday. Passing the offset 0 to byeaster will yield the Easter
417:         Sunday itself. This is an extension to the RFC specification.
418:      '''
419:     def __init__(self, freq, dtstart=None,
420:                  interval=1, wkst=None, count=None, until=None, bysetpos=None,
421:                  bymonth=None, bymonthday=None, byyearday=None, byeaster=None,
422:                  byweekno=None, byweekday=None,
423:                  byhour=None, byminute=None, bysecond=None,
424:                  cache=False):
425:         super(rrule, self).__init__(cache)
426:         global easter
427:         if not dtstart:
428:             dtstart = datetime.datetime.now().replace(microsecond=0)
429:         elif not isinstance(dtstart, datetime.datetime):
430:             dtstart = datetime.datetime.fromordinal(dtstart.toordinal())
431:         else:
432:             dtstart = dtstart.replace(microsecond=0)
433:         self._dtstart = dtstart
434:         self._tzinfo = dtstart.tzinfo
435:         self._freq = freq
436:         self._interval = interval
437:         self._count = count
438: 
439:         # Cache the original byxxx rules, if they are provided, as the _byxxx
440:         # attributes do not necessarily map to the inputs, and this can be
441:         # a problem in generating the strings. Only store things if they've
442:         # been supplied (the string retrieval will just use .get())
443:         self._original_rule = {}
444: 
445:         if until and not isinstance(until, datetime.datetime):
446:             until = datetime.datetime.fromordinal(until.toordinal())
447:         self._until = until
448: 
449:         if count is not None and until:
450:             warn("Using both 'count' and 'until' is inconsistent with RFC 2445"
451:                  " and has been deprecated in dateutil. Future versions will "
452:                  "raise an error.", DeprecationWarning)
453: 
454:         if wkst is None:
455:             self._wkst = calendar.firstweekday()
456:         elif isinstance(wkst, integer_types):
457:             self._wkst = wkst
458:         else:
459:             self._wkst = wkst.weekday
460: 
461:         if bysetpos is None:
462:             self._bysetpos = None
463:         elif isinstance(bysetpos, integer_types):
464:             if bysetpos == 0 or not (-366 <= bysetpos <= 366):
465:                 raise ValueError("bysetpos must be between 1 and 366, "
466:                                  "or between -366 and -1")
467:             self._bysetpos = (bysetpos,)
468:         else:
469:             self._bysetpos = tuple(bysetpos)
470:             for pos in self._bysetpos:
471:                 if pos == 0 or not (-366 <= pos <= 366):
472:                     raise ValueError("bysetpos must be between 1 and 366, "
473:                                      "or between -366 and -1")
474: 
475:         if self._bysetpos:
476:             self._original_rule['bysetpos'] = self._bysetpos
477: 
478:         if (byweekno is None and byyearday is None and bymonthday is None and
479:                 byweekday is None and byeaster is None):
480:             if freq == YEARLY:
481:                 if bymonth is None:
482:                     bymonth = dtstart.month
483:                     self._original_rule['bymonth'] = None
484:                 bymonthday = dtstart.day
485:                 self._original_rule['bymonthday'] = None
486:             elif freq == MONTHLY:
487:                 bymonthday = dtstart.day
488:                 self._original_rule['bymonthday'] = None
489:             elif freq == WEEKLY:
490:                 byweekday = dtstart.weekday()
491:                 self._original_rule['byweekday'] = None
492: 
493:         # bymonth
494:         if bymonth is None:
495:             self._bymonth = None
496:         else:
497:             if isinstance(bymonth, integer_types):
498:                 bymonth = (bymonth,)
499: 
500:             self._bymonth = tuple(sorted(set(bymonth)))
501: 
502:             if 'bymonth' not in self._original_rule:
503:                 self._original_rule['bymonth'] = self._bymonth
504: 
505:         # byyearday
506:         if byyearday is None:
507:             self._byyearday = None
508:         else:
509:             if isinstance(byyearday, integer_types):
510:                 byyearday = (byyearday,)
511: 
512:             self._byyearday = tuple(sorted(set(byyearday)))
513:             self._original_rule['byyearday'] = self._byyearday
514: 
515:         # byeaster
516:         if byeaster is not None:
517:             if not easter:
518:                 from dateutil import easter
519:             if isinstance(byeaster, integer_types):
520:                 self._byeaster = (byeaster,)
521:             else:
522:                 self._byeaster = tuple(sorted(byeaster))
523: 
524:             self._original_rule['byeaster'] = self._byeaster
525:         else:
526:             self._byeaster = None
527: 
528:         # bymonthday
529:         if bymonthday is None:
530:             self._bymonthday = ()
531:             self._bynmonthday = ()
532:         else:
533:             if isinstance(bymonthday, integer_types):
534:                 bymonthday = (bymonthday,)
535: 
536:             bymonthday = set(bymonthday)            # Ensure it's unique
537: 
538:             self._bymonthday = tuple(sorted(x for x in bymonthday if x > 0))
539:             self._bynmonthday = tuple(sorted(x for x in bymonthday if x < 0))
540: 
541:             # Storing positive numbers first, then negative numbers
542:             if 'bymonthday' not in self._original_rule:
543:                 self._original_rule['bymonthday'] = tuple(
544:                     itertools.chain(self._bymonthday, self._bynmonthday))
545: 
546:         # byweekno
547:         if byweekno is None:
548:             self._byweekno = None
549:         else:
550:             if isinstance(byweekno, integer_types):
551:                 byweekno = (byweekno,)
552: 
553:             self._byweekno = tuple(sorted(set(byweekno)))
554: 
555:             self._original_rule['byweekno'] = self._byweekno
556: 
557:         # byweekday / bynweekday
558:         if byweekday is None:
559:             self._byweekday = None
560:             self._bynweekday = None
561:         else:
562:             # If it's one of the valid non-sequence types, convert to a
563:             # single-element sequence before the iterator that builds the
564:             # byweekday set.
565:             if isinstance(byweekday, integer_types) or hasattr(byweekday, "n"):
566:                 byweekday = (byweekday,)
567: 
568:             self._byweekday = set()
569:             self._bynweekday = set()
570:             for wday in byweekday:
571:                 if isinstance(wday, integer_types):
572:                     self._byweekday.add(wday)
573:                 elif not wday.n or freq > MONTHLY:
574:                     self._byweekday.add(wday.weekday)
575:                 else:
576:                     self._bynweekday.add((wday.weekday, wday.n))
577: 
578:             if not self._byweekday:
579:                 self._byweekday = None
580:             elif not self._bynweekday:
581:                 self._bynweekday = None
582: 
583:             if self._byweekday is not None:
584:                 self._byweekday = tuple(sorted(self._byweekday))
585:                 orig_byweekday = [weekday(x) for x in self._byweekday]
586:             else:
587:                 orig_byweekday = tuple()
588: 
589:             if self._bynweekday is not None:
590:                 self._bynweekday = tuple(sorted(self._bynweekday))
591:                 orig_bynweekday = [weekday(*x) for x in self._bynweekday]
592:             else:
593:                 orig_bynweekday = tuple()
594: 
595:             if 'byweekday' not in self._original_rule:
596:                 self._original_rule['byweekday'] = tuple(itertools.chain(
597:                     orig_byweekday, orig_bynweekday))
598: 
599:         # byhour
600:         if byhour is None:
601:             if freq < HOURLY:
602:                 self._byhour = set((dtstart.hour,))
603:             else:
604:                 self._byhour = None
605:         else:
606:             if isinstance(byhour, integer_types):
607:                 byhour = (byhour,)
608: 
609:             if freq == HOURLY:
610:                 self._byhour = self.__construct_byset(start=dtstart.hour,
611:                                                       byxxx=byhour,
612:                                                       base=24)
613:             else:
614:                 self._byhour = set(byhour)
615: 
616:             self._byhour = tuple(sorted(self._byhour))
617:             self._original_rule['byhour'] = self._byhour
618: 
619:         # byminute
620:         if byminute is None:
621:             if freq < MINUTELY:
622:                 self._byminute = set((dtstart.minute,))
623:             else:
624:                 self._byminute = None
625:         else:
626:             if isinstance(byminute, integer_types):
627:                 byminute = (byminute,)
628: 
629:             if freq == MINUTELY:
630:                 self._byminute = self.__construct_byset(start=dtstart.minute,
631:                                                         byxxx=byminute,
632:                                                         base=60)
633:             else:
634:                 self._byminute = set(byminute)
635: 
636:             self._byminute = tuple(sorted(self._byminute))
637:             self._original_rule['byminute'] = self._byminute
638: 
639:         # bysecond
640:         if bysecond is None:
641:             if freq < SECONDLY:
642:                 self._bysecond = ((dtstart.second,))
643:             else:
644:                 self._bysecond = None
645:         else:
646:             if isinstance(bysecond, integer_types):
647:                 bysecond = (bysecond,)
648: 
649:             self._bysecond = set(bysecond)
650: 
651:             if freq == SECONDLY:
652:                 self._bysecond = self.__construct_byset(start=dtstart.second,
653:                                                         byxxx=bysecond,
654:                                                         base=60)
655:             else:
656:                 self._bysecond = set(bysecond)
657: 
658:             self._bysecond = tuple(sorted(self._bysecond))
659:             self._original_rule['bysecond'] = self._bysecond
660: 
661:         if self._freq >= HOURLY:
662:             self._timeset = None
663:         else:
664:             self._timeset = []
665:             for hour in self._byhour:
666:                 for minute in self._byminute:
667:                     for second in self._bysecond:
668:                         self._timeset.append(
669:                             datetime.time(hour, minute, second,
670:                                           tzinfo=self._tzinfo))
671:             self._timeset.sort()
672:             self._timeset = tuple(self._timeset)
673: 
674:     def __str__(self):
675:         '''
676:         Output a string that would generate this RRULE if passed to rrulestr.
677:         This is mostly compatible with RFC2445, except for the
678:         dateutil-specific extension BYEASTER.
679:         '''
680: 
681:         output = []
682:         h, m, s = [None] * 3
683:         if self._dtstart:
684:             output.append(self._dtstart.strftime('DTSTART:%Y%m%dT%H%M%S'))
685:             h, m, s = self._dtstart.timetuple()[3:6]
686: 
687:         parts = ['FREQ=' + FREQNAMES[self._freq]]
688:         if self._interval != 1:
689:             parts.append('INTERVAL=' + str(self._interval))
690: 
691:         if self._wkst:
692:             parts.append('WKST=' + repr(weekday(self._wkst))[0:2])
693: 
694:         if self._count is not None:
695:             parts.append('COUNT=' + str(self._count))
696: 
697:         if self._until:
698:             parts.append(self._until.strftime('UNTIL=%Y%m%dT%H%M%S'))
699: 
700:         if self._original_rule.get('byweekday') is not None:
701:             # The str() method on weekday objects doesn't generate
702:             # RFC2445-compliant strings, so we should modify that.
703:             original_rule = dict(self._original_rule)
704:             wday_strings = []
705:             for wday in original_rule['byweekday']:
706:                 if wday.n:
707:                     wday_strings.append('{n:+d}{wday}'.format(
708:                         n=wday.n,
709:                         wday=repr(wday)[0:2]))
710:                 else:
711:                     wday_strings.append(repr(wday))
712: 
713:             original_rule['byweekday'] = wday_strings
714:         else:
715:             original_rule = self._original_rule
716: 
717:         partfmt = '{name}={vals}'
718:         for name, key in [('BYSETPOS', 'bysetpos'),
719:                           ('BYMONTH', 'bymonth'),
720:                           ('BYMONTHDAY', 'bymonthday'),
721:                           ('BYYEARDAY', 'byyearday'),
722:                           ('BYWEEKNO', 'byweekno'),
723:                           ('BYDAY', 'byweekday'),
724:                           ('BYHOUR', 'byhour'),
725:                           ('BYMINUTE', 'byminute'),
726:                           ('BYSECOND', 'bysecond'),
727:                           ('BYEASTER', 'byeaster')]:
728:             value = original_rule.get(key)
729:             if value:
730:                 parts.append(partfmt.format(name=name, vals=(','.join(str(v)
731:                                                              for v in value))))
732: 
733:         output.append(';'.join(parts))
734:         return '\n'.join(output)
735: 
736:     def replace(self, **kwargs):
737:         '''Return new rrule with same attributes except for those attributes given new
738:            values by whichever keyword arguments are specified.'''
739:         new_kwargs = {"interval": self._interval,
740:                       "count": self._count,
741:                       "dtstart": self._dtstart,
742:                       "freq": self._freq,
743:                       "until": self._until,
744:                       "wkst": self._wkst,
745:                       "cache": False if self._cache is None else True }
746:         new_kwargs.update(self._original_rule)
747:         new_kwargs.update(kwargs)
748:         return rrule(**new_kwargs)
749: 
750:     def _iter(self):
751:         year, month, day, hour, minute, second, weekday, yearday, _ = \
752:             self._dtstart.timetuple()
753: 
754:         # Some local variables to speed things up a bit
755:         freq = self._freq
756:         interval = self._interval
757:         wkst = self._wkst
758:         until = self._until
759:         bymonth = self._bymonth
760:         byweekno = self._byweekno
761:         byyearday = self._byyearday
762:         byweekday = self._byweekday
763:         byeaster = self._byeaster
764:         bymonthday = self._bymonthday
765:         bynmonthday = self._bynmonthday
766:         bysetpos = self._bysetpos
767:         byhour = self._byhour
768:         byminute = self._byminute
769:         bysecond = self._bysecond
770: 
771:         ii = _iterinfo(self)
772:         ii.rebuild(year, month)
773: 
774:         getdayset = {YEARLY: ii.ydayset,
775:                      MONTHLY: ii.mdayset,
776:                      WEEKLY: ii.wdayset,
777:                      DAILY: ii.ddayset,
778:                      HOURLY: ii.ddayset,
779:                      MINUTELY: ii.ddayset,
780:                      SECONDLY: ii.ddayset}[freq]
781: 
782:         if freq < HOURLY:
783:             timeset = self._timeset
784:         else:
785:             gettimeset = {HOURLY: ii.htimeset,
786:                           MINUTELY: ii.mtimeset,
787:                           SECONDLY: ii.stimeset}[freq]
788:             if ((freq >= HOURLY and
789:                  self._byhour and hour not in self._byhour) or
790:                 (freq >= MINUTELY and
791:                  self._byminute and minute not in self._byminute) or
792:                 (freq >= SECONDLY and
793:                  self._bysecond and second not in self._bysecond)):
794:                 timeset = ()
795:             else:
796:                 timeset = gettimeset(hour, minute, second)
797: 
798:         total = 0
799:         count = self._count
800:         while True:
801:             # Get dayset with the right frequency
802:             dayset, start, end = getdayset(year, month, day)
803: 
804:             # Do the "hard" work ;-)
805:             filtered = False
806:             for i in dayset[start:end]:
807:                 if ((bymonth and ii.mmask[i] not in bymonth) or
808:                     (byweekno and not ii.wnomask[i]) or
809:                     (byweekday and ii.wdaymask[i] not in byweekday) or
810:                     (ii.nwdaymask and not ii.nwdaymask[i]) or
811:                     (byeaster and not ii.eastermask[i]) or
812:                     ((bymonthday or bynmonthday) and
813:                      ii.mdaymask[i] not in bymonthday and
814:                      ii.nmdaymask[i] not in bynmonthday) or
815:                     (byyearday and
816:                      ((i < ii.yearlen and i+1 not in byyearday and
817:                        -ii.yearlen+i not in byyearday) or
818:                       (i >= ii.yearlen and i+1-ii.yearlen not in byyearday and
819:                        -ii.nextyearlen+i-ii.yearlen not in byyearday)))):
820:                     dayset[i] = None
821:                     filtered = True
822: 
823:             # Output results
824:             if bysetpos and timeset:
825:                 poslist = []
826:                 for pos in bysetpos:
827:                     if pos < 0:
828:                         daypos, timepos = divmod(pos, len(timeset))
829:                     else:
830:                         daypos, timepos = divmod(pos-1, len(timeset))
831:                     try:
832:                         i = [x for x in dayset[start:end]
833:                              if x is not None][daypos]
834:                         time = timeset[timepos]
835:                     except IndexError:
836:                         pass
837:                     else:
838:                         date = datetime.date.fromordinal(ii.yearordinal+i)
839:                         res = datetime.datetime.combine(date, time)
840:                         if res not in poslist:
841:                             poslist.append(res)
842:                 poslist.sort()
843:                 for res in poslist:
844:                     if until and res > until:
845:                         self._len = total
846:                         return
847:                     elif res >= self._dtstart:
848:                         if count is not None:
849:                             count -= 1
850:                             if count < 0:
851:                                 self._len = total
852:                                 return
853:                         total += 1
854:                         yield res
855:             else:
856:                 for i in dayset[start:end]:
857:                     if i is not None:
858:                         date = datetime.date.fromordinal(ii.yearordinal + i)
859:                         for time in timeset:
860:                             res = datetime.datetime.combine(date, time)
861:                             if until and res > until:
862:                                 self._len = total
863:                                 return
864:                             elif res >= self._dtstart:
865:                                 if count is not None:
866:                                     count -= 1
867:                                     if count < 0:
868:                                         self._len = total
869:                                         return
870: 
871:                                 total += 1
872:                                 yield res
873: 
874:             # Handle frequency and interval
875:             fixday = False
876:             if freq == YEARLY:
877:                 year += interval
878:                 if year > datetime.MAXYEAR:
879:                     self._len = total
880:                     return
881:                 ii.rebuild(year, month)
882:             elif freq == MONTHLY:
883:                 month += interval
884:                 if month > 12:
885:                     div, mod = divmod(month, 12)
886:                     month = mod
887:                     year += div
888:                     if month == 0:
889:                         month = 12
890:                         year -= 1
891:                     if year > datetime.MAXYEAR:
892:                         self._len = total
893:                         return
894:                 ii.rebuild(year, month)
895:             elif freq == WEEKLY:
896:                 if wkst > weekday:
897:                     day += -(weekday+1+(6-wkst))+self._interval*7
898:                 else:
899:                     day += -(weekday-wkst)+self._interval*7
900:                 weekday = wkst
901:                 fixday = True
902:             elif freq == DAILY:
903:                 day += interval
904:                 fixday = True
905:             elif freq == HOURLY:
906:                 if filtered:
907:                     # Jump to one iteration before next day
908:                     hour += ((23-hour)//interval)*interval
909: 
910:                 if byhour:
911:                     ndays, hour = self.__mod_distance(value=hour,
912:                                                       byxxx=self._byhour,
913:                                                       base=24)
914:                 else:
915:                     ndays, hour = divmod(hour+interval, 24)
916: 
917:                 if ndays:
918:                     day += ndays
919:                     fixday = True
920: 
921:                 timeset = gettimeset(hour, minute, second)
922:             elif freq == MINUTELY:
923:                 if filtered:
924:                     # Jump to one iteration before next day
925:                     minute += ((1439-(hour*60+minute))//interval)*interval
926: 
927:                 valid = False
928:                 rep_rate = (24*60)
929:                 for j in range(rep_rate // gcd(interval, rep_rate)):
930:                     if byminute:
931:                         nhours, minute = \
932:                             self.__mod_distance(value=minute,
933:                                                 byxxx=self._byminute,
934:                                                 base=60)
935:                     else:
936:                         nhours, minute = divmod(minute+interval, 60)
937: 
938:                     div, hour = divmod(hour+nhours, 24)
939:                     if div:
940:                         day += div
941:                         fixday = True
942:                         filtered = False
943: 
944:                     if not byhour or hour in byhour:
945:                         valid = True
946:                         break
947: 
948:                 if not valid:
949:                     raise ValueError('Invalid combination of interval and ' +
950:                                      'byhour resulting in empty rule.')
951: 
952:                 timeset = gettimeset(hour, minute, second)
953:             elif freq == SECONDLY:
954:                 if filtered:
955:                     # Jump to one iteration before next day
956:                     second += (((86399 - (hour * 3600 + minute * 60 + second))
957:                                 // interval) * interval)
958: 
959:                 rep_rate = (24 * 3600)
960:                 valid = False
961:                 for j in range(0, rep_rate // gcd(interval, rep_rate)):
962:                     if bysecond:
963:                         nminutes, second = \
964:                             self.__mod_distance(value=second,
965:                                                 byxxx=self._bysecond,
966:                                                 base=60)
967:                     else:
968:                         nminutes, second = divmod(second+interval, 60)
969: 
970:                     div, minute = divmod(minute+nminutes, 60)
971:                     if div:
972:                         hour += div
973:                         div, hour = divmod(hour, 24)
974:                         if div:
975:                             day += div
976:                             fixday = True
977: 
978:                     if ((not byhour or hour in byhour) and
979:                             (not byminute or minute in byminute) and
980:                             (not bysecond or second in bysecond)):
981:                         valid = True
982:                         break
983: 
984:                 if not valid:
985:                     raise ValueError('Invalid combination of interval, ' +
986:                                      'byhour and byminute resulting in empty' +
987:                                      ' rule.')
988: 
989:                 timeset = gettimeset(hour, minute, second)
990: 
991:             if fixday and day > 28:
992:                 daysinmonth = calendar.monthrange(year, month)[1]
993:                 if day > daysinmonth:
994:                     while day > daysinmonth:
995:                         day -= daysinmonth
996:                         month += 1
997:                         if month == 13:
998:                             month = 1
999:                             year += 1
1000:                             if year > datetime.MAXYEAR:
1001:                                 self._len = total
1002:                                 return
1003:                         daysinmonth = calendar.monthrange(year, month)[1]
1004:                     ii.rebuild(year, month)
1005: 
1006:     def __construct_byset(self, start, byxxx, base):
1007:         '''
1008:         If a `BYXXX` sequence is passed to the constructor at the same level as
1009:         `FREQ` (e.g. `FREQ=HOURLY,BYHOUR={2,4,7},INTERVAL=3`), there are some
1010:         specifications which cannot be reached given some starting conditions.
1011: 
1012:         This occurs whenever the interval is not coprime with the base of a
1013:         given unit and the difference between the starting position and the
1014:         ending position is not coprime with the greatest common denominator
1015:         between the interval and the base. For example, with a FREQ of hourly
1016:         starting at 17:00 and an interval of 4, the only valid values for
1017:         BYHOUR would be {21, 1, 5, 9, 13, 17}, because 4 and 24 are not
1018:         coprime.
1019: 
1020:         :param start:
1021:             Specifies the starting position.
1022:         :param byxxx:
1023:             An iterable containing the list of allowed values.
1024:         :param base:
1025:             The largest allowable value for the specified frequency (e.g.
1026:             24 hours, 60 minutes).
1027: 
1028:         This does not preserve the type of the iterable, returning a set, since
1029:         the values should be unique and the order is irrelevant, this will
1030:         speed up later lookups.
1031: 
1032:         In the event of an empty set, raises a :exception:`ValueError`, as this
1033:         results in an empty rrule.
1034:         '''
1035: 
1036:         cset = set()
1037: 
1038:         # Support a single byxxx value.
1039:         if isinstance(byxxx, integer_types):
1040:             byxxx = (byxxx, )
1041: 
1042:         for num in byxxx:
1043:             i_gcd = gcd(self._interval, base)
1044:             # Use divmod rather than % because we need to wrap negative nums.
1045:             if i_gcd == 1 or divmod(num - start, i_gcd)[1] == 0:
1046:                 cset.add(num)
1047: 
1048:         if len(cset) == 0:
1049:             raise ValueError("Invalid rrule byxxx generates an empty set.")
1050: 
1051:         return cset
1052: 
1053:     def __mod_distance(self, value, byxxx, base):
1054:         '''
1055:         Calculates the next value in a sequence where the `FREQ` parameter is
1056:         specified along with a `BYXXX` parameter at the same "level"
1057:         (e.g. `HOURLY` specified with `BYHOUR`).
1058: 
1059:         :param value:
1060:             The old value of the component.
1061:         :param byxxx:
1062:             The `BYXXX` set, which should have been generated by
1063:             `rrule._construct_byset`, or something else which checks that a
1064:             valid rule is present.
1065:         :param base:
1066:             The largest allowable value for the specified frequency (e.g.
1067:             24 hours, 60 minutes).
1068: 
1069:         If a valid value is not found after `base` iterations (the maximum
1070:         number before the sequence would start to repeat), this raises a
1071:         :exception:`ValueError`, as no valid values were found.
1072: 
1073:         This returns a tuple of `divmod(n*interval, base)`, where `n` is the
1074:         smallest number of `interval` repetitions until the next specified
1075:         value in `byxxx` is found.
1076:         '''
1077:         accumulator = 0
1078:         for ii in range(1, base + 1):
1079:             # Using divmod() over % to account for negative intervals
1080:             div, value = divmod(value + self._interval, base)
1081:             accumulator += div
1082:             if value in byxxx:
1083:                 return (accumulator, value)
1084: 
1085: 
1086: class _iterinfo(object):
1087:     __slots__ = ["rrule", "lastyear", "lastmonth",
1088:                  "yearlen", "nextyearlen", "yearordinal", "yearweekday",
1089:                  "mmask", "mrange", "mdaymask", "nmdaymask",
1090:                  "wdaymask", "wnomask", "nwdaymask", "eastermask"]
1091: 
1092:     def __init__(self, rrule):
1093:         for attr in self.__slots__:
1094:             setattr(self, attr, None)
1095:         self.rrule = rrule
1096: 
1097:     def rebuild(self, year, month):
1098:         # Every mask is 7 days longer to handle cross-year weekly periods.
1099:         rr = self.rrule
1100:         if year != self.lastyear:
1101:             self.yearlen = 365 + calendar.isleap(year)
1102:             self.nextyearlen = 365 + calendar.isleap(year + 1)
1103:             firstyday = datetime.date(year, 1, 1)
1104:             self.yearordinal = firstyday.toordinal()
1105:             self.yearweekday = firstyday.weekday()
1106: 
1107:             wday = datetime.date(year, 1, 1).weekday()
1108:             if self.yearlen == 365:
1109:                 self.mmask = M365MASK
1110:                 self.mdaymask = MDAY365MASK
1111:                 self.nmdaymask = NMDAY365MASK
1112:                 self.wdaymask = WDAYMASK[wday:]
1113:                 self.mrange = M365RANGE
1114:             else:
1115:                 self.mmask = M366MASK
1116:                 self.mdaymask = MDAY366MASK
1117:                 self.nmdaymask = NMDAY366MASK
1118:                 self.wdaymask = WDAYMASK[wday:]
1119:                 self.mrange = M366RANGE
1120: 
1121:             if not rr._byweekno:
1122:                 self.wnomask = None
1123:             else:
1124:                 self.wnomask = [0]*(self.yearlen+7)
1125:                 # no1wkst = firstwkst = self.wdaymask.index(rr._wkst)
1126:                 no1wkst = firstwkst = (7-self.yearweekday+rr._wkst) % 7
1127:                 if no1wkst >= 4:
1128:                     no1wkst = 0
1129:                     # Number of days in the year, plus the days we got
1130:                     # from last year.
1131:                     wyearlen = self.yearlen+(self.yearweekday-rr._wkst) % 7
1132:                 else:
1133:                     # Number of days in the year, minus the days we
1134:                     # left in last year.
1135:                     wyearlen = self.yearlen-no1wkst
1136:                 div, mod = divmod(wyearlen, 7)
1137:                 numweeks = div+mod//4
1138:                 for n in rr._byweekno:
1139:                     if n < 0:
1140:                         n += numweeks+1
1141:                     if not (0 < n <= numweeks):
1142:                         continue
1143:                     if n > 1:
1144:                         i = no1wkst+(n-1)*7
1145:                         if no1wkst != firstwkst:
1146:                             i -= 7-firstwkst
1147:                     else:
1148:                         i = no1wkst
1149:                     for j in range(7):
1150:                         self.wnomask[i] = 1
1151:                         i += 1
1152:                         if self.wdaymask[i] == rr._wkst:
1153:                             break
1154:                 if 1 in rr._byweekno:
1155:                     # Check week number 1 of next year as well
1156:                     # TODO: Check -numweeks for next year.
1157:                     i = no1wkst+numweeks*7
1158:                     if no1wkst != firstwkst:
1159:                         i -= 7-firstwkst
1160:                     if i < self.yearlen:
1161:                         # If week starts in next year, we
1162:                         # don't care about it.
1163:                         for j in range(7):
1164:                             self.wnomask[i] = 1
1165:                             i += 1
1166:                             if self.wdaymask[i] == rr._wkst:
1167:                                 break
1168:                 if no1wkst:
1169:                     # Check last week number of last year as
1170:                     # well. If no1wkst is 0, either the year
1171:                     # started on week start, or week number 1
1172:                     # got days from last year, so there are no
1173:                     # days from last year's last week number in
1174:                     # this year.
1175:                     if -1 not in rr._byweekno:
1176:                         lyearweekday = datetime.date(year-1, 1, 1).weekday()
1177:                         lno1wkst = (7-lyearweekday+rr._wkst) % 7
1178:                         lyearlen = 365+calendar.isleap(year-1)
1179:                         if lno1wkst >= 4:
1180:                             lno1wkst = 0
1181:                             lnumweeks = 52+(lyearlen +
1182:                                             (lyearweekday-rr._wkst) % 7) % 7//4
1183:                         else:
1184:                             lnumweeks = 52+(self.yearlen-no1wkst) % 7//4
1185:                     else:
1186:                         lnumweeks = -1
1187:                     if lnumweeks in rr._byweekno:
1188:                         for i in range(no1wkst):
1189:                             self.wnomask[i] = 1
1190: 
1191:         if (rr._bynweekday and (month != self.lastmonth or
1192:                                 year != self.lastyear)):
1193:             ranges = []
1194:             if rr._freq == YEARLY:
1195:                 if rr._bymonth:
1196:                     for month in rr._bymonth:
1197:                         ranges.append(self.mrange[month-1:month+1])
1198:                 else:
1199:                     ranges = [(0, self.yearlen)]
1200:             elif rr._freq == MONTHLY:
1201:                 ranges = [self.mrange[month-1:month+1]]
1202:             if ranges:
1203:                 # Weekly frequency won't get here, so we may not
1204:                 # care about cross-year weekly periods.
1205:                 self.nwdaymask = [0]*self.yearlen
1206:                 for first, last in ranges:
1207:                     last -= 1
1208:                     for wday, n in rr._bynweekday:
1209:                         if n < 0:
1210:                             i = last+(n+1)*7
1211:                             i -= (self.wdaymask[i]-wday) % 7
1212:                         else:
1213:                             i = first+(n-1)*7
1214:                             i += (7-self.wdaymask[i]+wday) % 7
1215:                         if first <= i <= last:
1216:                             self.nwdaymask[i] = 1
1217: 
1218:         if rr._byeaster:
1219:             self.eastermask = [0]*(self.yearlen+7)
1220:             eyday = easter.easter(year).toordinal()-self.yearordinal
1221:             for offset in rr._byeaster:
1222:                 self.eastermask[eyday+offset] = 1
1223: 
1224:         self.lastyear = year
1225:         self.lastmonth = month
1226: 
1227:     def ydayset(self, year, month, day):
1228:         return list(range(self.yearlen)), 0, self.yearlen
1229: 
1230:     def mdayset(self, year, month, day):
1231:         dset = [None]*self.yearlen
1232:         start, end = self.mrange[month-1:month+1]
1233:         for i in range(start, end):
1234:             dset[i] = i
1235:         return dset, start, end
1236: 
1237:     def wdayset(self, year, month, day):
1238:         # We need to handle cross-year weeks here.
1239:         dset = [None]*(self.yearlen+7)
1240:         i = datetime.date(year, month, day).toordinal()-self.yearordinal
1241:         start = i
1242:         for j in range(7):
1243:             dset[i] = i
1244:             i += 1
1245:             # if (not (0 <= i < self.yearlen) or
1246:             #    self.wdaymask[i] == self.rrule._wkst):
1247:             # This will cross the year boundary, if necessary.
1248:             if self.wdaymask[i] == self.rrule._wkst:
1249:                 break
1250:         return dset, start, i
1251: 
1252:     def ddayset(self, year, month, day):
1253:         dset = [None] * self.yearlen
1254:         i = datetime.date(year, month, day).toordinal() - self.yearordinal
1255:         dset[i] = i
1256:         return dset, i, i + 1
1257: 
1258:     def htimeset(self, hour, minute, second):
1259:         tset = []
1260:         rr = self.rrule
1261:         for minute in rr._byminute:
1262:             for second in rr._bysecond:
1263:                 tset.append(datetime.time(hour, minute, second,
1264:                                           tzinfo=rr._tzinfo))
1265:         tset.sort()
1266:         return tset
1267: 
1268:     def mtimeset(self, hour, minute, second):
1269:         tset = []
1270:         rr = self.rrule
1271:         for second in rr._bysecond:
1272:             tset.append(datetime.time(hour, minute, second, tzinfo=rr._tzinfo))
1273:         tset.sort()
1274:         return tset
1275: 
1276:     def stimeset(self, hour, minute, second):
1277:         return (datetime.time(hour, minute, second,
1278:                 tzinfo=self.rrule._tzinfo),)
1279: 
1280: 
1281: class rruleset(rrulebase):
1282:     ''' The rruleset type allows more complex recurrence setups, mixing
1283:     multiple rules, dates, exclusion rules, and exclusion dates. The type
1284:     constructor takes the following keyword arguments:
1285: 
1286:     :param cache: If True, caching of results will be enabled, improving
1287:                   performance of multiple queries considerably. '''
1288: 
1289:     class _genitem(object):
1290:         def __init__(self, genlist, gen):
1291:             try:
1292:                 self.dt = advance_iterator(gen)
1293:                 genlist.append(self)
1294:             except StopIteration:
1295:                 pass
1296:             self.genlist = genlist
1297:             self.gen = gen
1298: 
1299:         def __next__(self):
1300:             try:
1301:                 self.dt = advance_iterator(self.gen)
1302:             except StopIteration:
1303:                 if self.genlist[0] is self:
1304:                     heapq.heappop(self.genlist)
1305:                 else:
1306:                     self.genlist.remove(self)
1307:                     heapq.heapify(self.genlist)
1308: 
1309:         next = __next__
1310: 
1311:         def __lt__(self, other):
1312:             return self.dt < other.dt
1313: 
1314:         def __gt__(self, other):
1315:             return self.dt > other.dt
1316: 
1317:         def __eq__(self, other):
1318:             return self.dt == other.dt
1319: 
1320:         def __ne__(self, other):
1321:             return self.dt != other.dt
1322: 
1323:     def __init__(self, cache=False):
1324:         super(rruleset, self).__init__(cache)
1325:         self._rrule = []
1326:         self._rdate = []
1327:         self._exrule = []
1328:         self._exdate = []
1329: 
1330:     @_invalidates_cache
1331:     def rrule(self, rrule):
1332:         ''' Include the given :py:class:`rrule` instance in the recurrence set
1333:             generation. '''
1334:         self._rrule.append(rrule)
1335: 
1336:     @_invalidates_cache
1337:     def rdate(self, rdate):
1338:         ''' Include the given :py:class:`datetime` instance in the recurrence
1339:             set generation. '''
1340:         self._rdate.append(rdate)
1341: 
1342:     @_invalidates_cache
1343:     def exrule(self, exrule):
1344:         ''' Include the given rrule instance in the recurrence set exclusion
1345:             list. Dates which are part of the given recurrence rules will not
1346:             be generated, even if some inclusive rrule or rdate matches them.
1347:         '''
1348:         self._exrule.append(exrule)
1349: 
1350:     @_invalidates_cache
1351:     def exdate(self, exdate):
1352:         ''' Include the given datetime instance in the recurrence set
1353:             exclusion list. Dates included that way will not be generated,
1354:             even if some inclusive rrule or rdate matches them. '''
1355:         self._exdate.append(exdate)
1356: 
1357:     def _iter(self):
1358:         rlist = []
1359:         self._rdate.sort()
1360:         self._genitem(rlist, iter(self._rdate))
1361:         for gen in [iter(x) for x in self._rrule]:
1362:             self._genitem(rlist, gen)
1363:         exlist = []
1364:         self._exdate.sort()
1365:         self._genitem(exlist, iter(self._exdate))
1366:         for gen in [iter(x) for x in self._exrule]:
1367:             self._genitem(exlist, gen)
1368:         lastdt = None
1369:         total = 0
1370:         heapq.heapify(rlist)
1371:         heapq.heapify(exlist)
1372:         while rlist:
1373:             ritem = rlist[0]
1374:             if not lastdt or lastdt != ritem.dt:
1375:                 while exlist and exlist[0] < ritem:
1376:                     exitem = exlist[0]
1377:                     advance_iterator(exitem)
1378:                     if exlist and exlist[0] is exitem:
1379:                         heapq.heapreplace(exlist, exitem)
1380:                 if not exlist or ritem != exlist[0]:
1381:                     total += 1
1382:                     yield ritem.dt
1383:                 lastdt = ritem.dt
1384:             advance_iterator(ritem)
1385:             if rlist and rlist[0] is ritem:
1386:                 heapq.heapreplace(rlist, ritem)
1387:         self._len = total
1388: 
1389: 
1390: class _rrulestr(object):
1391: 
1392:     _freq_map = {"YEARLY": YEARLY,
1393:                  "MONTHLY": MONTHLY,
1394:                  "WEEKLY": WEEKLY,
1395:                  "DAILY": DAILY,
1396:                  "HOURLY": HOURLY,
1397:                  "MINUTELY": MINUTELY,
1398:                  "SECONDLY": SECONDLY}
1399: 
1400:     _weekday_map = {"MO": 0, "TU": 1, "WE": 2, "TH": 3,
1401:                     "FR": 4, "SA": 5, "SU": 6}
1402: 
1403:     def _handle_int(self, rrkwargs, name, value, **kwargs):
1404:         rrkwargs[name.lower()] = int(value)
1405: 
1406:     def _handle_int_list(self, rrkwargs, name, value, **kwargs):
1407:         rrkwargs[name.lower()] = [int(x) for x in value.split(',')]
1408: 
1409:     _handle_INTERVAL = _handle_int
1410:     _handle_COUNT = _handle_int
1411:     _handle_BYSETPOS = _handle_int_list
1412:     _handle_BYMONTH = _handle_int_list
1413:     _handle_BYMONTHDAY = _handle_int_list
1414:     _handle_BYYEARDAY = _handle_int_list
1415:     _handle_BYEASTER = _handle_int_list
1416:     _handle_BYWEEKNO = _handle_int_list
1417:     _handle_BYHOUR = _handle_int_list
1418:     _handle_BYMINUTE = _handle_int_list
1419:     _handle_BYSECOND = _handle_int_list
1420: 
1421:     def _handle_FREQ(self, rrkwargs, name, value, **kwargs):
1422:         rrkwargs["freq"] = self._freq_map[value]
1423: 
1424:     def _handle_UNTIL(self, rrkwargs, name, value, **kwargs):
1425:         global parser
1426:         if not parser:
1427:             from dateutil import parser
1428:         try:
1429:             rrkwargs["until"] = parser.parse(value,
1430:                                              ignoretz=kwargs.get("ignoretz"),
1431:                                              tzinfos=kwargs.get("tzinfos"))
1432:         except ValueError:
1433:             raise ValueError("invalid until date")
1434: 
1435:     def _handle_WKST(self, rrkwargs, name, value, **kwargs):
1436:         rrkwargs["wkst"] = self._weekday_map[value]
1437: 
1438:     def _handle_BYWEEKDAY(self, rrkwargs, name, value, **kwargs):
1439:         '''
1440:         Two ways to specify this: +1MO or MO(+1)
1441:         '''
1442:         l = []
1443:         for wday in value.split(','):
1444:             if '(' in wday:
1445:                 # If it's of the form TH(+1), etc.
1446:                 splt = wday.split('(')
1447:                 w = splt[0]
1448:                 n = int(splt[1][:-1])
1449:             elif len(wday):
1450:                 # If it's of the form +1MO
1451:                 for i in range(len(wday)):
1452:                     if wday[i] not in '+-0123456789':
1453:                         break
1454:                 n = wday[:i] or None
1455:                 w = wday[i:]
1456:                 if n:
1457:                     n = int(n)
1458:             else:
1459:                 raise ValueError("Invalid (empty) BYDAY specification.")
1460: 
1461:             l.append(weekdays[self._weekday_map[w]](n))
1462:         rrkwargs["byweekday"] = l
1463: 
1464:     _handle_BYDAY = _handle_BYWEEKDAY
1465: 
1466:     def _parse_rfc_rrule(self, line,
1467:                          dtstart=None,
1468:                          cache=False,
1469:                          ignoretz=False,
1470:                          tzinfos=None):
1471:         if line.find(':') != -1:
1472:             name, value = line.split(':')
1473:             if name != "RRULE":
1474:                 raise ValueError("unknown parameter name")
1475:         else:
1476:             value = line
1477:         rrkwargs = {}
1478:         for pair in value.split(';'):
1479:             name, value = pair.split('=')
1480:             name = name.upper()
1481:             value = value.upper()
1482:             try:
1483:                 getattr(self, "_handle_"+name)(rrkwargs, name, value,
1484:                                                ignoretz=ignoretz,
1485:                                                tzinfos=tzinfos)
1486:             except AttributeError:
1487:                 raise ValueError("unknown parameter '%s'" % name)
1488:             except (KeyError, ValueError):
1489:                 raise ValueError("invalid '%s': %s" % (name, value))
1490:         return rrule(dtstart=dtstart, cache=cache, **rrkwargs)
1491: 
1492:     def _parse_rfc(self, s,
1493:                    dtstart=None,
1494:                    cache=False,
1495:                    unfold=False,
1496:                    forceset=False,
1497:                    compatible=False,
1498:                    ignoretz=False,
1499:                    tzinfos=None):
1500:         global parser
1501:         if compatible:
1502:             forceset = True
1503:             unfold = True
1504:         s = s.upper()
1505:         if not s.strip():
1506:             raise ValueError("empty string")
1507:         if unfold:
1508:             lines = s.splitlines()
1509:             i = 0
1510:             while i < len(lines):
1511:                 line = lines[i].rstrip()
1512:                 if not line:
1513:                     del lines[i]
1514:                 elif i > 0 and line[0] == " ":
1515:                     lines[i-1] += line[1:]
1516:                     del lines[i]
1517:                 else:
1518:                     i += 1
1519:         else:
1520:             lines = s.split()
1521:         if (not forceset and len(lines) == 1 and (s.find(':') == -1 or
1522:                                                   s.startswith('RRULE:'))):
1523:             return self._parse_rfc_rrule(lines[0], cache=cache,
1524:                                          dtstart=dtstart, ignoretz=ignoretz,
1525:                                          tzinfos=tzinfos)
1526:         else:
1527:             rrulevals = []
1528:             rdatevals = []
1529:             exrulevals = []
1530:             exdatevals = []
1531:             for line in lines:
1532:                 if not line:
1533:                     continue
1534:                 if line.find(':') == -1:
1535:                     name = "RRULE"
1536:                     value = line
1537:                 else:
1538:                     name, value = line.split(':', 1)
1539:                 parms = name.split(';')
1540:                 if not parms:
1541:                     raise ValueError("empty property name")
1542:                 name = parms[0]
1543:                 parms = parms[1:]
1544:                 if name == "RRULE":
1545:                     for parm in parms:
1546:                         raise ValueError("unsupported RRULE parm: "+parm)
1547:                     rrulevals.append(value)
1548:                 elif name == "RDATE":
1549:                     for parm in parms:
1550:                         if parm != "VALUE=DATE-TIME":
1551:                             raise ValueError("unsupported RDATE parm: "+parm)
1552:                     rdatevals.append(value)
1553:                 elif name == "EXRULE":
1554:                     for parm in parms:
1555:                         raise ValueError("unsupported EXRULE parm: "+parm)
1556:                     exrulevals.append(value)
1557:                 elif name == "EXDATE":
1558:                     for parm in parms:
1559:                         if parm != "VALUE=DATE-TIME":
1560:                             raise ValueError("unsupported EXDATE parm: "+parm)
1561:                     exdatevals.append(value)
1562:                 elif name == "DTSTART":
1563:                     for parm in parms:
1564:                         raise ValueError("unsupported DTSTART parm: "+parm)
1565:                     if not parser:
1566:                         from dateutil import parser
1567:                     dtstart = parser.parse(value, ignoretz=ignoretz,
1568:                                            tzinfos=tzinfos)
1569:                 else:
1570:                     raise ValueError("unsupported property: "+name)
1571:             if (forceset or len(rrulevals) > 1 or rdatevals
1572:                     or exrulevals or exdatevals):
1573:                 if not parser and (rdatevals or exdatevals):
1574:                     from dateutil import parser
1575:                 rset = rruleset(cache=cache)
1576:                 for value in rrulevals:
1577:                     rset.rrule(self._parse_rfc_rrule(value, dtstart=dtstart,
1578:                                                      ignoretz=ignoretz,
1579:                                                      tzinfos=tzinfos))
1580:                 for value in rdatevals:
1581:                     for datestr in value.split(','):
1582:                         rset.rdate(parser.parse(datestr,
1583:                                                 ignoretz=ignoretz,
1584:                                                 tzinfos=tzinfos))
1585:                 for value in exrulevals:
1586:                     rset.exrule(self._parse_rfc_rrule(value, dtstart=dtstart,
1587:                                                       ignoretz=ignoretz,
1588:                                                       tzinfos=tzinfos))
1589:                 for value in exdatevals:
1590:                     for datestr in value.split(','):
1591:                         rset.exdate(parser.parse(datestr,
1592:                                                  ignoretz=ignoretz,
1593:                                                  tzinfos=tzinfos))
1594:                 if compatible and dtstart:
1595:                     rset.rdate(dtstart)
1596:                 return rset
1597:             else:
1598:                 return self._parse_rfc_rrule(rrulevals[0],
1599:                                              dtstart=dtstart,
1600:                                              cache=cache,
1601:                                              ignoretz=ignoretz,
1602:                                              tzinfos=tzinfos)
1603: 
1604:     def __call__(self, s, **kwargs):
1605:         return self._parse_rfc(s, **kwargs)
1606: 
1607: 
1608: rrulestr = _rrulestr()
1609: 
1610: # vim:ts=4:sw=4:et
1611: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_315138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7, (-1)), 'str', '\nThe rrule module offers a small, complete, and very fast, implementation of\nthe recurrence rules documented in the\n`iCalendar RFC <http://www.ietf.org/rfc/rfc2445.txt>`_,\nincluding support for caching of results.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import itertools' statement (line 8)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import datetime' statement (line 9)
import datetime

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'datetime', datetime, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import calendar' statement (line 10)
import calendar

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'calendar', calendar, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import sys' statement (line 11)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'sys', sys, module_type_store)



# SSA begins for try-except statement (line 13)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 4))

# 'from math import gcd' statement (line 14)
try:
    from math import gcd

except:
    gcd = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 14, 4), 'math', None, module_type_store, ['gcd'], [gcd])

# SSA branch for the except part of a try statement (line 13)
# SSA branch for the except 'ImportError' branch of a try statement (line 13)
module_type_store.open_ssa_branch('except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 4))

# 'from fractions import gcd' statement (line 16)
try:
    from fractions import gcd

except:
    gcd = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 16, 4), 'fractions', None, module_type_store, ['gcd'], [gcd])

# SSA join for try-except statement (line 13)
module_type_store = module_type_store.join_ssa_context()

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from six import advance_iterator, integer_types' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
import_315139 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'six')

if (type(import_315139) is not StypyTypeError):

    if (import_315139 != 'pyd_module'):
        __import__(import_315139)
        sys_modules_315140 = sys.modules[import_315139]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'six', sys_modules_315140.module_type_store, module_type_store, ['advance_iterator', 'integer_types'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_315140, sys_modules_315140.module_type_store, module_type_store)
    else:
        from six import advance_iterator, integer_types

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'six', None, module_type_store, ['advance_iterator', 'integer_types'], [advance_iterator, integer_types])

else:
    # Assigning a type to the variable 'six' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'six', import_315139)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from six.moves import _thread, range' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
import_315141 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'six.moves')

if (type(import_315141) is not StypyTypeError):

    if (import_315141 != 'pyd_module'):
        __import__(import_315141)
        sys_modules_315142 = sys.modules[import_315141]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'six.moves', sys_modules_315142.module_type_store, module_type_store, ['_thread', 'range'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_315142, sys_modules_315142.module_type_store, module_type_store)
    else:
        from six.moves import _thread, range

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'six.moves', None, module_type_store, ['_thread', 'range'], [_thread, range])

else:
    # Assigning a type to the variable 'six.moves' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'six.moves', import_315141)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import heapq' statement (line 20)
import heapq

import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'heapq', heapq, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'from dateutil._common import weekdaybase' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
import_315143 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'dateutil._common')

if (type(import_315143) is not StypyTypeError):

    if (import_315143 != 'pyd_module'):
        __import__(import_315143)
        sys_modules_315144 = sys.modules[import_315143]
        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'dateutil._common', sys_modules_315144.module_type_store, module_type_store, ['weekday'])
        nest_module(stypy.reporting.localization.Localization(__file__, 22, 0), __file__, sys_modules_315144, sys_modules_315144.module_type_store, module_type_store)
    else:
        from dateutil._common import weekday as weekdaybase

        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'dateutil._common', None, module_type_store, ['weekday'], [weekdaybase])

else:
    # Assigning a type to the variable 'dateutil._common' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'dateutil._common', import_315143)

# Adding an alias
module_type_store.add_alias('weekdaybase', 'weekday')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from warnings import warn' statement (line 25)
try:
    from warnings import warn

except:
    warn = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'warnings', None, module_type_store, ['warn'], [warn])


# Assigning a List to a Name (line 27):

# Assigning a List to a Name (line 27):
__all__ = ['rrule', 'rruleset', 'rrulestr', 'YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU']
module_type_store.set_exportable_members(['rrule', 'rruleset', 'rrulestr', 'YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA', 'SU'])

# Obtaining an instance of the builtin type 'list' (line 27)
list_315145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 27)
# Adding element type (line 27)
str_315146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 11), 'str', 'rrule')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315146)
# Adding element type (line 27)
str_315147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 20), 'str', 'rruleset')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315147)
# Adding element type (line 27)
str_315148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 32), 'str', 'rrulestr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315148)
# Adding element type (line 27)
str_315149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 11), 'str', 'YEARLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315149)
# Adding element type (line 27)
str_315150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 21), 'str', 'MONTHLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315150)
# Adding element type (line 27)
str_315151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 32), 'str', 'WEEKLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315151)
# Adding element type (line 27)
str_315152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 42), 'str', 'DAILY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315152)
# Adding element type (line 27)
str_315153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 11), 'str', 'HOURLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315153)
# Adding element type (line 27)
str_315154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 21), 'str', 'MINUTELY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315154)
# Adding element type (line 27)
str_315155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 33), 'str', 'SECONDLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315155)
# Adding element type (line 27)
str_315156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 11), 'str', 'MO')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315156)
# Adding element type (line 27)
str_315157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 17), 'str', 'TU')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315157)
# Adding element type (line 27)
str_315158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 23), 'str', 'WE')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315158)
# Adding element type (line 27)
str_315159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 29), 'str', 'TH')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315159)
# Adding element type (line 27)
str_315160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 35), 'str', 'FR')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315160)
# Adding element type (line 27)
str_315161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 41), 'str', 'SA')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315161)
# Adding element type (line 27)
str_315162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 47), 'str', 'SU')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 27, 10), list_315145, str_315162)

# Assigning a type to the variable '__all__' (line 27)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), '__all__', list_315145)

# Assigning a Call to a Name (line 33):

# Assigning a Call to a Name (line 33):

# Call to tuple(...): (line 33)
# Processing the call arguments (line 33)

# Obtaining an instance of the builtin type 'list' (line 33)
list_315164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 33)
# Adding element type (line 33)
int_315165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 18), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 17), list_315164, int_315165)

int_315166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 21), 'int')
# Applying the binary operator '*' (line 33)
result_mul_315167 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 17), '*', list_315164, int_315166)


# Obtaining an instance of the builtin type 'list' (line 33)
list_315168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 33)
# Adding element type (line 33)
int_315169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 25), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 24), list_315168, int_315169)

int_315170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 28), 'int')
# Applying the binary operator '*' (line 33)
result_mul_315171 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 24), '*', list_315168, int_315170)

# Applying the binary operator '+' (line 33)
result_add_315172 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 17), '+', result_mul_315167, result_mul_315171)


# Obtaining an instance of the builtin type 'list' (line 33)
list_315173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 33)
# Adding element type (line 33)
int_315174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 32), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 31), list_315173, int_315174)

int_315175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 35), 'int')
# Applying the binary operator '*' (line 33)
result_mul_315176 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 31), '*', list_315173, int_315175)

# Applying the binary operator '+' (line 33)
result_add_315177 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 30), '+', result_add_315172, result_mul_315176)


# Obtaining an instance of the builtin type 'list' (line 33)
list_315178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 38), 'list')
# Adding type elements to the builtin type 'list' instance (line 33)
# Adding element type (line 33)
int_315179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 39), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 38), list_315178, int_315179)

int_315180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 42), 'int')
# Applying the binary operator '*' (line 33)
result_mul_315181 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 38), '*', list_315178, int_315180)

# Applying the binary operator '+' (line 33)
result_add_315182 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 37), '+', result_add_315177, result_mul_315181)


# Obtaining an instance of the builtin type 'list' (line 33)
list_315183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 45), 'list')
# Adding type elements to the builtin type 'list' instance (line 33)
# Adding element type (line 33)
int_315184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 46), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 45), list_315183, int_315184)

int_315185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 49), 'int')
# Applying the binary operator '*' (line 33)
result_mul_315186 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 45), '*', list_315183, int_315185)

# Applying the binary operator '+' (line 33)
result_add_315187 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 44), '+', result_add_315182, result_mul_315186)


# Obtaining an instance of the builtin type 'list' (line 33)
list_315188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 52), 'list')
# Adding type elements to the builtin type 'list' instance (line 33)
# Adding element type (line 33)
int_315189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 53), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 52), list_315188, int_315189)

int_315190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 56), 'int')
# Applying the binary operator '*' (line 33)
result_mul_315191 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 52), '*', list_315188, int_315190)

# Applying the binary operator '+' (line 33)
result_add_315192 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 51), '+', result_add_315187, result_mul_315191)


# Obtaining an instance of the builtin type 'list' (line 34)
list_315193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 34)
# Adding element type (line 34)
int_315194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 18), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 17), list_315193, int_315194)

int_315195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 21), 'int')
# Applying the binary operator '*' (line 34)
result_mul_315196 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 17), '*', list_315193, int_315195)

# Applying the binary operator '+' (line 33)
result_add_315197 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 59), '+', result_add_315192, result_mul_315196)


# Obtaining an instance of the builtin type 'list' (line 34)
list_315198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 34)
# Adding element type (line 34)
int_315199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 25), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 24), list_315198, int_315199)

int_315200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 28), 'int')
# Applying the binary operator '*' (line 34)
result_mul_315201 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 24), '*', list_315198, int_315200)

# Applying the binary operator '+' (line 34)
result_add_315202 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 23), '+', result_add_315197, result_mul_315201)


# Obtaining an instance of the builtin type 'list' (line 34)
list_315203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 34)
# Adding element type (line 34)
int_315204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 32), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 31), list_315203, int_315204)

int_315205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 35), 'int')
# Applying the binary operator '*' (line 34)
result_mul_315206 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 31), '*', list_315203, int_315205)

# Applying the binary operator '+' (line 34)
result_add_315207 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 30), '+', result_add_315202, result_mul_315206)


# Obtaining an instance of the builtin type 'list' (line 34)
list_315208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 38), 'list')
# Adding type elements to the builtin type 'list' instance (line 34)
# Adding element type (line 34)
int_315209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 39), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 38), list_315208, int_315209)

int_315210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 43), 'int')
# Applying the binary operator '*' (line 34)
result_mul_315211 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 38), '*', list_315208, int_315210)

# Applying the binary operator '+' (line 34)
result_add_315212 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 37), '+', result_add_315207, result_mul_315211)


# Obtaining an instance of the builtin type 'list' (line 34)
list_315213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 46), 'list')
# Adding type elements to the builtin type 'list' instance (line 34)
# Adding element type (line 34)
int_315214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 47), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 46), list_315213, int_315214)

int_315215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 51), 'int')
# Applying the binary operator '*' (line 34)
result_mul_315216 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 46), '*', list_315213, int_315215)

# Applying the binary operator '+' (line 34)
result_add_315217 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 45), '+', result_add_315212, result_mul_315216)


# Obtaining an instance of the builtin type 'list' (line 34)
list_315218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 54), 'list')
# Adding type elements to the builtin type 'list' instance (line 34)
# Adding element type (line 34)
int_315219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 55), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 54), list_315218, int_315219)

int_315220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 59), 'int')
# Applying the binary operator '*' (line 34)
result_mul_315221 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 54), '*', list_315218, int_315220)

# Applying the binary operator '+' (line 34)
result_add_315222 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 53), '+', result_add_315217, result_mul_315221)


# Obtaining an instance of the builtin type 'list' (line 34)
list_315223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 62), 'list')
# Adding type elements to the builtin type 'list' instance (line 34)
# Adding element type (line 34)
int_315224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 63), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 34, 62), list_315223, int_315224)

int_315225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 66), 'int')
# Applying the binary operator '*' (line 34)
result_mul_315226 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 62), '*', list_315223, int_315225)

# Applying the binary operator '+' (line 34)
result_add_315227 = python_operator(stypy.reporting.localization.Localization(__file__, 34, 61), '+', result_add_315222, result_mul_315226)

# Processing the call keyword arguments (line 33)
kwargs_315228 = {}
# Getting the type of 'tuple' (line 33)
tuple_315163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 11), 'tuple', False)
# Calling tuple(args, kwargs) (line 33)
tuple_call_result_315229 = invoke(stypy.reporting.localization.Localization(__file__, 33, 11), tuple_315163, *[result_add_315227], **kwargs_315228)

# Assigning a type to the variable 'M366MASK' (line 33)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'M366MASK', tuple_call_result_315229)

# Assigning a Call to a Name (line 35):

# Assigning a Call to a Name (line 35):

# Call to list(...): (line 35)
# Processing the call arguments (line 35)
# Getting the type of 'M366MASK' (line 35)
M366MASK_315231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 16), 'M366MASK', False)
# Processing the call keyword arguments (line 35)
kwargs_315232 = {}
# Getting the type of 'list' (line 35)
list_315230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 35, 11), 'list', False)
# Calling list(args, kwargs) (line 35)
list_call_result_315233 = invoke(stypy.reporting.localization.Localization(__file__, 35, 11), list_315230, *[M366MASK_315231], **kwargs_315232)

# Assigning a type to the variable 'M365MASK' (line 35)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'M365MASK', list_call_result_315233)

# Assigning a Tuple to a Tuple (line 36):

# Assigning a Call to a Name (line 36):

# Call to list(...): (line 36)
# Processing the call arguments (line 36)

# Call to range(...): (line 36)
# Processing the call arguments (line 36)
int_315236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 27), 'int')
int_315237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 30), 'int')
# Processing the call keyword arguments (line 36)
kwargs_315238 = {}
# Getting the type of 'range' (line 36)
range_315235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 21), 'range', False)
# Calling range(args, kwargs) (line 36)
range_call_result_315239 = invoke(stypy.reporting.localization.Localization(__file__, 36, 21), range_315235, *[int_315236, int_315237], **kwargs_315238)

# Processing the call keyword arguments (line 36)
kwargs_315240 = {}
# Getting the type of 'list' (line 36)
list_315234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 16), 'list', False)
# Calling list(args, kwargs) (line 36)
list_call_result_315241 = invoke(stypy.reporting.localization.Localization(__file__, 36, 16), list_315234, *[range_call_result_315239], **kwargs_315240)

# Assigning a type to the variable 'tuple_assignment_315044' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'tuple_assignment_315044', list_call_result_315241)

# Assigning a Call to a Name (line 36):

# Call to list(...): (line 36)
# Processing the call arguments (line 36)

# Call to range(...): (line 36)
# Processing the call arguments (line 36)
int_315244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 47), 'int')
int_315245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 50), 'int')
# Processing the call keyword arguments (line 36)
kwargs_315246 = {}
# Getting the type of 'range' (line 36)
range_315243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 41), 'range', False)
# Calling range(args, kwargs) (line 36)
range_call_result_315247 = invoke(stypy.reporting.localization.Localization(__file__, 36, 41), range_315243, *[int_315244, int_315245], **kwargs_315246)

# Processing the call keyword arguments (line 36)
kwargs_315248 = {}
# Getting the type of 'list' (line 36)
list_315242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 36), 'list', False)
# Calling list(args, kwargs) (line 36)
list_call_result_315249 = invoke(stypy.reporting.localization.Localization(__file__, 36, 36), list_315242, *[range_call_result_315247], **kwargs_315248)

# Assigning a type to the variable 'tuple_assignment_315045' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'tuple_assignment_315045', list_call_result_315249)

# Assigning a Call to a Name (line 36):

# Call to list(...): (line 36)
# Processing the call arguments (line 36)

# Call to range(...): (line 36)
# Processing the call arguments (line 36)
int_315252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 67), 'int')
int_315253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 70), 'int')
# Processing the call keyword arguments (line 36)
kwargs_315254 = {}
# Getting the type of 'range' (line 36)
range_315251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 61), 'range', False)
# Calling range(args, kwargs) (line 36)
range_call_result_315255 = invoke(stypy.reporting.localization.Localization(__file__, 36, 61), range_315251, *[int_315252, int_315253], **kwargs_315254)

# Processing the call keyword arguments (line 36)
kwargs_315256 = {}
# Getting the type of 'list' (line 36)
list_315250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 56), 'list', False)
# Calling list(args, kwargs) (line 36)
list_call_result_315257 = invoke(stypy.reporting.localization.Localization(__file__, 36, 56), list_315250, *[range_call_result_315255], **kwargs_315256)

# Assigning a type to the variable 'tuple_assignment_315046' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'tuple_assignment_315046', list_call_result_315257)

# Assigning a Name to a Name (line 36):
# Getting the type of 'tuple_assignment_315044' (line 36)
tuple_assignment_315044_315258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'tuple_assignment_315044')
# Assigning a type to the variable 'M29' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'M29', tuple_assignment_315044_315258)

# Assigning a Name to a Name (line 36):
# Getting the type of 'tuple_assignment_315045' (line 36)
tuple_assignment_315045_315259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'tuple_assignment_315045')
# Assigning a type to the variable 'M30' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 5), 'M30', tuple_assignment_315045_315259)

# Assigning a Name to a Name (line 36):
# Getting the type of 'tuple_assignment_315046' (line 36)
tuple_assignment_315046_315260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'tuple_assignment_315046')
# Assigning a type to the variable 'M31' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 10), 'M31', tuple_assignment_315046_315260)

# Assigning a Call to a Name (line 37):

# Assigning a Call to a Name (line 37):

# Call to tuple(...): (line 37)
# Processing the call arguments (line 37)
# Getting the type of 'M31' (line 37)
M31_315262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 20), 'M31', False)
# Getting the type of 'M29' (line 37)
M29_315263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 24), 'M29', False)
# Applying the binary operator '+' (line 37)
result_add_315264 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 20), '+', M31_315262, M29_315263)

# Getting the type of 'M31' (line 37)
M31_315265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 28), 'M31', False)
# Applying the binary operator '+' (line 37)
result_add_315266 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 27), '+', result_add_315264, M31_315265)

# Getting the type of 'M30' (line 37)
M30_315267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 32), 'M30', False)
# Applying the binary operator '+' (line 37)
result_add_315268 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 31), '+', result_add_315266, M30_315267)

# Getting the type of 'M31' (line 37)
M31_315269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 36), 'M31', False)
# Applying the binary operator '+' (line 37)
result_add_315270 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 35), '+', result_add_315268, M31_315269)

# Getting the type of 'M30' (line 37)
M30_315271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 40), 'M30', False)
# Applying the binary operator '+' (line 37)
result_add_315272 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 39), '+', result_add_315270, M30_315271)

# Getting the type of 'M31' (line 37)
M31_315273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 44), 'M31', False)
# Applying the binary operator '+' (line 37)
result_add_315274 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 43), '+', result_add_315272, M31_315273)

# Getting the type of 'M31' (line 37)
M31_315275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 48), 'M31', False)
# Applying the binary operator '+' (line 37)
result_add_315276 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 47), '+', result_add_315274, M31_315275)

# Getting the type of 'M30' (line 37)
M30_315277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 52), 'M30', False)
# Applying the binary operator '+' (line 37)
result_add_315278 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 51), '+', result_add_315276, M30_315277)

# Getting the type of 'M31' (line 37)
M31_315279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 56), 'M31', False)
# Applying the binary operator '+' (line 37)
result_add_315280 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 55), '+', result_add_315278, M31_315279)

# Getting the type of 'M30' (line 37)
M30_315281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 60), 'M30', False)
# Applying the binary operator '+' (line 37)
result_add_315282 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 59), '+', result_add_315280, M30_315281)

# Getting the type of 'M31' (line 37)
M31_315283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 64), 'M31', False)
# Applying the binary operator '+' (line 37)
result_add_315284 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 63), '+', result_add_315282, M31_315283)


# Obtaining the type of the subscript
int_315285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 73), 'int')
slice_315286 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 37, 68), None, int_315285, None)
# Getting the type of 'M31' (line 37)
M31_315287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 68), 'M31', False)
# Obtaining the member '__getitem__' of a type (line 37)
getitem___315288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 37, 68), M31_315287, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 37)
subscript_call_result_315289 = invoke(stypy.reporting.localization.Localization(__file__, 37, 68), getitem___315288, slice_315286)

# Applying the binary operator '+' (line 37)
result_add_315290 = python_operator(stypy.reporting.localization.Localization(__file__, 37, 67), '+', result_add_315284, subscript_call_result_315289)

# Processing the call keyword arguments (line 37)
kwargs_315291 = {}
# Getting the type of 'tuple' (line 37)
tuple_315261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 14), 'tuple', False)
# Calling tuple(args, kwargs) (line 37)
tuple_call_result_315292 = invoke(stypy.reporting.localization.Localization(__file__, 37, 14), tuple_315261, *[result_add_315290], **kwargs_315291)

# Assigning a type to the variable 'MDAY366MASK' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'MDAY366MASK', tuple_call_result_315292)

# Assigning a Call to a Name (line 38):

# Assigning a Call to a Name (line 38):

# Call to list(...): (line 38)
# Processing the call arguments (line 38)
# Getting the type of 'MDAY366MASK' (line 38)
MDAY366MASK_315294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 19), 'MDAY366MASK', False)
# Processing the call keyword arguments (line 38)
kwargs_315295 = {}
# Getting the type of 'list' (line 38)
list_315293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 14), 'list', False)
# Calling list(args, kwargs) (line 38)
list_call_result_315296 = invoke(stypy.reporting.localization.Localization(__file__, 38, 14), list_315293, *[MDAY366MASK_315294], **kwargs_315295)

# Assigning a type to the variable 'MDAY365MASK' (line 38)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'MDAY365MASK', list_call_result_315296)

# Assigning a Tuple to a Tuple (line 39):

# Assigning a Call to a Name (line 39):

# Call to list(...): (line 39)
# Processing the call arguments (line 39)

# Call to range(...): (line 39)
# Processing the call arguments (line 39)
int_315299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 27), 'int')
int_315300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 32), 'int')
# Processing the call keyword arguments (line 39)
kwargs_315301 = {}
# Getting the type of 'range' (line 39)
range_315298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 21), 'range', False)
# Calling range(args, kwargs) (line 39)
range_call_result_315302 = invoke(stypy.reporting.localization.Localization(__file__, 39, 21), range_315298, *[int_315299, int_315300], **kwargs_315301)

# Processing the call keyword arguments (line 39)
kwargs_315303 = {}
# Getting the type of 'list' (line 39)
list_315297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 16), 'list', False)
# Calling list(args, kwargs) (line 39)
list_call_result_315304 = invoke(stypy.reporting.localization.Localization(__file__, 39, 16), list_315297, *[range_call_result_315302], **kwargs_315303)

# Assigning a type to the variable 'tuple_assignment_315047' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'tuple_assignment_315047', list_call_result_315304)

# Assigning a Call to a Name (line 39):

# Call to list(...): (line 39)
# Processing the call arguments (line 39)

# Call to range(...): (line 39)
# Processing the call arguments (line 39)
int_315307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 48), 'int')
int_315308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 53), 'int')
# Processing the call keyword arguments (line 39)
kwargs_315309 = {}
# Getting the type of 'range' (line 39)
range_315306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 42), 'range', False)
# Calling range(args, kwargs) (line 39)
range_call_result_315310 = invoke(stypy.reporting.localization.Localization(__file__, 39, 42), range_315306, *[int_315307, int_315308], **kwargs_315309)

# Processing the call keyword arguments (line 39)
kwargs_315311 = {}
# Getting the type of 'list' (line 39)
list_315305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 37), 'list', False)
# Calling list(args, kwargs) (line 39)
list_call_result_315312 = invoke(stypy.reporting.localization.Localization(__file__, 39, 37), list_315305, *[range_call_result_315310], **kwargs_315311)

# Assigning a type to the variable 'tuple_assignment_315048' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'tuple_assignment_315048', list_call_result_315312)

# Assigning a Call to a Name (line 39):

# Call to list(...): (line 39)
# Processing the call arguments (line 39)

# Call to range(...): (line 39)
# Processing the call arguments (line 39)
int_315315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 69), 'int')
int_315316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 74), 'int')
# Processing the call keyword arguments (line 39)
kwargs_315317 = {}
# Getting the type of 'range' (line 39)
range_315314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 63), 'range', False)
# Calling range(args, kwargs) (line 39)
range_call_result_315318 = invoke(stypy.reporting.localization.Localization(__file__, 39, 63), range_315314, *[int_315315, int_315316], **kwargs_315317)

# Processing the call keyword arguments (line 39)
kwargs_315319 = {}
# Getting the type of 'list' (line 39)
list_315313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 58), 'list', False)
# Calling list(args, kwargs) (line 39)
list_call_result_315320 = invoke(stypy.reporting.localization.Localization(__file__, 39, 58), list_315313, *[range_call_result_315318], **kwargs_315319)

# Assigning a type to the variable 'tuple_assignment_315049' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'tuple_assignment_315049', list_call_result_315320)

# Assigning a Name to a Name (line 39):
# Getting the type of 'tuple_assignment_315047' (line 39)
tuple_assignment_315047_315321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'tuple_assignment_315047')
# Assigning a type to the variable 'M29' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'M29', tuple_assignment_315047_315321)

# Assigning a Name to a Name (line 39):
# Getting the type of 'tuple_assignment_315048' (line 39)
tuple_assignment_315048_315322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'tuple_assignment_315048')
# Assigning a type to the variable 'M30' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 5), 'M30', tuple_assignment_315048_315322)

# Assigning a Name to a Name (line 39):
# Getting the type of 'tuple_assignment_315049' (line 39)
tuple_assignment_315049_315323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'tuple_assignment_315049')
# Assigning a type to the variable 'M31' (line 39)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 10), 'M31', tuple_assignment_315049_315323)

# Assigning a Call to a Name (line 40):

# Assigning a Call to a Name (line 40):

# Call to tuple(...): (line 40)
# Processing the call arguments (line 40)
# Getting the type of 'M31' (line 40)
M31_315325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 21), 'M31', False)
# Getting the type of 'M29' (line 40)
M29_315326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 25), 'M29', False)
# Applying the binary operator '+' (line 40)
result_add_315327 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 21), '+', M31_315325, M29_315326)

# Getting the type of 'M31' (line 40)
M31_315328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 29), 'M31', False)
# Applying the binary operator '+' (line 40)
result_add_315329 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 28), '+', result_add_315327, M31_315328)

# Getting the type of 'M30' (line 40)
M30_315330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 33), 'M30', False)
# Applying the binary operator '+' (line 40)
result_add_315331 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 32), '+', result_add_315329, M30_315330)

# Getting the type of 'M31' (line 40)
M31_315332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 37), 'M31', False)
# Applying the binary operator '+' (line 40)
result_add_315333 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 36), '+', result_add_315331, M31_315332)

# Getting the type of 'M30' (line 40)
M30_315334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 41), 'M30', False)
# Applying the binary operator '+' (line 40)
result_add_315335 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 40), '+', result_add_315333, M30_315334)

# Getting the type of 'M31' (line 40)
M31_315336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 45), 'M31', False)
# Applying the binary operator '+' (line 40)
result_add_315337 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 44), '+', result_add_315335, M31_315336)

# Getting the type of 'M31' (line 40)
M31_315338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 49), 'M31', False)
# Applying the binary operator '+' (line 40)
result_add_315339 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 48), '+', result_add_315337, M31_315338)

# Getting the type of 'M30' (line 40)
M30_315340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 53), 'M30', False)
# Applying the binary operator '+' (line 40)
result_add_315341 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 52), '+', result_add_315339, M30_315340)

# Getting the type of 'M31' (line 40)
M31_315342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 57), 'M31', False)
# Applying the binary operator '+' (line 40)
result_add_315343 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 56), '+', result_add_315341, M31_315342)

# Getting the type of 'M30' (line 40)
M30_315344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 61), 'M30', False)
# Applying the binary operator '+' (line 40)
result_add_315345 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 60), '+', result_add_315343, M30_315344)

# Getting the type of 'M31' (line 40)
M31_315346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 65), 'M31', False)
# Applying the binary operator '+' (line 40)
result_add_315347 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 64), '+', result_add_315345, M31_315346)


# Obtaining the type of the subscript
int_315348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 74), 'int')
slice_315349 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 40, 69), None, int_315348, None)
# Getting the type of 'M31' (line 40)
M31_315350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 69), 'M31', False)
# Obtaining the member '__getitem__' of a type (line 40)
getitem___315351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 69), M31_315350, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 40)
subscript_call_result_315352 = invoke(stypy.reporting.localization.Localization(__file__, 40, 69), getitem___315351, slice_315349)

# Applying the binary operator '+' (line 40)
result_add_315353 = python_operator(stypy.reporting.localization.Localization(__file__, 40, 68), '+', result_add_315347, subscript_call_result_315352)

# Processing the call keyword arguments (line 40)
kwargs_315354 = {}
# Getting the type of 'tuple' (line 40)
tuple_315324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 15), 'tuple', False)
# Calling tuple(args, kwargs) (line 40)
tuple_call_result_315355 = invoke(stypy.reporting.localization.Localization(__file__, 40, 15), tuple_315324, *[result_add_315353], **kwargs_315354)

# Assigning a type to the variable 'NMDAY366MASK' (line 40)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'NMDAY366MASK', tuple_call_result_315355)

# Assigning a Call to a Name (line 41):

# Assigning a Call to a Name (line 41):

# Call to list(...): (line 41)
# Processing the call arguments (line 41)
# Getting the type of 'NMDAY366MASK' (line 41)
NMDAY366MASK_315357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 20), 'NMDAY366MASK', False)
# Processing the call keyword arguments (line 41)
kwargs_315358 = {}
# Getting the type of 'list' (line 41)
list_315356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 15), 'list', False)
# Calling list(args, kwargs) (line 41)
list_call_result_315359 = invoke(stypy.reporting.localization.Localization(__file__, 41, 15), list_315356, *[NMDAY366MASK_315357], **kwargs_315358)

# Assigning a type to the variable 'NMDAY365MASK' (line 41)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'NMDAY365MASK', list_call_result_315359)

# Assigning a Tuple to a Name (line 42):

# Assigning a Tuple to a Name (line 42):

# Obtaining an instance of the builtin type 'tuple' (line 42)
tuple_315360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 13), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 42)
# Adding element type (line 42)
int_315361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 13), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315361)
# Adding element type (line 42)
int_315362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 16), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315362)
# Adding element type (line 42)
int_315363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 20), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315363)
# Adding element type (line 42)
int_315364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 24), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315364)
# Adding element type (line 42)
int_315365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 28), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315365)
# Adding element type (line 42)
int_315366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 33), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315366)
# Adding element type (line 42)
int_315367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 38), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315367)
# Adding element type (line 42)
int_315368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 43), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315368)
# Adding element type (line 42)
int_315369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 48), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315369)
# Adding element type (line 42)
int_315370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 53), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315370)
# Adding element type (line 42)
int_315371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 58), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315371)
# Adding element type (line 42)
int_315372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 63), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315372)
# Adding element type (line 42)
int_315373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 68), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 42, 13), tuple_315360, int_315373)

# Assigning a type to the variable 'M366RANGE' (line 42)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'M366RANGE', tuple_315360)

# Assigning a Tuple to a Name (line 43):

# Assigning a Tuple to a Name (line 43):

# Obtaining an instance of the builtin type 'tuple' (line 43)
tuple_315374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 13), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 43)
# Adding element type (line 43)
int_315375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 13), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315375)
# Adding element type (line 43)
int_315376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 16), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315376)
# Adding element type (line 43)
int_315377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 20), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315377)
# Adding element type (line 43)
int_315378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 24), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315378)
# Adding element type (line 43)
int_315379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 28), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315379)
# Adding element type (line 43)
int_315380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 33), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315380)
# Adding element type (line 43)
int_315381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 38), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315381)
# Adding element type (line 43)
int_315382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 43), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315382)
# Adding element type (line 43)
int_315383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 48), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315383)
# Adding element type (line 43)
int_315384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 53), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315384)
# Adding element type (line 43)
int_315385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 58), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315385)
# Adding element type (line 43)
int_315386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 63), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315386)
# Adding element type (line 43)
int_315387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 68), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 13), tuple_315374, int_315387)

# Assigning a type to the variable 'M365RANGE' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'M365RANGE', tuple_315374)

# Assigning a BinOp to a Name (line 44):

# Assigning a BinOp to a Name (line 44):

# Obtaining an instance of the builtin type 'list' (line 44)
list_315388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 11), 'list')
# Adding type elements to the builtin type 'list' instance (line 44)
# Adding element type (line 44)
int_315389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 12), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 11), list_315388, int_315389)
# Adding element type (line 44)
int_315390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 15), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 11), list_315388, int_315390)
# Adding element type (line 44)
int_315391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 18), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 11), list_315388, int_315391)
# Adding element type (line 44)
int_315392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 21), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 11), list_315388, int_315392)
# Adding element type (line 44)
int_315393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 24), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 11), list_315388, int_315393)
# Adding element type (line 44)
int_315394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 27), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 11), list_315388, int_315394)
# Adding element type (line 44)
int_315395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 30), 'int')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 11), list_315388, int_315395)

int_315396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 33), 'int')
# Applying the binary operator '*' (line 44)
result_mul_315397 = python_operator(stypy.reporting.localization.Localization(__file__, 44, 11), '*', list_315388, int_315396)

# Assigning a type to the variable 'WDAYMASK' (line 44)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'WDAYMASK', result_mul_315397)
# Deleting a member
module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 45, 0), module_type_store, 'M29')
# Deleting a member
module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 45, 0), module_type_store, 'M30')
# Deleting a member
module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 45, 0), module_type_store, 'M31')
# Deleting a member
# Getting the type of 'M365MASK' (line 45)
M365MASK_315398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 19), 'M365MASK')

# Obtaining the type of the subscript
int_315399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 28), 'int')
# Getting the type of 'M365MASK' (line 45)
M365MASK_315400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 19), 'M365MASK')
# Obtaining the member '__getitem__' of a type (line 45)
getitem___315401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 19), M365MASK_315400, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 45)
subscript_call_result_315402 = invoke(stypy.reporting.localization.Localization(__file__, 45, 19), getitem___315401, int_315399)

del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 0), M365MASK_315398, subscript_call_result_315402)
# Deleting a member
# Getting the type of 'MDAY365MASK' (line 45)
MDAY365MASK_315403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 33), 'MDAY365MASK')

# Obtaining the type of the subscript
int_315404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 45), 'int')
# Getting the type of 'MDAY365MASK' (line 45)
MDAY365MASK_315405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 33), 'MDAY365MASK')
# Obtaining the member '__getitem__' of a type (line 45)
getitem___315406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 33), MDAY365MASK_315405, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 45)
subscript_call_result_315407 = invoke(stypy.reporting.localization.Localization(__file__, 45, 33), getitem___315406, int_315404)

del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 0), MDAY365MASK_315403, subscript_call_result_315407)
# Deleting a member
# Getting the type of 'NMDAY365MASK' (line 45)
NMDAY365MASK_315408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 50), 'NMDAY365MASK')

# Obtaining the type of the subscript
int_315409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 63), 'int')
# Getting the type of 'NMDAY365MASK' (line 45)
NMDAY365MASK_315410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 50), 'NMDAY365MASK')
# Obtaining the member '__getitem__' of a type (line 45)
getitem___315411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 50), NMDAY365MASK_315410, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 45)
subscript_call_result_315412 = invoke(stypy.reporting.localization.Localization(__file__, 45, 50), getitem___315411, int_315409)

del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 45, 0), NMDAY365MASK_315408, subscript_call_result_315412)

# Assigning a Call to a Name (line 46):

# Assigning a Call to a Name (line 46):

# Call to tuple(...): (line 46)
# Processing the call arguments (line 46)
# Getting the type of 'MDAY365MASK' (line 46)
MDAY365MASK_315414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 20), 'MDAY365MASK', False)
# Processing the call keyword arguments (line 46)
kwargs_315415 = {}
# Getting the type of 'tuple' (line 46)
tuple_315413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 14), 'tuple', False)
# Calling tuple(args, kwargs) (line 46)
tuple_call_result_315416 = invoke(stypy.reporting.localization.Localization(__file__, 46, 14), tuple_315413, *[MDAY365MASK_315414], **kwargs_315415)

# Assigning a type to the variable 'MDAY365MASK' (line 46)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), 'MDAY365MASK', tuple_call_result_315416)

# Assigning a Call to a Name (line 47):

# Assigning a Call to a Name (line 47):

# Call to tuple(...): (line 47)
# Processing the call arguments (line 47)
# Getting the type of 'M365MASK' (line 47)
M365MASK_315418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 17), 'M365MASK', False)
# Processing the call keyword arguments (line 47)
kwargs_315419 = {}
# Getting the type of 'tuple' (line 47)
tuple_315417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 11), 'tuple', False)
# Calling tuple(args, kwargs) (line 47)
tuple_call_result_315420 = invoke(stypy.reporting.localization.Localization(__file__, 47, 11), tuple_315417, *[M365MASK_315418], **kwargs_315419)

# Assigning a type to the variable 'M365MASK' (line 47)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'M365MASK', tuple_call_result_315420)

# Assigning a List to a Name (line 49):

# Assigning a List to a Name (line 49):

# Obtaining an instance of the builtin type 'list' (line 49)
list_315421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 49)
# Adding element type (line 49)
str_315422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 13), 'str', 'YEARLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 12), list_315421, str_315422)
# Adding element type (line 49)
str_315423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 23), 'str', 'MONTHLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 12), list_315421, str_315423)
# Adding element type (line 49)
str_315424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 34), 'str', 'WEEKLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 12), list_315421, str_315424)
# Adding element type (line 49)
str_315425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 44), 'str', 'DAILY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 12), list_315421, str_315425)
# Adding element type (line 49)
str_315426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 53), 'str', 'HOURLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 12), list_315421, str_315426)
# Adding element type (line 49)
str_315427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 63), 'str', 'MINUTELY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 12), list_315421, str_315427)
# Adding element type (line 49)
str_315428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 75), 'str', 'SECONDLY')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 12), list_315421, str_315428)

# Assigning a type to the variable 'FREQNAMES' (line 49)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 0), 'FREQNAMES', list_315421)

# Assigning a Call to a Tuple (line 51):

# Assigning a Call to a Name:

# Call to list(...): (line 57)
# Processing the call arguments (line 57)

# Call to range(...): (line 57)
# Processing the call arguments (line 57)
int_315431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 57, 24), 'int')
# Processing the call keyword arguments (line 57)
kwargs_315432 = {}
# Getting the type of 'range' (line 57)
range_315430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 18), 'range', False)
# Calling range(args, kwargs) (line 57)
range_call_result_315433 = invoke(stypy.reporting.localization.Localization(__file__, 57, 18), range_315430, *[int_315431], **kwargs_315432)

# Processing the call keyword arguments (line 57)
kwargs_315434 = {}
# Getting the type of 'list' (line 57)
list_315429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 13), 'list', False)
# Calling list(args, kwargs) (line 57)
list_call_result_315435 = invoke(stypy.reporting.localization.Localization(__file__, 57, 13), list_315429, *[range_call_result_315433], **kwargs_315434)

# Assigning a type to the variable 'call_assignment_315050' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315050', list_call_result_315435)

# Assigning a Call to a Name (line 51):

# Call to __getitem__(...):
# Processing the call arguments
int_315438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 0), 'int')
# Processing the call keyword arguments
kwargs_315439 = {}
# Getting the type of 'call_assignment_315050' (line 51)
call_assignment_315050_315436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315050', False)
# Obtaining the member '__getitem__' of a type (line 51)
getitem___315437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), call_assignment_315050_315436, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_315440 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___315437, *[int_315438], **kwargs_315439)

# Assigning a type to the variable 'call_assignment_315051' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315051', getitem___call_result_315440)

# Assigning a Name to a Name (line 51):
# Getting the type of 'call_assignment_315051' (line 51)
call_assignment_315051_315441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315051')
# Assigning a type to the variable 'YEARLY' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 1), 'YEARLY', call_assignment_315051_315441)

# Assigning a Call to a Name (line 51):

# Call to __getitem__(...):
# Processing the call arguments
int_315444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 0), 'int')
# Processing the call keyword arguments
kwargs_315445 = {}
# Getting the type of 'call_assignment_315050' (line 51)
call_assignment_315050_315442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315050', False)
# Obtaining the member '__getitem__' of a type (line 51)
getitem___315443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), call_assignment_315050_315442, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_315446 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___315443, *[int_315444], **kwargs_315445)

# Assigning a type to the variable 'call_assignment_315052' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315052', getitem___call_result_315446)

# Assigning a Name to a Name (line 51):
# Getting the type of 'call_assignment_315052' (line 51)
call_assignment_315052_315447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315052')
# Assigning a type to the variable 'MONTHLY' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 1), 'MONTHLY', call_assignment_315052_315447)

# Assigning a Call to a Name (line 51):

# Call to __getitem__(...):
# Processing the call arguments
int_315450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 0), 'int')
# Processing the call keyword arguments
kwargs_315451 = {}
# Getting the type of 'call_assignment_315050' (line 51)
call_assignment_315050_315448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315050', False)
# Obtaining the member '__getitem__' of a type (line 51)
getitem___315449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), call_assignment_315050_315448, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_315452 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___315449, *[int_315450], **kwargs_315451)

# Assigning a type to the variable 'call_assignment_315053' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315053', getitem___call_result_315452)

# Assigning a Name to a Name (line 51):
# Getting the type of 'call_assignment_315053' (line 51)
call_assignment_315053_315453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315053')
# Assigning a type to the variable 'WEEKLY' (line 53)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 1), 'WEEKLY', call_assignment_315053_315453)

# Assigning a Call to a Name (line 51):

# Call to __getitem__(...):
# Processing the call arguments
int_315456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 0), 'int')
# Processing the call keyword arguments
kwargs_315457 = {}
# Getting the type of 'call_assignment_315050' (line 51)
call_assignment_315050_315454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315050', False)
# Obtaining the member '__getitem__' of a type (line 51)
getitem___315455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), call_assignment_315050_315454, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_315458 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___315455, *[int_315456], **kwargs_315457)

# Assigning a type to the variable 'call_assignment_315054' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315054', getitem___call_result_315458)

# Assigning a Name to a Name (line 51):
# Getting the type of 'call_assignment_315054' (line 51)
call_assignment_315054_315459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315054')
# Assigning a type to the variable 'DAILY' (line 54)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 1), 'DAILY', call_assignment_315054_315459)

# Assigning a Call to a Name (line 51):

# Call to __getitem__(...):
# Processing the call arguments
int_315462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 0), 'int')
# Processing the call keyword arguments
kwargs_315463 = {}
# Getting the type of 'call_assignment_315050' (line 51)
call_assignment_315050_315460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315050', False)
# Obtaining the member '__getitem__' of a type (line 51)
getitem___315461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), call_assignment_315050_315460, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_315464 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___315461, *[int_315462], **kwargs_315463)

# Assigning a type to the variable 'call_assignment_315055' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315055', getitem___call_result_315464)

# Assigning a Name to a Name (line 51):
# Getting the type of 'call_assignment_315055' (line 51)
call_assignment_315055_315465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315055')
# Assigning a type to the variable 'HOURLY' (line 55)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 1), 'HOURLY', call_assignment_315055_315465)

# Assigning a Call to a Name (line 51):

# Call to __getitem__(...):
# Processing the call arguments
int_315468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 0), 'int')
# Processing the call keyword arguments
kwargs_315469 = {}
# Getting the type of 'call_assignment_315050' (line 51)
call_assignment_315050_315466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315050', False)
# Obtaining the member '__getitem__' of a type (line 51)
getitem___315467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), call_assignment_315050_315466, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_315470 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___315467, *[int_315468], **kwargs_315469)

# Assigning a type to the variable 'call_assignment_315056' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315056', getitem___call_result_315470)

# Assigning a Name to a Name (line 51):
# Getting the type of 'call_assignment_315056' (line 51)
call_assignment_315056_315471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315056')
# Assigning a type to the variable 'MINUTELY' (line 56)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 1), 'MINUTELY', call_assignment_315056_315471)

# Assigning a Call to a Name (line 51):

# Call to __getitem__(...):
# Processing the call arguments
int_315474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 0), 'int')
# Processing the call keyword arguments
kwargs_315475 = {}
# Getting the type of 'call_assignment_315050' (line 51)
call_assignment_315050_315472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315050', False)
# Obtaining the member '__getitem__' of a type (line 51)
getitem___315473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), call_assignment_315050_315472, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_315476 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___315473, *[int_315474], **kwargs_315475)

# Assigning a type to the variable 'call_assignment_315057' (line 51)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315057', getitem___call_result_315476)

# Assigning a Name to a Name (line 51):
# Getting the type of 'call_assignment_315057' (line 51)
call_assignment_315057_315477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'call_assignment_315057')
# Assigning a type to the variable 'SECONDLY' (line 57)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 1), 'SECONDLY', call_assignment_315057_315477)

# Assigning a Name to a Name (line 60):

# Assigning a Name to a Name (line 60):
# Getting the type of 'None' (line 60)
None_315478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 9), 'None')
# Assigning a type to the variable 'easter' (line 60)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 0), 'easter', None_315478)

# Assigning a Name to a Name (line 61):

# Assigning a Name to a Name (line 61):
# Getting the type of 'None' (line 61)
None_315479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 9), 'None')
# Assigning a type to the variable 'parser' (line 61)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 61, 0), 'parser', None_315479)
# Declaration of the 'weekday' class
# Getting the type of 'weekdaybase' (line 64)
weekdaybase_315480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 14), 'weekdaybase')

class weekday(weekdaybase_315480, ):
    str_315481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, (-1)), 'str', '\n    This version of weekday does not allow n = 0.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 68)
        None_315482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 32), 'None')
        defaults = [None_315482]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 68, 4, False)
        # Assigning a type to the variable 'self' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'weekday.__init__', ['wkday', 'n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['wkday', 'n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'n' (line 69)
        n_315483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 11), 'n')
        int_315484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 69, 16), 'int')
        # Applying the binary operator '==' (line 69)
        result_eq_315485 = python_operator(stypy.reporting.localization.Localization(__file__, 69, 11), '==', n_315483, int_315484)
        
        # Testing the type of an if condition (line 69)
        if_condition_315486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 69, 8), result_eq_315485)
        # Assigning a type to the variable 'if_condition_315486' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'if_condition_315486', if_condition_315486)
        # SSA begins for if statement (line 69)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 70)
        # Processing the call arguments (line 70)
        str_315488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 29), 'str', "Can't create weekday with n==0")
        # Processing the call keyword arguments (line 70)
        kwargs_315489 = {}
        # Getting the type of 'ValueError' (line 70)
        ValueError_315487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 70)
        ValueError_call_result_315490 = invoke(stypy.reporting.localization.Localization(__file__, 70, 18), ValueError_315487, *[str_315488], **kwargs_315489)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 70, 12), ValueError_call_result_315490, 'raise parameter', BaseException)
        # SSA join for if statement (line 69)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 72)
        # Processing the call arguments (line 72)
        # Getting the type of 'wkday' (line 72)
        wkday_315497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 38), 'wkday', False)
        # Getting the type of 'n' (line 72)
        n_315498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 45), 'n', False)
        # Processing the call keyword arguments (line 72)
        kwargs_315499 = {}
        
        # Call to super(...): (line 72)
        # Processing the call arguments (line 72)
        # Getting the type of 'weekday' (line 72)
        weekday_315492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 14), 'weekday', False)
        # Getting the type of 'self' (line 72)
        self_315493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 23), 'self', False)
        # Processing the call keyword arguments (line 72)
        kwargs_315494 = {}
        # Getting the type of 'super' (line 72)
        super_315491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 8), 'super', False)
        # Calling super(args, kwargs) (line 72)
        super_call_result_315495 = invoke(stypy.reporting.localization.Localization(__file__, 72, 8), super_315491, *[weekday_315492, self_315493], **kwargs_315494)
        
        # Obtaining the member '__init__' of a type (line 72)
        init___315496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 72, 8), super_call_result_315495, '__init__')
        # Calling __init__(args, kwargs) (line 72)
        init___call_result_315500 = invoke(stypy.reporting.localization.Localization(__file__, 72, 8), init___315496, *[wkday_315497, n_315498], **kwargs_315499)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'weekday' (line 64)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 64, 0), 'weekday', weekday)

# Multiple assignment of 2 elements.

# Assigning a Call to a Name (line 75):

# Call to tuple(...): (line 75)
# Processing the call arguments (line 75)
# Calculating generator expression
module_type_store = module_type_store.open_function_context('list comprehension expression', 75, 46, True)
# Calculating comprehension expression

# Call to range(...): (line 75)
# Processing the call arguments (line 75)
int_315507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 72), 'int')
# Processing the call keyword arguments (line 75)
kwargs_315508 = {}
# Getting the type of 'range' (line 75)
range_315506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 66), 'range', False)
# Calling range(args, kwargs) (line 75)
range_call_result_315509 = invoke(stypy.reporting.localization.Localization(__file__, 75, 66), range_315506, *[int_315507], **kwargs_315508)

comprehension_315510 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 46), range_call_result_315509)
# Assigning a type to the variable 'x' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 46), 'x', comprehension_315510)

# Call to weekday(...): (line 75)
# Processing the call arguments (line 75)
# Getting the type of 'x' (line 75)
x_315503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 54), 'x', False)
# Processing the call keyword arguments (line 75)
kwargs_315504 = {}
# Getting the type of 'weekday' (line 75)
weekday_315502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 46), 'weekday', False)
# Calling weekday(args, kwargs) (line 75)
weekday_call_result_315505 = invoke(stypy.reporting.localization.Localization(__file__, 75, 46), weekday_315502, *[x_315503], **kwargs_315504)

list_315511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 46), 'list')
# Destroy the current context
module_type_store = module_type_store.close_function_context()
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 75, 46), list_315511, weekday_call_result_315505)
# Processing the call keyword arguments (line 75)
kwargs_315512 = {}
# Getting the type of 'tuple' (line 75)
tuple_315501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 40), 'tuple', False)
# Calling tuple(args, kwargs) (line 75)
tuple_call_result_315513 = invoke(stypy.reporting.localization.Localization(__file__, 75, 40), tuple_315501, *[list_315511], **kwargs_315512)

# Assigning a type to the variable 'weekdays' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 29), 'weekdays', tuple_call_result_315513)

# Assigning a Subscript to a Name (line 75):

# Obtaining the type of the subscript
int_315514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 0), 'int')
# Getting the type of 'weekdays' (line 75)
weekdays_315515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 29), 'weekdays')
# Obtaining the member '__getitem__' of a type (line 75)
getitem___315516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 0), weekdays_315515, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 75)
subscript_call_result_315517 = invoke(stypy.reporting.localization.Localization(__file__, 75, 0), getitem___315516, int_315514)

# Assigning a type to the variable 'tuple_var_assignment_315058' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315058', subscript_call_result_315517)

# Assigning a Subscript to a Name (line 75):

# Obtaining the type of the subscript
int_315518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 0), 'int')
# Getting the type of 'weekdays' (line 75)
weekdays_315519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 29), 'weekdays')
# Obtaining the member '__getitem__' of a type (line 75)
getitem___315520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 0), weekdays_315519, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 75)
subscript_call_result_315521 = invoke(stypy.reporting.localization.Localization(__file__, 75, 0), getitem___315520, int_315518)

# Assigning a type to the variable 'tuple_var_assignment_315059' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315059', subscript_call_result_315521)

# Assigning a Subscript to a Name (line 75):

# Obtaining the type of the subscript
int_315522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 0), 'int')
# Getting the type of 'weekdays' (line 75)
weekdays_315523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 29), 'weekdays')
# Obtaining the member '__getitem__' of a type (line 75)
getitem___315524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 0), weekdays_315523, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 75)
subscript_call_result_315525 = invoke(stypy.reporting.localization.Localization(__file__, 75, 0), getitem___315524, int_315522)

# Assigning a type to the variable 'tuple_var_assignment_315060' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315060', subscript_call_result_315525)

# Assigning a Subscript to a Name (line 75):

# Obtaining the type of the subscript
int_315526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 0), 'int')
# Getting the type of 'weekdays' (line 75)
weekdays_315527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 29), 'weekdays')
# Obtaining the member '__getitem__' of a type (line 75)
getitem___315528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 0), weekdays_315527, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 75)
subscript_call_result_315529 = invoke(stypy.reporting.localization.Localization(__file__, 75, 0), getitem___315528, int_315526)

# Assigning a type to the variable 'tuple_var_assignment_315061' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315061', subscript_call_result_315529)

# Assigning a Subscript to a Name (line 75):

# Obtaining the type of the subscript
int_315530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 0), 'int')
# Getting the type of 'weekdays' (line 75)
weekdays_315531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 29), 'weekdays')
# Obtaining the member '__getitem__' of a type (line 75)
getitem___315532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 0), weekdays_315531, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 75)
subscript_call_result_315533 = invoke(stypy.reporting.localization.Localization(__file__, 75, 0), getitem___315532, int_315530)

# Assigning a type to the variable 'tuple_var_assignment_315062' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315062', subscript_call_result_315533)

# Assigning a Subscript to a Name (line 75):

# Obtaining the type of the subscript
int_315534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 0), 'int')
# Getting the type of 'weekdays' (line 75)
weekdays_315535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 29), 'weekdays')
# Obtaining the member '__getitem__' of a type (line 75)
getitem___315536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 0), weekdays_315535, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 75)
subscript_call_result_315537 = invoke(stypy.reporting.localization.Localization(__file__, 75, 0), getitem___315536, int_315534)

# Assigning a type to the variable 'tuple_var_assignment_315063' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315063', subscript_call_result_315537)

# Assigning a Subscript to a Name (line 75):

# Obtaining the type of the subscript
int_315538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 0), 'int')
# Getting the type of 'weekdays' (line 75)
weekdays_315539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 29), 'weekdays')
# Obtaining the member '__getitem__' of a type (line 75)
getitem___315540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 0), weekdays_315539, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 75)
subscript_call_result_315541 = invoke(stypy.reporting.localization.Localization(__file__, 75, 0), getitem___315540, int_315538)

# Assigning a type to the variable 'tuple_var_assignment_315064' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315064', subscript_call_result_315541)

# Assigning a Name to a Name (line 75):
# Getting the type of 'tuple_var_assignment_315058' (line 75)
tuple_var_assignment_315058_315542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315058')
# Assigning a type to the variable 'MO' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'MO', tuple_var_assignment_315058_315542)

# Assigning a Name to a Name (line 75):
# Getting the type of 'tuple_var_assignment_315059' (line 75)
tuple_var_assignment_315059_315543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315059')
# Assigning a type to the variable 'TU' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 4), 'TU', tuple_var_assignment_315059_315543)

# Assigning a Name to a Name (line 75):
# Getting the type of 'tuple_var_assignment_315060' (line 75)
tuple_var_assignment_315060_315544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315060')
# Assigning a type to the variable 'WE' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 8), 'WE', tuple_var_assignment_315060_315544)

# Assigning a Name to a Name (line 75):
# Getting the type of 'tuple_var_assignment_315061' (line 75)
tuple_var_assignment_315061_315545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315061')
# Assigning a type to the variable 'TH' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 12), 'TH', tuple_var_assignment_315061_315545)

# Assigning a Name to a Name (line 75):
# Getting the type of 'tuple_var_assignment_315062' (line 75)
tuple_var_assignment_315062_315546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315062')
# Assigning a type to the variable 'FR' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 16), 'FR', tuple_var_assignment_315062_315546)

# Assigning a Name to a Name (line 75):
# Getting the type of 'tuple_var_assignment_315063' (line 75)
tuple_var_assignment_315063_315547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315063')
# Assigning a type to the variable 'SA' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 20), 'SA', tuple_var_assignment_315063_315547)

# Assigning a Name to a Name (line 75):
# Getting the type of 'tuple_var_assignment_315064' (line 75)
tuple_var_assignment_315064_315548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 0), 'tuple_var_assignment_315064')
# Assigning a type to the variable 'SU' (line 75)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 24), 'SU', tuple_var_assignment_315064_315548)

@norecursion
def _invalidates_cache(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_invalidates_cache'
    module_type_store = module_type_store.open_function_context('_invalidates_cache', 78, 0, False)
    
    # Passed parameters checking function
    _invalidates_cache.stypy_localization = localization
    _invalidates_cache.stypy_type_of_self = None
    _invalidates_cache.stypy_type_store = module_type_store
    _invalidates_cache.stypy_function_name = '_invalidates_cache'
    _invalidates_cache.stypy_param_names_list = ['f']
    _invalidates_cache.stypy_varargs_param_name = None
    _invalidates_cache.stypy_kwargs_param_name = None
    _invalidates_cache.stypy_call_defaults = defaults
    _invalidates_cache.stypy_call_varargs = varargs
    _invalidates_cache.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_invalidates_cache', ['f'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_invalidates_cache', localization, ['f'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_invalidates_cache(...)' code ##################

    str_315549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, (-1)), 'str', '\n    Decorator for rruleset methods which may invalidate the\n    cached length.\n    ')

    @norecursion
    def inner_func(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'inner_func'
        module_type_store = module_type_store.open_function_context('inner_func', 83, 4, False)
        
        # Passed parameters checking function
        inner_func.stypy_localization = localization
        inner_func.stypy_type_of_self = None
        inner_func.stypy_type_store = module_type_store
        inner_func.stypy_function_name = 'inner_func'
        inner_func.stypy_param_names_list = ['self']
        inner_func.stypy_varargs_param_name = 'args'
        inner_func.stypy_kwargs_param_name = 'kwargs'
        inner_func.stypy_call_defaults = defaults
        inner_func.stypy_call_varargs = varargs
        inner_func.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'inner_func', ['self'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'inner_func', localization, ['self'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'inner_func(...)' code ##################

        
        # Assigning a Call to a Name (line 84):
        
        # Assigning a Call to a Name (line 84):
        
        # Call to f(...): (line 84)
        # Processing the call arguments (line 84)
        # Getting the type of 'self' (line 84)
        self_315551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 15), 'self', False)
        # Getting the type of 'args' (line 84)
        args_315552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 22), 'args', False)
        # Processing the call keyword arguments (line 84)
        # Getting the type of 'kwargs' (line 84)
        kwargs_315553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 30), 'kwargs', False)
        kwargs_315554 = {'kwargs_315553': kwargs_315553}
        # Getting the type of 'f' (line 84)
        f_315550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 13), 'f', False)
        # Calling f(args, kwargs) (line 84)
        f_call_result_315555 = invoke(stypy.reporting.localization.Localization(__file__, 84, 13), f_315550, *[self_315551, args_315552], **kwargs_315554)
        
        # Assigning a type to the variable 'rv' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 8), 'rv', f_call_result_315555)
        
        # Call to _invalidate_cache(...): (line 85)
        # Processing the call keyword arguments (line 85)
        kwargs_315558 = {}
        # Getting the type of 'self' (line 85)
        self_315556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'self', False)
        # Obtaining the member '_invalidate_cache' of a type (line 85)
        _invalidate_cache_315557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 8), self_315556, '_invalidate_cache')
        # Calling _invalidate_cache(args, kwargs) (line 85)
        _invalidate_cache_call_result_315559 = invoke(stypy.reporting.localization.Localization(__file__, 85, 8), _invalidate_cache_315557, *[], **kwargs_315558)
        
        # Getting the type of 'rv' (line 86)
        rv_315560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 15), 'rv')
        # Assigning a type to the variable 'stypy_return_type' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'stypy_return_type', rv_315560)
        
        # ################# End of 'inner_func(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'inner_func' in the type store
        # Getting the type of 'stypy_return_type' (line 83)
        stypy_return_type_315561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315561)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'inner_func'
        return stypy_return_type_315561

    # Assigning a type to the variable 'inner_func' (line 83)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 4), 'inner_func', inner_func)
    # Getting the type of 'inner_func' (line 88)
    inner_func_315562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 11), 'inner_func')
    # Assigning a type to the variable 'stypy_return_type' (line 88)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 4), 'stypy_return_type', inner_func_315562)
    
    # ################# End of '_invalidates_cache(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_invalidates_cache' in the type store
    # Getting the type of 'stypy_return_type' (line 78)
    stypy_return_type_315563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_315563)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_invalidates_cache'
    return stypy_return_type_315563

# Assigning a type to the variable '_invalidates_cache' (line 78)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 0), '_invalidates_cache', _invalidates_cache)
# Declaration of the 'rrulebase' class

class rrulebase(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 92)
        False_315564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 29), 'False')
        defaults = [False_315564]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 92, 4, False)
        # Assigning a type to the variable 'self' (line 93)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.__init__', ['cache'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['cache'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Getting the type of 'cache' (line 93)
        cache_315565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 11), 'cache')
        # Testing the type of an if condition (line 93)
        if_condition_315566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 93, 8), cache_315565)
        # Assigning a type to the variable 'if_condition_315566' (line 93)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 8), 'if_condition_315566', if_condition_315566)
        # SSA begins for if statement (line 93)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Attribute (line 94):
        
        # Assigning a List to a Attribute (line 94):
        
        # Obtaining an instance of the builtin type 'list' (line 94)
        list_315567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 94)
        
        # Getting the type of 'self' (line 94)
        self_315568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 12), 'self')
        # Setting the type of the member '_cache' of a type (line 94)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 12), self_315568, '_cache', list_315567)
        
        # Assigning a Call to a Attribute (line 95):
        
        # Assigning a Call to a Attribute (line 95):
        
        # Call to allocate_lock(...): (line 95)
        # Processing the call keyword arguments (line 95)
        kwargs_315571 = {}
        # Getting the type of '_thread' (line 95)
        _thread_315569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 31), '_thread', False)
        # Obtaining the member 'allocate_lock' of a type (line 95)
        allocate_lock_315570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 31), _thread_315569, 'allocate_lock')
        # Calling allocate_lock(args, kwargs) (line 95)
        allocate_lock_call_result_315572 = invoke(stypy.reporting.localization.Localization(__file__, 95, 31), allocate_lock_315570, *[], **kwargs_315571)
        
        # Getting the type of 'self' (line 95)
        self_315573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 12), 'self')
        # Setting the type of the member '_cache_lock' of a type (line 95)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 12), self_315573, '_cache_lock', allocate_lock_call_result_315572)
        
        # Call to _invalidate_cache(...): (line 96)
        # Processing the call keyword arguments (line 96)
        kwargs_315576 = {}
        # Getting the type of 'self' (line 96)
        self_315574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 12), 'self', False)
        # Obtaining the member '_invalidate_cache' of a type (line 96)
        _invalidate_cache_315575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 12), self_315574, '_invalidate_cache')
        # Calling _invalidate_cache(args, kwargs) (line 96)
        _invalidate_cache_call_result_315577 = invoke(stypy.reporting.localization.Localization(__file__, 96, 12), _invalidate_cache_315575, *[], **kwargs_315576)
        
        # SSA branch for the else part of an if statement (line 93)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 98):
        
        # Assigning a Name to a Attribute (line 98):
        # Getting the type of 'None' (line 98)
        None_315578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 26), 'None')
        # Getting the type of 'self' (line 98)
        self_315579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 12), 'self')
        # Setting the type of the member '_cache' of a type (line 98)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 12), self_315579, '_cache', None_315578)
        
        # Assigning a Name to a Attribute (line 99):
        
        # Assigning a Name to a Attribute (line 99):
        # Getting the type of 'False' (line 99)
        False_315580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 35), 'False')
        # Getting the type of 'self' (line 99)
        self_315581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 12), 'self')
        # Setting the type of the member '_cache_complete' of a type (line 99)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 99, 12), self_315581, '_cache_complete', False_315580)
        
        # Assigning a Name to a Attribute (line 100):
        
        # Assigning a Name to a Attribute (line 100):
        # Getting the type of 'None' (line 100)
        None_315582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 24), 'None')
        # Getting the type of 'self' (line 100)
        self_315583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 12), 'self')
        # Setting the type of the member '_len' of a type (line 100)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 100, 12), self_315583, '_len', None_315582)
        # SSA join for if statement (line 93)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __iter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__iter__'
        module_type_store = module_type_store.open_function_context('__iter__', 102, 4, False)
        # Assigning a type to the variable 'self' (line 103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase.__iter__.__dict__.__setitem__('stypy_localization', localization)
        rrulebase.__iter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase.__iter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase.__iter__.__dict__.__setitem__('stypy_function_name', 'rrulebase.__iter__')
        rrulebase.__iter__.__dict__.__setitem__('stypy_param_names_list', [])
        rrulebase.__iter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase.__iter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase.__iter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase.__iter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase.__iter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase.__iter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.__iter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__iter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__iter__(...)' code ##################

        
        # Getting the type of 'self' (line 103)
        self_315584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 11), 'self')
        # Obtaining the member '_cache_complete' of a type (line 103)
        _cache_complete_315585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 11), self_315584, '_cache_complete')
        # Testing the type of an if condition (line 103)
        if_condition_315586 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 103, 8), _cache_complete_315585)
        # Assigning a type to the variable 'if_condition_315586' (line 103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 8), 'if_condition_315586', if_condition_315586)
        # SSA begins for if statement (line 103)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to iter(...): (line 104)
        # Processing the call arguments (line 104)
        # Getting the type of 'self' (line 104)
        self_315588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 24), 'self', False)
        # Obtaining the member '_cache' of a type (line 104)
        _cache_315589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 24), self_315588, '_cache')
        # Processing the call keyword arguments (line 104)
        kwargs_315590 = {}
        # Getting the type of 'iter' (line 104)
        iter_315587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 19), 'iter', False)
        # Calling iter(args, kwargs) (line 104)
        iter_call_result_315591 = invoke(stypy.reporting.localization.Localization(__file__, 104, 19), iter_315587, *[_cache_315589], **kwargs_315590)
        
        # Assigning a type to the variable 'stypy_return_type' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 12), 'stypy_return_type', iter_call_result_315591)
        # SSA branch for the else part of an if statement (line 103)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 105)
        # Getting the type of 'self' (line 105)
        self_315592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 13), 'self')
        # Obtaining the member '_cache' of a type (line 105)
        _cache_315593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 13), self_315592, '_cache')
        # Getting the type of 'None' (line 105)
        None_315594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 28), 'None')
        
        (may_be_315595, more_types_in_union_315596) = may_be_none(_cache_315593, None_315594)

        if may_be_315595:

            if more_types_in_union_315596:
                # Runtime conditional SSA (line 105)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _iter(...): (line 106)
            # Processing the call keyword arguments (line 106)
            kwargs_315599 = {}
            # Getting the type of 'self' (line 106)
            self_315597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 19), 'self', False)
            # Obtaining the member '_iter' of a type (line 106)
            _iter_315598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 106, 19), self_315597, '_iter')
            # Calling _iter(args, kwargs) (line 106)
            _iter_call_result_315600 = invoke(stypy.reporting.localization.Localization(__file__, 106, 19), _iter_315598, *[], **kwargs_315599)
            
            # Assigning a type to the variable 'stypy_return_type' (line 106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 106, 12), 'stypy_return_type', _iter_call_result_315600)

            if more_types_in_union_315596:
                # Runtime conditional SSA for else branch (line 105)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_315595) or more_types_in_union_315596):
            
            # Call to _iter_cached(...): (line 108)
            # Processing the call keyword arguments (line 108)
            kwargs_315603 = {}
            # Getting the type of 'self' (line 108)
            self_315601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 19), 'self', False)
            # Obtaining the member '_iter_cached' of a type (line 108)
            _iter_cached_315602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 19), self_315601, '_iter_cached')
            # Calling _iter_cached(args, kwargs) (line 108)
            _iter_cached_call_result_315604 = invoke(stypy.reporting.localization.Localization(__file__, 108, 19), _iter_cached_315602, *[], **kwargs_315603)
            
            # Assigning a type to the variable 'stypy_return_type' (line 108)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 12), 'stypy_return_type', _iter_cached_call_result_315604)

            if (may_be_315595 and more_types_in_union_315596):
                # SSA join for if statement (line 105)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 103)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__iter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__iter__' in the type store
        # Getting the type of 'stypy_return_type' (line 102)
        stypy_return_type_315605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315605)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__iter__'
        return stypy_return_type_315605


    @norecursion
    def _invalidate_cache(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_invalidate_cache'
        module_type_store = module_type_store.open_function_context('_invalidate_cache', 110, 4, False)
        # Assigning a type to the variable 'self' (line 111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_localization', localization)
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_function_name', 'rrulebase._invalidate_cache')
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_param_names_list', [])
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase._invalidate_cache.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase._invalidate_cache', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_invalidate_cache', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_invalidate_cache(...)' code ##################

        
        
        # Getting the type of 'self' (line 111)
        self_315606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 11), 'self')
        # Obtaining the member '_cache' of a type (line 111)
        _cache_315607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 111, 11), self_315606, '_cache')
        # Getting the type of 'None' (line 111)
        None_315608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 30), 'None')
        # Applying the binary operator 'isnot' (line 111)
        result_is_not_315609 = python_operator(stypy.reporting.localization.Localization(__file__, 111, 11), 'isnot', _cache_315607, None_315608)
        
        # Testing the type of an if condition (line 111)
        if_condition_315610 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 111, 8), result_is_not_315609)
        # Assigning a type to the variable 'if_condition_315610' (line 111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 8), 'if_condition_315610', if_condition_315610)
        # SSA begins for if statement (line 111)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Attribute (line 112):
        
        # Assigning a List to a Attribute (line 112):
        
        # Obtaining an instance of the builtin type 'list' (line 112)
        list_315611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 112)
        
        # Getting the type of 'self' (line 112)
        self_315612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 12), 'self')
        # Setting the type of the member '_cache' of a type (line 112)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 12), self_315612, '_cache', list_315611)
        
        # Assigning a Name to a Attribute (line 113):
        
        # Assigning a Name to a Attribute (line 113):
        # Getting the type of 'False' (line 113)
        False_315613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 35), 'False')
        # Getting the type of 'self' (line 113)
        self_315614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 12), 'self')
        # Setting the type of the member '_cache_complete' of a type (line 113)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 12), self_315614, '_cache_complete', False_315613)
        
        # Assigning a Call to a Attribute (line 114):
        
        # Assigning a Call to a Attribute (line 114):
        
        # Call to _iter(...): (line 114)
        # Processing the call keyword arguments (line 114)
        kwargs_315617 = {}
        # Getting the type of 'self' (line 114)
        self_315615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 30), 'self', False)
        # Obtaining the member '_iter' of a type (line 114)
        _iter_315616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 30), self_315615, '_iter')
        # Calling _iter(args, kwargs) (line 114)
        _iter_call_result_315618 = invoke(stypy.reporting.localization.Localization(__file__, 114, 30), _iter_315616, *[], **kwargs_315617)
        
        # Getting the type of 'self' (line 114)
        self_315619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 12), 'self')
        # Setting the type of the member '_cache_gen' of a type (line 114)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 12), self_315619, '_cache_gen', _iter_call_result_315618)
        
        
        # Call to locked(...): (line 116)
        # Processing the call keyword arguments (line 116)
        kwargs_315623 = {}
        # Getting the type of 'self' (line 116)
        self_315620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 15), 'self', False)
        # Obtaining the member '_cache_lock' of a type (line 116)
        _cache_lock_315621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 15), self_315620, '_cache_lock')
        # Obtaining the member 'locked' of a type (line 116)
        locked_315622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 15), _cache_lock_315621, 'locked')
        # Calling locked(args, kwargs) (line 116)
        locked_call_result_315624 = invoke(stypy.reporting.localization.Localization(__file__, 116, 15), locked_315622, *[], **kwargs_315623)
        
        # Testing the type of an if condition (line 116)
        if_condition_315625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 116, 12), locked_call_result_315624)
        # Assigning a type to the variable 'if_condition_315625' (line 116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 12), 'if_condition_315625', if_condition_315625)
        # SSA begins for if statement (line 116)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to release(...): (line 117)
        # Processing the call keyword arguments (line 117)
        kwargs_315629 = {}
        # Getting the type of 'self' (line 117)
        self_315626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 16), 'self', False)
        # Obtaining the member '_cache_lock' of a type (line 117)
        _cache_lock_315627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 16), self_315626, '_cache_lock')
        # Obtaining the member 'release' of a type (line 117)
        release_315628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 16), _cache_lock_315627, 'release')
        # Calling release(args, kwargs) (line 117)
        release_call_result_315630 = invoke(stypy.reporting.localization.Localization(__file__, 117, 16), release_315628, *[], **kwargs_315629)
        
        # SSA join for if statement (line 116)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 111)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 119):
        
        # Assigning a Name to a Attribute (line 119):
        # Getting the type of 'None' (line 119)
        None_315631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 20), 'None')
        # Getting the type of 'self' (line 119)
        self_315632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 8), 'self')
        # Setting the type of the member '_len' of a type (line 119)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 8), self_315632, '_len', None_315631)
        
        # ################# End of '_invalidate_cache(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_invalidate_cache' in the type store
        # Getting the type of 'stypy_return_type' (line 110)
        stypy_return_type_315633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315633)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_invalidate_cache'
        return stypy_return_type_315633


    @norecursion
    def _iter_cached(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter_cached'
        module_type_store = module_type_store.open_function_context('_iter_cached', 121, 4, False)
        # Assigning a type to the variable 'self' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase._iter_cached.__dict__.__setitem__('stypy_localization', localization)
        rrulebase._iter_cached.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase._iter_cached.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase._iter_cached.__dict__.__setitem__('stypy_function_name', 'rrulebase._iter_cached')
        rrulebase._iter_cached.__dict__.__setitem__('stypy_param_names_list', [])
        rrulebase._iter_cached.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase._iter_cached.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase._iter_cached.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase._iter_cached.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase._iter_cached.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase._iter_cached.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase._iter_cached', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter_cached', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter_cached(...)' code ##################

        
        # Assigning a Num to a Name (line 122):
        
        # Assigning a Num to a Name (line 122):
        int_315634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 122, 12), 'int')
        # Assigning a type to the variable 'i' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'i', int_315634)
        
        # Assigning a Attribute to a Name (line 123):
        
        # Assigning a Attribute to a Name (line 123):
        # Getting the type of 'self' (line 123)
        self_315635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 14), 'self')
        # Obtaining the member '_cache_gen' of a type (line 123)
        _cache_gen_315636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 14), self_315635, '_cache_gen')
        # Assigning a type to the variable 'gen' (line 123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 8), 'gen', _cache_gen_315636)
        
        # Assigning a Attribute to a Name (line 124):
        
        # Assigning a Attribute to a Name (line 124):
        # Getting the type of 'self' (line 124)
        self_315637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 16), 'self')
        # Obtaining the member '_cache' of a type (line 124)
        _cache_315638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 124, 16), self_315637, '_cache')
        # Assigning a type to the variable 'cache' (line 124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 8), 'cache', _cache_315638)
        
        # Assigning a Attribute to a Name (line 125):
        
        # Assigning a Attribute to a Name (line 125):
        # Getting the type of 'self' (line 125)
        self_315639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 18), 'self')
        # Obtaining the member '_cache_lock' of a type (line 125)
        _cache_lock_315640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 18), self_315639, '_cache_lock')
        # Obtaining the member 'acquire' of a type (line 125)
        acquire_315641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 18), _cache_lock_315640, 'acquire')
        # Assigning a type to the variable 'acquire' (line 125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 8), 'acquire', acquire_315641)
        
        # Assigning a Attribute to a Name (line 126):
        
        # Assigning a Attribute to a Name (line 126):
        # Getting the type of 'self' (line 126)
        self_315642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 18), 'self')
        # Obtaining the member '_cache_lock' of a type (line 126)
        _cache_lock_315643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 18), self_315642, '_cache_lock')
        # Obtaining the member 'release' of a type (line 126)
        release_315644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 18), _cache_lock_315643, 'release')
        # Assigning a type to the variable 'release' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 8), 'release', release_315644)
        
        # Getting the type of 'gen' (line 127)
        gen_315645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 14), 'gen')
        # Testing the type of an if condition (line 127)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 127, 8), gen_315645)
        # SSA begins for while statement (line 127)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        
        # Getting the type of 'i' (line 128)
        i_315646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 15), 'i')
        
        # Call to len(...): (line 128)
        # Processing the call arguments (line 128)
        # Getting the type of 'cache' (line 128)
        cache_315648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 24), 'cache', False)
        # Processing the call keyword arguments (line 128)
        kwargs_315649 = {}
        # Getting the type of 'len' (line 128)
        len_315647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 20), 'len', False)
        # Calling len(args, kwargs) (line 128)
        len_call_result_315650 = invoke(stypy.reporting.localization.Localization(__file__, 128, 20), len_315647, *[cache_315648], **kwargs_315649)
        
        # Applying the binary operator '==' (line 128)
        result_eq_315651 = python_operator(stypy.reporting.localization.Localization(__file__, 128, 15), '==', i_315646, len_call_result_315650)
        
        # Testing the type of an if condition (line 128)
        if_condition_315652 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 128, 12), result_eq_315651)
        # Assigning a type to the variable 'if_condition_315652' (line 128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 128, 12), 'if_condition_315652', if_condition_315652)
        # SSA begins for if statement (line 128)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to acquire(...): (line 129)
        # Processing the call keyword arguments (line 129)
        kwargs_315654 = {}
        # Getting the type of 'acquire' (line 129)
        acquire_315653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 16), 'acquire', False)
        # Calling acquire(args, kwargs) (line 129)
        acquire_call_result_315655 = invoke(stypy.reporting.localization.Localization(__file__, 129, 16), acquire_315653, *[], **kwargs_315654)
        
        
        # Getting the type of 'self' (line 130)
        self_315656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 19), 'self')
        # Obtaining the member '_cache_complete' of a type (line 130)
        _cache_complete_315657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 19), self_315656, '_cache_complete')
        # Testing the type of an if condition (line 130)
        if_condition_315658 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 130, 16), _cache_complete_315657)
        # Assigning a type to the variable 'if_condition_315658' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 16), 'if_condition_315658', if_condition_315658)
        # SSA begins for if statement (line 130)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 130)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 132)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        # Call to range(...): (line 133)
        # Processing the call arguments (line 133)
        int_315660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, 35), 'int')
        # Processing the call keyword arguments (line 133)
        kwargs_315661 = {}
        # Getting the type of 'range' (line 133)
        range_315659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 29), 'range', False)
        # Calling range(args, kwargs) (line 133)
        range_call_result_315662 = invoke(stypy.reporting.localization.Localization(__file__, 133, 29), range_315659, *[int_315660], **kwargs_315661)
        
        # Testing the type of a for loop iterable (line 133)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 133, 20), range_call_result_315662)
        # Getting the type of the for loop variable (line 133)
        for_loop_var_315663 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 133, 20), range_call_result_315662)
        # Assigning a type to the variable 'j' (line 133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 20), 'j', for_loop_var_315663)
        # SSA begins for a for statement (line 133)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 134)
        # Processing the call arguments (line 134)
        
        # Call to advance_iterator(...): (line 134)
        # Processing the call arguments (line 134)
        # Getting the type of 'gen' (line 134)
        gen_315667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 54), 'gen', False)
        # Processing the call keyword arguments (line 134)
        kwargs_315668 = {}
        # Getting the type of 'advance_iterator' (line 134)
        advance_iterator_315666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 37), 'advance_iterator', False)
        # Calling advance_iterator(args, kwargs) (line 134)
        advance_iterator_call_result_315669 = invoke(stypy.reporting.localization.Localization(__file__, 134, 37), advance_iterator_315666, *[gen_315667], **kwargs_315668)
        
        # Processing the call keyword arguments (line 134)
        kwargs_315670 = {}
        # Getting the type of 'cache' (line 134)
        cache_315664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 24), 'cache', False)
        # Obtaining the member 'append' of a type (line 134)
        append_315665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 24), cache_315664, 'append')
        # Calling append(args, kwargs) (line 134)
        append_call_result_315671 = invoke(stypy.reporting.localization.Localization(__file__, 134, 24), append_315665, *[advance_iterator_call_result_315669], **kwargs_315670)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 132)
        # SSA branch for the except 'StopIteration' branch of a try statement (line 132)
        module_type_store.open_ssa_branch('except')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Name to a Name (line 136):
        # Getting the type of 'None' (line 136)
        None_315672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 44), 'None')
        # Assigning a type to the variable 'gen' (line 136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 38), 'gen', None_315672)
        
        # Assigning a Name to a Attribute (line 136):
        # Getting the type of 'gen' (line 136)
        gen_315673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 38), 'gen')
        # Getting the type of 'self' (line 136)
        self_315674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 20), 'self')
        # Setting the type of the member '_cache_gen' of a type (line 136)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 20), self_315674, '_cache_gen', gen_315673)
        
        # Assigning a Name to a Attribute (line 137):
        
        # Assigning a Name to a Attribute (line 137):
        # Getting the type of 'True' (line 137)
        True_315675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 43), 'True')
        # Getting the type of 'self' (line 137)
        self_315676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 20), 'self')
        # Setting the type of the member '_cache_complete' of a type (line 137)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 20), self_315676, '_cache_complete', True_315675)
        # SSA join for try-except statement (line 132)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to release(...): (line 139)
        # Processing the call keyword arguments (line 139)
        kwargs_315678 = {}
        # Getting the type of 'release' (line 139)
        release_315677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 16), 'release', False)
        # Calling release(args, kwargs) (line 139)
        release_call_result_315679 = invoke(stypy.reporting.localization.Localization(__file__, 139, 16), release_315677, *[], **kwargs_315678)
        
        # SSA join for if statement (line 128)
        module_type_store = module_type_store.join_ssa_context()
        
        # Creating a generator
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 140)
        i_315680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 24), 'i')
        # Getting the type of 'cache' (line 140)
        cache_315681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 18), 'cache')
        # Obtaining the member '__getitem__' of a type (line 140)
        getitem___315682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 18), cache_315681, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 140)
        subscript_call_result_315683 = invoke(stypy.reporting.localization.Localization(__file__, 140, 18), getitem___315682, i_315680)
        
        GeneratorType_315684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 140, 12), GeneratorType_315684, subscript_call_result_315683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 12), 'stypy_return_type', GeneratorType_315684)
        
        # Getting the type of 'i' (line 141)
        i_315685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 12), 'i')
        int_315686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 17), 'int')
        # Applying the binary operator '+=' (line 141)
        result_iadd_315687 = python_operator(stypy.reporting.localization.Localization(__file__, 141, 12), '+=', i_315685, int_315686)
        # Assigning a type to the variable 'i' (line 141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 12), 'i', result_iadd_315687)
        
        # SSA join for while statement (line 127)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'i' (line 142)
        i_315688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 14), 'i')
        # Getting the type of 'self' (line 142)
        self_315689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 18), 'self')
        # Obtaining the member '_len' of a type (line 142)
        _len_315690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 18), self_315689, '_len')
        # Applying the binary operator '<' (line 142)
        result_lt_315691 = python_operator(stypy.reporting.localization.Localization(__file__, 142, 14), '<', i_315688, _len_315690)
        
        # Testing the type of an if condition (line 142)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 142, 8), result_lt_315691)
        # SSA begins for while statement (line 142)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        # Creating a generator
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 143)
        i_315692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 24), 'i')
        # Getting the type of 'cache' (line 143)
        cache_315693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 18), 'cache')
        # Obtaining the member '__getitem__' of a type (line 143)
        getitem___315694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 18), cache_315693, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 143)
        subscript_call_result_315695 = invoke(stypy.reporting.localization.Localization(__file__, 143, 18), getitem___315694, i_315692)
        
        GeneratorType_315696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 143, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 143, 12), GeneratorType_315696, subscript_call_result_315695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 12), 'stypy_return_type', GeneratorType_315696)
        
        # Getting the type of 'i' (line 144)
        i_315697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 12), 'i')
        int_315698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 17), 'int')
        # Applying the binary operator '+=' (line 144)
        result_iadd_315699 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 12), '+=', i_315697, int_315698)
        # Assigning a type to the variable 'i' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 12), 'i', result_iadd_315699)
        
        # SSA join for while statement (line 142)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_iter_cached(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter_cached' in the type store
        # Getting the type of 'stypy_return_type' (line 121)
        stypy_return_type_315700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315700)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter_cached'
        return stypy_return_type_315700


    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 146, 4, False)
        # Assigning a type to the variable 'self' (line 147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        rrulebase.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase.__getitem__.__dict__.__setitem__('stypy_function_name', 'rrulebase.__getitem__')
        rrulebase.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['item'])
        rrulebase.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.__getitem__', ['item'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['item'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        
        # Getting the type of 'self' (line 147)
        self_315701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 11), 'self')
        # Obtaining the member '_cache_complete' of a type (line 147)
        _cache_complete_315702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 11), self_315701, '_cache_complete')
        # Testing the type of an if condition (line 147)
        if_condition_315703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 147, 8), _cache_complete_315702)
        # Assigning a type to the variable 'if_condition_315703' (line 147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 8), 'if_condition_315703', if_condition_315703)
        # SSA begins for if statement (line 147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        # Getting the type of 'item' (line 148)
        item_315704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 31), 'item')
        # Getting the type of 'self' (line 148)
        self_315705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 19), 'self')
        # Obtaining the member '_cache' of a type (line 148)
        _cache_315706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 19), self_315705, '_cache')
        # Obtaining the member '__getitem__' of a type (line 148)
        getitem___315707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 19), _cache_315706, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 148)
        subscript_call_result_315708 = invoke(stypy.reporting.localization.Localization(__file__, 148, 19), getitem___315707, item_315704)
        
        # Assigning a type to the variable 'stypy_return_type' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 12), 'stypy_return_type', subscript_call_result_315708)
        # SSA branch for the else part of an if statement (line 147)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 149)
        # Getting the type of 'slice' (line 149)
        slice_315709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 30), 'slice')
        # Getting the type of 'item' (line 149)
        item_315710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 24), 'item')
        
        (may_be_315711, more_types_in_union_315712) = may_be_subtype(slice_315709, item_315710)

        if may_be_315711:

            if more_types_in_union_315712:
                # Runtime conditional SSA (line 149)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'item' (line 149)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 13), 'item', remove_not_subtype_from_union(item_315710, slice))
            
            
            # Evaluating a boolean operation
            # Getting the type of 'item' (line 150)
            item_315713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 15), 'item')
            # Obtaining the member 'step' of a type (line 150)
            step_315714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 15), item_315713, 'step')
            
            # Getting the type of 'item' (line 150)
            item_315715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 29), 'item')
            # Obtaining the member 'step' of a type (line 150)
            step_315716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 29), item_315715, 'step')
            int_315717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 41), 'int')
            # Applying the binary operator '<' (line 150)
            result_lt_315718 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 29), '<', step_315716, int_315717)
            
            # Applying the binary operator 'and' (line 150)
            result_and_keyword_315719 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 15), 'and', step_315714, result_lt_315718)
            
            # Testing the type of an if condition (line 150)
            if_condition_315720 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 150, 12), result_and_keyword_315719)
            # Assigning a type to the variable 'if_condition_315720' (line 150)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 12), 'if_condition_315720', if_condition_315720)
            # SSA begins for if statement (line 150)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Obtaining the type of the subscript
            # Getting the type of 'item' (line 151)
            item_315721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 40), 'item')
            
            # Call to list(...): (line 151)
            # Processing the call arguments (line 151)
            
            # Call to iter(...): (line 151)
            # Processing the call arguments (line 151)
            # Getting the type of 'self' (line 151)
            self_315724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 33), 'self', False)
            # Processing the call keyword arguments (line 151)
            kwargs_315725 = {}
            # Getting the type of 'iter' (line 151)
            iter_315723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 28), 'iter', False)
            # Calling iter(args, kwargs) (line 151)
            iter_call_result_315726 = invoke(stypy.reporting.localization.Localization(__file__, 151, 28), iter_315723, *[self_315724], **kwargs_315725)
            
            # Processing the call keyword arguments (line 151)
            kwargs_315727 = {}
            # Getting the type of 'list' (line 151)
            list_315722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 23), 'list', False)
            # Calling list(args, kwargs) (line 151)
            list_call_result_315728 = invoke(stypy.reporting.localization.Localization(__file__, 151, 23), list_315722, *[iter_call_result_315726], **kwargs_315727)
            
            # Obtaining the member '__getitem__' of a type (line 151)
            getitem___315729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 23), list_call_result_315728, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 151)
            subscript_call_result_315730 = invoke(stypy.reporting.localization.Localization(__file__, 151, 23), getitem___315729, item_315721)
            
            # Assigning a type to the variable 'stypy_return_type' (line 151)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 16), 'stypy_return_type', subscript_call_result_315730)
            # SSA branch for the else part of an if statement (line 150)
            module_type_store.open_ssa_branch('else')
            
            # Call to list(...): (line 153)
            # Processing the call arguments (line 153)
            
            # Call to islice(...): (line 153)
            # Processing the call arguments (line 153)
            # Getting the type of 'self' (line 153)
            self_315734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 45), 'self', False)
            
            # Evaluating a boolean operation
            # Getting the type of 'item' (line 154)
            item_315735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 45), 'item', False)
            # Obtaining the member 'start' of a type (line 154)
            start_315736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 45), item_315735, 'start')
            int_315737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 59), 'int')
            # Applying the binary operator 'or' (line 154)
            result_or_keyword_315738 = python_operator(stypy.reporting.localization.Localization(__file__, 154, 45), 'or', start_315736, int_315737)
            
            
            # Evaluating a boolean operation
            # Getting the type of 'item' (line 155)
            item_315739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 45), 'item', False)
            # Obtaining the member 'stop' of a type (line 155)
            stop_315740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 45), item_315739, 'stop')
            # Getting the type of 'sys' (line 155)
            sys_315741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 58), 'sys', False)
            # Obtaining the member 'maxsize' of a type (line 155)
            maxsize_315742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 58), sys_315741, 'maxsize')
            # Applying the binary operator 'or' (line 155)
            result_or_keyword_315743 = python_operator(stypy.reporting.localization.Localization(__file__, 155, 45), 'or', stop_315740, maxsize_315742)
            
            
            # Evaluating a boolean operation
            # Getting the type of 'item' (line 156)
            item_315744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 45), 'item', False)
            # Obtaining the member 'step' of a type (line 156)
            step_315745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 45), item_315744, 'step')
            int_315746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 58), 'int')
            # Applying the binary operator 'or' (line 156)
            result_or_keyword_315747 = python_operator(stypy.reporting.localization.Localization(__file__, 156, 45), 'or', step_315745, int_315746)
            
            # Processing the call keyword arguments (line 153)
            kwargs_315748 = {}
            # Getting the type of 'itertools' (line 153)
            itertools_315732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 28), 'itertools', False)
            # Obtaining the member 'islice' of a type (line 153)
            islice_315733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 28), itertools_315732, 'islice')
            # Calling islice(args, kwargs) (line 153)
            islice_call_result_315749 = invoke(stypy.reporting.localization.Localization(__file__, 153, 28), islice_315733, *[self_315734, result_or_keyword_315738, result_or_keyword_315743, result_or_keyword_315747], **kwargs_315748)
            
            # Processing the call keyword arguments (line 153)
            kwargs_315750 = {}
            # Getting the type of 'list' (line 153)
            list_315731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 23), 'list', False)
            # Calling list(args, kwargs) (line 153)
            list_call_result_315751 = invoke(stypy.reporting.localization.Localization(__file__, 153, 23), list_315731, *[islice_call_result_315749], **kwargs_315750)
            
            # Assigning a type to the variable 'stypy_return_type' (line 153)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 16), 'stypy_return_type', list_call_result_315751)
            # SSA join for if statement (line 150)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_315712:
                # Runtime conditional SSA for else branch (line 149)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_315711) or more_types_in_union_315712):
            # Assigning a type to the variable 'item' (line 149)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 13), 'item', remove_subtype_from_union(item_315710, slice))
            
            
            # Getting the type of 'item' (line 157)
            item_315752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 13), 'item')
            int_315753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 21), 'int')
            # Applying the binary operator '>=' (line 157)
            result_ge_315754 = python_operator(stypy.reporting.localization.Localization(__file__, 157, 13), '>=', item_315752, int_315753)
            
            # Testing the type of an if condition (line 157)
            if_condition_315755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 157, 13), result_ge_315754)
            # Assigning a type to the variable 'if_condition_315755' (line 157)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 13), 'if_condition_315755', if_condition_315755)
            # SSA begins for if statement (line 157)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 158):
            
            # Assigning a Call to a Name (line 158):
            
            # Call to iter(...): (line 158)
            # Processing the call arguments (line 158)
            # Getting the type of 'self' (line 158)
            self_315757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 23), 'self', False)
            # Processing the call keyword arguments (line 158)
            kwargs_315758 = {}
            # Getting the type of 'iter' (line 158)
            iter_315756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 18), 'iter', False)
            # Calling iter(args, kwargs) (line 158)
            iter_call_result_315759 = invoke(stypy.reporting.localization.Localization(__file__, 158, 18), iter_315756, *[self_315757], **kwargs_315758)
            
            # Assigning a type to the variable 'gen' (line 158)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'gen', iter_call_result_315759)
            
            
            # SSA begins for try-except statement (line 159)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            
            # Call to range(...): (line 160)
            # Processing the call arguments (line 160)
            # Getting the type of 'item' (line 160)
            item_315761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 31), 'item', False)
            int_315762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 36), 'int')
            # Applying the binary operator '+' (line 160)
            result_add_315763 = python_operator(stypy.reporting.localization.Localization(__file__, 160, 31), '+', item_315761, int_315762)
            
            # Processing the call keyword arguments (line 160)
            kwargs_315764 = {}
            # Getting the type of 'range' (line 160)
            range_315760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 25), 'range', False)
            # Calling range(args, kwargs) (line 160)
            range_call_result_315765 = invoke(stypy.reporting.localization.Localization(__file__, 160, 25), range_315760, *[result_add_315763], **kwargs_315764)
            
            # Testing the type of a for loop iterable (line 160)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 160, 16), range_call_result_315765)
            # Getting the type of the for loop variable (line 160)
            for_loop_var_315766 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 160, 16), range_call_result_315765)
            # Assigning a type to the variable 'i' (line 160)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 16), 'i', for_loop_var_315766)
            # SSA begins for a for statement (line 160)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Call to a Name (line 161):
            
            # Assigning a Call to a Name (line 161):
            
            # Call to advance_iterator(...): (line 161)
            # Processing the call arguments (line 161)
            # Getting the type of 'gen' (line 161)
            gen_315768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 43), 'gen', False)
            # Processing the call keyword arguments (line 161)
            kwargs_315769 = {}
            # Getting the type of 'advance_iterator' (line 161)
            advance_iterator_315767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 26), 'advance_iterator', False)
            # Calling advance_iterator(args, kwargs) (line 161)
            advance_iterator_call_result_315770 = invoke(stypy.reporting.localization.Localization(__file__, 161, 26), advance_iterator_315767, *[gen_315768], **kwargs_315769)
            
            # Assigning a type to the variable 'res' (line 161)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 161, 20), 'res', advance_iterator_call_result_315770)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the except part of a try statement (line 159)
            # SSA branch for the except 'StopIteration' branch of a try statement (line 159)
            module_type_store.open_ssa_branch('except')
            # Getting the type of 'IndexError' (line 163)
            IndexError_315771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 22), 'IndexError')
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 163, 16), IndexError_315771, 'raise parameter', BaseException)
            # SSA join for try-except statement (line 159)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'res' (line 164)
            res_315772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 19), 'res')
            # Assigning a type to the variable 'stypy_return_type' (line 164)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'stypy_return_type', res_315772)
            # SSA branch for the else part of an if statement (line 157)
            module_type_store.open_ssa_branch('else')
            
            # Obtaining the type of the subscript
            # Getting the type of 'item' (line 166)
            item_315773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 36), 'item')
            
            # Call to list(...): (line 166)
            # Processing the call arguments (line 166)
            
            # Call to iter(...): (line 166)
            # Processing the call arguments (line 166)
            # Getting the type of 'self' (line 166)
            self_315776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 29), 'self', False)
            # Processing the call keyword arguments (line 166)
            kwargs_315777 = {}
            # Getting the type of 'iter' (line 166)
            iter_315775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 24), 'iter', False)
            # Calling iter(args, kwargs) (line 166)
            iter_call_result_315778 = invoke(stypy.reporting.localization.Localization(__file__, 166, 24), iter_315775, *[self_315776], **kwargs_315777)
            
            # Processing the call keyword arguments (line 166)
            kwargs_315779 = {}
            # Getting the type of 'list' (line 166)
            list_315774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 19), 'list', False)
            # Calling list(args, kwargs) (line 166)
            list_call_result_315780 = invoke(stypy.reporting.localization.Localization(__file__, 166, 19), list_315774, *[iter_call_result_315778], **kwargs_315779)
            
            # Obtaining the member '__getitem__' of a type (line 166)
            getitem___315781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 19), list_call_result_315780, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 166)
            subscript_call_result_315782 = invoke(stypy.reporting.localization.Localization(__file__, 166, 19), getitem___315781, item_315773)
            
            # Assigning a type to the variable 'stypy_return_type' (line 166)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 12), 'stypy_return_type', subscript_call_result_315782)
            # SSA join for if statement (line 157)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_315711 and more_types_in_union_315712):
                # SSA join for if statement (line 149)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 147)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 146)
        stypy_return_type_315783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315783)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_315783


    @norecursion
    def __contains__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__contains__'
        module_type_store = module_type_store.open_function_context('__contains__', 168, 4, False)
        # Assigning a type to the variable 'self' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase.__contains__.__dict__.__setitem__('stypy_localization', localization)
        rrulebase.__contains__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase.__contains__.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase.__contains__.__dict__.__setitem__('stypy_function_name', 'rrulebase.__contains__')
        rrulebase.__contains__.__dict__.__setitem__('stypy_param_names_list', ['item'])
        rrulebase.__contains__.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase.__contains__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase.__contains__.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase.__contains__.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase.__contains__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase.__contains__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.__contains__', ['item'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__contains__', localization, ['item'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__contains__(...)' code ##################

        
        # Getting the type of 'self' (line 169)
        self_315784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 11), 'self')
        # Obtaining the member '_cache_complete' of a type (line 169)
        _cache_complete_315785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 11), self_315784, '_cache_complete')
        # Testing the type of an if condition (line 169)
        if_condition_315786 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 169, 8), _cache_complete_315785)
        # Assigning a type to the variable 'if_condition_315786' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 8), 'if_condition_315786', if_condition_315786)
        # SSA begins for if statement (line 169)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'item' (line 170)
        item_315787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 19), 'item')
        # Getting the type of 'self' (line 170)
        self_315788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 27), 'self')
        # Obtaining the member '_cache' of a type (line 170)
        _cache_315789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 27), self_315788, '_cache')
        # Applying the binary operator 'in' (line 170)
        result_contains_315790 = python_operator(stypy.reporting.localization.Localization(__file__, 170, 19), 'in', item_315787, _cache_315789)
        
        # Assigning a type to the variable 'stypy_return_type' (line 170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 12), 'stypy_return_type', result_contains_315790)
        # SSA branch for the else part of an if statement (line 169)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 172)
        self_315791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 21), 'self')
        # Testing the type of a for loop iterable (line 172)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 172, 12), self_315791)
        # Getting the type of the for loop variable (line 172)
        for_loop_var_315792 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 172, 12), self_315791)
        # Assigning a type to the variable 'i' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'i', for_loop_var_315792)
        # SSA begins for a for statement (line 172)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 173)
        i_315793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 19), 'i')
        # Getting the type of 'item' (line 173)
        item_315794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 24), 'item')
        # Applying the binary operator '==' (line 173)
        result_eq_315795 = python_operator(stypy.reporting.localization.Localization(__file__, 173, 19), '==', i_315793, item_315794)
        
        # Testing the type of an if condition (line 173)
        if_condition_315796 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 173, 16), result_eq_315795)
        # Assigning a type to the variable 'if_condition_315796' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 16), 'if_condition_315796', if_condition_315796)
        # SSA begins for if statement (line 173)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 174)
        True_315797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 27), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 20), 'stypy_return_type', True_315797)
        # SSA branch for the else part of an if statement (line 173)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'i' (line 175)
        i_315798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 21), 'i')
        # Getting the type of 'item' (line 175)
        item_315799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 25), 'item')
        # Applying the binary operator '>' (line 175)
        result_gt_315800 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 21), '>', i_315798, item_315799)
        
        # Testing the type of an if condition (line 175)
        if_condition_315801 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 175, 21), result_gt_315800)
        # Assigning a type to the variable 'if_condition_315801' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 21), 'if_condition_315801', if_condition_315801)
        # SSA begins for if statement (line 175)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 176)
        False_315802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 27), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 20), 'stypy_return_type', False_315802)
        # SSA join for if statement (line 175)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 173)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 169)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 177)
        False_315803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 8), 'stypy_return_type', False_315803)
        
        # ################# End of '__contains__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__contains__' in the type store
        # Getting the type of 'stypy_return_type' (line 168)
        stypy_return_type_315804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315804)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__contains__'
        return stypy_return_type_315804


    @norecursion
    def count(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'count'
        module_type_store = module_type_store.open_function_context('count', 180, 4, False)
        # Assigning a type to the variable 'self' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase.count.__dict__.__setitem__('stypy_localization', localization)
        rrulebase.count.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase.count.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase.count.__dict__.__setitem__('stypy_function_name', 'rrulebase.count')
        rrulebase.count.__dict__.__setitem__('stypy_param_names_list', [])
        rrulebase.count.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase.count.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase.count.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase.count.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase.count.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase.count.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.count', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'count', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'count(...)' code ##################

        str_315805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, (-1)), 'str', " Returns the number of recurrences in this set. It will have go\n            trough the whole recurrence, if this hasn't been done before. ")
        
        # Type idiom detected: calculating its left and rigth part (line 183)
        # Getting the type of 'self' (line 183)
        self_315806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 11), 'self')
        # Obtaining the member '_len' of a type (line 183)
        _len_315807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 11), self_315806, '_len')
        # Getting the type of 'None' (line 183)
        None_315808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 24), 'None')
        
        (may_be_315809, more_types_in_union_315810) = may_be_none(_len_315807, None_315808)

        if may_be_315809:

            if more_types_in_union_315810:
                # Runtime conditional SSA (line 183)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'self' (line 184)
            self_315811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 21), 'self')
            # Testing the type of a for loop iterable (line 184)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 184, 12), self_315811)
            # Getting the type of the for loop variable (line 184)
            for_loop_var_315812 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 184, 12), self_315811)
            # Assigning a type to the variable 'x' (line 184)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 12), 'x', for_loop_var_315812)
            # SSA begins for a for statement (line 184)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            pass
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_315810:
                # SSA join for if statement (line 183)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 186)
        self_315813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 15), 'self')
        # Obtaining the member '_len' of a type (line 186)
        _len_315814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 186, 15), self_315813, '_len')
        # Assigning a type to the variable 'stypy_return_type' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'stypy_return_type', _len_315814)
        
        # ################# End of 'count(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'count' in the type store
        # Getting the type of 'stypy_return_type' (line 180)
        stypy_return_type_315815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315815)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'count'
        return stypy_return_type_315815


    @norecursion
    def before(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 188)
        False_315816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 29), 'False')
        defaults = [False_315816]
        # Create a new context for function 'before'
        module_type_store = module_type_store.open_function_context('before', 188, 4, False)
        # Assigning a type to the variable 'self' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase.before.__dict__.__setitem__('stypy_localization', localization)
        rrulebase.before.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase.before.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase.before.__dict__.__setitem__('stypy_function_name', 'rrulebase.before')
        rrulebase.before.__dict__.__setitem__('stypy_param_names_list', ['dt', 'inc'])
        rrulebase.before.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase.before.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase.before.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase.before.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase.before.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase.before.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.before', ['dt', 'inc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'before', localization, ['dt', 'inc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'before(...)' code ##################

        str_315817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, (-1)), 'str', ' Returns the last recurrence before the given datetime instance. The\n            inc keyword defines what happens if dt is an occurrence. With\n            inc=True, if dt itself is an occurrence, it will be returned. ')
        
        # Getting the type of 'self' (line 192)
        self_315818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 11), 'self')
        # Obtaining the member '_cache_complete' of a type (line 192)
        _cache_complete_315819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 11), self_315818, '_cache_complete')
        # Testing the type of an if condition (line 192)
        if_condition_315820 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 192, 8), _cache_complete_315819)
        # Assigning a type to the variable 'if_condition_315820' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'if_condition_315820', if_condition_315820)
        # SSA begins for if statement (line 192)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 193):
        
        # Assigning a Attribute to a Name (line 193):
        # Getting the type of 'self' (line 193)
        self_315821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 18), 'self')
        # Obtaining the member '_cache' of a type (line 193)
        _cache_315822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 18), self_315821, '_cache')
        # Assigning a type to the variable 'gen' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'gen', _cache_315822)
        # SSA branch for the else part of an if statement (line 192)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 195):
        
        # Assigning a Name to a Name (line 195):
        # Getting the type of 'self' (line 195)
        self_315823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 18), 'self')
        # Assigning a type to the variable 'gen' (line 195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'gen', self_315823)
        # SSA join for if statement (line 192)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 196):
        
        # Assigning a Name to a Name (line 196):
        # Getting the type of 'None' (line 196)
        None_315824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 15), 'None')
        # Assigning a type to the variable 'last' (line 196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'last', None_315824)
        
        # Getting the type of 'inc' (line 197)
        inc_315825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 11), 'inc')
        # Testing the type of an if condition (line 197)
        if_condition_315826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 197, 8), inc_315825)
        # Assigning a type to the variable 'if_condition_315826' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'if_condition_315826', if_condition_315826)
        # SSA begins for if statement (line 197)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'gen' (line 198)
        gen_315827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 21), 'gen')
        # Testing the type of a for loop iterable (line 198)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 198, 12), gen_315827)
        # Getting the type of the for loop variable (line 198)
        for_loop_var_315828 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 198, 12), gen_315827)
        # Assigning a type to the variable 'i' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 12), 'i', for_loop_var_315828)
        # SSA begins for a for statement (line 198)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 199)
        i_315829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 19), 'i')
        # Getting the type of 'dt' (line 199)
        dt_315830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 23), 'dt')
        # Applying the binary operator '>' (line 199)
        result_gt_315831 = python_operator(stypy.reporting.localization.Localization(__file__, 199, 19), '>', i_315829, dt_315830)
        
        # Testing the type of an if condition (line 199)
        if_condition_315832 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 199, 16), result_gt_315831)
        # Assigning a type to the variable 'if_condition_315832' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 16), 'if_condition_315832', if_condition_315832)
        # SSA begins for if statement (line 199)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 199)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 201):
        
        # Assigning a Name to a Name (line 201):
        # Getting the type of 'i' (line 201)
        i_315833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 23), 'i')
        # Assigning a type to the variable 'last' (line 201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 16), 'last', i_315833)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 197)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'gen' (line 203)
        gen_315834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 21), 'gen')
        # Testing the type of a for loop iterable (line 203)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 203, 12), gen_315834)
        # Getting the type of the for loop variable (line 203)
        for_loop_var_315835 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 203, 12), gen_315834)
        # Assigning a type to the variable 'i' (line 203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 12), 'i', for_loop_var_315835)
        # SSA begins for a for statement (line 203)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 204)
        i_315836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 19), 'i')
        # Getting the type of 'dt' (line 204)
        dt_315837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 24), 'dt')
        # Applying the binary operator '>=' (line 204)
        result_ge_315838 = python_operator(stypy.reporting.localization.Localization(__file__, 204, 19), '>=', i_315836, dt_315837)
        
        # Testing the type of an if condition (line 204)
        if_condition_315839 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 204, 16), result_ge_315838)
        # Assigning a type to the variable 'if_condition_315839' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 16), 'if_condition_315839', if_condition_315839)
        # SSA begins for if statement (line 204)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 204)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 206):
        
        # Assigning a Name to a Name (line 206):
        # Getting the type of 'i' (line 206)
        i_315840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 23), 'i')
        # Assigning a type to the variable 'last' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 16), 'last', i_315840)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 197)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'last' (line 207)
        last_315841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'last')
        # Assigning a type to the variable 'stypy_return_type' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'stypy_return_type', last_315841)
        
        # ################# End of 'before(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'before' in the type store
        # Getting the type of 'stypy_return_type' (line 188)
        stypy_return_type_315842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315842)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'before'
        return stypy_return_type_315842


    @norecursion
    def after(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 209)
        False_315843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 28), 'False')
        defaults = [False_315843]
        # Create a new context for function 'after'
        module_type_store = module_type_store.open_function_context('after', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase.after.__dict__.__setitem__('stypy_localization', localization)
        rrulebase.after.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase.after.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase.after.__dict__.__setitem__('stypy_function_name', 'rrulebase.after')
        rrulebase.after.__dict__.__setitem__('stypy_param_names_list', ['dt', 'inc'])
        rrulebase.after.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase.after.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase.after.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase.after.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase.after.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase.after.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.after', ['dt', 'inc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'after', localization, ['dt', 'inc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'after(...)' code ##################

        str_315844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, (-1)), 'str', ' Returns the first recurrence after the given datetime instance. The\n            inc keyword defines what happens if dt is an occurrence. With\n            inc=True, if dt itself is an occurrence, it will be returned.  ')
        
        # Getting the type of 'self' (line 213)
        self_315845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 11), 'self')
        # Obtaining the member '_cache_complete' of a type (line 213)
        _cache_complete_315846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 11), self_315845, '_cache_complete')
        # Testing the type of an if condition (line 213)
        if_condition_315847 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 213, 8), _cache_complete_315846)
        # Assigning a type to the variable 'if_condition_315847' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'if_condition_315847', if_condition_315847)
        # SSA begins for if statement (line 213)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 214):
        
        # Assigning a Attribute to a Name (line 214):
        # Getting the type of 'self' (line 214)
        self_315848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 18), 'self')
        # Obtaining the member '_cache' of a type (line 214)
        _cache_315849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 18), self_315848, '_cache')
        # Assigning a type to the variable 'gen' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'gen', _cache_315849)
        # SSA branch for the else part of an if statement (line 213)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 216):
        
        # Assigning a Name to a Name (line 216):
        # Getting the type of 'self' (line 216)
        self_315850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 18), 'self')
        # Assigning a type to the variable 'gen' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 12), 'gen', self_315850)
        # SSA join for if statement (line 213)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'inc' (line 217)
        inc_315851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 11), 'inc')
        # Testing the type of an if condition (line 217)
        if_condition_315852 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 217, 8), inc_315851)
        # Assigning a type to the variable 'if_condition_315852' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'if_condition_315852', if_condition_315852)
        # SSA begins for if statement (line 217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'gen' (line 218)
        gen_315853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 21), 'gen')
        # Testing the type of a for loop iterable (line 218)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 218, 12), gen_315853)
        # Getting the type of the for loop variable (line 218)
        for_loop_var_315854 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 218, 12), gen_315853)
        # Assigning a type to the variable 'i' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 12), 'i', for_loop_var_315854)
        # SSA begins for a for statement (line 218)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 219)
        i_315855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 19), 'i')
        # Getting the type of 'dt' (line 219)
        dt_315856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 24), 'dt')
        # Applying the binary operator '>=' (line 219)
        result_ge_315857 = python_operator(stypy.reporting.localization.Localization(__file__, 219, 19), '>=', i_315855, dt_315856)
        
        # Testing the type of an if condition (line 219)
        if_condition_315858 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 219, 16), result_ge_315857)
        # Assigning a type to the variable 'if_condition_315858' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 16), 'if_condition_315858', if_condition_315858)
        # SSA begins for if statement (line 219)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'i' (line 220)
        i_315859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 27), 'i')
        # Assigning a type to the variable 'stypy_return_type' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 20), 'stypy_return_type', i_315859)
        # SSA join for if statement (line 219)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 217)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'gen' (line 222)
        gen_315860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 21), 'gen')
        # Testing the type of a for loop iterable (line 222)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 222, 12), gen_315860)
        # Getting the type of the for loop variable (line 222)
        for_loop_var_315861 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 222, 12), gen_315860)
        # Assigning a type to the variable 'i' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 12), 'i', for_loop_var_315861)
        # SSA begins for a for statement (line 222)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 223)
        i_315862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 19), 'i')
        # Getting the type of 'dt' (line 223)
        dt_315863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 23), 'dt')
        # Applying the binary operator '>' (line 223)
        result_gt_315864 = python_operator(stypy.reporting.localization.Localization(__file__, 223, 19), '>', i_315862, dt_315863)
        
        # Testing the type of an if condition (line 223)
        if_condition_315865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 223, 16), result_gt_315864)
        # Assigning a type to the variable 'if_condition_315865' (line 223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 16), 'if_condition_315865', if_condition_315865)
        # SSA begins for if statement (line 223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'i' (line 224)
        i_315866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 27), 'i')
        # Assigning a type to the variable 'stypy_return_type' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 20), 'stypy_return_type', i_315866)
        # SSA join for if statement (line 223)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 217)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'None' (line 225)
        None_315867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 15), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'stypy_return_type', None_315867)
        
        # ################# End of 'after(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'after' in the type store
        # Getting the type of 'stypy_return_type' (line 209)
        stypy_return_type_315868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315868)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'after'
        return stypy_return_type_315868


    @norecursion
    def xafter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 227)
        None_315869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 31), 'None')
        # Getting the type of 'False' (line 227)
        False_315870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 41), 'False')
        defaults = [None_315869, False_315870]
        # Create a new context for function 'xafter'
        module_type_store = module_type_store.open_function_context('xafter', 227, 4, False)
        # Assigning a type to the variable 'self' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase.xafter.__dict__.__setitem__('stypy_localization', localization)
        rrulebase.xafter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase.xafter.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase.xafter.__dict__.__setitem__('stypy_function_name', 'rrulebase.xafter')
        rrulebase.xafter.__dict__.__setitem__('stypy_param_names_list', ['dt', 'count', 'inc'])
        rrulebase.xafter.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase.xafter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase.xafter.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase.xafter.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase.xafter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase.xafter.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.xafter', ['dt', 'count', 'inc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'xafter', localization, ['dt', 'count', 'inc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'xafter(...)' code ##################

        str_315871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, (-1)), 'str', '\n        Generator which yields up to `count` recurrences after the given\n        datetime instance, equivalent to `after`.\n\n        :param dt:\n            The datetime at which to start generating recurrences.\n\n        :param count:\n            The maximum number of recurrences to generate. If `None` (default),\n            dates are generated until the recurrence rule is exhausted.\n\n        :param inc:\n            If `dt` is an instance of the rule and `inc` is `True`, it is\n            included in the output.\n\n        :yields: Yields a sequence of `datetime` objects.\n        ')
        
        # Getting the type of 'self' (line 246)
        self_315872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 11), 'self')
        # Obtaining the member '_cache_complete' of a type (line 246)
        _cache_complete_315873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 11), self_315872, '_cache_complete')
        # Testing the type of an if condition (line 246)
        if_condition_315874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 246, 8), _cache_complete_315873)
        # Assigning a type to the variable 'if_condition_315874' (line 246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 8), 'if_condition_315874', if_condition_315874)
        # SSA begins for if statement (line 246)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 247):
        
        # Assigning a Attribute to a Name (line 247):
        # Getting the type of 'self' (line 247)
        self_315875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 18), 'self')
        # Obtaining the member '_cache' of a type (line 247)
        _cache_315876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 18), self_315875, '_cache')
        # Assigning a type to the variable 'gen' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'gen', _cache_315876)
        # SSA branch for the else part of an if statement (line 246)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 249):
        
        # Assigning a Name to a Name (line 249):
        # Getting the type of 'self' (line 249)
        self_315877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 18), 'self')
        # Assigning a type to the variable 'gen' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 12), 'gen', self_315877)
        # SSA join for if statement (line 246)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'inc' (line 252)
        inc_315878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 11), 'inc')
        # Testing the type of an if condition (line 252)
        if_condition_315879 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 252, 8), inc_315878)
        # Assigning a type to the variable 'if_condition_315879' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'if_condition_315879', if_condition_315879)
        # SSA begins for if statement (line 252)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Lambda to a Name (line 253):
        
        # Assigning a Lambda to a Name (line 253):

        @norecursion
        def _stypy_temp_lambda_150(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_150'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_150', 253, 19, True)
            # Passed parameters checking function
            _stypy_temp_lambda_150.stypy_localization = localization
            _stypy_temp_lambda_150.stypy_type_of_self = None
            _stypy_temp_lambda_150.stypy_type_store = module_type_store
            _stypy_temp_lambda_150.stypy_function_name = '_stypy_temp_lambda_150'
            _stypy_temp_lambda_150.stypy_param_names_list = ['dc', 'dtc']
            _stypy_temp_lambda_150.stypy_varargs_param_name = None
            _stypy_temp_lambda_150.stypy_kwargs_param_name = None
            _stypy_temp_lambda_150.stypy_call_defaults = defaults
            _stypy_temp_lambda_150.stypy_call_varargs = varargs
            _stypy_temp_lambda_150.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_150', ['dc', 'dtc'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_150', ['dc', 'dtc'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Getting the type of 'dc' (line 253)
            dc_315880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 35), 'dc')
            # Getting the type of 'dtc' (line 253)
            dtc_315881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 41), 'dtc')
            # Applying the binary operator '>=' (line 253)
            result_ge_315882 = python_operator(stypy.reporting.localization.Localization(__file__, 253, 35), '>=', dc_315880, dtc_315881)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 253)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 19), 'stypy_return_type', result_ge_315882)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_150' in the type store
            # Getting the type of 'stypy_return_type' (line 253)
            stypy_return_type_315883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 19), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_315883)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_150'
            return stypy_return_type_315883

        # Assigning a type to the variable '_stypy_temp_lambda_150' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 19), '_stypy_temp_lambda_150', _stypy_temp_lambda_150)
        # Getting the type of '_stypy_temp_lambda_150' (line 253)
        _stypy_temp_lambda_150_315884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 19), '_stypy_temp_lambda_150')
        # Assigning a type to the variable 'comp' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 12), 'comp', _stypy_temp_lambda_150_315884)
        # SSA branch for the else part of an if statement (line 252)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Lambda to a Name (line 255):
        
        # Assigning a Lambda to a Name (line 255):

        @norecursion
        def _stypy_temp_lambda_151(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_151'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_151', 255, 19, True)
            # Passed parameters checking function
            _stypy_temp_lambda_151.stypy_localization = localization
            _stypy_temp_lambda_151.stypy_type_of_self = None
            _stypy_temp_lambda_151.stypy_type_store = module_type_store
            _stypy_temp_lambda_151.stypy_function_name = '_stypy_temp_lambda_151'
            _stypy_temp_lambda_151.stypy_param_names_list = ['dc', 'dtc']
            _stypy_temp_lambda_151.stypy_varargs_param_name = None
            _stypy_temp_lambda_151.stypy_kwargs_param_name = None
            _stypy_temp_lambda_151.stypy_call_defaults = defaults
            _stypy_temp_lambda_151.stypy_call_varargs = varargs
            _stypy_temp_lambda_151.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_151', ['dc', 'dtc'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_151', ['dc', 'dtc'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Getting the type of 'dc' (line 255)
            dc_315885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 35), 'dc')
            # Getting the type of 'dtc' (line 255)
            dtc_315886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 40), 'dtc')
            # Applying the binary operator '>' (line 255)
            result_gt_315887 = python_operator(stypy.reporting.localization.Localization(__file__, 255, 35), '>', dc_315885, dtc_315886)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 255)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 19), 'stypy_return_type', result_gt_315887)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_151' in the type store
            # Getting the type of 'stypy_return_type' (line 255)
            stypy_return_type_315888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 19), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_315888)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_151'
            return stypy_return_type_315888

        # Assigning a type to the variable '_stypy_temp_lambda_151' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 19), '_stypy_temp_lambda_151', _stypy_temp_lambda_151)
        # Getting the type of '_stypy_temp_lambda_151' (line 255)
        _stypy_temp_lambda_151_315889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 19), '_stypy_temp_lambda_151')
        # Assigning a type to the variable 'comp' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 12), 'comp', _stypy_temp_lambda_151_315889)
        # SSA join for if statement (line 252)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 258):
        
        # Assigning a Num to a Name (line 258):
        int_315890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 12), 'int')
        # Assigning a type to the variable 'n' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'n', int_315890)
        
        # Getting the type of 'gen' (line 259)
        gen_315891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 17), 'gen')
        # Testing the type of a for loop iterable (line 259)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 259, 8), gen_315891)
        # Getting the type of the for loop variable (line 259)
        for_loop_var_315892 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 259, 8), gen_315891)
        # Assigning a type to the variable 'd' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 8), 'd', for_loop_var_315892)
        # SSA begins for a for statement (line 259)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to comp(...): (line 260)
        # Processing the call arguments (line 260)
        # Getting the type of 'd' (line 260)
        d_315894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 20), 'd', False)
        # Getting the type of 'dt' (line 260)
        dt_315895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 23), 'dt', False)
        # Processing the call keyword arguments (line 260)
        kwargs_315896 = {}
        # Getting the type of 'comp' (line 260)
        comp_315893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 15), 'comp', False)
        # Calling comp(args, kwargs) (line 260)
        comp_call_result_315897 = invoke(stypy.reporting.localization.Localization(__file__, 260, 15), comp_315893, *[d_315894, dt_315895], **kwargs_315896)
        
        # Testing the type of an if condition (line 260)
        if_condition_315898 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 260, 12), comp_call_result_315897)
        # Assigning a type to the variable 'if_condition_315898' (line 260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 12), 'if_condition_315898', if_condition_315898)
        # SSA begins for if statement (line 260)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 261)
        # Getting the type of 'count' (line 261)
        count_315899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 16), 'count')
        # Getting the type of 'None' (line 261)
        None_315900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 32), 'None')
        
        (may_be_315901, more_types_in_union_315902) = may_not_be_none(count_315899, None_315900)

        if may_be_315901:

            if more_types_in_union_315902:
                # Runtime conditional SSA (line 261)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'n' (line 262)
            n_315903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 20), 'n')
            int_315904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 25), 'int')
            # Applying the binary operator '+=' (line 262)
            result_iadd_315905 = python_operator(stypy.reporting.localization.Localization(__file__, 262, 20), '+=', n_315903, int_315904)
            # Assigning a type to the variable 'n' (line 262)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 20), 'n', result_iadd_315905)
            
            
            
            # Getting the type of 'n' (line 263)
            n_315906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 23), 'n')
            # Getting the type of 'count' (line 263)
            count_315907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 27), 'count')
            # Applying the binary operator '>' (line 263)
            result_gt_315908 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 23), '>', n_315906, count_315907)
            
            # Testing the type of an if condition (line 263)
            if_condition_315909 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 263, 20), result_gt_315908)
            # Assigning a type to the variable 'if_condition_315909' (line 263)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 20), 'if_condition_315909', if_condition_315909)
            # SSA begins for if statement (line 263)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # SSA join for if statement (line 263)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_315902:
                # SSA join for if statement (line 261)
                module_type_store = module_type_store.join_ssa_context()


        
        # Creating a generator
        # Getting the type of 'd' (line 266)
        d_315910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 22), 'd')
        GeneratorType_315911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 266, 16), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 266, 16), GeneratorType_315911, d_315910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 16), 'stypy_return_type', GeneratorType_315911)
        # SSA join for if statement (line 260)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'xafter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'xafter' in the type store
        # Getting the type of 'stypy_return_type' (line 227)
        stypy_return_type_315912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315912)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'xafter'
        return stypy_return_type_315912


    @norecursion
    def between(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 268)
        False_315913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 41), 'False')
        int_315914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 54), 'int')
        defaults = [False_315913, int_315914]
        # Create a new context for function 'between'
        module_type_store = module_type_store.open_function_context('between', 268, 4, False)
        # Assigning a type to the variable 'self' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrulebase.between.__dict__.__setitem__('stypy_localization', localization)
        rrulebase.between.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrulebase.between.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrulebase.between.__dict__.__setitem__('stypy_function_name', 'rrulebase.between')
        rrulebase.between.__dict__.__setitem__('stypy_param_names_list', ['after', 'before', 'inc', 'count'])
        rrulebase.between.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrulebase.between.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrulebase.between.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrulebase.between.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrulebase.between.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrulebase.between.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrulebase.between', ['after', 'before', 'inc', 'count'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'between', localization, ['after', 'before', 'inc', 'count'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'between(...)' code ##################

        str_315915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, (-1)), 'str', ' Returns all the occurrences of the rrule between after and before.\n        The inc keyword defines what happens if after and/or before are\n        themselves occurrences. With inc=True, they will be included in the\n        list, if they are found in the recurrence set. ')
        
        # Getting the type of 'self' (line 273)
        self_315916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 11), 'self')
        # Obtaining the member '_cache_complete' of a type (line 273)
        _cache_complete_315917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 11), self_315916, '_cache_complete')
        # Testing the type of an if condition (line 273)
        if_condition_315918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 273, 8), _cache_complete_315917)
        # Assigning a type to the variable 'if_condition_315918' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'if_condition_315918', if_condition_315918)
        # SSA begins for if statement (line 273)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 274):
        
        # Assigning a Attribute to a Name (line 274):
        # Getting the type of 'self' (line 274)
        self_315919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 18), 'self')
        # Obtaining the member '_cache' of a type (line 274)
        _cache_315920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 18), self_315919, '_cache')
        # Assigning a type to the variable 'gen' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 12), 'gen', _cache_315920)
        # SSA branch for the else part of an if statement (line 273)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 276):
        
        # Assigning a Name to a Name (line 276):
        # Getting the type of 'self' (line 276)
        self_315921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 18), 'self')
        # Assigning a type to the variable 'gen' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 12), 'gen', self_315921)
        # SSA join for if statement (line 273)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 277):
        
        # Assigning a Name to a Name (line 277):
        # Getting the type of 'False' (line 277)
        False_315922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 18), 'False')
        # Assigning a type to the variable 'started' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 8), 'started', False_315922)
        
        # Assigning a List to a Name (line 278):
        
        # Assigning a List to a Name (line 278):
        
        # Obtaining an instance of the builtin type 'list' (line 278)
        list_315923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 278)
        
        # Assigning a type to the variable 'l' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'l', list_315923)
        
        # Getting the type of 'inc' (line 279)
        inc_315924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 11), 'inc')
        # Testing the type of an if condition (line 279)
        if_condition_315925 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 279, 8), inc_315924)
        # Assigning a type to the variable 'if_condition_315925' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'if_condition_315925', if_condition_315925)
        # SSA begins for if statement (line 279)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'gen' (line 280)
        gen_315926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 21), 'gen')
        # Testing the type of a for loop iterable (line 280)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 280, 12), gen_315926)
        # Getting the type of the for loop variable (line 280)
        for_loop_var_315927 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 280, 12), gen_315926)
        # Assigning a type to the variable 'i' (line 280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 280, 12), 'i', for_loop_var_315927)
        # SSA begins for a for statement (line 280)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 281)
        i_315928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 19), 'i')
        # Getting the type of 'before' (line 281)
        before_315929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 23), 'before')
        # Applying the binary operator '>' (line 281)
        result_gt_315930 = python_operator(stypy.reporting.localization.Localization(__file__, 281, 19), '>', i_315928, before_315929)
        
        # Testing the type of an if condition (line 281)
        if_condition_315931 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 281, 16), result_gt_315930)
        # Assigning a type to the variable 'if_condition_315931' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 16), 'if_condition_315931', if_condition_315931)
        # SSA begins for if statement (line 281)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA branch for the else part of an if statement (line 281)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'started' (line 283)
        started_315932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 25), 'started')
        # Applying the 'not' unary operator (line 283)
        result_not__315933 = python_operator(stypy.reporting.localization.Localization(__file__, 283, 21), 'not', started_315932)
        
        # Testing the type of an if condition (line 283)
        if_condition_315934 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 283, 21), result_not__315933)
        # Assigning a type to the variable 'if_condition_315934' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 21), 'if_condition_315934', if_condition_315934)
        # SSA begins for if statement (line 283)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'i' (line 284)
        i_315935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 23), 'i')
        # Getting the type of 'after' (line 284)
        after_315936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 28), 'after')
        # Applying the binary operator '>=' (line 284)
        result_ge_315937 = python_operator(stypy.reporting.localization.Localization(__file__, 284, 23), '>=', i_315935, after_315936)
        
        # Testing the type of an if condition (line 284)
        if_condition_315938 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 284, 20), result_ge_315937)
        # Assigning a type to the variable 'if_condition_315938' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 20), 'if_condition_315938', if_condition_315938)
        # SSA begins for if statement (line 284)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 285):
        
        # Assigning a Name to a Name (line 285):
        # Getting the type of 'True' (line 285)
        True_315939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 34), 'True')
        # Assigning a type to the variable 'started' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 24), 'started', True_315939)
        
        # Call to append(...): (line 286)
        # Processing the call arguments (line 286)
        # Getting the type of 'i' (line 286)
        i_315942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 33), 'i', False)
        # Processing the call keyword arguments (line 286)
        kwargs_315943 = {}
        # Getting the type of 'l' (line 286)
        l_315940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 24), 'l', False)
        # Obtaining the member 'append' of a type (line 286)
        append_315941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 24), l_315940, 'append')
        # Calling append(args, kwargs) (line 286)
        append_call_result_315944 = invoke(stypy.reporting.localization.Localization(__file__, 286, 24), append_315941, *[i_315942], **kwargs_315943)
        
        # SSA join for if statement (line 284)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 283)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 288)
        # Processing the call arguments (line 288)
        # Getting the type of 'i' (line 288)
        i_315947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 29), 'i', False)
        # Processing the call keyword arguments (line 288)
        kwargs_315948 = {}
        # Getting the type of 'l' (line 288)
        l_315945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 20), 'l', False)
        # Obtaining the member 'append' of a type (line 288)
        append_315946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 20), l_315945, 'append')
        # Calling append(args, kwargs) (line 288)
        append_call_result_315949 = invoke(stypy.reporting.localization.Localization(__file__, 288, 20), append_315946, *[i_315947], **kwargs_315948)
        
        # SSA join for if statement (line 283)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 281)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 279)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'gen' (line 290)
        gen_315950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 21), 'gen')
        # Testing the type of a for loop iterable (line 290)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 290, 12), gen_315950)
        # Getting the type of the for loop variable (line 290)
        for_loop_var_315951 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 290, 12), gen_315950)
        # Assigning a type to the variable 'i' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 12), 'i', for_loop_var_315951)
        # SSA begins for a for statement (line 290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 291)
        i_315952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 19), 'i')
        # Getting the type of 'before' (line 291)
        before_315953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 24), 'before')
        # Applying the binary operator '>=' (line 291)
        result_ge_315954 = python_operator(stypy.reporting.localization.Localization(__file__, 291, 19), '>=', i_315952, before_315953)
        
        # Testing the type of an if condition (line 291)
        if_condition_315955 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 291, 16), result_ge_315954)
        # Assigning a type to the variable 'if_condition_315955' (line 291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 16), 'if_condition_315955', if_condition_315955)
        # SSA begins for if statement (line 291)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA branch for the else part of an if statement (line 291)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'started' (line 293)
        started_315956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 25), 'started')
        # Applying the 'not' unary operator (line 293)
        result_not__315957 = python_operator(stypy.reporting.localization.Localization(__file__, 293, 21), 'not', started_315956)
        
        # Testing the type of an if condition (line 293)
        if_condition_315958 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 293, 21), result_not__315957)
        # Assigning a type to the variable 'if_condition_315958' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 21), 'if_condition_315958', if_condition_315958)
        # SSA begins for if statement (line 293)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'i' (line 294)
        i_315959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 23), 'i')
        # Getting the type of 'after' (line 294)
        after_315960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 27), 'after')
        # Applying the binary operator '>' (line 294)
        result_gt_315961 = python_operator(stypy.reporting.localization.Localization(__file__, 294, 23), '>', i_315959, after_315960)
        
        # Testing the type of an if condition (line 294)
        if_condition_315962 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 294, 20), result_gt_315961)
        # Assigning a type to the variable 'if_condition_315962' (line 294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 20), 'if_condition_315962', if_condition_315962)
        # SSA begins for if statement (line 294)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 295):
        
        # Assigning a Name to a Name (line 295):
        # Getting the type of 'True' (line 295)
        True_315963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 34), 'True')
        # Assigning a type to the variable 'started' (line 295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 24), 'started', True_315963)
        
        # Call to append(...): (line 296)
        # Processing the call arguments (line 296)
        # Getting the type of 'i' (line 296)
        i_315966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 33), 'i', False)
        # Processing the call keyword arguments (line 296)
        kwargs_315967 = {}
        # Getting the type of 'l' (line 296)
        l_315964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 24), 'l', False)
        # Obtaining the member 'append' of a type (line 296)
        append_315965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 24), l_315964, 'append')
        # Calling append(args, kwargs) (line 296)
        append_call_result_315968 = invoke(stypy.reporting.localization.Localization(__file__, 296, 24), append_315965, *[i_315966], **kwargs_315967)
        
        # SSA join for if statement (line 294)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 293)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 298)
        # Processing the call arguments (line 298)
        # Getting the type of 'i' (line 298)
        i_315971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 29), 'i', False)
        # Processing the call keyword arguments (line 298)
        kwargs_315972 = {}
        # Getting the type of 'l' (line 298)
        l_315969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 20), 'l', False)
        # Obtaining the member 'append' of a type (line 298)
        append_315970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 20), l_315969, 'append')
        # Calling append(args, kwargs) (line 298)
        append_call_result_315973 = invoke(stypy.reporting.localization.Localization(__file__, 298, 20), append_315970, *[i_315971], **kwargs_315972)
        
        # SSA join for if statement (line 293)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 291)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 279)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'l' (line 299)
        l_315974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 15), 'l')
        # Assigning a type to the variable 'stypy_return_type' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'stypy_return_type', l_315974)
        
        # ################# End of 'between(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'between' in the type store
        # Getting the type of 'stypy_return_type' (line 268)
        stypy_return_type_315975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_315975)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'between'
        return stypy_return_type_315975


# Assigning a type to the variable 'rrulebase' (line 91)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 0), 'rrulebase', rrulebase)
# Declaration of the 'rrule' class
# Getting the type of 'rrulebase' (line 302)
rrulebase_315976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 12), 'rrulebase')

class rrule(rrulebase_315976, ):
    str_315977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, (-1)), 'str', "\n    That's the base of the rrule operation. It accepts all the keywords\n    defined in the RFC as its constructor parameters (except byday,\n    which was renamed to byweekday) and more. The constructor prototype is::\n\n            rrule(freq)\n\n    Where freq must be one of YEARLY, MONTHLY, WEEKLY, DAILY, HOURLY, MINUTELY,\n    or SECONDLY.\n\n    .. note::\n        Per RFC section 3.3.10, recurrence instances falling on invalid dates\n        and times are ignored rather than coerced:\n\n            Recurrence rules may generate recurrence instances with an invalid\n            date (e.g., February 30) or nonexistent local time (e.g., 1:30 AM\n            on a day where the local time is moved forward by an hour at 1:00\n            AM).  Such recurrence instances MUST be ignored and MUST NOT be\n            counted as part of the recurrence set.\n\n        This can lead to possibly surprising behavior when, for example, the\n        start date occurs at the end of the month:\n\n        >>> from dateutil.rrule import rrule, MONTHLY\n        >>> from datetime import datetime\n        >>> start_date = datetime(2014, 12, 31)\n        >>> list(rrule(freq=MONTHLY, count=4, dtstart=start_date))\n        ... # doctest: +NORMALIZE_WHITESPACE\n        [datetime.datetime(2014, 12, 31, 0, 0),\n         datetime.datetime(2015, 1, 31, 0, 0),\n         datetime.datetime(2015, 3, 31, 0, 0),\n         datetime.datetime(2015, 5, 31, 0, 0)]\n\n    Additionally, it supports the following keyword arguments:\n\n    :param cache:\n        If given, it must be a boolean value specifying to enable or disable\n        caching of results. If you will use the same rrule instance multiple\n        times, enabling caching will improve the performance considerably.\n    :param dtstart:\n        The recurrence start. Besides being the base for the recurrence,\n        missing parameters in the final recurrence instances will also be\n        extracted from this date. If not given, datetime.now() will be used\n        instead.\n    :param interval:\n        The interval between each freq iteration. For example, when using\n        YEARLY, an interval of 2 means once every two years, but with HOURLY,\n        it means once every two hours. The default interval is 1.\n    :param wkst:\n        The week start day. Must be one of the MO, TU, WE constants, or an\n        integer, specifying the first day of the week. This will affect\n        recurrences based on weekly periods. The default week start is got\n        from calendar.firstweekday(), and may be modified by\n        calendar.setfirstweekday().\n    :param count:\n        How many occurrences will be generated.\n\n        .. note::\n            As of version 2.5.0, the use of the ``until`` keyword together\n            with the ``count`` keyword is deprecated per RFC-2445 Sec. 4.3.10.\n    :param until:\n        If given, this must be a datetime instance, that will specify the\n        limit of the recurrence. The last recurrence in the rule is the greatest\n        datetime that is less than or equal to the value specified in the\n        ``until`` parameter.\n\n        .. note::\n            As of version 2.5.0, the use of the ``until`` keyword together\n            with the ``count`` keyword is deprecated per RFC-2445 Sec. 4.3.10.\n    :param bysetpos:\n        If given, it must be either an integer, or a sequence of integers,\n        positive or negative. Each given integer will specify an occurrence\n        number, corresponding to the nth occurrence of the rule inside the\n        frequency period. For example, a bysetpos of -1 if combined with a\n        MONTHLY frequency, and a byweekday of (MO, TU, WE, TH, FR), will\n        result in the last work day of every month.\n    :param bymonth:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the months to apply the recurrence to.\n    :param bymonthday:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the month days to apply the recurrence to.\n    :param byyearday:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the year days to apply the recurrence to.\n    :param byweekno:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the week numbers to apply the recurrence to. Week numbers\n        have the meaning described in ISO8601, that is, the first week of\n        the year is that containing at least four days of the new year.\n    :param byweekday:\n        If given, it must be either an integer (0 == MO), a sequence of\n        integers, one of the weekday constants (MO, TU, etc), or a sequence\n        of these constants. When given, these variables will define the\n        weekdays where the recurrence will be applied. It's also possible to\n        use an argument n for the weekday instances, which will mean the nth\n        occurrence of this weekday in the period. For example, with MONTHLY,\n        or with YEARLY and BYMONTH, using FR(+1) in byweekday will specify the\n        first friday of the month where the recurrence happens. Notice that in\n        the RFC documentation, this is specified as BYDAY, but was renamed to\n        avoid the ambiguity of that keyword.\n    :param byhour:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the hours to apply the recurrence to.\n    :param byminute:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the minutes to apply the recurrence to.\n    :param bysecond:\n        If given, it must be either an integer, or a sequence of integers,\n        meaning the seconds to apply the recurrence to.\n    :param byeaster:\n        If given, it must be either an integer, or a sequence of integers,\n        positive or negative. Each integer will define an offset from the\n        Easter Sunday. Passing the offset 0 to byeaster will yield the Easter\n        Sunday itself. This is an extension to the RFC specification.\n     ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 419)
        None_315978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 37), 'None')
        int_315979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 26), 'int')
        # Getting the type of 'None' (line 420)
        None_315980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 34), 'None')
        # Getting the type of 'None' (line 420)
        None_315981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 46), 'None')
        # Getting the type of 'None' (line 420)
        None_315982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 58), 'None')
        # Getting the type of 'None' (line 420)
        None_315983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 73), 'None')
        # Getting the type of 'None' (line 421)
        None_315984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 25), 'None')
        # Getting the type of 'None' (line 421)
        None_315985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 42), 'None')
        # Getting the type of 'None' (line 421)
        None_315986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 58), 'None')
        # Getting the type of 'None' (line 421)
        None_315987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 73), 'None')
        # Getting the type of 'None' (line 422)
        None_315988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 26), 'None')
        # Getting the type of 'None' (line 422)
        None_315989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 42), 'None')
        # Getting the type of 'None' (line 423)
        None_315990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 24), 'None')
        # Getting the type of 'None' (line 423)
        None_315991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 39), 'None')
        # Getting the type of 'None' (line 423)
        None_315992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 54), 'None')
        # Getting the type of 'False' (line 424)
        False_315993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 23), 'False')
        defaults = [None_315978, int_315979, None_315980, None_315981, None_315982, None_315983, None_315984, None_315985, None_315986, None_315987, None_315988, None_315989, None_315990, None_315991, None_315992, False_315993]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 419, 4, False)
        # Assigning a type to the variable 'self' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrule.__init__', ['freq', 'dtstart', 'interval', 'wkst', 'count', 'until', 'bysetpos', 'bymonth', 'bymonthday', 'byyearday', 'byeaster', 'byweekno', 'byweekday', 'byhour', 'byminute', 'bysecond', 'cache'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['freq', 'dtstart', 'interval', 'wkst', 'count', 'until', 'bysetpos', 'bymonth', 'bymonthday', 'byyearday', 'byeaster', 'byweekno', 'byweekday', 'byhour', 'byminute', 'bysecond', 'cache'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 425)
        # Processing the call arguments (line 425)
        # Getting the type of 'cache' (line 425)
        cache_316000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 36), 'cache', False)
        # Processing the call keyword arguments (line 425)
        kwargs_316001 = {}
        
        # Call to super(...): (line 425)
        # Processing the call arguments (line 425)
        # Getting the type of 'rrule' (line 425)
        rrule_315995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 14), 'rrule', False)
        # Getting the type of 'self' (line 425)
        self_315996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 21), 'self', False)
        # Processing the call keyword arguments (line 425)
        kwargs_315997 = {}
        # Getting the type of 'super' (line 425)
        super_315994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 8), 'super', False)
        # Calling super(args, kwargs) (line 425)
        super_call_result_315998 = invoke(stypy.reporting.localization.Localization(__file__, 425, 8), super_315994, *[rrule_315995, self_315996], **kwargs_315997)
        
        # Obtaining the member '__init__' of a type (line 425)
        init___315999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 8), super_call_result_315998, '__init__')
        # Calling __init__(args, kwargs) (line 425)
        init___call_result_316002 = invoke(stypy.reporting.localization.Localization(__file__, 425, 8), init___315999, *[cache_316000], **kwargs_316001)
        
        # Marking variables as global (line 426)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 426, 8), 'easter')
        
        
        # Getting the type of 'dtstart' (line 427)
        dtstart_316003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 15), 'dtstart')
        # Applying the 'not' unary operator (line 427)
        result_not__316004 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 11), 'not', dtstart_316003)
        
        # Testing the type of an if condition (line 427)
        if_condition_316005 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 427, 8), result_not__316004)
        # Assigning a type to the variable 'if_condition_316005' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'if_condition_316005', if_condition_316005)
        # SSA begins for if statement (line 427)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 428):
        
        # Assigning a Call to a Name (line 428):
        
        # Call to replace(...): (line 428)
        # Processing the call keyword arguments (line 428)
        int_316012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 66), 'int')
        keyword_316013 = int_316012
        kwargs_316014 = {'microsecond': keyword_316013}
        
        # Call to now(...): (line 428)
        # Processing the call keyword arguments (line 428)
        kwargs_316009 = {}
        # Getting the type of 'datetime' (line 428)
        datetime_316006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 22), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 428)
        datetime_316007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 22), datetime_316006, 'datetime')
        # Obtaining the member 'now' of a type (line 428)
        now_316008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 22), datetime_316007, 'now')
        # Calling now(args, kwargs) (line 428)
        now_call_result_316010 = invoke(stypy.reporting.localization.Localization(__file__, 428, 22), now_316008, *[], **kwargs_316009)
        
        # Obtaining the member 'replace' of a type (line 428)
        replace_316011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 22), now_call_result_316010, 'replace')
        # Calling replace(args, kwargs) (line 428)
        replace_call_result_316015 = invoke(stypy.reporting.localization.Localization(__file__, 428, 22), replace_316011, *[], **kwargs_316014)
        
        # Assigning a type to the variable 'dtstart' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), 'dtstart', replace_call_result_316015)
        # SSA branch for the else part of an if statement (line 427)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to isinstance(...): (line 429)
        # Processing the call arguments (line 429)
        # Getting the type of 'dtstart' (line 429)
        dtstart_316017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 28), 'dtstart', False)
        # Getting the type of 'datetime' (line 429)
        datetime_316018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 37), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 429)
        datetime_316019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 37), datetime_316018, 'datetime')
        # Processing the call keyword arguments (line 429)
        kwargs_316020 = {}
        # Getting the type of 'isinstance' (line 429)
        isinstance_316016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 17), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 429)
        isinstance_call_result_316021 = invoke(stypy.reporting.localization.Localization(__file__, 429, 17), isinstance_316016, *[dtstart_316017, datetime_316019], **kwargs_316020)
        
        # Applying the 'not' unary operator (line 429)
        result_not__316022 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 13), 'not', isinstance_call_result_316021)
        
        # Testing the type of an if condition (line 429)
        if_condition_316023 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 429, 13), result_not__316022)
        # Assigning a type to the variable 'if_condition_316023' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 13), 'if_condition_316023', if_condition_316023)
        # SSA begins for if statement (line 429)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 430):
        
        # Assigning a Call to a Name (line 430):
        
        # Call to fromordinal(...): (line 430)
        # Processing the call arguments (line 430)
        
        # Call to toordinal(...): (line 430)
        # Processing the call keyword arguments (line 430)
        kwargs_316029 = {}
        # Getting the type of 'dtstart' (line 430)
        dtstart_316027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 52), 'dtstart', False)
        # Obtaining the member 'toordinal' of a type (line 430)
        toordinal_316028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 52), dtstart_316027, 'toordinal')
        # Calling toordinal(args, kwargs) (line 430)
        toordinal_call_result_316030 = invoke(stypy.reporting.localization.Localization(__file__, 430, 52), toordinal_316028, *[], **kwargs_316029)
        
        # Processing the call keyword arguments (line 430)
        kwargs_316031 = {}
        # Getting the type of 'datetime' (line 430)
        datetime_316024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 22), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 430)
        datetime_316025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 22), datetime_316024, 'datetime')
        # Obtaining the member 'fromordinal' of a type (line 430)
        fromordinal_316026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 22), datetime_316025, 'fromordinal')
        # Calling fromordinal(args, kwargs) (line 430)
        fromordinal_call_result_316032 = invoke(stypy.reporting.localization.Localization(__file__, 430, 22), fromordinal_316026, *[toordinal_call_result_316030], **kwargs_316031)
        
        # Assigning a type to the variable 'dtstart' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 12), 'dtstart', fromordinal_call_result_316032)
        # SSA branch for the else part of an if statement (line 429)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 432):
        
        # Assigning a Call to a Name (line 432):
        
        # Call to replace(...): (line 432)
        # Processing the call keyword arguments (line 432)
        int_316035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 50), 'int')
        keyword_316036 = int_316035
        kwargs_316037 = {'microsecond': keyword_316036}
        # Getting the type of 'dtstart' (line 432)
        dtstart_316033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 22), 'dtstart', False)
        # Obtaining the member 'replace' of a type (line 432)
        replace_316034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 432, 22), dtstart_316033, 'replace')
        # Calling replace(args, kwargs) (line 432)
        replace_call_result_316038 = invoke(stypy.reporting.localization.Localization(__file__, 432, 22), replace_316034, *[], **kwargs_316037)
        
        # Assigning a type to the variable 'dtstart' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 12), 'dtstart', replace_call_result_316038)
        # SSA join for if statement (line 429)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 427)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 433):
        
        # Assigning a Name to a Attribute (line 433):
        # Getting the type of 'dtstart' (line 433)
        dtstart_316039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 24), 'dtstart')
        # Getting the type of 'self' (line 433)
        self_316040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'self')
        # Setting the type of the member '_dtstart' of a type (line 433)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 8), self_316040, '_dtstart', dtstart_316039)
        
        # Assigning a Attribute to a Attribute (line 434):
        
        # Assigning a Attribute to a Attribute (line 434):
        # Getting the type of 'dtstart' (line 434)
        dtstart_316041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 23), 'dtstart')
        # Obtaining the member 'tzinfo' of a type (line 434)
        tzinfo_316042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 23), dtstart_316041, 'tzinfo')
        # Getting the type of 'self' (line 434)
        self_316043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'self')
        # Setting the type of the member '_tzinfo' of a type (line 434)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), self_316043, '_tzinfo', tzinfo_316042)
        
        # Assigning a Name to a Attribute (line 435):
        
        # Assigning a Name to a Attribute (line 435):
        # Getting the type of 'freq' (line 435)
        freq_316044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 21), 'freq')
        # Getting the type of 'self' (line 435)
        self_316045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'self')
        # Setting the type of the member '_freq' of a type (line 435)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), self_316045, '_freq', freq_316044)
        
        # Assigning a Name to a Attribute (line 436):
        
        # Assigning a Name to a Attribute (line 436):
        # Getting the type of 'interval' (line 436)
        interval_316046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 25), 'interval')
        # Getting the type of 'self' (line 436)
        self_316047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'self')
        # Setting the type of the member '_interval' of a type (line 436)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 8), self_316047, '_interval', interval_316046)
        
        # Assigning a Name to a Attribute (line 437):
        
        # Assigning a Name to a Attribute (line 437):
        # Getting the type of 'count' (line 437)
        count_316048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 22), 'count')
        # Getting the type of 'self' (line 437)
        self_316049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'self')
        # Setting the type of the member '_count' of a type (line 437)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 8), self_316049, '_count', count_316048)
        
        # Assigning a Dict to a Attribute (line 443):
        
        # Assigning a Dict to a Attribute (line 443):
        
        # Obtaining an instance of the builtin type 'dict' (line 443)
        dict_316050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, 30), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 443)
        
        # Getting the type of 'self' (line 443)
        self_316051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 8), 'self')
        # Setting the type of the member '_original_rule' of a type (line 443)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 8), self_316051, '_original_rule', dict_316050)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'until' (line 445)
        until_316052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 11), 'until')
        
        
        # Call to isinstance(...): (line 445)
        # Processing the call arguments (line 445)
        # Getting the type of 'until' (line 445)
        until_316054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 36), 'until', False)
        # Getting the type of 'datetime' (line 445)
        datetime_316055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 43), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 445)
        datetime_316056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 43), datetime_316055, 'datetime')
        # Processing the call keyword arguments (line 445)
        kwargs_316057 = {}
        # Getting the type of 'isinstance' (line 445)
        isinstance_316053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 25), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 445)
        isinstance_call_result_316058 = invoke(stypy.reporting.localization.Localization(__file__, 445, 25), isinstance_316053, *[until_316054, datetime_316056], **kwargs_316057)
        
        # Applying the 'not' unary operator (line 445)
        result_not__316059 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 21), 'not', isinstance_call_result_316058)
        
        # Applying the binary operator 'and' (line 445)
        result_and_keyword_316060 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 11), 'and', until_316052, result_not__316059)
        
        # Testing the type of an if condition (line 445)
        if_condition_316061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 445, 8), result_and_keyword_316060)
        # Assigning a type to the variable 'if_condition_316061' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'if_condition_316061', if_condition_316061)
        # SSA begins for if statement (line 445)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 446):
        
        # Assigning a Call to a Name (line 446):
        
        # Call to fromordinal(...): (line 446)
        # Processing the call arguments (line 446)
        
        # Call to toordinal(...): (line 446)
        # Processing the call keyword arguments (line 446)
        kwargs_316067 = {}
        # Getting the type of 'until' (line 446)
        until_316065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 50), 'until', False)
        # Obtaining the member 'toordinal' of a type (line 446)
        toordinal_316066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 50), until_316065, 'toordinal')
        # Calling toordinal(args, kwargs) (line 446)
        toordinal_call_result_316068 = invoke(stypy.reporting.localization.Localization(__file__, 446, 50), toordinal_316066, *[], **kwargs_316067)
        
        # Processing the call keyword arguments (line 446)
        kwargs_316069 = {}
        # Getting the type of 'datetime' (line 446)
        datetime_316062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 20), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 446)
        datetime_316063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 20), datetime_316062, 'datetime')
        # Obtaining the member 'fromordinal' of a type (line 446)
        fromordinal_316064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 20), datetime_316063, 'fromordinal')
        # Calling fromordinal(args, kwargs) (line 446)
        fromordinal_call_result_316070 = invoke(stypy.reporting.localization.Localization(__file__, 446, 20), fromordinal_316064, *[toordinal_call_result_316068], **kwargs_316069)
        
        # Assigning a type to the variable 'until' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'until', fromordinal_call_result_316070)
        # SSA join for if statement (line 445)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 447):
        
        # Assigning a Name to a Attribute (line 447):
        # Getting the type of 'until' (line 447)
        until_316071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 22), 'until')
        # Getting the type of 'self' (line 447)
        self_316072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'self')
        # Setting the type of the member '_until' of a type (line 447)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 8), self_316072, '_until', until_316071)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'count' (line 449)
        count_316073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 11), 'count')
        # Getting the type of 'None' (line 449)
        None_316074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 24), 'None')
        # Applying the binary operator 'isnot' (line 449)
        result_is_not_316075 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 11), 'isnot', count_316073, None_316074)
        
        # Getting the type of 'until' (line 449)
        until_316076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 33), 'until')
        # Applying the binary operator 'and' (line 449)
        result_and_keyword_316077 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 11), 'and', result_is_not_316075, until_316076)
        
        # Testing the type of an if condition (line 449)
        if_condition_316078 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 449, 8), result_and_keyword_316077)
        # Assigning a type to the variable 'if_condition_316078' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 8), 'if_condition_316078', if_condition_316078)
        # SSA begins for if statement (line 449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 450)
        # Processing the call arguments (line 450)
        str_316080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 17), 'str', "Using both 'count' and 'until' is inconsistent with RFC 2445 and has been deprecated in dateutil. Future versions will raise an error.")
        # Getting the type of 'DeprecationWarning' (line 452)
        DeprecationWarning_316081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 36), 'DeprecationWarning', False)
        # Processing the call keyword arguments (line 450)
        kwargs_316082 = {}
        # Getting the type of 'warn' (line 450)
        warn_316079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 12), 'warn', False)
        # Calling warn(args, kwargs) (line 450)
        warn_call_result_316083 = invoke(stypy.reporting.localization.Localization(__file__, 450, 12), warn_316079, *[str_316080, DeprecationWarning_316081], **kwargs_316082)
        
        # SSA join for if statement (line 449)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 454)
        # Getting the type of 'wkst' (line 454)
        wkst_316084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 11), 'wkst')
        # Getting the type of 'None' (line 454)
        None_316085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 19), 'None')
        
        (may_be_316086, more_types_in_union_316087) = may_be_none(wkst_316084, None_316085)

        if may_be_316086:

            if more_types_in_union_316087:
                # Runtime conditional SSA (line 454)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 455):
            
            # Assigning a Call to a Attribute (line 455):
            
            # Call to firstweekday(...): (line 455)
            # Processing the call keyword arguments (line 455)
            kwargs_316090 = {}
            # Getting the type of 'calendar' (line 455)
            calendar_316088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 25), 'calendar', False)
            # Obtaining the member 'firstweekday' of a type (line 455)
            firstweekday_316089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 25), calendar_316088, 'firstweekday')
            # Calling firstweekday(args, kwargs) (line 455)
            firstweekday_call_result_316091 = invoke(stypy.reporting.localization.Localization(__file__, 455, 25), firstweekday_316089, *[], **kwargs_316090)
            
            # Getting the type of 'self' (line 455)
            self_316092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 12), 'self')
            # Setting the type of the member '_wkst' of a type (line 455)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 12), self_316092, '_wkst', firstweekday_call_result_316091)

            if more_types_in_union_316087:
                # Runtime conditional SSA for else branch (line 454)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316086) or more_types_in_union_316087):
            
            
            # Call to isinstance(...): (line 456)
            # Processing the call arguments (line 456)
            # Getting the type of 'wkst' (line 456)
            wkst_316094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 24), 'wkst', False)
            # Getting the type of 'integer_types' (line 456)
            integer_types_316095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 30), 'integer_types', False)
            # Processing the call keyword arguments (line 456)
            kwargs_316096 = {}
            # Getting the type of 'isinstance' (line 456)
            isinstance_316093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 456)
            isinstance_call_result_316097 = invoke(stypy.reporting.localization.Localization(__file__, 456, 13), isinstance_316093, *[wkst_316094, integer_types_316095], **kwargs_316096)
            
            # Testing the type of an if condition (line 456)
            if_condition_316098 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 456, 13), isinstance_call_result_316097)
            # Assigning a type to the variable 'if_condition_316098' (line 456)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 13), 'if_condition_316098', if_condition_316098)
            # SSA begins for if statement (line 456)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 457):
            
            # Assigning a Name to a Attribute (line 457):
            # Getting the type of 'wkst' (line 457)
            wkst_316099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 25), 'wkst')
            # Getting the type of 'self' (line 457)
            self_316100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 12), 'self')
            # Setting the type of the member '_wkst' of a type (line 457)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 12), self_316100, '_wkst', wkst_316099)
            # SSA branch for the else part of an if statement (line 456)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Attribute to a Attribute (line 459):
            
            # Assigning a Attribute to a Attribute (line 459):
            # Getting the type of 'wkst' (line 459)
            wkst_316101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 25), 'wkst')
            # Obtaining the member 'weekday' of a type (line 459)
            weekday_316102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 25), wkst_316101, 'weekday')
            # Getting the type of 'self' (line 459)
            self_316103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 12), 'self')
            # Setting the type of the member '_wkst' of a type (line 459)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 12), self_316103, '_wkst', weekday_316102)
            # SSA join for if statement (line 456)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_316086 and more_types_in_union_316087):
                # SSA join for if statement (line 454)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 461)
        # Getting the type of 'bysetpos' (line 461)
        bysetpos_316104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 11), 'bysetpos')
        # Getting the type of 'None' (line 461)
        None_316105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 23), 'None')
        
        (may_be_316106, more_types_in_union_316107) = may_be_none(bysetpos_316104, None_316105)

        if may_be_316106:

            if more_types_in_union_316107:
                # Runtime conditional SSA (line 461)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 462):
            
            # Assigning a Name to a Attribute (line 462):
            # Getting the type of 'None' (line 462)
            None_316108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 29), 'None')
            # Getting the type of 'self' (line 462)
            self_316109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 12), 'self')
            # Setting the type of the member '_bysetpos' of a type (line 462)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 12), self_316109, '_bysetpos', None_316108)

            if more_types_in_union_316107:
                # Runtime conditional SSA for else branch (line 461)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316106) or more_types_in_union_316107):
            
            
            # Call to isinstance(...): (line 463)
            # Processing the call arguments (line 463)
            # Getting the type of 'bysetpos' (line 463)
            bysetpos_316111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 24), 'bysetpos', False)
            # Getting the type of 'integer_types' (line 463)
            integer_types_316112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 34), 'integer_types', False)
            # Processing the call keyword arguments (line 463)
            kwargs_316113 = {}
            # Getting the type of 'isinstance' (line 463)
            isinstance_316110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 13), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 463)
            isinstance_call_result_316114 = invoke(stypy.reporting.localization.Localization(__file__, 463, 13), isinstance_316110, *[bysetpos_316111, integer_types_316112], **kwargs_316113)
            
            # Testing the type of an if condition (line 463)
            if_condition_316115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 463, 13), isinstance_call_result_316114)
            # Assigning a type to the variable 'if_condition_316115' (line 463)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 13), 'if_condition_316115', if_condition_316115)
            # SSA begins for if statement (line 463)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'bysetpos' (line 464)
            bysetpos_316116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 15), 'bysetpos')
            int_316117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 27), 'int')
            # Applying the binary operator '==' (line 464)
            result_eq_316118 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 15), '==', bysetpos_316116, int_316117)
            
            
            
            int_316119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 37), 'int')
            # Getting the type of 'bysetpos' (line 464)
            bysetpos_316120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 45), 'bysetpos')
            # Applying the binary operator '<=' (line 464)
            result_le_316121 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 37), '<=', int_316119, bysetpos_316120)
            int_316122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 57), 'int')
            # Applying the binary operator '<=' (line 464)
            result_le_316123 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 37), '<=', bysetpos_316120, int_316122)
            # Applying the binary operator '&' (line 464)
            result_and__316124 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 37), '&', result_le_316121, result_le_316123)
            
            # Applying the 'not' unary operator (line 464)
            result_not__316125 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 32), 'not', result_and__316124)
            
            # Applying the binary operator 'or' (line 464)
            result_or_keyword_316126 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 15), 'or', result_eq_316118, result_not__316125)
            
            # Testing the type of an if condition (line 464)
            if_condition_316127 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 464, 12), result_or_keyword_316126)
            # Assigning a type to the variable 'if_condition_316127' (line 464)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 12), 'if_condition_316127', if_condition_316127)
            # SSA begins for if statement (line 464)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 465)
            # Processing the call arguments (line 465)
            str_316129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 33), 'str', 'bysetpos must be between 1 and 366, or between -366 and -1')
            # Processing the call keyword arguments (line 465)
            kwargs_316130 = {}
            # Getting the type of 'ValueError' (line 465)
            ValueError_316128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 465)
            ValueError_call_result_316131 = invoke(stypy.reporting.localization.Localization(__file__, 465, 22), ValueError_316128, *[str_316129], **kwargs_316130)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 465, 16), ValueError_call_result_316131, 'raise parameter', BaseException)
            # SSA join for if statement (line 464)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Tuple to a Attribute (line 467):
            
            # Assigning a Tuple to a Attribute (line 467):
            
            # Obtaining an instance of the builtin type 'tuple' (line 467)
            tuple_316132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 30), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 467)
            # Adding element type (line 467)
            # Getting the type of 'bysetpos' (line 467)
            bysetpos_316133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 30), 'bysetpos')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 467, 30), tuple_316132, bysetpos_316133)
            
            # Getting the type of 'self' (line 467)
            self_316134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 12), 'self')
            # Setting the type of the member '_bysetpos' of a type (line 467)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 12), self_316134, '_bysetpos', tuple_316132)
            # SSA branch for the else part of an if statement (line 463)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 469):
            
            # Assigning a Call to a Attribute (line 469):
            
            # Call to tuple(...): (line 469)
            # Processing the call arguments (line 469)
            # Getting the type of 'bysetpos' (line 469)
            bysetpos_316136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 35), 'bysetpos', False)
            # Processing the call keyword arguments (line 469)
            kwargs_316137 = {}
            # Getting the type of 'tuple' (line 469)
            tuple_316135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 29), 'tuple', False)
            # Calling tuple(args, kwargs) (line 469)
            tuple_call_result_316138 = invoke(stypy.reporting.localization.Localization(__file__, 469, 29), tuple_316135, *[bysetpos_316136], **kwargs_316137)
            
            # Getting the type of 'self' (line 469)
            self_316139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 12), 'self')
            # Setting the type of the member '_bysetpos' of a type (line 469)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 12), self_316139, '_bysetpos', tuple_call_result_316138)
            
            # Getting the type of 'self' (line 470)
            self_316140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 23), 'self')
            # Obtaining the member '_bysetpos' of a type (line 470)
            _bysetpos_316141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 23), self_316140, '_bysetpos')
            # Testing the type of a for loop iterable (line 470)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 470, 12), _bysetpos_316141)
            # Getting the type of the for loop variable (line 470)
            for_loop_var_316142 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 470, 12), _bysetpos_316141)
            # Assigning a type to the variable 'pos' (line 470)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 12), 'pos', for_loop_var_316142)
            # SSA begins for a for statement (line 470)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'pos' (line 471)
            pos_316143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 19), 'pos')
            int_316144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 26), 'int')
            # Applying the binary operator '==' (line 471)
            result_eq_316145 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 19), '==', pos_316143, int_316144)
            
            
            
            int_316146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 36), 'int')
            # Getting the type of 'pos' (line 471)
            pos_316147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 44), 'pos')
            # Applying the binary operator '<=' (line 471)
            result_le_316148 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 36), '<=', int_316146, pos_316147)
            int_316149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 51), 'int')
            # Applying the binary operator '<=' (line 471)
            result_le_316150 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 36), '<=', pos_316147, int_316149)
            # Applying the binary operator '&' (line 471)
            result_and__316151 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 36), '&', result_le_316148, result_le_316150)
            
            # Applying the 'not' unary operator (line 471)
            result_not__316152 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 31), 'not', result_and__316151)
            
            # Applying the binary operator 'or' (line 471)
            result_or_keyword_316153 = python_operator(stypy.reporting.localization.Localization(__file__, 471, 19), 'or', result_eq_316145, result_not__316152)
            
            # Testing the type of an if condition (line 471)
            if_condition_316154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 471, 16), result_or_keyword_316153)
            # Assigning a type to the variable 'if_condition_316154' (line 471)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 16), 'if_condition_316154', if_condition_316154)
            # SSA begins for if statement (line 471)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 472)
            # Processing the call arguments (line 472)
            str_316156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 37), 'str', 'bysetpos must be between 1 and 366, or between -366 and -1')
            # Processing the call keyword arguments (line 472)
            kwargs_316157 = {}
            # Getting the type of 'ValueError' (line 472)
            ValueError_316155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 472)
            ValueError_call_result_316158 = invoke(stypy.reporting.localization.Localization(__file__, 472, 26), ValueError_316155, *[str_316156], **kwargs_316157)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 472, 20), ValueError_call_result_316158, 'raise parameter', BaseException)
            # SSA join for if statement (line 471)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 463)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_316106 and more_types_in_union_316107):
                # SSA join for if statement (line 461)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'self' (line 475)
        self_316159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 11), 'self')
        # Obtaining the member '_bysetpos' of a type (line 475)
        _bysetpos_316160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 11), self_316159, '_bysetpos')
        # Testing the type of an if condition (line 475)
        if_condition_316161 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 475, 8), _bysetpos_316160)
        # Assigning a type to the variable 'if_condition_316161' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'if_condition_316161', if_condition_316161)
        # SSA begins for if statement (line 475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 476):
        
        # Assigning a Attribute to a Subscript (line 476):
        # Getting the type of 'self' (line 476)
        self_316162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 46), 'self')
        # Obtaining the member '_bysetpos' of a type (line 476)
        _bysetpos_316163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 46), self_316162, '_bysetpos')
        # Getting the type of 'self' (line 476)
        self_316164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'self')
        # Obtaining the member '_original_rule' of a type (line 476)
        _original_rule_316165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 12), self_316164, '_original_rule')
        str_316166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 32), 'str', 'bysetpos')
        # Storing an element on a container (line 476)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 476, 12), _original_rule_316165, (str_316166, _bysetpos_316163))
        # SSA join for if statement (line 475)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'byweekno' (line 478)
        byweekno_316167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 12), 'byweekno')
        # Getting the type of 'None' (line 478)
        None_316168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 24), 'None')
        # Applying the binary operator 'is' (line 478)
        result_is__316169 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 12), 'is', byweekno_316167, None_316168)
        
        
        # Getting the type of 'byyearday' (line 478)
        byyearday_316170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 33), 'byyearday')
        # Getting the type of 'None' (line 478)
        None_316171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 46), 'None')
        # Applying the binary operator 'is' (line 478)
        result_is__316172 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 33), 'is', byyearday_316170, None_316171)
        
        # Applying the binary operator 'and' (line 478)
        result_and_keyword_316173 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 12), 'and', result_is__316169, result_is__316172)
        
        # Getting the type of 'bymonthday' (line 478)
        bymonthday_316174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 55), 'bymonthday')
        # Getting the type of 'None' (line 478)
        None_316175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 69), 'None')
        # Applying the binary operator 'is' (line 478)
        result_is__316176 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 55), 'is', bymonthday_316174, None_316175)
        
        # Applying the binary operator 'and' (line 478)
        result_and_keyword_316177 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 12), 'and', result_and_keyword_316173, result_is__316176)
        
        # Getting the type of 'byweekday' (line 479)
        byweekday_316178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 16), 'byweekday')
        # Getting the type of 'None' (line 479)
        None_316179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 29), 'None')
        # Applying the binary operator 'is' (line 479)
        result_is__316180 = python_operator(stypy.reporting.localization.Localization(__file__, 479, 16), 'is', byweekday_316178, None_316179)
        
        # Applying the binary operator 'and' (line 478)
        result_and_keyword_316181 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 12), 'and', result_and_keyword_316177, result_is__316180)
        
        # Getting the type of 'byeaster' (line 479)
        byeaster_316182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 38), 'byeaster')
        # Getting the type of 'None' (line 479)
        None_316183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 50), 'None')
        # Applying the binary operator 'is' (line 479)
        result_is__316184 = python_operator(stypy.reporting.localization.Localization(__file__, 479, 38), 'is', byeaster_316182, None_316183)
        
        # Applying the binary operator 'and' (line 478)
        result_and_keyword_316185 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 12), 'and', result_and_keyword_316181, result_is__316184)
        
        # Testing the type of an if condition (line 478)
        if_condition_316186 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 478, 8), result_and_keyword_316185)
        # Assigning a type to the variable 'if_condition_316186' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'if_condition_316186', if_condition_316186)
        # SSA begins for if statement (line 478)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'freq' (line 480)
        freq_316187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 15), 'freq')
        # Getting the type of 'YEARLY' (line 480)
        YEARLY_316188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 23), 'YEARLY')
        # Applying the binary operator '==' (line 480)
        result_eq_316189 = python_operator(stypy.reporting.localization.Localization(__file__, 480, 15), '==', freq_316187, YEARLY_316188)
        
        # Testing the type of an if condition (line 480)
        if_condition_316190 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 480, 12), result_eq_316189)
        # Assigning a type to the variable 'if_condition_316190' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'if_condition_316190', if_condition_316190)
        # SSA begins for if statement (line 480)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 481)
        # Getting the type of 'bymonth' (line 481)
        bymonth_316191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 19), 'bymonth')
        # Getting the type of 'None' (line 481)
        None_316192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 30), 'None')
        
        (may_be_316193, more_types_in_union_316194) = may_be_none(bymonth_316191, None_316192)

        if may_be_316193:

            if more_types_in_union_316194:
                # Runtime conditional SSA (line 481)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 482):
            
            # Assigning a Attribute to a Name (line 482):
            # Getting the type of 'dtstart' (line 482)
            dtstart_316195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 30), 'dtstart')
            # Obtaining the member 'month' of a type (line 482)
            month_316196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 30), dtstart_316195, 'month')
            # Assigning a type to the variable 'bymonth' (line 482)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 20), 'bymonth', month_316196)
            
            # Assigning a Name to a Subscript (line 483):
            
            # Assigning a Name to a Subscript (line 483):
            # Getting the type of 'None' (line 483)
            None_316197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 53), 'None')
            # Getting the type of 'self' (line 483)
            self_316198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 20), 'self')
            # Obtaining the member '_original_rule' of a type (line 483)
            _original_rule_316199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 20), self_316198, '_original_rule')
            str_316200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 40), 'str', 'bymonth')
            # Storing an element on a container (line 483)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 483, 20), _original_rule_316199, (str_316200, None_316197))

            if more_types_in_union_316194:
                # SSA join for if statement (line 481)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 484):
        
        # Assigning a Attribute to a Name (line 484):
        # Getting the type of 'dtstart' (line 484)
        dtstart_316201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 29), 'dtstart')
        # Obtaining the member 'day' of a type (line 484)
        day_316202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 29), dtstart_316201, 'day')
        # Assigning a type to the variable 'bymonthday' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 16), 'bymonthday', day_316202)
        
        # Assigning a Name to a Subscript (line 485):
        
        # Assigning a Name to a Subscript (line 485):
        # Getting the type of 'None' (line 485)
        None_316203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 52), 'None')
        # Getting the type of 'self' (line 485)
        self_316204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 16), 'self')
        # Obtaining the member '_original_rule' of a type (line 485)
        _original_rule_316205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 16), self_316204, '_original_rule')
        str_316206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 36), 'str', 'bymonthday')
        # Storing an element on a container (line 485)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 485, 16), _original_rule_316205, (str_316206, None_316203))
        # SSA branch for the else part of an if statement (line 480)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 486)
        freq_316207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 17), 'freq')
        # Getting the type of 'MONTHLY' (line 486)
        MONTHLY_316208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 25), 'MONTHLY')
        # Applying the binary operator '==' (line 486)
        result_eq_316209 = python_operator(stypy.reporting.localization.Localization(__file__, 486, 17), '==', freq_316207, MONTHLY_316208)
        
        # Testing the type of an if condition (line 486)
        if_condition_316210 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 486, 17), result_eq_316209)
        # Assigning a type to the variable 'if_condition_316210' (line 486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 17), 'if_condition_316210', if_condition_316210)
        # SSA begins for if statement (line 486)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 487):
        
        # Assigning a Attribute to a Name (line 487):
        # Getting the type of 'dtstart' (line 487)
        dtstart_316211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 29), 'dtstart')
        # Obtaining the member 'day' of a type (line 487)
        day_316212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 29), dtstart_316211, 'day')
        # Assigning a type to the variable 'bymonthday' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 16), 'bymonthday', day_316212)
        
        # Assigning a Name to a Subscript (line 488):
        
        # Assigning a Name to a Subscript (line 488):
        # Getting the type of 'None' (line 488)
        None_316213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 52), 'None')
        # Getting the type of 'self' (line 488)
        self_316214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 16), 'self')
        # Obtaining the member '_original_rule' of a type (line 488)
        _original_rule_316215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 16), self_316214, '_original_rule')
        str_316216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, 36), 'str', 'bymonthday')
        # Storing an element on a container (line 488)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 488, 16), _original_rule_316215, (str_316216, None_316213))
        # SSA branch for the else part of an if statement (line 486)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 489)
        freq_316217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 17), 'freq')
        # Getting the type of 'WEEKLY' (line 489)
        WEEKLY_316218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 25), 'WEEKLY')
        # Applying the binary operator '==' (line 489)
        result_eq_316219 = python_operator(stypy.reporting.localization.Localization(__file__, 489, 17), '==', freq_316217, WEEKLY_316218)
        
        # Testing the type of an if condition (line 489)
        if_condition_316220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 489, 17), result_eq_316219)
        # Assigning a type to the variable 'if_condition_316220' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 17), 'if_condition_316220', if_condition_316220)
        # SSA begins for if statement (line 489)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 490):
        
        # Assigning a Call to a Name (line 490):
        
        # Call to weekday(...): (line 490)
        # Processing the call keyword arguments (line 490)
        kwargs_316223 = {}
        # Getting the type of 'dtstart' (line 490)
        dtstart_316221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 28), 'dtstart', False)
        # Obtaining the member 'weekday' of a type (line 490)
        weekday_316222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 28), dtstart_316221, 'weekday')
        # Calling weekday(args, kwargs) (line 490)
        weekday_call_result_316224 = invoke(stypy.reporting.localization.Localization(__file__, 490, 28), weekday_316222, *[], **kwargs_316223)
        
        # Assigning a type to the variable 'byweekday' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 16), 'byweekday', weekday_call_result_316224)
        
        # Assigning a Name to a Subscript (line 491):
        
        # Assigning a Name to a Subscript (line 491):
        # Getting the type of 'None' (line 491)
        None_316225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 51), 'None')
        # Getting the type of 'self' (line 491)
        self_316226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 16), 'self')
        # Obtaining the member '_original_rule' of a type (line 491)
        _original_rule_316227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 16), self_316226, '_original_rule')
        str_316228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 36), 'str', 'byweekday')
        # Storing an element on a container (line 491)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 491, 16), _original_rule_316227, (str_316228, None_316225))
        # SSA join for if statement (line 489)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 486)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 480)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 478)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 494)
        # Getting the type of 'bymonth' (line 494)
        bymonth_316229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 11), 'bymonth')
        # Getting the type of 'None' (line 494)
        None_316230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 22), 'None')
        
        (may_be_316231, more_types_in_union_316232) = may_be_none(bymonth_316229, None_316230)

        if may_be_316231:

            if more_types_in_union_316232:
                # Runtime conditional SSA (line 494)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 495):
            
            # Assigning a Name to a Attribute (line 495):
            # Getting the type of 'None' (line 495)
            None_316233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 28), 'None')
            # Getting the type of 'self' (line 495)
            self_316234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'self')
            # Setting the type of the member '_bymonth' of a type (line 495)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 12), self_316234, '_bymonth', None_316233)

            if more_types_in_union_316232:
                # Runtime conditional SSA for else branch (line 494)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316231) or more_types_in_union_316232):
            
            
            # Call to isinstance(...): (line 497)
            # Processing the call arguments (line 497)
            # Getting the type of 'bymonth' (line 497)
            bymonth_316236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 26), 'bymonth', False)
            # Getting the type of 'integer_types' (line 497)
            integer_types_316237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 35), 'integer_types', False)
            # Processing the call keyword arguments (line 497)
            kwargs_316238 = {}
            # Getting the type of 'isinstance' (line 497)
            isinstance_316235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 497)
            isinstance_call_result_316239 = invoke(stypy.reporting.localization.Localization(__file__, 497, 15), isinstance_316235, *[bymonth_316236, integer_types_316237], **kwargs_316238)
            
            # Testing the type of an if condition (line 497)
            if_condition_316240 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 497, 12), isinstance_call_result_316239)
            # Assigning a type to the variable 'if_condition_316240' (line 497)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'if_condition_316240', if_condition_316240)
            # SSA begins for if statement (line 497)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 498):
            
            # Assigning a Tuple to a Name (line 498):
            
            # Obtaining an instance of the builtin type 'tuple' (line 498)
            tuple_316241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 498)
            # Adding element type (line 498)
            # Getting the type of 'bymonth' (line 498)
            bymonth_316242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 27), 'bymonth')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 498, 27), tuple_316241, bymonth_316242)
            
            # Assigning a type to the variable 'bymonth' (line 498)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 16), 'bymonth', tuple_316241)
            # SSA join for if statement (line 497)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 500):
            
            # Assigning a Call to a Attribute (line 500):
            
            # Call to tuple(...): (line 500)
            # Processing the call arguments (line 500)
            
            # Call to sorted(...): (line 500)
            # Processing the call arguments (line 500)
            
            # Call to set(...): (line 500)
            # Processing the call arguments (line 500)
            # Getting the type of 'bymonth' (line 500)
            bymonth_316246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 45), 'bymonth', False)
            # Processing the call keyword arguments (line 500)
            kwargs_316247 = {}
            # Getting the type of 'set' (line 500)
            set_316245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 41), 'set', False)
            # Calling set(args, kwargs) (line 500)
            set_call_result_316248 = invoke(stypy.reporting.localization.Localization(__file__, 500, 41), set_316245, *[bymonth_316246], **kwargs_316247)
            
            # Processing the call keyword arguments (line 500)
            kwargs_316249 = {}
            # Getting the type of 'sorted' (line 500)
            sorted_316244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 34), 'sorted', False)
            # Calling sorted(args, kwargs) (line 500)
            sorted_call_result_316250 = invoke(stypy.reporting.localization.Localization(__file__, 500, 34), sorted_316244, *[set_call_result_316248], **kwargs_316249)
            
            # Processing the call keyword arguments (line 500)
            kwargs_316251 = {}
            # Getting the type of 'tuple' (line 500)
            tuple_316243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 28), 'tuple', False)
            # Calling tuple(args, kwargs) (line 500)
            tuple_call_result_316252 = invoke(stypy.reporting.localization.Localization(__file__, 500, 28), tuple_316243, *[sorted_call_result_316250], **kwargs_316251)
            
            # Getting the type of 'self' (line 500)
            self_316253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'self')
            # Setting the type of the member '_bymonth' of a type (line 500)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 12), self_316253, '_bymonth', tuple_call_result_316252)
            
            
            str_316254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 15), 'str', 'bymonth')
            # Getting the type of 'self' (line 502)
            self_316255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 32), 'self')
            # Obtaining the member '_original_rule' of a type (line 502)
            _original_rule_316256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 32), self_316255, '_original_rule')
            # Applying the binary operator 'notin' (line 502)
            result_contains_316257 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 15), 'notin', str_316254, _original_rule_316256)
            
            # Testing the type of an if condition (line 502)
            if_condition_316258 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 502, 12), result_contains_316257)
            # Assigning a type to the variable 'if_condition_316258' (line 502)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 12), 'if_condition_316258', if_condition_316258)
            # SSA begins for if statement (line 502)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Attribute to a Subscript (line 503):
            
            # Assigning a Attribute to a Subscript (line 503):
            # Getting the type of 'self' (line 503)
            self_316259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 49), 'self')
            # Obtaining the member '_bymonth' of a type (line 503)
            _bymonth_316260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 49), self_316259, '_bymonth')
            # Getting the type of 'self' (line 503)
            self_316261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 16), 'self')
            # Obtaining the member '_original_rule' of a type (line 503)
            _original_rule_316262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 16), self_316261, '_original_rule')
            str_316263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 36), 'str', 'bymonth')
            # Storing an element on a container (line 503)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 16), _original_rule_316262, (str_316263, _bymonth_316260))
            # SSA join for if statement (line 502)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_316231 and more_types_in_union_316232):
                # SSA join for if statement (line 494)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 506)
        # Getting the type of 'byyearday' (line 506)
        byyearday_316264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 11), 'byyearday')
        # Getting the type of 'None' (line 506)
        None_316265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 24), 'None')
        
        (may_be_316266, more_types_in_union_316267) = may_be_none(byyearday_316264, None_316265)

        if may_be_316266:

            if more_types_in_union_316267:
                # Runtime conditional SSA (line 506)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 507):
            
            # Assigning a Name to a Attribute (line 507):
            # Getting the type of 'None' (line 507)
            None_316268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 30), 'None')
            # Getting the type of 'self' (line 507)
            self_316269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 12), 'self')
            # Setting the type of the member '_byyearday' of a type (line 507)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 12), self_316269, '_byyearday', None_316268)

            if more_types_in_union_316267:
                # Runtime conditional SSA for else branch (line 506)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316266) or more_types_in_union_316267):
            
            
            # Call to isinstance(...): (line 509)
            # Processing the call arguments (line 509)
            # Getting the type of 'byyearday' (line 509)
            byyearday_316271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 26), 'byyearday', False)
            # Getting the type of 'integer_types' (line 509)
            integer_types_316272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 37), 'integer_types', False)
            # Processing the call keyword arguments (line 509)
            kwargs_316273 = {}
            # Getting the type of 'isinstance' (line 509)
            isinstance_316270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 509)
            isinstance_call_result_316274 = invoke(stypy.reporting.localization.Localization(__file__, 509, 15), isinstance_316270, *[byyearday_316271, integer_types_316272], **kwargs_316273)
            
            # Testing the type of an if condition (line 509)
            if_condition_316275 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 509, 12), isinstance_call_result_316274)
            # Assigning a type to the variable 'if_condition_316275' (line 509)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 12), 'if_condition_316275', if_condition_316275)
            # SSA begins for if statement (line 509)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 510):
            
            # Assigning a Tuple to a Name (line 510):
            
            # Obtaining an instance of the builtin type 'tuple' (line 510)
            tuple_316276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 510)
            # Adding element type (line 510)
            # Getting the type of 'byyearday' (line 510)
            byyearday_316277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 29), 'byyearday')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 510, 29), tuple_316276, byyearday_316277)
            
            # Assigning a type to the variable 'byyearday' (line 510)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 16), 'byyearday', tuple_316276)
            # SSA join for if statement (line 509)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 512):
            
            # Assigning a Call to a Attribute (line 512):
            
            # Call to tuple(...): (line 512)
            # Processing the call arguments (line 512)
            
            # Call to sorted(...): (line 512)
            # Processing the call arguments (line 512)
            
            # Call to set(...): (line 512)
            # Processing the call arguments (line 512)
            # Getting the type of 'byyearday' (line 512)
            byyearday_316281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 47), 'byyearday', False)
            # Processing the call keyword arguments (line 512)
            kwargs_316282 = {}
            # Getting the type of 'set' (line 512)
            set_316280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 43), 'set', False)
            # Calling set(args, kwargs) (line 512)
            set_call_result_316283 = invoke(stypy.reporting.localization.Localization(__file__, 512, 43), set_316280, *[byyearday_316281], **kwargs_316282)
            
            # Processing the call keyword arguments (line 512)
            kwargs_316284 = {}
            # Getting the type of 'sorted' (line 512)
            sorted_316279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 36), 'sorted', False)
            # Calling sorted(args, kwargs) (line 512)
            sorted_call_result_316285 = invoke(stypy.reporting.localization.Localization(__file__, 512, 36), sorted_316279, *[set_call_result_316283], **kwargs_316284)
            
            # Processing the call keyword arguments (line 512)
            kwargs_316286 = {}
            # Getting the type of 'tuple' (line 512)
            tuple_316278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 30), 'tuple', False)
            # Calling tuple(args, kwargs) (line 512)
            tuple_call_result_316287 = invoke(stypy.reporting.localization.Localization(__file__, 512, 30), tuple_316278, *[sorted_call_result_316285], **kwargs_316286)
            
            # Getting the type of 'self' (line 512)
            self_316288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'self')
            # Setting the type of the member '_byyearday' of a type (line 512)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 12), self_316288, '_byyearday', tuple_call_result_316287)
            
            # Assigning a Attribute to a Subscript (line 513):
            
            # Assigning a Attribute to a Subscript (line 513):
            # Getting the type of 'self' (line 513)
            self_316289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 47), 'self')
            # Obtaining the member '_byyearday' of a type (line 513)
            _byyearday_316290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 47), self_316289, '_byyearday')
            # Getting the type of 'self' (line 513)
            self_316291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 12), 'self')
            # Obtaining the member '_original_rule' of a type (line 513)
            _original_rule_316292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 12), self_316291, '_original_rule')
            str_316293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 32), 'str', 'byyearday')
            # Storing an element on a container (line 513)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 513, 12), _original_rule_316292, (str_316293, _byyearday_316290))

            if (may_be_316266 and more_types_in_union_316267):
                # SSA join for if statement (line 506)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 516)
        # Getting the type of 'byeaster' (line 516)
        byeaster_316294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'byeaster')
        # Getting the type of 'None' (line 516)
        None_316295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 27), 'None')
        
        (may_be_316296, more_types_in_union_316297) = may_not_be_none(byeaster_316294, None_316295)

        if may_be_316296:

            if more_types_in_union_316297:
                # Runtime conditional SSA (line 516)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'easter' (line 517)
            easter_316298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 19), 'easter')
            # Applying the 'not' unary operator (line 517)
            result_not__316299 = python_operator(stypy.reporting.localization.Localization(__file__, 517, 15), 'not', easter_316298)
            
            # Testing the type of an if condition (line 517)
            if_condition_316300 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 517, 12), result_not__316299)
            # Assigning a type to the variable 'if_condition_316300' (line 517)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'if_condition_316300', if_condition_316300)
            # SSA begins for if statement (line 517)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 518, 16))
            
            # 'from dateutil import easter' statement (line 518)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
            import_316301 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 518, 16), 'dateutil')

            if (type(import_316301) is not StypyTypeError):

                if (import_316301 != 'pyd_module'):
                    __import__(import_316301)
                    sys_modules_316302 = sys.modules[import_316301]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 518, 16), 'dateutil', sys_modules_316302.module_type_store, module_type_store, ['easter'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 518, 16), __file__, sys_modules_316302, sys_modules_316302.module_type_store, module_type_store)
                else:
                    from dateutil import easter

                    import_from_module(stypy.reporting.localization.Localization(__file__, 518, 16), 'dateutil', None, module_type_store, ['easter'], [easter])

            else:
                # Assigning a type to the variable 'dateutil' (line 518)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 16), 'dateutil', import_316301)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')
            
            # SSA join for if statement (line 517)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Call to isinstance(...): (line 519)
            # Processing the call arguments (line 519)
            # Getting the type of 'byeaster' (line 519)
            byeaster_316304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 26), 'byeaster', False)
            # Getting the type of 'integer_types' (line 519)
            integer_types_316305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 36), 'integer_types', False)
            # Processing the call keyword arguments (line 519)
            kwargs_316306 = {}
            # Getting the type of 'isinstance' (line 519)
            isinstance_316303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 519)
            isinstance_call_result_316307 = invoke(stypy.reporting.localization.Localization(__file__, 519, 15), isinstance_316303, *[byeaster_316304, integer_types_316305], **kwargs_316306)
            
            # Testing the type of an if condition (line 519)
            if_condition_316308 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 519, 12), isinstance_call_result_316307)
            # Assigning a type to the variable 'if_condition_316308' (line 519)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'if_condition_316308', if_condition_316308)
            # SSA begins for if statement (line 519)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Attribute (line 520):
            
            # Assigning a Tuple to a Attribute (line 520):
            
            # Obtaining an instance of the builtin type 'tuple' (line 520)
            tuple_316309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 34), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 520)
            # Adding element type (line 520)
            # Getting the type of 'byeaster' (line 520)
            byeaster_316310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 34), 'byeaster')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 520, 34), tuple_316309, byeaster_316310)
            
            # Getting the type of 'self' (line 520)
            self_316311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 16), 'self')
            # Setting the type of the member '_byeaster' of a type (line 520)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 16), self_316311, '_byeaster', tuple_316309)
            # SSA branch for the else part of an if statement (line 519)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 522):
            
            # Assigning a Call to a Attribute (line 522):
            
            # Call to tuple(...): (line 522)
            # Processing the call arguments (line 522)
            
            # Call to sorted(...): (line 522)
            # Processing the call arguments (line 522)
            # Getting the type of 'byeaster' (line 522)
            byeaster_316314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 46), 'byeaster', False)
            # Processing the call keyword arguments (line 522)
            kwargs_316315 = {}
            # Getting the type of 'sorted' (line 522)
            sorted_316313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 39), 'sorted', False)
            # Calling sorted(args, kwargs) (line 522)
            sorted_call_result_316316 = invoke(stypy.reporting.localization.Localization(__file__, 522, 39), sorted_316313, *[byeaster_316314], **kwargs_316315)
            
            # Processing the call keyword arguments (line 522)
            kwargs_316317 = {}
            # Getting the type of 'tuple' (line 522)
            tuple_316312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 33), 'tuple', False)
            # Calling tuple(args, kwargs) (line 522)
            tuple_call_result_316318 = invoke(stypy.reporting.localization.Localization(__file__, 522, 33), tuple_316312, *[sorted_call_result_316316], **kwargs_316317)
            
            # Getting the type of 'self' (line 522)
            self_316319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 16), 'self')
            # Setting the type of the member '_byeaster' of a type (line 522)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 16), self_316319, '_byeaster', tuple_call_result_316318)
            # SSA join for if statement (line 519)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Attribute to a Subscript (line 524):
            
            # Assigning a Attribute to a Subscript (line 524):
            # Getting the type of 'self' (line 524)
            self_316320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 46), 'self')
            # Obtaining the member '_byeaster' of a type (line 524)
            _byeaster_316321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 46), self_316320, '_byeaster')
            # Getting the type of 'self' (line 524)
            self_316322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'self')
            # Obtaining the member '_original_rule' of a type (line 524)
            _original_rule_316323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 12), self_316322, '_original_rule')
            str_316324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 32), 'str', 'byeaster')
            # Storing an element on a container (line 524)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 524, 12), _original_rule_316323, (str_316324, _byeaster_316321))

            if more_types_in_union_316297:
                # Runtime conditional SSA for else branch (line 516)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316296) or more_types_in_union_316297):
            
            # Assigning a Name to a Attribute (line 526):
            
            # Assigning a Name to a Attribute (line 526):
            # Getting the type of 'None' (line 526)
            None_316325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 29), 'None')
            # Getting the type of 'self' (line 526)
            self_316326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 12), 'self')
            # Setting the type of the member '_byeaster' of a type (line 526)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 12), self_316326, '_byeaster', None_316325)

            if (may_be_316296 and more_types_in_union_316297):
                # SSA join for if statement (line 516)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 529)
        # Getting the type of 'bymonthday' (line 529)
        bymonthday_316327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 11), 'bymonthday')
        # Getting the type of 'None' (line 529)
        None_316328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 25), 'None')
        
        (may_be_316329, more_types_in_union_316330) = may_be_none(bymonthday_316327, None_316328)

        if may_be_316329:

            if more_types_in_union_316330:
                # Runtime conditional SSA (line 529)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Tuple to a Attribute (line 530):
            
            # Assigning a Tuple to a Attribute (line 530):
            
            # Obtaining an instance of the builtin type 'tuple' (line 530)
            tuple_316331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 530, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 530)
            
            # Getting the type of 'self' (line 530)
            self_316332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 12), 'self')
            # Setting the type of the member '_bymonthday' of a type (line 530)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 12), self_316332, '_bymonthday', tuple_316331)
            
            # Assigning a Tuple to a Attribute (line 531):
            
            # Assigning a Tuple to a Attribute (line 531):
            
            # Obtaining an instance of the builtin type 'tuple' (line 531)
            tuple_316333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 32), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 531)
            
            # Getting the type of 'self' (line 531)
            self_316334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 12), 'self')
            # Setting the type of the member '_bynmonthday' of a type (line 531)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 12), self_316334, '_bynmonthday', tuple_316333)

            if more_types_in_union_316330:
                # Runtime conditional SSA for else branch (line 529)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316329) or more_types_in_union_316330):
            
            
            # Call to isinstance(...): (line 533)
            # Processing the call arguments (line 533)
            # Getting the type of 'bymonthday' (line 533)
            bymonthday_316336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 26), 'bymonthday', False)
            # Getting the type of 'integer_types' (line 533)
            integer_types_316337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 38), 'integer_types', False)
            # Processing the call keyword arguments (line 533)
            kwargs_316338 = {}
            # Getting the type of 'isinstance' (line 533)
            isinstance_316335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 533)
            isinstance_call_result_316339 = invoke(stypy.reporting.localization.Localization(__file__, 533, 15), isinstance_316335, *[bymonthday_316336, integer_types_316337], **kwargs_316338)
            
            # Testing the type of an if condition (line 533)
            if_condition_316340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 533, 12), isinstance_call_result_316339)
            # Assigning a type to the variable 'if_condition_316340' (line 533)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'if_condition_316340', if_condition_316340)
            # SSA begins for if statement (line 533)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 534):
            
            # Assigning a Tuple to a Name (line 534):
            
            # Obtaining an instance of the builtin type 'tuple' (line 534)
            tuple_316341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 30), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 534)
            # Adding element type (line 534)
            # Getting the type of 'bymonthday' (line 534)
            bymonthday_316342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 30), 'bymonthday')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 534, 30), tuple_316341, bymonthday_316342)
            
            # Assigning a type to the variable 'bymonthday' (line 534)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 16), 'bymonthday', tuple_316341)
            # SSA join for if statement (line 533)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 536):
            
            # Assigning a Call to a Name (line 536):
            
            # Call to set(...): (line 536)
            # Processing the call arguments (line 536)
            # Getting the type of 'bymonthday' (line 536)
            bymonthday_316344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 29), 'bymonthday', False)
            # Processing the call keyword arguments (line 536)
            kwargs_316345 = {}
            # Getting the type of 'set' (line 536)
            set_316343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 25), 'set', False)
            # Calling set(args, kwargs) (line 536)
            set_call_result_316346 = invoke(stypy.reporting.localization.Localization(__file__, 536, 25), set_316343, *[bymonthday_316344], **kwargs_316345)
            
            # Assigning a type to the variable 'bymonthday' (line 536)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 12), 'bymonthday', set_call_result_316346)
            
            # Assigning a Call to a Attribute (line 538):
            
            # Assigning a Call to a Attribute (line 538):
            
            # Call to tuple(...): (line 538)
            # Processing the call arguments (line 538)
            
            # Call to sorted(...): (line 538)
            # Processing the call arguments (line 538)
            # Calculating generator expression
            module_type_store = module_type_store.open_function_context('list comprehension expression', 538, 44, True)
            # Calculating comprehension expression
            # Getting the type of 'bymonthday' (line 538)
            bymonthday_316353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 55), 'bymonthday', False)
            comprehension_316354 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 44), bymonthday_316353)
            # Assigning a type to the variable 'x' (line 538)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 44), 'x', comprehension_316354)
            
            # Getting the type of 'x' (line 538)
            x_316350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 69), 'x', False)
            int_316351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 73), 'int')
            # Applying the binary operator '>' (line 538)
            result_gt_316352 = python_operator(stypy.reporting.localization.Localization(__file__, 538, 69), '>', x_316350, int_316351)
            
            # Getting the type of 'x' (line 538)
            x_316349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 44), 'x', False)
            list_316355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 44), 'list')
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 44), list_316355, x_316349)
            # Processing the call keyword arguments (line 538)
            kwargs_316356 = {}
            # Getting the type of 'sorted' (line 538)
            sorted_316348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 37), 'sorted', False)
            # Calling sorted(args, kwargs) (line 538)
            sorted_call_result_316357 = invoke(stypy.reporting.localization.Localization(__file__, 538, 37), sorted_316348, *[list_316355], **kwargs_316356)
            
            # Processing the call keyword arguments (line 538)
            kwargs_316358 = {}
            # Getting the type of 'tuple' (line 538)
            tuple_316347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 31), 'tuple', False)
            # Calling tuple(args, kwargs) (line 538)
            tuple_call_result_316359 = invoke(stypy.reporting.localization.Localization(__file__, 538, 31), tuple_316347, *[sorted_call_result_316357], **kwargs_316358)
            
            # Getting the type of 'self' (line 538)
            self_316360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 12), 'self')
            # Setting the type of the member '_bymonthday' of a type (line 538)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 12), self_316360, '_bymonthday', tuple_call_result_316359)
            
            # Assigning a Call to a Attribute (line 539):
            
            # Assigning a Call to a Attribute (line 539):
            
            # Call to tuple(...): (line 539)
            # Processing the call arguments (line 539)
            
            # Call to sorted(...): (line 539)
            # Processing the call arguments (line 539)
            # Calculating generator expression
            module_type_store = module_type_store.open_function_context('list comprehension expression', 539, 45, True)
            # Calculating comprehension expression
            # Getting the type of 'bymonthday' (line 539)
            bymonthday_316367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 56), 'bymonthday', False)
            comprehension_316368 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 45), bymonthday_316367)
            # Assigning a type to the variable 'x' (line 539)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 45), 'x', comprehension_316368)
            
            # Getting the type of 'x' (line 539)
            x_316364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 70), 'x', False)
            int_316365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 74), 'int')
            # Applying the binary operator '<' (line 539)
            result_lt_316366 = python_operator(stypy.reporting.localization.Localization(__file__, 539, 70), '<', x_316364, int_316365)
            
            # Getting the type of 'x' (line 539)
            x_316363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 45), 'x', False)
            list_316369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 45), 'list')
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 539, 45), list_316369, x_316363)
            # Processing the call keyword arguments (line 539)
            kwargs_316370 = {}
            # Getting the type of 'sorted' (line 539)
            sorted_316362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 38), 'sorted', False)
            # Calling sorted(args, kwargs) (line 539)
            sorted_call_result_316371 = invoke(stypy.reporting.localization.Localization(__file__, 539, 38), sorted_316362, *[list_316369], **kwargs_316370)
            
            # Processing the call keyword arguments (line 539)
            kwargs_316372 = {}
            # Getting the type of 'tuple' (line 539)
            tuple_316361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 32), 'tuple', False)
            # Calling tuple(args, kwargs) (line 539)
            tuple_call_result_316373 = invoke(stypy.reporting.localization.Localization(__file__, 539, 32), tuple_316361, *[sorted_call_result_316371], **kwargs_316372)
            
            # Getting the type of 'self' (line 539)
            self_316374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 12), 'self')
            # Setting the type of the member '_bynmonthday' of a type (line 539)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 12), self_316374, '_bynmonthday', tuple_call_result_316373)
            
            
            str_316375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 15), 'str', 'bymonthday')
            # Getting the type of 'self' (line 542)
            self_316376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 35), 'self')
            # Obtaining the member '_original_rule' of a type (line 542)
            _original_rule_316377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 35), self_316376, '_original_rule')
            # Applying the binary operator 'notin' (line 542)
            result_contains_316378 = python_operator(stypy.reporting.localization.Localization(__file__, 542, 15), 'notin', str_316375, _original_rule_316377)
            
            # Testing the type of an if condition (line 542)
            if_condition_316379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 542, 12), result_contains_316378)
            # Assigning a type to the variable 'if_condition_316379' (line 542)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 12), 'if_condition_316379', if_condition_316379)
            # SSA begins for if statement (line 542)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Subscript (line 543):
            
            # Assigning a Call to a Subscript (line 543):
            
            # Call to tuple(...): (line 543)
            # Processing the call arguments (line 543)
            
            # Call to chain(...): (line 544)
            # Processing the call arguments (line 544)
            # Getting the type of 'self' (line 544)
            self_316383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 36), 'self', False)
            # Obtaining the member '_bymonthday' of a type (line 544)
            _bymonthday_316384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 36), self_316383, '_bymonthday')
            # Getting the type of 'self' (line 544)
            self_316385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 54), 'self', False)
            # Obtaining the member '_bynmonthday' of a type (line 544)
            _bynmonthday_316386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 54), self_316385, '_bynmonthday')
            # Processing the call keyword arguments (line 544)
            kwargs_316387 = {}
            # Getting the type of 'itertools' (line 544)
            itertools_316381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 20), 'itertools', False)
            # Obtaining the member 'chain' of a type (line 544)
            chain_316382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 20), itertools_316381, 'chain')
            # Calling chain(args, kwargs) (line 544)
            chain_call_result_316388 = invoke(stypy.reporting.localization.Localization(__file__, 544, 20), chain_316382, *[_bymonthday_316384, _bynmonthday_316386], **kwargs_316387)
            
            # Processing the call keyword arguments (line 543)
            kwargs_316389 = {}
            # Getting the type of 'tuple' (line 543)
            tuple_316380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 52), 'tuple', False)
            # Calling tuple(args, kwargs) (line 543)
            tuple_call_result_316390 = invoke(stypy.reporting.localization.Localization(__file__, 543, 52), tuple_316380, *[chain_call_result_316388], **kwargs_316389)
            
            # Getting the type of 'self' (line 543)
            self_316391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 16), 'self')
            # Obtaining the member '_original_rule' of a type (line 543)
            _original_rule_316392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 16), self_316391, '_original_rule')
            str_316393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 36), 'str', 'bymonthday')
            # Storing an element on a container (line 543)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 16), _original_rule_316392, (str_316393, tuple_call_result_316390))
            # SSA join for if statement (line 542)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_316329 and more_types_in_union_316330):
                # SSA join for if statement (line 529)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 547)
        # Getting the type of 'byweekno' (line 547)
        byweekno_316394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 11), 'byweekno')
        # Getting the type of 'None' (line 547)
        None_316395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 23), 'None')
        
        (may_be_316396, more_types_in_union_316397) = may_be_none(byweekno_316394, None_316395)

        if may_be_316396:

            if more_types_in_union_316397:
                # Runtime conditional SSA (line 547)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 548):
            
            # Assigning a Name to a Attribute (line 548):
            # Getting the type of 'None' (line 548)
            None_316398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 29), 'None')
            # Getting the type of 'self' (line 548)
            self_316399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 12), 'self')
            # Setting the type of the member '_byweekno' of a type (line 548)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 12), self_316399, '_byweekno', None_316398)

            if more_types_in_union_316397:
                # Runtime conditional SSA for else branch (line 547)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316396) or more_types_in_union_316397):
            
            
            # Call to isinstance(...): (line 550)
            # Processing the call arguments (line 550)
            # Getting the type of 'byweekno' (line 550)
            byweekno_316401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 26), 'byweekno', False)
            # Getting the type of 'integer_types' (line 550)
            integer_types_316402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 36), 'integer_types', False)
            # Processing the call keyword arguments (line 550)
            kwargs_316403 = {}
            # Getting the type of 'isinstance' (line 550)
            isinstance_316400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 550)
            isinstance_call_result_316404 = invoke(stypy.reporting.localization.Localization(__file__, 550, 15), isinstance_316400, *[byweekno_316401, integer_types_316402], **kwargs_316403)
            
            # Testing the type of an if condition (line 550)
            if_condition_316405 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 550, 12), isinstance_call_result_316404)
            # Assigning a type to the variable 'if_condition_316405' (line 550)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 12), 'if_condition_316405', if_condition_316405)
            # SSA begins for if statement (line 550)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 551):
            
            # Assigning a Tuple to a Name (line 551):
            
            # Obtaining an instance of the builtin type 'tuple' (line 551)
            tuple_316406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 551)
            # Adding element type (line 551)
            # Getting the type of 'byweekno' (line 551)
            byweekno_316407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 28), 'byweekno')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 551, 28), tuple_316406, byweekno_316407)
            
            # Assigning a type to the variable 'byweekno' (line 551)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 16), 'byweekno', tuple_316406)
            # SSA join for if statement (line 550)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 553):
            
            # Assigning a Call to a Attribute (line 553):
            
            # Call to tuple(...): (line 553)
            # Processing the call arguments (line 553)
            
            # Call to sorted(...): (line 553)
            # Processing the call arguments (line 553)
            
            # Call to set(...): (line 553)
            # Processing the call arguments (line 553)
            # Getting the type of 'byweekno' (line 553)
            byweekno_316411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 46), 'byweekno', False)
            # Processing the call keyword arguments (line 553)
            kwargs_316412 = {}
            # Getting the type of 'set' (line 553)
            set_316410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 42), 'set', False)
            # Calling set(args, kwargs) (line 553)
            set_call_result_316413 = invoke(stypy.reporting.localization.Localization(__file__, 553, 42), set_316410, *[byweekno_316411], **kwargs_316412)
            
            # Processing the call keyword arguments (line 553)
            kwargs_316414 = {}
            # Getting the type of 'sorted' (line 553)
            sorted_316409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 35), 'sorted', False)
            # Calling sorted(args, kwargs) (line 553)
            sorted_call_result_316415 = invoke(stypy.reporting.localization.Localization(__file__, 553, 35), sorted_316409, *[set_call_result_316413], **kwargs_316414)
            
            # Processing the call keyword arguments (line 553)
            kwargs_316416 = {}
            # Getting the type of 'tuple' (line 553)
            tuple_316408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 29), 'tuple', False)
            # Calling tuple(args, kwargs) (line 553)
            tuple_call_result_316417 = invoke(stypy.reporting.localization.Localization(__file__, 553, 29), tuple_316408, *[sorted_call_result_316415], **kwargs_316416)
            
            # Getting the type of 'self' (line 553)
            self_316418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 12), 'self')
            # Setting the type of the member '_byweekno' of a type (line 553)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 12), self_316418, '_byweekno', tuple_call_result_316417)
            
            # Assigning a Attribute to a Subscript (line 555):
            
            # Assigning a Attribute to a Subscript (line 555):
            # Getting the type of 'self' (line 555)
            self_316419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 46), 'self')
            # Obtaining the member '_byweekno' of a type (line 555)
            _byweekno_316420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 46), self_316419, '_byweekno')
            # Getting the type of 'self' (line 555)
            self_316421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 12), 'self')
            # Obtaining the member '_original_rule' of a type (line 555)
            _original_rule_316422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 12), self_316421, '_original_rule')
            str_316423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 32), 'str', 'byweekno')
            # Storing an element on a container (line 555)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 555, 12), _original_rule_316422, (str_316423, _byweekno_316420))

            if (may_be_316396 and more_types_in_union_316397):
                # SSA join for if statement (line 547)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 558)
        # Getting the type of 'byweekday' (line 558)
        byweekday_316424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 11), 'byweekday')
        # Getting the type of 'None' (line 558)
        None_316425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 24), 'None')
        
        (may_be_316426, more_types_in_union_316427) = may_be_none(byweekday_316424, None_316425)

        if may_be_316426:

            if more_types_in_union_316427:
                # Runtime conditional SSA (line 558)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 559):
            
            # Assigning a Name to a Attribute (line 559):
            # Getting the type of 'None' (line 559)
            None_316428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 30), 'None')
            # Getting the type of 'self' (line 559)
            self_316429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 12), 'self')
            # Setting the type of the member '_byweekday' of a type (line 559)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 12), self_316429, '_byweekday', None_316428)
            
            # Assigning a Name to a Attribute (line 560):
            
            # Assigning a Name to a Attribute (line 560):
            # Getting the type of 'None' (line 560)
            None_316430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 31), 'None')
            # Getting the type of 'self' (line 560)
            self_316431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 12), 'self')
            # Setting the type of the member '_bynweekday' of a type (line 560)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 12), self_316431, '_bynweekday', None_316430)

            if more_types_in_union_316427:
                # Runtime conditional SSA for else branch (line 558)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316426) or more_types_in_union_316427):
            
            
            # Evaluating a boolean operation
            
            # Call to isinstance(...): (line 565)
            # Processing the call arguments (line 565)
            # Getting the type of 'byweekday' (line 565)
            byweekday_316433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 26), 'byweekday', False)
            # Getting the type of 'integer_types' (line 565)
            integer_types_316434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 37), 'integer_types', False)
            # Processing the call keyword arguments (line 565)
            kwargs_316435 = {}
            # Getting the type of 'isinstance' (line 565)
            isinstance_316432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 565)
            isinstance_call_result_316436 = invoke(stypy.reporting.localization.Localization(__file__, 565, 15), isinstance_316432, *[byweekday_316433, integer_types_316434], **kwargs_316435)
            
            
            # Call to hasattr(...): (line 565)
            # Processing the call arguments (line 565)
            # Getting the type of 'byweekday' (line 565)
            byweekday_316438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 63), 'byweekday', False)
            str_316439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 74), 'str', 'n')
            # Processing the call keyword arguments (line 565)
            kwargs_316440 = {}
            # Getting the type of 'hasattr' (line 565)
            hasattr_316437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 55), 'hasattr', False)
            # Calling hasattr(args, kwargs) (line 565)
            hasattr_call_result_316441 = invoke(stypy.reporting.localization.Localization(__file__, 565, 55), hasattr_316437, *[byweekday_316438, str_316439], **kwargs_316440)
            
            # Applying the binary operator 'or' (line 565)
            result_or_keyword_316442 = python_operator(stypy.reporting.localization.Localization(__file__, 565, 15), 'or', isinstance_call_result_316436, hasattr_call_result_316441)
            
            # Testing the type of an if condition (line 565)
            if_condition_316443 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 565, 12), result_or_keyword_316442)
            # Assigning a type to the variable 'if_condition_316443' (line 565)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 12), 'if_condition_316443', if_condition_316443)
            # SSA begins for if statement (line 565)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 566):
            
            # Assigning a Tuple to a Name (line 566):
            
            # Obtaining an instance of the builtin type 'tuple' (line 566)
            tuple_316444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, 29), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 566)
            # Adding element type (line 566)
            # Getting the type of 'byweekday' (line 566)
            byweekday_316445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 29), 'byweekday')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 566, 29), tuple_316444, byweekday_316445)
            
            # Assigning a type to the variable 'byweekday' (line 566)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 16), 'byweekday', tuple_316444)
            # SSA join for if statement (line 565)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 568):
            
            # Assigning a Call to a Attribute (line 568):
            
            # Call to set(...): (line 568)
            # Processing the call keyword arguments (line 568)
            kwargs_316447 = {}
            # Getting the type of 'set' (line 568)
            set_316446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 30), 'set', False)
            # Calling set(args, kwargs) (line 568)
            set_call_result_316448 = invoke(stypy.reporting.localization.Localization(__file__, 568, 30), set_316446, *[], **kwargs_316447)
            
            # Getting the type of 'self' (line 568)
            self_316449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 12), 'self')
            # Setting the type of the member '_byweekday' of a type (line 568)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 12), self_316449, '_byweekday', set_call_result_316448)
            
            # Assigning a Call to a Attribute (line 569):
            
            # Assigning a Call to a Attribute (line 569):
            
            # Call to set(...): (line 569)
            # Processing the call keyword arguments (line 569)
            kwargs_316451 = {}
            # Getting the type of 'set' (line 569)
            set_316450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 31), 'set', False)
            # Calling set(args, kwargs) (line 569)
            set_call_result_316452 = invoke(stypy.reporting.localization.Localization(__file__, 569, 31), set_316450, *[], **kwargs_316451)
            
            # Getting the type of 'self' (line 569)
            self_316453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'self')
            # Setting the type of the member '_bynweekday' of a type (line 569)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 12), self_316453, '_bynweekday', set_call_result_316452)
            
            # Getting the type of 'byweekday' (line 570)
            byweekday_316454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 24), 'byweekday')
            # Testing the type of a for loop iterable (line 570)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 570, 12), byweekday_316454)
            # Getting the type of the for loop variable (line 570)
            for_loop_var_316455 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 570, 12), byweekday_316454)
            # Assigning a type to the variable 'wday' (line 570)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 12), 'wday', for_loop_var_316455)
            # SSA begins for a for statement (line 570)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Call to isinstance(...): (line 571)
            # Processing the call arguments (line 571)
            # Getting the type of 'wday' (line 571)
            wday_316457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 30), 'wday', False)
            # Getting the type of 'integer_types' (line 571)
            integer_types_316458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 36), 'integer_types', False)
            # Processing the call keyword arguments (line 571)
            kwargs_316459 = {}
            # Getting the type of 'isinstance' (line 571)
            isinstance_316456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 19), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 571)
            isinstance_call_result_316460 = invoke(stypy.reporting.localization.Localization(__file__, 571, 19), isinstance_316456, *[wday_316457, integer_types_316458], **kwargs_316459)
            
            # Testing the type of an if condition (line 571)
            if_condition_316461 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 571, 16), isinstance_call_result_316460)
            # Assigning a type to the variable 'if_condition_316461' (line 571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 16), 'if_condition_316461', if_condition_316461)
            # SSA begins for if statement (line 571)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to add(...): (line 572)
            # Processing the call arguments (line 572)
            # Getting the type of 'wday' (line 572)
            wday_316465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 40), 'wday', False)
            # Processing the call keyword arguments (line 572)
            kwargs_316466 = {}
            # Getting the type of 'self' (line 572)
            self_316462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 20), 'self', False)
            # Obtaining the member '_byweekday' of a type (line 572)
            _byweekday_316463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 20), self_316462, '_byweekday')
            # Obtaining the member 'add' of a type (line 572)
            add_316464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 20), _byweekday_316463, 'add')
            # Calling add(args, kwargs) (line 572)
            add_call_result_316467 = invoke(stypy.reporting.localization.Localization(__file__, 572, 20), add_316464, *[wday_316465], **kwargs_316466)
            
            # SSA branch for the else part of an if statement (line 571)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'wday' (line 573)
            wday_316468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 25), 'wday')
            # Obtaining the member 'n' of a type (line 573)
            n_316469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 25), wday_316468, 'n')
            # Applying the 'not' unary operator (line 573)
            result_not__316470 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 21), 'not', n_316469)
            
            
            # Getting the type of 'freq' (line 573)
            freq_316471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 35), 'freq')
            # Getting the type of 'MONTHLY' (line 573)
            MONTHLY_316472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 42), 'MONTHLY')
            # Applying the binary operator '>' (line 573)
            result_gt_316473 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 35), '>', freq_316471, MONTHLY_316472)
            
            # Applying the binary operator 'or' (line 573)
            result_or_keyword_316474 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 21), 'or', result_not__316470, result_gt_316473)
            
            # Testing the type of an if condition (line 573)
            if_condition_316475 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 573, 21), result_or_keyword_316474)
            # Assigning a type to the variable 'if_condition_316475' (line 573)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 21), 'if_condition_316475', if_condition_316475)
            # SSA begins for if statement (line 573)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to add(...): (line 574)
            # Processing the call arguments (line 574)
            # Getting the type of 'wday' (line 574)
            wday_316479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 40), 'wday', False)
            # Obtaining the member 'weekday' of a type (line 574)
            weekday_316480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 40), wday_316479, 'weekday')
            # Processing the call keyword arguments (line 574)
            kwargs_316481 = {}
            # Getting the type of 'self' (line 574)
            self_316476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 20), 'self', False)
            # Obtaining the member '_byweekday' of a type (line 574)
            _byweekday_316477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 20), self_316476, '_byweekday')
            # Obtaining the member 'add' of a type (line 574)
            add_316478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 20), _byweekday_316477, 'add')
            # Calling add(args, kwargs) (line 574)
            add_call_result_316482 = invoke(stypy.reporting.localization.Localization(__file__, 574, 20), add_316478, *[weekday_316480], **kwargs_316481)
            
            # SSA branch for the else part of an if statement (line 573)
            module_type_store.open_ssa_branch('else')
            
            # Call to add(...): (line 576)
            # Processing the call arguments (line 576)
            
            # Obtaining an instance of the builtin type 'tuple' (line 576)
            tuple_316486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 42), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 576)
            # Adding element type (line 576)
            # Getting the type of 'wday' (line 576)
            wday_316487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 42), 'wday', False)
            # Obtaining the member 'weekday' of a type (line 576)
            weekday_316488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 42), wday_316487, 'weekday')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 42), tuple_316486, weekday_316488)
            # Adding element type (line 576)
            # Getting the type of 'wday' (line 576)
            wday_316489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 56), 'wday', False)
            # Obtaining the member 'n' of a type (line 576)
            n_316490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 56), wday_316489, 'n')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 42), tuple_316486, n_316490)
            
            # Processing the call keyword arguments (line 576)
            kwargs_316491 = {}
            # Getting the type of 'self' (line 576)
            self_316483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 20), 'self', False)
            # Obtaining the member '_bynweekday' of a type (line 576)
            _bynweekday_316484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 20), self_316483, '_bynweekday')
            # Obtaining the member 'add' of a type (line 576)
            add_316485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 20), _bynweekday_316484, 'add')
            # Calling add(args, kwargs) (line 576)
            add_call_result_316492 = invoke(stypy.reporting.localization.Localization(__file__, 576, 20), add_316485, *[tuple_316486], **kwargs_316491)
            
            # SSA join for if statement (line 573)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 571)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'self' (line 578)
            self_316493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 19), 'self')
            # Obtaining the member '_byweekday' of a type (line 578)
            _byweekday_316494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 19), self_316493, '_byweekday')
            # Applying the 'not' unary operator (line 578)
            result_not__316495 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 15), 'not', _byweekday_316494)
            
            # Testing the type of an if condition (line 578)
            if_condition_316496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 578, 12), result_not__316495)
            # Assigning a type to the variable 'if_condition_316496' (line 578)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 12), 'if_condition_316496', if_condition_316496)
            # SSA begins for if statement (line 578)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 579):
            
            # Assigning a Name to a Attribute (line 579):
            # Getting the type of 'None' (line 579)
            None_316497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 34), 'None')
            # Getting the type of 'self' (line 579)
            self_316498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 16), 'self')
            # Setting the type of the member '_byweekday' of a type (line 579)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 16), self_316498, '_byweekday', None_316497)
            # SSA branch for the else part of an if statement (line 578)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'self' (line 580)
            self_316499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 21), 'self')
            # Obtaining the member '_bynweekday' of a type (line 580)
            _bynweekday_316500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 21), self_316499, '_bynweekday')
            # Applying the 'not' unary operator (line 580)
            result_not__316501 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 17), 'not', _bynweekday_316500)
            
            # Testing the type of an if condition (line 580)
            if_condition_316502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 580, 17), result_not__316501)
            # Assigning a type to the variable 'if_condition_316502' (line 580)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 17), 'if_condition_316502', if_condition_316502)
            # SSA begins for if statement (line 580)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 581):
            
            # Assigning a Name to a Attribute (line 581):
            # Getting the type of 'None' (line 581)
            None_316503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 35), 'None')
            # Getting the type of 'self' (line 581)
            self_316504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 16), 'self')
            # Setting the type of the member '_bynweekday' of a type (line 581)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 16), self_316504, '_bynweekday', None_316503)
            # SSA join for if statement (line 580)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 578)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'self' (line 583)
            self_316505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 15), 'self')
            # Obtaining the member '_byweekday' of a type (line 583)
            _byweekday_316506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 15), self_316505, '_byweekday')
            # Getting the type of 'None' (line 583)
            None_316507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 38), 'None')
            # Applying the binary operator 'isnot' (line 583)
            result_is_not_316508 = python_operator(stypy.reporting.localization.Localization(__file__, 583, 15), 'isnot', _byweekday_316506, None_316507)
            
            # Testing the type of an if condition (line 583)
            if_condition_316509 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 583, 12), result_is_not_316508)
            # Assigning a type to the variable 'if_condition_316509' (line 583)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 12), 'if_condition_316509', if_condition_316509)
            # SSA begins for if statement (line 583)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 584):
            
            # Assigning a Call to a Attribute (line 584):
            
            # Call to tuple(...): (line 584)
            # Processing the call arguments (line 584)
            
            # Call to sorted(...): (line 584)
            # Processing the call arguments (line 584)
            # Getting the type of 'self' (line 584)
            self_316512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 47), 'self', False)
            # Obtaining the member '_byweekday' of a type (line 584)
            _byweekday_316513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 47), self_316512, '_byweekday')
            # Processing the call keyword arguments (line 584)
            kwargs_316514 = {}
            # Getting the type of 'sorted' (line 584)
            sorted_316511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 40), 'sorted', False)
            # Calling sorted(args, kwargs) (line 584)
            sorted_call_result_316515 = invoke(stypy.reporting.localization.Localization(__file__, 584, 40), sorted_316511, *[_byweekday_316513], **kwargs_316514)
            
            # Processing the call keyword arguments (line 584)
            kwargs_316516 = {}
            # Getting the type of 'tuple' (line 584)
            tuple_316510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 34), 'tuple', False)
            # Calling tuple(args, kwargs) (line 584)
            tuple_call_result_316517 = invoke(stypy.reporting.localization.Localization(__file__, 584, 34), tuple_316510, *[sorted_call_result_316515], **kwargs_316516)
            
            # Getting the type of 'self' (line 584)
            self_316518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 16), 'self')
            # Setting the type of the member '_byweekday' of a type (line 584)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 16), self_316518, '_byweekday', tuple_call_result_316517)
            
            # Assigning a ListComp to a Name (line 585):
            
            # Assigning a ListComp to a Name (line 585):
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'self' (line 585)
            self_316523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 54), 'self')
            # Obtaining the member '_byweekday' of a type (line 585)
            _byweekday_316524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 54), self_316523, '_byweekday')
            comprehension_316525 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 34), _byweekday_316524)
            # Assigning a type to the variable 'x' (line 585)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 34), 'x', comprehension_316525)
            
            # Call to weekday(...): (line 585)
            # Processing the call arguments (line 585)
            # Getting the type of 'x' (line 585)
            x_316520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 42), 'x', False)
            # Processing the call keyword arguments (line 585)
            kwargs_316521 = {}
            # Getting the type of 'weekday' (line 585)
            weekday_316519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 34), 'weekday', False)
            # Calling weekday(args, kwargs) (line 585)
            weekday_call_result_316522 = invoke(stypy.reporting.localization.Localization(__file__, 585, 34), weekday_316519, *[x_316520], **kwargs_316521)
            
            list_316526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 34), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 585, 34), list_316526, weekday_call_result_316522)
            # Assigning a type to the variable 'orig_byweekday' (line 585)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 16), 'orig_byweekday', list_316526)
            # SSA branch for the else part of an if statement (line 583)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 587):
            
            # Assigning a Call to a Name (line 587):
            
            # Call to tuple(...): (line 587)
            # Processing the call keyword arguments (line 587)
            kwargs_316528 = {}
            # Getting the type of 'tuple' (line 587)
            tuple_316527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 33), 'tuple', False)
            # Calling tuple(args, kwargs) (line 587)
            tuple_call_result_316529 = invoke(stypy.reporting.localization.Localization(__file__, 587, 33), tuple_316527, *[], **kwargs_316528)
            
            # Assigning a type to the variable 'orig_byweekday' (line 587)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 16), 'orig_byweekday', tuple_call_result_316529)
            # SSA join for if statement (line 583)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'self' (line 589)
            self_316530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 15), 'self')
            # Obtaining the member '_bynweekday' of a type (line 589)
            _bynweekday_316531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 15), self_316530, '_bynweekday')
            # Getting the type of 'None' (line 589)
            None_316532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 39), 'None')
            # Applying the binary operator 'isnot' (line 589)
            result_is_not_316533 = python_operator(stypy.reporting.localization.Localization(__file__, 589, 15), 'isnot', _bynweekday_316531, None_316532)
            
            # Testing the type of an if condition (line 589)
            if_condition_316534 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 589, 12), result_is_not_316533)
            # Assigning a type to the variable 'if_condition_316534' (line 589)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 12), 'if_condition_316534', if_condition_316534)
            # SSA begins for if statement (line 589)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 590):
            
            # Assigning a Call to a Attribute (line 590):
            
            # Call to tuple(...): (line 590)
            # Processing the call arguments (line 590)
            
            # Call to sorted(...): (line 590)
            # Processing the call arguments (line 590)
            # Getting the type of 'self' (line 590)
            self_316537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 48), 'self', False)
            # Obtaining the member '_bynweekday' of a type (line 590)
            _bynweekday_316538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 48), self_316537, '_bynweekday')
            # Processing the call keyword arguments (line 590)
            kwargs_316539 = {}
            # Getting the type of 'sorted' (line 590)
            sorted_316536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 41), 'sorted', False)
            # Calling sorted(args, kwargs) (line 590)
            sorted_call_result_316540 = invoke(stypy.reporting.localization.Localization(__file__, 590, 41), sorted_316536, *[_bynweekday_316538], **kwargs_316539)
            
            # Processing the call keyword arguments (line 590)
            kwargs_316541 = {}
            # Getting the type of 'tuple' (line 590)
            tuple_316535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 35), 'tuple', False)
            # Calling tuple(args, kwargs) (line 590)
            tuple_call_result_316542 = invoke(stypy.reporting.localization.Localization(__file__, 590, 35), tuple_316535, *[sorted_call_result_316540], **kwargs_316541)
            
            # Getting the type of 'self' (line 590)
            self_316543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 16), 'self')
            # Setting the type of the member '_bynweekday' of a type (line 590)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 16), self_316543, '_bynweekday', tuple_call_result_316542)
            
            # Assigning a ListComp to a Name (line 591):
            
            # Assigning a ListComp to a Name (line 591):
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'self' (line 591)
            self_316548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 56), 'self')
            # Obtaining the member '_bynweekday' of a type (line 591)
            _bynweekday_316549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 56), self_316548, '_bynweekday')
            comprehension_316550 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 35), _bynweekday_316549)
            # Assigning a type to the variable 'x' (line 591)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 35), 'x', comprehension_316550)
            
            # Call to weekday(...): (line 591)
            # Getting the type of 'x' (line 591)
            x_316545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 44), 'x', False)
            # Processing the call keyword arguments (line 591)
            kwargs_316546 = {}
            # Getting the type of 'weekday' (line 591)
            weekday_316544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 35), 'weekday', False)
            # Calling weekday(args, kwargs) (line 591)
            weekday_call_result_316547 = invoke(stypy.reporting.localization.Localization(__file__, 591, 35), weekday_316544, *[x_316545], **kwargs_316546)
            
            list_316551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 35), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 591, 35), list_316551, weekday_call_result_316547)
            # Assigning a type to the variable 'orig_bynweekday' (line 591)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 16), 'orig_bynweekday', list_316551)
            # SSA branch for the else part of an if statement (line 589)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 593):
            
            # Assigning a Call to a Name (line 593):
            
            # Call to tuple(...): (line 593)
            # Processing the call keyword arguments (line 593)
            kwargs_316553 = {}
            # Getting the type of 'tuple' (line 593)
            tuple_316552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 34), 'tuple', False)
            # Calling tuple(args, kwargs) (line 593)
            tuple_call_result_316554 = invoke(stypy.reporting.localization.Localization(__file__, 593, 34), tuple_316552, *[], **kwargs_316553)
            
            # Assigning a type to the variable 'orig_bynweekday' (line 593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 16), 'orig_bynweekday', tuple_call_result_316554)
            # SSA join for if statement (line 589)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            str_316555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 15), 'str', 'byweekday')
            # Getting the type of 'self' (line 595)
            self_316556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 34), 'self')
            # Obtaining the member '_original_rule' of a type (line 595)
            _original_rule_316557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 34), self_316556, '_original_rule')
            # Applying the binary operator 'notin' (line 595)
            result_contains_316558 = python_operator(stypy.reporting.localization.Localization(__file__, 595, 15), 'notin', str_316555, _original_rule_316557)
            
            # Testing the type of an if condition (line 595)
            if_condition_316559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 595, 12), result_contains_316558)
            # Assigning a type to the variable 'if_condition_316559' (line 595)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 12), 'if_condition_316559', if_condition_316559)
            # SSA begins for if statement (line 595)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Subscript (line 596):
            
            # Assigning a Call to a Subscript (line 596):
            
            # Call to tuple(...): (line 596)
            # Processing the call arguments (line 596)
            
            # Call to chain(...): (line 596)
            # Processing the call arguments (line 596)
            # Getting the type of 'orig_byweekday' (line 597)
            orig_byweekday_316563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 20), 'orig_byweekday', False)
            # Getting the type of 'orig_bynweekday' (line 597)
            orig_bynweekday_316564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 36), 'orig_bynweekday', False)
            # Processing the call keyword arguments (line 596)
            kwargs_316565 = {}
            # Getting the type of 'itertools' (line 596)
            itertools_316561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 57), 'itertools', False)
            # Obtaining the member 'chain' of a type (line 596)
            chain_316562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 57), itertools_316561, 'chain')
            # Calling chain(args, kwargs) (line 596)
            chain_call_result_316566 = invoke(stypy.reporting.localization.Localization(__file__, 596, 57), chain_316562, *[orig_byweekday_316563, orig_bynweekday_316564], **kwargs_316565)
            
            # Processing the call keyword arguments (line 596)
            kwargs_316567 = {}
            # Getting the type of 'tuple' (line 596)
            tuple_316560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 51), 'tuple', False)
            # Calling tuple(args, kwargs) (line 596)
            tuple_call_result_316568 = invoke(stypy.reporting.localization.Localization(__file__, 596, 51), tuple_316560, *[chain_call_result_316566], **kwargs_316567)
            
            # Getting the type of 'self' (line 596)
            self_316569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 16), 'self')
            # Obtaining the member '_original_rule' of a type (line 596)
            _original_rule_316570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 16), self_316569, '_original_rule')
            str_316571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 36), 'str', 'byweekday')
            # Storing an element on a container (line 596)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 596, 16), _original_rule_316570, (str_316571, tuple_call_result_316568))
            # SSA join for if statement (line 595)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_316426 and more_types_in_union_316427):
                # SSA join for if statement (line 558)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 600)
        # Getting the type of 'byhour' (line 600)
        byhour_316572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 11), 'byhour')
        # Getting the type of 'None' (line 600)
        None_316573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 21), 'None')
        
        (may_be_316574, more_types_in_union_316575) = may_be_none(byhour_316572, None_316573)

        if may_be_316574:

            if more_types_in_union_316575:
                # Runtime conditional SSA (line 600)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'freq' (line 601)
            freq_316576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 15), 'freq')
            # Getting the type of 'HOURLY' (line 601)
            HOURLY_316577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 22), 'HOURLY')
            # Applying the binary operator '<' (line 601)
            result_lt_316578 = python_operator(stypy.reporting.localization.Localization(__file__, 601, 15), '<', freq_316576, HOURLY_316577)
            
            # Testing the type of an if condition (line 601)
            if_condition_316579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 601, 12), result_lt_316578)
            # Assigning a type to the variable 'if_condition_316579' (line 601)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 12), 'if_condition_316579', if_condition_316579)
            # SSA begins for if statement (line 601)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 602):
            
            # Assigning a Call to a Attribute (line 602):
            
            # Call to set(...): (line 602)
            # Processing the call arguments (line 602)
            
            # Obtaining an instance of the builtin type 'tuple' (line 602)
            tuple_316581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 602)
            # Adding element type (line 602)
            # Getting the type of 'dtstart' (line 602)
            dtstart_316582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 36), 'dtstart', False)
            # Obtaining the member 'hour' of a type (line 602)
            hour_316583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 36), dtstart_316582, 'hour')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 602, 36), tuple_316581, hour_316583)
            
            # Processing the call keyword arguments (line 602)
            kwargs_316584 = {}
            # Getting the type of 'set' (line 602)
            set_316580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 31), 'set', False)
            # Calling set(args, kwargs) (line 602)
            set_call_result_316585 = invoke(stypy.reporting.localization.Localization(__file__, 602, 31), set_316580, *[tuple_316581], **kwargs_316584)
            
            # Getting the type of 'self' (line 602)
            self_316586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'self')
            # Setting the type of the member '_byhour' of a type (line 602)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), self_316586, '_byhour', set_call_result_316585)
            # SSA branch for the else part of an if statement (line 601)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 604):
            
            # Assigning a Name to a Attribute (line 604):
            # Getting the type of 'None' (line 604)
            None_316587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 31), 'None')
            # Getting the type of 'self' (line 604)
            self_316588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 16), 'self')
            # Setting the type of the member '_byhour' of a type (line 604)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 16), self_316588, '_byhour', None_316587)
            # SSA join for if statement (line 601)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_316575:
                # Runtime conditional SSA for else branch (line 600)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316574) or more_types_in_union_316575):
            
            
            # Call to isinstance(...): (line 606)
            # Processing the call arguments (line 606)
            # Getting the type of 'byhour' (line 606)
            byhour_316590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 26), 'byhour', False)
            # Getting the type of 'integer_types' (line 606)
            integer_types_316591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 34), 'integer_types', False)
            # Processing the call keyword arguments (line 606)
            kwargs_316592 = {}
            # Getting the type of 'isinstance' (line 606)
            isinstance_316589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 606)
            isinstance_call_result_316593 = invoke(stypy.reporting.localization.Localization(__file__, 606, 15), isinstance_316589, *[byhour_316590, integer_types_316591], **kwargs_316592)
            
            # Testing the type of an if condition (line 606)
            if_condition_316594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 606, 12), isinstance_call_result_316593)
            # Assigning a type to the variable 'if_condition_316594' (line 606)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'if_condition_316594', if_condition_316594)
            # SSA begins for if statement (line 606)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 607):
            
            # Assigning a Tuple to a Name (line 607):
            
            # Obtaining an instance of the builtin type 'tuple' (line 607)
            tuple_316595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 26), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 607)
            # Adding element type (line 607)
            # Getting the type of 'byhour' (line 607)
            byhour_316596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 26), 'byhour')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 607, 26), tuple_316595, byhour_316596)
            
            # Assigning a type to the variable 'byhour' (line 607)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 16), 'byhour', tuple_316595)
            # SSA join for if statement (line 606)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'freq' (line 609)
            freq_316597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 15), 'freq')
            # Getting the type of 'HOURLY' (line 609)
            HOURLY_316598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 23), 'HOURLY')
            # Applying the binary operator '==' (line 609)
            result_eq_316599 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 15), '==', freq_316597, HOURLY_316598)
            
            # Testing the type of an if condition (line 609)
            if_condition_316600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 609, 12), result_eq_316599)
            # Assigning a type to the variable 'if_condition_316600' (line 609)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'if_condition_316600', if_condition_316600)
            # SSA begins for if statement (line 609)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 610):
            
            # Assigning a Call to a Attribute (line 610):
            
            # Call to __construct_byset(...): (line 610)
            # Processing the call keyword arguments (line 610)
            # Getting the type of 'dtstart' (line 610)
            dtstart_316603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 60), 'dtstart', False)
            # Obtaining the member 'hour' of a type (line 610)
            hour_316604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 60), dtstart_316603, 'hour')
            keyword_316605 = hour_316604
            # Getting the type of 'byhour' (line 611)
            byhour_316606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 60), 'byhour', False)
            keyword_316607 = byhour_316606
            int_316608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 59), 'int')
            keyword_316609 = int_316608
            kwargs_316610 = {'byxxx': keyword_316607, 'start': keyword_316605, 'base': keyword_316609}
            # Getting the type of 'self' (line 610)
            self_316601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 31), 'self', False)
            # Obtaining the member '__construct_byset' of a type (line 610)
            construct_byset_316602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 31), self_316601, '__construct_byset')
            # Calling __construct_byset(args, kwargs) (line 610)
            construct_byset_call_result_316611 = invoke(stypy.reporting.localization.Localization(__file__, 610, 31), construct_byset_316602, *[], **kwargs_316610)
            
            # Getting the type of 'self' (line 610)
            self_316612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 16), 'self')
            # Setting the type of the member '_byhour' of a type (line 610)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 16), self_316612, '_byhour', construct_byset_call_result_316611)
            # SSA branch for the else part of an if statement (line 609)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 614):
            
            # Assigning a Call to a Attribute (line 614):
            
            # Call to set(...): (line 614)
            # Processing the call arguments (line 614)
            # Getting the type of 'byhour' (line 614)
            byhour_316614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 35), 'byhour', False)
            # Processing the call keyword arguments (line 614)
            kwargs_316615 = {}
            # Getting the type of 'set' (line 614)
            set_316613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 31), 'set', False)
            # Calling set(args, kwargs) (line 614)
            set_call_result_316616 = invoke(stypy.reporting.localization.Localization(__file__, 614, 31), set_316613, *[byhour_316614], **kwargs_316615)
            
            # Getting the type of 'self' (line 614)
            self_316617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 16), 'self')
            # Setting the type of the member '_byhour' of a type (line 614)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 16), self_316617, '_byhour', set_call_result_316616)
            # SSA join for if statement (line 609)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 616):
            
            # Assigning a Call to a Attribute (line 616):
            
            # Call to tuple(...): (line 616)
            # Processing the call arguments (line 616)
            
            # Call to sorted(...): (line 616)
            # Processing the call arguments (line 616)
            # Getting the type of 'self' (line 616)
            self_316620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 40), 'self', False)
            # Obtaining the member '_byhour' of a type (line 616)
            _byhour_316621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 40), self_316620, '_byhour')
            # Processing the call keyword arguments (line 616)
            kwargs_316622 = {}
            # Getting the type of 'sorted' (line 616)
            sorted_316619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 33), 'sorted', False)
            # Calling sorted(args, kwargs) (line 616)
            sorted_call_result_316623 = invoke(stypy.reporting.localization.Localization(__file__, 616, 33), sorted_316619, *[_byhour_316621], **kwargs_316622)
            
            # Processing the call keyword arguments (line 616)
            kwargs_316624 = {}
            # Getting the type of 'tuple' (line 616)
            tuple_316618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 27), 'tuple', False)
            # Calling tuple(args, kwargs) (line 616)
            tuple_call_result_316625 = invoke(stypy.reporting.localization.Localization(__file__, 616, 27), tuple_316618, *[sorted_call_result_316623], **kwargs_316624)
            
            # Getting the type of 'self' (line 616)
            self_316626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 'self')
            # Setting the type of the member '_byhour' of a type (line 616)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 12), self_316626, '_byhour', tuple_call_result_316625)
            
            # Assigning a Attribute to a Subscript (line 617):
            
            # Assigning a Attribute to a Subscript (line 617):
            # Getting the type of 'self' (line 617)
            self_316627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 44), 'self')
            # Obtaining the member '_byhour' of a type (line 617)
            _byhour_316628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 44), self_316627, '_byhour')
            # Getting the type of 'self' (line 617)
            self_316629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 12), 'self')
            # Obtaining the member '_original_rule' of a type (line 617)
            _original_rule_316630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 12), self_316629, '_original_rule')
            str_316631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 32), 'str', 'byhour')
            # Storing an element on a container (line 617)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 617, 12), _original_rule_316630, (str_316631, _byhour_316628))

            if (may_be_316574 and more_types_in_union_316575):
                # SSA join for if statement (line 600)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 620)
        # Getting the type of 'byminute' (line 620)
        byminute_316632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 11), 'byminute')
        # Getting the type of 'None' (line 620)
        None_316633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 23), 'None')
        
        (may_be_316634, more_types_in_union_316635) = may_be_none(byminute_316632, None_316633)

        if may_be_316634:

            if more_types_in_union_316635:
                # Runtime conditional SSA (line 620)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'freq' (line 621)
            freq_316636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'freq')
            # Getting the type of 'MINUTELY' (line 621)
            MINUTELY_316637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 22), 'MINUTELY')
            # Applying the binary operator '<' (line 621)
            result_lt_316638 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 15), '<', freq_316636, MINUTELY_316637)
            
            # Testing the type of an if condition (line 621)
            if_condition_316639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 621, 12), result_lt_316638)
            # Assigning a type to the variable 'if_condition_316639' (line 621)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 12), 'if_condition_316639', if_condition_316639)
            # SSA begins for if statement (line 621)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 622):
            
            # Assigning a Call to a Attribute (line 622):
            
            # Call to set(...): (line 622)
            # Processing the call arguments (line 622)
            
            # Obtaining an instance of the builtin type 'tuple' (line 622)
            tuple_316641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 38), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 622)
            # Adding element type (line 622)
            # Getting the type of 'dtstart' (line 622)
            dtstart_316642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 38), 'dtstart', False)
            # Obtaining the member 'minute' of a type (line 622)
            minute_316643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 38), dtstart_316642, 'minute')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 622, 38), tuple_316641, minute_316643)
            
            # Processing the call keyword arguments (line 622)
            kwargs_316644 = {}
            # Getting the type of 'set' (line 622)
            set_316640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 33), 'set', False)
            # Calling set(args, kwargs) (line 622)
            set_call_result_316645 = invoke(stypy.reporting.localization.Localization(__file__, 622, 33), set_316640, *[tuple_316641], **kwargs_316644)
            
            # Getting the type of 'self' (line 622)
            self_316646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 16), 'self')
            # Setting the type of the member '_byminute' of a type (line 622)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 16), self_316646, '_byminute', set_call_result_316645)
            # SSA branch for the else part of an if statement (line 621)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 624):
            
            # Assigning a Name to a Attribute (line 624):
            # Getting the type of 'None' (line 624)
            None_316647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 33), 'None')
            # Getting the type of 'self' (line 624)
            self_316648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 16), 'self')
            # Setting the type of the member '_byminute' of a type (line 624)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 16), self_316648, '_byminute', None_316647)
            # SSA join for if statement (line 621)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_316635:
                # Runtime conditional SSA for else branch (line 620)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316634) or more_types_in_union_316635):
            
            
            # Call to isinstance(...): (line 626)
            # Processing the call arguments (line 626)
            # Getting the type of 'byminute' (line 626)
            byminute_316650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 26), 'byminute', False)
            # Getting the type of 'integer_types' (line 626)
            integer_types_316651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 36), 'integer_types', False)
            # Processing the call keyword arguments (line 626)
            kwargs_316652 = {}
            # Getting the type of 'isinstance' (line 626)
            isinstance_316649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 626)
            isinstance_call_result_316653 = invoke(stypy.reporting.localization.Localization(__file__, 626, 15), isinstance_316649, *[byminute_316650, integer_types_316651], **kwargs_316652)
            
            # Testing the type of an if condition (line 626)
            if_condition_316654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 626, 12), isinstance_call_result_316653)
            # Assigning a type to the variable 'if_condition_316654' (line 626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'if_condition_316654', if_condition_316654)
            # SSA begins for if statement (line 626)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 627):
            
            # Assigning a Tuple to a Name (line 627):
            
            # Obtaining an instance of the builtin type 'tuple' (line 627)
            tuple_316655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 627)
            # Adding element type (line 627)
            # Getting the type of 'byminute' (line 627)
            byminute_316656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 28), 'byminute')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 627, 28), tuple_316655, byminute_316656)
            
            # Assigning a type to the variable 'byminute' (line 627)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 16), 'byminute', tuple_316655)
            # SSA join for if statement (line 626)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'freq' (line 629)
            freq_316657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 15), 'freq')
            # Getting the type of 'MINUTELY' (line 629)
            MINUTELY_316658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 23), 'MINUTELY')
            # Applying the binary operator '==' (line 629)
            result_eq_316659 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 15), '==', freq_316657, MINUTELY_316658)
            
            # Testing the type of an if condition (line 629)
            if_condition_316660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 629, 12), result_eq_316659)
            # Assigning a type to the variable 'if_condition_316660' (line 629)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 12), 'if_condition_316660', if_condition_316660)
            # SSA begins for if statement (line 629)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 630):
            
            # Assigning a Call to a Attribute (line 630):
            
            # Call to __construct_byset(...): (line 630)
            # Processing the call keyword arguments (line 630)
            # Getting the type of 'dtstart' (line 630)
            dtstart_316663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 62), 'dtstart', False)
            # Obtaining the member 'minute' of a type (line 630)
            minute_316664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 62), dtstart_316663, 'minute')
            keyword_316665 = minute_316664
            # Getting the type of 'byminute' (line 631)
            byminute_316666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 62), 'byminute', False)
            keyword_316667 = byminute_316666
            int_316668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, 61), 'int')
            keyword_316669 = int_316668
            kwargs_316670 = {'byxxx': keyword_316667, 'start': keyword_316665, 'base': keyword_316669}
            # Getting the type of 'self' (line 630)
            self_316661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 33), 'self', False)
            # Obtaining the member '__construct_byset' of a type (line 630)
            construct_byset_316662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 33), self_316661, '__construct_byset')
            # Calling __construct_byset(args, kwargs) (line 630)
            construct_byset_call_result_316671 = invoke(stypy.reporting.localization.Localization(__file__, 630, 33), construct_byset_316662, *[], **kwargs_316670)
            
            # Getting the type of 'self' (line 630)
            self_316672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 16), 'self')
            # Setting the type of the member '_byminute' of a type (line 630)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 16), self_316672, '_byminute', construct_byset_call_result_316671)
            # SSA branch for the else part of an if statement (line 629)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 634):
            
            # Assigning a Call to a Attribute (line 634):
            
            # Call to set(...): (line 634)
            # Processing the call arguments (line 634)
            # Getting the type of 'byminute' (line 634)
            byminute_316674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 37), 'byminute', False)
            # Processing the call keyword arguments (line 634)
            kwargs_316675 = {}
            # Getting the type of 'set' (line 634)
            set_316673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 33), 'set', False)
            # Calling set(args, kwargs) (line 634)
            set_call_result_316676 = invoke(stypy.reporting.localization.Localization(__file__, 634, 33), set_316673, *[byminute_316674], **kwargs_316675)
            
            # Getting the type of 'self' (line 634)
            self_316677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 16), 'self')
            # Setting the type of the member '_byminute' of a type (line 634)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 16), self_316677, '_byminute', set_call_result_316676)
            # SSA join for if statement (line 629)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 636):
            
            # Assigning a Call to a Attribute (line 636):
            
            # Call to tuple(...): (line 636)
            # Processing the call arguments (line 636)
            
            # Call to sorted(...): (line 636)
            # Processing the call arguments (line 636)
            # Getting the type of 'self' (line 636)
            self_316680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 42), 'self', False)
            # Obtaining the member '_byminute' of a type (line 636)
            _byminute_316681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 42), self_316680, '_byminute')
            # Processing the call keyword arguments (line 636)
            kwargs_316682 = {}
            # Getting the type of 'sorted' (line 636)
            sorted_316679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 35), 'sorted', False)
            # Calling sorted(args, kwargs) (line 636)
            sorted_call_result_316683 = invoke(stypy.reporting.localization.Localization(__file__, 636, 35), sorted_316679, *[_byminute_316681], **kwargs_316682)
            
            # Processing the call keyword arguments (line 636)
            kwargs_316684 = {}
            # Getting the type of 'tuple' (line 636)
            tuple_316678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 29), 'tuple', False)
            # Calling tuple(args, kwargs) (line 636)
            tuple_call_result_316685 = invoke(stypy.reporting.localization.Localization(__file__, 636, 29), tuple_316678, *[sorted_call_result_316683], **kwargs_316684)
            
            # Getting the type of 'self' (line 636)
            self_316686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'self')
            # Setting the type of the member '_byminute' of a type (line 636)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 12), self_316686, '_byminute', tuple_call_result_316685)
            
            # Assigning a Attribute to a Subscript (line 637):
            
            # Assigning a Attribute to a Subscript (line 637):
            # Getting the type of 'self' (line 637)
            self_316687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 46), 'self')
            # Obtaining the member '_byminute' of a type (line 637)
            _byminute_316688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 46), self_316687, '_byminute')
            # Getting the type of 'self' (line 637)
            self_316689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 12), 'self')
            # Obtaining the member '_original_rule' of a type (line 637)
            _original_rule_316690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 12), self_316689, '_original_rule')
            str_316691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 32), 'str', 'byminute')
            # Storing an element on a container (line 637)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 12), _original_rule_316690, (str_316691, _byminute_316688))

            if (may_be_316634 and more_types_in_union_316635):
                # SSA join for if statement (line 620)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 640)
        # Getting the type of 'bysecond' (line 640)
        bysecond_316692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 11), 'bysecond')
        # Getting the type of 'None' (line 640)
        None_316693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 23), 'None')
        
        (may_be_316694, more_types_in_union_316695) = may_be_none(bysecond_316692, None_316693)

        if may_be_316694:

            if more_types_in_union_316695:
                # Runtime conditional SSA (line 640)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'freq' (line 641)
            freq_316696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 15), 'freq')
            # Getting the type of 'SECONDLY' (line 641)
            SECONDLY_316697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 22), 'SECONDLY')
            # Applying the binary operator '<' (line 641)
            result_lt_316698 = python_operator(stypy.reporting.localization.Localization(__file__, 641, 15), '<', freq_316696, SECONDLY_316697)
            
            # Testing the type of an if condition (line 641)
            if_condition_316699 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 641, 12), result_lt_316698)
            # Assigning a type to the variable 'if_condition_316699' (line 641)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 12), 'if_condition_316699', if_condition_316699)
            # SSA begins for if statement (line 641)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Attribute (line 642):
            
            # Assigning a Tuple to a Attribute (line 642):
            
            # Obtaining an instance of the builtin type 'tuple' (line 642)
            tuple_316700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 642)
            # Adding element type (line 642)
            # Getting the type of 'dtstart' (line 642)
            dtstart_316701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 35), 'dtstart')
            # Obtaining the member 'second' of a type (line 642)
            second_316702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 35), dtstart_316701, 'second')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 642, 35), tuple_316700, second_316702)
            
            # Getting the type of 'self' (line 642)
            self_316703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 16), 'self')
            # Setting the type of the member '_bysecond' of a type (line 642)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 16), self_316703, '_bysecond', tuple_316700)
            # SSA branch for the else part of an if statement (line 641)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 644):
            
            # Assigning a Name to a Attribute (line 644):
            # Getting the type of 'None' (line 644)
            None_316704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 33), 'None')
            # Getting the type of 'self' (line 644)
            self_316705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 16), 'self')
            # Setting the type of the member '_bysecond' of a type (line 644)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 16), self_316705, '_bysecond', None_316704)
            # SSA join for if statement (line 641)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_316695:
                # Runtime conditional SSA for else branch (line 640)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_316694) or more_types_in_union_316695):
            
            
            # Call to isinstance(...): (line 646)
            # Processing the call arguments (line 646)
            # Getting the type of 'bysecond' (line 646)
            bysecond_316707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 26), 'bysecond', False)
            # Getting the type of 'integer_types' (line 646)
            integer_types_316708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 36), 'integer_types', False)
            # Processing the call keyword arguments (line 646)
            kwargs_316709 = {}
            # Getting the type of 'isinstance' (line 646)
            isinstance_316706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 646)
            isinstance_call_result_316710 = invoke(stypy.reporting.localization.Localization(__file__, 646, 15), isinstance_316706, *[bysecond_316707, integer_types_316708], **kwargs_316709)
            
            # Testing the type of an if condition (line 646)
            if_condition_316711 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 646, 12), isinstance_call_result_316710)
            # Assigning a type to the variable 'if_condition_316711' (line 646)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 12), 'if_condition_316711', if_condition_316711)
            # SSA begins for if statement (line 646)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Name (line 647):
            
            # Assigning a Tuple to a Name (line 647):
            
            # Obtaining an instance of the builtin type 'tuple' (line 647)
            tuple_316712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 647)
            # Adding element type (line 647)
            # Getting the type of 'bysecond' (line 647)
            bysecond_316713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 28), 'bysecond')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 647, 28), tuple_316712, bysecond_316713)
            
            # Assigning a type to the variable 'bysecond' (line 647)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 16), 'bysecond', tuple_316712)
            # SSA join for if statement (line 646)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 649):
            
            # Assigning a Call to a Attribute (line 649):
            
            # Call to set(...): (line 649)
            # Processing the call arguments (line 649)
            # Getting the type of 'bysecond' (line 649)
            bysecond_316715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 33), 'bysecond', False)
            # Processing the call keyword arguments (line 649)
            kwargs_316716 = {}
            # Getting the type of 'set' (line 649)
            set_316714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 29), 'set', False)
            # Calling set(args, kwargs) (line 649)
            set_call_result_316717 = invoke(stypy.reporting.localization.Localization(__file__, 649, 29), set_316714, *[bysecond_316715], **kwargs_316716)
            
            # Getting the type of 'self' (line 649)
            self_316718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 12), 'self')
            # Setting the type of the member '_bysecond' of a type (line 649)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 12), self_316718, '_bysecond', set_call_result_316717)
            
            
            # Getting the type of 'freq' (line 651)
            freq_316719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 15), 'freq')
            # Getting the type of 'SECONDLY' (line 651)
            SECONDLY_316720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 23), 'SECONDLY')
            # Applying the binary operator '==' (line 651)
            result_eq_316721 = python_operator(stypy.reporting.localization.Localization(__file__, 651, 15), '==', freq_316719, SECONDLY_316720)
            
            # Testing the type of an if condition (line 651)
            if_condition_316722 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 651, 12), result_eq_316721)
            # Assigning a type to the variable 'if_condition_316722' (line 651)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 12), 'if_condition_316722', if_condition_316722)
            # SSA begins for if statement (line 651)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 652):
            
            # Assigning a Call to a Attribute (line 652):
            
            # Call to __construct_byset(...): (line 652)
            # Processing the call keyword arguments (line 652)
            # Getting the type of 'dtstart' (line 652)
            dtstart_316725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 62), 'dtstart', False)
            # Obtaining the member 'second' of a type (line 652)
            second_316726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 62), dtstart_316725, 'second')
            keyword_316727 = second_316726
            # Getting the type of 'bysecond' (line 653)
            bysecond_316728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 62), 'bysecond', False)
            keyword_316729 = bysecond_316728
            int_316730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 61), 'int')
            keyword_316731 = int_316730
            kwargs_316732 = {'byxxx': keyword_316729, 'start': keyword_316727, 'base': keyword_316731}
            # Getting the type of 'self' (line 652)
            self_316723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 33), 'self', False)
            # Obtaining the member '__construct_byset' of a type (line 652)
            construct_byset_316724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 33), self_316723, '__construct_byset')
            # Calling __construct_byset(args, kwargs) (line 652)
            construct_byset_call_result_316733 = invoke(stypy.reporting.localization.Localization(__file__, 652, 33), construct_byset_316724, *[], **kwargs_316732)
            
            # Getting the type of 'self' (line 652)
            self_316734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 16), 'self')
            # Setting the type of the member '_bysecond' of a type (line 652)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 16), self_316734, '_bysecond', construct_byset_call_result_316733)
            # SSA branch for the else part of an if statement (line 651)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 656):
            
            # Assigning a Call to a Attribute (line 656):
            
            # Call to set(...): (line 656)
            # Processing the call arguments (line 656)
            # Getting the type of 'bysecond' (line 656)
            bysecond_316736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 37), 'bysecond', False)
            # Processing the call keyword arguments (line 656)
            kwargs_316737 = {}
            # Getting the type of 'set' (line 656)
            set_316735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 33), 'set', False)
            # Calling set(args, kwargs) (line 656)
            set_call_result_316738 = invoke(stypy.reporting.localization.Localization(__file__, 656, 33), set_316735, *[bysecond_316736], **kwargs_316737)
            
            # Getting the type of 'self' (line 656)
            self_316739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 16), 'self')
            # Setting the type of the member '_bysecond' of a type (line 656)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 16), self_316739, '_bysecond', set_call_result_316738)
            # SSA join for if statement (line 651)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Attribute (line 658):
            
            # Assigning a Call to a Attribute (line 658):
            
            # Call to tuple(...): (line 658)
            # Processing the call arguments (line 658)
            
            # Call to sorted(...): (line 658)
            # Processing the call arguments (line 658)
            # Getting the type of 'self' (line 658)
            self_316742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 42), 'self', False)
            # Obtaining the member '_bysecond' of a type (line 658)
            _bysecond_316743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 42), self_316742, '_bysecond')
            # Processing the call keyword arguments (line 658)
            kwargs_316744 = {}
            # Getting the type of 'sorted' (line 658)
            sorted_316741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 35), 'sorted', False)
            # Calling sorted(args, kwargs) (line 658)
            sorted_call_result_316745 = invoke(stypy.reporting.localization.Localization(__file__, 658, 35), sorted_316741, *[_bysecond_316743], **kwargs_316744)
            
            # Processing the call keyword arguments (line 658)
            kwargs_316746 = {}
            # Getting the type of 'tuple' (line 658)
            tuple_316740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 29), 'tuple', False)
            # Calling tuple(args, kwargs) (line 658)
            tuple_call_result_316747 = invoke(stypy.reporting.localization.Localization(__file__, 658, 29), tuple_316740, *[sorted_call_result_316745], **kwargs_316746)
            
            # Getting the type of 'self' (line 658)
            self_316748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 12), 'self')
            # Setting the type of the member '_bysecond' of a type (line 658)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 12), self_316748, '_bysecond', tuple_call_result_316747)
            
            # Assigning a Attribute to a Subscript (line 659):
            
            # Assigning a Attribute to a Subscript (line 659):
            # Getting the type of 'self' (line 659)
            self_316749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 46), 'self')
            # Obtaining the member '_bysecond' of a type (line 659)
            _bysecond_316750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 46), self_316749, '_bysecond')
            # Getting the type of 'self' (line 659)
            self_316751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 12), 'self')
            # Obtaining the member '_original_rule' of a type (line 659)
            _original_rule_316752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 12), self_316751, '_original_rule')
            str_316753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 32), 'str', 'bysecond')
            # Storing an element on a container (line 659)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 659, 12), _original_rule_316752, (str_316753, _bysecond_316750))

            if (may_be_316694 and more_types_in_union_316695):
                # SSA join for if statement (line 640)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 661)
        self_316754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 11), 'self')
        # Obtaining the member '_freq' of a type (line 661)
        _freq_316755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 11), self_316754, '_freq')
        # Getting the type of 'HOURLY' (line 661)
        HOURLY_316756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 25), 'HOURLY')
        # Applying the binary operator '>=' (line 661)
        result_ge_316757 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 11), '>=', _freq_316755, HOURLY_316756)
        
        # Testing the type of an if condition (line 661)
        if_condition_316758 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 661, 8), result_ge_316757)
        # Assigning a type to the variable 'if_condition_316758' (line 661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 8), 'if_condition_316758', if_condition_316758)
        # SSA begins for if statement (line 661)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 662):
        
        # Assigning a Name to a Attribute (line 662):
        # Getting the type of 'None' (line 662)
        None_316759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 28), 'None')
        # Getting the type of 'self' (line 662)
        self_316760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 12), 'self')
        # Setting the type of the member '_timeset' of a type (line 662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 12), self_316760, '_timeset', None_316759)
        # SSA branch for the else part of an if statement (line 661)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Attribute (line 664):
        
        # Assigning a List to a Attribute (line 664):
        
        # Obtaining an instance of the builtin type 'list' (line 664)
        list_316761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 664)
        
        # Getting the type of 'self' (line 664)
        self_316762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 12), 'self')
        # Setting the type of the member '_timeset' of a type (line 664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 12), self_316762, '_timeset', list_316761)
        
        # Getting the type of 'self' (line 665)
        self_316763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 24), 'self')
        # Obtaining the member '_byhour' of a type (line 665)
        _byhour_316764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 24), self_316763, '_byhour')
        # Testing the type of a for loop iterable (line 665)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 665, 12), _byhour_316764)
        # Getting the type of the for loop variable (line 665)
        for_loop_var_316765 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 665, 12), _byhour_316764)
        # Assigning a type to the variable 'hour' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 12), 'hour', for_loop_var_316765)
        # SSA begins for a for statement (line 665)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'self' (line 666)
        self_316766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 30), 'self')
        # Obtaining the member '_byminute' of a type (line 666)
        _byminute_316767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 30), self_316766, '_byminute')
        # Testing the type of a for loop iterable (line 666)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 666, 16), _byminute_316767)
        # Getting the type of the for loop variable (line 666)
        for_loop_var_316768 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 666, 16), _byminute_316767)
        # Assigning a type to the variable 'minute' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 16), 'minute', for_loop_var_316768)
        # SSA begins for a for statement (line 666)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'self' (line 667)
        self_316769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 34), 'self')
        # Obtaining the member '_bysecond' of a type (line 667)
        _bysecond_316770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 34), self_316769, '_bysecond')
        # Testing the type of a for loop iterable (line 667)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 667, 20), _bysecond_316770)
        # Getting the type of the for loop variable (line 667)
        for_loop_var_316771 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 667, 20), _bysecond_316770)
        # Assigning a type to the variable 'second' (line 667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 20), 'second', for_loop_var_316771)
        # SSA begins for a for statement (line 667)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 668)
        # Processing the call arguments (line 668)
        
        # Call to time(...): (line 669)
        # Processing the call arguments (line 669)
        # Getting the type of 'hour' (line 669)
        hour_316777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 42), 'hour', False)
        # Getting the type of 'minute' (line 669)
        minute_316778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 48), 'minute', False)
        # Getting the type of 'second' (line 669)
        second_316779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 56), 'second', False)
        # Processing the call keyword arguments (line 669)
        # Getting the type of 'self' (line 670)
        self_316780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 49), 'self', False)
        # Obtaining the member '_tzinfo' of a type (line 670)
        _tzinfo_316781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 49), self_316780, '_tzinfo')
        keyword_316782 = _tzinfo_316781
        kwargs_316783 = {'tzinfo': keyword_316782}
        # Getting the type of 'datetime' (line 669)
        datetime_316775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 28), 'datetime', False)
        # Obtaining the member 'time' of a type (line 669)
        time_316776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 28), datetime_316775, 'time')
        # Calling time(args, kwargs) (line 669)
        time_call_result_316784 = invoke(stypy.reporting.localization.Localization(__file__, 669, 28), time_316776, *[hour_316777, minute_316778, second_316779], **kwargs_316783)
        
        # Processing the call keyword arguments (line 668)
        kwargs_316785 = {}
        # Getting the type of 'self' (line 668)
        self_316772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 24), 'self', False)
        # Obtaining the member '_timeset' of a type (line 668)
        _timeset_316773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 24), self_316772, '_timeset')
        # Obtaining the member 'append' of a type (line 668)
        append_316774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 24), _timeset_316773, 'append')
        # Calling append(args, kwargs) (line 668)
        append_call_result_316786 = invoke(stypy.reporting.localization.Localization(__file__, 668, 24), append_316774, *[time_call_result_316784], **kwargs_316785)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to sort(...): (line 671)
        # Processing the call keyword arguments (line 671)
        kwargs_316790 = {}
        # Getting the type of 'self' (line 671)
        self_316787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 12), 'self', False)
        # Obtaining the member '_timeset' of a type (line 671)
        _timeset_316788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 12), self_316787, '_timeset')
        # Obtaining the member 'sort' of a type (line 671)
        sort_316789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 12), _timeset_316788, 'sort')
        # Calling sort(args, kwargs) (line 671)
        sort_call_result_316791 = invoke(stypy.reporting.localization.Localization(__file__, 671, 12), sort_316789, *[], **kwargs_316790)
        
        
        # Assigning a Call to a Attribute (line 672):
        
        # Assigning a Call to a Attribute (line 672):
        
        # Call to tuple(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 'self' (line 672)
        self_316793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 34), 'self', False)
        # Obtaining the member '_timeset' of a type (line 672)
        _timeset_316794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 34), self_316793, '_timeset')
        # Processing the call keyword arguments (line 672)
        kwargs_316795 = {}
        # Getting the type of 'tuple' (line 672)
        tuple_316792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 28), 'tuple', False)
        # Calling tuple(args, kwargs) (line 672)
        tuple_call_result_316796 = invoke(stypy.reporting.localization.Localization(__file__, 672, 28), tuple_316792, *[_timeset_316794], **kwargs_316795)
        
        # Getting the type of 'self' (line 672)
        self_316797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'self')
        # Setting the type of the member '_timeset' of a type (line 672)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 12), self_316797, '_timeset', tuple_call_result_316796)
        # SSA join for if statement (line 661)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 674, 4, False)
        # Assigning a type to the variable 'self' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrule.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        rrule.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrule.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrule.stypy__str__.__dict__.__setitem__('stypy_function_name', 'rrule.stypy__str__')
        rrule.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        rrule.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrule.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrule.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrule.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrule.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrule.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrule.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        str_316798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, (-1)), 'str', '\n        Output a string that would generate this RRULE if passed to rrulestr.\n        This is mostly compatible with RFC2445, except for the\n        dateutil-specific extension BYEASTER.\n        ')
        
        # Assigning a List to a Name (line 681):
        
        # Assigning a List to a Name (line 681):
        
        # Obtaining an instance of the builtin type 'list' (line 681)
        list_316799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 681)
        
        # Assigning a type to the variable 'output' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'output', list_316799)
        
        # Assigning a BinOp to a Tuple (line 682):
        
        # Assigning a Subscript to a Name (line 682):
        
        # Obtaining the type of the subscript
        int_316800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 8), 'int')
        
        # Obtaining an instance of the builtin type 'list' (line 682)
        list_316801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 682)
        # Adding element type (line 682)
        # Getting the type of 'None' (line 682)
        None_316802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 682, 18), list_316801, None_316802)
        
        int_316803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 27), 'int')
        # Applying the binary operator '*' (line 682)
        result_mul_316804 = python_operator(stypy.reporting.localization.Localization(__file__, 682, 18), '*', list_316801, int_316803)
        
        # Obtaining the member '__getitem__' of a type (line 682)
        getitem___316805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 8), result_mul_316804, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 682)
        subscript_call_result_316806 = invoke(stypy.reporting.localization.Localization(__file__, 682, 8), getitem___316805, int_316800)
        
        # Assigning a type to the variable 'tuple_var_assignment_315065' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'tuple_var_assignment_315065', subscript_call_result_316806)
        
        # Assigning a Subscript to a Name (line 682):
        
        # Obtaining the type of the subscript
        int_316807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 8), 'int')
        
        # Obtaining an instance of the builtin type 'list' (line 682)
        list_316808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 682)
        # Adding element type (line 682)
        # Getting the type of 'None' (line 682)
        None_316809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 682, 18), list_316808, None_316809)
        
        int_316810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 27), 'int')
        # Applying the binary operator '*' (line 682)
        result_mul_316811 = python_operator(stypy.reporting.localization.Localization(__file__, 682, 18), '*', list_316808, int_316810)
        
        # Obtaining the member '__getitem__' of a type (line 682)
        getitem___316812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 8), result_mul_316811, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 682)
        subscript_call_result_316813 = invoke(stypy.reporting.localization.Localization(__file__, 682, 8), getitem___316812, int_316807)
        
        # Assigning a type to the variable 'tuple_var_assignment_315066' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'tuple_var_assignment_315066', subscript_call_result_316813)
        
        # Assigning a Subscript to a Name (line 682):
        
        # Obtaining the type of the subscript
        int_316814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 8), 'int')
        
        # Obtaining an instance of the builtin type 'list' (line 682)
        list_316815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 682)
        # Adding element type (line 682)
        # Getting the type of 'None' (line 682)
        None_316816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 682, 18), list_316815, None_316816)
        
        int_316817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 27), 'int')
        # Applying the binary operator '*' (line 682)
        result_mul_316818 = python_operator(stypy.reporting.localization.Localization(__file__, 682, 18), '*', list_316815, int_316817)
        
        # Obtaining the member '__getitem__' of a type (line 682)
        getitem___316819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 8), result_mul_316818, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 682)
        subscript_call_result_316820 = invoke(stypy.reporting.localization.Localization(__file__, 682, 8), getitem___316819, int_316814)
        
        # Assigning a type to the variable 'tuple_var_assignment_315067' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'tuple_var_assignment_315067', subscript_call_result_316820)
        
        # Assigning a Name to a Name (line 682):
        # Getting the type of 'tuple_var_assignment_315065' (line 682)
        tuple_var_assignment_315065_316821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'tuple_var_assignment_315065')
        # Assigning a type to the variable 'h' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'h', tuple_var_assignment_315065_316821)
        
        # Assigning a Name to a Name (line 682):
        # Getting the type of 'tuple_var_assignment_315066' (line 682)
        tuple_var_assignment_315066_316822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'tuple_var_assignment_315066')
        # Assigning a type to the variable 'm' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 11), 'm', tuple_var_assignment_315066_316822)
        
        # Assigning a Name to a Name (line 682):
        # Getting the type of 'tuple_var_assignment_315067' (line 682)
        tuple_var_assignment_315067_316823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 8), 'tuple_var_assignment_315067')
        # Assigning a type to the variable 's' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 14), 's', tuple_var_assignment_315067_316823)
        
        # Getting the type of 'self' (line 683)
        self_316824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 11), 'self')
        # Obtaining the member '_dtstart' of a type (line 683)
        _dtstart_316825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 683, 11), self_316824, '_dtstart')
        # Testing the type of an if condition (line 683)
        if_condition_316826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 683, 8), _dtstart_316825)
        # Assigning a type to the variable 'if_condition_316826' (line 683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 8), 'if_condition_316826', if_condition_316826)
        # SSA begins for if statement (line 683)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 684)
        # Processing the call arguments (line 684)
        
        # Call to strftime(...): (line 684)
        # Processing the call arguments (line 684)
        str_316832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 49), 'str', 'DTSTART:%Y%m%dT%H%M%S')
        # Processing the call keyword arguments (line 684)
        kwargs_316833 = {}
        # Getting the type of 'self' (line 684)
        self_316829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 26), 'self', False)
        # Obtaining the member '_dtstart' of a type (line 684)
        _dtstart_316830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 26), self_316829, '_dtstart')
        # Obtaining the member 'strftime' of a type (line 684)
        strftime_316831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 26), _dtstart_316830, 'strftime')
        # Calling strftime(args, kwargs) (line 684)
        strftime_call_result_316834 = invoke(stypy.reporting.localization.Localization(__file__, 684, 26), strftime_316831, *[str_316832], **kwargs_316833)
        
        # Processing the call keyword arguments (line 684)
        kwargs_316835 = {}
        # Getting the type of 'output' (line 684)
        output_316827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 12), 'output', False)
        # Obtaining the member 'append' of a type (line 684)
        append_316828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 684, 12), output_316827, 'append')
        # Calling append(args, kwargs) (line 684)
        append_call_result_316836 = invoke(stypy.reporting.localization.Localization(__file__, 684, 12), append_316828, *[strftime_call_result_316834], **kwargs_316835)
        
        
        # Assigning a Subscript to a Tuple (line 685):
        
        # Assigning a Subscript to a Name (line 685):
        
        # Obtaining the type of the subscript
        int_316837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 12), 'int')
        
        # Obtaining the type of the subscript
        int_316838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 48), 'int')
        int_316839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 50), 'int')
        slice_316840 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 685, 22), int_316838, int_316839, None)
        
        # Call to timetuple(...): (line 685)
        # Processing the call keyword arguments (line 685)
        kwargs_316844 = {}
        # Getting the type of 'self' (line 685)
        self_316841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 22), 'self', False)
        # Obtaining the member '_dtstart' of a type (line 685)
        _dtstart_316842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), self_316841, '_dtstart')
        # Obtaining the member 'timetuple' of a type (line 685)
        timetuple_316843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), _dtstart_316842, 'timetuple')
        # Calling timetuple(args, kwargs) (line 685)
        timetuple_call_result_316845 = invoke(stypy.reporting.localization.Localization(__file__, 685, 22), timetuple_316843, *[], **kwargs_316844)
        
        # Obtaining the member '__getitem__' of a type (line 685)
        getitem___316846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), timetuple_call_result_316845, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 685)
        subscript_call_result_316847 = invoke(stypy.reporting.localization.Localization(__file__, 685, 22), getitem___316846, slice_316840)
        
        # Obtaining the member '__getitem__' of a type (line 685)
        getitem___316848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 12), subscript_call_result_316847, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 685)
        subscript_call_result_316849 = invoke(stypy.reporting.localization.Localization(__file__, 685, 12), getitem___316848, int_316837)
        
        # Assigning a type to the variable 'tuple_var_assignment_315068' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'tuple_var_assignment_315068', subscript_call_result_316849)
        
        # Assigning a Subscript to a Name (line 685):
        
        # Obtaining the type of the subscript
        int_316850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 12), 'int')
        
        # Obtaining the type of the subscript
        int_316851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 48), 'int')
        int_316852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 50), 'int')
        slice_316853 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 685, 22), int_316851, int_316852, None)
        
        # Call to timetuple(...): (line 685)
        # Processing the call keyword arguments (line 685)
        kwargs_316857 = {}
        # Getting the type of 'self' (line 685)
        self_316854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 22), 'self', False)
        # Obtaining the member '_dtstart' of a type (line 685)
        _dtstart_316855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), self_316854, '_dtstart')
        # Obtaining the member 'timetuple' of a type (line 685)
        timetuple_316856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), _dtstart_316855, 'timetuple')
        # Calling timetuple(args, kwargs) (line 685)
        timetuple_call_result_316858 = invoke(stypy.reporting.localization.Localization(__file__, 685, 22), timetuple_316856, *[], **kwargs_316857)
        
        # Obtaining the member '__getitem__' of a type (line 685)
        getitem___316859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), timetuple_call_result_316858, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 685)
        subscript_call_result_316860 = invoke(stypy.reporting.localization.Localization(__file__, 685, 22), getitem___316859, slice_316853)
        
        # Obtaining the member '__getitem__' of a type (line 685)
        getitem___316861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 12), subscript_call_result_316860, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 685)
        subscript_call_result_316862 = invoke(stypy.reporting.localization.Localization(__file__, 685, 12), getitem___316861, int_316850)
        
        # Assigning a type to the variable 'tuple_var_assignment_315069' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'tuple_var_assignment_315069', subscript_call_result_316862)
        
        # Assigning a Subscript to a Name (line 685):
        
        # Obtaining the type of the subscript
        int_316863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 12), 'int')
        
        # Obtaining the type of the subscript
        int_316864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 48), 'int')
        int_316865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 50), 'int')
        slice_316866 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 685, 22), int_316864, int_316865, None)
        
        # Call to timetuple(...): (line 685)
        # Processing the call keyword arguments (line 685)
        kwargs_316870 = {}
        # Getting the type of 'self' (line 685)
        self_316867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 22), 'self', False)
        # Obtaining the member '_dtstart' of a type (line 685)
        _dtstart_316868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), self_316867, '_dtstart')
        # Obtaining the member 'timetuple' of a type (line 685)
        timetuple_316869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), _dtstart_316868, 'timetuple')
        # Calling timetuple(args, kwargs) (line 685)
        timetuple_call_result_316871 = invoke(stypy.reporting.localization.Localization(__file__, 685, 22), timetuple_316869, *[], **kwargs_316870)
        
        # Obtaining the member '__getitem__' of a type (line 685)
        getitem___316872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 22), timetuple_call_result_316871, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 685)
        subscript_call_result_316873 = invoke(stypy.reporting.localization.Localization(__file__, 685, 22), getitem___316872, slice_316866)
        
        # Obtaining the member '__getitem__' of a type (line 685)
        getitem___316874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 685, 12), subscript_call_result_316873, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 685)
        subscript_call_result_316875 = invoke(stypy.reporting.localization.Localization(__file__, 685, 12), getitem___316874, int_316863)
        
        # Assigning a type to the variable 'tuple_var_assignment_315070' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'tuple_var_assignment_315070', subscript_call_result_316875)
        
        # Assigning a Name to a Name (line 685):
        # Getting the type of 'tuple_var_assignment_315068' (line 685)
        tuple_var_assignment_315068_316876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'tuple_var_assignment_315068')
        # Assigning a type to the variable 'h' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'h', tuple_var_assignment_315068_316876)
        
        # Assigning a Name to a Name (line 685):
        # Getting the type of 'tuple_var_assignment_315069' (line 685)
        tuple_var_assignment_315069_316877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'tuple_var_assignment_315069')
        # Assigning a type to the variable 'm' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 15), 'm', tuple_var_assignment_315069_316877)
        
        # Assigning a Name to a Name (line 685):
        # Getting the type of 'tuple_var_assignment_315070' (line 685)
        tuple_var_assignment_315070_316878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'tuple_var_assignment_315070')
        # Assigning a type to the variable 's' (line 685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 18), 's', tuple_var_assignment_315070_316878)
        # SSA join for if statement (line 683)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 687):
        
        # Assigning a List to a Name (line 687):
        
        # Obtaining an instance of the builtin type 'list' (line 687)
        list_316879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 687)
        # Adding element type (line 687)
        str_316880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 687, 17), 'str', 'FREQ=')
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 687)
        self_316881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 37), 'self')
        # Obtaining the member '_freq' of a type (line 687)
        _freq_316882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 37), self_316881, '_freq')
        # Getting the type of 'FREQNAMES' (line 687)
        FREQNAMES_316883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 27), 'FREQNAMES')
        # Obtaining the member '__getitem__' of a type (line 687)
        getitem___316884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 27), FREQNAMES_316883, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 687)
        subscript_call_result_316885 = invoke(stypy.reporting.localization.Localization(__file__, 687, 27), getitem___316884, _freq_316882)
        
        # Applying the binary operator '+' (line 687)
        result_add_316886 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 17), '+', str_316880, subscript_call_result_316885)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 687, 16), list_316879, result_add_316886)
        
        # Assigning a type to the variable 'parts' (line 687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'parts', list_316879)
        
        
        # Getting the type of 'self' (line 688)
        self_316887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 11), 'self')
        # Obtaining the member '_interval' of a type (line 688)
        _interval_316888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 11), self_316887, '_interval')
        int_316889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 29), 'int')
        # Applying the binary operator '!=' (line 688)
        result_ne_316890 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 11), '!=', _interval_316888, int_316889)
        
        # Testing the type of an if condition (line 688)
        if_condition_316891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 688, 8), result_ne_316890)
        # Assigning a type to the variable 'if_condition_316891' (line 688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'if_condition_316891', if_condition_316891)
        # SSA begins for if statement (line 688)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 689)
        # Processing the call arguments (line 689)
        str_316894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 25), 'str', 'INTERVAL=')
        
        # Call to str(...): (line 689)
        # Processing the call arguments (line 689)
        # Getting the type of 'self' (line 689)
        self_316896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 43), 'self', False)
        # Obtaining the member '_interval' of a type (line 689)
        _interval_316897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 43), self_316896, '_interval')
        # Processing the call keyword arguments (line 689)
        kwargs_316898 = {}
        # Getting the type of 'str' (line 689)
        str_316895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 39), 'str', False)
        # Calling str(args, kwargs) (line 689)
        str_call_result_316899 = invoke(stypy.reporting.localization.Localization(__file__, 689, 39), str_316895, *[_interval_316897], **kwargs_316898)
        
        # Applying the binary operator '+' (line 689)
        result_add_316900 = python_operator(stypy.reporting.localization.Localization(__file__, 689, 25), '+', str_316894, str_call_result_316899)
        
        # Processing the call keyword arguments (line 689)
        kwargs_316901 = {}
        # Getting the type of 'parts' (line 689)
        parts_316892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 12), 'parts', False)
        # Obtaining the member 'append' of a type (line 689)
        append_316893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 689, 12), parts_316892, 'append')
        # Calling append(args, kwargs) (line 689)
        append_call_result_316902 = invoke(stypy.reporting.localization.Localization(__file__, 689, 12), append_316893, *[result_add_316900], **kwargs_316901)
        
        # SSA join for if statement (line 688)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 691)
        self_316903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 11), 'self')
        # Obtaining the member '_wkst' of a type (line 691)
        _wkst_316904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 11), self_316903, '_wkst')
        # Testing the type of an if condition (line 691)
        if_condition_316905 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 691, 8), _wkst_316904)
        # Assigning a type to the variable 'if_condition_316905' (line 691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 8), 'if_condition_316905', if_condition_316905)
        # SSA begins for if statement (line 691)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 692)
        # Processing the call arguments (line 692)
        str_316908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 25), 'str', 'WKST=')
        
        # Obtaining the type of the subscript
        int_316909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 61), 'int')
        int_316910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 63), 'int')
        slice_316911 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 692, 35), int_316909, int_316910, None)
        
        # Call to repr(...): (line 692)
        # Processing the call arguments (line 692)
        
        # Call to weekday(...): (line 692)
        # Processing the call arguments (line 692)
        # Getting the type of 'self' (line 692)
        self_316914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 48), 'self', False)
        # Obtaining the member '_wkst' of a type (line 692)
        _wkst_316915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 48), self_316914, '_wkst')
        # Processing the call keyword arguments (line 692)
        kwargs_316916 = {}
        # Getting the type of 'weekday' (line 692)
        weekday_316913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 40), 'weekday', False)
        # Calling weekday(args, kwargs) (line 692)
        weekday_call_result_316917 = invoke(stypy.reporting.localization.Localization(__file__, 692, 40), weekday_316913, *[_wkst_316915], **kwargs_316916)
        
        # Processing the call keyword arguments (line 692)
        kwargs_316918 = {}
        # Getting the type of 'repr' (line 692)
        repr_316912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 35), 'repr', False)
        # Calling repr(args, kwargs) (line 692)
        repr_call_result_316919 = invoke(stypy.reporting.localization.Localization(__file__, 692, 35), repr_316912, *[weekday_call_result_316917], **kwargs_316918)
        
        # Obtaining the member '__getitem__' of a type (line 692)
        getitem___316920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 35), repr_call_result_316919, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 692)
        subscript_call_result_316921 = invoke(stypy.reporting.localization.Localization(__file__, 692, 35), getitem___316920, slice_316911)
        
        # Applying the binary operator '+' (line 692)
        result_add_316922 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 25), '+', str_316908, subscript_call_result_316921)
        
        # Processing the call keyword arguments (line 692)
        kwargs_316923 = {}
        # Getting the type of 'parts' (line 692)
        parts_316906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'parts', False)
        # Obtaining the member 'append' of a type (line 692)
        append_316907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 12), parts_316906, 'append')
        # Calling append(args, kwargs) (line 692)
        append_call_result_316924 = invoke(stypy.reporting.localization.Localization(__file__, 692, 12), append_316907, *[result_add_316922], **kwargs_316923)
        
        # SSA join for if statement (line 691)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 694)
        self_316925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 11), 'self')
        # Obtaining the member '_count' of a type (line 694)
        _count_316926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 11), self_316925, '_count')
        # Getting the type of 'None' (line 694)
        None_316927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 30), 'None')
        # Applying the binary operator 'isnot' (line 694)
        result_is_not_316928 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 11), 'isnot', _count_316926, None_316927)
        
        # Testing the type of an if condition (line 694)
        if_condition_316929 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 694, 8), result_is_not_316928)
        # Assigning a type to the variable 'if_condition_316929' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'if_condition_316929', if_condition_316929)
        # SSA begins for if statement (line 694)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 695)
        # Processing the call arguments (line 695)
        str_316932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 25), 'str', 'COUNT=')
        
        # Call to str(...): (line 695)
        # Processing the call arguments (line 695)
        # Getting the type of 'self' (line 695)
        self_316934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 40), 'self', False)
        # Obtaining the member '_count' of a type (line 695)
        _count_316935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 40), self_316934, '_count')
        # Processing the call keyword arguments (line 695)
        kwargs_316936 = {}
        # Getting the type of 'str' (line 695)
        str_316933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 36), 'str', False)
        # Calling str(args, kwargs) (line 695)
        str_call_result_316937 = invoke(stypy.reporting.localization.Localization(__file__, 695, 36), str_316933, *[_count_316935], **kwargs_316936)
        
        # Applying the binary operator '+' (line 695)
        result_add_316938 = python_operator(stypy.reporting.localization.Localization(__file__, 695, 25), '+', str_316932, str_call_result_316937)
        
        # Processing the call keyword arguments (line 695)
        kwargs_316939 = {}
        # Getting the type of 'parts' (line 695)
        parts_316930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 12), 'parts', False)
        # Obtaining the member 'append' of a type (line 695)
        append_316931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 12), parts_316930, 'append')
        # Calling append(args, kwargs) (line 695)
        append_call_result_316940 = invoke(stypy.reporting.localization.Localization(__file__, 695, 12), append_316931, *[result_add_316938], **kwargs_316939)
        
        # SSA join for if statement (line 694)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 697)
        self_316941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 11), 'self')
        # Obtaining the member '_until' of a type (line 697)
        _until_316942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 11), self_316941, '_until')
        # Testing the type of an if condition (line 697)
        if_condition_316943 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 697, 8), _until_316942)
        # Assigning a type to the variable 'if_condition_316943' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'if_condition_316943', if_condition_316943)
        # SSA begins for if statement (line 697)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 698)
        # Processing the call arguments (line 698)
        
        # Call to strftime(...): (line 698)
        # Processing the call arguments (line 698)
        str_316949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 46), 'str', 'UNTIL=%Y%m%dT%H%M%S')
        # Processing the call keyword arguments (line 698)
        kwargs_316950 = {}
        # Getting the type of 'self' (line 698)
        self_316946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 25), 'self', False)
        # Obtaining the member '_until' of a type (line 698)
        _until_316947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 25), self_316946, '_until')
        # Obtaining the member 'strftime' of a type (line 698)
        strftime_316948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 25), _until_316947, 'strftime')
        # Calling strftime(args, kwargs) (line 698)
        strftime_call_result_316951 = invoke(stypy.reporting.localization.Localization(__file__, 698, 25), strftime_316948, *[str_316949], **kwargs_316950)
        
        # Processing the call keyword arguments (line 698)
        kwargs_316952 = {}
        # Getting the type of 'parts' (line 698)
        parts_316944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'parts', False)
        # Obtaining the member 'append' of a type (line 698)
        append_316945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 12), parts_316944, 'append')
        # Calling append(args, kwargs) (line 698)
        append_call_result_316953 = invoke(stypy.reporting.localization.Localization(__file__, 698, 12), append_316945, *[strftime_call_result_316951], **kwargs_316952)
        
        # SSA join for if statement (line 697)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get(...): (line 700)
        # Processing the call arguments (line 700)
        str_316957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 35), 'str', 'byweekday')
        # Processing the call keyword arguments (line 700)
        kwargs_316958 = {}
        # Getting the type of 'self' (line 700)
        self_316954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 11), 'self', False)
        # Obtaining the member '_original_rule' of a type (line 700)
        _original_rule_316955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 11), self_316954, '_original_rule')
        # Obtaining the member 'get' of a type (line 700)
        get_316956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 11), _original_rule_316955, 'get')
        # Calling get(args, kwargs) (line 700)
        get_call_result_316959 = invoke(stypy.reporting.localization.Localization(__file__, 700, 11), get_316956, *[str_316957], **kwargs_316958)
        
        # Getting the type of 'None' (line 700)
        None_316960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 55), 'None')
        # Applying the binary operator 'isnot' (line 700)
        result_is_not_316961 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 11), 'isnot', get_call_result_316959, None_316960)
        
        # Testing the type of an if condition (line 700)
        if_condition_316962 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 700, 8), result_is_not_316961)
        # Assigning a type to the variable 'if_condition_316962' (line 700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 8), 'if_condition_316962', if_condition_316962)
        # SSA begins for if statement (line 700)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 703):
        
        # Assigning a Call to a Name (line 703):
        
        # Call to dict(...): (line 703)
        # Processing the call arguments (line 703)
        # Getting the type of 'self' (line 703)
        self_316964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 33), 'self', False)
        # Obtaining the member '_original_rule' of a type (line 703)
        _original_rule_316965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 33), self_316964, '_original_rule')
        # Processing the call keyword arguments (line 703)
        kwargs_316966 = {}
        # Getting the type of 'dict' (line 703)
        dict_316963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 28), 'dict', False)
        # Calling dict(args, kwargs) (line 703)
        dict_call_result_316967 = invoke(stypy.reporting.localization.Localization(__file__, 703, 28), dict_316963, *[_original_rule_316965], **kwargs_316966)
        
        # Assigning a type to the variable 'original_rule' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 12), 'original_rule', dict_call_result_316967)
        
        # Assigning a List to a Name (line 704):
        
        # Assigning a List to a Name (line 704):
        
        # Obtaining an instance of the builtin type 'list' (line 704)
        list_316968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 704)
        
        # Assigning a type to the variable 'wday_strings' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'wday_strings', list_316968)
        
        
        # Obtaining the type of the subscript
        str_316969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 38), 'str', 'byweekday')
        # Getting the type of 'original_rule' (line 705)
        original_rule_316970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 24), 'original_rule')
        # Obtaining the member '__getitem__' of a type (line 705)
        getitem___316971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 24), original_rule_316970, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 705)
        subscript_call_result_316972 = invoke(stypy.reporting.localization.Localization(__file__, 705, 24), getitem___316971, str_316969)
        
        # Testing the type of a for loop iterable (line 705)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 705, 12), subscript_call_result_316972)
        # Getting the type of the for loop variable (line 705)
        for_loop_var_316973 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 705, 12), subscript_call_result_316972)
        # Assigning a type to the variable 'wday' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 12), 'wday', for_loop_var_316973)
        # SSA begins for a for statement (line 705)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'wday' (line 706)
        wday_316974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 19), 'wday')
        # Obtaining the member 'n' of a type (line 706)
        n_316975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 19), wday_316974, 'n')
        # Testing the type of an if condition (line 706)
        if_condition_316976 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 706, 16), n_316975)
        # Assigning a type to the variable 'if_condition_316976' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 16), 'if_condition_316976', if_condition_316976)
        # SSA begins for if statement (line 706)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 707)
        # Processing the call arguments (line 707)
        
        # Call to format(...): (line 707)
        # Processing the call keyword arguments (line 707)
        # Getting the type of 'wday' (line 708)
        wday_316981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 26), 'wday', False)
        # Obtaining the member 'n' of a type (line 708)
        n_316982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 26), wday_316981, 'n')
        keyword_316983 = n_316982
        
        # Obtaining the type of the subscript
        int_316984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 40), 'int')
        int_316985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 42), 'int')
        slice_316986 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 709, 29), int_316984, int_316985, None)
        
        # Call to repr(...): (line 709)
        # Processing the call arguments (line 709)
        # Getting the type of 'wday' (line 709)
        wday_316988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 34), 'wday', False)
        # Processing the call keyword arguments (line 709)
        kwargs_316989 = {}
        # Getting the type of 'repr' (line 709)
        repr_316987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 29), 'repr', False)
        # Calling repr(args, kwargs) (line 709)
        repr_call_result_316990 = invoke(stypy.reporting.localization.Localization(__file__, 709, 29), repr_316987, *[wday_316988], **kwargs_316989)
        
        # Obtaining the member '__getitem__' of a type (line 709)
        getitem___316991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 29), repr_call_result_316990, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 709)
        subscript_call_result_316992 = invoke(stypy.reporting.localization.Localization(__file__, 709, 29), getitem___316991, slice_316986)
        
        keyword_316993 = subscript_call_result_316992
        kwargs_316994 = {'wday': keyword_316993, 'n': keyword_316983}
        str_316979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 40), 'str', '{n:+d}{wday}')
        # Obtaining the member 'format' of a type (line 707)
        format_316980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 40), str_316979, 'format')
        # Calling format(args, kwargs) (line 707)
        format_call_result_316995 = invoke(stypy.reporting.localization.Localization(__file__, 707, 40), format_316980, *[], **kwargs_316994)
        
        # Processing the call keyword arguments (line 707)
        kwargs_316996 = {}
        # Getting the type of 'wday_strings' (line 707)
        wday_strings_316977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 20), 'wday_strings', False)
        # Obtaining the member 'append' of a type (line 707)
        append_316978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 20), wday_strings_316977, 'append')
        # Calling append(args, kwargs) (line 707)
        append_call_result_316997 = invoke(stypy.reporting.localization.Localization(__file__, 707, 20), append_316978, *[format_call_result_316995], **kwargs_316996)
        
        # SSA branch for the else part of an if statement (line 706)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 711)
        # Processing the call arguments (line 711)
        
        # Call to repr(...): (line 711)
        # Processing the call arguments (line 711)
        # Getting the type of 'wday' (line 711)
        wday_317001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 45), 'wday', False)
        # Processing the call keyword arguments (line 711)
        kwargs_317002 = {}
        # Getting the type of 'repr' (line 711)
        repr_317000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 40), 'repr', False)
        # Calling repr(args, kwargs) (line 711)
        repr_call_result_317003 = invoke(stypy.reporting.localization.Localization(__file__, 711, 40), repr_317000, *[wday_317001], **kwargs_317002)
        
        # Processing the call keyword arguments (line 711)
        kwargs_317004 = {}
        # Getting the type of 'wday_strings' (line 711)
        wday_strings_316998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 20), 'wday_strings', False)
        # Obtaining the member 'append' of a type (line 711)
        append_316999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 20), wday_strings_316998, 'append')
        # Calling append(args, kwargs) (line 711)
        append_call_result_317005 = invoke(stypy.reporting.localization.Localization(__file__, 711, 20), append_316999, *[repr_call_result_317003], **kwargs_317004)
        
        # SSA join for if statement (line 706)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 713):
        
        # Assigning a Name to a Subscript (line 713):
        # Getting the type of 'wday_strings' (line 713)
        wday_strings_317006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 41), 'wday_strings')
        # Getting the type of 'original_rule' (line 713)
        original_rule_317007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 12), 'original_rule')
        str_317008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 26), 'str', 'byweekday')
        # Storing an element on a container (line 713)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 713, 12), original_rule_317007, (str_317008, wday_strings_317006))
        # SSA branch for the else part of an if statement (line 700)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 715):
        
        # Assigning a Attribute to a Name (line 715):
        # Getting the type of 'self' (line 715)
        self_317009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 28), 'self')
        # Obtaining the member '_original_rule' of a type (line 715)
        _original_rule_317010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 28), self_317009, '_original_rule')
        # Assigning a type to the variable 'original_rule' (line 715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 12), 'original_rule', _original_rule_317010)
        # SSA join for if statement (line 700)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Name (line 717):
        
        # Assigning a Str to a Name (line 717):
        str_317011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 717, 18), 'str', '{name}={vals}')
        # Assigning a type to the variable 'partfmt' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'partfmt', str_317011)
        
        
        # Obtaining an instance of the builtin type 'list' (line 718)
        list_317012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 718)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 718)
        tuple_317013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 718)
        # Adding element type (line 718)
        str_317014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 27), 'str', 'BYSETPOS')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 27), tuple_317013, str_317014)
        # Adding element type (line 718)
        str_317015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 39), 'str', 'bysetpos')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 27), tuple_317013, str_317015)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317013)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 719)
        tuple_317016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 719)
        # Adding element type (line 719)
        str_317017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 27), 'str', 'BYMONTH')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 719, 27), tuple_317016, str_317017)
        # Adding element type (line 719)
        str_317018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 38), 'str', 'bymonth')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 719, 27), tuple_317016, str_317018)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317016)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 720)
        tuple_317019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 720)
        # Adding element type (line 720)
        str_317020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 27), 'str', 'BYMONTHDAY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 27), tuple_317019, str_317020)
        # Adding element type (line 720)
        str_317021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 41), 'str', 'bymonthday')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 27), tuple_317019, str_317021)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317019)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 721)
        tuple_317022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 721)
        # Adding element type (line 721)
        str_317023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 27), 'str', 'BYYEARDAY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 27), tuple_317022, str_317023)
        # Adding element type (line 721)
        str_317024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 40), 'str', 'byyearday')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 27), tuple_317022, str_317024)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317022)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 722)
        tuple_317025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 722)
        # Adding element type (line 722)
        str_317026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 27), 'str', 'BYWEEKNO')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 722, 27), tuple_317025, str_317026)
        # Adding element type (line 722)
        str_317027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 39), 'str', 'byweekno')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 722, 27), tuple_317025, str_317027)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317025)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 723)
        tuple_317028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 723)
        # Adding element type (line 723)
        str_317029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 27), 'str', 'BYDAY')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 27), tuple_317028, str_317029)
        # Adding element type (line 723)
        str_317030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 36), 'str', 'byweekday')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 27), tuple_317028, str_317030)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317028)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 724)
        tuple_317031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 724)
        # Adding element type (line 724)
        str_317032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 27), 'str', 'BYHOUR')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 724, 27), tuple_317031, str_317032)
        # Adding element type (line 724)
        str_317033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 37), 'str', 'byhour')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 724, 27), tuple_317031, str_317033)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317031)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 725)
        tuple_317034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 725)
        # Adding element type (line 725)
        str_317035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 27), 'str', 'BYMINUTE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 725, 27), tuple_317034, str_317035)
        # Adding element type (line 725)
        str_317036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 39), 'str', 'byminute')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 725, 27), tuple_317034, str_317036)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317034)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 726)
        tuple_317037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 726)
        # Adding element type (line 726)
        str_317038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 27), 'str', 'BYSECOND')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 726, 27), tuple_317037, str_317038)
        # Adding element type (line 726)
        str_317039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 39), 'str', 'bysecond')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 726, 27), tuple_317037, str_317039)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317037)
        # Adding element type (line 718)
        
        # Obtaining an instance of the builtin type 'tuple' (line 727)
        tuple_317040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 727)
        # Adding element type (line 727)
        str_317041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 27), 'str', 'BYEASTER')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 27), tuple_317040, str_317041)
        # Adding element type (line 727)
        str_317042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 39), 'str', 'byeaster')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 27), tuple_317040, str_317042)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 25), list_317012, tuple_317040)
        
        # Testing the type of a for loop iterable (line 718)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 718, 8), list_317012)
        # Getting the type of the for loop variable (line 718)
        for_loop_var_317043 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 718, 8), list_317012)
        # Assigning a type to the variable 'name' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 8), for_loop_var_317043))
        # Assigning a type to the variable 'key' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 718, 8), for_loop_var_317043))
        # SSA begins for a for statement (line 718)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 728):
        
        # Assigning a Call to a Name (line 728):
        
        # Call to get(...): (line 728)
        # Processing the call arguments (line 728)
        # Getting the type of 'key' (line 728)
        key_317046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 38), 'key', False)
        # Processing the call keyword arguments (line 728)
        kwargs_317047 = {}
        # Getting the type of 'original_rule' (line 728)
        original_rule_317044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 20), 'original_rule', False)
        # Obtaining the member 'get' of a type (line 728)
        get_317045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 20), original_rule_317044, 'get')
        # Calling get(args, kwargs) (line 728)
        get_call_result_317048 = invoke(stypy.reporting.localization.Localization(__file__, 728, 20), get_317045, *[key_317046], **kwargs_317047)
        
        # Assigning a type to the variable 'value' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 12), 'value', get_call_result_317048)
        
        # Getting the type of 'value' (line 729)
        value_317049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 15), 'value')
        # Testing the type of an if condition (line 729)
        if_condition_317050 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 729, 12), value_317049)
        # Assigning a type to the variable 'if_condition_317050' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 12), 'if_condition_317050', if_condition_317050)
        # SSA begins for if statement (line 729)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 730)
        # Processing the call arguments (line 730)
        
        # Call to format(...): (line 730)
        # Processing the call keyword arguments (line 730)
        # Getting the type of 'name' (line 730)
        name_317055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 49), 'name', False)
        keyword_317056 = name_317055
        
        # Call to join(...): (line 730)
        # Processing the call arguments (line 730)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 730, 70, True)
        # Calculating comprehension expression
        # Getting the type of 'value' (line 731)
        value_317063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 70), 'value', False)
        comprehension_317064 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 730, 70), value_317063)
        # Assigning a type to the variable 'v' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 70), 'v', comprehension_317064)
        
        # Call to str(...): (line 730)
        # Processing the call arguments (line 730)
        # Getting the type of 'v' (line 730)
        v_317060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 74), 'v', False)
        # Processing the call keyword arguments (line 730)
        kwargs_317061 = {}
        # Getting the type of 'str' (line 730)
        str_317059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 70), 'str', False)
        # Calling str(args, kwargs) (line 730)
        str_call_result_317062 = invoke(stypy.reporting.localization.Localization(__file__, 730, 70), str_317059, *[v_317060], **kwargs_317061)
        
        list_317065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 70), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 730, 70), list_317065, str_call_result_317062)
        # Processing the call keyword arguments (line 730)
        kwargs_317066 = {}
        str_317057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 61), 'str', ',')
        # Obtaining the member 'join' of a type (line 730)
        join_317058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 61), str_317057, 'join')
        # Calling join(args, kwargs) (line 730)
        join_call_result_317067 = invoke(stypy.reporting.localization.Localization(__file__, 730, 61), join_317058, *[list_317065], **kwargs_317066)
        
        keyword_317068 = join_call_result_317067
        kwargs_317069 = {'vals': keyword_317068, 'name': keyword_317056}
        # Getting the type of 'partfmt' (line 730)
        partfmt_317053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 29), 'partfmt', False)
        # Obtaining the member 'format' of a type (line 730)
        format_317054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 29), partfmt_317053, 'format')
        # Calling format(args, kwargs) (line 730)
        format_call_result_317070 = invoke(stypy.reporting.localization.Localization(__file__, 730, 29), format_317054, *[], **kwargs_317069)
        
        # Processing the call keyword arguments (line 730)
        kwargs_317071 = {}
        # Getting the type of 'parts' (line 730)
        parts_317051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 16), 'parts', False)
        # Obtaining the member 'append' of a type (line 730)
        append_317052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 16), parts_317051, 'append')
        # Calling append(args, kwargs) (line 730)
        append_call_result_317072 = invoke(stypy.reporting.localization.Localization(__file__, 730, 16), append_317052, *[format_call_result_317070], **kwargs_317071)
        
        # SSA join for if statement (line 729)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 733)
        # Processing the call arguments (line 733)
        
        # Call to join(...): (line 733)
        # Processing the call arguments (line 733)
        # Getting the type of 'parts' (line 733)
        parts_317077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 31), 'parts', False)
        # Processing the call keyword arguments (line 733)
        kwargs_317078 = {}
        str_317075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 22), 'str', ';')
        # Obtaining the member 'join' of a type (line 733)
        join_317076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 22), str_317075, 'join')
        # Calling join(args, kwargs) (line 733)
        join_call_result_317079 = invoke(stypy.reporting.localization.Localization(__file__, 733, 22), join_317076, *[parts_317077], **kwargs_317078)
        
        # Processing the call keyword arguments (line 733)
        kwargs_317080 = {}
        # Getting the type of 'output' (line 733)
        output_317073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'output', False)
        # Obtaining the member 'append' of a type (line 733)
        append_317074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 8), output_317073, 'append')
        # Calling append(args, kwargs) (line 733)
        append_call_result_317081 = invoke(stypy.reporting.localization.Localization(__file__, 733, 8), append_317074, *[join_call_result_317079], **kwargs_317080)
        
        
        # Call to join(...): (line 734)
        # Processing the call arguments (line 734)
        # Getting the type of 'output' (line 734)
        output_317084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 25), 'output', False)
        # Processing the call keyword arguments (line 734)
        kwargs_317085 = {}
        str_317082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 15), 'str', '\n')
        # Obtaining the member 'join' of a type (line 734)
        join_317083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 15), str_317082, 'join')
        # Calling join(args, kwargs) (line 734)
        join_call_result_317086 = invoke(stypy.reporting.localization.Localization(__file__, 734, 15), join_317083, *[output_317084], **kwargs_317085)
        
        # Assigning a type to the variable 'stypy_return_type' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'stypy_return_type', join_call_result_317086)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 674)
        stypy_return_type_317087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_317087)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_317087


    @norecursion
    def replace(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'replace'
        module_type_store = module_type_store.open_function_context('replace', 736, 4, False)
        # Assigning a type to the variable 'self' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrule.replace.__dict__.__setitem__('stypy_localization', localization)
        rrule.replace.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrule.replace.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrule.replace.__dict__.__setitem__('stypy_function_name', 'rrule.replace')
        rrule.replace.__dict__.__setitem__('stypy_param_names_list', [])
        rrule.replace.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrule.replace.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        rrule.replace.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrule.replace.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrule.replace.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrule.replace.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrule.replace', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'replace', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'replace(...)' code ##################

        str_317088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, (-1)), 'str', 'Return new rrule with same attributes except for those attributes given new\n           values by whichever keyword arguments are specified.')
        
        # Assigning a Dict to a Name (line 739):
        
        # Assigning a Dict to a Name (line 739):
        
        # Obtaining an instance of the builtin type 'dict' (line 739)
        dict_317089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 21), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 739)
        # Adding element type (key, value) (line 739)
        str_317090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 22), 'str', 'interval')
        # Getting the type of 'self' (line 739)
        self_317091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 34), 'self')
        # Obtaining the member '_interval' of a type (line 739)
        _interval_317092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 34), self_317091, '_interval')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 21), dict_317089, (str_317090, _interval_317092))
        # Adding element type (key, value) (line 739)
        str_317093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, 22), 'str', 'count')
        # Getting the type of 'self' (line 740)
        self_317094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 31), 'self')
        # Obtaining the member '_count' of a type (line 740)
        _count_317095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 31), self_317094, '_count')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 21), dict_317089, (str_317093, _count_317095))
        # Adding element type (key, value) (line 739)
        str_317096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 741, 22), 'str', 'dtstart')
        # Getting the type of 'self' (line 741)
        self_317097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 33), 'self')
        # Obtaining the member '_dtstart' of a type (line 741)
        _dtstart_317098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 33), self_317097, '_dtstart')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 21), dict_317089, (str_317096, _dtstart_317098))
        # Adding element type (key, value) (line 739)
        str_317099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 22), 'str', 'freq')
        # Getting the type of 'self' (line 742)
        self_317100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 30), 'self')
        # Obtaining the member '_freq' of a type (line 742)
        _freq_317101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 30), self_317100, '_freq')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 21), dict_317089, (str_317099, _freq_317101))
        # Adding element type (key, value) (line 739)
        str_317102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 22), 'str', 'until')
        # Getting the type of 'self' (line 743)
        self_317103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 31), 'self')
        # Obtaining the member '_until' of a type (line 743)
        _until_317104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 31), self_317103, '_until')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 21), dict_317089, (str_317102, _until_317104))
        # Adding element type (key, value) (line 739)
        str_317105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, 22), 'str', 'wkst')
        # Getting the type of 'self' (line 744)
        self_317106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 30), 'self')
        # Obtaining the member '_wkst' of a type (line 744)
        _wkst_317107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 30), self_317106, '_wkst')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 21), dict_317089, (str_317105, _wkst_317107))
        # Adding element type (key, value) (line 739)
        str_317108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, 22), 'str', 'cache')
        
        
        # Getting the type of 'self' (line 745)
        self_317109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 40), 'self')
        # Obtaining the member '_cache' of a type (line 745)
        _cache_317110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 40), self_317109, '_cache')
        # Getting the type of 'None' (line 745)
        None_317111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 55), 'None')
        # Applying the binary operator 'is' (line 745)
        result_is__317112 = python_operator(stypy.reporting.localization.Localization(__file__, 745, 40), 'is', _cache_317110, None_317111)
        
        # Testing the type of an if expression (line 745)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 745, 31), result_is__317112)
        # SSA begins for if expression (line 745)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'False' (line 745)
        False_317113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 31), 'False')
        # SSA branch for the else part of an if expression (line 745)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'True' (line 745)
        True_317114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 65), 'True')
        # SSA join for if expression (line 745)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_317115 = union_type.UnionType.add(False_317113, True_317114)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 739, 21), dict_317089, (str_317108, if_exp_317115))
        
        # Assigning a type to the variable 'new_kwargs' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'new_kwargs', dict_317089)
        
        # Call to update(...): (line 746)
        # Processing the call arguments (line 746)
        # Getting the type of 'self' (line 746)
        self_317118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 26), 'self', False)
        # Obtaining the member '_original_rule' of a type (line 746)
        _original_rule_317119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 26), self_317118, '_original_rule')
        # Processing the call keyword arguments (line 746)
        kwargs_317120 = {}
        # Getting the type of 'new_kwargs' (line 746)
        new_kwargs_317116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'new_kwargs', False)
        # Obtaining the member 'update' of a type (line 746)
        update_317117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 8), new_kwargs_317116, 'update')
        # Calling update(args, kwargs) (line 746)
        update_call_result_317121 = invoke(stypy.reporting.localization.Localization(__file__, 746, 8), update_317117, *[_original_rule_317119], **kwargs_317120)
        
        
        # Call to update(...): (line 747)
        # Processing the call arguments (line 747)
        # Getting the type of 'kwargs' (line 747)
        kwargs_317124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 26), 'kwargs', False)
        # Processing the call keyword arguments (line 747)
        kwargs_317125 = {}
        # Getting the type of 'new_kwargs' (line 747)
        new_kwargs_317122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'new_kwargs', False)
        # Obtaining the member 'update' of a type (line 747)
        update_317123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 8), new_kwargs_317122, 'update')
        # Calling update(args, kwargs) (line 747)
        update_call_result_317126 = invoke(stypy.reporting.localization.Localization(__file__, 747, 8), update_317123, *[kwargs_317124], **kwargs_317125)
        
        
        # Call to rrule(...): (line 748)
        # Processing the call keyword arguments (line 748)
        # Getting the type of 'new_kwargs' (line 748)
        new_kwargs_317128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 23), 'new_kwargs', False)
        kwargs_317129 = {'new_kwargs_317128': new_kwargs_317128}
        # Getting the type of 'rrule' (line 748)
        rrule_317127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 15), 'rrule', False)
        # Calling rrule(args, kwargs) (line 748)
        rrule_call_result_317130 = invoke(stypy.reporting.localization.Localization(__file__, 748, 15), rrule_317127, *[], **kwargs_317129)
        
        # Assigning a type to the variable 'stypy_return_type' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'stypy_return_type', rrule_call_result_317130)
        
        # ################# End of 'replace(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'replace' in the type store
        # Getting the type of 'stypy_return_type' (line 736)
        stypy_return_type_317131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_317131)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'replace'
        return stypy_return_type_317131


    @norecursion
    def _iter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter'
        module_type_store = module_type_store.open_function_context('_iter', 750, 4, False)
        # Assigning a type to the variable 'self' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrule._iter.__dict__.__setitem__('stypy_localization', localization)
        rrule._iter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrule._iter.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrule._iter.__dict__.__setitem__('stypy_function_name', 'rrule._iter')
        rrule._iter.__dict__.__setitem__('stypy_param_names_list', [])
        rrule._iter.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrule._iter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrule._iter.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrule._iter.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrule._iter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrule._iter.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrule._iter', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter(...)' code ##################

        
        # Assigning a Call to a Tuple (line 751):
        
        # Assigning a Call to a Name:
        
        # Call to timetuple(...): (line 752)
        # Processing the call keyword arguments (line 752)
        kwargs_317135 = {}
        # Getting the type of 'self' (line 752)
        self_317132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 12), 'self', False)
        # Obtaining the member '_dtstart' of a type (line 752)
        _dtstart_317133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 12), self_317132, '_dtstart')
        # Obtaining the member 'timetuple' of a type (line 752)
        timetuple_317134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 12), _dtstart_317133, 'timetuple')
        # Calling timetuple(args, kwargs) (line 752)
        timetuple_call_result_317136 = invoke(stypy.reporting.localization.Localization(__file__, 752, 12), timetuple_317134, *[], **kwargs_317135)
        
        # Assigning a type to the variable 'call_assignment_315071' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', timetuple_call_result_317136)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317140 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317137, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317141 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317138, *[int_317139], **kwargs_317140)
        
        # Assigning a type to the variable 'call_assignment_315072' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315072', getitem___call_result_317141)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315072' (line 751)
        call_assignment_315072_317142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315072')
        # Assigning a type to the variable 'year' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'year', call_assignment_315072_317142)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317146 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317143, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317147 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317144, *[int_317145], **kwargs_317146)
        
        # Assigning a type to the variable 'call_assignment_315073' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315073', getitem___call_result_317147)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315073' (line 751)
        call_assignment_315073_317148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315073')
        # Assigning a type to the variable 'month' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 14), 'month', call_assignment_315073_317148)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317152 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317149, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317153 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317150, *[int_317151], **kwargs_317152)
        
        # Assigning a type to the variable 'call_assignment_315074' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315074', getitem___call_result_317153)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315074' (line 751)
        call_assignment_315074_317154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315074')
        # Assigning a type to the variable 'day' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 21), 'day', call_assignment_315074_317154)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317158 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317155, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317159 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317156, *[int_317157], **kwargs_317158)
        
        # Assigning a type to the variable 'call_assignment_315075' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315075', getitem___call_result_317159)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315075' (line 751)
        call_assignment_315075_317160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315075')
        # Assigning a type to the variable 'hour' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 26), 'hour', call_assignment_315075_317160)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317164 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317161, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317165 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317162, *[int_317163], **kwargs_317164)
        
        # Assigning a type to the variable 'call_assignment_315076' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315076', getitem___call_result_317165)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315076' (line 751)
        call_assignment_315076_317166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315076')
        # Assigning a type to the variable 'minute' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 32), 'minute', call_assignment_315076_317166)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317170 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317167, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317171 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317168, *[int_317169], **kwargs_317170)
        
        # Assigning a type to the variable 'call_assignment_315077' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315077', getitem___call_result_317171)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315077' (line 751)
        call_assignment_315077_317172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315077')
        # Assigning a type to the variable 'second' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 40), 'second', call_assignment_315077_317172)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317176 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317173, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317177 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317174, *[int_317175], **kwargs_317176)
        
        # Assigning a type to the variable 'call_assignment_315078' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315078', getitem___call_result_317177)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315078' (line 751)
        call_assignment_315078_317178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315078')
        # Assigning a type to the variable 'weekday' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 48), 'weekday', call_assignment_315078_317178)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317182 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317179, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317183 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317180, *[int_317181], **kwargs_317182)
        
        # Assigning a type to the variable 'call_assignment_315079' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315079', getitem___call_result_317183)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315079' (line 751)
        call_assignment_315079_317184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315079')
        # Assigning a type to the variable 'yearday' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 57), 'yearday', call_assignment_315079_317184)
        
        # Assigning a Call to a Name (line 751):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 8), 'int')
        # Processing the call keyword arguments
        kwargs_317188 = {}
        # Getting the type of 'call_assignment_315071' (line 751)
        call_assignment_315071_317185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315071', False)
        # Obtaining the member '__getitem__' of a type (line 751)
        getitem___317186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 8), call_assignment_315071_317185, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317189 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317186, *[int_317187], **kwargs_317188)
        
        # Assigning a type to the variable 'call_assignment_315080' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315080', getitem___call_result_317189)
        
        # Assigning a Name to a Name (line 751):
        # Getting the type of 'call_assignment_315080' (line 751)
        call_assignment_315080_317190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 8), 'call_assignment_315080')
        # Assigning a type to the variable '_' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 66), '_', call_assignment_315080_317190)
        
        # Assigning a Attribute to a Name (line 755):
        
        # Assigning a Attribute to a Name (line 755):
        # Getting the type of 'self' (line 755)
        self_317191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 15), 'self')
        # Obtaining the member '_freq' of a type (line 755)
        _freq_317192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 15), self_317191, '_freq')
        # Assigning a type to the variable 'freq' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'freq', _freq_317192)
        
        # Assigning a Attribute to a Name (line 756):
        
        # Assigning a Attribute to a Name (line 756):
        # Getting the type of 'self' (line 756)
        self_317193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 19), 'self')
        # Obtaining the member '_interval' of a type (line 756)
        _interval_317194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 19), self_317193, '_interval')
        # Assigning a type to the variable 'interval' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'interval', _interval_317194)
        
        # Assigning a Attribute to a Name (line 757):
        
        # Assigning a Attribute to a Name (line 757):
        # Getting the type of 'self' (line 757)
        self_317195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 15), 'self')
        # Obtaining the member '_wkst' of a type (line 757)
        _wkst_317196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 15), self_317195, '_wkst')
        # Assigning a type to the variable 'wkst' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'wkst', _wkst_317196)
        
        # Assigning a Attribute to a Name (line 758):
        
        # Assigning a Attribute to a Name (line 758):
        # Getting the type of 'self' (line 758)
        self_317197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 16), 'self')
        # Obtaining the member '_until' of a type (line 758)
        _until_317198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 16), self_317197, '_until')
        # Assigning a type to the variable 'until' (line 758)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 8), 'until', _until_317198)
        
        # Assigning a Attribute to a Name (line 759):
        
        # Assigning a Attribute to a Name (line 759):
        # Getting the type of 'self' (line 759)
        self_317199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 18), 'self')
        # Obtaining the member '_bymonth' of a type (line 759)
        _bymonth_317200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 18), self_317199, '_bymonth')
        # Assigning a type to the variable 'bymonth' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 8), 'bymonth', _bymonth_317200)
        
        # Assigning a Attribute to a Name (line 760):
        
        # Assigning a Attribute to a Name (line 760):
        # Getting the type of 'self' (line 760)
        self_317201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 19), 'self')
        # Obtaining the member '_byweekno' of a type (line 760)
        _byweekno_317202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 19), self_317201, '_byweekno')
        # Assigning a type to the variable 'byweekno' (line 760)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 760, 8), 'byweekno', _byweekno_317202)
        
        # Assigning a Attribute to a Name (line 761):
        
        # Assigning a Attribute to a Name (line 761):
        # Getting the type of 'self' (line 761)
        self_317203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 20), 'self')
        # Obtaining the member '_byyearday' of a type (line 761)
        _byyearday_317204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 20), self_317203, '_byyearday')
        # Assigning a type to the variable 'byyearday' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'byyearday', _byyearday_317204)
        
        # Assigning a Attribute to a Name (line 762):
        
        # Assigning a Attribute to a Name (line 762):
        # Getting the type of 'self' (line 762)
        self_317205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 20), 'self')
        # Obtaining the member '_byweekday' of a type (line 762)
        _byweekday_317206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 20), self_317205, '_byweekday')
        # Assigning a type to the variable 'byweekday' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'byweekday', _byweekday_317206)
        
        # Assigning a Attribute to a Name (line 763):
        
        # Assigning a Attribute to a Name (line 763):
        # Getting the type of 'self' (line 763)
        self_317207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 19), 'self')
        # Obtaining the member '_byeaster' of a type (line 763)
        _byeaster_317208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 19), self_317207, '_byeaster')
        # Assigning a type to the variable 'byeaster' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'byeaster', _byeaster_317208)
        
        # Assigning a Attribute to a Name (line 764):
        
        # Assigning a Attribute to a Name (line 764):
        # Getting the type of 'self' (line 764)
        self_317209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 21), 'self')
        # Obtaining the member '_bymonthday' of a type (line 764)
        _bymonthday_317210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 764, 21), self_317209, '_bymonthday')
        # Assigning a type to the variable 'bymonthday' (line 764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'bymonthday', _bymonthday_317210)
        
        # Assigning a Attribute to a Name (line 765):
        
        # Assigning a Attribute to a Name (line 765):
        # Getting the type of 'self' (line 765)
        self_317211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 22), 'self')
        # Obtaining the member '_bynmonthday' of a type (line 765)
        _bynmonthday_317212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 22), self_317211, '_bynmonthday')
        # Assigning a type to the variable 'bynmonthday' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'bynmonthday', _bynmonthday_317212)
        
        # Assigning a Attribute to a Name (line 766):
        
        # Assigning a Attribute to a Name (line 766):
        # Getting the type of 'self' (line 766)
        self_317213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 19), 'self')
        # Obtaining the member '_bysetpos' of a type (line 766)
        _bysetpos_317214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 19), self_317213, '_bysetpos')
        # Assigning a type to the variable 'bysetpos' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 8), 'bysetpos', _bysetpos_317214)
        
        # Assigning a Attribute to a Name (line 767):
        
        # Assigning a Attribute to a Name (line 767):
        # Getting the type of 'self' (line 767)
        self_317215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 17), 'self')
        # Obtaining the member '_byhour' of a type (line 767)
        _byhour_317216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 17), self_317215, '_byhour')
        # Assigning a type to the variable 'byhour' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'byhour', _byhour_317216)
        
        # Assigning a Attribute to a Name (line 768):
        
        # Assigning a Attribute to a Name (line 768):
        # Getting the type of 'self' (line 768)
        self_317217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 19), 'self')
        # Obtaining the member '_byminute' of a type (line 768)
        _byminute_317218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 19), self_317217, '_byminute')
        # Assigning a type to the variable 'byminute' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'byminute', _byminute_317218)
        
        # Assigning a Attribute to a Name (line 769):
        
        # Assigning a Attribute to a Name (line 769):
        # Getting the type of 'self' (line 769)
        self_317219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 19), 'self')
        # Obtaining the member '_bysecond' of a type (line 769)
        _bysecond_317220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 19), self_317219, '_bysecond')
        # Assigning a type to the variable 'bysecond' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'bysecond', _bysecond_317220)
        
        # Assigning a Call to a Name (line 771):
        
        # Assigning a Call to a Name (line 771):
        
        # Call to _iterinfo(...): (line 771)
        # Processing the call arguments (line 771)
        # Getting the type of 'self' (line 771)
        self_317222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 23), 'self', False)
        # Processing the call keyword arguments (line 771)
        kwargs_317223 = {}
        # Getting the type of '_iterinfo' (line 771)
        _iterinfo_317221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 13), '_iterinfo', False)
        # Calling _iterinfo(args, kwargs) (line 771)
        _iterinfo_call_result_317224 = invoke(stypy.reporting.localization.Localization(__file__, 771, 13), _iterinfo_317221, *[self_317222], **kwargs_317223)
        
        # Assigning a type to the variable 'ii' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'ii', _iterinfo_call_result_317224)
        
        # Call to rebuild(...): (line 772)
        # Processing the call arguments (line 772)
        # Getting the type of 'year' (line 772)
        year_317227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 19), 'year', False)
        # Getting the type of 'month' (line 772)
        month_317228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 25), 'month', False)
        # Processing the call keyword arguments (line 772)
        kwargs_317229 = {}
        # Getting the type of 'ii' (line 772)
        ii_317225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'ii', False)
        # Obtaining the member 'rebuild' of a type (line 772)
        rebuild_317226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 8), ii_317225, 'rebuild')
        # Calling rebuild(args, kwargs) (line 772)
        rebuild_call_result_317230 = invoke(stypy.reporting.localization.Localization(__file__, 772, 8), rebuild_317226, *[year_317227, month_317228], **kwargs_317229)
        
        
        # Assigning a Subscript to a Name (line 774):
        
        # Assigning a Subscript to a Name (line 774):
        
        # Obtaining the type of the subscript
        # Getting the type of 'freq' (line 780)
        freq_317231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 43), 'freq')
        
        # Obtaining an instance of the builtin type 'dict' (line 774)
        dict_317232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 774)
        # Adding element type (key, value) (line 774)
        # Getting the type of 'YEARLY' (line 774)
        YEARLY_317233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 21), 'YEARLY')
        # Getting the type of 'ii' (line 774)
        ii_317234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 29), 'ii')
        # Obtaining the member 'ydayset' of a type (line 774)
        ydayset_317235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 29), ii_317234, 'ydayset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), dict_317232, (YEARLY_317233, ydayset_317235))
        # Adding element type (key, value) (line 774)
        # Getting the type of 'MONTHLY' (line 775)
        MONTHLY_317236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 21), 'MONTHLY')
        # Getting the type of 'ii' (line 775)
        ii_317237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 30), 'ii')
        # Obtaining the member 'mdayset' of a type (line 775)
        mdayset_317238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 30), ii_317237, 'mdayset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), dict_317232, (MONTHLY_317236, mdayset_317238))
        # Adding element type (key, value) (line 774)
        # Getting the type of 'WEEKLY' (line 776)
        WEEKLY_317239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 21), 'WEEKLY')
        # Getting the type of 'ii' (line 776)
        ii_317240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 29), 'ii')
        # Obtaining the member 'wdayset' of a type (line 776)
        wdayset_317241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 29), ii_317240, 'wdayset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), dict_317232, (WEEKLY_317239, wdayset_317241))
        # Adding element type (key, value) (line 774)
        # Getting the type of 'DAILY' (line 777)
        DAILY_317242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 21), 'DAILY')
        # Getting the type of 'ii' (line 777)
        ii_317243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 28), 'ii')
        # Obtaining the member 'ddayset' of a type (line 777)
        ddayset_317244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 28), ii_317243, 'ddayset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), dict_317232, (DAILY_317242, ddayset_317244))
        # Adding element type (key, value) (line 774)
        # Getting the type of 'HOURLY' (line 778)
        HOURLY_317245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 21), 'HOURLY')
        # Getting the type of 'ii' (line 778)
        ii_317246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 29), 'ii')
        # Obtaining the member 'ddayset' of a type (line 778)
        ddayset_317247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 29), ii_317246, 'ddayset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), dict_317232, (HOURLY_317245, ddayset_317247))
        # Adding element type (key, value) (line 774)
        # Getting the type of 'MINUTELY' (line 779)
        MINUTELY_317248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 21), 'MINUTELY')
        # Getting the type of 'ii' (line 779)
        ii_317249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 31), 'ii')
        # Obtaining the member 'ddayset' of a type (line 779)
        ddayset_317250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 31), ii_317249, 'ddayset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), dict_317232, (MINUTELY_317248, ddayset_317250))
        # Adding element type (key, value) (line 774)
        # Getting the type of 'SECONDLY' (line 780)
        SECONDLY_317251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 21), 'SECONDLY')
        # Getting the type of 'ii' (line 780)
        ii_317252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 31), 'ii')
        # Obtaining the member 'ddayset' of a type (line 780)
        ddayset_317253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 31), ii_317252, 'ddayset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 774, 20), dict_317232, (SECONDLY_317251, ddayset_317253))
        
        # Obtaining the member '__getitem__' of a type (line 774)
        getitem___317254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 774, 20), dict_317232, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 774)
        subscript_call_result_317255 = invoke(stypy.reporting.localization.Localization(__file__, 774, 20), getitem___317254, freq_317231)
        
        # Assigning a type to the variable 'getdayset' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 8), 'getdayset', subscript_call_result_317255)
        
        
        # Getting the type of 'freq' (line 782)
        freq_317256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 11), 'freq')
        # Getting the type of 'HOURLY' (line 782)
        HOURLY_317257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 18), 'HOURLY')
        # Applying the binary operator '<' (line 782)
        result_lt_317258 = python_operator(stypy.reporting.localization.Localization(__file__, 782, 11), '<', freq_317256, HOURLY_317257)
        
        # Testing the type of an if condition (line 782)
        if_condition_317259 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 782, 8), result_lt_317258)
        # Assigning a type to the variable 'if_condition_317259' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'if_condition_317259', if_condition_317259)
        # SSA begins for if statement (line 782)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 783):
        
        # Assigning a Attribute to a Name (line 783):
        # Getting the type of 'self' (line 783)
        self_317260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 22), 'self')
        # Obtaining the member '_timeset' of a type (line 783)
        _timeset_317261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 22), self_317260, '_timeset')
        # Assigning a type to the variable 'timeset' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'timeset', _timeset_317261)
        # SSA branch for the else part of an if statement (line 782)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 785):
        
        # Assigning a Subscript to a Name (line 785):
        
        # Obtaining the type of the subscript
        # Getting the type of 'freq' (line 787)
        freq_317262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 49), 'freq')
        
        # Obtaining an instance of the builtin type 'dict' (line 785)
        dict_317263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 25), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 785)
        # Adding element type (key, value) (line 785)
        # Getting the type of 'HOURLY' (line 785)
        HOURLY_317264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 26), 'HOURLY')
        # Getting the type of 'ii' (line 785)
        ii_317265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 34), 'ii')
        # Obtaining the member 'htimeset' of a type (line 785)
        htimeset_317266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 34), ii_317265, 'htimeset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 25), dict_317263, (HOURLY_317264, htimeset_317266))
        # Adding element type (key, value) (line 785)
        # Getting the type of 'MINUTELY' (line 786)
        MINUTELY_317267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 26), 'MINUTELY')
        # Getting the type of 'ii' (line 786)
        ii_317268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 36), 'ii')
        # Obtaining the member 'mtimeset' of a type (line 786)
        mtimeset_317269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 36), ii_317268, 'mtimeset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 25), dict_317263, (MINUTELY_317267, mtimeset_317269))
        # Adding element type (key, value) (line 785)
        # Getting the type of 'SECONDLY' (line 787)
        SECONDLY_317270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 26), 'SECONDLY')
        # Getting the type of 'ii' (line 787)
        ii_317271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 36), 'ii')
        # Obtaining the member 'stimeset' of a type (line 787)
        stimeset_317272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 36), ii_317271, 'stimeset')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 25), dict_317263, (SECONDLY_317270, stimeset_317272))
        
        # Obtaining the member '__getitem__' of a type (line 785)
        getitem___317273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 25), dict_317263, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 785)
        subscript_call_result_317274 = invoke(stypy.reporting.localization.Localization(__file__, 785, 25), getitem___317273, freq_317262)
        
        # Assigning a type to the variable 'gettimeset' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 12), 'gettimeset', subscript_call_result_317274)
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'freq' (line 788)
        freq_317275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 17), 'freq')
        # Getting the type of 'HOURLY' (line 788)
        HOURLY_317276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 25), 'HOURLY')
        # Applying the binary operator '>=' (line 788)
        result_ge_317277 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 17), '>=', freq_317275, HOURLY_317276)
        
        # Getting the type of 'self' (line 789)
        self_317278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 17), 'self')
        # Obtaining the member '_byhour' of a type (line 789)
        _byhour_317279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 17), self_317278, '_byhour')
        # Applying the binary operator 'and' (line 788)
        result_and_keyword_317280 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 17), 'and', result_ge_317277, _byhour_317279)
        
        # Getting the type of 'hour' (line 789)
        hour_317281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 34), 'hour')
        # Getting the type of 'self' (line 789)
        self_317282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 46), 'self')
        # Obtaining the member '_byhour' of a type (line 789)
        _byhour_317283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 46), self_317282, '_byhour')
        # Applying the binary operator 'notin' (line 789)
        result_contains_317284 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 34), 'notin', hour_317281, _byhour_317283)
        
        # Applying the binary operator 'and' (line 788)
        result_and_keyword_317285 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 17), 'and', result_and_keyword_317280, result_contains_317284)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'freq' (line 790)
        freq_317286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 17), 'freq')
        # Getting the type of 'MINUTELY' (line 790)
        MINUTELY_317287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 25), 'MINUTELY')
        # Applying the binary operator '>=' (line 790)
        result_ge_317288 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 17), '>=', freq_317286, MINUTELY_317287)
        
        # Getting the type of 'self' (line 791)
        self_317289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 17), 'self')
        # Obtaining the member '_byminute' of a type (line 791)
        _byminute_317290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 17), self_317289, '_byminute')
        # Applying the binary operator 'and' (line 790)
        result_and_keyword_317291 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 17), 'and', result_ge_317288, _byminute_317290)
        
        # Getting the type of 'minute' (line 791)
        minute_317292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 36), 'minute')
        # Getting the type of 'self' (line 791)
        self_317293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 50), 'self')
        # Obtaining the member '_byminute' of a type (line 791)
        _byminute_317294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 50), self_317293, '_byminute')
        # Applying the binary operator 'notin' (line 791)
        result_contains_317295 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 36), 'notin', minute_317292, _byminute_317294)
        
        # Applying the binary operator 'and' (line 790)
        result_and_keyword_317296 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 17), 'and', result_and_keyword_317291, result_contains_317295)
        
        # Applying the binary operator 'or' (line 788)
        result_or_keyword_317297 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 16), 'or', result_and_keyword_317285, result_and_keyword_317296)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'freq' (line 792)
        freq_317298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 17), 'freq')
        # Getting the type of 'SECONDLY' (line 792)
        SECONDLY_317299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 25), 'SECONDLY')
        # Applying the binary operator '>=' (line 792)
        result_ge_317300 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 17), '>=', freq_317298, SECONDLY_317299)
        
        # Getting the type of 'self' (line 793)
        self_317301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 17), 'self')
        # Obtaining the member '_bysecond' of a type (line 793)
        _bysecond_317302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 17), self_317301, '_bysecond')
        # Applying the binary operator 'and' (line 792)
        result_and_keyword_317303 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 17), 'and', result_ge_317300, _bysecond_317302)
        
        # Getting the type of 'second' (line 793)
        second_317304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 36), 'second')
        # Getting the type of 'self' (line 793)
        self_317305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 50), 'self')
        # Obtaining the member '_bysecond' of a type (line 793)
        _bysecond_317306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 50), self_317305, '_bysecond')
        # Applying the binary operator 'notin' (line 793)
        result_contains_317307 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 36), 'notin', second_317304, _bysecond_317306)
        
        # Applying the binary operator 'and' (line 792)
        result_and_keyword_317308 = python_operator(stypy.reporting.localization.Localization(__file__, 792, 17), 'and', result_and_keyword_317303, result_contains_317307)
        
        # Applying the binary operator 'or' (line 788)
        result_or_keyword_317309 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 16), 'or', result_or_keyword_317297, result_and_keyword_317308)
        
        # Testing the type of an if condition (line 788)
        if_condition_317310 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 788, 12), result_or_keyword_317309)
        # Assigning a type to the variable 'if_condition_317310' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 12), 'if_condition_317310', if_condition_317310)
        # SSA begins for if statement (line 788)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 794):
        
        # Assigning a Tuple to a Name (line 794):
        
        # Obtaining an instance of the builtin type 'tuple' (line 794)
        tuple_317311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 794)
        
        # Assigning a type to the variable 'timeset' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 16), 'timeset', tuple_317311)
        # SSA branch for the else part of an if statement (line 788)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 796):
        
        # Assigning a Call to a Name (line 796):
        
        # Call to gettimeset(...): (line 796)
        # Processing the call arguments (line 796)
        # Getting the type of 'hour' (line 796)
        hour_317313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 37), 'hour', False)
        # Getting the type of 'minute' (line 796)
        minute_317314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 43), 'minute', False)
        # Getting the type of 'second' (line 796)
        second_317315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 51), 'second', False)
        # Processing the call keyword arguments (line 796)
        kwargs_317316 = {}
        # Getting the type of 'gettimeset' (line 796)
        gettimeset_317312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 26), 'gettimeset', False)
        # Calling gettimeset(args, kwargs) (line 796)
        gettimeset_call_result_317317 = invoke(stypy.reporting.localization.Localization(__file__, 796, 26), gettimeset_317312, *[hour_317313, minute_317314, second_317315], **kwargs_317316)
        
        # Assigning a type to the variable 'timeset' (line 796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 16), 'timeset', gettimeset_call_result_317317)
        # SSA join for if statement (line 788)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 782)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 798):
        
        # Assigning a Num to a Name (line 798):
        int_317318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 16), 'int')
        # Assigning a type to the variable 'total' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 8), 'total', int_317318)
        
        # Assigning a Attribute to a Name (line 799):
        
        # Assigning a Attribute to a Name (line 799):
        # Getting the type of 'self' (line 799)
        self_317319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 16), 'self')
        # Obtaining the member '_count' of a type (line 799)
        _count_317320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 16), self_317319, '_count')
        # Assigning a type to the variable 'count' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 8), 'count', _count_317320)
        
        # Getting the type of 'True' (line 800)
        True_317321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 14), 'True')
        # Testing the type of an if condition (line 800)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 800, 8), True_317321)
        # SSA begins for while statement (line 800)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Call to a Tuple (line 802):
        
        # Assigning a Call to a Name:
        
        # Call to getdayset(...): (line 802)
        # Processing the call arguments (line 802)
        # Getting the type of 'year' (line 802)
        year_317323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 43), 'year', False)
        # Getting the type of 'month' (line 802)
        month_317324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 49), 'month', False)
        # Getting the type of 'day' (line 802)
        day_317325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 56), 'day', False)
        # Processing the call keyword arguments (line 802)
        kwargs_317326 = {}
        # Getting the type of 'getdayset' (line 802)
        getdayset_317322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 33), 'getdayset', False)
        # Calling getdayset(args, kwargs) (line 802)
        getdayset_call_result_317327 = invoke(stypy.reporting.localization.Localization(__file__, 802, 33), getdayset_317322, *[year_317323, month_317324, day_317325], **kwargs_317326)
        
        # Assigning a type to the variable 'call_assignment_315081' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315081', getdayset_call_result_317327)
        
        # Assigning a Call to a Name (line 802):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 12), 'int')
        # Processing the call keyword arguments
        kwargs_317331 = {}
        # Getting the type of 'call_assignment_315081' (line 802)
        call_assignment_315081_317328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315081', False)
        # Obtaining the member '__getitem__' of a type (line 802)
        getitem___317329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 12), call_assignment_315081_317328, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317332 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317329, *[int_317330], **kwargs_317331)
        
        # Assigning a type to the variable 'call_assignment_315082' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315082', getitem___call_result_317332)
        
        # Assigning a Name to a Name (line 802):
        # Getting the type of 'call_assignment_315082' (line 802)
        call_assignment_315082_317333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315082')
        # Assigning a type to the variable 'dayset' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'dayset', call_assignment_315082_317333)
        
        # Assigning a Call to a Name (line 802):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 12), 'int')
        # Processing the call keyword arguments
        kwargs_317337 = {}
        # Getting the type of 'call_assignment_315081' (line 802)
        call_assignment_315081_317334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315081', False)
        # Obtaining the member '__getitem__' of a type (line 802)
        getitem___317335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 12), call_assignment_315081_317334, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317338 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317335, *[int_317336], **kwargs_317337)
        
        # Assigning a type to the variable 'call_assignment_315083' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315083', getitem___call_result_317338)
        
        # Assigning a Name to a Name (line 802):
        # Getting the type of 'call_assignment_315083' (line 802)
        call_assignment_315083_317339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315083')
        # Assigning a type to the variable 'start' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 20), 'start', call_assignment_315083_317339)
        
        # Assigning a Call to a Name (line 802):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 12), 'int')
        # Processing the call keyword arguments
        kwargs_317343 = {}
        # Getting the type of 'call_assignment_315081' (line 802)
        call_assignment_315081_317340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315081', False)
        # Obtaining the member '__getitem__' of a type (line 802)
        getitem___317341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 12), call_assignment_315081_317340, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317344 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317341, *[int_317342], **kwargs_317343)
        
        # Assigning a type to the variable 'call_assignment_315084' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315084', getitem___call_result_317344)
        
        # Assigning a Name to a Name (line 802):
        # Getting the type of 'call_assignment_315084' (line 802)
        call_assignment_315084_317345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'call_assignment_315084')
        # Assigning a type to the variable 'end' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 27), 'end', call_assignment_315084_317345)
        
        # Assigning a Name to a Name (line 805):
        
        # Assigning a Name to a Name (line 805):
        # Getting the type of 'False' (line 805)
        False_317346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 23), 'False')
        # Assigning a type to the variable 'filtered' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 12), 'filtered', False_317346)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'start' (line 806)
        start_317347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 28), 'start')
        # Getting the type of 'end' (line 806)
        end_317348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 34), 'end')
        slice_317349 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 806, 21), start_317347, end_317348, None)
        # Getting the type of 'dayset' (line 806)
        dayset_317350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 21), 'dayset')
        # Obtaining the member '__getitem__' of a type (line 806)
        getitem___317351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 21), dayset_317350, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 806)
        subscript_call_result_317352 = invoke(stypy.reporting.localization.Localization(__file__, 806, 21), getitem___317351, slice_317349)
        
        # Testing the type of a for loop iterable (line 806)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 806, 12), subscript_call_result_317352)
        # Getting the type of the for loop variable (line 806)
        for_loop_var_317353 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 806, 12), subscript_call_result_317352)
        # Assigning a type to the variable 'i' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 12), 'i', for_loop_var_317353)
        # SSA begins for a for statement (line 806)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        # Getting the type of 'bymonth' (line 807)
        bymonth_317354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 21), 'bymonth')
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 807)
        i_317355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 42), 'i')
        # Getting the type of 'ii' (line 807)
        ii_317356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 33), 'ii')
        # Obtaining the member 'mmask' of a type (line 807)
        mmask_317357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 33), ii_317356, 'mmask')
        # Obtaining the member '__getitem__' of a type (line 807)
        getitem___317358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 33), mmask_317357, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 807)
        subscript_call_result_317359 = invoke(stypy.reporting.localization.Localization(__file__, 807, 33), getitem___317358, i_317355)
        
        # Getting the type of 'bymonth' (line 807)
        bymonth_317360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 52), 'bymonth')
        # Applying the binary operator 'notin' (line 807)
        result_contains_317361 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 33), 'notin', subscript_call_result_317359, bymonth_317360)
        
        # Applying the binary operator 'and' (line 807)
        result_and_keyword_317362 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 21), 'and', bymonth_317354, result_contains_317361)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'byweekno' (line 808)
        byweekno_317363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 21), 'byweekno')
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 808)
        i_317364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 49), 'i')
        # Getting the type of 'ii' (line 808)
        ii_317365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 38), 'ii')
        # Obtaining the member 'wnomask' of a type (line 808)
        wnomask_317366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 38), ii_317365, 'wnomask')
        # Obtaining the member '__getitem__' of a type (line 808)
        getitem___317367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 38), wnomask_317366, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 808)
        subscript_call_result_317368 = invoke(stypy.reporting.localization.Localization(__file__, 808, 38), getitem___317367, i_317364)
        
        # Applying the 'not' unary operator (line 808)
        result_not__317369 = python_operator(stypy.reporting.localization.Localization(__file__, 808, 34), 'not', subscript_call_result_317368)
        
        # Applying the binary operator 'and' (line 808)
        result_and_keyword_317370 = python_operator(stypy.reporting.localization.Localization(__file__, 808, 21), 'and', byweekno_317363, result_not__317369)
        
        # Applying the binary operator 'or' (line 807)
        result_or_keyword_317371 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 20), 'or', result_and_keyword_317362, result_and_keyword_317370)
        
        # Evaluating a boolean operation
        # Getting the type of 'byweekday' (line 809)
        byweekday_317372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 21), 'byweekday')
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 809)
        i_317373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 47), 'i')
        # Getting the type of 'ii' (line 809)
        ii_317374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 35), 'ii')
        # Obtaining the member 'wdaymask' of a type (line 809)
        wdaymask_317375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 35), ii_317374, 'wdaymask')
        # Obtaining the member '__getitem__' of a type (line 809)
        getitem___317376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 35), wdaymask_317375, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 809)
        subscript_call_result_317377 = invoke(stypy.reporting.localization.Localization(__file__, 809, 35), getitem___317376, i_317373)
        
        # Getting the type of 'byweekday' (line 809)
        byweekday_317378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 57), 'byweekday')
        # Applying the binary operator 'notin' (line 809)
        result_contains_317379 = python_operator(stypy.reporting.localization.Localization(__file__, 809, 35), 'notin', subscript_call_result_317377, byweekday_317378)
        
        # Applying the binary operator 'and' (line 809)
        result_and_keyword_317380 = python_operator(stypy.reporting.localization.Localization(__file__, 809, 21), 'and', byweekday_317372, result_contains_317379)
        
        # Applying the binary operator 'or' (line 807)
        result_or_keyword_317381 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 20), 'or', result_or_keyword_317371, result_and_keyword_317380)
        
        # Evaluating a boolean operation
        # Getting the type of 'ii' (line 810)
        ii_317382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 21), 'ii')
        # Obtaining the member 'nwdaymask' of a type (line 810)
        nwdaymask_317383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 21), ii_317382, 'nwdaymask')
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 810)
        i_317384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 55), 'i')
        # Getting the type of 'ii' (line 810)
        ii_317385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 42), 'ii')
        # Obtaining the member 'nwdaymask' of a type (line 810)
        nwdaymask_317386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 42), ii_317385, 'nwdaymask')
        # Obtaining the member '__getitem__' of a type (line 810)
        getitem___317387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 42), nwdaymask_317386, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 810)
        subscript_call_result_317388 = invoke(stypy.reporting.localization.Localization(__file__, 810, 42), getitem___317387, i_317384)
        
        # Applying the 'not' unary operator (line 810)
        result_not__317389 = python_operator(stypy.reporting.localization.Localization(__file__, 810, 38), 'not', subscript_call_result_317388)
        
        # Applying the binary operator 'and' (line 810)
        result_and_keyword_317390 = python_operator(stypy.reporting.localization.Localization(__file__, 810, 21), 'and', nwdaymask_317383, result_not__317389)
        
        # Applying the binary operator 'or' (line 807)
        result_or_keyword_317391 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 20), 'or', result_or_keyword_317381, result_and_keyword_317390)
        
        # Evaluating a boolean operation
        # Getting the type of 'byeaster' (line 811)
        byeaster_317392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 21), 'byeaster')
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 811)
        i_317393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 52), 'i')
        # Getting the type of 'ii' (line 811)
        ii_317394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 38), 'ii')
        # Obtaining the member 'eastermask' of a type (line 811)
        eastermask_317395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 38), ii_317394, 'eastermask')
        # Obtaining the member '__getitem__' of a type (line 811)
        getitem___317396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 38), eastermask_317395, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 811)
        subscript_call_result_317397 = invoke(stypy.reporting.localization.Localization(__file__, 811, 38), getitem___317396, i_317393)
        
        # Applying the 'not' unary operator (line 811)
        result_not__317398 = python_operator(stypy.reporting.localization.Localization(__file__, 811, 34), 'not', subscript_call_result_317397)
        
        # Applying the binary operator 'and' (line 811)
        result_and_keyword_317399 = python_operator(stypy.reporting.localization.Localization(__file__, 811, 21), 'and', byeaster_317392, result_not__317398)
        
        # Applying the binary operator 'or' (line 807)
        result_or_keyword_317400 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 20), 'or', result_or_keyword_317391, result_and_keyword_317399)
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        # Getting the type of 'bymonthday' (line 812)
        bymonthday_317401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 22), 'bymonthday')
        # Getting the type of 'bynmonthday' (line 812)
        bynmonthday_317402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 36), 'bynmonthday')
        # Applying the binary operator 'or' (line 812)
        result_or_keyword_317403 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 22), 'or', bymonthday_317401, bynmonthday_317402)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 813)
        i_317404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 33), 'i')
        # Getting the type of 'ii' (line 813)
        ii_317405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 21), 'ii')
        # Obtaining the member 'mdaymask' of a type (line 813)
        mdaymask_317406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 21), ii_317405, 'mdaymask')
        # Obtaining the member '__getitem__' of a type (line 813)
        getitem___317407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 21), mdaymask_317406, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 813)
        subscript_call_result_317408 = invoke(stypy.reporting.localization.Localization(__file__, 813, 21), getitem___317407, i_317404)
        
        # Getting the type of 'bymonthday' (line 813)
        bymonthday_317409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 43), 'bymonthday')
        # Applying the binary operator 'notin' (line 813)
        result_contains_317410 = python_operator(stypy.reporting.localization.Localization(__file__, 813, 21), 'notin', subscript_call_result_317408, bymonthday_317409)
        
        # Applying the binary operator 'and' (line 812)
        result_and_keyword_317411 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 21), 'and', result_or_keyword_317403, result_contains_317410)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 814)
        i_317412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 34), 'i')
        # Getting the type of 'ii' (line 814)
        ii_317413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 21), 'ii')
        # Obtaining the member 'nmdaymask' of a type (line 814)
        nmdaymask_317414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 21), ii_317413, 'nmdaymask')
        # Obtaining the member '__getitem__' of a type (line 814)
        getitem___317415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 21), nmdaymask_317414, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 814)
        subscript_call_result_317416 = invoke(stypy.reporting.localization.Localization(__file__, 814, 21), getitem___317415, i_317412)
        
        # Getting the type of 'bynmonthday' (line 814)
        bynmonthday_317417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 44), 'bynmonthday')
        # Applying the binary operator 'notin' (line 814)
        result_contains_317418 = python_operator(stypy.reporting.localization.Localization(__file__, 814, 21), 'notin', subscript_call_result_317416, bynmonthday_317417)
        
        # Applying the binary operator 'and' (line 812)
        result_and_keyword_317419 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 21), 'and', result_and_keyword_317411, result_contains_317418)
        
        # Applying the binary operator 'or' (line 807)
        result_or_keyword_317420 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 20), 'or', result_or_keyword_317400, result_and_keyword_317419)
        
        # Evaluating a boolean operation
        # Getting the type of 'byyearday' (line 815)
        byyearday_317421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 21), 'byyearday')
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 816)
        i_317422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 23), 'i')
        # Getting the type of 'ii' (line 816)
        ii_317423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 27), 'ii')
        # Obtaining the member 'yearlen' of a type (line 816)
        yearlen_317424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 27), ii_317423, 'yearlen')
        # Applying the binary operator '<' (line 816)
        result_lt_317425 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 23), '<', i_317422, yearlen_317424)
        
        
        # Getting the type of 'i' (line 816)
        i_317426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 42), 'i')
        int_317427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 816, 44), 'int')
        # Applying the binary operator '+' (line 816)
        result_add_317428 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 42), '+', i_317426, int_317427)
        
        # Getting the type of 'byyearday' (line 816)
        byyearday_317429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 53), 'byyearday')
        # Applying the binary operator 'notin' (line 816)
        result_contains_317430 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 42), 'notin', result_add_317428, byyearday_317429)
        
        # Applying the binary operator 'and' (line 816)
        result_and_keyword_317431 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 23), 'and', result_lt_317425, result_contains_317430)
        
        
        # Getting the type of 'ii' (line 817)
        ii_317432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 24), 'ii')
        # Obtaining the member 'yearlen' of a type (line 817)
        yearlen_317433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 24), ii_317432, 'yearlen')
        # Applying the 'usub' unary operator (line 817)
        result___neg___317434 = python_operator(stypy.reporting.localization.Localization(__file__, 817, 23), 'usub', yearlen_317433)
        
        # Getting the type of 'i' (line 817)
        i_317435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 35), 'i')
        # Applying the binary operator '+' (line 817)
        result_add_317436 = python_operator(stypy.reporting.localization.Localization(__file__, 817, 23), '+', result___neg___317434, i_317435)
        
        # Getting the type of 'byyearday' (line 817)
        byyearday_317437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 44), 'byyearday')
        # Applying the binary operator 'notin' (line 817)
        result_contains_317438 = python_operator(stypy.reporting.localization.Localization(__file__, 817, 23), 'notin', result_add_317436, byyearday_317437)
        
        # Applying the binary operator 'and' (line 816)
        result_and_keyword_317439 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 23), 'and', result_and_keyword_317431, result_contains_317438)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 818)
        i_317440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 23), 'i')
        # Getting the type of 'ii' (line 818)
        ii_317441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 28), 'ii')
        # Obtaining the member 'yearlen' of a type (line 818)
        yearlen_317442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 28), ii_317441, 'yearlen')
        # Applying the binary operator '>=' (line 818)
        result_ge_317443 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 23), '>=', i_317440, yearlen_317442)
        
        
        # Getting the type of 'i' (line 818)
        i_317444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 43), 'i')
        int_317445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 45), 'int')
        # Applying the binary operator '+' (line 818)
        result_add_317446 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 43), '+', i_317444, int_317445)
        
        # Getting the type of 'ii' (line 818)
        ii_317447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 47), 'ii')
        # Obtaining the member 'yearlen' of a type (line 818)
        yearlen_317448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 47), ii_317447, 'yearlen')
        # Applying the binary operator '-' (line 818)
        result_sub_317449 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 46), '-', result_add_317446, yearlen_317448)
        
        # Getting the type of 'byyearday' (line 818)
        byyearday_317450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 65), 'byyearday')
        # Applying the binary operator 'notin' (line 818)
        result_contains_317451 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 43), 'notin', result_sub_317449, byyearday_317450)
        
        # Applying the binary operator 'and' (line 818)
        result_and_keyword_317452 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 23), 'and', result_ge_317443, result_contains_317451)
        
        
        # Getting the type of 'ii' (line 819)
        ii_317453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 24), 'ii')
        # Obtaining the member 'nextyearlen' of a type (line 819)
        nextyearlen_317454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 24), ii_317453, 'nextyearlen')
        # Applying the 'usub' unary operator (line 819)
        result___neg___317455 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 23), 'usub', nextyearlen_317454)
        
        # Getting the type of 'i' (line 819)
        i_317456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 39), 'i')
        # Applying the binary operator '+' (line 819)
        result_add_317457 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 23), '+', result___neg___317455, i_317456)
        
        # Getting the type of 'ii' (line 819)
        ii_317458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 41), 'ii')
        # Obtaining the member 'yearlen' of a type (line 819)
        yearlen_317459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 41), ii_317458, 'yearlen')
        # Applying the binary operator '-' (line 819)
        result_sub_317460 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 40), '-', result_add_317457, yearlen_317459)
        
        # Getting the type of 'byyearday' (line 819)
        byyearday_317461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 59), 'byyearday')
        # Applying the binary operator 'notin' (line 819)
        result_contains_317462 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 23), 'notin', result_sub_317460, byyearday_317461)
        
        # Applying the binary operator 'and' (line 818)
        result_and_keyword_317463 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 23), 'and', result_and_keyword_317452, result_contains_317462)
        
        # Applying the binary operator 'or' (line 816)
        result_or_keyword_317464 = python_operator(stypy.reporting.localization.Localization(__file__, 816, 22), 'or', result_and_keyword_317439, result_and_keyword_317463)
        
        # Applying the binary operator 'and' (line 815)
        result_and_keyword_317465 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 21), 'and', byyearday_317421, result_or_keyword_317464)
        
        # Applying the binary operator 'or' (line 807)
        result_or_keyword_317466 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 20), 'or', result_or_keyword_317420, result_and_keyword_317465)
        
        # Testing the type of an if condition (line 807)
        if_condition_317467 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 807, 16), result_or_keyword_317466)
        # Assigning a type to the variable 'if_condition_317467' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 16), 'if_condition_317467', if_condition_317467)
        # SSA begins for if statement (line 807)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 820):
        
        # Assigning a Name to a Subscript (line 820):
        # Getting the type of 'None' (line 820)
        None_317468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 32), 'None')
        # Getting the type of 'dayset' (line 820)
        dayset_317469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 20), 'dayset')
        # Getting the type of 'i' (line 820)
        i_317470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 27), 'i')
        # Storing an element on a container (line 820)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 820, 20), dayset_317469, (i_317470, None_317468))
        
        # Assigning a Name to a Name (line 821):
        
        # Assigning a Name to a Name (line 821):
        # Getting the type of 'True' (line 821)
        True_317471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 31), 'True')
        # Assigning a type to the variable 'filtered' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 20), 'filtered', True_317471)
        # SSA join for if statement (line 807)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'bysetpos' (line 824)
        bysetpos_317472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 15), 'bysetpos')
        # Getting the type of 'timeset' (line 824)
        timeset_317473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 28), 'timeset')
        # Applying the binary operator 'and' (line 824)
        result_and_keyword_317474 = python_operator(stypy.reporting.localization.Localization(__file__, 824, 15), 'and', bysetpos_317472, timeset_317473)
        
        # Testing the type of an if condition (line 824)
        if_condition_317475 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 824, 12), result_and_keyword_317474)
        # Assigning a type to the variable 'if_condition_317475' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 12), 'if_condition_317475', if_condition_317475)
        # SSA begins for if statement (line 824)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 825):
        
        # Assigning a List to a Name (line 825):
        
        # Obtaining an instance of the builtin type 'list' (line 825)
        list_317476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 825)
        
        # Assigning a type to the variable 'poslist' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 16), 'poslist', list_317476)
        
        # Getting the type of 'bysetpos' (line 826)
        bysetpos_317477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 27), 'bysetpos')
        # Testing the type of a for loop iterable (line 826)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 826, 16), bysetpos_317477)
        # Getting the type of the for loop variable (line 826)
        for_loop_var_317478 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 826, 16), bysetpos_317477)
        # Assigning a type to the variable 'pos' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 16), 'pos', for_loop_var_317478)
        # SSA begins for a for statement (line 826)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'pos' (line 827)
        pos_317479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 23), 'pos')
        int_317480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 29), 'int')
        # Applying the binary operator '<' (line 827)
        result_lt_317481 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 23), '<', pos_317479, int_317480)
        
        # Testing the type of an if condition (line 827)
        if_condition_317482 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 827, 20), result_lt_317481)
        # Assigning a type to the variable 'if_condition_317482' (line 827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 20), 'if_condition_317482', if_condition_317482)
        # SSA begins for if statement (line 827)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 828):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 828)
        # Processing the call arguments (line 828)
        # Getting the type of 'pos' (line 828)
        pos_317484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 49), 'pos', False)
        
        # Call to len(...): (line 828)
        # Processing the call arguments (line 828)
        # Getting the type of 'timeset' (line 828)
        timeset_317486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 58), 'timeset', False)
        # Processing the call keyword arguments (line 828)
        kwargs_317487 = {}
        # Getting the type of 'len' (line 828)
        len_317485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 54), 'len', False)
        # Calling len(args, kwargs) (line 828)
        len_call_result_317488 = invoke(stypy.reporting.localization.Localization(__file__, 828, 54), len_317485, *[timeset_317486], **kwargs_317487)
        
        # Processing the call keyword arguments (line 828)
        kwargs_317489 = {}
        # Getting the type of 'divmod' (line 828)
        divmod_317483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 42), 'divmod', False)
        # Calling divmod(args, kwargs) (line 828)
        divmod_call_result_317490 = invoke(stypy.reporting.localization.Localization(__file__, 828, 42), divmod_317483, *[pos_317484, len_call_result_317488], **kwargs_317489)
        
        # Assigning a type to the variable 'call_assignment_315085' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 24), 'call_assignment_315085', divmod_call_result_317490)
        
        # Assigning a Call to a Name (line 828):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 24), 'int')
        # Processing the call keyword arguments
        kwargs_317494 = {}
        # Getting the type of 'call_assignment_315085' (line 828)
        call_assignment_315085_317491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 24), 'call_assignment_315085', False)
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___317492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 24), call_assignment_315085_317491, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317495 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317492, *[int_317493], **kwargs_317494)
        
        # Assigning a type to the variable 'call_assignment_315086' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 24), 'call_assignment_315086', getitem___call_result_317495)
        
        # Assigning a Name to a Name (line 828):
        # Getting the type of 'call_assignment_315086' (line 828)
        call_assignment_315086_317496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 24), 'call_assignment_315086')
        # Assigning a type to the variable 'daypos' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 24), 'daypos', call_assignment_315086_317496)
        
        # Assigning a Call to a Name (line 828):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 24), 'int')
        # Processing the call keyword arguments
        kwargs_317500 = {}
        # Getting the type of 'call_assignment_315085' (line 828)
        call_assignment_315085_317497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 24), 'call_assignment_315085', False)
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___317498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 24), call_assignment_315085_317497, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317501 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317498, *[int_317499], **kwargs_317500)
        
        # Assigning a type to the variable 'call_assignment_315087' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 24), 'call_assignment_315087', getitem___call_result_317501)
        
        # Assigning a Name to a Name (line 828):
        # Getting the type of 'call_assignment_315087' (line 828)
        call_assignment_315087_317502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 24), 'call_assignment_315087')
        # Assigning a type to the variable 'timepos' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 32), 'timepos', call_assignment_315087_317502)
        # SSA branch for the else part of an if statement (line 827)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 830):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 830)
        # Processing the call arguments (line 830)
        # Getting the type of 'pos' (line 830)
        pos_317504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 49), 'pos', False)
        int_317505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 53), 'int')
        # Applying the binary operator '-' (line 830)
        result_sub_317506 = python_operator(stypy.reporting.localization.Localization(__file__, 830, 49), '-', pos_317504, int_317505)
        
        
        # Call to len(...): (line 830)
        # Processing the call arguments (line 830)
        # Getting the type of 'timeset' (line 830)
        timeset_317508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 60), 'timeset', False)
        # Processing the call keyword arguments (line 830)
        kwargs_317509 = {}
        # Getting the type of 'len' (line 830)
        len_317507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 56), 'len', False)
        # Calling len(args, kwargs) (line 830)
        len_call_result_317510 = invoke(stypy.reporting.localization.Localization(__file__, 830, 56), len_317507, *[timeset_317508], **kwargs_317509)
        
        # Processing the call keyword arguments (line 830)
        kwargs_317511 = {}
        # Getting the type of 'divmod' (line 830)
        divmod_317503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 42), 'divmod', False)
        # Calling divmod(args, kwargs) (line 830)
        divmod_call_result_317512 = invoke(stypy.reporting.localization.Localization(__file__, 830, 42), divmod_317503, *[result_sub_317506, len_call_result_317510], **kwargs_317511)
        
        # Assigning a type to the variable 'call_assignment_315088' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'call_assignment_315088', divmod_call_result_317512)
        
        # Assigning a Call to a Name (line 830):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 24), 'int')
        # Processing the call keyword arguments
        kwargs_317516 = {}
        # Getting the type of 'call_assignment_315088' (line 830)
        call_assignment_315088_317513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'call_assignment_315088', False)
        # Obtaining the member '__getitem__' of a type (line 830)
        getitem___317514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 24), call_assignment_315088_317513, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317517 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317514, *[int_317515], **kwargs_317516)
        
        # Assigning a type to the variable 'call_assignment_315089' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'call_assignment_315089', getitem___call_result_317517)
        
        # Assigning a Name to a Name (line 830):
        # Getting the type of 'call_assignment_315089' (line 830)
        call_assignment_315089_317518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'call_assignment_315089')
        # Assigning a type to the variable 'daypos' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'daypos', call_assignment_315089_317518)
        
        # Assigning a Call to a Name (line 830):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 24), 'int')
        # Processing the call keyword arguments
        kwargs_317522 = {}
        # Getting the type of 'call_assignment_315088' (line 830)
        call_assignment_315088_317519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'call_assignment_315088', False)
        # Obtaining the member '__getitem__' of a type (line 830)
        getitem___317520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 24), call_assignment_315088_317519, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317523 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317520, *[int_317521], **kwargs_317522)
        
        # Assigning a type to the variable 'call_assignment_315090' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'call_assignment_315090', getitem___call_result_317523)
        
        # Assigning a Name to a Name (line 830):
        # Getting the type of 'call_assignment_315090' (line 830)
        call_assignment_315090_317524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 24), 'call_assignment_315090')
        # Assigning a type to the variable 'timepos' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 32), 'timepos', call_assignment_315090_317524)
        # SSA join for if statement (line 827)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 831)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 832):
        
        # Assigning a Subscript to a Name (line 832):
        
        # Obtaining the type of the subscript
        # Getting the type of 'daypos' (line 833)
        daypos_317525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 47), 'daypos')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining the type of the subscript
        # Getting the type of 'start' (line 832)
        start_317530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 47), 'start')
        # Getting the type of 'end' (line 832)
        end_317531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 53), 'end')
        slice_317532 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 832, 40), start_317530, end_317531, None)
        # Getting the type of 'dayset' (line 832)
        dayset_317533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 40), 'dayset')
        # Obtaining the member '__getitem__' of a type (line 832)
        getitem___317534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 40), dayset_317533, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 832)
        subscript_call_result_317535 = invoke(stypy.reporting.localization.Localization(__file__, 832, 40), getitem___317534, slice_317532)
        
        comprehension_317536 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 29), subscript_call_result_317535)
        # Assigning a type to the variable 'x' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 29), 'x', comprehension_317536)
        
        # Getting the type of 'x' (line 833)
        x_317527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 32), 'x')
        # Getting the type of 'None' (line 833)
        None_317528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 41), 'None')
        # Applying the binary operator 'isnot' (line 833)
        result_is_not_317529 = python_operator(stypy.reporting.localization.Localization(__file__, 833, 32), 'isnot', x_317527, None_317528)
        
        # Getting the type of 'x' (line 832)
        x_317526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 29), 'x')
        list_317537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 29), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 832, 29), list_317537, x_317526)
        # Obtaining the member '__getitem__' of a type (line 832)
        getitem___317538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 29), list_317537, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 832)
        subscript_call_result_317539 = invoke(stypy.reporting.localization.Localization(__file__, 832, 29), getitem___317538, daypos_317525)
        
        # Assigning a type to the variable 'i' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 24), 'i', subscript_call_result_317539)
        
        # Assigning a Subscript to a Name (line 834):
        
        # Assigning a Subscript to a Name (line 834):
        
        # Obtaining the type of the subscript
        # Getting the type of 'timepos' (line 834)
        timepos_317540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 39), 'timepos')
        # Getting the type of 'timeset' (line 834)
        timeset_317541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 31), 'timeset')
        # Obtaining the member '__getitem__' of a type (line 834)
        getitem___317542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 31), timeset_317541, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 834)
        subscript_call_result_317543 = invoke(stypy.reporting.localization.Localization(__file__, 834, 31), getitem___317542, timepos_317540)
        
        # Assigning a type to the variable 'time' (line 834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 24), 'time', subscript_call_result_317543)
        # SSA branch for the except part of a try statement (line 831)
        # SSA branch for the except 'IndexError' branch of a try statement (line 831)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA branch for the else branch of a try statement (line 831)
        module_type_store.open_ssa_branch('except else')
        
        # Assigning a Call to a Name (line 838):
        
        # Assigning a Call to a Name (line 838):
        
        # Call to fromordinal(...): (line 838)
        # Processing the call arguments (line 838)
        # Getting the type of 'ii' (line 838)
        ii_317547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 57), 'ii', False)
        # Obtaining the member 'yearordinal' of a type (line 838)
        yearordinal_317548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 57), ii_317547, 'yearordinal')
        # Getting the type of 'i' (line 838)
        i_317549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 72), 'i', False)
        # Applying the binary operator '+' (line 838)
        result_add_317550 = python_operator(stypy.reporting.localization.Localization(__file__, 838, 57), '+', yearordinal_317548, i_317549)
        
        # Processing the call keyword arguments (line 838)
        kwargs_317551 = {}
        # Getting the type of 'datetime' (line 838)
        datetime_317544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 31), 'datetime', False)
        # Obtaining the member 'date' of a type (line 838)
        date_317545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 31), datetime_317544, 'date')
        # Obtaining the member 'fromordinal' of a type (line 838)
        fromordinal_317546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 31), date_317545, 'fromordinal')
        # Calling fromordinal(args, kwargs) (line 838)
        fromordinal_call_result_317552 = invoke(stypy.reporting.localization.Localization(__file__, 838, 31), fromordinal_317546, *[result_add_317550], **kwargs_317551)
        
        # Assigning a type to the variable 'date' (line 838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 838, 24), 'date', fromordinal_call_result_317552)
        
        # Assigning a Call to a Name (line 839):
        
        # Assigning a Call to a Name (line 839):
        
        # Call to combine(...): (line 839)
        # Processing the call arguments (line 839)
        # Getting the type of 'date' (line 839)
        date_317556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 56), 'date', False)
        # Getting the type of 'time' (line 839)
        time_317557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 62), 'time', False)
        # Processing the call keyword arguments (line 839)
        kwargs_317558 = {}
        # Getting the type of 'datetime' (line 839)
        datetime_317553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 30), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 839)
        datetime_317554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 30), datetime_317553, 'datetime')
        # Obtaining the member 'combine' of a type (line 839)
        combine_317555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 30), datetime_317554, 'combine')
        # Calling combine(args, kwargs) (line 839)
        combine_call_result_317559 = invoke(stypy.reporting.localization.Localization(__file__, 839, 30), combine_317555, *[date_317556, time_317557], **kwargs_317558)
        
        # Assigning a type to the variable 'res' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 24), 'res', combine_call_result_317559)
        
        
        # Getting the type of 'res' (line 840)
        res_317560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 27), 'res')
        # Getting the type of 'poslist' (line 840)
        poslist_317561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 38), 'poslist')
        # Applying the binary operator 'notin' (line 840)
        result_contains_317562 = python_operator(stypy.reporting.localization.Localization(__file__, 840, 27), 'notin', res_317560, poslist_317561)
        
        # Testing the type of an if condition (line 840)
        if_condition_317563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 840, 24), result_contains_317562)
        # Assigning a type to the variable 'if_condition_317563' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 24), 'if_condition_317563', if_condition_317563)
        # SSA begins for if statement (line 840)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 841)
        # Processing the call arguments (line 841)
        # Getting the type of 'res' (line 841)
        res_317566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 43), 'res', False)
        # Processing the call keyword arguments (line 841)
        kwargs_317567 = {}
        # Getting the type of 'poslist' (line 841)
        poslist_317564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 28), 'poslist', False)
        # Obtaining the member 'append' of a type (line 841)
        append_317565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 28), poslist_317564, 'append')
        # Calling append(args, kwargs) (line 841)
        append_call_result_317568 = invoke(stypy.reporting.localization.Localization(__file__, 841, 28), append_317565, *[res_317566], **kwargs_317567)
        
        # SSA join for if statement (line 840)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 831)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to sort(...): (line 842)
        # Processing the call keyword arguments (line 842)
        kwargs_317571 = {}
        # Getting the type of 'poslist' (line 842)
        poslist_317569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 16), 'poslist', False)
        # Obtaining the member 'sort' of a type (line 842)
        sort_317570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 16), poslist_317569, 'sort')
        # Calling sort(args, kwargs) (line 842)
        sort_call_result_317572 = invoke(stypy.reporting.localization.Localization(__file__, 842, 16), sort_317570, *[], **kwargs_317571)
        
        
        # Getting the type of 'poslist' (line 843)
        poslist_317573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 27), 'poslist')
        # Testing the type of a for loop iterable (line 843)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 843, 16), poslist_317573)
        # Getting the type of the for loop variable (line 843)
        for_loop_var_317574 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 843, 16), poslist_317573)
        # Assigning a type to the variable 'res' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 16), 'res', for_loop_var_317574)
        # SSA begins for a for statement (line 843)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'until' (line 844)
        until_317575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 23), 'until')
        
        # Getting the type of 'res' (line 844)
        res_317576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 33), 'res')
        # Getting the type of 'until' (line 844)
        until_317577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 39), 'until')
        # Applying the binary operator '>' (line 844)
        result_gt_317578 = python_operator(stypy.reporting.localization.Localization(__file__, 844, 33), '>', res_317576, until_317577)
        
        # Applying the binary operator 'and' (line 844)
        result_and_keyword_317579 = python_operator(stypy.reporting.localization.Localization(__file__, 844, 23), 'and', until_317575, result_gt_317578)
        
        # Testing the type of an if condition (line 844)
        if_condition_317580 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 844, 20), result_and_keyword_317579)
        # Assigning a type to the variable 'if_condition_317580' (line 844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 844, 20), 'if_condition_317580', if_condition_317580)
        # SSA begins for if statement (line 844)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 845):
        
        # Assigning a Name to a Attribute (line 845):
        # Getting the type of 'total' (line 845)
        total_317581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 36), 'total')
        # Getting the type of 'self' (line 845)
        self_317582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 24), 'self')
        # Setting the type of the member '_len' of a type (line 845)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 24), self_317582, '_len', total_317581)
        # Assigning a type to the variable 'stypy_return_type' (line 846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 24), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 844)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'res' (line 847)
        res_317583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 25), 'res')
        # Getting the type of 'self' (line 847)
        self_317584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 32), 'self')
        # Obtaining the member '_dtstart' of a type (line 847)
        _dtstart_317585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 847, 32), self_317584, '_dtstart')
        # Applying the binary operator '>=' (line 847)
        result_ge_317586 = python_operator(stypy.reporting.localization.Localization(__file__, 847, 25), '>=', res_317583, _dtstart_317585)
        
        # Testing the type of an if condition (line 847)
        if_condition_317587 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 847, 25), result_ge_317586)
        # Assigning a type to the variable 'if_condition_317587' (line 847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 25), 'if_condition_317587', if_condition_317587)
        # SSA begins for if statement (line 847)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 848)
        # Getting the type of 'count' (line 848)
        count_317588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 24), 'count')
        # Getting the type of 'None' (line 848)
        None_317589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 40), 'None')
        
        (may_be_317590, more_types_in_union_317591) = may_not_be_none(count_317588, None_317589)

        if may_be_317590:

            if more_types_in_union_317591:
                # Runtime conditional SSA (line 848)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'count' (line 849)
            count_317592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 28), 'count')
            int_317593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 849, 37), 'int')
            # Applying the binary operator '-=' (line 849)
            result_isub_317594 = python_operator(stypy.reporting.localization.Localization(__file__, 849, 28), '-=', count_317592, int_317593)
            # Assigning a type to the variable 'count' (line 849)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 28), 'count', result_isub_317594)
            
            
            
            # Getting the type of 'count' (line 850)
            count_317595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 31), 'count')
            int_317596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 850, 39), 'int')
            # Applying the binary operator '<' (line 850)
            result_lt_317597 = python_operator(stypy.reporting.localization.Localization(__file__, 850, 31), '<', count_317595, int_317596)
            
            # Testing the type of an if condition (line 850)
            if_condition_317598 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 850, 28), result_lt_317597)
            # Assigning a type to the variable 'if_condition_317598' (line 850)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 28), 'if_condition_317598', if_condition_317598)
            # SSA begins for if statement (line 850)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 851):
            
            # Assigning a Name to a Attribute (line 851):
            # Getting the type of 'total' (line 851)
            total_317599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 44), 'total')
            # Getting the type of 'self' (line 851)
            self_317600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 32), 'self')
            # Setting the type of the member '_len' of a type (line 851)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 32), self_317600, '_len', total_317599)
            # Assigning a type to the variable 'stypy_return_type' (line 852)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 32), 'stypy_return_type', types.NoneType)
            # SSA join for if statement (line 850)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_317591:
                # SSA join for if statement (line 848)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'total' (line 853)
        total_317601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 24), 'total')
        int_317602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 853, 33), 'int')
        # Applying the binary operator '+=' (line 853)
        result_iadd_317603 = python_operator(stypy.reporting.localization.Localization(__file__, 853, 24), '+=', total_317601, int_317602)
        # Assigning a type to the variable 'total' (line 853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 24), 'total', result_iadd_317603)
        
        # Creating a generator
        # Getting the type of 'res' (line 854)
        res_317604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 30), 'res')
        GeneratorType_317605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 24), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 854, 24), GeneratorType_317605, res_317604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 24), 'stypy_return_type', GeneratorType_317605)
        # SSA join for if statement (line 847)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 844)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 824)
        module_type_store.open_ssa_branch('else')
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'start' (line 856)
        start_317606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 32), 'start')
        # Getting the type of 'end' (line 856)
        end_317607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 38), 'end')
        slice_317608 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 856, 25), start_317606, end_317607, None)
        # Getting the type of 'dayset' (line 856)
        dayset_317609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 25), 'dayset')
        # Obtaining the member '__getitem__' of a type (line 856)
        getitem___317610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 25), dayset_317609, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 856)
        subscript_call_result_317611 = invoke(stypy.reporting.localization.Localization(__file__, 856, 25), getitem___317610, slice_317608)
        
        # Testing the type of a for loop iterable (line 856)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 856, 16), subscript_call_result_317611)
        # Getting the type of the for loop variable (line 856)
        for_loop_var_317612 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 856, 16), subscript_call_result_317611)
        # Assigning a type to the variable 'i' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 16), 'i', for_loop_var_317612)
        # SSA begins for a for statement (line 856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 857)
        # Getting the type of 'i' (line 857)
        i_317613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 20), 'i')
        # Getting the type of 'None' (line 857)
        None_317614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 32), 'None')
        
        (may_be_317615, more_types_in_union_317616) = may_not_be_none(i_317613, None_317614)

        if may_be_317615:

            if more_types_in_union_317616:
                # Runtime conditional SSA (line 857)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 858):
            
            # Assigning a Call to a Name (line 858):
            
            # Call to fromordinal(...): (line 858)
            # Processing the call arguments (line 858)
            # Getting the type of 'ii' (line 858)
            ii_317620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 57), 'ii', False)
            # Obtaining the member 'yearordinal' of a type (line 858)
            yearordinal_317621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 57), ii_317620, 'yearordinal')
            # Getting the type of 'i' (line 858)
            i_317622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 74), 'i', False)
            # Applying the binary operator '+' (line 858)
            result_add_317623 = python_operator(stypy.reporting.localization.Localization(__file__, 858, 57), '+', yearordinal_317621, i_317622)
            
            # Processing the call keyword arguments (line 858)
            kwargs_317624 = {}
            # Getting the type of 'datetime' (line 858)
            datetime_317617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 31), 'datetime', False)
            # Obtaining the member 'date' of a type (line 858)
            date_317618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 31), datetime_317617, 'date')
            # Obtaining the member 'fromordinal' of a type (line 858)
            fromordinal_317619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 31), date_317618, 'fromordinal')
            # Calling fromordinal(args, kwargs) (line 858)
            fromordinal_call_result_317625 = invoke(stypy.reporting.localization.Localization(__file__, 858, 31), fromordinal_317619, *[result_add_317623], **kwargs_317624)
            
            # Assigning a type to the variable 'date' (line 858)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 24), 'date', fromordinal_call_result_317625)
            
            # Getting the type of 'timeset' (line 859)
            timeset_317626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 36), 'timeset')
            # Testing the type of a for loop iterable (line 859)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 859, 24), timeset_317626)
            # Getting the type of the for loop variable (line 859)
            for_loop_var_317627 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 859, 24), timeset_317626)
            # Assigning a type to the variable 'time' (line 859)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 24), 'time', for_loop_var_317627)
            # SSA begins for a for statement (line 859)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Call to a Name (line 860):
            
            # Assigning a Call to a Name (line 860):
            
            # Call to combine(...): (line 860)
            # Processing the call arguments (line 860)
            # Getting the type of 'date' (line 860)
            date_317631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 60), 'date', False)
            # Getting the type of 'time' (line 860)
            time_317632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 66), 'time', False)
            # Processing the call keyword arguments (line 860)
            kwargs_317633 = {}
            # Getting the type of 'datetime' (line 860)
            datetime_317628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 34), 'datetime', False)
            # Obtaining the member 'datetime' of a type (line 860)
            datetime_317629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 34), datetime_317628, 'datetime')
            # Obtaining the member 'combine' of a type (line 860)
            combine_317630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 34), datetime_317629, 'combine')
            # Calling combine(args, kwargs) (line 860)
            combine_call_result_317634 = invoke(stypy.reporting.localization.Localization(__file__, 860, 34), combine_317630, *[date_317631, time_317632], **kwargs_317633)
            
            # Assigning a type to the variable 'res' (line 860)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 28), 'res', combine_call_result_317634)
            
            
            # Evaluating a boolean operation
            # Getting the type of 'until' (line 861)
            until_317635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 31), 'until')
            
            # Getting the type of 'res' (line 861)
            res_317636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 41), 'res')
            # Getting the type of 'until' (line 861)
            until_317637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 47), 'until')
            # Applying the binary operator '>' (line 861)
            result_gt_317638 = python_operator(stypy.reporting.localization.Localization(__file__, 861, 41), '>', res_317636, until_317637)
            
            # Applying the binary operator 'and' (line 861)
            result_and_keyword_317639 = python_operator(stypy.reporting.localization.Localization(__file__, 861, 31), 'and', until_317635, result_gt_317638)
            
            # Testing the type of an if condition (line 861)
            if_condition_317640 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 861, 28), result_and_keyword_317639)
            # Assigning a type to the variable 'if_condition_317640' (line 861)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 861, 28), 'if_condition_317640', if_condition_317640)
            # SSA begins for if statement (line 861)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 862):
            
            # Assigning a Name to a Attribute (line 862):
            # Getting the type of 'total' (line 862)
            total_317641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 44), 'total')
            # Getting the type of 'self' (line 862)
            self_317642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 32), 'self')
            # Setting the type of the member '_len' of a type (line 862)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 32), self_317642, '_len', total_317641)
            # Assigning a type to the variable 'stypy_return_type' (line 863)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 32), 'stypy_return_type', types.NoneType)
            # SSA branch for the else part of an if statement (line 861)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'res' (line 864)
            res_317643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 33), 'res')
            # Getting the type of 'self' (line 864)
            self_317644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 40), 'self')
            # Obtaining the member '_dtstart' of a type (line 864)
            _dtstart_317645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 40), self_317644, '_dtstart')
            # Applying the binary operator '>=' (line 864)
            result_ge_317646 = python_operator(stypy.reporting.localization.Localization(__file__, 864, 33), '>=', res_317643, _dtstart_317645)
            
            # Testing the type of an if condition (line 864)
            if_condition_317647 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 864, 33), result_ge_317646)
            # Assigning a type to the variable 'if_condition_317647' (line 864)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 33), 'if_condition_317647', if_condition_317647)
            # SSA begins for if statement (line 864)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Type idiom detected: calculating its left and rigth part (line 865)
            # Getting the type of 'count' (line 865)
            count_317648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 32), 'count')
            # Getting the type of 'None' (line 865)
            None_317649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 48), 'None')
            
            (may_be_317650, more_types_in_union_317651) = may_not_be_none(count_317648, None_317649)

            if may_be_317650:

                if more_types_in_union_317651:
                    # Runtime conditional SSA (line 865)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Getting the type of 'count' (line 866)
                count_317652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 36), 'count')
                int_317653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 45), 'int')
                # Applying the binary operator '-=' (line 866)
                result_isub_317654 = python_operator(stypy.reporting.localization.Localization(__file__, 866, 36), '-=', count_317652, int_317653)
                # Assigning a type to the variable 'count' (line 866)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 36), 'count', result_isub_317654)
                
                
                
                # Getting the type of 'count' (line 867)
                count_317655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 39), 'count')
                int_317656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 47), 'int')
                # Applying the binary operator '<' (line 867)
                result_lt_317657 = python_operator(stypy.reporting.localization.Localization(__file__, 867, 39), '<', count_317655, int_317656)
                
                # Testing the type of an if condition (line 867)
                if_condition_317658 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 867, 36), result_lt_317657)
                # Assigning a type to the variable 'if_condition_317658' (line 867)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 36), 'if_condition_317658', if_condition_317658)
                # SSA begins for if statement (line 867)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Name to a Attribute (line 868):
                
                # Assigning a Name to a Attribute (line 868):
                # Getting the type of 'total' (line 868)
                total_317659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 52), 'total')
                # Getting the type of 'self' (line 868)
                self_317660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 40), 'self')
                # Setting the type of the member '_len' of a type (line 868)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 40), self_317660, '_len', total_317659)
                # Assigning a type to the variable 'stypy_return_type' (line 869)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 40), 'stypy_return_type', types.NoneType)
                # SSA join for if statement (line 867)
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_317651:
                    # SSA join for if statement (line 865)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            # Getting the type of 'total' (line 871)
            total_317661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 32), 'total')
            int_317662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 41), 'int')
            # Applying the binary operator '+=' (line 871)
            result_iadd_317663 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 32), '+=', total_317661, int_317662)
            # Assigning a type to the variable 'total' (line 871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 32), 'total', result_iadd_317663)
            
            # Creating a generator
            # Getting the type of 'res' (line 872)
            res_317664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 38), 'res')
            GeneratorType_317665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, 32), 'GeneratorType')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 872, 32), GeneratorType_317665, res_317664)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 32), 'stypy_return_type', GeneratorType_317665)
            # SSA join for if statement (line 864)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 861)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_317616:
                # SSA join for if statement (line 857)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 824)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 875):
        
        # Assigning a Name to a Name (line 875):
        # Getting the type of 'False' (line 875)
        False_317666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 21), 'False')
        # Assigning a type to the variable 'fixday' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 12), 'fixday', False_317666)
        
        
        # Getting the type of 'freq' (line 876)
        freq_317667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 15), 'freq')
        # Getting the type of 'YEARLY' (line 876)
        YEARLY_317668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 23), 'YEARLY')
        # Applying the binary operator '==' (line 876)
        result_eq_317669 = python_operator(stypy.reporting.localization.Localization(__file__, 876, 15), '==', freq_317667, YEARLY_317668)
        
        # Testing the type of an if condition (line 876)
        if_condition_317670 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 876, 12), result_eq_317669)
        # Assigning a type to the variable 'if_condition_317670' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 12), 'if_condition_317670', if_condition_317670)
        # SSA begins for if statement (line 876)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'year' (line 877)
        year_317671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 16), 'year')
        # Getting the type of 'interval' (line 877)
        interval_317672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 24), 'interval')
        # Applying the binary operator '+=' (line 877)
        result_iadd_317673 = python_operator(stypy.reporting.localization.Localization(__file__, 877, 16), '+=', year_317671, interval_317672)
        # Assigning a type to the variable 'year' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 16), 'year', result_iadd_317673)
        
        
        
        # Getting the type of 'year' (line 878)
        year_317674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 19), 'year')
        # Getting the type of 'datetime' (line 878)
        datetime_317675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 26), 'datetime')
        # Obtaining the member 'MAXYEAR' of a type (line 878)
        MAXYEAR_317676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 26), datetime_317675, 'MAXYEAR')
        # Applying the binary operator '>' (line 878)
        result_gt_317677 = python_operator(stypy.reporting.localization.Localization(__file__, 878, 19), '>', year_317674, MAXYEAR_317676)
        
        # Testing the type of an if condition (line 878)
        if_condition_317678 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 878, 16), result_gt_317677)
        # Assigning a type to the variable 'if_condition_317678' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 16), 'if_condition_317678', if_condition_317678)
        # SSA begins for if statement (line 878)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 879):
        
        # Assigning a Name to a Attribute (line 879):
        # Getting the type of 'total' (line 879)
        total_317679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 32), 'total')
        # Getting the type of 'self' (line 879)
        self_317680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 20), 'self')
        # Setting the type of the member '_len' of a type (line 879)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 20), self_317680, '_len', total_317679)
        # Assigning a type to the variable 'stypy_return_type' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 20), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 878)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to rebuild(...): (line 881)
        # Processing the call arguments (line 881)
        # Getting the type of 'year' (line 881)
        year_317683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 27), 'year', False)
        # Getting the type of 'month' (line 881)
        month_317684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 33), 'month', False)
        # Processing the call keyword arguments (line 881)
        kwargs_317685 = {}
        # Getting the type of 'ii' (line 881)
        ii_317681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 16), 'ii', False)
        # Obtaining the member 'rebuild' of a type (line 881)
        rebuild_317682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 16), ii_317681, 'rebuild')
        # Calling rebuild(args, kwargs) (line 881)
        rebuild_call_result_317686 = invoke(stypy.reporting.localization.Localization(__file__, 881, 16), rebuild_317682, *[year_317683, month_317684], **kwargs_317685)
        
        # SSA branch for the else part of an if statement (line 876)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 882)
        freq_317687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 17), 'freq')
        # Getting the type of 'MONTHLY' (line 882)
        MONTHLY_317688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 25), 'MONTHLY')
        # Applying the binary operator '==' (line 882)
        result_eq_317689 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 17), '==', freq_317687, MONTHLY_317688)
        
        # Testing the type of an if condition (line 882)
        if_condition_317690 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 882, 17), result_eq_317689)
        # Assigning a type to the variable 'if_condition_317690' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 17), 'if_condition_317690', if_condition_317690)
        # SSA begins for if statement (line 882)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'month' (line 883)
        month_317691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 16), 'month')
        # Getting the type of 'interval' (line 883)
        interval_317692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 25), 'interval')
        # Applying the binary operator '+=' (line 883)
        result_iadd_317693 = python_operator(stypy.reporting.localization.Localization(__file__, 883, 16), '+=', month_317691, interval_317692)
        # Assigning a type to the variable 'month' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 16), 'month', result_iadd_317693)
        
        
        
        # Getting the type of 'month' (line 884)
        month_317694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 19), 'month')
        int_317695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 27), 'int')
        # Applying the binary operator '>' (line 884)
        result_gt_317696 = python_operator(stypy.reporting.localization.Localization(__file__, 884, 19), '>', month_317694, int_317695)
        
        # Testing the type of an if condition (line 884)
        if_condition_317697 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 884, 16), result_gt_317696)
        # Assigning a type to the variable 'if_condition_317697' (line 884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 16), 'if_condition_317697', if_condition_317697)
        # SSA begins for if statement (line 884)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 885):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 885)
        # Processing the call arguments (line 885)
        # Getting the type of 'month' (line 885)
        month_317699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 38), 'month', False)
        int_317700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 45), 'int')
        # Processing the call keyword arguments (line 885)
        kwargs_317701 = {}
        # Getting the type of 'divmod' (line 885)
        divmod_317698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 31), 'divmod', False)
        # Calling divmod(args, kwargs) (line 885)
        divmod_call_result_317702 = invoke(stypy.reporting.localization.Localization(__file__, 885, 31), divmod_317698, *[month_317699, int_317700], **kwargs_317701)
        
        # Assigning a type to the variable 'call_assignment_315091' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'call_assignment_315091', divmod_call_result_317702)
        
        # Assigning a Call to a Name (line 885):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 20), 'int')
        # Processing the call keyword arguments
        kwargs_317706 = {}
        # Getting the type of 'call_assignment_315091' (line 885)
        call_assignment_315091_317703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'call_assignment_315091', False)
        # Obtaining the member '__getitem__' of a type (line 885)
        getitem___317704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 20), call_assignment_315091_317703, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317707 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317704, *[int_317705], **kwargs_317706)
        
        # Assigning a type to the variable 'call_assignment_315092' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'call_assignment_315092', getitem___call_result_317707)
        
        # Assigning a Name to a Name (line 885):
        # Getting the type of 'call_assignment_315092' (line 885)
        call_assignment_315092_317708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'call_assignment_315092')
        # Assigning a type to the variable 'div' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'div', call_assignment_315092_317708)
        
        # Assigning a Call to a Name (line 885):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 20), 'int')
        # Processing the call keyword arguments
        kwargs_317712 = {}
        # Getting the type of 'call_assignment_315091' (line 885)
        call_assignment_315091_317709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'call_assignment_315091', False)
        # Obtaining the member '__getitem__' of a type (line 885)
        getitem___317710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 20), call_assignment_315091_317709, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317713 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317710, *[int_317711], **kwargs_317712)
        
        # Assigning a type to the variable 'call_assignment_315093' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'call_assignment_315093', getitem___call_result_317713)
        
        # Assigning a Name to a Name (line 885):
        # Getting the type of 'call_assignment_315093' (line 885)
        call_assignment_315093_317714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 20), 'call_assignment_315093')
        # Assigning a type to the variable 'mod' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 25), 'mod', call_assignment_315093_317714)
        
        # Assigning a Name to a Name (line 886):
        
        # Assigning a Name to a Name (line 886):
        # Getting the type of 'mod' (line 886)
        mod_317715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 28), 'mod')
        # Assigning a type to the variable 'month' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 20), 'month', mod_317715)
        
        # Getting the type of 'year' (line 887)
        year_317716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 20), 'year')
        # Getting the type of 'div' (line 887)
        div_317717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 28), 'div')
        # Applying the binary operator '+=' (line 887)
        result_iadd_317718 = python_operator(stypy.reporting.localization.Localization(__file__, 887, 20), '+=', year_317716, div_317717)
        # Assigning a type to the variable 'year' (line 887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 20), 'year', result_iadd_317718)
        
        
        
        # Getting the type of 'month' (line 888)
        month_317719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 23), 'month')
        int_317720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 32), 'int')
        # Applying the binary operator '==' (line 888)
        result_eq_317721 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 23), '==', month_317719, int_317720)
        
        # Testing the type of an if condition (line 888)
        if_condition_317722 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 888, 20), result_eq_317721)
        # Assigning a type to the variable 'if_condition_317722' (line 888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 20), 'if_condition_317722', if_condition_317722)
        # SSA begins for if statement (line 888)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 889):
        
        # Assigning a Num to a Name (line 889):
        int_317723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 32), 'int')
        # Assigning a type to the variable 'month' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 24), 'month', int_317723)
        
        # Getting the type of 'year' (line 890)
        year_317724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 24), 'year')
        int_317725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 890, 32), 'int')
        # Applying the binary operator '-=' (line 890)
        result_isub_317726 = python_operator(stypy.reporting.localization.Localization(__file__, 890, 24), '-=', year_317724, int_317725)
        # Assigning a type to the variable 'year' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 24), 'year', result_isub_317726)
        
        # SSA join for if statement (line 888)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'year' (line 891)
        year_317727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 23), 'year')
        # Getting the type of 'datetime' (line 891)
        datetime_317728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 30), 'datetime')
        # Obtaining the member 'MAXYEAR' of a type (line 891)
        MAXYEAR_317729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 30), datetime_317728, 'MAXYEAR')
        # Applying the binary operator '>' (line 891)
        result_gt_317730 = python_operator(stypy.reporting.localization.Localization(__file__, 891, 23), '>', year_317727, MAXYEAR_317729)
        
        # Testing the type of an if condition (line 891)
        if_condition_317731 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 891, 20), result_gt_317730)
        # Assigning a type to the variable 'if_condition_317731' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 20), 'if_condition_317731', if_condition_317731)
        # SSA begins for if statement (line 891)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 892):
        
        # Assigning a Name to a Attribute (line 892):
        # Getting the type of 'total' (line 892)
        total_317732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 36), 'total')
        # Getting the type of 'self' (line 892)
        self_317733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 24), 'self')
        # Setting the type of the member '_len' of a type (line 892)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 24), self_317733, '_len', total_317732)
        # Assigning a type to the variable 'stypy_return_type' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 24), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 891)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 884)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to rebuild(...): (line 894)
        # Processing the call arguments (line 894)
        # Getting the type of 'year' (line 894)
        year_317736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 27), 'year', False)
        # Getting the type of 'month' (line 894)
        month_317737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 33), 'month', False)
        # Processing the call keyword arguments (line 894)
        kwargs_317738 = {}
        # Getting the type of 'ii' (line 894)
        ii_317734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 16), 'ii', False)
        # Obtaining the member 'rebuild' of a type (line 894)
        rebuild_317735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 894, 16), ii_317734, 'rebuild')
        # Calling rebuild(args, kwargs) (line 894)
        rebuild_call_result_317739 = invoke(stypy.reporting.localization.Localization(__file__, 894, 16), rebuild_317735, *[year_317736, month_317737], **kwargs_317738)
        
        # SSA branch for the else part of an if statement (line 882)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 895)
        freq_317740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 17), 'freq')
        # Getting the type of 'WEEKLY' (line 895)
        WEEKLY_317741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 25), 'WEEKLY')
        # Applying the binary operator '==' (line 895)
        result_eq_317742 = python_operator(stypy.reporting.localization.Localization(__file__, 895, 17), '==', freq_317740, WEEKLY_317741)
        
        # Testing the type of an if condition (line 895)
        if_condition_317743 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 895, 17), result_eq_317742)
        # Assigning a type to the variable 'if_condition_317743' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 17), 'if_condition_317743', if_condition_317743)
        # SSA begins for if statement (line 895)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'wkst' (line 896)
        wkst_317744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 19), 'wkst')
        # Getting the type of 'weekday' (line 896)
        weekday_317745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 26), 'weekday')
        # Applying the binary operator '>' (line 896)
        result_gt_317746 = python_operator(stypy.reporting.localization.Localization(__file__, 896, 19), '>', wkst_317744, weekday_317745)
        
        # Testing the type of an if condition (line 896)
        if_condition_317747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 896, 16), result_gt_317746)
        # Assigning a type to the variable 'if_condition_317747' (line 896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 16), 'if_condition_317747', if_condition_317747)
        # SSA begins for if statement (line 896)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'day' (line 897)
        day_317748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 20), 'day')
        
        # Getting the type of 'weekday' (line 897)
        weekday_317749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 29), 'weekday')
        int_317750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 37), 'int')
        # Applying the binary operator '+' (line 897)
        result_add_317751 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 29), '+', weekday_317749, int_317750)
        
        int_317752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 40), 'int')
        # Getting the type of 'wkst' (line 897)
        wkst_317753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 42), 'wkst')
        # Applying the binary operator '-' (line 897)
        result_sub_317754 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 40), '-', int_317752, wkst_317753)
        
        # Applying the binary operator '+' (line 897)
        result_add_317755 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 38), '+', result_add_317751, result_sub_317754)
        
        # Applying the 'usub' unary operator (line 897)
        result___neg___317756 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 27), 'usub', result_add_317755)
        
        # Getting the type of 'self' (line 897)
        self_317757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 49), 'self')
        # Obtaining the member '_interval' of a type (line 897)
        _interval_317758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 897, 49), self_317757, '_interval')
        int_317759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 64), 'int')
        # Applying the binary operator '*' (line 897)
        result_mul_317760 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 49), '*', _interval_317758, int_317759)
        
        # Applying the binary operator '+' (line 897)
        result_add_317761 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 27), '+', result___neg___317756, result_mul_317760)
        
        # Applying the binary operator '+=' (line 897)
        result_iadd_317762 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 20), '+=', day_317748, result_add_317761)
        # Assigning a type to the variable 'day' (line 897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 20), 'day', result_iadd_317762)
        
        # SSA branch for the else part of an if statement (line 896)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'day' (line 899)
        day_317763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 20), 'day')
        
        # Getting the type of 'weekday' (line 899)
        weekday_317764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 29), 'weekday')
        # Getting the type of 'wkst' (line 899)
        wkst_317765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 37), 'wkst')
        # Applying the binary operator '-' (line 899)
        result_sub_317766 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 29), '-', weekday_317764, wkst_317765)
        
        # Applying the 'usub' unary operator (line 899)
        result___neg___317767 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 27), 'usub', result_sub_317766)
        
        # Getting the type of 'self' (line 899)
        self_317768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 43), 'self')
        # Obtaining the member '_interval' of a type (line 899)
        _interval_317769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 899, 43), self_317768, '_interval')
        int_317770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 58), 'int')
        # Applying the binary operator '*' (line 899)
        result_mul_317771 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 43), '*', _interval_317769, int_317770)
        
        # Applying the binary operator '+' (line 899)
        result_add_317772 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 27), '+', result___neg___317767, result_mul_317771)
        
        # Applying the binary operator '+=' (line 899)
        result_iadd_317773 = python_operator(stypy.reporting.localization.Localization(__file__, 899, 20), '+=', day_317763, result_add_317772)
        # Assigning a type to the variable 'day' (line 899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 899, 20), 'day', result_iadd_317773)
        
        # SSA join for if statement (line 896)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 900):
        
        # Assigning a Name to a Name (line 900):
        # Getting the type of 'wkst' (line 900)
        wkst_317774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 26), 'wkst')
        # Assigning a type to the variable 'weekday' (line 900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 16), 'weekday', wkst_317774)
        
        # Assigning a Name to a Name (line 901):
        
        # Assigning a Name to a Name (line 901):
        # Getting the type of 'True' (line 901)
        True_317775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 25), 'True')
        # Assigning a type to the variable 'fixday' (line 901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 16), 'fixday', True_317775)
        # SSA branch for the else part of an if statement (line 895)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 902)
        freq_317776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 17), 'freq')
        # Getting the type of 'DAILY' (line 902)
        DAILY_317777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 25), 'DAILY')
        # Applying the binary operator '==' (line 902)
        result_eq_317778 = python_operator(stypy.reporting.localization.Localization(__file__, 902, 17), '==', freq_317776, DAILY_317777)
        
        # Testing the type of an if condition (line 902)
        if_condition_317779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 902, 17), result_eq_317778)
        # Assigning a type to the variable 'if_condition_317779' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 17), 'if_condition_317779', if_condition_317779)
        # SSA begins for if statement (line 902)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'day' (line 903)
        day_317780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 16), 'day')
        # Getting the type of 'interval' (line 903)
        interval_317781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 23), 'interval')
        # Applying the binary operator '+=' (line 903)
        result_iadd_317782 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 16), '+=', day_317780, interval_317781)
        # Assigning a type to the variable 'day' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 16), 'day', result_iadd_317782)
        
        
        # Assigning a Name to a Name (line 904):
        
        # Assigning a Name to a Name (line 904):
        # Getting the type of 'True' (line 904)
        True_317783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 25), 'True')
        # Assigning a type to the variable 'fixday' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 16), 'fixday', True_317783)
        # SSA branch for the else part of an if statement (line 902)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 905)
        freq_317784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 17), 'freq')
        # Getting the type of 'HOURLY' (line 905)
        HOURLY_317785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 25), 'HOURLY')
        # Applying the binary operator '==' (line 905)
        result_eq_317786 = python_operator(stypy.reporting.localization.Localization(__file__, 905, 17), '==', freq_317784, HOURLY_317785)
        
        # Testing the type of an if condition (line 905)
        if_condition_317787 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 905, 17), result_eq_317786)
        # Assigning a type to the variable 'if_condition_317787' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 17), 'if_condition_317787', if_condition_317787)
        # SSA begins for if statement (line 905)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'filtered' (line 906)
        filtered_317788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 19), 'filtered')
        # Testing the type of an if condition (line 906)
        if_condition_317789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 906, 16), filtered_317788)
        # Assigning a type to the variable 'if_condition_317789' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 16), 'if_condition_317789', if_condition_317789)
        # SSA begins for if statement (line 906)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'hour' (line 908)
        hour_317790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 20), 'hour')
        int_317791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 30), 'int')
        # Getting the type of 'hour' (line 908)
        hour_317792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 33), 'hour')
        # Applying the binary operator '-' (line 908)
        result_sub_317793 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 30), '-', int_317791, hour_317792)
        
        # Getting the type of 'interval' (line 908)
        interval_317794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 40), 'interval')
        # Applying the binary operator '//' (line 908)
        result_floordiv_317795 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 29), '//', result_sub_317793, interval_317794)
        
        # Getting the type of 'interval' (line 908)
        interval_317796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 50), 'interval')
        # Applying the binary operator '*' (line 908)
        result_mul_317797 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 28), '*', result_floordiv_317795, interval_317796)
        
        # Applying the binary operator '+=' (line 908)
        result_iadd_317798 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 20), '+=', hour_317790, result_mul_317797)
        # Assigning a type to the variable 'hour' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 20), 'hour', result_iadd_317798)
        
        # SSA join for if statement (line 906)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'byhour' (line 910)
        byhour_317799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 19), 'byhour')
        # Testing the type of an if condition (line 910)
        if_condition_317800 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 16), byhour_317799)
        # Assigning a type to the variable 'if_condition_317800' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 16), 'if_condition_317800', if_condition_317800)
        # SSA begins for if statement (line 910)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 911):
        
        # Assigning a Call to a Name:
        
        # Call to __mod_distance(...): (line 911)
        # Processing the call keyword arguments (line 911)
        # Getting the type of 'hour' (line 911)
        hour_317803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 60), 'hour', False)
        keyword_317804 = hour_317803
        # Getting the type of 'self' (line 912)
        self_317805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 60), 'self', False)
        # Obtaining the member '_byhour' of a type (line 912)
        _byhour_317806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 60), self_317805, '_byhour')
        keyword_317807 = _byhour_317806
        int_317808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 59), 'int')
        keyword_317809 = int_317808
        kwargs_317810 = {'byxxx': keyword_317807, 'base': keyword_317809, 'value': keyword_317804}
        # Getting the type of 'self' (line 911)
        self_317801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 34), 'self', False)
        # Obtaining the member '__mod_distance' of a type (line 911)
        mod_distance_317802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 34), self_317801, '__mod_distance')
        # Calling __mod_distance(args, kwargs) (line 911)
        mod_distance_call_result_317811 = invoke(stypy.reporting.localization.Localization(__file__, 911, 34), mod_distance_317802, *[], **kwargs_317810)
        
        # Assigning a type to the variable 'call_assignment_315094' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'call_assignment_315094', mod_distance_call_result_317811)
        
        # Assigning a Call to a Name (line 911):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 20), 'int')
        # Processing the call keyword arguments
        kwargs_317815 = {}
        # Getting the type of 'call_assignment_315094' (line 911)
        call_assignment_315094_317812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'call_assignment_315094', False)
        # Obtaining the member '__getitem__' of a type (line 911)
        getitem___317813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 20), call_assignment_315094_317812, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317816 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317813, *[int_317814], **kwargs_317815)
        
        # Assigning a type to the variable 'call_assignment_315095' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'call_assignment_315095', getitem___call_result_317816)
        
        # Assigning a Name to a Name (line 911):
        # Getting the type of 'call_assignment_315095' (line 911)
        call_assignment_315095_317817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'call_assignment_315095')
        # Assigning a type to the variable 'ndays' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'ndays', call_assignment_315095_317817)
        
        # Assigning a Call to a Name (line 911):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 20), 'int')
        # Processing the call keyword arguments
        kwargs_317821 = {}
        # Getting the type of 'call_assignment_315094' (line 911)
        call_assignment_315094_317818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'call_assignment_315094', False)
        # Obtaining the member '__getitem__' of a type (line 911)
        getitem___317819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 20), call_assignment_315094_317818, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317822 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317819, *[int_317820], **kwargs_317821)
        
        # Assigning a type to the variable 'call_assignment_315096' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'call_assignment_315096', getitem___call_result_317822)
        
        # Assigning a Name to a Name (line 911):
        # Getting the type of 'call_assignment_315096' (line 911)
        call_assignment_315096_317823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'call_assignment_315096')
        # Assigning a type to the variable 'hour' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 27), 'hour', call_assignment_315096_317823)
        # SSA branch for the else part of an if statement (line 910)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 915):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 915)
        # Processing the call arguments (line 915)
        # Getting the type of 'hour' (line 915)
        hour_317825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 41), 'hour', False)
        # Getting the type of 'interval' (line 915)
        interval_317826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 46), 'interval', False)
        # Applying the binary operator '+' (line 915)
        result_add_317827 = python_operator(stypy.reporting.localization.Localization(__file__, 915, 41), '+', hour_317825, interval_317826)
        
        int_317828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 56), 'int')
        # Processing the call keyword arguments (line 915)
        kwargs_317829 = {}
        # Getting the type of 'divmod' (line 915)
        divmod_317824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 34), 'divmod', False)
        # Calling divmod(args, kwargs) (line 915)
        divmod_call_result_317830 = invoke(stypy.reporting.localization.Localization(__file__, 915, 34), divmod_317824, *[result_add_317827, int_317828], **kwargs_317829)
        
        # Assigning a type to the variable 'call_assignment_315097' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'call_assignment_315097', divmod_call_result_317830)
        
        # Assigning a Call to a Name (line 915):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 20), 'int')
        # Processing the call keyword arguments
        kwargs_317834 = {}
        # Getting the type of 'call_assignment_315097' (line 915)
        call_assignment_315097_317831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'call_assignment_315097', False)
        # Obtaining the member '__getitem__' of a type (line 915)
        getitem___317832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 20), call_assignment_315097_317831, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317835 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317832, *[int_317833], **kwargs_317834)
        
        # Assigning a type to the variable 'call_assignment_315098' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'call_assignment_315098', getitem___call_result_317835)
        
        # Assigning a Name to a Name (line 915):
        # Getting the type of 'call_assignment_315098' (line 915)
        call_assignment_315098_317836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'call_assignment_315098')
        # Assigning a type to the variable 'ndays' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'ndays', call_assignment_315098_317836)
        
        # Assigning a Call to a Name (line 915):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 20), 'int')
        # Processing the call keyword arguments
        kwargs_317840 = {}
        # Getting the type of 'call_assignment_315097' (line 915)
        call_assignment_315097_317837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'call_assignment_315097', False)
        # Obtaining the member '__getitem__' of a type (line 915)
        getitem___317838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 20), call_assignment_315097_317837, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317841 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317838, *[int_317839], **kwargs_317840)
        
        # Assigning a type to the variable 'call_assignment_315099' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'call_assignment_315099', getitem___call_result_317841)
        
        # Assigning a Name to a Name (line 915):
        # Getting the type of 'call_assignment_315099' (line 915)
        call_assignment_315099_317842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'call_assignment_315099')
        # Assigning a type to the variable 'hour' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 27), 'hour', call_assignment_315099_317842)
        # SSA join for if statement (line 910)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'ndays' (line 917)
        ndays_317843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 19), 'ndays')
        # Testing the type of an if condition (line 917)
        if_condition_317844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 917, 16), ndays_317843)
        # Assigning a type to the variable 'if_condition_317844' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 16), 'if_condition_317844', if_condition_317844)
        # SSA begins for if statement (line 917)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'day' (line 918)
        day_317845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 20), 'day')
        # Getting the type of 'ndays' (line 918)
        ndays_317846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 27), 'ndays')
        # Applying the binary operator '+=' (line 918)
        result_iadd_317847 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 20), '+=', day_317845, ndays_317846)
        # Assigning a type to the variable 'day' (line 918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 20), 'day', result_iadd_317847)
        
        
        # Assigning a Name to a Name (line 919):
        
        # Assigning a Name to a Name (line 919):
        # Getting the type of 'True' (line 919)
        True_317848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 29), 'True')
        # Assigning a type to the variable 'fixday' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 20), 'fixday', True_317848)
        # SSA join for if statement (line 917)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 921):
        
        # Assigning a Call to a Name (line 921):
        
        # Call to gettimeset(...): (line 921)
        # Processing the call arguments (line 921)
        # Getting the type of 'hour' (line 921)
        hour_317850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 37), 'hour', False)
        # Getting the type of 'minute' (line 921)
        minute_317851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 43), 'minute', False)
        # Getting the type of 'second' (line 921)
        second_317852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 51), 'second', False)
        # Processing the call keyword arguments (line 921)
        kwargs_317853 = {}
        # Getting the type of 'gettimeset' (line 921)
        gettimeset_317849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 26), 'gettimeset', False)
        # Calling gettimeset(args, kwargs) (line 921)
        gettimeset_call_result_317854 = invoke(stypy.reporting.localization.Localization(__file__, 921, 26), gettimeset_317849, *[hour_317850, minute_317851, second_317852], **kwargs_317853)
        
        # Assigning a type to the variable 'timeset' (line 921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 16), 'timeset', gettimeset_call_result_317854)
        # SSA branch for the else part of an if statement (line 905)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 922)
        freq_317855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 17), 'freq')
        # Getting the type of 'MINUTELY' (line 922)
        MINUTELY_317856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 25), 'MINUTELY')
        # Applying the binary operator '==' (line 922)
        result_eq_317857 = python_operator(stypy.reporting.localization.Localization(__file__, 922, 17), '==', freq_317855, MINUTELY_317856)
        
        # Testing the type of an if condition (line 922)
        if_condition_317858 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 922, 17), result_eq_317857)
        # Assigning a type to the variable 'if_condition_317858' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 17), 'if_condition_317858', if_condition_317858)
        # SSA begins for if statement (line 922)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'filtered' (line 923)
        filtered_317859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 19), 'filtered')
        # Testing the type of an if condition (line 923)
        if_condition_317860 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 923, 16), filtered_317859)
        # Assigning a type to the variable 'if_condition_317860' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 16), 'if_condition_317860', if_condition_317860)
        # SSA begins for if statement (line 923)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'minute' (line 925)
        minute_317861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 20), 'minute')
        int_317862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 32), 'int')
        # Getting the type of 'hour' (line 925)
        hour_317863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 38), 'hour')
        int_317864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 43), 'int')
        # Applying the binary operator '*' (line 925)
        result_mul_317865 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 38), '*', hour_317863, int_317864)
        
        # Getting the type of 'minute' (line 925)
        minute_317866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 46), 'minute')
        # Applying the binary operator '+' (line 925)
        result_add_317867 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 38), '+', result_mul_317865, minute_317866)
        
        # Applying the binary operator '-' (line 925)
        result_sub_317868 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 32), '-', int_317862, result_add_317867)
        
        # Getting the type of 'interval' (line 925)
        interval_317869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 56), 'interval')
        # Applying the binary operator '//' (line 925)
        result_floordiv_317870 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 31), '//', result_sub_317868, interval_317869)
        
        # Getting the type of 'interval' (line 925)
        interval_317871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 66), 'interval')
        # Applying the binary operator '*' (line 925)
        result_mul_317872 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 30), '*', result_floordiv_317870, interval_317871)
        
        # Applying the binary operator '+=' (line 925)
        result_iadd_317873 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 20), '+=', minute_317861, result_mul_317872)
        # Assigning a type to the variable 'minute' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 20), 'minute', result_iadd_317873)
        
        # SSA join for if statement (line 923)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 927):
        
        # Assigning a Name to a Name (line 927):
        # Getting the type of 'False' (line 927)
        False_317874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 24), 'False')
        # Assigning a type to the variable 'valid' (line 927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 16), 'valid', False_317874)
        
        # Assigning a BinOp to a Name (line 928):
        
        # Assigning a BinOp to a Name (line 928):
        int_317875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 28), 'int')
        int_317876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 31), 'int')
        # Applying the binary operator '*' (line 928)
        result_mul_317877 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 28), '*', int_317875, int_317876)
        
        # Assigning a type to the variable 'rep_rate' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 16), 'rep_rate', result_mul_317877)
        
        
        # Call to range(...): (line 929)
        # Processing the call arguments (line 929)
        # Getting the type of 'rep_rate' (line 929)
        rep_rate_317879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 31), 'rep_rate', False)
        
        # Call to gcd(...): (line 929)
        # Processing the call arguments (line 929)
        # Getting the type of 'interval' (line 929)
        interval_317881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 47), 'interval', False)
        # Getting the type of 'rep_rate' (line 929)
        rep_rate_317882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 57), 'rep_rate', False)
        # Processing the call keyword arguments (line 929)
        kwargs_317883 = {}
        # Getting the type of 'gcd' (line 929)
        gcd_317880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 43), 'gcd', False)
        # Calling gcd(args, kwargs) (line 929)
        gcd_call_result_317884 = invoke(stypy.reporting.localization.Localization(__file__, 929, 43), gcd_317880, *[interval_317881, rep_rate_317882], **kwargs_317883)
        
        # Applying the binary operator '//' (line 929)
        result_floordiv_317885 = python_operator(stypy.reporting.localization.Localization(__file__, 929, 31), '//', rep_rate_317879, gcd_call_result_317884)
        
        # Processing the call keyword arguments (line 929)
        kwargs_317886 = {}
        # Getting the type of 'range' (line 929)
        range_317878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 25), 'range', False)
        # Calling range(args, kwargs) (line 929)
        range_call_result_317887 = invoke(stypy.reporting.localization.Localization(__file__, 929, 25), range_317878, *[result_floordiv_317885], **kwargs_317886)
        
        # Testing the type of a for loop iterable (line 929)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 929, 16), range_call_result_317887)
        # Getting the type of the for loop variable (line 929)
        for_loop_var_317888 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 929, 16), range_call_result_317887)
        # Assigning a type to the variable 'j' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 16), 'j', for_loop_var_317888)
        # SSA begins for a for statement (line 929)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'byminute' (line 930)
        byminute_317889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 23), 'byminute')
        # Testing the type of an if condition (line 930)
        if_condition_317890 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 930, 20), byminute_317889)
        # Assigning a type to the variable 'if_condition_317890' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 20), 'if_condition_317890', if_condition_317890)
        # SSA begins for if statement (line 930)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 931):
        
        # Assigning a Call to a Name:
        
        # Call to __mod_distance(...): (line 932)
        # Processing the call keyword arguments (line 932)
        # Getting the type of 'minute' (line 932)
        minute_317893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 54), 'minute', False)
        keyword_317894 = minute_317893
        # Getting the type of 'self' (line 933)
        self_317895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 54), 'self', False)
        # Obtaining the member '_byminute' of a type (line 933)
        _byminute_317896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 54), self_317895, '_byminute')
        keyword_317897 = _byminute_317896
        int_317898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 934, 53), 'int')
        keyword_317899 = int_317898
        kwargs_317900 = {'byxxx': keyword_317897, 'base': keyword_317899, 'value': keyword_317894}
        # Getting the type of 'self' (line 932)
        self_317891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 28), 'self', False)
        # Obtaining the member '__mod_distance' of a type (line 932)
        mod_distance_317892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 28), self_317891, '__mod_distance')
        # Calling __mod_distance(args, kwargs) (line 932)
        mod_distance_call_result_317901 = invoke(stypy.reporting.localization.Localization(__file__, 932, 28), mod_distance_317892, *[], **kwargs_317900)
        
        # Assigning a type to the variable 'call_assignment_315100' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 24), 'call_assignment_315100', mod_distance_call_result_317901)
        
        # Assigning a Call to a Name (line 931):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 24), 'int')
        # Processing the call keyword arguments
        kwargs_317905 = {}
        # Getting the type of 'call_assignment_315100' (line 931)
        call_assignment_315100_317902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 24), 'call_assignment_315100', False)
        # Obtaining the member '__getitem__' of a type (line 931)
        getitem___317903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 24), call_assignment_315100_317902, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317906 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317903, *[int_317904], **kwargs_317905)
        
        # Assigning a type to the variable 'call_assignment_315101' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 24), 'call_assignment_315101', getitem___call_result_317906)
        
        # Assigning a Name to a Name (line 931):
        # Getting the type of 'call_assignment_315101' (line 931)
        call_assignment_315101_317907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 24), 'call_assignment_315101')
        # Assigning a type to the variable 'nhours' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 24), 'nhours', call_assignment_315101_317907)
        
        # Assigning a Call to a Name (line 931):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 24), 'int')
        # Processing the call keyword arguments
        kwargs_317911 = {}
        # Getting the type of 'call_assignment_315100' (line 931)
        call_assignment_315100_317908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 24), 'call_assignment_315100', False)
        # Obtaining the member '__getitem__' of a type (line 931)
        getitem___317909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 24), call_assignment_315100_317908, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317912 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317909, *[int_317910], **kwargs_317911)
        
        # Assigning a type to the variable 'call_assignment_315102' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 24), 'call_assignment_315102', getitem___call_result_317912)
        
        # Assigning a Name to a Name (line 931):
        # Getting the type of 'call_assignment_315102' (line 931)
        call_assignment_315102_317913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 24), 'call_assignment_315102')
        # Assigning a type to the variable 'minute' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 32), 'minute', call_assignment_315102_317913)
        # SSA branch for the else part of an if statement (line 930)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 936):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 936)
        # Processing the call arguments (line 936)
        # Getting the type of 'minute' (line 936)
        minute_317915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 48), 'minute', False)
        # Getting the type of 'interval' (line 936)
        interval_317916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 55), 'interval', False)
        # Applying the binary operator '+' (line 936)
        result_add_317917 = python_operator(stypy.reporting.localization.Localization(__file__, 936, 48), '+', minute_317915, interval_317916)
        
        int_317918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 65), 'int')
        # Processing the call keyword arguments (line 936)
        kwargs_317919 = {}
        # Getting the type of 'divmod' (line 936)
        divmod_317914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 41), 'divmod', False)
        # Calling divmod(args, kwargs) (line 936)
        divmod_call_result_317920 = invoke(stypy.reporting.localization.Localization(__file__, 936, 41), divmod_317914, *[result_add_317917, int_317918], **kwargs_317919)
        
        # Assigning a type to the variable 'call_assignment_315103' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 24), 'call_assignment_315103', divmod_call_result_317920)
        
        # Assigning a Call to a Name (line 936):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 24), 'int')
        # Processing the call keyword arguments
        kwargs_317924 = {}
        # Getting the type of 'call_assignment_315103' (line 936)
        call_assignment_315103_317921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 24), 'call_assignment_315103', False)
        # Obtaining the member '__getitem__' of a type (line 936)
        getitem___317922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 24), call_assignment_315103_317921, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317925 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317922, *[int_317923], **kwargs_317924)
        
        # Assigning a type to the variable 'call_assignment_315104' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 24), 'call_assignment_315104', getitem___call_result_317925)
        
        # Assigning a Name to a Name (line 936):
        # Getting the type of 'call_assignment_315104' (line 936)
        call_assignment_315104_317926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 24), 'call_assignment_315104')
        # Assigning a type to the variable 'nhours' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 24), 'nhours', call_assignment_315104_317926)
        
        # Assigning a Call to a Name (line 936):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 24), 'int')
        # Processing the call keyword arguments
        kwargs_317930 = {}
        # Getting the type of 'call_assignment_315103' (line 936)
        call_assignment_315103_317927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 24), 'call_assignment_315103', False)
        # Obtaining the member '__getitem__' of a type (line 936)
        getitem___317928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 24), call_assignment_315103_317927, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317931 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317928, *[int_317929], **kwargs_317930)
        
        # Assigning a type to the variable 'call_assignment_315105' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 24), 'call_assignment_315105', getitem___call_result_317931)
        
        # Assigning a Name to a Name (line 936):
        # Getting the type of 'call_assignment_315105' (line 936)
        call_assignment_315105_317932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 24), 'call_assignment_315105')
        # Assigning a type to the variable 'minute' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 32), 'minute', call_assignment_315105_317932)
        # SSA join for if statement (line 930)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 938):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 938)
        # Processing the call arguments (line 938)
        # Getting the type of 'hour' (line 938)
        hour_317934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 39), 'hour', False)
        # Getting the type of 'nhours' (line 938)
        nhours_317935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 44), 'nhours', False)
        # Applying the binary operator '+' (line 938)
        result_add_317936 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 39), '+', hour_317934, nhours_317935)
        
        int_317937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 52), 'int')
        # Processing the call keyword arguments (line 938)
        kwargs_317938 = {}
        # Getting the type of 'divmod' (line 938)
        divmod_317933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 32), 'divmod', False)
        # Calling divmod(args, kwargs) (line 938)
        divmod_call_result_317939 = invoke(stypy.reporting.localization.Localization(__file__, 938, 32), divmod_317933, *[result_add_317936, int_317937], **kwargs_317938)
        
        # Assigning a type to the variable 'call_assignment_315106' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'call_assignment_315106', divmod_call_result_317939)
        
        # Assigning a Call to a Name (line 938):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 20), 'int')
        # Processing the call keyword arguments
        kwargs_317943 = {}
        # Getting the type of 'call_assignment_315106' (line 938)
        call_assignment_315106_317940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'call_assignment_315106', False)
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___317941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 20), call_assignment_315106_317940, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317944 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317941, *[int_317942], **kwargs_317943)
        
        # Assigning a type to the variable 'call_assignment_315107' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'call_assignment_315107', getitem___call_result_317944)
        
        # Assigning a Name to a Name (line 938):
        # Getting the type of 'call_assignment_315107' (line 938)
        call_assignment_315107_317945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'call_assignment_315107')
        # Assigning a type to the variable 'div' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'div', call_assignment_315107_317945)
        
        # Assigning a Call to a Name (line 938):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_317948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 20), 'int')
        # Processing the call keyword arguments
        kwargs_317949 = {}
        # Getting the type of 'call_assignment_315106' (line 938)
        call_assignment_315106_317946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'call_assignment_315106', False)
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___317947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 20), call_assignment_315106_317946, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_317950 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___317947, *[int_317948], **kwargs_317949)
        
        # Assigning a type to the variable 'call_assignment_315108' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'call_assignment_315108', getitem___call_result_317950)
        
        # Assigning a Name to a Name (line 938):
        # Getting the type of 'call_assignment_315108' (line 938)
        call_assignment_315108_317951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'call_assignment_315108')
        # Assigning a type to the variable 'hour' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 25), 'hour', call_assignment_315108_317951)
        
        # Getting the type of 'div' (line 939)
        div_317952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 23), 'div')
        # Testing the type of an if condition (line 939)
        if_condition_317953 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 939, 20), div_317952)
        # Assigning a type to the variable 'if_condition_317953' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 20), 'if_condition_317953', if_condition_317953)
        # SSA begins for if statement (line 939)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'day' (line 940)
        day_317954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 24), 'day')
        # Getting the type of 'div' (line 940)
        div_317955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 31), 'div')
        # Applying the binary operator '+=' (line 940)
        result_iadd_317956 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 24), '+=', day_317954, div_317955)
        # Assigning a type to the variable 'day' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 24), 'day', result_iadd_317956)
        
        
        # Assigning a Name to a Name (line 941):
        
        # Assigning a Name to a Name (line 941):
        # Getting the type of 'True' (line 941)
        True_317957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 33), 'True')
        # Assigning a type to the variable 'fixday' (line 941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 24), 'fixday', True_317957)
        
        # Assigning a Name to a Name (line 942):
        
        # Assigning a Name to a Name (line 942):
        # Getting the type of 'False' (line 942)
        False_317958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 35), 'False')
        # Assigning a type to the variable 'filtered' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 24), 'filtered', False_317958)
        # SSA join for if statement (line 939)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'byhour' (line 944)
        byhour_317959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 27), 'byhour')
        # Applying the 'not' unary operator (line 944)
        result_not__317960 = python_operator(stypy.reporting.localization.Localization(__file__, 944, 23), 'not', byhour_317959)
        
        
        # Getting the type of 'hour' (line 944)
        hour_317961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 37), 'hour')
        # Getting the type of 'byhour' (line 944)
        byhour_317962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 45), 'byhour')
        # Applying the binary operator 'in' (line 944)
        result_contains_317963 = python_operator(stypy.reporting.localization.Localization(__file__, 944, 37), 'in', hour_317961, byhour_317962)
        
        # Applying the binary operator 'or' (line 944)
        result_or_keyword_317964 = python_operator(stypy.reporting.localization.Localization(__file__, 944, 23), 'or', result_not__317960, result_contains_317963)
        
        # Testing the type of an if condition (line 944)
        if_condition_317965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 944, 20), result_or_keyword_317964)
        # Assigning a type to the variable 'if_condition_317965' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 20), 'if_condition_317965', if_condition_317965)
        # SSA begins for if statement (line 944)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 945):
        
        # Assigning a Name to a Name (line 945):
        # Getting the type of 'True' (line 945)
        True_317966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 32), 'True')
        # Assigning a type to the variable 'valid' (line 945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 24), 'valid', True_317966)
        # SSA join for if statement (line 944)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'valid' (line 948)
        valid_317967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 23), 'valid')
        # Applying the 'not' unary operator (line 948)
        result_not__317968 = python_operator(stypy.reporting.localization.Localization(__file__, 948, 19), 'not', valid_317967)
        
        # Testing the type of an if condition (line 948)
        if_condition_317969 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 948, 16), result_not__317968)
        # Assigning a type to the variable 'if_condition_317969' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 16), 'if_condition_317969', if_condition_317969)
        # SSA begins for if statement (line 948)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 949)
        # Processing the call arguments (line 949)
        str_317971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 37), 'str', 'Invalid combination of interval and ')
        str_317972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 37), 'str', 'byhour resulting in empty rule.')
        # Applying the binary operator '+' (line 949)
        result_add_317973 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 37), '+', str_317971, str_317972)
        
        # Processing the call keyword arguments (line 949)
        kwargs_317974 = {}
        # Getting the type of 'ValueError' (line 949)
        ValueError_317970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 949)
        ValueError_call_result_317975 = invoke(stypy.reporting.localization.Localization(__file__, 949, 26), ValueError_317970, *[result_add_317973], **kwargs_317974)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 949, 20), ValueError_call_result_317975, 'raise parameter', BaseException)
        # SSA join for if statement (line 948)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 952):
        
        # Assigning a Call to a Name (line 952):
        
        # Call to gettimeset(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'hour' (line 952)
        hour_317977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 37), 'hour', False)
        # Getting the type of 'minute' (line 952)
        minute_317978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 43), 'minute', False)
        # Getting the type of 'second' (line 952)
        second_317979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 51), 'second', False)
        # Processing the call keyword arguments (line 952)
        kwargs_317980 = {}
        # Getting the type of 'gettimeset' (line 952)
        gettimeset_317976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 26), 'gettimeset', False)
        # Calling gettimeset(args, kwargs) (line 952)
        gettimeset_call_result_317981 = invoke(stypy.reporting.localization.Localization(__file__, 952, 26), gettimeset_317976, *[hour_317977, minute_317978, second_317979], **kwargs_317980)
        
        # Assigning a type to the variable 'timeset' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 16), 'timeset', gettimeset_call_result_317981)
        # SSA branch for the else part of an if statement (line 922)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'freq' (line 953)
        freq_317982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 17), 'freq')
        # Getting the type of 'SECONDLY' (line 953)
        SECONDLY_317983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 25), 'SECONDLY')
        # Applying the binary operator '==' (line 953)
        result_eq_317984 = python_operator(stypy.reporting.localization.Localization(__file__, 953, 17), '==', freq_317982, SECONDLY_317983)
        
        # Testing the type of an if condition (line 953)
        if_condition_317985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 953, 17), result_eq_317984)
        # Assigning a type to the variable 'if_condition_317985' (line 953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 17), 'if_condition_317985', if_condition_317985)
        # SSA begins for if statement (line 953)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'filtered' (line 954)
        filtered_317986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 19), 'filtered')
        # Testing the type of an if condition (line 954)
        if_condition_317987 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 954, 16), filtered_317986)
        # Assigning a type to the variable 'if_condition_317987' (line 954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 16), 'if_condition_317987', if_condition_317987)
        # SSA begins for if statement (line 954)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'second' (line 956)
        second_317988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 20), 'second')
        int_317989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 33), 'int')
        # Getting the type of 'hour' (line 956)
        hour_317990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 42), 'hour')
        int_317991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 49), 'int')
        # Applying the binary operator '*' (line 956)
        result_mul_317992 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 42), '*', hour_317990, int_317991)
        
        # Getting the type of 'minute' (line 956)
        minute_317993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 56), 'minute')
        int_317994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 65), 'int')
        # Applying the binary operator '*' (line 956)
        result_mul_317995 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 56), '*', minute_317993, int_317994)
        
        # Applying the binary operator '+' (line 956)
        result_add_317996 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 42), '+', result_mul_317992, result_mul_317995)
        
        # Getting the type of 'second' (line 956)
        second_317997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 70), 'second')
        # Applying the binary operator '+' (line 956)
        result_add_317998 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 68), '+', result_add_317996, second_317997)
        
        # Applying the binary operator '-' (line 956)
        result_sub_317999 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 33), '-', int_317989, result_add_317998)
        
        # Getting the type of 'interval' (line 957)
        interval_318000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 35), 'interval')
        # Applying the binary operator '//' (line 956)
        result_floordiv_318001 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 32), '//', result_sub_317999, interval_318000)
        
        # Getting the type of 'interval' (line 957)
        interval_318002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 47), 'interval')
        # Applying the binary operator '*' (line 956)
        result_mul_318003 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 31), '*', result_floordiv_318001, interval_318002)
        
        # Applying the binary operator '+=' (line 956)
        result_iadd_318004 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 20), '+=', second_317988, result_mul_318003)
        # Assigning a type to the variable 'second' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 20), 'second', result_iadd_318004)
        
        # SSA join for if statement (line 954)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 959):
        
        # Assigning a BinOp to a Name (line 959):
        int_318005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 28), 'int')
        int_318006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 33), 'int')
        # Applying the binary operator '*' (line 959)
        result_mul_318007 = python_operator(stypy.reporting.localization.Localization(__file__, 959, 28), '*', int_318005, int_318006)
        
        # Assigning a type to the variable 'rep_rate' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 16), 'rep_rate', result_mul_318007)
        
        # Assigning a Name to a Name (line 960):
        
        # Assigning a Name to a Name (line 960):
        # Getting the type of 'False' (line 960)
        False_318008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 24), 'False')
        # Assigning a type to the variable 'valid' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 16), 'valid', False_318008)
        
        
        # Call to range(...): (line 961)
        # Processing the call arguments (line 961)
        int_318010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 31), 'int')
        # Getting the type of 'rep_rate' (line 961)
        rep_rate_318011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 34), 'rep_rate', False)
        
        # Call to gcd(...): (line 961)
        # Processing the call arguments (line 961)
        # Getting the type of 'interval' (line 961)
        interval_318013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 50), 'interval', False)
        # Getting the type of 'rep_rate' (line 961)
        rep_rate_318014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 60), 'rep_rate', False)
        # Processing the call keyword arguments (line 961)
        kwargs_318015 = {}
        # Getting the type of 'gcd' (line 961)
        gcd_318012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 46), 'gcd', False)
        # Calling gcd(args, kwargs) (line 961)
        gcd_call_result_318016 = invoke(stypy.reporting.localization.Localization(__file__, 961, 46), gcd_318012, *[interval_318013, rep_rate_318014], **kwargs_318015)
        
        # Applying the binary operator '//' (line 961)
        result_floordiv_318017 = python_operator(stypy.reporting.localization.Localization(__file__, 961, 34), '//', rep_rate_318011, gcd_call_result_318016)
        
        # Processing the call keyword arguments (line 961)
        kwargs_318018 = {}
        # Getting the type of 'range' (line 961)
        range_318009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 25), 'range', False)
        # Calling range(args, kwargs) (line 961)
        range_call_result_318019 = invoke(stypy.reporting.localization.Localization(__file__, 961, 25), range_318009, *[int_318010, result_floordiv_318017], **kwargs_318018)
        
        # Testing the type of a for loop iterable (line 961)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 961, 16), range_call_result_318019)
        # Getting the type of the for loop variable (line 961)
        for_loop_var_318020 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 961, 16), range_call_result_318019)
        # Assigning a type to the variable 'j' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 16), 'j', for_loop_var_318020)
        # SSA begins for a for statement (line 961)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'bysecond' (line 962)
        bysecond_318021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 23), 'bysecond')
        # Testing the type of an if condition (line 962)
        if_condition_318022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 962, 20), bysecond_318021)
        # Assigning a type to the variable 'if_condition_318022' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 20), 'if_condition_318022', if_condition_318022)
        # SSA begins for if statement (line 962)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 963):
        
        # Assigning a Call to a Name:
        
        # Call to __mod_distance(...): (line 964)
        # Processing the call keyword arguments (line 964)
        # Getting the type of 'second' (line 964)
        second_318025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 54), 'second', False)
        keyword_318026 = second_318025
        # Getting the type of 'self' (line 965)
        self_318027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 54), 'self', False)
        # Obtaining the member '_bysecond' of a type (line 965)
        _bysecond_318028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 54), self_318027, '_bysecond')
        keyword_318029 = _bysecond_318028
        int_318030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 53), 'int')
        keyword_318031 = int_318030
        kwargs_318032 = {'byxxx': keyword_318029, 'base': keyword_318031, 'value': keyword_318026}
        # Getting the type of 'self' (line 964)
        self_318023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 28), 'self', False)
        # Obtaining the member '__mod_distance' of a type (line 964)
        mod_distance_318024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 28), self_318023, '__mod_distance')
        # Calling __mod_distance(args, kwargs) (line 964)
        mod_distance_call_result_318033 = invoke(stypy.reporting.localization.Localization(__file__, 964, 28), mod_distance_318024, *[], **kwargs_318032)
        
        # Assigning a type to the variable 'call_assignment_315109' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'call_assignment_315109', mod_distance_call_result_318033)
        
        # Assigning a Call to a Name (line 963):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 24), 'int')
        # Processing the call keyword arguments
        kwargs_318037 = {}
        # Getting the type of 'call_assignment_315109' (line 963)
        call_assignment_315109_318034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'call_assignment_315109', False)
        # Obtaining the member '__getitem__' of a type (line 963)
        getitem___318035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 24), call_assignment_315109_318034, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318038 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318035, *[int_318036], **kwargs_318037)
        
        # Assigning a type to the variable 'call_assignment_315110' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'call_assignment_315110', getitem___call_result_318038)
        
        # Assigning a Name to a Name (line 963):
        # Getting the type of 'call_assignment_315110' (line 963)
        call_assignment_315110_318039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'call_assignment_315110')
        # Assigning a type to the variable 'nminutes' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'nminutes', call_assignment_315110_318039)
        
        # Assigning a Call to a Name (line 963):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 24), 'int')
        # Processing the call keyword arguments
        kwargs_318043 = {}
        # Getting the type of 'call_assignment_315109' (line 963)
        call_assignment_315109_318040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'call_assignment_315109', False)
        # Obtaining the member '__getitem__' of a type (line 963)
        getitem___318041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 24), call_assignment_315109_318040, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318044 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318041, *[int_318042], **kwargs_318043)
        
        # Assigning a type to the variable 'call_assignment_315111' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'call_assignment_315111', getitem___call_result_318044)
        
        # Assigning a Name to a Name (line 963):
        # Getting the type of 'call_assignment_315111' (line 963)
        call_assignment_315111_318045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 24), 'call_assignment_315111')
        # Assigning a type to the variable 'second' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 34), 'second', call_assignment_315111_318045)
        # SSA branch for the else part of an if statement (line 962)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 968):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 968)
        # Processing the call arguments (line 968)
        # Getting the type of 'second' (line 968)
        second_318047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 50), 'second', False)
        # Getting the type of 'interval' (line 968)
        interval_318048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 57), 'interval', False)
        # Applying the binary operator '+' (line 968)
        result_add_318049 = python_operator(stypy.reporting.localization.Localization(__file__, 968, 50), '+', second_318047, interval_318048)
        
        int_318050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 67), 'int')
        # Processing the call keyword arguments (line 968)
        kwargs_318051 = {}
        # Getting the type of 'divmod' (line 968)
        divmod_318046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 43), 'divmod', False)
        # Calling divmod(args, kwargs) (line 968)
        divmod_call_result_318052 = invoke(stypy.reporting.localization.Localization(__file__, 968, 43), divmod_318046, *[result_add_318049, int_318050], **kwargs_318051)
        
        # Assigning a type to the variable 'call_assignment_315112' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'call_assignment_315112', divmod_call_result_318052)
        
        # Assigning a Call to a Name (line 968):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 24), 'int')
        # Processing the call keyword arguments
        kwargs_318056 = {}
        # Getting the type of 'call_assignment_315112' (line 968)
        call_assignment_315112_318053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'call_assignment_315112', False)
        # Obtaining the member '__getitem__' of a type (line 968)
        getitem___318054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 24), call_assignment_315112_318053, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318057 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318054, *[int_318055], **kwargs_318056)
        
        # Assigning a type to the variable 'call_assignment_315113' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'call_assignment_315113', getitem___call_result_318057)
        
        # Assigning a Name to a Name (line 968):
        # Getting the type of 'call_assignment_315113' (line 968)
        call_assignment_315113_318058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'call_assignment_315113')
        # Assigning a type to the variable 'nminutes' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'nminutes', call_assignment_315113_318058)
        
        # Assigning a Call to a Name (line 968):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 968, 24), 'int')
        # Processing the call keyword arguments
        kwargs_318062 = {}
        # Getting the type of 'call_assignment_315112' (line 968)
        call_assignment_315112_318059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'call_assignment_315112', False)
        # Obtaining the member '__getitem__' of a type (line 968)
        getitem___318060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 24), call_assignment_315112_318059, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318063 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318060, *[int_318061], **kwargs_318062)
        
        # Assigning a type to the variable 'call_assignment_315114' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'call_assignment_315114', getitem___call_result_318063)
        
        # Assigning a Name to a Name (line 968):
        # Getting the type of 'call_assignment_315114' (line 968)
        call_assignment_315114_318064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 24), 'call_assignment_315114')
        # Assigning a type to the variable 'second' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 34), 'second', call_assignment_315114_318064)
        # SSA join for if statement (line 962)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 970):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 970)
        # Processing the call arguments (line 970)
        # Getting the type of 'minute' (line 970)
        minute_318066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 41), 'minute', False)
        # Getting the type of 'nminutes' (line 970)
        nminutes_318067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 48), 'nminutes', False)
        # Applying the binary operator '+' (line 970)
        result_add_318068 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 41), '+', minute_318066, nminutes_318067)
        
        int_318069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 58), 'int')
        # Processing the call keyword arguments (line 970)
        kwargs_318070 = {}
        # Getting the type of 'divmod' (line 970)
        divmod_318065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 34), 'divmod', False)
        # Calling divmod(args, kwargs) (line 970)
        divmod_call_result_318071 = invoke(stypy.reporting.localization.Localization(__file__, 970, 34), divmod_318065, *[result_add_318068, int_318069], **kwargs_318070)
        
        # Assigning a type to the variable 'call_assignment_315115' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'call_assignment_315115', divmod_call_result_318071)
        
        # Assigning a Call to a Name (line 970):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 20), 'int')
        # Processing the call keyword arguments
        kwargs_318075 = {}
        # Getting the type of 'call_assignment_315115' (line 970)
        call_assignment_315115_318072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'call_assignment_315115', False)
        # Obtaining the member '__getitem__' of a type (line 970)
        getitem___318073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 20), call_assignment_315115_318072, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318076 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318073, *[int_318074], **kwargs_318075)
        
        # Assigning a type to the variable 'call_assignment_315116' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'call_assignment_315116', getitem___call_result_318076)
        
        # Assigning a Name to a Name (line 970):
        # Getting the type of 'call_assignment_315116' (line 970)
        call_assignment_315116_318077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'call_assignment_315116')
        # Assigning a type to the variable 'div' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'div', call_assignment_315116_318077)
        
        # Assigning a Call to a Name (line 970):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 20), 'int')
        # Processing the call keyword arguments
        kwargs_318081 = {}
        # Getting the type of 'call_assignment_315115' (line 970)
        call_assignment_315115_318078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'call_assignment_315115', False)
        # Obtaining the member '__getitem__' of a type (line 970)
        getitem___318079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 20), call_assignment_315115_318078, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318082 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318079, *[int_318080], **kwargs_318081)
        
        # Assigning a type to the variable 'call_assignment_315117' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'call_assignment_315117', getitem___call_result_318082)
        
        # Assigning a Name to a Name (line 970):
        # Getting the type of 'call_assignment_315117' (line 970)
        call_assignment_315117_318083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'call_assignment_315117')
        # Assigning a type to the variable 'minute' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 25), 'minute', call_assignment_315117_318083)
        
        # Getting the type of 'div' (line 971)
        div_318084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 23), 'div')
        # Testing the type of an if condition (line 971)
        if_condition_318085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 971, 20), div_318084)
        # Assigning a type to the variable 'if_condition_318085' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 20), 'if_condition_318085', if_condition_318085)
        # SSA begins for if statement (line 971)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'hour' (line 972)
        hour_318086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 24), 'hour')
        # Getting the type of 'div' (line 972)
        div_318087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 32), 'div')
        # Applying the binary operator '+=' (line 972)
        result_iadd_318088 = python_operator(stypy.reporting.localization.Localization(__file__, 972, 24), '+=', hour_318086, div_318087)
        # Assigning a type to the variable 'hour' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 24), 'hour', result_iadd_318088)
        
        
        # Assigning a Call to a Tuple (line 973):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 973)
        # Processing the call arguments (line 973)
        # Getting the type of 'hour' (line 973)
        hour_318090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 43), 'hour', False)
        int_318091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 49), 'int')
        # Processing the call keyword arguments (line 973)
        kwargs_318092 = {}
        # Getting the type of 'divmod' (line 973)
        divmod_318089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 36), 'divmod', False)
        # Calling divmod(args, kwargs) (line 973)
        divmod_call_result_318093 = invoke(stypy.reporting.localization.Localization(__file__, 973, 36), divmod_318089, *[hour_318090, int_318091], **kwargs_318092)
        
        # Assigning a type to the variable 'call_assignment_315118' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'call_assignment_315118', divmod_call_result_318093)
        
        # Assigning a Call to a Name (line 973):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 24), 'int')
        # Processing the call keyword arguments
        kwargs_318097 = {}
        # Getting the type of 'call_assignment_315118' (line 973)
        call_assignment_315118_318094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'call_assignment_315118', False)
        # Obtaining the member '__getitem__' of a type (line 973)
        getitem___318095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 24), call_assignment_315118_318094, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318098 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318095, *[int_318096], **kwargs_318097)
        
        # Assigning a type to the variable 'call_assignment_315119' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'call_assignment_315119', getitem___call_result_318098)
        
        # Assigning a Name to a Name (line 973):
        # Getting the type of 'call_assignment_315119' (line 973)
        call_assignment_315119_318099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'call_assignment_315119')
        # Assigning a type to the variable 'div' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'div', call_assignment_315119_318099)
        
        # Assigning a Call to a Name (line 973):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, 24), 'int')
        # Processing the call keyword arguments
        kwargs_318103 = {}
        # Getting the type of 'call_assignment_315118' (line 973)
        call_assignment_315118_318100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'call_assignment_315118', False)
        # Obtaining the member '__getitem__' of a type (line 973)
        getitem___318101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 24), call_assignment_315118_318100, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318104 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318101, *[int_318102], **kwargs_318103)
        
        # Assigning a type to the variable 'call_assignment_315120' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'call_assignment_315120', getitem___call_result_318104)
        
        # Assigning a Name to a Name (line 973):
        # Getting the type of 'call_assignment_315120' (line 973)
        call_assignment_315120_318105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 24), 'call_assignment_315120')
        # Assigning a type to the variable 'hour' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 29), 'hour', call_assignment_315120_318105)
        
        # Getting the type of 'div' (line 974)
        div_318106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 27), 'div')
        # Testing the type of an if condition (line 974)
        if_condition_318107 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 974, 24), div_318106)
        # Assigning a type to the variable 'if_condition_318107' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 24), 'if_condition_318107', if_condition_318107)
        # SSA begins for if statement (line 974)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'day' (line 975)
        day_318108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 28), 'day')
        # Getting the type of 'div' (line 975)
        div_318109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 35), 'div')
        # Applying the binary operator '+=' (line 975)
        result_iadd_318110 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 28), '+=', day_318108, div_318109)
        # Assigning a type to the variable 'day' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 28), 'day', result_iadd_318110)
        
        
        # Assigning a Name to a Name (line 976):
        
        # Assigning a Name to a Name (line 976):
        # Getting the type of 'True' (line 976)
        True_318111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 37), 'True')
        # Assigning a type to the variable 'fixday' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 28), 'fixday', True_318111)
        # SSA join for if statement (line 974)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 971)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'byhour' (line 978)
        byhour_318112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 29), 'byhour')
        # Applying the 'not' unary operator (line 978)
        result_not__318113 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 25), 'not', byhour_318112)
        
        
        # Getting the type of 'hour' (line 978)
        hour_318114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 39), 'hour')
        # Getting the type of 'byhour' (line 978)
        byhour_318115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 47), 'byhour')
        # Applying the binary operator 'in' (line 978)
        result_contains_318116 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 39), 'in', hour_318114, byhour_318115)
        
        # Applying the binary operator 'or' (line 978)
        result_or_keyword_318117 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 25), 'or', result_not__318113, result_contains_318116)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'byminute' (line 979)
        byminute_318118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 33), 'byminute')
        # Applying the 'not' unary operator (line 979)
        result_not__318119 = python_operator(stypy.reporting.localization.Localization(__file__, 979, 29), 'not', byminute_318118)
        
        
        # Getting the type of 'minute' (line 979)
        minute_318120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 45), 'minute')
        # Getting the type of 'byminute' (line 979)
        byminute_318121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 55), 'byminute')
        # Applying the binary operator 'in' (line 979)
        result_contains_318122 = python_operator(stypy.reporting.localization.Localization(__file__, 979, 45), 'in', minute_318120, byminute_318121)
        
        # Applying the binary operator 'or' (line 979)
        result_or_keyword_318123 = python_operator(stypy.reporting.localization.Localization(__file__, 979, 29), 'or', result_not__318119, result_contains_318122)
        
        # Applying the binary operator 'and' (line 978)
        result_and_keyword_318124 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 24), 'and', result_or_keyword_318117, result_or_keyword_318123)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'bysecond' (line 980)
        bysecond_318125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 33), 'bysecond')
        # Applying the 'not' unary operator (line 980)
        result_not__318126 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 29), 'not', bysecond_318125)
        
        
        # Getting the type of 'second' (line 980)
        second_318127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 45), 'second')
        # Getting the type of 'bysecond' (line 980)
        bysecond_318128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 55), 'bysecond')
        # Applying the binary operator 'in' (line 980)
        result_contains_318129 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 45), 'in', second_318127, bysecond_318128)
        
        # Applying the binary operator 'or' (line 980)
        result_or_keyword_318130 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 29), 'or', result_not__318126, result_contains_318129)
        
        # Applying the binary operator 'and' (line 978)
        result_and_keyword_318131 = python_operator(stypy.reporting.localization.Localization(__file__, 978, 24), 'and', result_and_keyword_318124, result_or_keyword_318130)
        
        # Testing the type of an if condition (line 978)
        if_condition_318132 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 978, 20), result_and_keyword_318131)
        # Assigning a type to the variable 'if_condition_318132' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 20), 'if_condition_318132', if_condition_318132)
        # SSA begins for if statement (line 978)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 981):
        
        # Assigning a Name to a Name (line 981):
        # Getting the type of 'True' (line 981)
        True_318133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 32), 'True')
        # Assigning a type to the variable 'valid' (line 981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 24), 'valid', True_318133)
        # SSA join for if statement (line 978)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'valid' (line 984)
        valid_318134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 23), 'valid')
        # Applying the 'not' unary operator (line 984)
        result_not__318135 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 19), 'not', valid_318134)
        
        # Testing the type of an if condition (line 984)
        if_condition_318136 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 984, 16), result_not__318135)
        # Assigning a type to the variable 'if_condition_318136' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 16), 'if_condition_318136', if_condition_318136)
        # SSA begins for if statement (line 984)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 985)
        # Processing the call arguments (line 985)
        str_318138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 37), 'str', 'Invalid combination of interval, ')
        str_318139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 37), 'str', 'byhour and byminute resulting in empty')
        # Applying the binary operator '+' (line 985)
        result_add_318140 = python_operator(stypy.reporting.localization.Localization(__file__, 985, 37), '+', str_318138, str_318139)
        
        str_318141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 37), 'str', ' rule.')
        # Applying the binary operator '+' (line 986)
        result_add_318142 = python_operator(stypy.reporting.localization.Localization(__file__, 986, 78), '+', result_add_318140, str_318141)
        
        # Processing the call keyword arguments (line 985)
        kwargs_318143 = {}
        # Getting the type of 'ValueError' (line 985)
        ValueError_318137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 985)
        ValueError_call_result_318144 = invoke(stypy.reporting.localization.Localization(__file__, 985, 26), ValueError_318137, *[result_add_318142], **kwargs_318143)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 985, 20), ValueError_call_result_318144, 'raise parameter', BaseException)
        # SSA join for if statement (line 984)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 989):
        
        # Assigning a Call to a Name (line 989):
        
        # Call to gettimeset(...): (line 989)
        # Processing the call arguments (line 989)
        # Getting the type of 'hour' (line 989)
        hour_318146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 37), 'hour', False)
        # Getting the type of 'minute' (line 989)
        minute_318147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 43), 'minute', False)
        # Getting the type of 'second' (line 989)
        second_318148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 51), 'second', False)
        # Processing the call keyword arguments (line 989)
        kwargs_318149 = {}
        # Getting the type of 'gettimeset' (line 989)
        gettimeset_318145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 26), 'gettimeset', False)
        # Calling gettimeset(args, kwargs) (line 989)
        gettimeset_call_result_318150 = invoke(stypy.reporting.localization.Localization(__file__, 989, 26), gettimeset_318145, *[hour_318146, minute_318147, second_318148], **kwargs_318149)
        
        # Assigning a type to the variable 'timeset' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 16), 'timeset', gettimeset_call_result_318150)
        # SSA join for if statement (line 953)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 922)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 905)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 902)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 895)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 882)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 876)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'fixday' (line 991)
        fixday_318151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 15), 'fixday')
        
        # Getting the type of 'day' (line 991)
        day_318152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 26), 'day')
        int_318153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, 32), 'int')
        # Applying the binary operator '>' (line 991)
        result_gt_318154 = python_operator(stypy.reporting.localization.Localization(__file__, 991, 26), '>', day_318152, int_318153)
        
        # Applying the binary operator 'and' (line 991)
        result_and_keyword_318155 = python_operator(stypy.reporting.localization.Localization(__file__, 991, 15), 'and', fixday_318151, result_gt_318154)
        
        # Testing the type of an if condition (line 991)
        if_condition_318156 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 991, 12), result_and_keyword_318155)
        # Assigning a type to the variable 'if_condition_318156' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 12), 'if_condition_318156', if_condition_318156)
        # SSA begins for if statement (line 991)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 992):
        
        # Assigning a Subscript to a Name (line 992):
        
        # Obtaining the type of the subscript
        int_318157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 63), 'int')
        
        # Call to monthrange(...): (line 992)
        # Processing the call arguments (line 992)
        # Getting the type of 'year' (line 992)
        year_318160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 50), 'year', False)
        # Getting the type of 'month' (line 992)
        month_318161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 56), 'month', False)
        # Processing the call keyword arguments (line 992)
        kwargs_318162 = {}
        # Getting the type of 'calendar' (line 992)
        calendar_318158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 30), 'calendar', False)
        # Obtaining the member 'monthrange' of a type (line 992)
        monthrange_318159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 30), calendar_318158, 'monthrange')
        # Calling monthrange(args, kwargs) (line 992)
        monthrange_call_result_318163 = invoke(stypy.reporting.localization.Localization(__file__, 992, 30), monthrange_318159, *[year_318160, month_318161], **kwargs_318162)
        
        # Obtaining the member '__getitem__' of a type (line 992)
        getitem___318164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 30), monthrange_call_result_318163, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 992)
        subscript_call_result_318165 = invoke(stypy.reporting.localization.Localization(__file__, 992, 30), getitem___318164, int_318157)
        
        # Assigning a type to the variable 'daysinmonth' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 16), 'daysinmonth', subscript_call_result_318165)
        
        
        # Getting the type of 'day' (line 993)
        day_318166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 19), 'day')
        # Getting the type of 'daysinmonth' (line 993)
        daysinmonth_318167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 25), 'daysinmonth')
        # Applying the binary operator '>' (line 993)
        result_gt_318168 = python_operator(stypy.reporting.localization.Localization(__file__, 993, 19), '>', day_318166, daysinmonth_318167)
        
        # Testing the type of an if condition (line 993)
        if_condition_318169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 993, 16), result_gt_318168)
        # Assigning a type to the variable 'if_condition_318169' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 16), 'if_condition_318169', if_condition_318169)
        # SSA begins for if statement (line 993)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'day' (line 994)
        day_318170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 26), 'day')
        # Getting the type of 'daysinmonth' (line 994)
        daysinmonth_318171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 32), 'daysinmonth')
        # Applying the binary operator '>' (line 994)
        result_gt_318172 = python_operator(stypy.reporting.localization.Localization(__file__, 994, 26), '>', day_318170, daysinmonth_318171)
        
        # Testing the type of an if condition (line 994)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 994, 20), result_gt_318172)
        # SSA begins for while statement (line 994)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Getting the type of 'day' (line 995)
        day_318173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 24), 'day')
        # Getting the type of 'daysinmonth' (line 995)
        daysinmonth_318174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 31), 'daysinmonth')
        # Applying the binary operator '-=' (line 995)
        result_isub_318175 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 24), '-=', day_318173, daysinmonth_318174)
        # Assigning a type to the variable 'day' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 24), 'day', result_isub_318175)
        
        
        # Getting the type of 'month' (line 996)
        month_318176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 24), 'month')
        int_318177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 33), 'int')
        # Applying the binary operator '+=' (line 996)
        result_iadd_318178 = python_operator(stypy.reporting.localization.Localization(__file__, 996, 24), '+=', month_318176, int_318177)
        # Assigning a type to the variable 'month' (line 996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 24), 'month', result_iadd_318178)
        
        
        
        # Getting the type of 'month' (line 997)
        month_318179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 27), 'month')
        int_318180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 36), 'int')
        # Applying the binary operator '==' (line 997)
        result_eq_318181 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 27), '==', month_318179, int_318180)
        
        # Testing the type of an if condition (line 997)
        if_condition_318182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 997, 24), result_eq_318181)
        # Assigning a type to the variable 'if_condition_318182' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 24), 'if_condition_318182', if_condition_318182)
        # SSA begins for if statement (line 997)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 998):
        
        # Assigning a Num to a Name (line 998):
        int_318183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 36), 'int')
        # Assigning a type to the variable 'month' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 28), 'month', int_318183)
        
        # Getting the type of 'year' (line 999)
        year_318184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 28), 'year')
        int_318185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 36), 'int')
        # Applying the binary operator '+=' (line 999)
        result_iadd_318186 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 28), '+=', year_318184, int_318185)
        # Assigning a type to the variable 'year' (line 999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 28), 'year', result_iadd_318186)
        
        
        
        # Getting the type of 'year' (line 1000)
        year_318187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 31), 'year')
        # Getting the type of 'datetime' (line 1000)
        datetime_318188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 38), 'datetime')
        # Obtaining the member 'MAXYEAR' of a type (line 1000)
        MAXYEAR_318189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 38), datetime_318188, 'MAXYEAR')
        # Applying the binary operator '>' (line 1000)
        result_gt_318190 = python_operator(stypy.reporting.localization.Localization(__file__, 1000, 31), '>', year_318187, MAXYEAR_318189)
        
        # Testing the type of an if condition (line 1000)
        if_condition_318191 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1000, 28), result_gt_318190)
        # Assigning a type to the variable 'if_condition_318191' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 28), 'if_condition_318191', if_condition_318191)
        # SSA begins for if statement (line 1000)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1001):
        
        # Assigning a Name to a Attribute (line 1001):
        # Getting the type of 'total' (line 1001)
        total_318192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 44), 'total')
        # Getting the type of 'self' (line 1001)
        self_318193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 32), 'self')
        # Setting the type of the member '_len' of a type (line 1001)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 32), self_318193, '_len', total_318192)
        # Assigning a type to the variable 'stypy_return_type' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 32), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1000)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 997)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1003):
        
        # Assigning a Subscript to a Name (line 1003):
        
        # Obtaining the type of the subscript
        int_318194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 71), 'int')
        
        # Call to monthrange(...): (line 1003)
        # Processing the call arguments (line 1003)
        # Getting the type of 'year' (line 1003)
        year_318197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 58), 'year', False)
        # Getting the type of 'month' (line 1003)
        month_318198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 64), 'month', False)
        # Processing the call keyword arguments (line 1003)
        kwargs_318199 = {}
        # Getting the type of 'calendar' (line 1003)
        calendar_318195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 38), 'calendar', False)
        # Obtaining the member 'monthrange' of a type (line 1003)
        monthrange_318196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 38), calendar_318195, 'monthrange')
        # Calling monthrange(args, kwargs) (line 1003)
        monthrange_call_result_318200 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 38), monthrange_318196, *[year_318197, month_318198], **kwargs_318199)
        
        # Obtaining the member '__getitem__' of a type (line 1003)
        getitem___318201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 38), monthrange_call_result_318200, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1003)
        subscript_call_result_318202 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 38), getitem___318201, int_318194)
        
        # Assigning a type to the variable 'daysinmonth' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 24), 'daysinmonth', subscript_call_result_318202)
        # SSA join for while statement (line 994)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to rebuild(...): (line 1004)
        # Processing the call arguments (line 1004)
        # Getting the type of 'year' (line 1004)
        year_318205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 31), 'year', False)
        # Getting the type of 'month' (line 1004)
        month_318206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 37), 'month', False)
        # Processing the call keyword arguments (line 1004)
        kwargs_318207 = {}
        # Getting the type of 'ii' (line 1004)
        ii_318203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 20), 'ii', False)
        # Obtaining the member 'rebuild' of a type (line 1004)
        rebuild_318204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 20), ii_318203, 'rebuild')
        # Calling rebuild(args, kwargs) (line 1004)
        rebuild_call_result_318208 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 20), rebuild_318204, *[year_318205, month_318206], **kwargs_318207)
        
        # SSA join for if statement (line 993)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 991)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 800)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_iter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter' in the type store
        # Getting the type of 'stypy_return_type' (line 750)
        stypy_return_type_318209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318209)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter'
        return stypy_return_type_318209


    @norecursion
    def __construct_byset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__construct_byset'
        module_type_store = module_type_store.open_function_context('__construct_byset', 1006, 4, False)
        # Assigning a type to the variable 'self' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrule.__construct_byset.__dict__.__setitem__('stypy_localization', localization)
        rrule.__construct_byset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrule.__construct_byset.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrule.__construct_byset.__dict__.__setitem__('stypy_function_name', 'rrule.__construct_byset')
        rrule.__construct_byset.__dict__.__setitem__('stypy_param_names_list', ['start', 'byxxx', 'base'])
        rrule.__construct_byset.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrule.__construct_byset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrule.__construct_byset.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrule.__construct_byset.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrule.__construct_byset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrule.__construct_byset.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrule.__construct_byset', ['start', 'byxxx', 'base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__construct_byset', localization, ['start', 'byxxx', 'base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__construct_byset(...)' code ##################

        str_318210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, (-1)), 'str', '\n        If a `BYXXX` sequence is passed to the constructor at the same level as\n        `FREQ` (e.g. `FREQ=HOURLY,BYHOUR={2,4,7},INTERVAL=3`), there are some\n        specifications which cannot be reached given some starting conditions.\n\n        This occurs whenever the interval is not coprime with the base of a\n        given unit and the difference between the starting position and the\n        ending position is not coprime with the greatest common denominator\n        between the interval and the base. For example, with a FREQ of hourly\n        starting at 17:00 and an interval of 4, the only valid values for\n        BYHOUR would be {21, 1, 5, 9, 13, 17}, because 4 and 24 are not\n        coprime.\n\n        :param start:\n            Specifies the starting position.\n        :param byxxx:\n            An iterable containing the list of allowed values.\n        :param base:\n            The largest allowable value for the specified frequency (e.g.\n            24 hours, 60 minutes).\n\n        This does not preserve the type of the iterable, returning a set, since\n        the values should be unique and the order is irrelevant, this will\n        speed up later lookups.\n\n        In the event of an empty set, raises a :exception:`ValueError`, as this\n        results in an empty rrule.\n        ')
        
        # Assigning a Call to a Name (line 1036):
        
        # Assigning a Call to a Name (line 1036):
        
        # Call to set(...): (line 1036)
        # Processing the call keyword arguments (line 1036)
        kwargs_318212 = {}
        # Getting the type of 'set' (line 1036)
        set_318211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 15), 'set', False)
        # Calling set(args, kwargs) (line 1036)
        set_call_result_318213 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 15), set_318211, *[], **kwargs_318212)
        
        # Assigning a type to the variable 'cset' (line 1036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'cset', set_call_result_318213)
        
        
        # Call to isinstance(...): (line 1039)
        # Processing the call arguments (line 1039)
        # Getting the type of 'byxxx' (line 1039)
        byxxx_318215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 22), 'byxxx', False)
        # Getting the type of 'integer_types' (line 1039)
        integer_types_318216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 29), 'integer_types', False)
        # Processing the call keyword arguments (line 1039)
        kwargs_318217 = {}
        # Getting the type of 'isinstance' (line 1039)
        isinstance_318214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1039)
        isinstance_call_result_318218 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 11), isinstance_318214, *[byxxx_318215, integer_types_318216], **kwargs_318217)
        
        # Testing the type of an if condition (line 1039)
        if_condition_318219 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1039, 8), isinstance_call_result_318218)
        # Assigning a type to the variable 'if_condition_318219' (line 1039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'if_condition_318219', if_condition_318219)
        # SSA begins for if statement (line 1039)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 1040):
        
        # Assigning a Tuple to a Name (line 1040):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1040)
        tuple_318220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1040)
        # Adding element type (line 1040)
        # Getting the type of 'byxxx' (line 1040)
        byxxx_318221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 21), 'byxxx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 21), tuple_318220, byxxx_318221)
        
        # Assigning a type to the variable 'byxxx' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 12), 'byxxx', tuple_318220)
        # SSA join for if statement (line 1039)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'byxxx' (line 1042)
        byxxx_318222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 19), 'byxxx')
        # Testing the type of a for loop iterable (line 1042)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1042, 8), byxxx_318222)
        # Getting the type of the for loop variable (line 1042)
        for_loop_var_318223 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1042, 8), byxxx_318222)
        # Assigning a type to the variable 'num' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'num', for_loop_var_318223)
        # SSA begins for a for statement (line 1042)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1043):
        
        # Assigning a Call to a Name (line 1043):
        
        # Call to gcd(...): (line 1043)
        # Processing the call arguments (line 1043)
        # Getting the type of 'self' (line 1043)
        self_318225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 24), 'self', False)
        # Obtaining the member '_interval' of a type (line 1043)
        _interval_318226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 24), self_318225, '_interval')
        # Getting the type of 'base' (line 1043)
        base_318227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 40), 'base', False)
        # Processing the call keyword arguments (line 1043)
        kwargs_318228 = {}
        # Getting the type of 'gcd' (line 1043)
        gcd_318224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 20), 'gcd', False)
        # Calling gcd(args, kwargs) (line 1043)
        gcd_call_result_318229 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 20), gcd_318224, *[_interval_318226, base_318227], **kwargs_318228)
        
        # Assigning a type to the variable 'i_gcd' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 12), 'i_gcd', gcd_call_result_318229)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i_gcd' (line 1045)
        i_gcd_318230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 15), 'i_gcd')
        int_318231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 24), 'int')
        # Applying the binary operator '==' (line 1045)
        result_eq_318232 = python_operator(stypy.reporting.localization.Localization(__file__, 1045, 15), '==', i_gcd_318230, int_318231)
        
        
        
        # Obtaining the type of the subscript
        int_318233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 56), 'int')
        
        # Call to divmod(...): (line 1045)
        # Processing the call arguments (line 1045)
        # Getting the type of 'num' (line 1045)
        num_318235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 36), 'num', False)
        # Getting the type of 'start' (line 1045)
        start_318236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 42), 'start', False)
        # Applying the binary operator '-' (line 1045)
        result_sub_318237 = python_operator(stypy.reporting.localization.Localization(__file__, 1045, 36), '-', num_318235, start_318236)
        
        # Getting the type of 'i_gcd' (line 1045)
        i_gcd_318238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 49), 'i_gcd', False)
        # Processing the call keyword arguments (line 1045)
        kwargs_318239 = {}
        # Getting the type of 'divmod' (line 1045)
        divmod_318234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 29), 'divmod', False)
        # Calling divmod(args, kwargs) (line 1045)
        divmod_call_result_318240 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 29), divmod_318234, *[result_sub_318237, i_gcd_318238], **kwargs_318239)
        
        # Obtaining the member '__getitem__' of a type (line 1045)
        getitem___318241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 29), divmod_call_result_318240, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1045)
        subscript_call_result_318242 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 29), getitem___318241, int_318233)
        
        int_318243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 62), 'int')
        # Applying the binary operator '==' (line 1045)
        result_eq_318244 = python_operator(stypy.reporting.localization.Localization(__file__, 1045, 29), '==', subscript_call_result_318242, int_318243)
        
        # Applying the binary operator 'or' (line 1045)
        result_or_keyword_318245 = python_operator(stypy.reporting.localization.Localization(__file__, 1045, 15), 'or', result_eq_318232, result_eq_318244)
        
        # Testing the type of an if condition (line 1045)
        if_condition_318246 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1045, 12), result_or_keyword_318245)
        # Assigning a type to the variable 'if_condition_318246' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 12), 'if_condition_318246', if_condition_318246)
        # SSA begins for if statement (line 1045)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add(...): (line 1046)
        # Processing the call arguments (line 1046)
        # Getting the type of 'num' (line 1046)
        num_318249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 25), 'num', False)
        # Processing the call keyword arguments (line 1046)
        kwargs_318250 = {}
        # Getting the type of 'cset' (line 1046)
        cset_318247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 16), 'cset', False)
        # Obtaining the member 'add' of a type (line 1046)
        add_318248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 16), cset_318247, 'add')
        # Calling add(args, kwargs) (line 1046)
        add_call_result_318251 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 16), add_318248, *[num_318249], **kwargs_318250)
        
        # SSA join for if statement (line 1045)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 1048)
        # Processing the call arguments (line 1048)
        # Getting the type of 'cset' (line 1048)
        cset_318253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 15), 'cset', False)
        # Processing the call keyword arguments (line 1048)
        kwargs_318254 = {}
        # Getting the type of 'len' (line 1048)
        len_318252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 11), 'len', False)
        # Calling len(args, kwargs) (line 1048)
        len_call_result_318255 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 11), len_318252, *[cset_318253], **kwargs_318254)
        
        int_318256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 24), 'int')
        # Applying the binary operator '==' (line 1048)
        result_eq_318257 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 11), '==', len_call_result_318255, int_318256)
        
        # Testing the type of an if condition (line 1048)
        if_condition_318258 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1048, 8), result_eq_318257)
        # Assigning a type to the variable 'if_condition_318258' (line 1048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), 'if_condition_318258', if_condition_318258)
        # SSA begins for if statement (line 1048)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1049)
        # Processing the call arguments (line 1049)
        str_318260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 29), 'str', 'Invalid rrule byxxx generates an empty set.')
        # Processing the call keyword arguments (line 1049)
        kwargs_318261 = {}
        # Getting the type of 'ValueError' (line 1049)
        ValueError_318259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1049)
        ValueError_call_result_318262 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 18), ValueError_318259, *[str_318260], **kwargs_318261)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1049, 12), ValueError_call_result_318262, 'raise parameter', BaseException)
        # SSA join for if statement (line 1048)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'cset' (line 1051)
        cset_318263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 15), 'cset')
        # Assigning a type to the variable 'stypy_return_type' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'stypy_return_type', cset_318263)
        
        # ################# End of '__construct_byset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__construct_byset' in the type store
        # Getting the type of 'stypy_return_type' (line 1006)
        stypy_return_type_318264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318264)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__construct_byset'
        return stypy_return_type_318264


    @norecursion
    def __mod_distance(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__mod_distance'
        module_type_store = module_type_store.open_function_context('__mod_distance', 1053, 4, False)
        # Assigning a type to the variable 'self' (line 1054)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rrule.__mod_distance.__dict__.__setitem__('stypy_localization', localization)
        rrule.__mod_distance.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rrule.__mod_distance.__dict__.__setitem__('stypy_type_store', module_type_store)
        rrule.__mod_distance.__dict__.__setitem__('stypy_function_name', 'rrule.__mod_distance')
        rrule.__mod_distance.__dict__.__setitem__('stypy_param_names_list', ['value', 'byxxx', 'base'])
        rrule.__mod_distance.__dict__.__setitem__('stypy_varargs_param_name', None)
        rrule.__mod_distance.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rrule.__mod_distance.__dict__.__setitem__('stypy_call_defaults', defaults)
        rrule.__mod_distance.__dict__.__setitem__('stypy_call_varargs', varargs)
        rrule.__mod_distance.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rrule.__mod_distance.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rrule.__mod_distance', ['value', 'byxxx', 'base'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__mod_distance', localization, ['value', 'byxxx', 'base'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__mod_distance(...)' code ##################

        str_318265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1076, (-1)), 'str', '\n        Calculates the next value in a sequence where the `FREQ` parameter is\n        specified along with a `BYXXX` parameter at the same "level"\n        (e.g. `HOURLY` specified with `BYHOUR`).\n\n        :param value:\n            The old value of the component.\n        :param byxxx:\n            The `BYXXX` set, which should have been generated by\n            `rrule._construct_byset`, or something else which checks that a\n            valid rule is present.\n        :param base:\n            The largest allowable value for the specified frequency (e.g.\n            24 hours, 60 minutes).\n\n        If a valid value is not found after `base` iterations (the maximum\n        number before the sequence would start to repeat), this raises a\n        :exception:`ValueError`, as no valid values were found.\n\n        This returns a tuple of `divmod(n*interval, base)`, where `n` is the\n        smallest number of `interval` repetitions until the next specified\n        value in `byxxx` is found.\n        ')
        
        # Assigning a Num to a Name (line 1077):
        
        # Assigning a Num to a Name (line 1077):
        int_318266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 22), 'int')
        # Assigning a type to the variable 'accumulator' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 8), 'accumulator', int_318266)
        
        
        # Call to range(...): (line 1078)
        # Processing the call arguments (line 1078)
        int_318268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 24), 'int')
        # Getting the type of 'base' (line 1078)
        base_318269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 27), 'base', False)
        int_318270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 34), 'int')
        # Applying the binary operator '+' (line 1078)
        result_add_318271 = python_operator(stypy.reporting.localization.Localization(__file__, 1078, 27), '+', base_318269, int_318270)
        
        # Processing the call keyword arguments (line 1078)
        kwargs_318272 = {}
        # Getting the type of 'range' (line 1078)
        range_318267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 18), 'range', False)
        # Calling range(args, kwargs) (line 1078)
        range_call_result_318273 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 18), range_318267, *[int_318268, result_add_318271], **kwargs_318272)
        
        # Testing the type of a for loop iterable (line 1078)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1078, 8), range_call_result_318273)
        # Getting the type of the for loop variable (line 1078)
        for_loop_var_318274 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1078, 8), range_call_result_318273)
        # Assigning a type to the variable 'ii' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 8), 'ii', for_loop_var_318274)
        # SSA begins for a for statement (line 1078)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 1080):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 1080)
        # Processing the call arguments (line 1080)
        # Getting the type of 'value' (line 1080)
        value_318276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 32), 'value', False)
        # Getting the type of 'self' (line 1080)
        self_318277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 40), 'self', False)
        # Obtaining the member '_interval' of a type (line 1080)
        _interval_318278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 40), self_318277, '_interval')
        # Applying the binary operator '+' (line 1080)
        result_add_318279 = python_operator(stypy.reporting.localization.Localization(__file__, 1080, 32), '+', value_318276, _interval_318278)
        
        # Getting the type of 'base' (line 1080)
        base_318280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 56), 'base', False)
        # Processing the call keyword arguments (line 1080)
        kwargs_318281 = {}
        # Getting the type of 'divmod' (line 1080)
        divmod_318275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 25), 'divmod', False)
        # Calling divmod(args, kwargs) (line 1080)
        divmod_call_result_318282 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 25), divmod_318275, *[result_add_318279, base_318280], **kwargs_318281)
        
        # Assigning a type to the variable 'call_assignment_315121' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'call_assignment_315121', divmod_call_result_318282)
        
        # Assigning a Call to a Name (line 1080):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 12), 'int')
        # Processing the call keyword arguments
        kwargs_318286 = {}
        # Getting the type of 'call_assignment_315121' (line 1080)
        call_assignment_315121_318283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'call_assignment_315121', False)
        # Obtaining the member '__getitem__' of a type (line 1080)
        getitem___318284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 12), call_assignment_315121_318283, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318287 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318284, *[int_318285], **kwargs_318286)
        
        # Assigning a type to the variable 'call_assignment_315122' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'call_assignment_315122', getitem___call_result_318287)
        
        # Assigning a Name to a Name (line 1080):
        # Getting the type of 'call_assignment_315122' (line 1080)
        call_assignment_315122_318288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'call_assignment_315122')
        # Assigning a type to the variable 'div' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'div', call_assignment_315122_318288)
        
        # Assigning a Call to a Name (line 1080):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 12), 'int')
        # Processing the call keyword arguments
        kwargs_318292 = {}
        # Getting the type of 'call_assignment_315121' (line 1080)
        call_assignment_315121_318289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'call_assignment_315121', False)
        # Obtaining the member '__getitem__' of a type (line 1080)
        getitem___318290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 12), call_assignment_315121_318289, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318293 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318290, *[int_318291], **kwargs_318292)
        
        # Assigning a type to the variable 'call_assignment_315123' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'call_assignment_315123', getitem___call_result_318293)
        
        # Assigning a Name to a Name (line 1080):
        # Getting the type of 'call_assignment_315123' (line 1080)
        call_assignment_315123_318294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'call_assignment_315123')
        # Assigning a type to the variable 'value' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 17), 'value', call_assignment_315123_318294)
        
        # Getting the type of 'accumulator' (line 1081)
        accumulator_318295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 12), 'accumulator')
        # Getting the type of 'div' (line 1081)
        div_318296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 27), 'div')
        # Applying the binary operator '+=' (line 1081)
        result_iadd_318297 = python_operator(stypy.reporting.localization.Localization(__file__, 1081, 12), '+=', accumulator_318295, div_318296)
        # Assigning a type to the variable 'accumulator' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 12), 'accumulator', result_iadd_318297)
        
        
        
        # Getting the type of 'value' (line 1082)
        value_318298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 15), 'value')
        # Getting the type of 'byxxx' (line 1082)
        byxxx_318299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 24), 'byxxx')
        # Applying the binary operator 'in' (line 1082)
        result_contains_318300 = python_operator(stypy.reporting.localization.Localization(__file__, 1082, 15), 'in', value_318298, byxxx_318299)
        
        # Testing the type of an if condition (line 1082)
        if_condition_318301 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1082, 12), result_contains_318300)
        # Assigning a type to the variable 'if_condition_318301' (line 1082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 12), 'if_condition_318301', if_condition_318301)
        # SSA begins for if statement (line 1082)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1083)
        tuple_318302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1083)
        # Adding element type (line 1083)
        # Getting the type of 'accumulator' (line 1083)
        accumulator_318303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 24), 'accumulator')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 24), tuple_318302, accumulator_318303)
        # Adding element type (line 1083)
        # Getting the type of 'value' (line 1083)
        value_318304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 37), 'value')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1083, 24), tuple_318302, value_318304)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 16), 'stypy_return_type', tuple_318302)
        # SSA join for if statement (line 1082)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__mod_distance(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__mod_distance' in the type store
        # Getting the type of 'stypy_return_type' (line 1053)
        stypy_return_type_318305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318305)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__mod_distance'
        return stypy_return_type_318305


# Assigning a type to the variable 'rrule' (line 302)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 0), 'rrule', rrule)
# Declaration of the '_iterinfo' class

class _iterinfo(object, ):
    
    # Assigning a List to a Name (line 1087):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1092, 4, False)
        # Assigning a type to the variable 'self' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.__init__', ['rrule'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['rrule'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Getting the type of 'self' (line 1093)
        self_318306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 20), 'self')
        # Obtaining the member '__slots__' of a type (line 1093)
        slots___318307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 20), self_318306, '__slots__')
        # Testing the type of a for loop iterable (line 1093)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1093, 8), slots___318307)
        # Getting the type of the for loop variable (line 1093)
        for_loop_var_318308 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1093, 8), slots___318307)
        # Assigning a type to the variable 'attr' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'attr', for_loop_var_318308)
        # SSA begins for a for statement (line 1093)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 1094)
        # Processing the call arguments (line 1094)
        # Getting the type of 'self' (line 1094)
        self_318310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 20), 'self', False)
        # Getting the type of 'attr' (line 1094)
        attr_318311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 26), 'attr', False)
        # Getting the type of 'None' (line 1094)
        None_318312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 32), 'None', False)
        # Processing the call keyword arguments (line 1094)
        kwargs_318313 = {}
        # Getting the type of 'setattr' (line 1094)
        setattr_318309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 1094)
        setattr_call_result_318314 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 12), setattr_318309, *[self_318310, attr_318311, None_318312], **kwargs_318313)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1095):
        
        # Assigning a Name to a Attribute (line 1095):
        # Getting the type of 'rrule' (line 1095)
        rrule_318315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 21), 'rrule')
        # Getting the type of 'self' (line 1095)
        self_318316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 8), 'self')
        # Setting the type of the member 'rrule' of a type (line 1095)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 8), self_318316, 'rrule', rrule_318315)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def rebuild(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rebuild'
        module_type_store = module_type_store.open_function_context('rebuild', 1097, 4, False)
        # Assigning a type to the variable 'self' (line 1098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _iterinfo.rebuild.__dict__.__setitem__('stypy_localization', localization)
        _iterinfo.rebuild.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _iterinfo.rebuild.__dict__.__setitem__('stypy_type_store', module_type_store)
        _iterinfo.rebuild.__dict__.__setitem__('stypy_function_name', '_iterinfo.rebuild')
        _iterinfo.rebuild.__dict__.__setitem__('stypy_param_names_list', ['year', 'month'])
        _iterinfo.rebuild.__dict__.__setitem__('stypy_varargs_param_name', None)
        _iterinfo.rebuild.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _iterinfo.rebuild.__dict__.__setitem__('stypy_call_defaults', defaults)
        _iterinfo.rebuild.__dict__.__setitem__('stypy_call_varargs', varargs)
        _iterinfo.rebuild.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _iterinfo.rebuild.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.rebuild', ['year', 'month'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rebuild', localization, ['year', 'month'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rebuild(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1099):
        
        # Assigning a Attribute to a Name (line 1099):
        # Getting the type of 'self' (line 1099)
        self_318317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 13), 'self')
        # Obtaining the member 'rrule' of a type (line 1099)
        rrule_318318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 13), self_318317, 'rrule')
        # Assigning a type to the variable 'rr' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 8), 'rr', rrule_318318)
        
        
        # Getting the type of 'year' (line 1100)
        year_318319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 11), 'year')
        # Getting the type of 'self' (line 1100)
        self_318320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 19), 'self')
        # Obtaining the member 'lastyear' of a type (line 1100)
        lastyear_318321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1100, 19), self_318320, 'lastyear')
        # Applying the binary operator '!=' (line 1100)
        result_ne_318322 = python_operator(stypy.reporting.localization.Localization(__file__, 1100, 11), '!=', year_318319, lastyear_318321)
        
        # Testing the type of an if condition (line 1100)
        if_condition_318323 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1100, 8), result_ne_318322)
        # Assigning a type to the variable 'if_condition_318323' (line 1100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1100, 8), 'if_condition_318323', if_condition_318323)
        # SSA begins for if statement (line 1100)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1101):
        
        # Assigning a BinOp to a Attribute (line 1101):
        int_318324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 27), 'int')
        
        # Call to isleap(...): (line 1101)
        # Processing the call arguments (line 1101)
        # Getting the type of 'year' (line 1101)
        year_318327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 49), 'year', False)
        # Processing the call keyword arguments (line 1101)
        kwargs_318328 = {}
        # Getting the type of 'calendar' (line 1101)
        calendar_318325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 33), 'calendar', False)
        # Obtaining the member 'isleap' of a type (line 1101)
        isleap_318326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 33), calendar_318325, 'isleap')
        # Calling isleap(args, kwargs) (line 1101)
        isleap_call_result_318329 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 33), isleap_318326, *[year_318327], **kwargs_318328)
        
        # Applying the binary operator '+' (line 1101)
        result_add_318330 = python_operator(stypy.reporting.localization.Localization(__file__, 1101, 27), '+', int_318324, isleap_call_result_318329)
        
        # Getting the type of 'self' (line 1101)
        self_318331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 12), 'self')
        # Setting the type of the member 'yearlen' of a type (line 1101)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 12), self_318331, 'yearlen', result_add_318330)
        
        # Assigning a BinOp to a Attribute (line 1102):
        
        # Assigning a BinOp to a Attribute (line 1102):
        int_318332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 31), 'int')
        
        # Call to isleap(...): (line 1102)
        # Processing the call arguments (line 1102)
        # Getting the type of 'year' (line 1102)
        year_318335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 53), 'year', False)
        int_318336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 60), 'int')
        # Applying the binary operator '+' (line 1102)
        result_add_318337 = python_operator(stypy.reporting.localization.Localization(__file__, 1102, 53), '+', year_318335, int_318336)
        
        # Processing the call keyword arguments (line 1102)
        kwargs_318338 = {}
        # Getting the type of 'calendar' (line 1102)
        calendar_318333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 37), 'calendar', False)
        # Obtaining the member 'isleap' of a type (line 1102)
        isleap_318334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 37), calendar_318333, 'isleap')
        # Calling isleap(args, kwargs) (line 1102)
        isleap_call_result_318339 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 37), isleap_318334, *[result_add_318337], **kwargs_318338)
        
        # Applying the binary operator '+' (line 1102)
        result_add_318340 = python_operator(stypy.reporting.localization.Localization(__file__, 1102, 31), '+', int_318332, isleap_call_result_318339)
        
        # Getting the type of 'self' (line 1102)
        self_318341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 12), 'self')
        # Setting the type of the member 'nextyearlen' of a type (line 1102)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 12), self_318341, 'nextyearlen', result_add_318340)
        
        # Assigning a Call to a Name (line 1103):
        
        # Assigning a Call to a Name (line 1103):
        
        # Call to date(...): (line 1103)
        # Processing the call arguments (line 1103)
        # Getting the type of 'year' (line 1103)
        year_318344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 38), 'year', False)
        int_318345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 44), 'int')
        int_318346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 47), 'int')
        # Processing the call keyword arguments (line 1103)
        kwargs_318347 = {}
        # Getting the type of 'datetime' (line 1103)
        datetime_318342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 24), 'datetime', False)
        # Obtaining the member 'date' of a type (line 1103)
        date_318343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 24), datetime_318342, 'date')
        # Calling date(args, kwargs) (line 1103)
        date_call_result_318348 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 24), date_318343, *[year_318344, int_318345, int_318346], **kwargs_318347)
        
        # Assigning a type to the variable 'firstyday' (line 1103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 12), 'firstyday', date_call_result_318348)
        
        # Assigning a Call to a Attribute (line 1104):
        
        # Assigning a Call to a Attribute (line 1104):
        
        # Call to toordinal(...): (line 1104)
        # Processing the call keyword arguments (line 1104)
        kwargs_318351 = {}
        # Getting the type of 'firstyday' (line 1104)
        firstyday_318349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 31), 'firstyday', False)
        # Obtaining the member 'toordinal' of a type (line 1104)
        toordinal_318350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 31), firstyday_318349, 'toordinal')
        # Calling toordinal(args, kwargs) (line 1104)
        toordinal_call_result_318352 = invoke(stypy.reporting.localization.Localization(__file__, 1104, 31), toordinal_318350, *[], **kwargs_318351)
        
        # Getting the type of 'self' (line 1104)
        self_318353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 12), 'self')
        # Setting the type of the member 'yearordinal' of a type (line 1104)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 12), self_318353, 'yearordinal', toordinal_call_result_318352)
        
        # Assigning a Call to a Attribute (line 1105):
        
        # Assigning a Call to a Attribute (line 1105):
        
        # Call to weekday(...): (line 1105)
        # Processing the call keyword arguments (line 1105)
        kwargs_318356 = {}
        # Getting the type of 'firstyday' (line 1105)
        firstyday_318354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 31), 'firstyday', False)
        # Obtaining the member 'weekday' of a type (line 1105)
        weekday_318355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 31), firstyday_318354, 'weekday')
        # Calling weekday(args, kwargs) (line 1105)
        weekday_call_result_318357 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 31), weekday_318355, *[], **kwargs_318356)
        
        # Getting the type of 'self' (line 1105)
        self_318358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 12), 'self')
        # Setting the type of the member 'yearweekday' of a type (line 1105)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 12), self_318358, 'yearweekday', weekday_call_result_318357)
        
        # Assigning a Call to a Name (line 1107):
        
        # Assigning a Call to a Name (line 1107):
        
        # Call to weekday(...): (line 1107)
        # Processing the call keyword arguments (line 1107)
        kwargs_318367 = {}
        
        # Call to date(...): (line 1107)
        # Processing the call arguments (line 1107)
        # Getting the type of 'year' (line 1107)
        year_318361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 33), 'year', False)
        int_318362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 39), 'int')
        int_318363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 42), 'int')
        # Processing the call keyword arguments (line 1107)
        kwargs_318364 = {}
        # Getting the type of 'datetime' (line 1107)
        datetime_318359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 19), 'datetime', False)
        # Obtaining the member 'date' of a type (line 1107)
        date_318360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 19), datetime_318359, 'date')
        # Calling date(args, kwargs) (line 1107)
        date_call_result_318365 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 19), date_318360, *[year_318361, int_318362, int_318363], **kwargs_318364)
        
        # Obtaining the member 'weekday' of a type (line 1107)
        weekday_318366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 19), date_call_result_318365, 'weekday')
        # Calling weekday(args, kwargs) (line 1107)
        weekday_call_result_318368 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 19), weekday_318366, *[], **kwargs_318367)
        
        # Assigning a type to the variable 'wday' (line 1107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 12), 'wday', weekday_call_result_318368)
        
        
        # Getting the type of 'self' (line 1108)
        self_318369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 15), 'self')
        # Obtaining the member 'yearlen' of a type (line 1108)
        yearlen_318370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 15), self_318369, 'yearlen')
        int_318371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 31), 'int')
        # Applying the binary operator '==' (line 1108)
        result_eq_318372 = python_operator(stypy.reporting.localization.Localization(__file__, 1108, 15), '==', yearlen_318370, int_318371)
        
        # Testing the type of an if condition (line 1108)
        if_condition_318373 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1108, 12), result_eq_318372)
        # Assigning a type to the variable 'if_condition_318373' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 12), 'if_condition_318373', if_condition_318373)
        # SSA begins for if statement (line 1108)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1109):
        
        # Assigning a Name to a Attribute (line 1109):
        # Getting the type of 'M365MASK' (line 1109)
        M365MASK_318374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 29), 'M365MASK')
        # Getting the type of 'self' (line 1109)
        self_318375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 16), 'self')
        # Setting the type of the member 'mmask' of a type (line 1109)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 16), self_318375, 'mmask', M365MASK_318374)
        
        # Assigning a Name to a Attribute (line 1110):
        
        # Assigning a Name to a Attribute (line 1110):
        # Getting the type of 'MDAY365MASK' (line 1110)
        MDAY365MASK_318376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 32), 'MDAY365MASK')
        # Getting the type of 'self' (line 1110)
        self_318377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 16), 'self')
        # Setting the type of the member 'mdaymask' of a type (line 1110)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 16), self_318377, 'mdaymask', MDAY365MASK_318376)
        
        # Assigning a Name to a Attribute (line 1111):
        
        # Assigning a Name to a Attribute (line 1111):
        # Getting the type of 'NMDAY365MASK' (line 1111)
        NMDAY365MASK_318378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 33), 'NMDAY365MASK')
        # Getting the type of 'self' (line 1111)
        self_318379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 16), 'self')
        # Setting the type of the member 'nmdaymask' of a type (line 1111)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1111, 16), self_318379, 'nmdaymask', NMDAY365MASK_318378)
        
        # Assigning a Subscript to a Attribute (line 1112):
        
        # Assigning a Subscript to a Attribute (line 1112):
        
        # Obtaining the type of the subscript
        # Getting the type of 'wday' (line 1112)
        wday_318380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 41), 'wday')
        slice_318381 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1112, 32), wday_318380, None, None)
        # Getting the type of 'WDAYMASK' (line 1112)
        WDAYMASK_318382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 32), 'WDAYMASK')
        # Obtaining the member '__getitem__' of a type (line 1112)
        getitem___318383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 32), WDAYMASK_318382, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1112)
        subscript_call_result_318384 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 32), getitem___318383, slice_318381)
        
        # Getting the type of 'self' (line 1112)
        self_318385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 16), 'self')
        # Setting the type of the member 'wdaymask' of a type (line 1112)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 16), self_318385, 'wdaymask', subscript_call_result_318384)
        
        # Assigning a Name to a Attribute (line 1113):
        
        # Assigning a Name to a Attribute (line 1113):
        # Getting the type of 'M365RANGE' (line 1113)
        M365RANGE_318386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 30), 'M365RANGE')
        # Getting the type of 'self' (line 1113)
        self_318387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 16), 'self')
        # Setting the type of the member 'mrange' of a type (line 1113)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 16), self_318387, 'mrange', M365RANGE_318386)
        # SSA branch for the else part of an if statement (line 1108)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 1115):
        
        # Assigning a Name to a Attribute (line 1115):
        # Getting the type of 'M366MASK' (line 1115)
        M366MASK_318388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 29), 'M366MASK')
        # Getting the type of 'self' (line 1115)
        self_318389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 16), 'self')
        # Setting the type of the member 'mmask' of a type (line 1115)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 16), self_318389, 'mmask', M366MASK_318388)
        
        # Assigning a Name to a Attribute (line 1116):
        
        # Assigning a Name to a Attribute (line 1116):
        # Getting the type of 'MDAY366MASK' (line 1116)
        MDAY366MASK_318390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 32), 'MDAY366MASK')
        # Getting the type of 'self' (line 1116)
        self_318391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 16), 'self')
        # Setting the type of the member 'mdaymask' of a type (line 1116)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 16), self_318391, 'mdaymask', MDAY366MASK_318390)
        
        # Assigning a Name to a Attribute (line 1117):
        
        # Assigning a Name to a Attribute (line 1117):
        # Getting the type of 'NMDAY366MASK' (line 1117)
        NMDAY366MASK_318392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 33), 'NMDAY366MASK')
        # Getting the type of 'self' (line 1117)
        self_318393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 16), 'self')
        # Setting the type of the member 'nmdaymask' of a type (line 1117)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 16), self_318393, 'nmdaymask', NMDAY366MASK_318392)
        
        # Assigning a Subscript to a Attribute (line 1118):
        
        # Assigning a Subscript to a Attribute (line 1118):
        
        # Obtaining the type of the subscript
        # Getting the type of 'wday' (line 1118)
        wday_318394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 41), 'wday')
        slice_318395 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1118, 32), wday_318394, None, None)
        # Getting the type of 'WDAYMASK' (line 1118)
        WDAYMASK_318396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 32), 'WDAYMASK')
        # Obtaining the member '__getitem__' of a type (line 1118)
        getitem___318397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 32), WDAYMASK_318396, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1118)
        subscript_call_result_318398 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 32), getitem___318397, slice_318395)
        
        # Getting the type of 'self' (line 1118)
        self_318399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 16), 'self')
        # Setting the type of the member 'wdaymask' of a type (line 1118)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 16), self_318399, 'wdaymask', subscript_call_result_318398)
        
        # Assigning a Name to a Attribute (line 1119):
        
        # Assigning a Name to a Attribute (line 1119):
        # Getting the type of 'M366RANGE' (line 1119)
        M366RANGE_318400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 30), 'M366RANGE')
        # Getting the type of 'self' (line 1119)
        self_318401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 16), 'self')
        # Setting the type of the member 'mrange' of a type (line 1119)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 16), self_318401, 'mrange', M366RANGE_318400)
        # SSA join for if statement (line 1108)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'rr' (line 1121)
        rr_318402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 19), 'rr')
        # Obtaining the member '_byweekno' of a type (line 1121)
        _byweekno_318403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 19), rr_318402, '_byweekno')
        # Applying the 'not' unary operator (line 1121)
        result_not__318404 = python_operator(stypy.reporting.localization.Localization(__file__, 1121, 15), 'not', _byweekno_318403)
        
        # Testing the type of an if condition (line 1121)
        if_condition_318405 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1121, 12), result_not__318404)
        # Assigning a type to the variable 'if_condition_318405' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 12), 'if_condition_318405', if_condition_318405)
        # SSA begins for if statement (line 1121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1122):
        
        # Assigning a Name to a Attribute (line 1122):
        # Getting the type of 'None' (line 1122)
        None_318406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 31), 'None')
        # Getting the type of 'self' (line 1122)
        self_318407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 16), 'self')
        # Setting the type of the member 'wnomask' of a type (line 1122)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 16), self_318407, 'wnomask', None_318406)
        # SSA branch for the else part of an if statement (line 1121)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Attribute (line 1124):
        
        # Assigning a BinOp to a Attribute (line 1124):
        
        # Obtaining an instance of the builtin type 'list' (line 1124)
        list_318408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1124)
        # Adding element type (line 1124)
        int_318409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 32), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 31), list_318408, int_318409)
        
        # Getting the type of 'self' (line 1124)
        self_318410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 36), 'self')
        # Obtaining the member 'yearlen' of a type (line 1124)
        yearlen_318411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 36), self_318410, 'yearlen')
        int_318412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 49), 'int')
        # Applying the binary operator '+' (line 1124)
        result_add_318413 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 36), '+', yearlen_318411, int_318412)
        
        # Applying the binary operator '*' (line 1124)
        result_mul_318414 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 31), '*', list_318408, result_add_318413)
        
        # Getting the type of 'self' (line 1124)
        self_318415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 16), 'self')
        # Setting the type of the member 'wnomask' of a type (line 1124)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 16), self_318415, 'wnomask', result_mul_318414)
        
        # Multiple assignment of 2 elements.
        
        # Assigning a BinOp to a Name (line 1126):
        int_318416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 39), 'int')
        # Getting the type of 'self' (line 1126)
        self_318417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 41), 'self')
        # Obtaining the member 'yearweekday' of a type (line 1126)
        yearweekday_318418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 41), self_318417, 'yearweekday')
        # Applying the binary operator '-' (line 1126)
        result_sub_318419 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 39), '-', int_318416, yearweekday_318418)
        
        # Getting the type of 'rr' (line 1126)
        rr_318420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 58), 'rr')
        # Obtaining the member '_wkst' of a type (line 1126)
        _wkst_318421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 58), rr_318420, '_wkst')
        # Applying the binary operator '+' (line 1126)
        result_add_318422 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 57), '+', result_sub_318419, _wkst_318421)
        
        int_318423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 70), 'int')
        # Applying the binary operator '%' (line 1126)
        result_mod_318424 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 38), '%', result_add_318422, int_318423)
        
        # Assigning a type to the variable 'firstwkst' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 26), 'firstwkst', result_mod_318424)
        
        # Assigning a Name to a Name (line 1126):
        # Getting the type of 'firstwkst' (line 1126)
        firstwkst_318425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 26), 'firstwkst')
        # Assigning a type to the variable 'no1wkst' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 16), 'no1wkst', firstwkst_318425)
        
        
        # Getting the type of 'no1wkst' (line 1127)
        no1wkst_318426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 19), 'no1wkst')
        int_318427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 30), 'int')
        # Applying the binary operator '>=' (line 1127)
        result_ge_318428 = python_operator(stypy.reporting.localization.Localization(__file__, 1127, 19), '>=', no1wkst_318426, int_318427)
        
        # Testing the type of an if condition (line 1127)
        if_condition_318429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1127, 16), result_ge_318428)
        # Assigning a type to the variable 'if_condition_318429' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 16), 'if_condition_318429', if_condition_318429)
        # SSA begins for if statement (line 1127)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1128):
        
        # Assigning a Num to a Name (line 1128):
        int_318430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 30), 'int')
        # Assigning a type to the variable 'no1wkst' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 20), 'no1wkst', int_318430)
        
        # Assigning a BinOp to a Name (line 1131):
        
        # Assigning a BinOp to a Name (line 1131):
        # Getting the type of 'self' (line 1131)
        self_318431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 31), 'self')
        # Obtaining the member 'yearlen' of a type (line 1131)
        yearlen_318432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 31), self_318431, 'yearlen')
        # Getting the type of 'self' (line 1131)
        self_318433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 45), 'self')
        # Obtaining the member 'yearweekday' of a type (line 1131)
        yearweekday_318434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 45), self_318433, 'yearweekday')
        # Getting the type of 'rr' (line 1131)
        rr_318435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 62), 'rr')
        # Obtaining the member '_wkst' of a type (line 1131)
        _wkst_318436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 62), rr_318435, '_wkst')
        # Applying the binary operator '-' (line 1131)
        result_sub_318437 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 45), '-', yearweekday_318434, _wkst_318436)
        
        int_318438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, 74), 'int')
        # Applying the binary operator '%' (line 1131)
        result_mod_318439 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 44), '%', result_sub_318437, int_318438)
        
        # Applying the binary operator '+' (line 1131)
        result_add_318440 = python_operator(stypy.reporting.localization.Localization(__file__, 1131, 31), '+', yearlen_318432, result_mod_318439)
        
        # Assigning a type to the variable 'wyearlen' (line 1131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 20), 'wyearlen', result_add_318440)
        # SSA branch for the else part of an if statement (line 1127)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1135):
        
        # Assigning a BinOp to a Name (line 1135):
        # Getting the type of 'self' (line 1135)
        self_318441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 31), 'self')
        # Obtaining the member 'yearlen' of a type (line 1135)
        yearlen_318442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 31), self_318441, 'yearlen')
        # Getting the type of 'no1wkst' (line 1135)
        no1wkst_318443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 44), 'no1wkst')
        # Applying the binary operator '-' (line 1135)
        result_sub_318444 = python_operator(stypy.reporting.localization.Localization(__file__, 1135, 31), '-', yearlen_318442, no1wkst_318443)
        
        # Assigning a type to the variable 'wyearlen' (line 1135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 20), 'wyearlen', result_sub_318444)
        # SSA join for if statement (line 1127)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1136):
        
        # Assigning a Call to a Name:
        
        # Call to divmod(...): (line 1136)
        # Processing the call arguments (line 1136)
        # Getting the type of 'wyearlen' (line 1136)
        wyearlen_318446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 34), 'wyearlen', False)
        int_318447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 44), 'int')
        # Processing the call keyword arguments (line 1136)
        kwargs_318448 = {}
        # Getting the type of 'divmod' (line 1136)
        divmod_318445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 27), 'divmod', False)
        # Calling divmod(args, kwargs) (line 1136)
        divmod_call_result_318449 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 27), divmod_318445, *[wyearlen_318446, int_318447], **kwargs_318448)
        
        # Assigning a type to the variable 'call_assignment_315124' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 16), 'call_assignment_315124', divmod_call_result_318449)
        
        # Assigning a Call to a Name (line 1136):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 16), 'int')
        # Processing the call keyword arguments
        kwargs_318453 = {}
        # Getting the type of 'call_assignment_315124' (line 1136)
        call_assignment_315124_318450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 16), 'call_assignment_315124', False)
        # Obtaining the member '__getitem__' of a type (line 1136)
        getitem___318451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 16), call_assignment_315124_318450, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318454 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318451, *[int_318452], **kwargs_318453)
        
        # Assigning a type to the variable 'call_assignment_315125' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 16), 'call_assignment_315125', getitem___call_result_318454)
        
        # Assigning a Name to a Name (line 1136):
        # Getting the type of 'call_assignment_315125' (line 1136)
        call_assignment_315125_318455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 16), 'call_assignment_315125')
        # Assigning a type to the variable 'div' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 16), 'div', call_assignment_315125_318455)
        
        # Assigning a Call to a Name (line 1136):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_318458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 16), 'int')
        # Processing the call keyword arguments
        kwargs_318459 = {}
        # Getting the type of 'call_assignment_315124' (line 1136)
        call_assignment_315124_318456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 16), 'call_assignment_315124', False)
        # Obtaining the member '__getitem__' of a type (line 1136)
        getitem___318457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 16), call_assignment_315124_318456, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_318460 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___318457, *[int_318458], **kwargs_318459)
        
        # Assigning a type to the variable 'call_assignment_315126' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 16), 'call_assignment_315126', getitem___call_result_318460)
        
        # Assigning a Name to a Name (line 1136):
        # Getting the type of 'call_assignment_315126' (line 1136)
        call_assignment_315126_318461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 16), 'call_assignment_315126')
        # Assigning a type to the variable 'mod' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 21), 'mod', call_assignment_315126_318461)
        
        # Assigning a BinOp to a Name (line 1137):
        
        # Assigning a BinOp to a Name (line 1137):
        # Getting the type of 'div' (line 1137)
        div_318462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 27), 'div')
        # Getting the type of 'mod' (line 1137)
        mod_318463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 31), 'mod')
        int_318464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 36), 'int')
        # Applying the binary operator '//' (line 1137)
        result_floordiv_318465 = python_operator(stypy.reporting.localization.Localization(__file__, 1137, 31), '//', mod_318463, int_318464)
        
        # Applying the binary operator '+' (line 1137)
        result_add_318466 = python_operator(stypy.reporting.localization.Localization(__file__, 1137, 27), '+', div_318462, result_floordiv_318465)
        
        # Assigning a type to the variable 'numweeks' (line 1137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 16), 'numweeks', result_add_318466)
        
        # Getting the type of 'rr' (line 1138)
        rr_318467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 25), 'rr')
        # Obtaining the member '_byweekno' of a type (line 1138)
        _byweekno_318468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 25), rr_318467, '_byweekno')
        # Testing the type of a for loop iterable (line 1138)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1138, 16), _byweekno_318468)
        # Getting the type of the for loop variable (line 1138)
        for_loop_var_318469 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1138, 16), _byweekno_318468)
        # Assigning a type to the variable 'n' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 16), 'n', for_loop_var_318469)
        # SSA begins for a for statement (line 1138)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'n' (line 1139)
        n_318470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 23), 'n')
        int_318471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1139, 27), 'int')
        # Applying the binary operator '<' (line 1139)
        result_lt_318472 = python_operator(stypy.reporting.localization.Localization(__file__, 1139, 23), '<', n_318470, int_318471)
        
        # Testing the type of an if condition (line 1139)
        if_condition_318473 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1139, 20), result_lt_318472)
        # Assigning a type to the variable 'if_condition_318473' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 20), 'if_condition_318473', if_condition_318473)
        # SSA begins for if statement (line 1139)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'n' (line 1140)
        n_318474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 24), 'n')
        # Getting the type of 'numweeks' (line 1140)
        numweeks_318475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 29), 'numweeks')
        int_318476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 38), 'int')
        # Applying the binary operator '+' (line 1140)
        result_add_318477 = python_operator(stypy.reporting.localization.Localization(__file__, 1140, 29), '+', numweeks_318475, int_318476)
        
        # Applying the binary operator '+=' (line 1140)
        result_iadd_318478 = python_operator(stypy.reporting.localization.Localization(__file__, 1140, 24), '+=', n_318474, result_add_318477)
        # Assigning a type to the variable 'n' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 24), 'n', result_iadd_318478)
        
        # SSA join for if statement (line 1139)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        int_318479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1141, 28), 'int')
        # Getting the type of 'n' (line 1141)
        n_318480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 32), 'n')
        # Applying the binary operator '<' (line 1141)
        result_lt_318481 = python_operator(stypy.reporting.localization.Localization(__file__, 1141, 28), '<', int_318479, n_318480)
        # Getting the type of 'numweeks' (line 1141)
        numweeks_318482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 37), 'numweeks')
        # Applying the binary operator '<=' (line 1141)
        result_le_318483 = python_operator(stypy.reporting.localization.Localization(__file__, 1141, 28), '<=', n_318480, numweeks_318482)
        # Applying the binary operator '&' (line 1141)
        result_and__318484 = python_operator(stypy.reporting.localization.Localization(__file__, 1141, 28), '&', result_lt_318481, result_le_318483)
        
        # Applying the 'not' unary operator (line 1141)
        result_not__318485 = python_operator(stypy.reporting.localization.Localization(__file__, 1141, 23), 'not', result_and__318484)
        
        # Testing the type of an if condition (line 1141)
        if_condition_318486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1141, 20), result_not__318485)
        # Assigning a type to the variable 'if_condition_318486' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 20), 'if_condition_318486', if_condition_318486)
        # SSA begins for if statement (line 1141)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1141)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'n' (line 1143)
        n_318487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 23), 'n')
        int_318488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 27), 'int')
        # Applying the binary operator '>' (line 1143)
        result_gt_318489 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 23), '>', n_318487, int_318488)
        
        # Testing the type of an if condition (line 1143)
        if_condition_318490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1143, 20), result_gt_318489)
        # Assigning a type to the variable 'if_condition_318490' (line 1143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 20), 'if_condition_318490', if_condition_318490)
        # SSA begins for if statement (line 1143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1144):
        
        # Assigning a BinOp to a Name (line 1144):
        # Getting the type of 'no1wkst' (line 1144)
        no1wkst_318491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 28), 'no1wkst')
        # Getting the type of 'n' (line 1144)
        n_318492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 37), 'n')
        int_318493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 39), 'int')
        # Applying the binary operator '-' (line 1144)
        result_sub_318494 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 37), '-', n_318492, int_318493)
        
        int_318495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 42), 'int')
        # Applying the binary operator '*' (line 1144)
        result_mul_318496 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 36), '*', result_sub_318494, int_318495)
        
        # Applying the binary operator '+' (line 1144)
        result_add_318497 = python_operator(stypy.reporting.localization.Localization(__file__, 1144, 28), '+', no1wkst_318491, result_mul_318496)
        
        # Assigning a type to the variable 'i' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 24), 'i', result_add_318497)
        
        
        # Getting the type of 'no1wkst' (line 1145)
        no1wkst_318498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 27), 'no1wkst')
        # Getting the type of 'firstwkst' (line 1145)
        firstwkst_318499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 38), 'firstwkst')
        # Applying the binary operator '!=' (line 1145)
        result_ne_318500 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, 27), '!=', no1wkst_318498, firstwkst_318499)
        
        # Testing the type of an if condition (line 1145)
        if_condition_318501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1145, 24), result_ne_318500)
        # Assigning a type to the variable 'if_condition_318501' (line 1145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 24), 'if_condition_318501', if_condition_318501)
        # SSA begins for if statement (line 1145)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i' (line 1146)
        i_318502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 28), 'i')
        int_318503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 33), 'int')
        # Getting the type of 'firstwkst' (line 1146)
        firstwkst_318504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 35), 'firstwkst')
        # Applying the binary operator '-' (line 1146)
        result_sub_318505 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 33), '-', int_318503, firstwkst_318504)
        
        # Applying the binary operator '-=' (line 1146)
        result_isub_318506 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 28), '-=', i_318502, result_sub_318505)
        # Assigning a type to the variable 'i' (line 1146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 28), 'i', result_isub_318506)
        
        # SSA join for if statement (line 1145)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1143)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1148):
        
        # Assigning a Name to a Name (line 1148):
        # Getting the type of 'no1wkst' (line 1148)
        no1wkst_318507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 28), 'no1wkst')
        # Assigning a type to the variable 'i' (line 1148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 24), 'i', no1wkst_318507)
        # SSA join for if statement (line 1143)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to range(...): (line 1149)
        # Processing the call arguments (line 1149)
        int_318509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1149, 35), 'int')
        # Processing the call keyword arguments (line 1149)
        kwargs_318510 = {}
        # Getting the type of 'range' (line 1149)
        range_318508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 29), 'range', False)
        # Calling range(args, kwargs) (line 1149)
        range_call_result_318511 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 29), range_318508, *[int_318509], **kwargs_318510)
        
        # Testing the type of a for loop iterable (line 1149)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1149, 20), range_call_result_318511)
        # Getting the type of the for loop variable (line 1149)
        for_loop_var_318512 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1149, 20), range_call_result_318511)
        # Assigning a type to the variable 'j' (line 1149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 20), 'j', for_loop_var_318512)
        # SSA begins for a for statement (line 1149)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Num to a Subscript (line 1150):
        
        # Assigning a Num to a Subscript (line 1150):
        int_318513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 42), 'int')
        # Getting the type of 'self' (line 1150)
        self_318514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 24), 'self')
        # Obtaining the member 'wnomask' of a type (line 1150)
        wnomask_318515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 24), self_318514, 'wnomask')
        # Getting the type of 'i' (line 1150)
        i_318516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 37), 'i')
        # Storing an element on a container (line 1150)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1150, 24), wnomask_318515, (i_318516, int_318513))
        
        # Getting the type of 'i' (line 1151)
        i_318517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 24), 'i')
        int_318518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1151, 29), 'int')
        # Applying the binary operator '+=' (line 1151)
        result_iadd_318519 = python_operator(stypy.reporting.localization.Localization(__file__, 1151, 24), '+=', i_318517, int_318518)
        # Assigning a type to the variable 'i' (line 1151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1151, 24), 'i', result_iadd_318519)
        
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1152)
        i_318520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 41), 'i')
        # Getting the type of 'self' (line 1152)
        self_318521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 27), 'self')
        # Obtaining the member 'wdaymask' of a type (line 1152)
        wdaymask_318522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 27), self_318521, 'wdaymask')
        # Obtaining the member '__getitem__' of a type (line 1152)
        getitem___318523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 27), wdaymask_318522, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1152)
        subscript_call_result_318524 = invoke(stypy.reporting.localization.Localization(__file__, 1152, 27), getitem___318523, i_318520)
        
        # Getting the type of 'rr' (line 1152)
        rr_318525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 47), 'rr')
        # Obtaining the member '_wkst' of a type (line 1152)
        _wkst_318526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 47), rr_318525, '_wkst')
        # Applying the binary operator '==' (line 1152)
        result_eq_318527 = python_operator(stypy.reporting.localization.Localization(__file__, 1152, 27), '==', subscript_call_result_318524, _wkst_318526)
        
        # Testing the type of an if condition (line 1152)
        if_condition_318528 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1152, 24), result_eq_318527)
        # Assigning a type to the variable 'if_condition_318528' (line 1152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 24), 'if_condition_318528', if_condition_318528)
        # SSA begins for if statement (line 1152)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1152)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        int_318529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1154, 19), 'int')
        # Getting the type of 'rr' (line 1154)
        rr_318530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 24), 'rr')
        # Obtaining the member '_byweekno' of a type (line 1154)
        _byweekno_318531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 24), rr_318530, '_byweekno')
        # Applying the binary operator 'in' (line 1154)
        result_contains_318532 = python_operator(stypy.reporting.localization.Localization(__file__, 1154, 19), 'in', int_318529, _byweekno_318531)
        
        # Testing the type of an if condition (line 1154)
        if_condition_318533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1154, 16), result_contains_318532)
        # Assigning a type to the variable 'if_condition_318533' (line 1154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 16), 'if_condition_318533', if_condition_318533)
        # SSA begins for if statement (line 1154)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1157):
        
        # Assigning a BinOp to a Name (line 1157):
        # Getting the type of 'no1wkst' (line 1157)
        no1wkst_318534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 24), 'no1wkst')
        # Getting the type of 'numweeks' (line 1157)
        numweeks_318535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 32), 'numweeks')
        int_318536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, 41), 'int')
        # Applying the binary operator '*' (line 1157)
        result_mul_318537 = python_operator(stypy.reporting.localization.Localization(__file__, 1157, 32), '*', numweeks_318535, int_318536)
        
        # Applying the binary operator '+' (line 1157)
        result_add_318538 = python_operator(stypy.reporting.localization.Localization(__file__, 1157, 24), '+', no1wkst_318534, result_mul_318537)
        
        # Assigning a type to the variable 'i' (line 1157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 20), 'i', result_add_318538)
        
        
        # Getting the type of 'no1wkst' (line 1158)
        no1wkst_318539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 23), 'no1wkst')
        # Getting the type of 'firstwkst' (line 1158)
        firstwkst_318540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 34), 'firstwkst')
        # Applying the binary operator '!=' (line 1158)
        result_ne_318541 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 23), '!=', no1wkst_318539, firstwkst_318540)
        
        # Testing the type of an if condition (line 1158)
        if_condition_318542 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1158, 20), result_ne_318541)
        # Assigning a type to the variable 'if_condition_318542' (line 1158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 20), 'if_condition_318542', if_condition_318542)
        # SSA begins for if statement (line 1158)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i' (line 1159)
        i_318543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 24), 'i')
        int_318544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 29), 'int')
        # Getting the type of 'firstwkst' (line 1159)
        firstwkst_318545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 31), 'firstwkst')
        # Applying the binary operator '-' (line 1159)
        result_sub_318546 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 29), '-', int_318544, firstwkst_318545)
        
        # Applying the binary operator '-=' (line 1159)
        result_isub_318547 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 24), '-=', i_318543, result_sub_318546)
        # Assigning a type to the variable 'i' (line 1159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 24), 'i', result_isub_318547)
        
        # SSA join for if statement (line 1158)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'i' (line 1160)
        i_318548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 23), 'i')
        # Getting the type of 'self' (line 1160)
        self_318549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 27), 'self')
        # Obtaining the member 'yearlen' of a type (line 1160)
        yearlen_318550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 27), self_318549, 'yearlen')
        # Applying the binary operator '<' (line 1160)
        result_lt_318551 = python_operator(stypy.reporting.localization.Localization(__file__, 1160, 23), '<', i_318548, yearlen_318550)
        
        # Testing the type of an if condition (line 1160)
        if_condition_318552 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1160, 20), result_lt_318551)
        # Assigning a type to the variable 'if_condition_318552' (line 1160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 20), 'if_condition_318552', if_condition_318552)
        # SSA begins for if statement (line 1160)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1163)
        # Processing the call arguments (line 1163)
        int_318554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 39), 'int')
        # Processing the call keyword arguments (line 1163)
        kwargs_318555 = {}
        # Getting the type of 'range' (line 1163)
        range_318553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 33), 'range', False)
        # Calling range(args, kwargs) (line 1163)
        range_call_result_318556 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 33), range_318553, *[int_318554], **kwargs_318555)
        
        # Testing the type of a for loop iterable (line 1163)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1163, 24), range_call_result_318556)
        # Getting the type of the for loop variable (line 1163)
        for_loop_var_318557 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1163, 24), range_call_result_318556)
        # Assigning a type to the variable 'j' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 24), 'j', for_loop_var_318557)
        # SSA begins for a for statement (line 1163)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Num to a Subscript (line 1164):
        
        # Assigning a Num to a Subscript (line 1164):
        int_318558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 46), 'int')
        # Getting the type of 'self' (line 1164)
        self_318559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 28), 'self')
        # Obtaining the member 'wnomask' of a type (line 1164)
        wnomask_318560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 28), self_318559, 'wnomask')
        # Getting the type of 'i' (line 1164)
        i_318561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 41), 'i')
        # Storing an element on a container (line 1164)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1164, 28), wnomask_318560, (i_318561, int_318558))
        
        # Getting the type of 'i' (line 1165)
        i_318562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 28), 'i')
        int_318563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 33), 'int')
        # Applying the binary operator '+=' (line 1165)
        result_iadd_318564 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 28), '+=', i_318562, int_318563)
        # Assigning a type to the variable 'i' (line 1165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 28), 'i', result_iadd_318564)
        
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1166)
        i_318565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 45), 'i')
        # Getting the type of 'self' (line 1166)
        self_318566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 31), 'self')
        # Obtaining the member 'wdaymask' of a type (line 1166)
        wdaymask_318567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 31), self_318566, 'wdaymask')
        # Obtaining the member '__getitem__' of a type (line 1166)
        getitem___318568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 31), wdaymask_318567, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1166)
        subscript_call_result_318569 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 31), getitem___318568, i_318565)
        
        # Getting the type of 'rr' (line 1166)
        rr_318570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 51), 'rr')
        # Obtaining the member '_wkst' of a type (line 1166)
        _wkst_318571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 51), rr_318570, '_wkst')
        # Applying the binary operator '==' (line 1166)
        result_eq_318572 = python_operator(stypy.reporting.localization.Localization(__file__, 1166, 31), '==', subscript_call_result_318569, _wkst_318571)
        
        # Testing the type of an if condition (line 1166)
        if_condition_318573 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1166, 28), result_eq_318572)
        # Assigning a type to the variable 'if_condition_318573' (line 1166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 28), 'if_condition_318573', if_condition_318573)
        # SSA begins for if statement (line 1166)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1166)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1160)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1154)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'no1wkst' (line 1168)
        no1wkst_318574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 19), 'no1wkst')
        # Testing the type of an if condition (line 1168)
        if_condition_318575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1168, 16), no1wkst_318574)
        # Assigning a type to the variable 'if_condition_318575' (line 1168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 16), 'if_condition_318575', if_condition_318575)
        # SSA begins for if statement (line 1168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        int_318576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 23), 'int')
        # Getting the type of 'rr' (line 1175)
        rr_318577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 33), 'rr')
        # Obtaining the member '_byweekno' of a type (line 1175)
        _byweekno_318578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 33), rr_318577, '_byweekno')
        # Applying the binary operator 'notin' (line 1175)
        result_contains_318579 = python_operator(stypy.reporting.localization.Localization(__file__, 1175, 23), 'notin', int_318576, _byweekno_318578)
        
        # Testing the type of an if condition (line 1175)
        if_condition_318580 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1175, 20), result_contains_318579)
        # Assigning a type to the variable 'if_condition_318580' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 20), 'if_condition_318580', if_condition_318580)
        # SSA begins for if statement (line 1175)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1176):
        
        # Assigning a Call to a Name (line 1176):
        
        # Call to weekday(...): (line 1176)
        # Processing the call keyword arguments (line 1176)
        kwargs_318591 = {}
        
        # Call to date(...): (line 1176)
        # Processing the call arguments (line 1176)
        # Getting the type of 'year' (line 1176)
        year_318583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 53), 'year', False)
        int_318584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 58), 'int')
        # Applying the binary operator '-' (line 1176)
        result_sub_318585 = python_operator(stypy.reporting.localization.Localization(__file__, 1176, 53), '-', year_318583, int_318584)
        
        int_318586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 61), 'int')
        int_318587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 64), 'int')
        # Processing the call keyword arguments (line 1176)
        kwargs_318588 = {}
        # Getting the type of 'datetime' (line 1176)
        datetime_318581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 39), 'datetime', False)
        # Obtaining the member 'date' of a type (line 1176)
        date_318582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 39), datetime_318581, 'date')
        # Calling date(args, kwargs) (line 1176)
        date_call_result_318589 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 39), date_318582, *[result_sub_318585, int_318586, int_318587], **kwargs_318588)
        
        # Obtaining the member 'weekday' of a type (line 1176)
        weekday_318590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 39), date_call_result_318589, 'weekday')
        # Calling weekday(args, kwargs) (line 1176)
        weekday_call_result_318592 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 39), weekday_318590, *[], **kwargs_318591)
        
        # Assigning a type to the variable 'lyearweekday' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 24), 'lyearweekday', weekday_call_result_318592)
        
        # Assigning a BinOp to a Name (line 1177):
        
        # Assigning a BinOp to a Name (line 1177):
        int_318593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1177, 36), 'int')
        # Getting the type of 'lyearweekday' (line 1177)
        lyearweekday_318594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 38), 'lyearweekday')
        # Applying the binary operator '-' (line 1177)
        result_sub_318595 = python_operator(stypy.reporting.localization.Localization(__file__, 1177, 36), '-', int_318593, lyearweekday_318594)
        
        # Getting the type of 'rr' (line 1177)
        rr_318596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 51), 'rr')
        # Obtaining the member '_wkst' of a type (line 1177)
        _wkst_318597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 51), rr_318596, '_wkst')
        # Applying the binary operator '+' (line 1177)
        result_add_318598 = python_operator(stypy.reporting.localization.Localization(__file__, 1177, 50), '+', result_sub_318595, _wkst_318597)
        
        int_318599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1177, 63), 'int')
        # Applying the binary operator '%' (line 1177)
        result_mod_318600 = python_operator(stypy.reporting.localization.Localization(__file__, 1177, 35), '%', result_add_318598, int_318599)
        
        # Assigning a type to the variable 'lno1wkst' (line 1177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1177, 24), 'lno1wkst', result_mod_318600)
        
        # Assigning a BinOp to a Name (line 1178):
        
        # Assigning a BinOp to a Name (line 1178):
        int_318601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, 35), 'int')
        
        # Call to isleap(...): (line 1178)
        # Processing the call arguments (line 1178)
        # Getting the type of 'year' (line 1178)
        year_318604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 55), 'year', False)
        int_318605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, 60), 'int')
        # Applying the binary operator '-' (line 1178)
        result_sub_318606 = python_operator(stypy.reporting.localization.Localization(__file__, 1178, 55), '-', year_318604, int_318605)
        
        # Processing the call keyword arguments (line 1178)
        kwargs_318607 = {}
        # Getting the type of 'calendar' (line 1178)
        calendar_318602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 39), 'calendar', False)
        # Obtaining the member 'isleap' of a type (line 1178)
        isleap_318603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 39), calendar_318602, 'isleap')
        # Calling isleap(args, kwargs) (line 1178)
        isleap_call_result_318608 = invoke(stypy.reporting.localization.Localization(__file__, 1178, 39), isleap_318603, *[result_sub_318606], **kwargs_318607)
        
        # Applying the binary operator '+' (line 1178)
        result_add_318609 = python_operator(stypy.reporting.localization.Localization(__file__, 1178, 35), '+', int_318601, isleap_call_result_318608)
        
        # Assigning a type to the variable 'lyearlen' (line 1178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1178, 24), 'lyearlen', result_add_318609)
        
        
        # Getting the type of 'lno1wkst' (line 1179)
        lno1wkst_318610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 27), 'lno1wkst')
        int_318611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 39), 'int')
        # Applying the binary operator '>=' (line 1179)
        result_ge_318612 = python_operator(stypy.reporting.localization.Localization(__file__, 1179, 27), '>=', lno1wkst_318610, int_318611)
        
        # Testing the type of an if condition (line 1179)
        if_condition_318613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1179, 24), result_ge_318612)
        # Assigning a type to the variable 'if_condition_318613' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 24), 'if_condition_318613', if_condition_318613)
        # SSA begins for if statement (line 1179)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1180):
        
        # Assigning a Num to a Name (line 1180):
        int_318614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1180, 39), 'int')
        # Assigning a type to the variable 'lno1wkst' (line 1180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 28), 'lno1wkst', int_318614)
        
        # Assigning a BinOp to a Name (line 1181):
        
        # Assigning a BinOp to a Name (line 1181):
        int_318615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, 40), 'int')
        # Getting the type of 'lyearlen' (line 1181)
        lyearlen_318616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 44), 'lyearlen')
        # Getting the type of 'lyearweekday' (line 1182)
        lyearweekday_318617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 45), 'lyearweekday')
        # Getting the type of 'rr' (line 1182)
        rr_318618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 58), 'rr')
        # Obtaining the member '_wkst' of a type (line 1182)
        _wkst_318619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1182, 58), rr_318618, '_wkst')
        # Applying the binary operator '-' (line 1182)
        result_sub_318620 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 45), '-', lyearweekday_318617, _wkst_318619)
        
        int_318621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 70), 'int')
        # Applying the binary operator '%' (line 1182)
        result_mod_318622 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 44), '%', result_sub_318620, int_318621)
        
        # Applying the binary operator '+' (line 1181)
        result_add_318623 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 44), '+', lyearlen_318616, result_mod_318622)
        
        int_318624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 75), 'int')
        # Applying the binary operator '%' (line 1181)
        result_mod_318625 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 43), '%', result_add_318623, int_318624)
        
        int_318626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 78), 'int')
        # Applying the binary operator '//' (line 1182)
        result_floordiv_318627 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 76), '//', result_mod_318625, int_318626)
        
        # Applying the binary operator '+' (line 1181)
        result_add_318628 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 40), '+', int_318615, result_floordiv_318627)
        
        # Assigning a type to the variable 'lnumweeks' (line 1181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 28), 'lnumweeks', result_add_318628)
        # SSA branch for the else part of an if statement (line 1179)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1184):
        
        # Assigning a BinOp to a Name (line 1184):
        int_318629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 40), 'int')
        # Getting the type of 'self' (line 1184)
        self_318630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 44), 'self')
        # Obtaining the member 'yearlen' of a type (line 1184)
        yearlen_318631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 44), self_318630, 'yearlen')
        # Getting the type of 'no1wkst' (line 1184)
        no1wkst_318632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 57), 'no1wkst')
        # Applying the binary operator '-' (line 1184)
        result_sub_318633 = python_operator(stypy.reporting.localization.Localization(__file__, 1184, 44), '-', yearlen_318631, no1wkst_318632)
        
        int_318634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 68), 'int')
        # Applying the binary operator '%' (line 1184)
        result_mod_318635 = python_operator(stypy.reporting.localization.Localization(__file__, 1184, 43), '%', result_sub_318633, int_318634)
        
        int_318636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 71), 'int')
        # Applying the binary operator '//' (line 1184)
        result_floordiv_318637 = python_operator(stypy.reporting.localization.Localization(__file__, 1184, 69), '//', result_mod_318635, int_318636)
        
        # Applying the binary operator '+' (line 1184)
        result_add_318638 = python_operator(stypy.reporting.localization.Localization(__file__, 1184, 40), '+', int_318629, result_floordiv_318637)
        
        # Assigning a type to the variable 'lnumweeks' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 28), 'lnumweeks', result_add_318638)
        # SSA join for if statement (line 1179)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1175)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1186):
        
        # Assigning a Num to a Name (line 1186):
        int_318639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 36), 'int')
        # Assigning a type to the variable 'lnumweeks' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 24), 'lnumweeks', int_318639)
        # SSA join for if statement (line 1175)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'lnumweeks' (line 1187)
        lnumweeks_318640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 23), 'lnumweeks')
        # Getting the type of 'rr' (line 1187)
        rr_318641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 36), 'rr')
        # Obtaining the member '_byweekno' of a type (line 1187)
        _byweekno_318642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 36), rr_318641, '_byweekno')
        # Applying the binary operator 'in' (line 1187)
        result_contains_318643 = python_operator(stypy.reporting.localization.Localization(__file__, 1187, 23), 'in', lnumweeks_318640, _byweekno_318642)
        
        # Testing the type of an if condition (line 1187)
        if_condition_318644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1187, 20), result_contains_318643)
        # Assigning a type to the variable 'if_condition_318644' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 20), 'if_condition_318644', if_condition_318644)
        # SSA begins for if statement (line 1187)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1188)
        # Processing the call arguments (line 1188)
        # Getting the type of 'no1wkst' (line 1188)
        no1wkst_318646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 39), 'no1wkst', False)
        # Processing the call keyword arguments (line 1188)
        kwargs_318647 = {}
        # Getting the type of 'range' (line 1188)
        range_318645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 33), 'range', False)
        # Calling range(args, kwargs) (line 1188)
        range_call_result_318648 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 33), range_318645, *[no1wkst_318646], **kwargs_318647)
        
        # Testing the type of a for loop iterable (line 1188)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1188, 24), range_call_result_318648)
        # Getting the type of the for loop variable (line 1188)
        for_loop_var_318649 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1188, 24), range_call_result_318648)
        # Assigning a type to the variable 'i' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 24), 'i', for_loop_var_318649)
        # SSA begins for a for statement (line 1188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Num to a Subscript (line 1189):
        
        # Assigning a Num to a Subscript (line 1189):
        int_318650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 46), 'int')
        # Getting the type of 'self' (line 1189)
        self_318651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 28), 'self')
        # Obtaining the member 'wnomask' of a type (line 1189)
        wnomask_318652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 28), self_318651, 'wnomask')
        # Getting the type of 'i' (line 1189)
        i_318653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 41), 'i')
        # Storing an element on a container (line 1189)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 28), wnomask_318652, (i_318653, int_318650))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1187)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1168)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1121)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1100)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'rr' (line 1191)
        rr_318654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 12), 'rr')
        # Obtaining the member '_bynweekday' of a type (line 1191)
        _bynweekday_318655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 12), rr_318654, '_bynweekday')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'month' (line 1191)
        month_318656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 32), 'month')
        # Getting the type of 'self' (line 1191)
        self_318657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 41), 'self')
        # Obtaining the member 'lastmonth' of a type (line 1191)
        lastmonth_318658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 41), self_318657, 'lastmonth')
        # Applying the binary operator '!=' (line 1191)
        result_ne_318659 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 32), '!=', month_318656, lastmonth_318658)
        
        
        # Getting the type of 'year' (line 1192)
        year_318660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 32), 'year')
        # Getting the type of 'self' (line 1192)
        self_318661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 40), 'self')
        # Obtaining the member 'lastyear' of a type (line 1192)
        lastyear_318662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 40), self_318661, 'lastyear')
        # Applying the binary operator '!=' (line 1192)
        result_ne_318663 = python_operator(stypy.reporting.localization.Localization(__file__, 1192, 32), '!=', year_318660, lastyear_318662)
        
        # Applying the binary operator 'or' (line 1191)
        result_or_keyword_318664 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 32), 'or', result_ne_318659, result_ne_318663)
        
        # Applying the binary operator 'and' (line 1191)
        result_and_keyword_318665 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 12), 'and', _bynweekday_318655, result_or_keyword_318664)
        
        # Testing the type of an if condition (line 1191)
        if_condition_318666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1191, 8), result_and_keyword_318665)
        # Assigning a type to the variable 'if_condition_318666' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'if_condition_318666', if_condition_318666)
        # SSA begins for if statement (line 1191)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1193):
        
        # Assigning a List to a Name (line 1193):
        
        # Obtaining an instance of the builtin type 'list' (line 1193)
        list_318667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1193)
        
        # Assigning a type to the variable 'ranges' (line 1193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 12), 'ranges', list_318667)
        
        
        # Getting the type of 'rr' (line 1194)
        rr_318668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 15), 'rr')
        # Obtaining the member '_freq' of a type (line 1194)
        _freq_318669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 15), rr_318668, '_freq')
        # Getting the type of 'YEARLY' (line 1194)
        YEARLY_318670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 27), 'YEARLY')
        # Applying the binary operator '==' (line 1194)
        result_eq_318671 = python_operator(stypy.reporting.localization.Localization(__file__, 1194, 15), '==', _freq_318669, YEARLY_318670)
        
        # Testing the type of an if condition (line 1194)
        if_condition_318672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1194, 12), result_eq_318671)
        # Assigning a type to the variable 'if_condition_318672' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 12), 'if_condition_318672', if_condition_318672)
        # SSA begins for if statement (line 1194)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'rr' (line 1195)
        rr_318673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 19), 'rr')
        # Obtaining the member '_bymonth' of a type (line 1195)
        _bymonth_318674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 19), rr_318673, '_bymonth')
        # Testing the type of an if condition (line 1195)
        if_condition_318675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1195, 16), _bymonth_318674)
        # Assigning a type to the variable 'if_condition_318675' (line 1195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 16), 'if_condition_318675', if_condition_318675)
        # SSA begins for if statement (line 1195)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'rr' (line 1196)
        rr_318676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 33), 'rr')
        # Obtaining the member '_bymonth' of a type (line 1196)
        _bymonth_318677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 33), rr_318676, '_bymonth')
        # Testing the type of a for loop iterable (line 1196)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1196, 20), _bymonth_318677)
        # Getting the type of the for loop variable (line 1196)
        for_loop_var_318678 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1196, 20), _bymonth_318677)
        # Assigning a type to the variable 'month' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 20), 'month', for_loop_var_318678)
        # SSA begins for a for statement (line 1196)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 1197)
        # Processing the call arguments (line 1197)
        
        # Obtaining the type of the subscript
        # Getting the type of 'month' (line 1197)
        month_318681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 50), 'month', False)
        int_318682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 56), 'int')
        # Applying the binary operator '-' (line 1197)
        result_sub_318683 = python_operator(stypy.reporting.localization.Localization(__file__, 1197, 50), '-', month_318681, int_318682)
        
        # Getting the type of 'month' (line 1197)
        month_318684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 58), 'month', False)
        int_318685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 64), 'int')
        # Applying the binary operator '+' (line 1197)
        result_add_318686 = python_operator(stypy.reporting.localization.Localization(__file__, 1197, 58), '+', month_318684, int_318685)
        
        slice_318687 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1197, 38), result_sub_318683, result_add_318686, None)
        # Getting the type of 'self' (line 1197)
        self_318688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 38), 'self', False)
        # Obtaining the member 'mrange' of a type (line 1197)
        mrange_318689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 38), self_318688, 'mrange')
        # Obtaining the member '__getitem__' of a type (line 1197)
        getitem___318690 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 38), mrange_318689, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1197)
        subscript_call_result_318691 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 38), getitem___318690, slice_318687)
        
        # Processing the call keyword arguments (line 1197)
        kwargs_318692 = {}
        # Getting the type of 'ranges' (line 1197)
        ranges_318679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 24), 'ranges', False)
        # Obtaining the member 'append' of a type (line 1197)
        append_318680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 24), ranges_318679, 'append')
        # Calling append(args, kwargs) (line 1197)
        append_call_result_318693 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 24), append_318680, *[subscript_call_result_318691], **kwargs_318692)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1195)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 1199):
        
        # Assigning a List to a Name (line 1199):
        
        # Obtaining an instance of the builtin type 'list' (line 1199)
        list_318694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1199)
        # Adding element type (line 1199)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1199)
        tuple_318695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1199)
        # Adding element type (line 1199)
        int_318696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 31), tuple_318695, int_318696)
        # Adding element type (line 1199)
        # Getting the type of 'self' (line 1199)
        self_318697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 34), 'self')
        # Obtaining the member 'yearlen' of a type (line 1199)
        yearlen_318698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 34), self_318697, 'yearlen')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 31), tuple_318695, yearlen_318698)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1199, 29), list_318694, tuple_318695)
        
        # Assigning a type to the variable 'ranges' (line 1199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 20), 'ranges', list_318694)
        # SSA join for if statement (line 1195)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1194)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'rr' (line 1200)
        rr_318699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 17), 'rr')
        # Obtaining the member '_freq' of a type (line 1200)
        _freq_318700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 17), rr_318699, '_freq')
        # Getting the type of 'MONTHLY' (line 1200)
        MONTHLY_318701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 29), 'MONTHLY')
        # Applying the binary operator '==' (line 1200)
        result_eq_318702 = python_operator(stypy.reporting.localization.Localization(__file__, 1200, 17), '==', _freq_318700, MONTHLY_318701)
        
        # Testing the type of an if condition (line 1200)
        if_condition_318703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1200, 17), result_eq_318702)
        # Assigning a type to the variable 'if_condition_318703' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 17), 'if_condition_318703', if_condition_318703)
        # SSA begins for if statement (line 1200)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1201):
        
        # Assigning a List to a Name (line 1201):
        
        # Obtaining an instance of the builtin type 'list' (line 1201)
        list_318704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1201)
        # Adding element type (line 1201)
        
        # Obtaining the type of the subscript
        # Getting the type of 'month' (line 1201)
        month_318705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 38), 'month')
        int_318706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 44), 'int')
        # Applying the binary operator '-' (line 1201)
        result_sub_318707 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 38), '-', month_318705, int_318706)
        
        # Getting the type of 'month' (line 1201)
        month_318708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 46), 'month')
        int_318709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 52), 'int')
        # Applying the binary operator '+' (line 1201)
        result_add_318710 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 46), '+', month_318708, int_318709)
        
        slice_318711 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1201, 26), result_sub_318707, result_add_318710, None)
        # Getting the type of 'self' (line 1201)
        self_318712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 26), 'self')
        # Obtaining the member 'mrange' of a type (line 1201)
        mrange_318713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 26), self_318712, 'mrange')
        # Obtaining the member '__getitem__' of a type (line 1201)
        getitem___318714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 26), mrange_318713, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1201)
        subscript_call_result_318715 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 26), getitem___318714, slice_318711)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1201, 25), list_318704, subscript_call_result_318715)
        
        # Assigning a type to the variable 'ranges' (line 1201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 16), 'ranges', list_318704)
        # SSA join for if statement (line 1200)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1194)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'ranges' (line 1202)
        ranges_318716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 15), 'ranges')
        # Testing the type of an if condition (line 1202)
        if_condition_318717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1202, 12), ranges_318716)
        # Assigning a type to the variable 'if_condition_318717' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 12), 'if_condition_318717', if_condition_318717)
        # SSA begins for if statement (line 1202)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1205):
        
        # Assigning a BinOp to a Attribute (line 1205):
        
        # Obtaining an instance of the builtin type 'list' (line 1205)
        list_318718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1205)
        # Adding element type (line 1205)
        int_318719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 34), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1205, 33), list_318718, int_318719)
        
        # Getting the type of 'self' (line 1205)
        self_318720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 37), 'self')
        # Obtaining the member 'yearlen' of a type (line 1205)
        yearlen_318721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 37), self_318720, 'yearlen')
        # Applying the binary operator '*' (line 1205)
        result_mul_318722 = python_operator(stypy.reporting.localization.Localization(__file__, 1205, 33), '*', list_318718, yearlen_318721)
        
        # Getting the type of 'self' (line 1205)
        self_318723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 16), 'self')
        # Setting the type of the member 'nwdaymask' of a type (line 1205)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 16), self_318723, 'nwdaymask', result_mul_318722)
        
        # Getting the type of 'ranges' (line 1206)
        ranges_318724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 35), 'ranges')
        # Testing the type of a for loop iterable (line 1206)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1206, 16), ranges_318724)
        # Getting the type of the for loop variable (line 1206)
        for_loop_var_318725 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1206, 16), ranges_318724)
        # Assigning a type to the variable 'first' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 16), 'first', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 16), for_loop_var_318725))
        # Assigning a type to the variable 'last' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 16), 'last', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1206, 16), for_loop_var_318725))
        # SSA begins for a for statement (line 1206)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'last' (line 1207)
        last_318726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 20), 'last')
        int_318727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 28), 'int')
        # Applying the binary operator '-=' (line 1207)
        result_isub_318728 = python_operator(stypy.reporting.localization.Localization(__file__, 1207, 20), '-=', last_318726, int_318727)
        # Assigning a type to the variable 'last' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 20), 'last', result_isub_318728)
        
        
        # Getting the type of 'rr' (line 1208)
        rr_318729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 35), 'rr')
        # Obtaining the member '_bynweekday' of a type (line 1208)
        _bynweekday_318730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 35), rr_318729, '_bynweekday')
        # Testing the type of a for loop iterable (line 1208)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1208, 20), _bynweekday_318730)
        # Getting the type of the for loop variable (line 1208)
        for_loop_var_318731 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1208, 20), _bynweekday_318730)
        # Assigning a type to the variable 'wday' (line 1208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1208, 20), 'wday', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1208, 20), for_loop_var_318731))
        # Assigning a type to the variable 'n' (line 1208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1208, 20), 'n', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1208, 20), for_loop_var_318731))
        # SSA begins for a for statement (line 1208)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'n' (line 1209)
        n_318732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 27), 'n')
        int_318733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1209, 31), 'int')
        # Applying the binary operator '<' (line 1209)
        result_lt_318734 = python_operator(stypy.reporting.localization.Localization(__file__, 1209, 27), '<', n_318732, int_318733)
        
        # Testing the type of an if condition (line 1209)
        if_condition_318735 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1209, 24), result_lt_318734)
        # Assigning a type to the variable 'if_condition_318735' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 24), 'if_condition_318735', if_condition_318735)
        # SSA begins for if statement (line 1209)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1210):
        
        # Assigning a BinOp to a Name (line 1210):
        # Getting the type of 'last' (line 1210)
        last_318736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 32), 'last')
        # Getting the type of 'n' (line 1210)
        n_318737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 38), 'n')
        int_318738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 40), 'int')
        # Applying the binary operator '+' (line 1210)
        result_add_318739 = python_operator(stypy.reporting.localization.Localization(__file__, 1210, 38), '+', n_318737, int_318738)
        
        int_318740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 43), 'int')
        # Applying the binary operator '*' (line 1210)
        result_mul_318741 = python_operator(stypy.reporting.localization.Localization(__file__, 1210, 37), '*', result_add_318739, int_318740)
        
        # Applying the binary operator '+' (line 1210)
        result_add_318742 = python_operator(stypy.reporting.localization.Localization(__file__, 1210, 32), '+', last_318736, result_mul_318741)
        
        # Assigning a type to the variable 'i' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 28), 'i', result_add_318742)
        
        # Getting the type of 'i' (line 1211)
        i_318743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 28), 'i')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1211)
        i_318744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 48), 'i')
        # Getting the type of 'self' (line 1211)
        self_318745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 34), 'self')
        # Obtaining the member 'wdaymask' of a type (line 1211)
        wdaymask_318746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 34), self_318745, 'wdaymask')
        # Obtaining the member '__getitem__' of a type (line 1211)
        getitem___318747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 34), wdaymask_318746, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1211)
        subscript_call_result_318748 = invoke(stypy.reporting.localization.Localization(__file__, 1211, 34), getitem___318747, i_318744)
        
        # Getting the type of 'wday' (line 1211)
        wday_318749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 51), 'wday')
        # Applying the binary operator '-' (line 1211)
        result_sub_318750 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 34), '-', subscript_call_result_318748, wday_318749)
        
        int_318751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 59), 'int')
        # Applying the binary operator '%' (line 1211)
        result_mod_318752 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 33), '%', result_sub_318750, int_318751)
        
        # Applying the binary operator '-=' (line 1211)
        result_isub_318753 = python_operator(stypy.reporting.localization.Localization(__file__, 1211, 28), '-=', i_318743, result_mod_318752)
        # Assigning a type to the variable 'i' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 28), 'i', result_isub_318753)
        
        # SSA branch for the else part of an if statement (line 1209)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1213):
        
        # Assigning a BinOp to a Name (line 1213):
        # Getting the type of 'first' (line 1213)
        first_318754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 32), 'first')
        # Getting the type of 'n' (line 1213)
        n_318755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 39), 'n')
        int_318756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1213, 41), 'int')
        # Applying the binary operator '-' (line 1213)
        result_sub_318757 = python_operator(stypy.reporting.localization.Localization(__file__, 1213, 39), '-', n_318755, int_318756)
        
        int_318758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1213, 44), 'int')
        # Applying the binary operator '*' (line 1213)
        result_mul_318759 = python_operator(stypy.reporting.localization.Localization(__file__, 1213, 38), '*', result_sub_318757, int_318758)
        
        # Applying the binary operator '+' (line 1213)
        result_add_318760 = python_operator(stypy.reporting.localization.Localization(__file__, 1213, 32), '+', first_318754, result_mul_318759)
        
        # Assigning a type to the variable 'i' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 28), 'i', result_add_318760)
        
        # Getting the type of 'i' (line 1214)
        i_318761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 28), 'i')
        int_318762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 34), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1214)
        i_318763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 50), 'i')
        # Getting the type of 'self' (line 1214)
        self_318764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 36), 'self')
        # Obtaining the member 'wdaymask' of a type (line 1214)
        wdaymask_318765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 36), self_318764, 'wdaymask')
        # Obtaining the member '__getitem__' of a type (line 1214)
        getitem___318766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1214, 36), wdaymask_318765, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1214)
        subscript_call_result_318767 = invoke(stypy.reporting.localization.Localization(__file__, 1214, 36), getitem___318766, i_318763)
        
        # Applying the binary operator '-' (line 1214)
        result_sub_318768 = python_operator(stypy.reporting.localization.Localization(__file__, 1214, 34), '-', int_318762, subscript_call_result_318767)
        
        # Getting the type of 'wday' (line 1214)
        wday_318769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 53), 'wday')
        # Applying the binary operator '+' (line 1214)
        result_add_318770 = python_operator(stypy.reporting.localization.Localization(__file__, 1214, 52), '+', result_sub_318768, wday_318769)
        
        int_318771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 61), 'int')
        # Applying the binary operator '%' (line 1214)
        result_mod_318772 = python_operator(stypy.reporting.localization.Localization(__file__, 1214, 33), '%', result_add_318770, int_318771)
        
        # Applying the binary operator '+=' (line 1214)
        result_iadd_318773 = python_operator(stypy.reporting.localization.Localization(__file__, 1214, 28), '+=', i_318761, result_mod_318772)
        # Assigning a type to the variable 'i' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 28), 'i', result_iadd_318773)
        
        # SSA join for if statement (line 1209)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'first' (line 1215)
        first_318774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 27), 'first')
        # Getting the type of 'i' (line 1215)
        i_318775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 36), 'i')
        # Applying the binary operator '<=' (line 1215)
        result_le_318776 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 27), '<=', first_318774, i_318775)
        # Getting the type of 'last' (line 1215)
        last_318777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 41), 'last')
        # Applying the binary operator '<=' (line 1215)
        result_le_318778 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 27), '<=', i_318775, last_318777)
        # Applying the binary operator '&' (line 1215)
        result_and__318779 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 27), '&', result_le_318776, result_le_318778)
        
        # Testing the type of an if condition (line 1215)
        if_condition_318780 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1215, 24), result_and__318779)
        # Assigning a type to the variable 'if_condition_318780' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 24), 'if_condition_318780', if_condition_318780)
        # SSA begins for if statement (line 1215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 1216):
        
        # Assigning a Num to a Subscript (line 1216):
        int_318781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 48), 'int')
        # Getting the type of 'self' (line 1216)
        self_318782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 28), 'self')
        # Obtaining the member 'nwdaymask' of a type (line 1216)
        nwdaymask_318783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 28), self_318782, 'nwdaymask')
        # Getting the type of 'i' (line 1216)
        i_318784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 43), 'i')
        # Storing an element on a container (line 1216)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1216, 28), nwdaymask_318783, (i_318784, int_318781))
        # SSA join for if statement (line 1215)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1202)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1191)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'rr' (line 1218)
        rr_318785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 11), 'rr')
        # Obtaining the member '_byeaster' of a type (line 1218)
        _byeaster_318786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 11), rr_318785, '_byeaster')
        # Testing the type of an if condition (line 1218)
        if_condition_318787 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1218, 8), _byeaster_318786)
        # Assigning a type to the variable 'if_condition_318787' (line 1218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'if_condition_318787', if_condition_318787)
        # SSA begins for if statement (line 1218)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 1219):
        
        # Assigning a BinOp to a Attribute (line 1219):
        
        # Obtaining an instance of the builtin type 'list' (line 1219)
        list_318788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1219, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1219)
        # Adding element type (line 1219)
        int_318789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1219, 31), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1219, 30), list_318788, int_318789)
        
        # Getting the type of 'self' (line 1219)
        self_318790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 35), 'self')
        # Obtaining the member 'yearlen' of a type (line 1219)
        yearlen_318791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 35), self_318790, 'yearlen')
        int_318792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1219, 48), 'int')
        # Applying the binary operator '+' (line 1219)
        result_add_318793 = python_operator(stypy.reporting.localization.Localization(__file__, 1219, 35), '+', yearlen_318791, int_318792)
        
        # Applying the binary operator '*' (line 1219)
        result_mul_318794 = python_operator(stypy.reporting.localization.Localization(__file__, 1219, 30), '*', list_318788, result_add_318793)
        
        # Getting the type of 'self' (line 1219)
        self_318795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 12), 'self')
        # Setting the type of the member 'eastermask' of a type (line 1219)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 12), self_318795, 'eastermask', result_mul_318794)
        
        # Assigning a BinOp to a Name (line 1220):
        
        # Assigning a BinOp to a Name (line 1220):
        
        # Call to toordinal(...): (line 1220)
        # Processing the call keyword arguments (line 1220)
        kwargs_318802 = {}
        
        # Call to easter(...): (line 1220)
        # Processing the call arguments (line 1220)
        # Getting the type of 'year' (line 1220)
        year_318798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 34), 'year', False)
        # Processing the call keyword arguments (line 1220)
        kwargs_318799 = {}
        # Getting the type of 'easter' (line 1220)
        easter_318796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 20), 'easter', False)
        # Obtaining the member 'easter' of a type (line 1220)
        easter_318797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 20), easter_318796, 'easter')
        # Calling easter(args, kwargs) (line 1220)
        easter_call_result_318800 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 20), easter_318797, *[year_318798], **kwargs_318799)
        
        # Obtaining the member 'toordinal' of a type (line 1220)
        toordinal_318801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 20), easter_call_result_318800, 'toordinal')
        # Calling toordinal(args, kwargs) (line 1220)
        toordinal_call_result_318803 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 20), toordinal_318801, *[], **kwargs_318802)
        
        # Getting the type of 'self' (line 1220)
        self_318804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 52), 'self')
        # Obtaining the member 'yearordinal' of a type (line 1220)
        yearordinal_318805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 52), self_318804, 'yearordinal')
        # Applying the binary operator '-' (line 1220)
        result_sub_318806 = python_operator(stypy.reporting.localization.Localization(__file__, 1220, 20), '-', toordinal_call_result_318803, yearordinal_318805)
        
        # Assigning a type to the variable 'eyday' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 12), 'eyday', result_sub_318806)
        
        # Getting the type of 'rr' (line 1221)
        rr_318807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 26), 'rr')
        # Obtaining the member '_byeaster' of a type (line 1221)
        _byeaster_318808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 26), rr_318807, '_byeaster')
        # Testing the type of a for loop iterable (line 1221)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1221, 12), _byeaster_318808)
        # Getting the type of the for loop variable (line 1221)
        for_loop_var_318809 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1221, 12), _byeaster_318808)
        # Assigning a type to the variable 'offset' (line 1221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 12), 'offset', for_loop_var_318809)
        # SSA begins for a for statement (line 1221)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Num to a Subscript (line 1222):
        
        # Assigning a Num to a Subscript (line 1222):
        int_318810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1222, 48), 'int')
        # Getting the type of 'self' (line 1222)
        self_318811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 16), 'self')
        # Obtaining the member 'eastermask' of a type (line 1222)
        eastermask_318812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 16), self_318811, 'eastermask')
        # Getting the type of 'eyday' (line 1222)
        eyday_318813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 32), 'eyday')
        # Getting the type of 'offset' (line 1222)
        offset_318814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 38), 'offset')
        # Applying the binary operator '+' (line 1222)
        result_add_318815 = python_operator(stypy.reporting.localization.Localization(__file__, 1222, 32), '+', eyday_318813, offset_318814)
        
        # Storing an element on a container (line 1222)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1222, 16), eastermask_318812, (result_add_318815, int_318810))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1218)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1224):
        
        # Assigning a Name to a Attribute (line 1224):
        # Getting the type of 'year' (line 1224)
        year_318816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 24), 'year')
        # Getting the type of 'self' (line 1224)
        self_318817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 8), 'self')
        # Setting the type of the member 'lastyear' of a type (line 1224)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 8), self_318817, 'lastyear', year_318816)
        
        # Assigning a Name to a Attribute (line 1225):
        
        # Assigning a Name to a Attribute (line 1225):
        # Getting the type of 'month' (line 1225)
        month_318818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 25), 'month')
        # Getting the type of 'self' (line 1225)
        self_318819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 8), 'self')
        # Setting the type of the member 'lastmonth' of a type (line 1225)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 8), self_318819, 'lastmonth', month_318818)
        
        # ################# End of 'rebuild(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rebuild' in the type store
        # Getting the type of 'stypy_return_type' (line 1097)
        stypy_return_type_318820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318820)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rebuild'
        return stypy_return_type_318820


    @norecursion
    def ydayset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ydayset'
        module_type_store = module_type_store.open_function_context('ydayset', 1227, 4, False)
        # Assigning a type to the variable 'self' (line 1228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _iterinfo.ydayset.__dict__.__setitem__('stypy_localization', localization)
        _iterinfo.ydayset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _iterinfo.ydayset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _iterinfo.ydayset.__dict__.__setitem__('stypy_function_name', '_iterinfo.ydayset')
        _iterinfo.ydayset.__dict__.__setitem__('stypy_param_names_list', ['year', 'month', 'day'])
        _iterinfo.ydayset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _iterinfo.ydayset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _iterinfo.ydayset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _iterinfo.ydayset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _iterinfo.ydayset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _iterinfo.ydayset.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.ydayset', ['year', 'month', 'day'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ydayset', localization, ['year', 'month', 'day'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ydayset(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 1228)
        tuple_318821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1228)
        # Adding element type (line 1228)
        
        # Call to list(...): (line 1228)
        # Processing the call arguments (line 1228)
        
        # Call to range(...): (line 1228)
        # Processing the call arguments (line 1228)
        # Getting the type of 'self' (line 1228)
        self_318824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 26), 'self', False)
        # Obtaining the member 'yearlen' of a type (line 1228)
        yearlen_318825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 26), self_318824, 'yearlen')
        # Processing the call keyword arguments (line 1228)
        kwargs_318826 = {}
        # Getting the type of 'range' (line 1228)
        range_318823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 20), 'range', False)
        # Calling range(args, kwargs) (line 1228)
        range_call_result_318827 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 20), range_318823, *[yearlen_318825], **kwargs_318826)
        
        # Processing the call keyword arguments (line 1228)
        kwargs_318828 = {}
        # Getting the type of 'list' (line 1228)
        list_318822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 15), 'list', False)
        # Calling list(args, kwargs) (line 1228)
        list_call_result_318829 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 15), list_318822, *[range_call_result_318827], **kwargs_318828)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 15), tuple_318821, list_call_result_318829)
        # Adding element type (line 1228)
        int_318830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 42), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 15), tuple_318821, int_318830)
        # Adding element type (line 1228)
        # Getting the type of 'self' (line 1228)
        self_318831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 45), 'self')
        # Obtaining the member 'yearlen' of a type (line 1228)
        yearlen_318832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 45), self_318831, 'yearlen')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1228, 15), tuple_318821, yearlen_318832)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 8), 'stypy_return_type', tuple_318821)
        
        # ################# End of 'ydayset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ydayset' in the type store
        # Getting the type of 'stypy_return_type' (line 1227)
        stypy_return_type_318833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318833)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ydayset'
        return stypy_return_type_318833


    @norecursion
    def mdayset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mdayset'
        module_type_store = module_type_store.open_function_context('mdayset', 1230, 4, False)
        # Assigning a type to the variable 'self' (line 1231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _iterinfo.mdayset.__dict__.__setitem__('stypy_localization', localization)
        _iterinfo.mdayset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _iterinfo.mdayset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _iterinfo.mdayset.__dict__.__setitem__('stypy_function_name', '_iterinfo.mdayset')
        _iterinfo.mdayset.__dict__.__setitem__('stypy_param_names_list', ['year', 'month', 'day'])
        _iterinfo.mdayset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _iterinfo.mdayset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _iterinfo.mdayset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _iterinfo.mdayset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _iterinfo.mdayset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _iterinfo.mdayset.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.mdayset', ['year', 'month', 'day'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mdayset', localization, ['year', 'month', 'day'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mdayset(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1231):
        
        # Assigning a BinOp to a Name (line 1231):
        
        # Obtaining an instance of the builtin type 'list' (line 1231)
        list_318834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1231, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1231)
        # Adding element type (line 1231)
        # Getting the type of 'None' (line 1231)
        None_318835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 16), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1231, 15), list_318834, None_318835)
        
        # Getting the type of 'self' (line 1231)
        self_318836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 22), 'self')
        # Obtaining the member 'yearlen' of a type (line 1231)
        yearlen_318837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 22), self_318836, 'yearlen')
        # Applying the binary operator '*' (line 1231)
        result_mul_318838 = python_operator(stypy.reporting.localization.Localization(__file__, 1231, 15), '*', list_318834, yearlen_318837)
        
        # Assigning a type to the variable 'dset' (line 1231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 8), 'dset', result_mul_318838)
        
        # Assigning a Subscript to a Tuple (line 1232):
        
        # Assigning a Subscript to a Name (line 1232):
        
        # Obtaining the type of the subscript
        int_318839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 8), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'month' (line 1232)
        month_318840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 33), 'month')
        int_318841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 39), 'int')
        # Applying the binary operator '-' (line 1232)
        result_sub_318842 = python_operator(stypy.reporting.localization.Localization(__file__, 1232, 33), '-', month_318840, int_318841)
        
        # Getting the type of 'month' (line 1232)
        month_318843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 41), 'month')
        int_318844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 47), 'int')
        # Applying the binary operator '+' (line 1232)
        result_add_318845 = python_operator(stypy.reporting.localization.Localization(__file__, 1232, 41), '+', month_318843, int_318844)
        
        slice_318846 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1232, 21), result_sub_318842, result_add_318845, None)
        # Getting the type of 'self' (line 1232)
        self_318847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 21), 'self')
        # Obtaining the member 'mrange' of a type (line 1232)
        mrange_318848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 21), self_318847, 'mrange')
        # Obtaining the member '__getitem__' of a type (line 1232)
        getitem___318849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 21), mrange_318848, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1232)
        subscript_call_result_318850 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 21), getitem___318849, slice_318846)
        
        # Obtaining the member '__getitem__' of a type (line 1232)
        getitem___318851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 8), subscript_call_result_318850, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1232)
        subscript_call_result_318852 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 8), getitem___318851, int_318839)
        
        # Assigning a type to the variable 'tuple_var_assignment_315127' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'tuple_var_assignment_315127', subscript_call_result_318852)
        
        # Assigning a Subscript to a Name (line 1232):
        
        # Obtaining the type of the subscript
        int_318853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 8), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'month' (line 1232)
        month_318854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 33), 'month')
        int_318855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 39), 'int')
        # Applying the binary operator '-' (line 1232)
        result_sub_318856 = python_operator(stypy.reporting.localization.Localization(__file__, 1232, 33), '-', month_318854, int_318855)
        
        # Getting the type of 'month' (line 1232)
        month_318857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 41), 'month')
        int_318858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 47), 'int')
        # Applying the binary operator '+' (line 1232)
        result_add_318859 = python_operator(stypy.reporting.localization.Localization(__file__, 1232, 41), '+', month_318857, int_318858)
        
        slice_318860 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1232, 21), result_sub_318856, result_add_318859, None)
        # Getting the type of 'self' (line 1232)
        self_318861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 21), 'self')
        # Obtaining the member 'mrange' of a type (line 1232)
        mrange_318862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 21), self_318861, 'mrange')
        # Obtaining the member '__getitem__' of a type (line 1232)
        getitem___318863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 21), mrange_318862, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1232)
        subscript_call_result_318864 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 21), getitem___318863, slice_318860)
        
        # Obtaining the member '__getitem__' of a type (line 1232)
        getitem___318865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 8), subscript_call_result_318864, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1232)
        subscript_call_result_318866 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 8), getitem___318865, int_318853)
        
        # Assigning a type to the variable 'tuple_var_assignment_315128' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'tuple_var_assignment_315128', subscript_call_result_318866)
        
        # Assigning a Name to a Name (line 1232):
        # Getting the type of 'tuple_var_assignment_315127' (line 1232)
        tuple_var_assignment_315127_318867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'tuple_var_assignment_315127')
        # Assigning a type to the variable 'start' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'start', tuple_var_assignment_315127_318867)
        
        # Assigning a Name to a Name (line 1232):
        # Getting the type of 'tuple_var_assignment_315128' (line 1232)
        tuple_var_assignment_315128_318868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'tuple_var_assignment_315128')
        # Assigning a type to the variable 'end' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 15), 'end', tuple_var_assignment_315128_318868)
        
        
        # Call to range(...): (line 1233)
        # Processing the call arguments (line 1233)
        # Getting the type of 'start' (line 1233)
        start_318870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 23), 'start', False)
        # Getting the type of 'end' (line 1233)
        end_318871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 30), 'end', False)
        # Processing the call keyword arguments (line 1233)
        kwargs_318872 = {}
        # Getting the type of 'range' (line 1233)
        range_318869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 17), 'range', False)
        # Calling range(args, kwargs) (line 1233)
        range_call_result_318873 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 17), range_318869, *[start_318870, end_318871], **kwargs_318872)
        
        # Testing the type of a for loop iterable (line 1233)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1233, 8), range_call_result_318873)
        # Getting the type of the for loop variable (line 1233)
        for_loop_var_318874 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1233, 8), range_call_result_318873)
        # Assigning a type to the variable 'i' (line 1233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 8), 'i', for_loop_var_318874)
        # SSA begins for a for statement (line 1233)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Subscript (line 1234):
        
        # Assigning a Name to a Subscript (line 1234):
        # Getting the type of 'i' (line 1234)
        i_318875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 22), 'i')
        # Getting the type of 'dset' (line 1234)
        dset_318876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 12), 'dset')
        # Getting the type of 'i' (line 1234)
        i_318877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 17), 'i')
        # Storing an element on a container (line 1234)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1234, 12), dset_318876, (i_318877, i_318875))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1235)
        tuple_318878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1235)
        # Adding element type (line 1235)
        # Getting the type of 'dset' (line 1235)
        dset_318879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 15), 'dset')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1235, 15), tuple_318878, dset_318879)
        # Adding element type (line 1235)
        # Getting the type of 'start' (line 1235)
        start_318880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 21), 'start')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1235, 15), tuple_318878, start_318880)
        # Adding element type (line 1235)
        # Getting the type of 'end' (line 1235)
        end_318881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 28), 'end')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1235, 15), tuple_318878, end_318881)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'stypy_return_type', tuple_318878)
        
        # ################# End of 'mdayset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mdayset' in the type store
        # Getting the type of 'stypy_return_type' (line 1230)
        stypy_return_type_318882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318882)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mdayset'
        return stypy_return_type_318882


    @norecursion
    def wdayset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'wdayset'
        module_type_store = module_type_store.open_function_context('wdayset', 1237, 4, False)
        # Assigning a type to the variable 'self' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _iterinfo.wdayset.__dict__.__setitem__('stypy_localization', localization)
        _iterinfo.wdayset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _iterinfo.wdayset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _iterinfo.wdayset.__dict__.__setitem__('stypy_function_name', '_iterinfo.wdayset')
        _iterinfo.wdayset.__dict__.__setitem__('stypy_param_names_list', ['year', 'month', 'day'])
        _iterinfo.wdayset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _iterinfo.wdayset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _iterinfo.wdayset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _iterinfo.wdayset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _iterinfo.wdayset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _iterinfo.wdayset.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.wdayset', ['year', 'month', 'day'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'wdayset', localization, ['year', 'month', 'day'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'wdayset(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1239):
        
        # Assigning a BinOp to a Name (line 1239):
        
        # Obtaining an instance of the builtin type 'list' (line 1239)
        list_318883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1239)
        # Adding element type (line 1239)
        # Getting the type of 'None' (line 1239)
        None_318884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 16), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1239, 15), list_318883, None_318884)
        
        # Getting the type of 'self' (line 1239)
        self_318885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 23), 'self')
        # Obtaining the member 'yearlen' of a type (line 1239)
        yearlen_318886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 23), self_318885, 'yearlen')
        int_318887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 36), 'int')
        # Applying the binary operator '+' (line 1239)
        result_add_318888 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 23), '+', yearlen_318886, int_318887)
        
        # Applying the binary operator '*' (line 1239)
        result_mul_318889 = python_operator(stypy.reporting.localization.Localization(__file__, 1239, 15), '*', list_318883, result_add_318888)
        
        # Assigning a type to the variable 'dset' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'dset', result_mul_318889)
        
        # Assigning a BinOp to a Name (line 1240):
        
        # Assigning a BinOp to a Name (line 1240):
        
        # Call to toordinal(...): (line 1240)
        # Processing the call keyword arguments (line 1240)
        kwargs_318898 = {}
        
        # Call to date(...): (line 1240)
        # Processing the call arguments (line 1240)
        # Getting the type of 'year' (line 1240)
        year_318892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 26), 'year', False)
        # Getting the type of 'month' (line 1240)
        month_318893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 32), 'month', False)
        # Getting the type of 'day' (line 1240)
        day_318894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 39), 'day', False)
        # Processing the call keyword arguments (line 1240)
        kwargs_318895 = {}
        # Getting the type of 'datetime' (line 1240)
        datetime_318890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 12), 'datetime', False)
        # Obtaining the member 'date' of a type (line 1240)
        date_318891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 12), datetime_318890, 'date')
        # Calling date(args, kwargs) (line 1240)
        date_call_result_318896 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 12), date_318891, *[year_318892, month_318893, day_318894], **kwargs_318895)
        
        # Obtaining the member 'toordinal' of a type (line 1240)
        toordinal_318897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 12), date_call_result_318896, 'toordinal')
        # Calling toordinal(args, kwargs) (line 1240)
        toordinal_call_result_318899 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 12), toordinal_318897, *[], **kwargs_318898)
        
        # Getting the type of 'self' (line 1240)
        self_318900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 56), 'self')
        # Obtaining the member 'yearordinal' of a type (line 1240)
        yearordinal_318901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 56), self_318900, 'yearordinal')
        # Applying the binary operator '-' (line 1240)
        result_sub_318902 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 12), '-', toordinal_call_result_318899, yearordinal_318901)
        
        # Assigning a type to the variable 'i' (line 1240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'i', result_sub_318902)
        
        # Assigning a Name to a Name (line 1241):
        
        # Assigning a Name to a Name (line 1241):
        # Getting the type of 'i' (line 1241)
        i_318903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 16), 'i')
        # Assigning a type to the variable 'start' (line 1241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 8), 'start', i_318903)
        
        
        # Call to range(...): (line 1242)
        # Processing the call arguments (line 1242)
        int_318905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 23), 'int')
        # Processing the call keyword arguments (line 1242)
        kwargs_318906 = {}
        # Getting the type of 'range' (line 1242)
        range_318904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 17), 'range', False)
        # Calling range(args, kwargs) (line 1242)
        range_call_result_318907 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 17), range_318904, *[int_318905], **kwargs_318906)
        
        # Testing the type of a for loop iterable (line 1242)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1242, 8), range_call_result_318907)
        # Getting the type of the for loop variable (line 1242)
        for_loop_var_318908 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1242, 8), range_call_result_318907)
        # Assigning a type to the variable 'j' (line 1242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 8), 'j', for_loop_var_318908)
        # SSA begins for a for statement (line 1242)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Subscript (line 1243):
        
        # Assigning a Name to a Subscript (line 1243):
        # Getting the type of 'i' (line 1243)
        i_318909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 22), 'i')
        # Getting the type of 'dset' (line 1243)
        dset_318910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'dset')
        # Getting the type of 'i' (line 1243)
        i_318911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 17), 'i')
        # Storing an element on a container (line 1243)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1243, 12), dset_318910, (i_318911, i_318909))
        
        # Getting the type of 'i' (line 1244)
        i_318912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 12), 'i')
        int_318913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1244, 17), 'int')
        # Applying the binary operator '+=' (line 1244)
        result_iadd_318914 = python_operator(stypy.reporting.localization.Localization(__file__, 1244, 12), '+=', i_318912, int_318913)
        # Assigning a type to the variable 'i' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 12), 'i', result_iadd_318914)
        
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1248)
        i_318915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 29), 'i')
        # Getting the type of 'self' (line 1248)
        self_318916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 15), 'self')
        # Obtaining the member 'wdaymask' of a type (line 1248)
        wdaymask_318917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 15), self_318916, 'wdaymask')
        # Obtaining the member '__getitem__' of a type (line 1248)
        getitem___318918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 15), wdaymask_318917, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1248)
        subscript_call_result_318919 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 15), getitem___318918, i_318915)
        
        # Getting the type of 'self' (line 1248)
        self_318920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 35), 'self')
        # Obtaining the member 'rrule' of a type (line 1248)
        rrule_318921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 35), self_318920, 'rrule')
        # Obtaining the member '_wkst' of a type (line 1248)
        _wkst_318922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 35), rrule_318921, '_wkst')
        # Applying the binary operator '==' (line 1248)
        result_eq_318923 = python_operator(stypy.reporting.localization.Localization(__file__, 1248, 15), '==', subscript_call_result_318919, _wkst_318922)
        
        # Testing the type of an if condition (line 1248)
        if_condition_318924 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1248, 12), result_eq_318923)
        # Assigning a type to the variable 'if_condition_318924' (line 1248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 12), 'if_condition_318924', if_condition_318924)
        # SSA begins for if statement (line 1248)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1248)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1250)
        tuple_318925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1250, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1250)
        # Adding element type (line 1250)
        # Getting the type of 'dset' (line 1250)
        dset_318926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 15), 'dset')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1250, 15), tuple_318925, dset_318926)
        # Adding element type (line 1250)
        # Getting the type of 'start' (line 1250)
        start_318927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 21), 'start')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1250, 15), tuple_318925, start_318927)
        # Adding element type (line 1250)
        # Getting the type of 'i' (line 1250)
        i_318928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 28), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1250, 15), tuple_318925, i_318928)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 8), 'stypy_return_type', tuple_318925)
        
        # ################# End of 'wdayset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'wdayset' in the type store
        # Getting the type of 'stypy_return_type' (line 1237)
        stypy_return_type_318929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318929)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'wdayset'
        return stypy_return_type_318929


    @norecursion
    def ddayset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'ddayset'
        module_type_store = module_type_store.open_function_context('ddayset', 1252, 4, False)
        # Assigning a type to the variable 'self' (line 1253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _iterinfo.ddayset.__dict__.__setitem__('stypy_localization', localization)
        _iterinfo.ddayset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _iterinfo.ddayset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _iterinfo.ddayset.__dict__.__setitem__('stypy_function_name', '_iterinfo.ddayset')
        _iterinfo.ddayset.__dict__.__setitem__('stypy_param_names_list', ['year', 'month', 'day'])
        _iterinfo.ddayset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _iterinfo.ddayset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _iterinfo.ddayset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _iterinfo.ddayset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _iterinfo.ddayset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _iterinfo.ddayset.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.ddayset', ['year', 'month', 'day'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ddayset', localization, ['year', 'month', 'day'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ddayset(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1253):
        
        # Assigning a BinOp to a Name (line 1253):
        
        # Obtaining an instance of the builtin type 'list' (line 1253)
        list_318930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1253)
        # Adding element type (line 1253)
        # Getting the type of 'None' (line 1253)
        None_318931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 16), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1253, 15), list_318930, None_318931)
        
        # Getting the type of 'self' (line 1253)
        self_318932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 24), 'self')
        # Obtaining the member 'yearlen' of a type (line 1253)
        yearlen_318933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1253, 24), self_318932, 'yearlen')
        # Applying the binary operator '*' (line 1253)
        result_mul_318934 = python_operator(stypy.reporting.localization.Localization(__file__, 1253, 15), '*', list_318930, yearlen_318933)
        
        # Assigning a type to the variable 'dset' (line 1253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 8), 'dset', result_mul_318934)
        
        # Assigning a BinOp to a Name (line 1254):
        
        # Assigning a BinOp to a Name (line 1254):
        
        # Call to toordinal(...): (line 1254)
        # Processing the call keyword arguments (line 1254)
        kwargs_318943 = {}
        
        # Call to date(...): (line 1254)
        # Processing the call arguments (line 1254)
        # Getting the type of 'year' (line 1254)
        year_318937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 26), 'year', False)
        # Getting the type of 'month' (line 1254)
        month_318938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 32), 'month', False)
        # Getting the type of 'day' (line 1254)
        day_318939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 39), 'day', False)
        # Processing the call keyword arguments (line 1254)
        kwargs_318940 = {}
        # Getting the type of 'datetime' (line 1254)
        datetime_318935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 12), 'datetime', False)
        # Obtaining the member 'date' of a type (line 1254)
        date_318936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 12), datetime_318935, 'date')
        # Calling date(args, kwargs) (line 1254)
        date_call_result_318941 = invoke(stypy.reporting.localization.Localization(__file__, 1254, 12), date_318936, *[year_318937, month_318938, day_318939], **kwargs_318940)
        
        # Obtaining the member 'toordinal' of a type (line 1254)
        toordinal_318942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 12), date_call_result_318941, 'toordinal')
        # Calling toordinal(args, kwargs) (line 1254)
        toordinal_call_result_318944 = invoke(stypy.reporting.localization.Localization(__file__, 1254, 12), toordinal_318942, *[], **kwargs_318943)
        
        # Getting the type of 'self' (line 1254)
        self_318945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 58), 'self')
        # Obtaining the member 'yearordinal' of a type (line 1254)
        yearordinal_318946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 58), self_318945, 'yearordinal')
        # Applying the binary operator '-' (line 1254)
        result_sub_318947 = python_operator(stypy.reporting.localization.Localization(__file__, 1254, 12), '-', toordinal_call_result_318944, yearordinal_318946)
        
        # Assigning a type to the variable 'i' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 8), 'i', result_sub_318947)
        
        # Assigning a Name to a Subscript (line 1255):
        
        # Assigning a Name to a Subscript (line 1255):
        # Getting the type of 'i' (line 1255)
        i_318948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 18), 'i')
        # Getting the type of 'dset' (line 1255)
        dset_318949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'dset')
        # Getting the type of 'i' (line 1255)
        i_318950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 13), 'i')
        # Storing an element on a container (line 1255)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1255, 8), dset_318949, (i_318950, i_318948))
        
        # Obtaining an instance of the builtin type 'tuple' (line 1256)
        tuple_318951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1256)
        # Adding element type (line 1256)
        # Getting the type of 'dset' (line 1256)
        dset_318952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 15), 'dset')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1256, 15), tuple_318951, dset_318952)
        # Adding element type (line 1256)
        # Getting the type of 'i' (line 1256)
        i_318953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 21), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1256, 15), tuple_318951, i_318953)
        # Adding element type (line 1256)
        # Getting the type of 'i' (line 1256)
        i_318954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 24), 'i')
        int_318955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 28), 'int')
        # Applying the binary operator '+' (line 1256)
        result_add_318956 = python_operator(stypy.reporting.localization.Localization(__file__, 1256, 24), '+', i_318954, int_318955)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1256, 15), tuple_318951, result_add_318956)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 8), 'stypy_return_type', tuple_318951)
        
        # ################# End of 'ddayset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ddayset' in the type store
        # Getting the type of 'stypy_return_type' (line 1252)
        stypy_return_type_318957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318957)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ddayset'
        return stypy_return_type_318957


    @norecursion
    def htimeset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'htimeset'
        module_type_store = module_type_store.open_function_context('htimeset', 1258, 4, False)
        # Assigning a type to the variable 'self' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _iterinfo.htimeset.__dict__.__setitem__('stypy_localization', localization)
        _iterinfo.htimeset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _iterinfo.htimeset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _iterinfo.htimeset.__dict__.__setitem__('stypy_function_name', '_iterinfo.htimeset')
        _iterinfo.htimeset.__dict__.__setitem__('stypy_param_names_list', ['hour', 'minute', 'second'])
        _iterinfo.htimeset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _iterinfo.htimeset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _iterinfo.htimeset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _iterinfo.htimeset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _iterinfo.htimeset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _iterinfo.htimeset.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.htimeset', ['hour', 'minute', 'second'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'htimeset', localization, ['hour', 'minute', 'second'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'htimeset(...)' code ##################

        
        # Assigning a List to a Name (line 1259):
        
        # Assigning a List to a Name (line 1259):
        
        # Obtaining an instance of the builtin type 'list' (line 1259)
        list_318958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1259)
        
        # Assigning a type to the variable 'tset' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 8), 'tset', list_318958)
        
        # Assigning a Attribute to a Name (line 1260):
        
        # Assigning a Attribute to a Name (line 1260):
        # Getting the type of 'self' (line 1260)
        self_318959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 13), 'self')
        # Obtaining the member 'rrule' of a type (line 1260)
        rrule_318960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 13), self_318959, 'rrule')
        # Assigning a type to the variable 'rr' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 8), 'rr', rrule_318960)
        
        # Getting the type of 'rr' (line 1261)
        rr_318961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 22), 'rr')
        # Obtaining the member '_byminute' of a type (line 1261)
        _byminute_318962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 22), rr_318961, '_byminute')
        # Testing the type of a for loop iterable (line 1261)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1261, 8), _byminute_318962)
        # Getting the type of the for loop variable (line 1261)
        for_loop_var_318963 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1261, 8), _byminute_318962)
        # Assigning a type to the variable 'minute' (line 1261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 8), 'minute', for_loop_var_318963)
        # SSA begins for a for statement (line 1261)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'rr' (line 1262)
        rr_318964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 26), 'rr')
        # Obtaining the member '_bysecond' of a type (line 1262)
        _bysecond_318965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 26), rr_318964, '_bysecond')
        # Testing the type of a for loop iterable (line 1262)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1262, 12), _bysecond_318965)
        # Getting the type of the for loop variable (line 1262)
        for_loop_var_318966 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1262, 12), _bysecond_318965)
        # Assigning a type to the variable 'second' (line 1262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 12), 'second', for_loop_var_318966)
        # SSA begins for a for statement (line 1262)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 1263)
        # Processing the call arguments (line 1263)
        
        # Call to time(...): (line 1263)
        # Processing the call arguments (line 1263)
        # Getting the type of 'hour' (line 1263)
        hour_318971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 42), 'hour', False)
        # Getting the type of 'minute' (line 1263)
        minute_318972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 48), 'minute', False)
        # Getting the type of 'second' (line 1263)
        second_318973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 56), 'second', False)
        # Processing the call keyword arguments (line 1263)
        # Getting the type of 'rr' (line 1264)
        rr_318974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 49), 'rr', False)
        # Obtaining the member '_tzinfo' of a type (line 1264)
        _tzinfo_318975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 49), rr_318974, '_tzinfo')
        keyword_318976 = _tzinfo_318975
        kwargs_318977 = {'tzinfo': keyword_318976}
        # Getting the type of 'datetime' (line 1263)
        datetime_318969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 28), 'datetime', False)
        # Obtaining the member 'time' of a type (line 1263)
        time_318970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 28), datetime_318969, 'time')
        # Calling time(args, kwargs) (line 1263)
        time_call_result_318978 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 28), time_318970, *[hour_318971, minute_318972, second_318973], **kwargs_318977)
        
        # Processing the call keyword arguments (line 1263)
        kwargs_318979 = {}
        # Getting the type of 'tset' (line 1263)
        tset_318967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 16), 'tset', False)
        # Obtaining the member 'append' of a type (line 1263)
        append_318968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 16), tset_318967, 'append')
        # Calling append(args, kwargs) (line 1263)
        append_call_result_318980 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 16), append_318968, *[time_call_result_318978], **kwargs_318979)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to sort(...): (line 1265)
        # Processing the call keyword arguments (line 1265)
        kwargs_318983 = {}
        # Getting the type of 'tset' (line 1265)
        tset_318981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 8), 'tset', False)
        # Obtaining the member 'sort' of a type (line 1265)
        sort_318982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 8), tset_318981, 'sort')
        # Calling sort(args, kwargs) (line 1265)
        sort_call_result_318984 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 8), sort_318982, *[], **kwargs_318983)
        
        # Getting the type of 'tset' (line 1266)
        tset_318985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 15), 'tset')
        # Assigning a type to the variable 'stypy_return_type' (line 1266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'stypy_return_type', tset_318985)
        
        # ################# End of 'htimeset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'htimeset' in the type store
        # Getting the type of 'stypy_return_type' (line 1258)
        stypy_return_type_318986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_318986)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'htimeset'
        return stypy_return_type_318986


    @norecursion
    def mtimeset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'mtimeset'
        module_type_store = module_type_store.open_function_context('mtimeset', 1268, 4, False)
        # Assigning a type to the variable 'self' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_localization', localization)
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_function_name', '_iterinfo.mtimeset')
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_param_names_list', ['hour', 'minute', 'second'])
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _iterinfo.mtimeset.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.mtimeset', ['hour', 'minute', 'second'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'mtimeset', localization, ['hour', 'minute', 'second'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'mtimeset(...)' code ##################

        
        # Assigning a List to a Name (line 1269):
        
        # Assigning a List to a Name (line 1269):
        
        # Obtaining an instance of the builtin type 'list' (line 1269)
        list_318987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1269)
        
        # Assigning a type to the variable 'tset' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 8), 'tset', list_318987)
        
        # Assigning a Attribute to a Name (line 1270):
        
        # Assigning a Attribute to a Name (line 1270):
        # Getting the type of 'self' (line 1270)
        self_318988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 13), 'self')
        # Obtaining the member 'rrule' of a type (line 1270)
        rrule_318989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 13), self_318988, 'rrule')
        # Assigning a type to the variable 'rr' (line 1270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 8), 'rr', rrule_318989)
        
        # Getting the type of 'rr' (line 1271)
        rr_318990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 22), 'rr')
        # Obtaining the member '_bysecond' of a type (line 1271)
        _bysecond_318991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 22), rr_318990, '_bysecond')
        # Testing the type of a for loop iterable (line 1271)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1271, 8), _bysecond_318991)
        # Getting the type of the for loop variable (line 1271)
        for_loop_var_318992 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1271, 8), _bysecond_318991)
        # Assigning a type to the variable 'second' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 8), 'second', for_loop_var_318992)
        # SSA begins for a for statement (line 1271)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 1272)
        # Processing the call arguments (line 1272)
        
        # Call to time(...): (line 1272)
        # Processing the call arguments (line 1272)
        # Getting the type of 'hour' (line 1272)
        hour_318997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 38), 'hour', False)
        # Getting the type of 'minute' (line 1272)
        minute_318998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 44), 'minute', False)
        # Getting the type of 'second' (line 1272)
        second_318999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 52), 'second', False)
        # Processing the call keyword arguments (line 1272)
        # Getting the type of 'rr' (line 1272)
        rr_319000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 67), 'rr', False)
        # Obtaining the member '_tzinfo' of a type (line 1272)
        _tzinfo_319001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 67), rr_319000, '_tzinfo')
        keyword_319002 = _tzinfo_319001
        kwargs_319003 = {'tzinfo': keyword_319002}
        # Getting the type of 'datetime' (line 1272)
        datetime_318995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 24), 'datetime', False)
        # Obtaining the member 'time' of a type (line 1272)
        time_318996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 24), datetime_318995, 'time')
        # Calling time(args, kwargs) (line 1272)
        time_call_result_319004 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 24), time_318996, *[hour_318997, minute_318998, second_318999], **kwargs_319003)
        
        # Processing the call keyword arguments (line 1272)
        kwargs_319005 = {}
        # Getting the type of 'tset' (line 1272)
        tset_318993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'tset', False)
        # Obtaining the member 'append' of a type (line 1272)
        append_318994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 12), tset_318993, 'append')
        # Calling append(args, kwargs) (line 1272)
        append_call_result_319006 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 12), append_318994, *[time_call_result_319004], **kwargs_319005)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to sort(...): (line 1273)
        # Processing the call keyword arguments (line 1273)
        kwargs_319009 = {}
        # Getting the type of 'tset' (line 1273)
        tset_319007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 8), 'tset', False)
        # Obtaining the member 'sort' of a type (line 1273)
        sort_319008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 8), tset_319007, 'sort')
        # Calling sort(args, kwargs) (line 1273)
        sort_call_result_319010 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 8), sort_319008, *[], **kwargs_319009)
        
        # Getting the type of 'tset' (line 1274)
        tset_319011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 15), 'tset')
        # Assigning a type to the variable 'stypy_return_type' (line 1274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 8), 'stypy_return_type', tset_319011)
        
        # ################# End of 'mtimeset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'mtimeset' in the type store
        # Getting the type of 'stypy_return_type' (line 1268)
        stypy_return_type_319012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319012)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'mtimeset'
        return stypy_return_type_319012


    @norecursion
    def stimeset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'stimeset'
        module_type_store = module_type_store.open_function_context('stimeset', 1276, 4, False)
        # Assigning a type to the variable 'self' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _iterinfo.stimeset.__dict__.__setitem__('stypy_localization', localization)
        _iterinfo.stimeset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _iterinfo.stimeset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _iterinfo.stimeset.__dict__.__setitem__('stypy_function_name', '_iterinfo.stimeset')
        _iterinfo.stimeset.__dict__.__setitem__('stypy_param_names_list', ['hour', 'minute', 'second'])
        _iterinfo.stimeset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _iterinfo.stimeset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _iterinfo.stimeset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _iterinfo.stimeset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _iterinfo.stimeset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _iterinfo.stimeset.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_iterinfo.stimeset', ['hour', 'minute', 'second'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'stimeset', localization, ['hour', 'minute', 'second'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'stimeset(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 1277)
        tuple_319013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1277)
        # Adding element type (line 1277)
        
        # Call to time(...): (line 1277)
        # Processing the call arguments (line 1277)
        # Getting the type of 'hour' (line 1277)
        hour_319016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 30), 'hour', False)
        # Getting the type of 'minute' (line 1277)
        minute_319017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 36), 'minute', False)
        # Getting the type of 'second' (line 1277)
        second_319018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 44), 'second', False)
        # Processing the call keyword arguments (line 1277)
        # Getting the type of 'self' (line 1278)
        self_319019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 23), 'self', False)
        # Obtaining the member 'rrule' of a type (line 1278)
        rrule_319020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 23), self_319019, 'rrule')
        # Obtaining the member '_tzinfo' of a type (line 1278)
        _tzinfo_319021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 23), rrule_319020, '_tzinfo')
        keyword_319022 = _tzinfo_319021
        kwargs_319023 = {'tzinfo': keyword_319022}
        # Getting the type of 'datetime' (line 1277)
        datetime_319014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 16), 'datetime', False)
        # Obtaining the member 'time' of a type (line 1277)
        time_319015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 16), datetime_319014, 'time')
        # Calling time(args, kwargs) (line 1277)
        time_call_result_319024 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 16), time_319015, *[hour_319016, minute_319017, second_319018], **kwargs_319023)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1277, 16), tuple_319013, time_call_result_319024)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 8), 'stypy_return_type', tuple_319013)
        
        # ################# End of 'stimeset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'stimeset' in the type store
        # Getting the type of 'stypy_return_type' (line 1276)
        stypy_return_type_319025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319025)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'stimeset'
        return stypy_return_type_319025


# Assigning a type to the variable '_iterinfo' (line 1086)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 0), '_iterinfo', _iterinfo)

# Assigning a List to a Name (line 1087):

# Obtaining an instance of the builtin type 'list' (line 1087)
list_319026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 16), 'list')
# Adding type elements to the builtin type 'list' instance (line 1087)
# Adding element type (line 1087)
str_319027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 17), 'str', 'rrule')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319027)
# Adding element type (line 1087)
str_319028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 26), 'str', 'lastyear')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319028)
# Adding element type (line 1087)
str_319029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1087, 38), 'str', 'lastmonth')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319029)
# Adding element type (line 1087)
str_319030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 17), 'str', 'yearlen')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319030)
# Adding element type (line 1087)
str_319031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 28), 'str', 'nextyearlen')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319031)
# Adding element type (line 1087)
str_319032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 43), 'str', 'yearordinal')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319032)
# Adding element type (line 1087)
str_319033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 58), 'str', 'yearweekday')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319033)
# Adding element type (line 1087)
str_319034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 17), 'str', 'mmask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319034)
# Adding element type (line 1087)
str_319035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 26), 'str', 'mrange')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319035)
# Adding element type (line 1087)
str_319036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 36), 'str', 'mdaymask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319036)
# Adding element type (line 1087)
str_319037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 48), 'str', 'nmdaymask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319037)
# Adding element type (line 1087)
str_319038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 17), 'str', 'wdaymask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319038)
# Adding element type (line 1087)
str_319039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 29), 'str', 'wnomask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319039)
# Adding element type (line 1087)
str_319040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 40), 'str', 'nwdaymask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319040)
# Adding element type (line 1087)
str_319041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 53), 'str', 'eastermask')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1087, 16), list_319026, str_319041)

# Getting the type of '_iterinfo'
_iterinfo_319042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_iterinfo')
# Setting the type of the member '__slots__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _iterinfo_319042, '__slots__', list_319026)
# Declaration of the 'rruleset' class
# Getting the type of 'rrulebase' (line 1281)
rrulebase_319043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 15), 'rrulebase')

class rruleset(rrulebase_319043, ):
    str_319044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, (-1)), 'str', ' The rruleset type allows more complex recurrence setups, mixing\n    multiple rules, dates, exclusion rules, and exclusion dates. The type\n    constructor takes the following keyword arguments:\n\n    :param cache: If True, caching of results will be enabled, improving\n                  performance of multiple queries considerably. ')
    # Declaration of the '_genitem' class

    class _genitem(object, ):

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 1290, 8, False)
            # Assigning a type to the variable 'self' (line 1291)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_genitem.__init__', ['genlist', 'gen'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, ['genlist', 'gen'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            
            
            # SSA begins for try-except statement (line 1291)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Attribute (line 1292):
            
            # Assigning a Call to a Attribute (line 1292):
            
            # Call to advance_iterator(...): (line 1292)
            # Processing the call arguments (line 1292)
            # Getting the type of 'gen' (line 1292)
            gen_319046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 43), 'gen', False)
            # Processing the call keyword arguments (line 1292)
            kwargs_319047 = {}
            # Getting the type of 'advance_iterator' (line 1292)
            advance_iterator_319045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 26), 'advance_iterator', False)
            # Calling advance_iterator(args, kwargs) (line 1292)
            advance_iterator_call_result_319048 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 26), advance_iterator_319045, *[gen_319046], **kwargs_319047)
            
            # Getting the type of 'self' (line 1292)
            self_319049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 16), 'self')
            # Setting the type of the member 'dt' of a type (line 1292)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 16), self_319049, 'dt', advance_iterator_call_result_319048)
            
            # Call to append(...): (line 1293)
            # Processing the call arguments (line 1293)
            # Getting the type of 'self' (line 1293)
            self_319052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 31), 'self', False)
            # Processing the call keyword arguments (line 1293)
            kwargs_319053 = {}
            # Getting the type of 'genlist' (line 1293)
            genlist_319050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 16), 'genlist', False)
            # Obtaining the member 'append' of a type (line 1293)
            append_319051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 16), genlist_319050, 'append')
            # Calling append(args, kwargs) (line 1293)
            append_call_result_319054 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 16), append_319051, *[self_319052], **kwargs_319053)
            
            # SSA branch for the except part of a try statement (line 1291)
            # SSA branch for the except 'StopIteration' branch of a try statement (line 1291)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 1291)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Attribute (line 1296):
            
            # Assigning a Name to a Attribute (line 1296):
            # Getting the type of 'genlist' (line 1296)
            genlist_319055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 27), 'genlist')
            # Getting the type of 'self' (line 1296)
            self_319056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 12), 'self')
            # Setting the type of the member 'genlist' of a type (line 1296)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 12), self_319056, 'genlist', genlist_319055)
            
            # Assigning a Name to a Attribute (line 1297):
            
            # Assigning a Name to a Attribute (line 1297):
            # Getting the type of 'gen' (line 1297)
            gen_319057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 23), 'gen')
            # Getting the type of 'self' (line 1297)
            self_319058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'self')
            # Setting the type of the member 'gen' of a type (line 1297)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 12), self_319058, 'gen', gen_319057)
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()


        @norecursion
        def __next__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__next__'
            module_type_store = module_type_store.open_function_context('__next__', 1299, 8, False)
            # Assigning a type to the variable 'self' (line 1300)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _genitem.__next__.__dict__.__setitem__('stypy_localization', localization)
            _genitem.__next__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _genitem.__next__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _genitem.__next__.__dict__.__setitem__('stypy_function_name', '_genitem.__next__')
            _genitem.__next__.__dict__.__setitem__('stypy_param_names_list', [])
            _genitem.__next__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _genitem.__next__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _genitem.__next__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _genitem.__next__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _genitem.__next__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _genitem.__next__.__dict__.__setitem__('stypy_declared_arg_number', 1)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_genitem.__next__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__next__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__next__(...)' code ##################

            
            
            # SSA begins for try-except statement (line 1300)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Attribute (line 1301):
            
            # Assigning a Call to a Attribute (line 1301):
            
            # Call to advance_iterator(...): (line 1301)
            # Processing the call arguments (line 1301)
            # Getting the type of 'self' (line 1301)
            self_319060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 43), 'self', False)
            # Obtaining the member 'gen' of a type (line 1301)
            gen_319061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 43), self_319060, 'gen')
            # Processing the call keyword arguments (line 1301)
            kwargs_319062 = {}
            # Getting the type of 'advance_iterator' (line 1301)
            advance_iterator_319059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 26), 'advance_iterator', False)
            # Calling advance_iterator(args, kwargs) (line 1301)
            advance_iterator_call_result_319063 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 26), advance_iterator_319059, *[gen_319061], **kwargs_319062)
            
            # Getting the type of 'self' (line 1301)
            self_319064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 16), 'self')
            # Setting the type of the member 'dt' of a type (line 1301)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 16), self_319064, 'dt', advance_iterator_call_result_319063)
            # SSA branch for the except part of a try statement (line 1300)
            # SSA branch for the except 'StopIteration' branch of a try statement (line 1300)
            module_type_store.open_ssa_branch('except')
            
            
            
            # Obtaining the type of the subscript
            int_319065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 32), 'int')
            # Getting the type of 'self' (line 1303)
            self_319066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 19), 'self')
            # Obtaining the member 'genlist' of a type (line 1303)
            genlist_319067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 19), self_319066, 'genlist')
            # Obtaining the member '__getitem__' of a type (line 1303)
            getitem___319068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 19), genlist_319067, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1303)
            subscript_call_result_319069 = invoke(stypy.reporting.localization.Localization(__file__, 1303, 19), getitem___319068, int_319065)
            
            # Getting the type of 'self' (line 1303)
            self_319070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 38), 'self')
            # Applying the binary operator 'is' (line 1303)
            result_is__319071 = python_operator(stypy.reporting.localization.Localization(__file__, 1303, 19), 'is', subscript_call_result_319069, self_319070)
            
            # Testing the type of an if condition (line 1303)
            if_condition_319072 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1303, 16), result_is__319071)
            # Assigning a type to the variable 'if_condition_319072' (line 1303)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 16), 'if_condition_319072', if_condition_319072)
            # SSA begins for if statement (line 1303)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to heappop(...): (line 1304)
            # Processing the call arguments (line 1304)
            # Getting the type of 'self' (line 1304)
            self_319075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 34), 'self', False)
            # Obtaining the member 'genlist' of a type (line 1304)
            genlist_319076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 34), self_319075, 'genlist')
            # Processing the call keyword arguments (line 1304)
            kwargs_319077 = {}
            # Getting the type of 'heapq' (line 1304)
            heapq_319073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 20), 'heapq', False)
            # Obtaining the member 'heappop' of a type (line 1304)
            heappop_319074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 20), heapq_319073, 'heappop')
            # Calling heappop(args, kwargs) (line 1304)
            heappop_call_result_319078 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 20), heappop_319074, *[genlist_319076], **kwargs_319077)
            
            # SSA branch for the else part of an if statement (line 1303)
            module_type_store.open_ssa_branch('else')
            
            # Call to remove(...): (line 1306)
            # Processing the call arguments (line 1306)
            # Getting the type of 'self' (line 1306)
            self_319082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 40), 'self', False)
            # Processing the call keyword arguments (line 1306)
            kwargs_319083 = {}
            # Getting the type of 'self' (line 1306)
            self_319079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 20), 'self', False)
            # Obtaining the member 'genlist' of a type (line 1306)
            genlist_319080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 20), self_319079, 'genlist')
            # Obtaining the member 'remove' of a type (line 1306)
            remove_319081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 20), genlist_319080, 'remove')
            # Calling remove(args, kwargs) (line 1306)
            remove_call_result_319084 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 20), remove_319081, *[self_319082], **kwargs_319083)
            
            
            # Call to heapify(...): (line 1307)
            # Processing the call arguments (line 1307)
            # Getting the type of 'self' (line 1307)
            self_319087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 34), 'self', False)
            # Obtaining the member 'genlist' of a type (line 1307)
            genlist_319088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 34), self_319087, 'genlist')
            # Processing the call keyword arguments (line 1307)
            kwargs_319089 = {}
            # Getting the type of 'heapq' (line 1307)
            heapq_319085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 20), 'heapq', False)
            # Obtaining the member 'heapify' of a type (line 1307)
            heapify_319086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 20), heapq_319085, 'heapify')
            # Calling heapify(args, kwargs) (line 1307)
            heapify_call_result_319090 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 20), heapify_319086, *[genlist_319088], **kwargs_319089)
            
            # SSA join for if statement (line 1303)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for try-except statement (line 1300)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of '__next__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__next__' in the type store
            # Getting the type of 'stypy_return_type' (line 1299)
            stypy_return_type_319091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_319091)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__next__'
            return stypy_return_type_319091

        
        # Assigning a Name to a Name (line 1309):
        
        # Assigning a Name to a Name (line 1309):
        # Getting the type of '__next__' (line 1309)
        next___319092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 15), '__next__')
        # Assigning a type to the variable 'next' (line 1309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 8), 'next', next___319092)

        @norecursion
        def __lt__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__lt__'
            module_type_store = module_type_store.open_function_context('__lt__', 1311, 8, False)
            # Assigning a type to the variable 'self' (line 1312)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _genitem.__lt__.__dict__.__setitem__('stypy_localization', localization)
            _genitem.__lt__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _genitem.__lt__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _genitem.__lt__.__dict__.__setitem__('stypy_function_name', '_genitem.__lt__')
            _genitem.__lt__.__dict__.__setitem__('stypy_param_names_list', ['other'])
            _genitem.__lt__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _genitem.__lt__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _genitem.__lt__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _genitem.__lt__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _genitem.__lt__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _genitem.__lt__.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_genitem.__lt__', ['other'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__lt__', localization, ['other'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__lt__(...)' code ##################

            
            # Getting the type of 'self' (line 1312)
            self_319093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 19), 'self')
            # Obtaining the member 'dt' of a type (line 1312)
            dt_319094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 19), self_319093, 'dt')
            # Getting the type of 'other' (line 1312)
            other_319095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 29), 'other')
            # Obtaining the member 'dt' of a type (line 1312)
            dt_319096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 29), other_319095, 'dt')
            # Applying the binary operator '<' (line 1312)
            result_lt_319097 = python_operator(stypy.reporting.localization.Localization(__file__, 1312, 19), '<', dt_319094, dt_319096)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1312)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 12), 'stypy_return_type', result_lt_319097)
            
            # ################# End of '__lt__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__lt__' in the type store
            # Getting the type of 'stypy_return_type' (line 1311)
            stypy_return_type_319098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_319098)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__lt__'
            return stypy_return_type_319098


        @norecursion
        def __gt__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__gt__'
            module_type_store = module_type_store.open_function_context('__gt__', 1314, 8, False)
            # Assigning a type to the variable 'self' (line 1315)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _genitem.__gt__.__dict__.__setitem__('stypy_localization', localization)
            _genitem.__gt__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _genitem.__gt__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _genitem.__gt__.__dict__.__setitem__('stypy_function_name', '_genitem.__gt__')
            _genitem.__gt__.__dict__.__setitem__('stypy_param_names_list', ['other'])
            _genitem.__gt__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _genitem.__gt__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _genitem.__gt__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _genitem.__gt__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _genitem.__gt__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _genitem.__gt__.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_genitem.__gt__', ['other'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__gt__', localization, ['other'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__gt__(...)' code ##################

            
            # Getting the type of 'self' (line 1315)
            self_319099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 19), 'self')
            # Obtaining the member 'dt' of a type (line 1315)
            dt_319100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 19), self_319099, 'dt')
            # Getting the type of 'other' (line 1315)
            other_319101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 29), 'other')
            # Obtaining the member 'dt' of a type (line 1315)
            dt_319102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 29), other_319101, 'dt')
            # Applying the binary operator '>' (line 1315)
            result_gt_319103 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 19), '>', dt_319100, dt_319102)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1315)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 12), 'stypy_return_type', result_gt_319103)
            
            # ################# End of '__gt__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__gt__' in the type store
            # Getting the type of 'stypy_return_type' (line 1314)
            stypy_return_type_319104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_319104)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__gt__'
            return stypy_return_type_319104


        @norecursion
        def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__eq__'
            module_type_store = module_type_store.open_function_context('__eq__', 1317, 8, False)
            # Assigning a type to the variable 'self' (line 1318)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_function_name', '_genitem.stypy__eq__')
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _genitem.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_genitem.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__eq__(...)' code ##################

            
            # Getting the type of 'self' (line 1318)
            self_319105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 19), 'self')
            # Obtaining the member 'dt' of a type (line 1318)
            dt_319106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 19), self_319105, 'dt')
            # Getting the type of 'other' (line 1318)
            other_319107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 30), 'other')
            # Obtaining the member 'dt' of a type (line 1318)
            dt_319108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 30), other_319107, 'dt')
            # Applying the binary operator '==' (line 1318)
            result_eq_319109 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 19), '==', dt_319106, dt_319108)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1318)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'stypy_return_type', result_eq_319109)
            
            # ################# End of '__eq__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__eq__' in the type store
            # Getting the type of 'stypy_return_type' (line 1317)
            stypy_return_type_319110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_319110)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__eq__'
            return stypy_return_type_319110


        @norecursion
        def __ne__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__ne__'
            module_type_store = module_type_store.open_function_context('__ne__', 1320, 8, False)
            # Assigning a type to the variable 'self' (line 1321)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 8), 'self', type_of_self)
            
            # Passed parameters checking function
            _genitem.__ne__.__dict__.__setitem__('stypy_localization', localization)
            _genitem.__ne__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
            _genitem.__ne__.__dict__.__setitem__('stypy_type_store', module_type_store)
            _genitem.__ne__.__dict__.__setitem__('stypy_function_name', '_genitem.__ne__')
            _genitem.__ne__.__dict__.__setitem__('stypy_param_names_list', ['other'])
            _genitem.__ne__.__dict__.__setitem__('stypy_varargs_param_name', None)
            _genitem.__ne__.__dict__.__setitem__('stypy_kwargs_param_name', None)
            _genitem.__ne__.__dict__.__setitem__('stypy_call_defaults', defaults)
            _genitem.__ne__.__dict__.__setitem__('stypy_call_varargs', varargs)
            _genitem.__ne__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
            _genitem.__ne__.__dict__.__setitem__('stypy_declared_arg_number', 2)
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_genitem.__ne__', ['other'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '__ne__', localization, ['other'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__ne__(...)' code ##################

            
            # Getting the type of 'self' (line 1321)
            self_319111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 19), 'self')
            # Obtaining the member 'dt' of a type (line 1321)
            dt_319112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 19), self_319111, 'dt')
            # Getting the type of 'other' (line 1321)
            other_319113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 30), 'other')
            # Obtaining the member 'dt' of a type (line 1321)
            dt_319114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 30), other_319113, 'dt')
            # Applying the binary operator '!=' (line 1321)
            result_ne_319115 = python_operator(stypy.reporting.localization.Localization(__file__, 1321, 19), '!=', dt_319112, dt_319114)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1321)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 12), 'stypy_return_type', result_ne_319115)
            
            # ################# End of '__ne__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '__ne__' in the type store
            # Getting the type of 'stypy_return_type' (line 1320)
            stypy_return_type_319116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_319116)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '__ne__'
            return stypy_return_type_319116

    
    # Assigning a type to the variable '_genitem' (line 1289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 4), '_genitem', _genitem)

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1323)
        False_319117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 29), 'False')
        defaults = [False_319117]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1323, 4, False)
        # Assigning a type to the variable 'self' (line 1324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rruleset.__init__', ['cache'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['cache'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1324)
        # Processing the call arguments (line 1324)
        # Getting the type of 'cache' (line 1324)
        cache_319124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 39), 'cache', False)
        # Processing the call keyword arguments (line 1324)
        kwargs_319125 = {}
        
        # Call to super(...): (line 1324)
        # Processing the call arguments (line 1324)
        # Getting the type of 'rruleset' (line 1324)
        rruleset_319119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 14), 'rruleset', False)
        # Getting the type of 'self' (line 1324)
        self_319120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 24), 'self', False)
        # Processing the call keyword arguments (line 1324)
        kwargs_319121 = {}
        # Getting the type of 'super' (line 1324)
        super_319118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 8), 'super', False)
        # Calling super(args, kwargs) (line 1324)
        super_call_result_319122 = invoke(stypy.reporting.localization.Localization(__file__, 1324, 8), super_319118, *[rruleset_319119, self_319120], **kwargs_319121)
        
        # Obtaining the member '__init__' of a type (line 1324)
        init___319123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 8), super_call_result_319122, '__init__')
        # Calling __init__(args, kwargs) (line 1324)
        init___call_result_319126 = invoke(stypy.reporting.localization.Localization(__file__, 1324, 8), init___319123, *[cache_319124], **kwargs_319125)
        
        
        # Assigning a List to a Attribute (line 1325):
        
        # Assigning a List to a Attribute (line 1325):
        
        # Obtaining an instance of the builtin type 'list' (line 1325)
        list_319127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1325)
        
        # Getting the type of 'self' (line 1325)
        self_319128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 8), 'self')
        # Setting the type of the member '_rrule' of a type (line 1325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 8), self_319128, '_rrule', list_319127)
        
        # Assigning a List to a Attribute (line 1326):
        
        # Assigning a List to a Attribute (line 1326):
        
        # Obtaining an instance of the builtin type 'list' (line 1326)
        list_319129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1326, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1326)
        
        # Getting the type of 'self' (line 1326)
        self_319130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'self')
        # Setting the type of the member '_rdate' of a type (line 1326)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 8), self_319130, '_rdate', list_319129)
        
        # Assigning a List to a Attribute (line 1327):
        
        # Assigning a List to a Attribute (line 1327):
        
        # Obtaining an instance of the builtin type 'list' (line 1327)
        list_319131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1327)
        
        # Getting the type of 'self' (line 1327)
        self_319132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'self')
        # Setting the type of the member '_exrule' of a type (line 1327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 8), self_319132, '_exrule', list_319131)
        
        # Assigning a List to a Attribute (line 1328):
        
        # Assigning a List to a Attribute (line 1328):
        
        # Obtaining an instance of the builtin type 'list' (line 1328)
        list_319133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1328)
        
        # Getting the type of 'self' (line 1328)
        self_319134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 8), 'self')
        # Setting the type of the member '_exdate' of a type (line 1328)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1328, 8), self_319134, '_exdate', list_319133)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def rrule(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rrule'
        module_type_store = module_type_store.open_function_context('rrule', 1330, 4, False)
        # Assigning a type to the variable 'self' (line 1331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rruleset.rrule.__dict__.__setitem__('stypy_localization', localization)
        rruleset.rrule.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rruleset.rrule.__dict__.__setitem__('stypy_type_store', module_type_store)
        rruleset.rrule.__dict__.__setitem__('stypy_function_name', 'rruleset.rrule')
        rruleset.rrule.__dict__.__setitem__('stypy_param_names_list', ['rrule'])
        rruleset.rrule.__dict__.__setitem__('stypy_varargs_param_name', None)
        rruleset.rrule.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rruleset.rrule.__dict__.__setitem__('stypy_call_defaults', defaults)
        rruleset.rrule.__dict__.__setitem__('stypy_call_varargs', varargs)
        rruleset.rrule.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rruleset.rrule.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rruleset.rrule', ['rrule'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rrule', localization, ['rrule'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rrule(...)' code ##################

        str_319135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, (-1)), 'str', ' Include the given :py:class:`rrule` instance in the recurrence set\n            generation. ')
        
        # Call to append(...): (line 1334)
        # Processing the call arguments (line 1334)
        # Getting the type of 'rrule' (line 1334)
        rrule_319139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 27), 'rrule', False)
        # Processing the call keyword arguments (line 1334)
        kwargs_319140 = {}
        # Getting the type of 'self' (line 1334)
        self_319136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'self', False)
        # Obtaining the member '_rrule' of a type (line 1334)
        _rrule_319137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 8), self_319136, '_rrule')
        # Obtaining the member 'append' of a type (line 1334)
        append_319138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 8), _rrule_319137, 'append')
        # Calling append(args, kwargs) (line 1334)
        append_call_result_319141 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 8), append_319138, *[rrule_319139], **kwargs_319140)
        
        
        # ################# End of 'rrule(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rrule' in the type store
        # Getting the type of 'stypy_return_type' (line 1330)
        stypy_return_type_319142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319142)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rrule'
        return stypy_return_type_319142


    @norecursion
    def rdate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'rdate'
        module_type_store = module_type_store.open_function_context('rdate', 1336, 4, False)
        # Assigning a type to the variable 'self' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rruleset.rdate.__dict__.__setitem__('stypy_localization', localization)
        rruleset.rdate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rruleset.rdate.__dict__.__setitem__('stypy_type_store', module_type_store)
        rruleset.rdate.__dict__.__setitem__('stypy_function_name', 'rruleset.rdate')
        rruleset.rdate.__dict__.__setitem__('stypy_param_names_list', ['rdate'])
        rruleset.rdate.__dict__.__setitem__('stypy_varargs_param_name', None)
        rruleset.rdate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rruleset.rdate.__dict__.__setitem__('stypy_call_defaults', defaults)
        rruleset.rdate.__dict__.__setitem__('stypy_call_varargs', varargs)
        rruleset.rdate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rruleset.rdate.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rruleset.rdate', ['rdate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'rdate', localization, ['rdate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'rdate(...)' code ##################

        str_319143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, (-1)), 'str', ' Include the given :py:class:`datetime` instance in the recurrence\n            set generation. ')
        
        # Call to append(...): (line 1340)
        # Processing the call arguments (line 1340)
        # Getting the type of 'rdate' (line 1340)
        rdate_319147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 27), 'rdate', False)
        # Processing the call keyword arguments (line 1340)
        kwargs_319148 = {}
        # Getting the type of 'self' (line 1340)
        self_319144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'self', False)
        # Obtaining the member '_rdate' of a type (line 1340)
        _rdate_319145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 8), self_319144, '_rdate')
        # Obtaining the member 'append' of a type (line 1340)
        append_319146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 8), _rdate_319145, 'append')
        # Calling append(args, kwargs) (line 1340)
        append_call_result_319149 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 8), append_319146, *[rdate_319147], **kwargs_319148)
        
        
        # ################# End of 'rdate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'rdate' in the type store
        # Getting the type of 'stypy_return_type' (line 1336)
        stypy_return_type_319150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319150)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'rdate'
        return stypy_return_type_319150


    @norecursion
    def exrule(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'exrule'
        module_type_store = module_type_store.open_function_context('exrule', 1342, 4, False)
        # Assigning a type to the variable 'self' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rruleset.exrule.__dict__.__setitem__('stypy_localization', localization)
        rruleset.exrule.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rruleset.exrule.__dict__.__setitem__('stypy_type_store', module_type_store)
        rruleset.exrule.__dict__.__setitem__('stypy_function_name', 'rruleset.exrule')
        rruleset.exrule.__dict__.__setitem__('stypy_param_names_list', ['exrule'])
        rruleset.exrule.__dict__.__setitem__('stypy_varargs_param_name', None)
        rruleset.exrule.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rruleset.exrule.__dict__.__setitem__('stypy_call_defaults', defaults)
        rruleset.exrule.__dict__.__setitem__('stypy_call_varargs', varargs)
        rruleset.exrule.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rruleset.exrule.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rruleset.exrule', ['exrule'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'exrule', localization, ['exrule'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'exrule(...)' code ##################

        str_319151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1347, (-1)), 'str', ' Include the given rrule instance in the recurrence set exclusion\n            list. Dates which are part of the given recurrence rules will not\n            be generated, even if some inclusive rrule or rdate matches them.\n        ')
        
        # Call to append(...): (line 1348)
        # Processing the call arguments (line 1348)
        # Getting the type of 'exrule' (line 1348)
        exrule_319155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 28), 'exrule', False)
        # Processing the call keyword arguments (line 1348)
        kwargs_319156 = {}
        # Getting the type of 'self' (line 1348)
        self_319152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'self', False)
        # Obtaining the member '_exrule' of a type (line 1348)
        _exrule_319153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 8), self_319152, '_exrule')
        # Obtaining the member 'append' of a type (line 1348)
        append_319154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 8), _exrule_319153, 'append')
        # Calling append(args, kwargs) (line 1348)
        append_call_result_319157 = invoke(stypy.reporting.localization.Localization(__file__, 1348, 8), append_319154, *[exrule_319155], **kwargs_319156)
        
        
        # ################# End of 'exrule(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'exrule' in the type store
        # Getting the type of 'stypy_return_type' (line 1342)
        stypy_return_type_319158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319158)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'exrule'
        return stypy_return_type_319158


    @norecursion
    def exdate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'exdate'
        module_type_store = module_type_store.open_function_context('exdate', 1350, 4, False)
        # Assigning a type to the variable 'self' (line 1351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rruleset.exdate.__dict__.__setitem__('stypy_localization', localization)
        rruleset.exdate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rruleset.exdate.__dict__.__setitem__('stypy_type_store', module_type_store)
        rruleset.exdate.__dict__.__setitem__('stypy_function_name', 'rruleset.exdate')
        rruleset.exdate.__dict__.__setitem__('stypy_param_names_list', ['exdate'])
        rruleset.exdate.__dict__.__setitem__('stypy_varargs_param_name', None)
        rruleset.exdate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rruleset.exdate.__dict__.__setitem__('stypy_call_defaults', defaults)
        rruleset.exdate.__dict__.__setitem__('stypy_call_varargs', varargs)
        rruleset.exdate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rruleset.exdate.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rruleset.exdate', ['exdate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'exdate', localization, ['exdate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'exdate(...)' code ##################

        str_319159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1354, (-1)), 'str', ' Include the given datetime instance in the recurrence set\n            exclusion list. Dates included that way will not be generated,\n            even if some inclusive rrule or rdate matches them. ')
        
        # Call to append(...): (line 1355)
        # Processing the call arguments (line 1355)
        # Getting the type of 'exdate' (line 1355)
        exdate_319163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 28), 'exdate', False)
        # Processing the call keyword arguments (line 1355)
        kwargs_319164 = {}
        # Getting the type of 'self' (line 1355)
        self_319160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'self', False)
        # Obtaining the member '_exdate' of a type (line 1355)
        _exdate_319161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 8), self_319160, '_exdate')
        # Obtaining the member 'append' of a type (line 1355)
        append_319162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 8), _exdate_319161, 'append')
        # Calling append(args, kwargs) (line 1355)
        append_call_result_319165 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 8), append_319162, *[exdate_319163], **kwargs_319164)
        
        
        # ################# End of 'exdate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'exdate' in the type store
        # Getting the type of 'stypy_return_type' (line 1350)
        stypy_return_type_319166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319166)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'exdate'
        return stypy_return_type_319166


    @norecursion
    def _iter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_iter'
        module_type_store = module_type_store.open_function_context('_iter', 1357, 4, False)
        # Assigning a type to the variable 'self' (line 1358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        rruleset._iter.__dict__.__setitem__('stypy_localization', localization)
        rruleset._iter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        rruleset._iter.__dict__.__setitem__('stypy_type_store', module_type_store)
        rruleset._iter.__dict__.__setitem__('stypy_function_name', 'rruleset._iter')
        rruleset._iter.__dict__.__setitem__('stypy_param_names_list', [])
        rruleset._iter.__dict__.__setitem__('stypy_varargs_param_name', None)
        rruleset._iter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        rruleset._iter.__dict__.__setitem__('stypy_call_defaults', defaults)
        rruleset._iter.__dict__.__setitem__('stypy_call_varargs', varargs)
        rruleset._iter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        rruleset._iter.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'rruleset._iter', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_iter', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_iter(...)' code ##################

        
        # Assigning a List to a Name (line 1358):
        
        # Assigning a List to a Name (line 1358):
        
        # Obtaining an instance of the builtin type 'list' (line 1358)
        list_319167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1358)
        
        # Assigning a type to the variable 'rlist' (line 1358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 8), 'rlist', list_319167)
        
        # Call to sort(...): (line 1359)
        # Processing the call keyword arguments (line 1359)
        kwargs_319171 = {}
        # Getting the type of 'self' (line 1359)
        self_319168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 8), 'self', False)
        # Obtaining the member '_rdate' of a type (line 1359)
        _rdate_319169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 8), self_319168, '_rdate')
        # Obtaining the member 'sort' of a type (line 1359)
        sort_319170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1359, 8), _rdate_319169, 'sort')
        # Calling sort(args, kwargs) (line 1359)
        sort_call_result_319172 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 8), sort_319170, *[], **kwargs_319171)
        
        
        # Call to _genitem(...): (line 1360)
        # Processing the call arguments (line 1360)
        # Getting the type of 'rlist' (line 1360)
        rlist_319175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 22), 'rlist', False)
        
        # Call to iter(...): (line 1360)
        # Processing the call arguments (line 1360)
        # Getting the type of 'self' (line 1360)
        self_319177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 34), 'self', False)
        # Obtaining the member '_rdate' of a type (line 1360)
        _rdate_319178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 34), self_319177, '_rdate')
        # Processing the call keyword arguments (line 1360)
        kwargs_319179 = {}
        # Getting the type of 'iter' (line 1360)
        iter_319176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 29), 'iter', False)
        # Calling iter(args, kwargs) (line 1360)
        iter_call_result_319180 = invoke(stypy.reporting.localization.Localization(__file__, 1360, 29), iter_319176, *[_rdate_319178], **kwargs_319179)
        
        # Processing the call keyword arguments (line 1360)
        kwargs_319181 = {}
        # Getting the type of 'self' (line 1360)
        self_319173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1360, 8), 'self', False)
        # Obtaining the member '_genitem' of a type (line 1360)
        _genitem_319174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1360, 8), self_319173, '_genitem')
        # Calling _genitem(args, kwargs) (line 1360)
        _genitem_call_result_319182 = invoke(stypy.reporting.localization.Localization(__file__, 1360, 8), _genitem_319174, *[rlist_319175, iter_call_result_319180], **kwargs_319181)
        
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1361)
        self_319187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 37), 'self')
        # Obtaining the member '_rrule' of a type (line 1361)
        _rrule_319188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1361, 37), self_319187, '_rrule')
        comprehension_319189 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1361, 20), _rrule_319188)
        # Assigning a type to the variable 'x' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 20), 'x', comprehension_319189)
        
        # Call to iter(...): (line 1361)
        # Processing the call arguments (line 1361)
        # Getting the type of 'x' (line 1361)
        x_319184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 25), 'x', False)
        # Processing the call keyword arguments (line 1361)
        kwargs_319185 = {}
        # Getting the type of 'iter' (line 1361)
        iter_319183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 20), 'iter', False)
        # Calling iter(args, kwargs) (line 1361)
        iter_call_result_319186 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 20), iter_319183, *[x_319184], **kwargs_319185)
        
        list_319190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1361, 20), list_319190, iter_call_result_319186)
        # Testing the type of a for loop iterable (line 1361)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1361, 8), list_319190)
        # Getting the type of the for loop variable (line 1361)
        for_loop_var_319191 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1361, 8), list_319190)
        # Assigning a type to the variable 'gen' (line 1361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 8), 'gen', for_loop_var_319191)
        # SSA begins for a for statement (line 1361)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _genitem(...): (line 1362)
        # Processing the call arguments (line 1362)
        # Getting the type of 'rlist' (line 1362)
        rlist_319194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 26), 'rlist', False)
        # Getting the type of 'gen' (line 1362)
        gen_319195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 33), 'gen', False)
        # Processing the call keyword arguments (line 1362)
        kwargs_319196 = {}
        # Getting the type of 'self' (line 1362)
        self_319192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 12), 'self', False)
        # Obtaining the member '_genitem' of a type (line 1362)
        _genitem_319193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 12), self_319192, '_genitem')
        # Calling _genitem(args, kwargs) (line 1362)
        _genitem_call_result_319197 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 12), _genitem_319193, *[rlist_319194, gen_319195], **kwargs_319196)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 1363):
        
        # Assigning a List to a Name (line 1363):
        
        # Obtaining an instance of the builtin type 'list' (line 1363)
        list_319198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1363)
        
        # Assigning a type to the variable 'exlist' (line 1363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'exlist', list_319198)
        
        # Call to sort(...): (line 1364)
        # Processing the call keyword arguments (line 1364)
        kwargs_319202 = {}
        # Getting the type of 'self' (line 1364)
        self_319199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 8), 'self', False)
        # Obtaining the member '_exdate' of a type (line 1364)
        _exdate_319200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 8), self_319199, '_exdate')
        # Obtaining the member 'sort' of a type (line 1364)
        sort_319201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 8), _exdate_319200, 'sort')
        # Calling sort(args, kwargs) (line 1364)
        sort_call_result_319203 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 8), sort_319201, *[], **kwargs_319202)
        
        
        # Call to _genitem(...): (line 1365)
        # Processing the call arguments (line 1365)
        # Getting the type of 'exlist' (line 1365)
        exlist_319206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 22), 'exlist', False)
        
        # Call to iter(...): (line 1365)
        # Processing the call arguments (line 1365)
        # Getting the type of 'self' (line 1365)
        self_319208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 35), 'self', False)
        # Obtaining the member '_exdate' of a type (line 1365)
        _exdate_319209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 35), self_319208, '_exdate')
        # Processing the call keyword arguments (line 1365)
        kwargs_319210 = {}
        # Getting the type of 'iter' (line 1365)
        iter_319207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 30), 'iter', False)
        # Calling iter(args, kwargs) (line 1365)
        iter_call_result_319211 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 30), iter_319207, *[_exdate_319209], **kwargs_319210)
        
        # Processing the call keyword arguments (line 1365)
        kwargs_319212 = {}
        # Getting the type of 'self' (line 1365)
        self_319204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'self', False)
        # Obtaining the member '_genitem' of a type (line 1365)
        _genitem_319205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 8), self_319204, '_genitem')
        # Calling _genitem(args, kwargs) (line 1365)
        _genitem_call_result_319213 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 8), _genitem_319205, *[exlist_319206, iter_call_result_319211], **kwargs_319212)
        
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1366)
        self_319218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 37), 'self')
        # Obtaining the member '_exrule' of a type (line 1366)
        _exrule_319219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 37), self_319218, '_exrule')
        comprehension_319220 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1366, 20), _exrule_319219)
        # Assigning a type to the variable 'x' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 20), 'x', comprehension_319220)
        
        # Call to iter(...): (line 1366)
        # Processing the call arguments (line 1366)
        # Getting the type of 'x' (line 1366)
        x_319215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 25), 'x', False)
        # Processing the call keyword arguments (line 1366)
        kwargs_319216 = {}
        # Getting the type of 'iter' (line 1366)
        iter_319214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 20), 'iter', False)
        # Calling iter(args, kwargs) (line 1366)
        iter_call_result_319217 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 20), iter_319214, *[x_319215], **kwargs_319216)
        
        list_319221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1366, 20), list_319221, iter_call_result_319217)
        # Testing the type of a for loop iterable (line 1366)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1366, 8), list_319221)
        # Getting the type of the for loop variable (line 1366)
        for_loop_var_319222 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1366, 8), list_319221)
        # Assigning a type to the variable 'gen' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 8), 'gen', for_loop_var_319222)
        # SSA begins for a for statement (line 1366)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _genitem(...): (line 1367)
        # Processing the call arguments (line 1367)
        # Getting the type of 'exlist' (line 1367)
        exlist_319225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 26), 'exlist', False)
        # Getting the type of 'gen' (line 1367)
        gen_319226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 34), 'gen', False)
        # Processing the call keyword arguments (line 1367)
        kwargs_319227 = {}
        # Getting the type of 'self' (line 1367)
        self_319223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 12), 'self', False)
        # Obtaining the member '_genitem' of a type (line 1367)
        _genitem_319224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 12), self_319223, '_genitem')
        # Calling _genitem(args, kwargs) (line 1367)
        _genitem_call_result_319228 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 12), _genitem_319224, *[exlist_319225, gen_319226], **kwargs_319227)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1368):
        
        # Assigning a Name to a Name (line 1368):
        # Getting the type of 'None' (line 1368)
        None_319229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 17), 'None')
        # Assigning a type to the variable 'lastdt' (line 1368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'lastdt', None_319229)
        
        # Assigning a Num to a Name (line 1369):
        
        # Assigning a Num to a Name (line 1369):
        int_319230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 16), 'int')
        # Assigning a type to the variable 'total' (line 1369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'total', int_319230)
        
        # Call to heapify(...): (line 1370)
        # Processing the call arguments (line 1370)
        # Getting the type of 'rlist' (line 1370)
        rlist_319233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 22), 'rlist', False)
        # Processing the call keyword arguments (line 1370)
        kwargs_319234 = {}
        # Getting the type of 'heapq' (line 1370)
        heapq_319231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'heapq', False)
        # Obtaining the member 'heapify' of a type (line 1370)
        heapify_319232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 8), heapq_319231, 'heapify')
        # Calling heapify(args, kwargs) (line 1370)
        heapify_call_result_319235 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 8), heapify_319232, *[rlist_319233], **kwargs_319234)
        
        
        # Call to heapify(...): (line 1371)
        # Processing the call arguments (line 1371)
        # Getting the type of 'exlist' (line 1371)
        exlist_319238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 22), 'exlist', False)
        # Processing the call keyword arguments (line 1371)
        kwargs_319239 = {}
        # Getting the type of 'heapq' (line 1371)
        heapq_319236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 'heapq', False)
        # Obtaining the member 'heapify' of a type (line 1371)
        heapify_319237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 8), heapq_319236, 'heapify')
        # Calling heapify(args, kwargs) (line 1371)
        heapify_call_result_319240 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 8), heapify_319237, *[exlist_319238], **kwargs_319239)
        
        
        # Getting the type of 'rlist' (line 1372)
        rlist_319241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 14), 'rlist')
        # Testing the type of an if condition (line 1372)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1372, 8), rlist_319241)
        # SSA begins for while statement (line 1372)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Subscript to a Name (line 1373):
        
        # Assigning a Subscript to a Name (line 1373):
        
        # Obtaining the type of the subscript
        int_319242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 26), 'int')
        # Getting the type of 'rlist' (line 1373)
        rlist_319243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 20), 'rlist')
        # Obtaining the member '__getitem__' of a type (line 1373)
        getitem___319244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 20), rlist_319243, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1373)
        subscript_call_result_319245 = invoke(stypy.reporting.localization.Localization(__file__, 1373, 20), getitem___319244, int_319242)
        
        # Assigning a type to the variable 'ritem' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 12), 'ritem', subscript_call_result_319245)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'lastdt' (line 1374)
        lastdt_319246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 19), 'lastdt')
        # Applying the 'not' unary operator (line 1374)
        result_not__319247 = python_operator(stypy.reporting.localization.Localization(__file__, 1374, 15), 'not', lastdt_319246)
        
        
        # Getting the type of 'lastdt' (line 1374)
        lastdt_319248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 29), 'lastdt')
        # Getting the type of 'ritem' (line 1374)
        ritem_319249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 39), 'ritem')
        # Obtaining the member 'dt' of a type (line 1374)
        dt_319250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 39), ritem_319249, 'dt')
        # Applying the binary operator '!=' (line 1374)
        result_ne_319251 = python_operator(stypy.reporting.localization.Localization(__file__, 1374, 29), '!=', lastdt_319248, dt_319250)
        
        # Applying the binary operator 'or' (line 1374)
        result_or_keyword_319252 = python_operator(stypy.reporting.localization.Localization(__file__, 1374, 15), 'or', result_not__319247, result_ne_319251)
        
        # Testing the type of an if condition (line 1374)
        if_condition_319253 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1374, 12), result_or_keyword_319252)
        # Assigning a type to the variable 'if_condition_319253' (line 1374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 12), 'if_condition_319253', if_condition_319253)
        # SSA begins for if statement (line 1374)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'exlist' (line 1375)
        exlist_319254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 22), 'exlist')
        
        
        # Obtaining the type of the subscript
        int_319255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 40), 'int')
        # Getting the type of 'exlist' (line 1375)
        exlist_319256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 33), 'exlist')
        # Obtaining the member '__getitem__' of a type (line 1375)
        getitem___319257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 33), exlist_319256, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1375)
        subscript_call_result_319258 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 33), getitem___319257, int_319255)
        
        # Getting the type of 'ritem' (line 1375)
        ritem_319259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 45), 'ritem')
        # Applying the binary operator '<' (line 1375)
        result_lt_319260 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 33), '<', subscript_call_result_319258, ritem_319259)
        
        # Applying the binary operator 'and' (line 1375)
        result_and_keyword_319261 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 22), 'and', exlist_319254, result_lt_319260)
        
        # Testing the type of an if condition (line 1375)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1375, 16), result_and_keyword_319261)
        # SSA begins for while statement (line 1375)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Subscript to a Name (line 1376):
        
        # Assigning a Subscript to a Name (line 1376):
        
        # Obtaining the type of the subscript
        int_319262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 36), 'int')
        # Getting the type of 'exlist' (line 1376)
        exlist_319263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 29), 'exlist')
        # Obtaining the member '__getitem__' of a type (line 1376)
        getitem___319264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 29), exlist_319263, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1376)
        subscript_call_result_319265 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 29), getitem___319264, int_319262)
        
        # Assigning a type to the variable 'exitem' (line 1376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 20), 'exitem', subscript_call_result_319265)
        
        # Call to advance_iterator(...): (line 1377)
        # Processing the call arguments (line 1377)
        # Getting the type of 'exitem' (line 1377)
        exitem_319267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 37), 'exitem', False)
        # Processing the call keyword arguments (line 1377)
        kwargs_319268 = {}
        # Getting the type of 'advance_iterator' (line 1377)
        advance_iterator_319266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 20), 'advance_iterator', False)
        # Calling advance_iterator(args, kwargs) (line 1377)
        advance_iterator_call_result_319269 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 20), advance_iterator_319266, *[exitem_319267], **kwargs_319268)
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'exlist' (line 1378)
        exlist_319270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 23), 'exlist')
        
        
        # Obtaining the type of the subscript
        int_319271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 41), 'int')
        # Getting the type of 'exlist' (line 1378)
        exlist_319272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 34), 'exlist')
        # Obtaining the member '__getitem__' of a type (line 1378)
        getitem___319273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 34), exlist_319272, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1378)
        subscript_call_result_319274 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 34), getitem___319273, int_319271)
        
        # Getting the type of 'exitem' (line 1378)
        exitem_319275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 47), 'exitem')
        # Applying the binary operator 'is' (line 1378)
        result_is__319276 = python_operator(stypy.reporting.localization.Localization(__file__, 1378, 34), 'is', subscript_call_result_319274, exitem_319275)
        
        # Applying the binary operator 'and' (line 1378)
        result_and_keyword_319277 = python_operator(stypy.reporting.localization.Localization(__file__, 1378, 23), 'and', exlist_319270, result_is__319276)
        
        # Testing the type of an if condition (line 1378)
        if_condition_319278 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1378, 20), result_and_keyword_319277)
        # Assigning a type to the variable 'if_condition_319278' (line 1378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 20), 'if_condition_319278', if_condition_319278)
        # SSA begins for if statement (line 1378)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to heapreplace(...): (line 1379)
        # Processing the call arguments (line 1379)
        # Getting the type of 'exlist' (line 1379)
        exlist_319281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 42), 'exlist', False)
        # Getting the type of 'exitem' (line 1379)
        exitem_319282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 50), 'exitem', False)
        # Processing the call keyword arguments (line 1379)
        kwargs_319283 = {}
        # Getting the type of 'heapq' (line 1379)
        heapq_319279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 24), 'heapq', False)
        # Obtaining the member 'heapreplace' of a type (line 1379)
        heapreplace_319280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 24), heapq_319279, 'heapreplace')
        # Calling heapreplace(args, kwargs) (line 1379)
        heapreplace_call_result_319284 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 24), heapreplace_319280, *[exlist_319281, exitem_319282], **kwargs_319283)
        
        # SSA join for if statement (line 1378)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 1375)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'exlist' (line 1380)
        exlist_319285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 23), 'exlist')
        # Applying the 'not' unary operator (line 1380)
        result_not__319286 = python_operator(stypy.reporting.localization.Localization(__file__, 1380, 19), 'not', exlist_319285)
        
        
        # Getting the type of 'ritem' (line 1380)
        ritem_319287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 33), 'ritem')
        
        # Obtaining the type of the subscript
        int_319288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, 49), 'int')
        # Getting the type of 'exlist' (line 1380)
        exlist_319289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 42), 'exlist')
        # Obtaining the member '__getitem__' of a type (line 1380)
        getitem___319290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1380, 42), exlist_319289, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1380)
        subscript_call_result_319291 = invoke(stypy.reporting.localization.Localization(__file__, 1380, 42), getitem___319290, int_319288)
        
        # Applying the binary operator '!=' (line 1380)
        result_ne_319292 = python_operator(stypy.reporting.localization.Localization(__file__, 1380, 33), '!=', ritem_319287, subscript_call_result_319291)
        
        # Applying the binary operator 'or' (line 1380)
        result_or_keyword_319293 = python_operator(stypy.reporting.localization.Localization(__file__, 1380, 19), 'or', result_not__319286, result_ne_319292)
        
        # Testing the type of an if condition (line 1380)
        if_condition_319294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1380, 16), result_or_keyword_319293)
        # Assigning a type to the variable 'if_condition_319294' (line 1380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1380, 16), 'if_condition_319294', if_condition_319294)
        # SSA begins for if statement (line 1380)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'total' (line 1381)
        total_319295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 20), 'total')
        int_319296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 29), 'int')
        # Applying the binary operator '+=' (line 1381)
        result_iadd_319297 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 20), '+=', total_319295, int_319296)
        # Assigning a type to the variable 'total' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 20), 'total', result_iadd_319297)
        
        # Creating a generator
        # Getting the type of 'ritem' (line 1382)
        ritem_319298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 26), 'ritem')
        # Obtaining the member 'dt' of a type (line 1382)
        dt_319299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 26), ritem_319298, 'dt')
        GeneratorType_319300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 20), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 20), GeneratorType_319300, dt_319299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 20), 'stypy_return_type', GeneratorType_319300)
        # SSA join for if statement (line 1380)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1383):
        
        # Assigning a Attribute to a Name (line 1383):
        # Getting the type of 'ritem' (line 1383)
        ritem_319301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 25), 'ritem')
        # Obtaining the member 'dt' of a type (line 1383)
        dt_319302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 25), ritem_319301, 'dt')
        # Assigning a type to the variable 'lastdt' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 16), 'lastdt', dt_319302)
        # SSA join for if statement (line 1374)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to advance_iterator(...): (line 1384)
        # Processing the call arguments (line 1384)
        # Getting the type of 'ritem' (line 1384)
        ritem_319304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 29), 'ritem', False)
        # Processing the call keyword arguments (line 1384)
        kwargs_319305 = {}
        # Getting the type of 'advance_iterator' (line 1384)
        advance_iterator_319303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 12), 'advance_iterator', False)
        # Calling advance_iterator(args, kwargs) (line 1384)
        advance_iterator_call_result_319306 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 12), advance_iterator_319303, *[ritem_319304], **kwargs_319305)
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'rlist' (line 1385)
        rlist_319307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 15), 'rlist')
        
        
        # Obtaining the type of the subscript
        int_319308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 31), 'int')
        # Getting the type of 'rlist' (line 1385)
        rlist_319309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 25), 'rlist')
        # Obtaining the member '__getitem__' of a type (line 1385)
        getitem___319310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 25), rlist_319309, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1385)
        subscript_call_result_319311 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 25), getitem___319310, int_319308)
        
        # Getting the type of 'ritem' (line 1385)
        ritem_319312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 37), 'ritem')
        # Applying the binary operator 'is' (line 1385)
        result_is__319313 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 25), 'is', subscript_call_result_319311, ritem_319312)
        
        # Applying the binary operator 'and' (line 1385)
        result_and_keyword_319314 = python_operator(stypy.reporting.localization.Localization(__file__, 1385, 15), 'and', rlist_319307, result_is__319313)
        
        # Testing the type of an if condition (line 1385)
        if_condition_319315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1385, 12), result_and_keyword_319314)
        # Assigning a type to the variable 'if_condition_319315' (line 1385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 12), 'if_condition_319315', if_condition_319315)
        # SSA begins for if statement (line 1385)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to heapreplace(...): (line 1386)
        # Processing the call arguments (line 1386)
        # Getting the type of 'rlist' (line 1386)
        rlist_319318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 34), 'rlist', False)
        # Getting the type of 'ritem' (line 1386)
        ritem_319319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 41), 'ritem', False)
        # Processing the call keyword arguments (line 1386)
        kwargs_319320 = {}
        # Getting the type of 'heapq' (line 1386)
        heapq_319316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 16), 'heapq', False)
        # Obtaining the member 'heapreplace' of a type (line 1386)
        heapreplace_319317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 16), heapq_319316, 'heapreplace')
        # Calling heapreplace(args, kwargs) (line 1386)
        heapreplace_call_result_319321 = invoke(stypy.reporting.localization.Localization(__file__, 1386, 16), heapreplace_319317, *[rlist_319318, ritem_319319], **kwargs_319320)
        
        # SSA join for if statement (line 1385)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 1372)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1387):
        
        # Assigning a Name to a Attribute (line 1387):
        # Getting the type of 'total' (line 1387)
        total_319322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 20), 'total')
        # Getting the type of 'self' (line 1387)
        self_319323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'self')
        # Setting the type of the member '_len' of a type (line 1387)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 8), self_319323, '_len', total_319322)
        
        # ################# End of '_iter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_iter' in the type store
        # Getting the type of 'stypy_return_type' (line 1357)
        stypy_return_type_319324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319324)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_iter'
        return stypy_return_type_319324


# Assigning a type to the variable 'rruleset' (line 1281)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 0), 'rruleset', rruleset)
# Declaration of the '_rrulestr' class

class _rrulestr(object, ):
    
    # Assigning a Dict to a Name (line 1392):
    
    # Assigning a Dict to a Name (line 1400):

    @norecursion
    def _handle_int(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_int'
        module_type_store = module_type_store.open_function_context('_handle_int', 1403, 4, False)
        # Assigning a type to the variable 'self' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr._handle_int.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr._handle_int.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr._handle_int.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr._handle_int.__dict__.__setitem__('stypy_function_name', '_rrulestr._handle_int')
        _rrulestr._handle_int.__dict__.__setitem__('stypy_param_names_list', ['rrkwargs', 'name', 'value'])
        _rrulestr._handle_int.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr._handle_int.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _rrulestr._handle_int.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr._handle_int.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr._handle_int.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr._handle_int.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr._handle_int', ['rrkwargs', 'name', 'value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_int', localization, ['rrkwargs', 'name', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_int(...)' code ##################

        
        # Assigning a Call to a Subscript (line 1404):
        
        # Assigning a Call to a Subscript (line 1404):
        
        # Call to int(...): (line 1404)
        # Processing the call arguments (line 1404)
        # Getting the type of 'value' (line 1404)
        value_319326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 37), 'value', False)
        # Processing the call keyword arguments (line 1404)
        kwargs_319327 = {}
        # Getting the type of 'int' (line 1404)
        int_319325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 33), 'int', False)
        # Calling int(args, kwargs) (line 1404)
        int_call_result_319328 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 33), int_319325, *[value_319326], **kwargs_319327)
        
        # Getting the type of 'rrkwargs' (line 1404)
        rrkwargs_319329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'rrkwargs')
        
        # Call to lower(...): (line 1404)
        # Processing the call keyword arguments (line 1404)
        kwargs_319332 = {}
        # Getting the type of 'name' (line 1404)
        name_319330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 17), 'name', False)
        # Obtaining the member 'lower' of a type (line 1404)
        lower_319331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 17), name_319330, 'lower')
        # Calling lower(args, kwargs) (line 1404)
        lower_call_result_319333 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 17), lower_319331, *[], **kwargs_319332)
        
        # Storing an element on a container (line 1404)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1404, 8), rrkwargs_319329, (lower_call_result_319333, int_call_result_319328))
        
        # ################# End of '_handle_int(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_int' in the type store
        # Getting the type of 'stypy_return_type' (line 1403)
        stypy_return_type_319334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319334)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_int'
        return stypy_return_type_319334


    @norecursion
    def _handle_int_list(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_int_list'
        module_type_store = module_type_store.open_function_context('_handle_int_list', 1406, 4, False)
        # Assigning a type to the variable 'self' (line 1407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_function_name', '_rrulestr._handle_int_list')
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_param_names_list', ['rrkwargs', 'name', 'value'])
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr._handle_int_list.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr._handle_int_list', ['rrkwargs', 'name', 'value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_int_list', localization, ['rrkwargs', 'name', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_int_list(...)' code ##################

        
        # Assigning a ListComp to a Subscript (line 1407):
        
        # Assigning a ListComp to a Subscript (line 1407):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 1407)
        # Processing the call arguments (line 1407)
        str_319341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 62), 'str', ',')
        # Processing the call keyword arguments (line 1407)
        kwargs_319342 = {}
        # Getting the type of 'value' (line 1407)
        value_319339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 50), 'value', False)
        # Obtaining the member 'split' of a type (line 1407)
        split_319340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 50), value_319339, 'split')
        # Calling split(args, kwargs) (line 1407)
        split_call_result_319343 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 50), split_319340, *[str_319341], **kwargs_319342)
        
        comprehension_319344 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1407, 34), split_call_result_319343)
        # Assigning a type to the variable 'x' (line 1407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 34), 'x', comprehension_319344)
        
        # Call to int(...): (line 1407)
        # Processing the call arguments (line 1407)
        # Getting the type of 'x' (line 1407)
        x_319336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 38), 'x', False)
        # Processing the call keyword arguments (line 1407)
        kwargs_319337 = {}
        # Getting the type of 'int' (line 1407)
        int_319335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 34), 'int', False)
        # Calling int(args, kwargs) (line 1407)
        int_call_result_319338 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 34), int_319335, *[x_319336], **kwargs_319337)
        
        list_319345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 34), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1407, 34), list_319345, int_call_result_319338)
        # Getting the type of 'rrkwargs' (line 1407)
        rrkwargs_319346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 8), 'rrkwargs')
        
        # Call to lower(...): (line 1407)
        # Processing the call keyword arguments (line 1407)
        kwargs_319349 = {}
        # Getting the type of 'name' (line 1407)
        name_319347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 17), 'name', False)
        # Obtaining the member 'lower' of a type (line 1407)
        lower_319348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 17), name_319347, 'lower')
        # Calling lower(args, kwargs) (line 1407)
        lower_call_result_319350 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 17), lower_319348, *[], **kwargs_319349)
        
        # Storing an element on a container (line 1407)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1407, 8), rrkwargs_319346, (lower_call_result_319350, list_319345))
        
        # ################# End of '_handle_int_list(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_int_list' in the type store
        # Getting the type of 'stypy_return_type' (line 1406)
        stypy_return_type_319351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319351)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_int_list'
        return stypy_return_type_319351

    
    # Assigning a Name to a Name (line 1409):
    
    # Assigning a Name to a Name (line 1410):
    
    # Assigning a Name to a Name (line 1411):
    
    # Assigning a Name to a Name (line 1412):
    
    # Assigning a Name to a Name (line 1413):
    
    # Assigning a Name to a Name (line 1414):
    
    # Assigning a Name to a Name (line 1415):
    
    # Assigning a Name to a Name (line 1416):
    
    # Assigning a Name to a Name (line 1417):
    
    # Assigning a Name to a Name (line 1418):
    
    # Assigning a Name to a Name (line 1419):

    @norecursion
    def _handle_FREQ(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_FREQ'
        module_type_store = module_type_store.open_function_context('_handle_FREQ', 1421, 4, False)
        # Assigning a type to the variable 'self' (line 1422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_function_name', '_rrulestr._handle_FREQ')
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_param_names_list', ['rrkwargs', 'name', 'value'])
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr._handle_FREQ.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr._handle_FREQ', ['rrkwargs', 'name', 'value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_FREQ', localization, ['rrkwargs', 'name', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_FREQ(...)' code ##################

        
        # Assigning a Subscript to a Subscript (line 1422):
        
        # Assigning a Subscript to a Subscript (line 1422):
        
        # Obtaining the type of the subscript
        # Getting the type of 'value' (line 1422)
        value_319352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 42), 'value')
        # Getting the type of 'self' (line 1422)
        self_319353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 27), 'self')
        # Obtaining the member '_freq_map' of a type (line 1422)
        _freq_map_319354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 27), self_319353, '_freq_map')
        # Obtaining the member '__getitem__' of a type (line 1422)
        getitem___319355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 27), _freq_map_319354, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1422)
        subscript_call_result_319356 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 27), getitem___319355, value_319352)
        
        # Getting the type of 'rrkwargs' (line 1422)
        rrkwargs_319357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 8), 'rrkwargs')
        str_319358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 17), 'str', 'freq')
        # Storing an element on a container (line 1422)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1422, 8), rrkwargs_319357, (str_319358, subscript_call_result_319356))
        
        # ################# End of '_handle_FREQ(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_FREQ' in the type store
        # Getting the type of 'stypy_return_type' (line 1421)
        stypy_return_type_319359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319359)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_FREQ'
        return stypy_return_type_319359


    @norecursion
    def _handle_UNTIL(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_UNTIL'
        module_type_store = module_type_store.open_function_context('_handle_UNTIL', 1424, 4, False)
        # Assigning a type to the variable 'self' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_function_name', '_rrulestr._handle_UNTIL')
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_param_names_list', ['rrkwargs', 'name', 'value'])
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr._handle_UNTIL.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr._handle_UNTIL', ['rrkwargs', 'name', 'value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_UNTIL', localization, ['rrkwargs', 'name', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_UNTIL(...)' code ##################

        # Marking variables as global (line 1425)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 1425, 8), 'parser')
        
        
        # Getting the type of 'parser' (line 1426)
        parser_319360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 15), 'parser')
        # Applying the 'not' unary operator (line 1426)
        result_not__319361 = python_operator(stypy.reporting.localization.Localization(__file__, 1426, 11), 'not', parser_319360)
        
        # Testing the type of an if condition (line 1426)
        if_condition_319362 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1426, 8), result_not__319361)
        # Assigning a type to the variable 'if_condition_319362' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'if_condition_319362', if_condition_319362)
        # SSA begins for if statement (line 1426)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1427, 12))
        
        # 'from dateutil import parser' statement (line 1427)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
        import_319363 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1427, 12), 'dateutil')

        if (type(import_319363) is not StypyTypeError):

            if (import_319363 != 'pyd_module'):
                __import__(import_319363)
                sys_modules_319364 = sys.modules[import_319363]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1427, 12), 'dateutil', sys_modules_319364.module_type_store, module_type_store, ['parser'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1427, 12), __file__, sys_modules_319364, sys_modules_319364.module_type_store, module_type_store)
            else:
                from dateutil import parser

                import_from_module(stypy.reporting.localization.Localization(__file__, 1427, 12), 'dateutil', None, module_type_store, ['parser'], [parser])

        else:
            # Assigning a type to the variable 'dateutil' (line 1427)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1427, 12), 'dateutil', import_319363)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')
        
        # SSA join for if statement (line 1426)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1428)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Subscript (line 1429):
        
        # Assigning a Call to a Subscript (line 1429):
        
        # Call to parse(...): (line 1429)
        # Processing the call arguments (line 1429)
        # Getting the type of 'value' (line 1429)
        value_319367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 45), 'value', False)
        # Processing the call keyword arguments (line 1429)
        
        # Call to get(...): (line 1430)
        # Processing the call arguments (line 1430)
        str_319370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 65), 'str', 'ignoretz')
        # Processing the call keyword arguments (line 1430)
        kwargs_319371 = {}
        # Getting the type of 'kwargs' (line 1430)
        kwargs_319368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 54), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 1430)
        get_319369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 54), kwargs_319368, 'get')
        # Calling get(args, kwargs) (line 1430)
        get_call_result_319372 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 54), get_319369, *[str_319370], **kwargs_319371)
        
        keyword_319373 = get_call_result_319372
        
        # Call to get(...): (line 1431)
        # Processing the call arguments (line 1431)
        str_319376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 64), 'str', 'tzinfos')
        # Processing the call keyword arguments (line 1431)
        kwargs_319377 = {}
        # Getting the type of 'kwargs' (line 1431)
        kwargs_319374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 53), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 1431)
        get_319375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 53), kwargs_319374, 'get')
        # Calling get(args, kwargs) (line 1431)
        get_call_result_319378 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 53), get_319375, *[str_319376], **kwargs_319377)
        
        keyword_319379 = get_call_result_319378
        kwargs_319380 = {'ignoretz': keyword_319373, 'tzinfos': keyword_319379}
        # Getting the type of 'parser' (line 1429)
        parser_319365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 32), 'parser', False)
        # Obtaining the member 'parse' of a type (line 1429)
        parse_319366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 32), parser_319365, 'parse')
        # Calling parse(args, kwargs) (line 1429)
        parse_call_result_319381 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 32), parse_319366, *[value_319367], **kwargs_319380)
        
        # Getting the type of 'rrkwargs' (line 1429)
        rrkwargs_319382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 12), 'rrkwargs')
        str_319383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 21), 'str', 'until')
        # Storing an element on a container (line 1429)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 12), rrkwargs_319382, (str_319383, parse_call_result_319381))
        # SSA branch for the except part of a try statement (line 1428)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1428)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1433)
        # Processing the call arguments (line 1433)
        str_319385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 29), 'str', 'invalid until date')
        # Processing the call keyword arguments (line 1433)
        kwargs_319386 = {}
        # Getting the type of 'ValueError' (line 1433)
        ValueError_319384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1433)
        ValueError_call_result_319387 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 18), ValueError_319384, *[str_319385], **kwargs_319386)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1433, 12), ValueError_call_result_319387, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1428)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_handle_UNTIL(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_UNTIL' in the type store
        # Getting the type of 'stypy_return_type' (line 1424)
        stypy_return_type_319388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319388)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_UNTIL'
        return stypy_return_type_319388


    @norecursion
    def _handle_WKST(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_WKST'
        module_type_store = module_type_store.open_function_context('_handle_WKST', 1435, 4, False)
        # Assigning a type to the variable 'self' (line 1436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_function_name', '_rrulestr._handle_WKST')
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_param_names_list', ['rrkwargs', 'name', 'value'])
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr._handle_WKST.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr._handle_WKST', ['rrkwargs', 'name', 'value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_WKST', localization, ['rrkwargs', 'name', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_WKST(...)' code ##################

        
        # Assigning a Subscript to a Subscript (line 1436):
        
        # Assigning a Subscript to a Subscript (line 1436):
        
        # Obtaining the type of the subscript
        # Getting the type of 'value' (line 1436)
        value_319389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 45), 'value')
        # Getting the type of 'self' (line 1436)
        self_319390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 27), 'self')
        # Obtaining the member '_weekday_map' of a type (line 1436)
        _weekday_map_319391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 27), self_319390, '_weekday_map')
        # Obtaining the member '__getitem__' of a type (line 1436)
        getitem___319392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 27), _weekday_map_319391, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1436)
        subscript_call_result_319393 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 27), getitem___319392, value_319389)
        
        # Getting the type of 'rrkwargs' (line 1436)
        rrkwargs_319394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 8), 'rrkwargs')
        str_319395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 17), 'str', 'wkst')
        # Storing an element on a container (line 1436)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1436, 8), rrkwargs_319394, (str_319395, subscript_call_result_319393))
        
        # ################# End of '_handle_WKST(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_WKST' in the type store
        # Getting the type of 'stypy_return_type' (line 1435)
        stypy_return_type_319396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319396)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_WKST'
        return stypy_return_type_319396


    @norecursion
    def _handle_BYWEEKDAY(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_handle_BYWEEKDAY'
        module_type_store = module_type_store.open_function_context('_handle_BYWEEKDAY', 1438, 4, False)
        # Assigning a type to the variable 'self' (line 1439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_function_name', '_rrulestr._handle_BYWEEKDAY')
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_param_names_list', ['rrkwargs', 'name', 'value'])
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr._handle_BYWEEKDAY.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr._handle_BYWEEKDAY', ['rrkwargs', 'name', 'value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_handle_BYWEEKDAY', localization, ['rrkwargs', 'name', 'value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_handle_BYWEEKDAY(...)' code ##################

        str_319397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, (-1)), 'str', '\n        Two ways to specify this: +1MO or MO(+1)\n        ')
        
        # Assigning a List to a Name (line 1442):
        
        # Assigning a List to a Name (line 1442):
        
        # Obtaining an instance of the builtin type 'list' (line 1442)
        list_319398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1442)
        
        # Assigning a type to the variable 'l' (line 1442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 8), 'l', list_319398)
        
        
        # Call to split(...): (line 1443)
        # Processing the call arguments (line 1443)
        str_319401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, 32), 'str', ',')
        # Processing the call keyword arguments (line 1443)
        kwargs_319402 = {}
        # Getting the type of 'value' (line 1443)
        value_319399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 20), 'value', False)
        # Obtaining the member 'split' of a type (line 1443)
        split_319400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 20), value_319399, 'split')
        # Calling split(args, kwargs) (line 1443)
        split_call_result_319403 = invoke(stypy.reporting.localization.Localization(__file__, 1443, 20), split_319400, *[str_319401], **kwargs_319402)
        
        # Testing the type of a for loop iterable (line 1443)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1443, 8), split_call_result_319403)
        # Getting the type of the for loop variable (line 1443)
        for_loop_var_319404 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1443, 8), split_call_result_319403)
        # Assigning a type to the variable 'wday' (line 1443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 8), 'wday', for_loop_var_319404)
        # SSA begins for a for statement (line 1443)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        str_319405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 15), 'str', '(')
        # Getting the type of 'wday' (line 1444)
        wday_319406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 22), 'wday')
        # Applying the binary operator 'in' (line 1444)
        result_contains_319407 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 15), 'in', str_319405, wday_319406)
        
        # Testing the type of an if condition (line 1444)
        if_condition_319408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1444, 12), result_contains_319407)
        # Assigning a type to the variable 'if_condition_319408' (line 1444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 12), 'if_condition_319408', if_condition_319408)
        # SSA begins for if statement (line 1444)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1446):
        
        # Assigning a Call to a Name (line 1446):
        
        # Call to split(...): (line 1446)
        # Processing the call arguments (line 1446)
        str_319411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 34), 'str', '(')
        # Processing the call keyword arguments (line 1446)
        kwargs_319412 = {}
        # Getting the type of 'wday' (line 1446)
        wday_319409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 23), 'wday', False)
        # Obtaining the member 'split' of a type (line 1446)
        split_319410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 23), wday_319409, 'split')
        # Calling split(args, kwargs) (line 1446)
        split_call_result_319413 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 23), split_319410, *[str_319411], **kwargs_319412)
        
        # Assigning a type to the variable 'splt' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 16), 'splt', split_call_result_319413)
        
        # Assigning a Subscript to a Name (line 1447):
        
        # Assigning a Subscript to a Name (line 1447):
        
        # Obtaining the type of the subscript
        int_319414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 25), 'int')
        # Getting the type of 'splt' (line 1447)
        splt_319415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 20), 'splt')
        # Obtaining the member '__getitem__' of a type (line 1447)
        getitem___319416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1447, 20), splt_319415, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1447)
        subscript_call_result_319417 = invoke(stypy.reporting.localization.Localization(__file__, 1447, 20), getitem___319416, int_319414)
        
        # Assigning a type to the variable 'w' (line 1447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 16), 'w', subscript_call_result_319417)
        
        # Assigning a Call to a Name (line 1448):
        
        # Assigning a Call to a Name (line 1448):
        
        # Call to int(...): (line 1448)
        # Processing the call arguments (line 1448)
        
        # Obtaining the type of the subscript
        int_319419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 33), 'int')
        slice_319420 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1448, 24), None, int_319419, None)
        
        # Obtaining the type of the subscript
        int_319421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 29), 'int')
        # Getting the type of 'splt' (line 1448)
        splt_319422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 24), 'splt', False)
        # Obtaining the member '__getitem__' of a type (line 1448)
        getitem___319423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 24), splt_319422, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1448)
        subscript_call_result_319424 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 24), getitem___319423, int_319421)
        
        # Obtaining the member '__getitem__' of a type (line 1448)
        getitem___319425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 24), subscript_call_result_319424, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1448)
        subscript_call_result_319426 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 24), getitem___319425, slice_319420)
        
        # Processing the call keyword arguments (line 1448)
        kwargs_319427 = {}
        # Getting the type of 'int' (line 1448)
        int_319418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 20), 'int', False)
        # Calling int(args, kwargs) (line 1448)
        int_call_result_319428 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 20), int_319418, *[subscript_call_result_319426], **kwargs_319427)
        
        # Assigning a type to the variable 'n' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 16), 'n', int_call_result_319428)
        # SSA branch for the else part of an if statement (line 1444)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to len(...): (line 1449)
        # Processing the call arguments (line 1449)
        # Getting the type of 'wday' (line 1449)
        wday_319430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 21), 'wday', False)
        # Processing the call keyword arguments (line 1449)
        kwargs_319431 = {}
        # Getting the type of 'len' (line 1449)
        len_319429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 17), 'len', False)
        # Calling len(args, kwargs) (line 1449)
        len_call_result_319432 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 17), len_319429, *[wday_319430], **kwargs_319431)
        
        # Testing the type of an if condition (line 1449)
        if_condition_319433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1449, 17), len_call_result_319432)
        # Assigning a type to the variable 'if_condition_319433' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 17), 'if_condition_319433', if_condition_319433)
        # SSA begins for if statement (line 1449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1451)
        # Processing the call arguments (line 1451)
        
        # Call to len(...): (line 1451)
        # Processing the call arguments (line 1451)
        # Getting the type of 'wday' (line 1451)
        wday_319436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 35), 'wday', False)
        # Processing the call keyword arguments (line 1451)
        kwargs_319437 = {}
        # Getting the type of 'len' (line 1451)
        len_319435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 31), 'len', False)
        # Calling len(args, kwargs) (line 1451)
        len_call_result_319438 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 31), len_319435, *[wday_319436], **kwargs_319437)
        
        # Processing the call keyword arguments (line 1451)
        kwargs_319439 = {}
        # Getting the type of 'range' (line 1451)
        range_319434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 25), 'range', False)
        # Calling range(args, kwargs) (line 1451)
        range_call_result_319440 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 25), range_319434, *[len_call_result_319438], **kwargs_319439)
        
        # Testing the type of a for loop iterable (line 1451)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1451, 16), range_call_result_319440)
        # Getting the type of the for loop variable (line 1451)
        for_loop_var_319441 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1451, 16), range_call_result_319440)
        # Assigning a type to the variable 'i' (line 1451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 16), 'i', for_loop_var_319441)
        # SSA begins for a for statement (line 1451)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1452)
        i_319442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 28), 'i')
        # Getting the type of 'wday' (line 1452)
        wday_319443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 23), 'wday')
        # Obtaining the member '__getitem__' of a type (line 1452)
        getitem___319444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 23), wday_319443, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1452)
        subscript_call_result_319445 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 23), getitem___319444, i_319442)
        
        str_319446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 38), 'str', '+-0123456789')
        # Applying the binary operator 'notin' (line 1452)
        result_contains_319447 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 23), 'notin', subscript_call_result_319445, str_319446)
        
        # Testing the type of an if condition (line 1452)
        if_condition_319448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1452, 20), result_contains_319447)
        # Assigning a type to the variable 'if_condition_319448' (line 1452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1452, 20), 'if_condition_319448', if_condition_319448)
        # SSA begins for if statement (line 1452)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1452)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BoolOp to a Name (line 1454):
        
        # Assigning a BoolOp to a Name (line 1454):
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1454)
        i_319449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 26), 'i')
        slice_319450 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1454, 20), None, i_319449, None)
        # Getting the type of 'wday' (line 1454)
        wday_319451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 20), 'wday')
        # Obtaining the member '__getitem__' of a type (line 1454)
        getitem___319452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1454, 20), wday_319451, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1454)
        subscript_call_result_319453 = invoke(stypy.reporting.localization.Localization(__file__, 1454, 20), getitem___319452, slice_319450)
        
        # Getting the type of 'None' (line 1454)
        None_319454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 32), 'None')
        # Applying the binary operator 'or' (line 1454)
        result_or_keyword_319455 = python_operator(stypy.reporting.localization.Localization(__file__, 1454, 20), 'or', subscript_call_result_319453, None_319454)
        
        # Assigning a type to the variable 'n' (line 1454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 16), 'n', result_or_keyword_319455)
        
        # Assigning a Subscript to a Name (line 1455):
        
        # Assigning a Subscript to a Name (line 1455):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1455)
        i_319456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 25), 'i')
        slice_319457 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1455, 20), i_319456, None, None)
        # Getting the type of 'wday' (line 1455)
        wday_319458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 20), 'wday')
        # Obtaining the member '__getitem__' of a type (line 1455)
        getitem___319459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1455, 20), wday_319458, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1455)
        subscript_call_result_319460 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 20), getitem___319459, slice_319457)
        
        # Assigning a type to the variable 'w' (line 1455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 16), 'w', subscript_call_result_319460)
        
        # Getting the type of 'n' (line 1456)
        n_319461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 19), 'n')
        # Testing the type of an if condition (line 1456)
        if_condition_319462 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1456, 16), n_319461)
        # Assigning a type to the variable 'if_condition_319462' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 16), 'if_condition_319462', if_condition_319462)
        # SSA begins for if statement (line 1456)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1457):
        
        # Assigning a Call to a Name (line 1457):
        
        # Call to int(...): (line 1457)
        # Processing the call arguments (line 1457)
        # Getting the type of 'n' (line 1457)
        n_319464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 28), 'n', False)
        # Processing the call keyword arguments (line 1457)
        kwargs_319465 = {}
        # Getting the type of 'int' (line 1457)
        int_319463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 24), 'int', False)
        # Calling int(args, kwargs) (line 1457)
        int_call_result_319466 = invoke(stypy.reporting.localization.Localization(__file__, 1457, 24), int_319463, *[n_319464], **kwargs_319465)
        
        # Assigning a type to the variable 'n' (line 1457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 20), 'n', int_call_result_319466)
        # SSA join for if statement (line 1456)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1449)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1459)
        # Processing the call arguments (line 1459)
        str_319468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 33), 'str', 'Invalid (empty) BYDAY specification.')
        # Processing the call keyword arguments (line 1459)
        kwargs_319469 = {}
        # Getting the type of 'ValueError' (line 1459)
        ValueError_319467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1459)
        ValueError_call_result_319470 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 22), ValueError_319467, *[str_319468], **kwargs_319469)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1459, 16), ValueError_call_result_319470, 'raise parameter', BaseException)
        # SSA join for if statement (line 1449)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1444)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1461)
        # Processing the call arguments (line 1461)
        
        # Call to (...): (line 1461)
        # Processing the call arguments (line 1461)
        # Getting the type of 'n' (line 1461)
        n_319481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 52), 'n', False)
        # Processing the call keyword arguments (line 1461)
        kwargs_319482 = {}
        
        # Obtaining the type of the subscript
        
        # Obtaining the type of the subscript
        # Getting the type of 'w' (line 1461)
        w_319473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 48), 'w', False)
        # Getting the type of 'self' (line 1461)
        self_319474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 30), 'self', False)
        # Obtaining the member '_weekday_map' of a type (line 1461)
        _weekday_map_319475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 30), self_319474, '_weekday_map')
        # Obtaining the member '__getitem__' of a type (line 1461)
        getitem___319476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 30), _weekday_map_319475, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1461)
        subscript_call_result_319477 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 30), getitem___319476, w_319473)
        
        # Getting the type of 'weekdays' (line 1461)
        weekdays_319478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 21), 'weekdays', False)
        # Obtaining the member '__getitem__' of a type (line 1461)
        getitem___319479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 21), weekdays_319478, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1461)
        subscript_call_result_319480 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 21), getitem___319479, subscript_call_result_319477)
        
        # Calling (args, kwargs) (line 1461)
        _call_result_319483 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 21), subscript_call_result_319480, *[n_319481], **kwargs_319482)
        
        # Processing the call keyword arguments (line 1461)
        kwargs_319484 = {}
        # Getting the type of 'l' (line 1461)
        l_319471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 12), 'l', False)
        # Obtaining the member 'append' of a type (line 1461)
        append_319472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 12), l_319471, 'append')
        # Calling append(args, kwargs) (line 1461)
        append_call_result_319485 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 12), append_319472, *[_call_result_319483], **kwargs_319484)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1462):
        
        # Assigning a Name to a Subscript (line 1462):
        # Getting the type of 'l' (line 1462)
        l_319486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 32), 'l')
        # Getting the type of 'rrkwargs' (line 1462)
        rrkwargs_319487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 8), 'rrkwargs')
        str_319488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1462, 17), 'str', 'byweekday')
        # Storing an element on a container (line 1462)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1462, 8), rrkwargs_319487, (str_319488, l_319486))
        
        # ################# End of '_handle_BYWEEKDAY(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_handle_BYWEEKDAY' in the type store
        # Getting the type of 'stypy_return_type' (line 1438)
        stypy_return_type_319489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319489)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_handle_BYWEEKDAY'
        return stypy_return_type_319489

    
    # Assigning a Name to a Name (line 1464):

    @norecursion
    def _parse_rfc_rrule(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1467)
        None_319490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 33), 'None')
        # Getting the type of 'False' (line 1468)
        False_319491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 31), 'False')
        # Getting the type of 'False' (line 1469)
        False_319492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 34), 'False')
        # Getting the type of 'None' (line 1470)
        None_319493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 33), 'None')
        defaults = [None_319490, False_319491, False_319492, None_319493]
        # Create a new context for function '_parse_rfc_rrule'
        module_type_store = module_type_store.open_function_context('_parse_rfc_rrule', 1466, 4, False)
        # Assigning a type to the variable 'self' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_function_name', '_rrulestr._parse_rfc_rrule')
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_param_names_list', ['line', 'dtstart', 'cache', 'ignoretz', 'tzinfos'])
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr._parse_rfc_rrule.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr._parse_rfc_rrule', ['line', 'dtstart', 'cache', 'ignoretz', 'tzinfos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_parse_rfc_rrule', localization, ['line', 'dtstart', 'cache', 'ignoretz', 'tzinfos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_parse_rfc_rrule(...)' code ##################

        
        
        
        # Call to find(...): (line 1471)
        # Processing the call arguments (line 1471)
        str_319496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 21), 'str', ':')
        # Processing the call keyword arguments (line 1471)
        kwargs_319497 = {}
        # Getting the type of 'line' (line 1471)
        line_319494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 11), 'line', False)
        # Obtaining the member 'find' of a type (line 1471)
        find_319495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 11), line_319494, 'find')
        # Calling find(args, kwargs) (line 1471)
        find_call_result_319498 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 11), find_319495, *[str_319496], **kwargs_319497)
        
        int_319499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 29), 'int')
        # Applying the binary operator '!=' (line 1471)
        result_ne_319500 = python_operator(stypy.reporting.localization.Localization(__file__, 1471, 11), '!=', find_call_result_319498, int_319499)
        
        # Testing the type of an if condition (line 1471)
        if_condition_319501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1471, 8), result_ne_319500)
        # Assigning a type to the variable 'if_condition_319501' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'if_condition_319501', if_condition_319501)
        # SSA begins for if statement (line 1471)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1472):
        
        # Assigning a Call to a Name:
        
        # Call to split(...): (line 1472)
        # Processing the call arguments (line 1472)
        str_319504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 37), 'str', ':')
        # Processing the call keyword arguments (line 1472)
        kwargs_319505 = {}
        # Getting the type of 'line' (line 1472)
        line_319502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 26), 'line', False)
        # Obtaining the member 'split' of a type (line 1472)
        split_319503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 26), line_319502, 'split')
        # Calling split(args, kwargs) (line 1472)
        split_call_result_319506 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 26), split_319503, *[str_319504], **kwargs_319505)
        
        # Assigning a type to the variable 'call_assignment_315129' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'call_assignment_315129', split_call_result_319506)
        
        # Assigning a Call to a Name (line 1472):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_319509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 12), 'int')
        # Processing the call keyword arguments
        kwargs_319510 = {}
        # Getting the type of 'call_assignment_315129' (line 1472)
        call_assignment_315129_319507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'call_assignment_315129', False)
        # Obtaining the member '__getitem__' of a type (line 1472)
        getitem___319508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 12), call_assignment_315129_319507, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_319511 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___319508, *[int_319509], **kwargs_319510)
        
        # Assigning a type to the variable 'call_assignment_315130' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'call_assignment_315130', getitem___call_result_319511)
        
        # Assigning a Name to a Name (line 1472):
        # Getting the type of 'call_assignment_315130' (line 1472)
        call_assignment_315130_319512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'call_assignment_315130')
        # Assigning a type to the variable 'name' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'name', call_assignment_315130_319512)
        
        # Assigning a Call to a Name (line 1472):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_319515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 12), 'int')
        # Processing the call keyword arguments
        kwargs_319516 = {}
        # Getting the type of 'call_assignment_315129' (line 1472)
        call_assignment_315129_319513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'call_assignment_315129', False)
        # Obtaining the member '__getitem__' of a type (line 1472)
        getitem___319514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 12), call_assignment_315129_319513, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_319517 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___319514, *[int_319515], **kwargs_319516)
        
        # Assigning a type to the variable 'call_assignment_315131' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'call_assignment_315131', getitem___call_result_319517)
        
        # Assigning a Name to a Name (line 1472):
        # Getting the type of 'call_assignment_315131' (line 1472)
        call_assignment_315131_319518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'call_assignment_315131')
        # Assigning a type to the variable 'value' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 18), 'value', call_assignment_315131_319518)
        
        
        # Getting the type of 'name' (line 1473)
        name_319519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 15), 'name')
        str_319520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 23), 'str', 'RRULE')
        # Applying the binary operator '!=' (line 1473)
        result_ne_319521 = python_operator(stypy.reporting.localization.Localization(__file__, 1473, 15), '!=', name_319519, str_319520)
        
        # Testing the type of an if condition (line 1473)
        if_condition_319522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1473, 12), result_ne_319521)
        # Assigning a type to the variable 'if_condition_319522' (line 1473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'if_condition_319522', if_condition_319522)
        # SSA begins for if statement (line 1473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1474)
        # Processing the call arguments (line 1474)
        str_319524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1474, 33), 'str', 'unknown parameter name')
        # Processing the call keyword arguments (line 1474)
        kwargs_319525 = {}
        # Getting the type of 'ValueError' (line 1474)
        ValueError_319523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1474)
        ValueError_call_result_319526 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 22), ValueError_319523, *[str_319524], **kwargs_319525)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1474, 16), ValueError_call_result_319526, 'raise parameter', BaseException)
        # SSA join for if statement (line 1473)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1471)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1476):
        
        # Assigning a Name to a Name (line 1476):
        # Getting the type of 'line' (line 1476)
        line_319527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 20), 'line')
        # Assigning a type to the variable 'value' (line 1476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 12), 'value', line_319527)
        # SSA join for if statement (line 1471)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Name (line 1477):
        
        # Assigning a Dict to a Name (line 1477):
        
        # Obtaining an instance of the builtin type 'dict' (line 1477)
        dict_319528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1477, 19), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1477)
        
        # Assigning a type to the variable 'rrkwargs' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'rrkwargs', dict_319528)
        
        
        # Call to split(...): (line 1478)
        # Processing the call arguments (line 1478)
        str_319531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1478, 32), 'str', ';')
        # Processing the call keyword arguments (line 1478)
        kwargs_319532 = {}
        # Getting the type of 'value' (line 1478)
        value_319529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 20), 'value', False)
        # Obtaining the member 'split' of a type (line 1478)
        split_319530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 20), value_319529, 'split')
        # Calling split(args, kwargs) (line 1478)
        split_call_result_319533 = invoke(stypy.reporting.localization.Localization(__file__, 1478, 20), split_319530, *[str_319531], **kwargs_319532)
        
        # Testing the type of a for loop iterable (line 1478)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1478, 8), split_call_result_319533)
        # Getting the type of the for loop variable (line 1478)
        for_loop_var_319534 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1478, 8), split_call_result_319533)
        # Assigning a type to the variable 'pair' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'pair', for_loop_var_319534)
        # SSA begins for a for statement (line 1478)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 1479):
        
        # Assigning a Call to a Name:
        
        # Call to split(...): (line 1479)
        # Processing the call arguments (line 1479)
        str_319537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 37), 'str', '=')
        # Processing the call keyword arguments (line 1479)
        kwargs_319538 = {}
        # Getting the type of 'pair' (line 1479)
        pair_319535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 26), 'pair', False)
        # Obtaining the member 'split' of a type (line 1479)
        split_319536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 26), pair_319535, 'split')
        # Calling split(args, kwargs) (line 1479)
        split_call_result_319539 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 26), split_319536, *[str_319537], **kwargs_319538)
        
        # Assigning a type to the variable 'call_assignment_315132' (line 1479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'call_assignment_315132', split_call_result_319539)
        
        # Assigning a Call to a Name (line 1479):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_319542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 12), 'int')
        # Processing the call keyword arguments
        kwargs_319543 = {}
        # Getting the type of 'call_assignment_315132' (line 1479)
        call_assignment_315132_319540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'call_assignment_315132', False)
        # Obtaining the member '__getitem__' of a type (line 1479)
        getitem___319541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 12), call_assignment_315132_319540, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_319544 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___319541, *[int_319542], **kwargs_319543)
        
        # Assigning a type to the variable 'call_assignment_315133' (line 1479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'call_assignment_315133', getitem___call_result_319544)
        
        # Assigning a Name to a Name (line 1479):
        # Getting the type of 'call_assignment_315133' (line 1479)
        call_assignment_315133_319545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'call_assignment_315133')
        # Assigning a type to the variable 'name' (line 1479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'name', call_assignment_315133_319545)
        
        # Assigning a Call to a Name (line 1479):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_319548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 12), 'int')
        # Processing the call keyword arguments
        kwargs_319549 = {}
        # Getting the type of 'call_assignment_315132' (line 1479)
        call_assignment_315132_319546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'call_assignment_315132', False)
        # Obtaining the member '__getitem__' of a type (line 1479)
        getitem___319547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 12), call_assignment_315132_319546, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_319550 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___319547, *[int_319548], **kwargs_319549)
        
        # Assigning a type to the variable 'call_assignment_315134' (line 1479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'call_assignment_315134', getitem___call_result_319550)
        
        # Assigning a Name to a Name (line 1479):
        # Getting the type of 'call_assignment_315134' (line 1479)
        call_assignment_315134_319551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'call_assignment_315134')
        # Assigning a type to the variable 'value' (line 1479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 18), 'value', call_assignment_315134_319551)
        
        # Assigning a Call to a Name (line 1480):
        
        # Assigning a Call to a Name (line 1480):
        
        # Call to upper(...): (line 1480)
        # Processing the call keyword arguments (line 1480)
        kwargs_319554 = {}
        # Getting the type of 'name' (line 1480)
        name_319552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 19), 'name', False)
        # Obtaining the member 'upper' of a type (line 1480)
        upper_319553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1480, 19), name_319552, 'upper')
        # Calling upper(args, kwargs) (line 1480)
        upper_call_result_319555 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 19), upper_319553, *[], **kwargs_319554)
        
        # Assigning a type to the variable 'name' (line 1480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 12), 'name', upper_call_result_319555)
        
        # Assigning a Call to a Name (line 1481):
        
        # Assigning a Call to a Name (line 1481):
        
        # Call to upper(...): (line 1481)
        # Processing the call keyword arguments (line 1481)
        kwargs_319558 = {}
        # Getting the type of 'value' (line 1481)
        value_319556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 20), 'value', False)
        # Obtaining the member 'upper' of a type (line 1481)
        upper_319557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 20), value_319556, 'upper')
        # Calling upper(args, kwargs) (line 1481)
        upper_call_result_319559 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 20), upper_319557, *[], **kwargs_319558)
        
        # Assigning a type to the variable 'value' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 12), 'value', upper_call_result_319559)
        
        
        # SSA begins for try-except statement (line 1482)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to (...): (line 1483)
        # Processing the call arguments (line 1483)
        # Getting the type of 'rrkwargs' (line 1483)
        rrkwargs_319567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 47), 'rrkwargs', False)
        # Getting the type of 'name' (line 1483)
        name_319568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 57), 'name', False)
        # Getting the type of 'value' (line 1483)
        value_319569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 63), 'value', False)
        # Processing the call keyword arguments (line 1483)
        # Getting the type of 'ignoretz' (line 1484)
        ignoretz_319570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 56), 'ignoretz', False)
        keyword_319571 = ignoretz_319570
        # Getting the type of 'tzinfos' (line 1485)
        tzinfos_319572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 55), 'tzinfos', False)
        keyword_319573 = tzinfos_319572
        kwargs_319574 = {'ignoretz': keyword_319571, 'tzinfos': keyword_319573}
        
        # Call to getattr(...): (line 1483)
        # Processing the call arguments (line 1483)
        # Getting the type of 'self' (line 1483)
        self_319561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 24), 'self', False)
        str_319562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 30), 'str', '_handle_')
        # Getting the type of 'name' (line 1483)
        name_319563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 41), 'name', False)
        # Applying the binary operator '+' (line 1483)
        result_add_319564 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 30), '+', str_319562, name_319563)
        
        # Processing the call keyword arguments (line 1483)
        kwargs_319565 = {}
        # Getting the type of 'getattr' (line 1483)
        getattr_319560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 16), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1483)
        getattr_call_result_319566 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 16), getattr_319560, *[self_319561, result_add_319564], **kwargs_319565)
        
        # Calling (args, kwargs) (line 1483)
        _call_result_319575 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 16), getattr_call_result_319566, *[rrkwargs_319567, name_319568, value_319569], **kwargs_319574)
        
        # SSA branch for the except part of a try statement (line 1482)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1482)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1487)
        # Processing the call arguments (line 1487)
        str_319577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 33), 'str', "unknown parameter '%s'")
        # Getting the type of 'name' (line 1487)
        name_319578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 60), 'name', False)
        # Applying the binary operator '%' (line 1487)
        result_mod_319579 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 33), '%', str_319577, name_319578)
        
        # Processing the call keyword arguments (line 1487)
        kwargs_319580 = {}
        # Getting the type of 'ValueError' (line 1487)
        ValueError_319576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1487)
        ValueError_call_result_319581 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 22), ValueError_319576, *[result_mod_319579], **kwargs_319580)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1487, 16), ValueError_call_result_319581, 'raise parameter', BaseException)
        # SSA branch for the except 'Tuple' branch of a try statement (line 1482)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1489)
        # Processing the call arguments (line 1489)
        str_319583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 33), 'str', "invalid '%s': %s")
        
        # Obtaining an instance of the builtin type 'tuple' (line 1489)
        tuple_319584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 55), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1489)
        # Adding element type (line 1489)
        # Getting the type of 'name' (line 1489)
        name_319585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 55), 'name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1489, 55), tuple_319584, name_319585)
        # Adding element type (line 1489)
        # Getting the type of 'value' (line 1489)
        value_319586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 61), 'value', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1489, 55), tuple_319584, value_319586)
        
        # Applying the binary operator '%' (line 1489)
        result_mod_319587 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 33), '%', str_319583, tuple_319584)
        
        # Processing the call keyword arguments (line 1489)
        kwargs_319588 = {}
        # Getting the type of 'ValueError' (line 1489)
        ValueError_319582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1489)
        ValueError_call_result_319589 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 22), ValueError_319582, *[result_mod_319587], **kwargs_319588)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1489, 16), ValueError_call_result_319589, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1482)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to rrule(...): (line 1490)
        # Processing the call keyword arguments (line 1490)
        # Getting the type of 'dtstart' (line 1490)
        dtstart_319591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 29), 'dtstart', False)
        keyword_319592 = dtstart_319591
        # Getting the type of 'cache' (line 1490)
        cache_319593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 44), 'cache', False)
        keyword_319594 = cache_319593
        # Getting the type of 'rrkwargs' (line 1490)
        rrkwargs_319595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 53), 'rrkwargs', False)
        kwargs_319596 = {'cache': keyword_319594, 'rrkwargs_319595': rrkwargs_319595, 'dtstart': keyword_319592}
        # Getting the type of 'rrule' (line 1490)
        rrule_319590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 15), 'rrule', False)
        # Calling rrule(args, kwargs) (line 1490)
        rrule_call_result_319597 = invoke(stypy.reporting.localization.Localization(__file__, 1490, 15), rrule_319590, *[], **kwargs_319596)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 8), 'stypy_return_type', rrule_call_result_319597)
        
        # ################# End of '_parse_rfc_rrule(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_parse_rfc_rrule' in the type store
        # Getting the type of 'stypy_return_type' (line 1466)
        stypy_return_type_319598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_319598)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_parse_rfc_rrule'
        return stypy_return_type_319598


    @norecursion
    def _parse_rfc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1493)
        None_319599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 27), 'None')
        # Getting the type of 'False' (line 1494)
        False_319600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 25), 'False')
        # Getting the type of 'False' (line 1495)
        False_319601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 26), 'False')
        # Getting the type of 'False' (line 1496)
        False_319602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 28), 'False')
        # Getting the type of 'False' (line 1497)
        False_319603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 30), 'False')
        # Getting the type of 'False' (line 1498)
        False_319604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 28), 'False')
        # Getting the type of 'None' (line 1499)
        None_319605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 27), 'None')
        defaults = [None_319599, False_319600, False_319601, False_319602, False_319603, False_319604, None_319605]
        # Create a new context for function '_parse_rfc'
        module_type_store = module_type_store.open_function_context('_parse_rfc', 1492, 4, False)
        # Assigning a type to the variable 'self' (line 1493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_function_name', '_rrulestr._parse_rfc')
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_param_names_list', ['s', 'dtstart', 'cache', 'unfold', 'forceset', 'compatible', 'ignoretz', 'tzinfos'])
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr._parse_rfc.__dict__.__setitem__('stypy_declared_arg_number', 9)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr._parse_rfc', ['s', 'dtstart', 'cache', 'unfold', 'forceset', 'compatible', 'ignoretz', 'tzinfos'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_parse_rfc', localization, ['s', 'dtstart', 'cache', 'unfold', 'forceset', 'compatible', 'ignoretz', 'tzinfos'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_parse_rfc(...)' code ##################

        # Marking variables as global (line 1500)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 1500, 8), 'parser')
        
        # Getting the type of 'compatible' (line 1501)
        compatible_319606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 11), 'compatible')
        # Testing the type of an if condition (line 1501)
        if_condition_319607 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1501, 8), compatible_319606)
        # Assigning a type to the variable 'if_condition_319607' (line 1501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 8), 'if_condition_319607', if_condition_319607)
        # SSA begins for if statement (line 1501)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1502):
        
        # Assigning a Name to a Name (line 1502):
        # Getting the type of 'True' (line 1502)
        True_319608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 23), 'True')
        # Assigning a type to the variable 'forceset' (line 1502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 12), 'forceset', True_319608)
        
        # Assigning a Name to a Name (line 1503):
        
        # Assigning a Name to a Name (line 1503):
        # Getting the type of 'True' (line 1503)
        True_319609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 21), 'True')
        # Assigning a type to the variable 'unfold' (line 1503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 12), 'unfold', True_319609)
        # SSA join for if statement (line 1501)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1504):
        
        # Assigning a Call to a Name (line 1504):
        
        # Call to upper(...): (line 1504)
        # Processing the call keyword arguments (line 1504)
        kwargs_319612 = {}
        # Getting the type of 's' (line 1504)
        s_319610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 12), 's', False)
        # Obtaining the member 'upper' of a type (line 1504)
        upper_319611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 12), s_319610, 'upper')
        # Calling upper(args, kwargs) (line 1504)
        upper_call_result_319613 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 12), upper_319611, *[], **kwargs_319612)
        
        # Assigning a type to the variable 's' (line 1504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 8), 's', upper_call_result_319613)
        
        
        
        # Call to strip(...): (line 1505)
        # Processing the call keyword arguments (line 1505)
        kwargs_319616 = {}
        # Getting the type of 's' (line 1505)
        s_319614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 15), 's', False)
        # Obtaining the member 'strip' of a type (line 1505)
        strip_319615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1505, 15), s_319614, 'strip')
        # Calling strip(args, kwargs) (line 1505)
        strip_call_result_319617 = invoke(stypy.reporting.localization.Localization(__file__, 1505, 15), strip_319615, *[], **kwargs_319616)
        
        # Applying the 'not' unary operator (line 1505)
        result_not__319618 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 11), 'not', strip_call_result_319617)
        
        # Testing the type of an if condition (line 1505)
        if_condition_319619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1505, 8), result_not__319618)
        # Assigning a type to the variable 'if_condition_319619' (line 1505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 8), 'if_condition_319619', if_condition_319619)
        # SSA begins for if statement (line 1505)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1506)
        # Processing the call arguments (line 1506)
        str_319621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 29), 'str', 'empty string')
        # Processing the call keyword arguments (line 1506)
        kwargs_319622 = {}
        # Getting the type of 'ValueError' (line 1506)
        ValueError_319620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1506)
        ValueError_call_result_319623 = invoke(stypy.reporting.localization.Localization(__file__, 1506, 18), ValueError_319620, *[str_319621], **kwargs_319622)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1506, 12), ValueError_call_result_319623, 'raise parameter', BaseException)
        # SSA join for if statement (line 1505)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'unfold' (line 1507)
        unfold_319624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 11), 'unfold')
        # Testing the type of an if condition (line 1507)
        if_condition_319625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1507, 8), unfold_319624)
        # Assigning a type to the variable 'if_condition_319625' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'if_condition_319625', if_condition_319625)
        # SSA begins for if statement (line 1507)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1508):
        
        # Assigning a Call to a Name (line 1508):
        
        # Call to splitlines(...): (line 1508)
        # Processing the call keyword arguments (line 1508)
        kwargs_319628 = {}
        # Getting the type of 's' (line 1508)
        s_319626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 20), 's', False)
        # Obtaining the member 'splitlines' of a type (line 1508)
        splitlines_319627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1508, 20), s_319626, 'splitlines')
        # Calling splitlines(args, kwargs) (line 1508)
        splitlines_call_result_319629 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 20), splitlines_319627, *[], **kwargs_319628)
        
        # Assigning a type to the variable 'lines' (line 1508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 12), 'lines', splitlines_call_result_319629)
        
        # Assigning a Num to a Name (line 1509):
        
        # Assigning a Num to a Name (line 1509):
        int_319630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, 16), 'int')
        # Assigning a type to the variable 'i' (line 1509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 12), 'i', int_319630)
        
        
        # Getting the type of 'i' (line 1510)
        i_319631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 18), 'i')
        
        # Call to len(...): (line 1510)
        # Processing the call arguments (line 1510)
        # Getting the type of 'lines' (line 1510)
        lines_319633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 26), 'lines', False)
        # Processing the call keyword arguments (line 1510)
        kwargs_319634 = {}
        # Getting the type of 'len' (line 1510)
        len_319632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 22), 'len', False)
        # Calling len(args, kwargs) (line 1510)
        len_call_result_319635 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 22), len_319632, *[lines_319633], **kwargs_319634)
        
        # Applying the binary operator '<' (line 1510)
        result_lt_319636 = python_operator(stypy.reporting.localization.Localization(__file__, 1510, 18), '<', i_319631, len_call_result_319635)
        
        # Testing the type of an if condition (line 1510)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1510, 12), result_lt_319636)
        # SSA begins for while statement (line 1510)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Call to a Name (line 1511):
        
        # Assigning a Call to a Name (line 1511):
        
        # Call to rstrip(...): (line 1511)
        # Processing the call keyword arguments (line 1511)
        kwargs_319642 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1511)
        i_319637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 29), 'i', False)
        # Getting the type of 'lines' (line 1511)
        lines_319638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 23), 'lines', False)
        # Obtaining the member '__getitem__' of a type (line 1511)
        getitem___319639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 23), lines_319638, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1511)
        subscript_call_result_319640 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 23), getitem___319639, i_319637)
        
        # Obtaining the member 'rstrip' of a type (line 1511)
        rstrip_319641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 23), subscript_call_result_319640, 'rstrip')
        # Calling rstrip(args, kwargs) (line 1511)
        rstrip_call_result_319643 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 23), rstrip_319641, *[], **kwargs_319642)
        
        # Assigning a type to the variable 'line' (line 1511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 16), 'line', rstrip_call_result_319643)
        
        
        # Getting the type of 'line' (line 1512)
        line_319644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 23), 'line')
        # Applying the 'not' unary operator (line 1512)
        result_not__319645 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 19), 'not', line_319644)
        
        # Testing the type of an if condition (line 1512)
        if_condition_319646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1512, 16), result_not__319645)
        # Assigning a type to the variable 'if_condition_319646' (line 1512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 16), 'if_condition_319646', if_condition_319646)
        # SSA begins for if statement (line 1512)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'lines' (line 1513)
        lines_319647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 24), 'lines')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1513)
        i_319648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 30), 'i')
        # Getting the type of 'lines' (line 1513)
        lines_319649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 24), 'lines')
        # Obtaining the member '__getitem__' of a type (line 1513)
        getitem___319650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 24), lines_319649, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1513)
        subscript_call_result_319651 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 24), getitem___319650, i_319648)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1513, 20), lines_319647, subscript_call_result_319651)
        # SSA branch for the else part of an if statement (line 1512)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1514)
        i_319652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 21), 'i')
        int_319653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1514, 25), 'int')
        # Applying the binary operator '>' (line 1514)
        result_gt_319654 = python_operator(stypy.reporting.localization.Localization(__file__, 1514, 21), '>', i_319652, int_319653)
        
        
        
        # Obtaining the type of the subscript
        int_319655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1514, 36), 'int')
        # Getting the type of 'line' (line 1514)
        line_319656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 31), 'line')
        # Obtaining the member '__getitem__' of a type (line 1514)
        getitem___319657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1514, 31), line_319656, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1514)
        subscript_call_result_319658 = invoke(stypy.reporting.localization.Localization(__file__, 1514, 31), getitem___319657, int_319655)
        
        str_319659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1514, 42), 'str', ' ')
        # Applying the binary operator '==' (line 1514)
        result_eq_319660 = python_operator(stypy.reporting.localization.Localization(__file__, 1514, 31), '==', subscript_call_result_319658, str_319659)
        
        # Applying the binary operator 'and' (line 1514)
        result_and_keyword_319661 = python_operator(stypy.reporting.localization.Localization(__file__, 1514, 21), 'and', result_gt_319654, result_eq_319660)
        
        # Testing the type of an if condition (line 1514)
        if_condition_319662 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1514, 21), result_and_keyword_319661)
        # Assigning a type to the variable 'if_condition_319662' (line 1514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 21), 'if_condition_319662', if_condition_319662)
        # SSA begins for if statement (line 1514)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'lines' (line 1515)
        lines_319663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 20), 'lines')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1515)
        i_319664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 26), 'i')
        int_319665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 28), 'int')
        # Applying the binary operator '-' (line 1515)
        result_sub_319666 = python_operator(stypy.reporting.localization.Localization(__file__, 1515, 26), '-', i_319664, int_319665)
        
        # Getting the type of 'lines' (line 1515)
        lines_319667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 20), 'lines')
        # Obtaining the member '__getitem__' of a type (line 1515)
        getitem___319668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 20), lines_319667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1515)
        subscript_call_result_319669 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 20), getitem___319668, result_sub_319666)
        
        
        # Obtaining the type of the subscript
        int_319670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 39), 'int')
        slice_319671 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1515, 34), int_319670, None, None)
        # Getting the type of 'line' (line 1515)
        line_319672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 34), 'line')
        # Obtaining the member '__getitem__' of a type (line 1515)
        getitem___319673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 34), line_319672, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1515)
        subscript_call_result_319674 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 34), getitem___319673, slice_319671)
        
        # Applying the binary operator '+=' (line 1515)
        result_iadd_319675 = python_operator(stypy.reporting.localization.Localization(__file__, 1515, 20), '+=', subscript_call_result_319669, subscript_call_result_319674)
        # Getting the type of 'lines' (line 1515)
        lines_319676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 20), 'lines')
        # Getting the type of 'i' (line 1515)
        i_319677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 26), 'i')
        int_319678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 28), 'int')
        # Applying the binary operator '-' (line 1515)
        result_sub_319679 = python_operator(stypy.reporting.localization.Localization(__file__, 1515, 26), '-', i_319677, int_319678)
        
        # Storing an element on a container (line 1515)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1515, 20), lines_319676, (result_sub_319679, result_iadd_319675))
        
        # Deleting a member
        # Getting the type of 'lines' (line 1516)
        lines_319680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 24), 'lines')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1516)
        i_319681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 30), 'i')
        # Getting the type of 'lines' (line 1516)
        lines_319682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 24), 'lines')
        # Obtaining the member '__getitem__' of a type (line 1516)
        getitem___319683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 24), lines_319682, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1516)
        subscript_call_result_319684 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 24), getitem___319683, i_319681)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1516, 20), lines_319680, subscript_call_result_319684)
        # SSA branch for the else part of an if statement (line 1514)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'i' (line 1518)
        i_319685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 20), 'i')
        int_319686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1518, 25), 'int')
        # Applying the binary operator '+=' (line 1518)
        result_iadd_319687 = python_operator(stypy.reporting.localization.Localization(__file__, 1518, 20), '+=', i_319685, int_319686)
        # Assigning a type to the variable 'i' (line 1518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1518, 20), 'i', result_iadd_319687)
        
        # SSA join for if statement (line 1514)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1512)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 1510)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1507)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1520):
        
        # Assigning a Call to a Name (line 1520):
        
        # Call to split(...): (line 1520)
        # Processing the call keyword arguments (line 1520)
        kwargs_319690 = {}
        # Getting the type of 's' (line 1520)
        s_319688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 20), 's', False)
        # Obtaining the member 'split' of a type (line 1520)
        split_319689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 20), s_319688, 'split')
        # Calling split(args, kwargs) (line 1520)
        split_call_result_319691 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 20), split_319689, *[], **kwargs_319690)
        
        # Assigning a type to the variable 'lines' (line 1520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1520, 12), 'lines', split_call_result_319691)
        # SSA join for if statement (line 1507)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'forceset' (line 1521)
        forceset_319692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 16), 'forceset')
        # Applying the 'not' unary operator (line 1521)
        result_not__319693 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 12), 'not', forceset_319692)
        
        
        
        # Call to len(...): (line 1521)
        # Processing the call arguments (line 1521)
        # Getting the type of 'lines' (line 1521)
        lines_319695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 33), 'lines', False)
        # Processing the call keyword arguments (line 1521)
        kwargs_319696 = {}
        # Getting the type of 'len' (line 1521)
        len_319694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 29), 'len', False)
        # Calling len(args, kwargs) (line 1521)
        len_call_result_319697 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 29), len_319694, *[lines_319695], **kwargs_319696)
        
        int_319698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, 43), 'int')
        # Applying the binary operator '==' (line 1521)
        result_eq_319699 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 29), '==', len_call_result_319697, int_319698)
        
        # Applying the binary operator 'and' (line 1521)
        result_and_keyword_319700 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 12), 'and', result_not__319693, result_eq_319699)
        
        # Evaluating a boolean operation
        
        
        # Call to find(...): (line 1521)
        # Processing the call arguments (line 1521)
        str_319703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, 57), 'str', ':')
        # Processing the call keyword arguments (line 1521)
        kwargs_319704 = {}
        # Getting the type of 's' (line 1521)
        s_319701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 50), 's', False)
        # Obtaining the member 'find' of a type (line 1521)
        find_319702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 50), s_319701, 'find')
        # Calling find(args, kwargs) (line 1521)
        find_call_result_319705 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 50), find_319702, *[str_319703], **kwargs_319704)
        
        int_319706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, 65), 'int')
        # Applying the binary operator '==' (line 1521)
        result_eq_319707 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 50), '==', find_call_result_319705, int_319706)
        
        
        # Call to startswith(...): (line 1522)
        # Processing the call arguments (line 1522)
        str_319710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, 63), 'str', 'RRULE:')
        # Processing the call keyword arguments (line 1522)
        kwargs_319711 = {}
        # Getting the type of 's' (line 1522)
        s_319708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 50), 's', False)
        # Obtaining the member 'startswith' of a type (line 1522)
        startswith_319709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 50), s_319708, 'startswith')
        # Calling startswith(args, kwargs) (line 1522)
        startswith_call_result_319712 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 50), startswith_319709, *[str_319710], **kwargs_319711)
        
        # Applying the binary operator 'or' (line 1521)
        result_or_keyword_319713 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 50), 'or', result_eq_319707, startswith_call_result_319712)
        
        # Applying the binary operator 'and' (line 1521)
        result_and_keyword_319714 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 12), 'and', result_and_keyword_319700, result_or_keyword_319713)
        
        # Testing the type of an if condition (line 1521)
        if_condition_319715 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1521, 8), result_and_keyword_319714)
        # Assigning a type to the variable 'if_condition_319715' (line 1521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 8), 'if_condition_319715', if_condition_319715)
        # SSA begins for if statement (line 1521)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _parse_rfc_rrule(...): (line 1523)
        # Processing the call arguments (line 1523)
        
        # Obtaining the type of the subscript
        int_319718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1523, 47), 'int')
        # Getting the type of 'lines' (line 1523)
        lines_319719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 41), 'lines', False)
        # Obtaining the member '__getitem__' of a type (line 1523)
        getitem___319720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 41), lines_319719, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1523)
        subscript_call_result_319721 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 41), getitem___319720, int_319718)
        
        # Processing the call keyword arguments (line 1523)
        # Getting the type of 'cache' (line 1523)
        cache_319722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 57), 'cache', False)
        keyword_319723 = cache_319722
        # Getting the type of 'dtstart' (line 1524)
        dtstart_319724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 49), 'dtstart', False)
        keyword_319725 = dtstart_319724
        # Getting the type of 'ignoretz' (line 1524)
        ignoretz_319726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 67), 'ignoretz', False)
        keyword_319727 = ignoretz_319726
        # Getting the type of 'tzinfos' (line 1525)
        tzinfos_319728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 49), 'tzinfos', False)
        keyword_319729 = tzinfos_319728
        kwargs_319730 = {'ignoretz': keyword_319727, 'dtstart': keyword_319725, 'cache': keyword_319723, 'tzinfos': keyword_319729}
        # Getting the type of 'self' (line 1523)
        self_319716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 19), 'self', False)
        # Obtaining the member '_parse_rfc_rrule' of a type (line 1523)
        _parse_rfc_rrule_319717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 19), self_319716, '_parse_rfc_rrule')
        # Calling _parse_rfc_rrule(args, kwargs) (line 1523)
        _parse_rfc_rrule_call_result_319731 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 19), _parse_rfc_rrule_319717, *[subscript_call_result_319721], **kwargs_319730)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 12), 'stypy_return_type', _parse_rfc_rrule_call_result_319731)
        # SSA branch for the else part of an if statement (line 1521)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 1527):
        
        # Assigning a List to a Name (line 1527):
        
        # Obtaining an instance of the builtin type 'list' (line 1527)
        list_319732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1527)
        
        # Assigning a type to the variable 'rrulevals' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'rrulevals', list_319732)
        
        # Assigning a List to a Name (line 1528):
        
        # Assigning a List to a Name (line 1528):
        
        # Obtaining an instance of the builtin type 'list' (line 1528)
        list_319733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1528)
        
        # Assigning a type to the variable 'rdatevals' (line 1528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 12), 'rdatevals', list_319733)
        
        # Assigning a List to a Name (line 1529):
        
        # Assigning a List to a Name (line 1529):
        
        # Obtaining an instance of the builtin type 'list' (line 1529)
        list_319734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1529)
        
        # Assigning a type to the variable 'exrulevals' (line 1529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 12), 'exrulevals', list_319734)
        
        # Assigning a List to a Name (line 1530):
        
        # Assigning a List to a Name (line 1530):
        
        # Obtaining an instance of the builtin type 'list' (line 1530)
        list_319735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1530)
        
        # Assigning a type to the variable 'exdatevals' (line 1530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), 'exdatevals', list_319735)
        
        # Getting the type of 'lines' (line 1531)
        lines_319736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 24), 'lines')
        # Testing the type of a for loop iterable (line 1531)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1531, 12), lines_319736)
        # Getting the type of the for loop variable (line 1531)
        for_loop_var_319737 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1531, 12), lines_319736)
        # Assigning a type to the variable 'line' (line 1531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), 'line', for_loop_var_319737)
        # SSA begins for a for statement (line 1531)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'line' (line 1532)
        line_319738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 23), 'line')
        # Applying the 'not' unary operator (line 1532)
        result_not__319739 = python_operator(stypy.reporting.localization.Localization(__file__, 1532, 19), 'not', line_319738)
        
        # Testing the type of an if condition (line 1532)
        if_condition_319740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1532, 16), result_not__319739)
        # Assigning a type to the variable 'if_condition_319740' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 16), 'if_condition_319740', if_condition_319740)
        # SSA begins for if statement (line 1532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1532)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to find(...): (line 1534)
        # Processing the call arguments (line 1534)
        str_319743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 29), 'str', ':')
        # Processing the call keyword arguments (line 1534)
        kwargs_319744 = {}
        # Getting the type of 'line' (line 1534)
        line_319741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 19), 'line', False)
        # Obtaining the member 'find' of a type (line 1534)
        find_319742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 19), line_319741, 'find')
        # Calling find(args, kwargs) (line 1534)
        find_call_result_319745 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 19), find_319742, *[str_319743], **kwargs_319744)
        
        int_319746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1534, 37), 'int')
        # Applying the binary operator '==' (line 1534)
        result_eq_319747 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 19), '==', find_call_result_319745, int_319746)
        
        # Testing the type of an if condition (line 1534)
        if_condition_319748 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1534, 16), result_eq_319747)
        # Assigning a type to the variable 'if_condition_319748' (line 1534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 16), 'if_condition_319748', if_condition_319748)
        # SSA begins for if statement (line 1534)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1535):
        
        # Assigning a Str to a Name (line 1535):
        str_319749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 27), 'str', 'RRULE')
        # Assigning a type to the variable 'name' (line 1535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 20), 'name', str_319749)
        
        # Assigning a Name to a Name (line 1536):
        
        # Assigning a Name to a Name (line 1536):
        # Getting the type of 'line' (line 1536)
        line_319750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 28), 'line')
        # Assigning a type to the variable 'value' (line 1536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 20), 'value', line_319750)
        # SSA branch for the else part of an if statement (line 1534)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1538):
        
        # Assigning a Call to a Name:
        
        # Call to split(...): (line 1538)
        # Processing the call arguments (line 1538)
        str_319753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 45), 'str', ':')
        int_319754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 50), 'int')
        # Processing the call keyword arguments (line 1538)
        kwargs_319755 = {}
        # Getting the type of 'line' (line 1538)
        line_319751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 34), 'line', False)
        # Obtaining the member 'split' of a type (line 1538)
        split_319752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 34), line_319751, 'split')
        # Calling split(args, kwargs) (line 1538)
        split_call_result_319756 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 34), split_319752, *[str_319753, int_319754], **kwargs_319755)
        
        # Assigning a type to the variable 'call_assignment_315135' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'call_assignment_315135', split_call_result_319756)
        
        # Assigning a Call to a Name (line 1538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_319759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 20), 'int')
        # Processing the call keyword arguments
        kwargs_319760 = {}
        # Getting the type of 'call_assignment_315135' (line 1538)
        call_assignment_315135_319757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'call_assignment_315135', False)
        # Obtaining the member '__getitem__' of a type (line 1538)
        getitem___319758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 20), call_assignment_315135_319757, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_319761 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___319758, *[int_319759], **kwargs_319760)
        
        # Assigning a type to the variable 'call_assignment_315136' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'call_assignment_315136', getitem___call_result_319761)
        
        # Assigning a Name to a Name (line 1538):
        # Getting the type of 'call_assignment_315136' (line 1538)
        call_assignment_315136_319762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'call_assignment_315136')
        # Assigning a type to the variable 'name' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'name', call_assignment_315136_319762)
        
        # Assigning a Call to a Name (line 1538):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_319765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 20), 'int')
        # Processing the call keyword arguments
        kwargs_319766 = {}
        # Getting the type of 'call_assignment_315135' (line 1538)
        call_assignment_315135_319763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'call_assignment_315135', False)
        # Obtaining the member '__getitem__' of a type (line 1538)
        getitem___319764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 20), call_assignment_315135_319763, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_319767 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___319764, *[int_319765], **kwargs_319766)
        
        # Assigning a type to the variable 'call_assignment_315137' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'call_assignment_315137', getitem___call_result_319767)
        
        # Assigning a Name to a Name (line 1538):
        # Getting the type of 'call_assignment_315137' (line 1538)
        call_assignment_315137_319768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 20), 'call_assignment_315137')
        # Assigning a type to the variable 'value' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 26), 'value', call_assignment_315137_319768)
        # SSA join for if statement (line 1534)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1539):
        
        # Assigning a Call to a Name (line 1539):
        
        # Call to split(...): (line 1539)
        # Processing the call arguments (line 1539)
        str_319771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 35), 'str', ';')
        # Processing the call keyword arguments (line 1539)
        kwargs_319772 = {}
        # Getting the type of 'name' (line 1539)
        name_319769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 24), 'name', False)
        # Obtaining the member 'split' of a type (line 1539)
        split_319770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 24), name_319769, 'split')
        # Calling split(args, kwargs) (line 1539)
        split_call_result_319773 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 24), split_319770, *[str_319771], **kwargs_319772)
        
        # Assigning a type to the variable 'parms' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 16), 'parms', split_call_result_319773)
        
        
        # Getting the type of 'parms' (line 1540)
        parms_319774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 23), 'parms')
        # Applying the 'not' unary operator (line 1540)
        result_not__319775 = python_operator(stypy.reporting.localization.Localization(__file__, 1540, 19), 'not', parms_319774)
        
        # Testing the type of an if condition (line 1540)
        if_condition_319776 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1540, 16), result_not__319775)
        # Assigning a type to the variable 'if_condition_319776' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 16), 'if_condition_319776', if_condition_319776)
        # SSA begins for if statement (line 1540)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1541)
        # Processing the call arguments (line 1541)
        str_319778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 37), 'str', 'empty property name')
        # Processing the call keyword arguments (line 1541)
        kwargs_319779 = {}
        # Getting the type of 'ValueError' (line 1541)
        ValueError_319777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1541)
        ValueError_call_result_319780 = invoke(stypy.reporting.localization.Localization(__file__, 1541, 26), ValueError_319777, *[str_319778], **kwargs_319779)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1541, 20), ValueError_call_result_319780, 'raise parameter', BaseException)
        # SSA join for if statement (line 1540)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1542):
        
        # Assigning a Subscript to a Name (line 1542):
        
        # Obtaining the type of the subscript
        int_319781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 29), 'int')
        # Getting the type of 'parms' (line 1542)
        parms_319782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 23), 'parms')
        # Obtaining the member '__getitem__' of a type (line 1542)
        getitem___319783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 23), parms_319782, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1542)
        subscript_call_result_319784 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 23), getitem___319783, int_319781)
        
        # Assigning a type to the variable 'name' (line 1542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 16), 'name', subscript_call_result_319784)
        
        # Assigning a Subscript to a Name (line 1543):
        
        # Assigning a Subscript to a Name (line 1543):
        
        # Obtaining the type of the subscript
        int_319785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 30), 'int')
        slice_319786 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1543, 24), int_319785, None, None)
        # Getting the type of 'parms' (line 1543)
        parms_319787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 24), 'parms')
        # Obtaining the member '__getitem__' of a type (line 1543)
        getitem___319788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 24), parms_319787, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1543)
        subscript_call_result_319789 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 24), getitem___319788, slice_319786)
        
        # Assigning a type to the variable 'parms' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 16), 'parms', subscript_call_result_319789)
        
        
        # Getting the type of 'name' (line 1544)
        name_319790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 19), 'name')
        str_319791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 27), 'str', 'RRULE')
        # Applying the binary operator '==' (line 1544)
        result_eq_319792 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 19), '==', name_319790, str_319791)
        
        # Testing the type of an if condition (line 1544)
        if_condition_319793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1544, 16), result_eq_319792)
        # Assigning a type to the variable 'if_condition_319793' (line 1544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1544, 16), 'if_condition_319793', if_condition_319793)
        # SSA begins for if statement (line 1544)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1545)
        parms_319794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 32), 'parms')
        # Testing the type of a for loop iterable (line 1545)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1545, 20), parms_319794)
        # Getting the type of the for loop variable (line 1545)
        for_loop_var_319795 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1545, 20), parms_319794)
        # Assigning a type to the variable 'parm' (line 1545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 20), 'parm', for_loop_var_319795)
        # SSA begins for a for statement (line 1545)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to ValueError(...): (line 1546)
        # Processing the call arguments (line 1546)
        str_319797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 41), 'str', 'unsupported RRULE parm: ')
        # Getting the type of 'parm' (line 1546)
        parm_319798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 68), 'parm', False)
        # Applying the binary operator '+' (line 1546)
        result_add_319799 = python_operator(stypy.reporting.localization.Localization(__file__, 1546, 41), '+', str_319797, parm_319798)
        
        # Processing the call keyword arguments (line 1546)
        kwargs_319800 = {}
        # Getting the type of 'ValueError' (line 1546)
        ValueError_319796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1546)
        ValueError_call_result_319801 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 30), ValueError_319796, *[result_add_319799], **kwargs_319800)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1546, 24), ValueError_call_result_319801, 'raise parameter', BaseException)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1547)
        # Processing the call arguments (line 1547)
        # Getting the type of 'value' (line 1547)
        value_319804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 37), 'value', False)
        # Processing the call keyword arguments (line 1547)
        kwargs_319805 = {}
        # Getting the type of 'rrulevals' (line 1547)
        rrulevals_319802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 20), 'rrulevals', False)
        # Obtaining the member 'append' of a type (line 1547)
        append_319803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 20), rrulevals_319802, 'append')
        # Calling append(args, kwargs) (line 1547)
        append_call_result_319806 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 20), append_319803, *[value_319804], **kwargs_319805)
        
        # SSA branch for the else part of an if statement (line 1544)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1548)
        name_319807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 21), 'name')
        str_319808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 29), 'str', 'RDATE')
        # Applying the binary operator '==' (line 1548)
        result_eq_319809 = python_operator(stypy.reporting.localization.Localization(__file__, 1548, 21), '==', name_319807, str_319808)
        
        # Testing the type of an if condition (line 1548)
        if_condition_319810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1548, 21), result_eq_319809)
        # Assigning a type to the variable 'if_condition_319810' (line 1548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 21), 'if_condition_319810', if_condition_319810)
        # SSA begins for if statement (line 1548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1549)
        parms_319811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 32), 'parms')
        # Testing the type of a for loop iterable (line 1549)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1549, 20), parms_319811)
        # Getting the type of the for loop variable (line 1549)
        for_loop_var_319812 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1549, 20), parms_319811)
        # Assigning a type to the variable 'parm' (line 1549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 20), 'parm', for_loop_var_319812)
        # SSA begins for a for statement (line 1549)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'parm' (line 1550)
        parm_319813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 27), 'parm')
        str_319814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1550, 35), 'str', 'VALUE=DATE-TIME')
        # Applying the binary operator '!=' (line 1550)
        result_ne_319815 = python_operator(stypy.reporting.localization.Localization(__file__, 1550, 27), '!=', parm_319813, str_319814)
        
        # Testing the type of an if condition (line 1550)
        if_condition_319816 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1550, 24), result_ne_319815)
        # Assigning a type to the variable 'if_condition_319816' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 24), 'if_condition_319816', if_condition_319816)
        # SSA begins for if statement (line 1550)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1551)
        # Processing the call arguments (line 1551)
        str_319818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 45), 'str', 'unsupported RDATE parm: ')
        # Getting the type of 'parm' (line 1551)
        parm_319819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 72), 'parm', False)
        # Applying the binary operator '+' (line 1551)
        result_add_319820 = python_operator(stypy.reporting.localization.Localization(__file__, 1551, 45), '+', str_319818, parm_319819)
        
        # Processing the call keyword arguments (line 1551)
        kwargs_319821 = {}
        # Getting the type of 'ValueError' (line 1551)
        ValueError_319817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1551)
        ValueError_call_result_319822 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 34), ValueError_319817, *[result_add_319820], **kwargs_319821)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1551, 28), ValueError_call_result_319822, 'raise parameter', BaseException)
        # SSA join for if statement (line 1550)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1552)
        # Processing the call arguments (line 1552)
        # Getting the type of 'value' (line 1552)
        value_319825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 37), 'value', False)
        # Processing the call keyword arguments (line 1552)
        kwargs_319826 = {}
        # Getting the type of 'rdatevals' (line 1552)
        rdatevals_319823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 20), 'rdatevals', False)
        # Obtaining the member 'append' of a type (line 1552)
        append_319824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 20), rdatevals_319823, 'append')
        # Calling append(args, kwargs) (line 1552)
        append_call_result_319827 = invoke(stypy.reporting.localization.Localization(__file__, 1552, 20), append_319824, *[value_319825], **kwargs_319826)
        
        # SSA branch for the else part of an if statement (line 1548)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1553)
        name_319828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 21), 'name')
        str_319829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1553, 29), 'str', 'EXRULE')
        # Applying the binary operator '==' (line 1553)
        result_eq_319830 = python_operator(stypy.reporting.localization.Localization(__file__, 1553, 21), '==', name_319828, str_319829)
        
        # Testing the type of an if condition (line 1553)
        if_condition_319831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1553, 21), result_eq_319830)
        # Assigning a type to the variable 'if_condition_319831' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 21), 'if_condition_319831', if_condition_319831)
        # SSA begins for if statement (line 1553)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1554)
        parms_319832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 32), 'parms')
        # Testing the type of a for loop iterable (line 1554)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1554, 20), parms_319832)
        # Getting the type of the for loop variable (line 1554)
        for_loop_var_319833 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1554, 20), parms_319832)
        # Assigning a type to the variable 'parm' (line 1554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 20), 'parm', for_loop_var_319833)
        # SSA begins for a for statement (line 1554)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to ValueError(...): (line 1555)
        # Processing the call arguments (line 1555)
        str_319835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1555, 41), 'str', 'unsupported EXRULE parm: ')
        # Getting the type of 'parm' (line 1555)
        parm_319836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 69), 'parm', False)
        # Applying the binary operator '+' (line 1555)
        result_add_319837 = python_operator(stypy.reporting.localization.Localization(__file__, 1555, 41), '+', str_319835, parm_319836)
        
        # Processing the call keyword arguments (line 1555)
        kwargs_319838 = {}
        # Getting the type of 'ValueError' (line 1555)
        ValueError_319834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1555)
        ValueError_call_result_319839 = invoke(stypy.reporting.localization.Localization(__file__, 1555, 30), ValueError_319834, *[result_add_319837], **kwargs_319838)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1555, 24), ValueError_call_result_319839, 'raise parameter', BaseException)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1556)
        # Processing the call arguments (line 1556)
        # Getting the type of 'value' (line 1556)
        value_319842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 38), 'value', False)
        # Processing the call keyword arguments (line 1556)
        kwargs_319843 = {}
        # Getting the type of 'exrulevals' (line 1556)
        exrulevals_319840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 20), 'exrulevals', False)
        # Obtaining the member 'append' of a type (line 1556)
        append_319841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 20), exrulevals_319840, 'append')
        # Calling append(args, kwargs) (line 1556)
        append_call_result_319844 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 20), append_319841, *[value_319842], **kwargs_319843)
        
        # SSA branch for the else part of an if statement (line 1553)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1557)
        name_319845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 21), 'name')
        str_319846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 29), 'str', 'EXDATE')
        # Applying the binary operator '==' (line 1557)
        result_eq_319847 = python_operator(stypy.reporting.localization.Localization(__file__, 1557, 21), '==', name_319845, str_319846)
        
        # Testing the type of an if condition (line 1557)
        if_condition_319848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1557, 21), result_eq_319847)
        # Assigning a type to the variable 'if_condition_319848' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 21), 'if_condition_319848', if_condition_319848)
        # SSA begins for if statement (line 1557)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1558)
        parms_319849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 32), 'parms')
        # Testing the type of a for loop iterable (line 1558)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1558, 20), parms_319849)
        # Getting the type of the for loop variable (line 1558)
        for_loop_var_319850 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1558, 20), parms_319849)
        # Assigning a type to the variable 'parm' (line 1558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 20), 'parm', for_loop_var_319850)
        # SSA begins for a for statement (line 1558)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'parm' (line 1559)
        parm_319851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 27), 'parm')
        str_319852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1559, 35), 'str', 'VALUE=DATE-TIME')
        # Applying the binary operator '!=' (line 1559)
        result_ne_319853 = python_operator(stypy.reporting.localization.Localization(__file__, 1559, 27), '!=', parm_319851, str_319852)
        
        # Testing the type of an if condition (line 1559)
        if_condition_319854 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1559, 24), result_ne_319853)
        # Assigning a type to the variable 'if_condition_319854' (line 1559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 24), 'if_condition_319854', if_condition_319854)
        # SSA begins for if statement (line 1559)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1560)
        # Processing the call arguments (line 1560)
        str_319856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 45), 'str', 'unsupported EXDATE parm: ')
        # Getting the type of 'parm' (line 1560)
        parm_319857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 73), 'parm', False)
        # Applying the binary operator '+' (line 1560)
        result_add_319858 = python_operator(stypy.reporting.localization.Localization(__file__, 1560, 45), '+', str_319856, parm_319857)
        
        # Processing the call keyword arguments (line 1560)
        kwargs_319859 = {}
        # Getting the type of 'ValueError' (line 1560)
        ValueError_319855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1560)
        ValueError_call_result_319860 = invoke(stypy.reporting.localization.Localization(__file__, 1560, 34), ValueError_319855, *[result_add_319858], **kwargs_319859)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1560, 28), ValueError_call_result_319860, 'raise parameter', BaseException)
        # SSA join for if statement (line 1559)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1561)
        # Processing the call arguments (line 1561)
        # Getting the type of 'value' (line 1561)
        value_319863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 38), 'value', False)
        # Processing the call keyword arguments (line 1561)
        kwargs_319864 = {}
        # Getting the type of 'exdatevals' (line 1561)
        exdatevals_319861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 20), 'exdatevals', False)
        # Obtaining the member 'append' of a type (line 1561)
        append_319862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 20), exdatevals_319861, 'append')
        # Calling append(args, kwargs) (line 1561)
        append_call_result_319865 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 20), append_319862, *[value_319863], **kwargs_319864)
        
        # SSA branch for the else part of an if statement (line 1557)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1562)
        name_319866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 21), 'name')
        str_319867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 29), 'str', 'DTSTART')
        # Applying the binary operator '==' (line 1562)
        result_eq_319868 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 21), '==', name_319866, str_319867)
        
        # Testing the type of an if condition (line 1562)
        if_condition_319869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1562, 21), result_eq_319868)
        # Assigning a type to the variable 'if_condition_319869' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 21), 'if_condition_319869', if_condition_319869)
        # SSA begins for if statement (line 1562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1563)
        parms_319870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 32), 'parms')
        # Testing the type of a for loop iterable (line 1563)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1563, 20), parms_319870)
        # Getting the type of the for loop variable (line 1563)
        for_loop_var_319871 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1563, 20), parms_319870)
        # Assigning a type to the variable 'parm' (line 1563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1563, 20), 'parm', for_loop_var_319871)
        # SSA begins for a for statement (line 1563)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to ValueError(...): (line 1564)
        # Processing the call arguments (line 1564)
        str_319873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1564, 41), 'str', 'unsupported DTSTART parm: ')
        # Getting the type of 'parm' (line 1564)
        parm_319874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 70), 'parm', False)
        # Applying the binary operator '+' (line 1564)
        result_add_319875 = python_operator(stypy.reporting.localization.Localization(__file__, 1564, 41), '+', str_319873, parm_319874)
        
        # Processing the call keyword arguments (line 1564)
        kwargs_319876 = {}
        # Getting the type of 'ValueError' (line 1564)
        ValueError_319872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1564)
        ValueError_call_result_319877 = invoke(stypy.reporting.localization.Localization(__file__, 1564, 30), ValueError_319872, *[result_add_319875], **kwargs_319876)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1564, 24), ValueError_call_result_319877, 'raise parameter', BaseException)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'parser' (line 1565)
        parser_319878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 27), 'parser')
        # Applying the 'not' unary operator (line 1565)
        result_not__319879 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 23), 'not', parser_319878)
        
        # Testing the type of an if condition (line 1565)
        if_condition_319880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1565, 20), result_not__319879)
        # Assigning a type to the variable 'if_condition_319880' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 20), 'if_condition_319880', if_condition_319880)
        # SSA begins for if statement (line 1565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1566, 24))
        
        # 'from dateutil import parser' statement (line 1566)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
        import_319881 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1566, 24), 'dateutil')

        if (type(import_319881) is not StypyTypeError):

            if (import_319881 != 'pyd_module'):
                __import__(import_319881)
                sys_modules_319882 = sys.modules[import_319881]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1566, 24), 'dateutil', sys_modules_319882.module_type_store, module_type_store, ['parser'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1566, 24), __file__, sys_modules_319882, sys_modules_319882.module_type_store, module_type_store)
            else:
                from dateutil import parser

                import_from_module(stypy.reporting.localization.Localization(__file__, 1566, 24), 'dateutil', None, module_type_store, ['parser'], [parser])

        else:
            # Assigning a type to the variable 'dateutil' (line 1566)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 24), 'dateutil', import_319881)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')
        
        # SSA join for if statement (line 1565)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1567):
        
        # Assigning a Call to a Name (line 1567):
        
        # Call to parse(...): (line 1567)
        # Processing the call arguments (line 1567)
        # Getting the type of 'value' (line 1567)
        value_319885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 43), 'value', False)
        # Processing the call keyword arguments (line 1567)
        # Getting the type of 'ignoretz' (line 1567)
        ignoretz_319886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 59), 'ignoretz', False)
        keyword_319887 = ignoretz_319886
        # Getting the type of 'tzinfos' (line 1568)
        tzinfos_319888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 51), 'tzinfos', False)
        keyword_319889 = tzinfos_319888
        kwargs_319890 = {'ignoretz': keyword_319887, 'tzinfos': keyword_319889}
        # Getting the type of 'parser' (line 1567)
        parser_319883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 30), 'parser', False)
        # Obtaining the member 'parse' of a type (line 1567)
        parse_319884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 30), parser_319883, 'parse')
        # Calling parse(args, kwargs) (line 1567)
        parse_call_result_319891 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 30), parse_319884, *[value_319885], **kwargs_319890)
        
        # Assigning a type to the variable 'dtstart' (line 1567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 20), 'dtstart', parse_call_result_319891)
        # SSA branch for the else part of an if statement (line 1562)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1570)
        # Processing the call arguments (line 1570)
        str_319893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 37), 'str', 'unsupported property: ')
        # Getting the type of 'name' (line 1570)
        name_319894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 62), 'name', False)
        # Applying the binary operator '+' (line 1570)
        result_add_319895 = python_operator(stypy.reporting.localization.Localization(__file__, 1570, 37), '+', str_319893, name_319894)
        
        # Processing the call keyword arguments (line 1570)
        kwargs_319896 = {}
        # Getting the type of 'ValueError' (line 1570)
        ValueError_319892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1570)
        ValueError_call_result_319897 = invoke(stypy.reporting.localization.Localization(__file__, 1570, 26), ValueError_319892, *[result_add_319895], **kwargs_319896)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1570, 20), ValueError_call_result_319897, 'raise parameter', BaseException)
        # SSA join for if statement (line 1562)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1557)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1553)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1548)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1544)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'forceset' (line 1571)
        forceset_319898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 16), 'forceset')
        
        
        # Call to len(...): (line 1571)
        # Processing the call arguments (line 1571)
        # Getting the type of 'rrulevals' (line 1571)
        rrulevals_319900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 32), 'rrulevals', False)
        # Processing the call keyword arguments (line 1571)
        kwargs_319901 = {}
        # Getting the type of 'len' (line 1571)
        len_319899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 28), 'len', False)
        # Calling len(args, kwargs) (line 1571)
        len_call_result_319902 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 28), len_319899, *[rrulevals_319900], **kwargs_319901)
        
        int_319903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 45), 'int')
        # Applying the binary operator '>' (line 1571)
        result_gt_319904 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 28), '>', len_call_result_319902, int_319903)
        
        # Applying the binary operator 'or' (line 1571)
        result_or_keyword_319905 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 16), 'or', forceset_319898, result_gt_319904)
        # Getting the type of 'rdatevals' (line 1571)
        rdatevals_319906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 50), 'rdatevals')
        # Applying the binary operator 'or' (line 1571)
        result_or_keyword_319907 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 16), 'or', result_or_keyword_319905, rdatevals_319906)
        # Getting the type of 'exrulevals' (line 1572)
        exrulevals_319908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 23), 'exrulevals')
        # Applying the binary operator 'or' (line 1571)
        result_or_keyword_319909 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 16), 'or', result_or_keyword_319907, exrulevals_319908)
        # Getting the type of 'exdatevals' (line 1572)
        exdatevals_319910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 37), 'exdatevals')
        # Applying the binary operator 'or' (line 1571)
        result_or_keyword_319911 = python_operator(stypy.reporting.localization.Localization(__file__, 1571, 16), 'or', result_or_keyword_319909, exdatevals_319910)
        
        # Testing the type of an if condition (line 1571)
        if_condition_319912 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1571, 12), result_or_keyword_319911)
        # Assigning a type to the variable 'if_condition_319912' (line 1571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 12), 'if_condition_319912', if_condition_319912)
        # SSA begins for if statement (line 1571)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'parser' (line 1573)
        parser_319913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 23), 'parser')
        # Applying the 'not' unary operator (line 1573)
        result_not__319914 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 19), 'not', parser_319913)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'rdatevals' (line 1573)
        rdatevals_319915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 35), 'rdatevals')
        # Getting the type of 'exdatevals' (line 1573)
        exdatevals_319916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 48), 'exdatevals')
        # Applying the binary operator 'or' (line 1573)
        result_or_keyword_319917 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 35), 'or', rdatevals_319915, exdatevals_319916)
        
        # Applying the binary operator 'and' (line 1573)
        result_and_keyword_319918 = python_operator(stypy.reporting.localization.Localization(__file__, 1573, 19), 'and', result_not__319914, result_or_keyword_319917)
        
        # Testing the type of an if condition (line 1573)
        if_condition_319919 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1573, 16), result_and_keyword_319918)
        # Assigning a type to the variable 'if_condition_319919' (line 1573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 16), 'if_condition_319919', if_condition_319919)
        # SSA begins for if statement (line 1573)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1574, 20))
        
        # 'from dateutil import parser' statement (line 1574)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/')
        import_319920 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1574, 20), 'dateutil')

        if (type(import_319920) is not StypyTypeError):

            if (import_319920 != 'pyd_module'):
                __import__(import_319920)
                sys_modules_319921 = sys.modules[import_319920]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1574, 20), 'dateutil', sys_modules_319921.module_type_store, module_type_store, ['parser'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1574, 20), __file__, sys_modules_319921, sys_modules_319921.module_type_store, module_type_store)
            else:
                from dateutil import parser

                import_from_module(stypy.reporting.localization.Localization(__file__, 1574, 20), 'dateutil', None, module_type_store, ['parser'], [parser])

        else:
            # Assigning a type to the variable 'dateutil' (line 1574)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 20), 'dateutil', import_319920)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/')
        
        # SSA join for if statement (line 1573)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1575):
        
        # Assigning a Call to a Name (line 1575):
        
        # Call to rruleset(...): (line 1575)
        # Processing the call keyword arguments (line 1575)
        # Getting the type of 'cache' (line 1575)
        cache_319923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 38), 'cache', False)
        keyword_319924 = cache_319923
        kwargs_319925 = {'cache': keyword_319924}
        # Getting the type of 'rruleset' (line 1575)
        rruleset_319922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 23), 'rruleset', False)
        # Calling rruleset(args, kwargs) (line 1575)
        rruleset_call_result_319926 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 23), rruleset_319922, *[], **kwargs_319925)
        
        # Assigning a type to the variable 'rset' (line 1575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 16), 'rset', rruleset_call_result_319926)
        
        # Getting the type of 'rrulevals' (line 1576)
        rrulevals_319927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 29), 'rrulevals')
        # Testing the type of a for loop iterable (line 1576)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1576, 16), rrulevals_319927)
        # Getting the type of the for loop variable (line 1576)
        for_loop_var_319928 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1576, 16), rrulevals_319927)
        # Assigning a type to the variable 'value' (line 1576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 16), 'value', for_loop_var_319928)
        # SSA begins for a for statement (line 1576)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to rrule(...): (line 1577)
        # Processing the call arguments (line 1577)
        
        # Call to _parse_rfc_rrule(...): (line 1577)
        # Processing the call arguments (line 1577)
        # Getting the type of 'value' (line 1577)
        value_319933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 53), 'value', False)
        # Processing the call keyword arguments (line 1577)
        # Getting the type of 'dtstart' (line 1577)
        dtstart_319934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 68), 'dtstart', False)
        keyword_319935 = dtstart_319934
        # Getting the type of 'ignoretz' (line 1578)
        ignoretz_319936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 62), 'ignoretz', False)
        keyword_319937 = ignoretz_319936
        # Getting the type of 'tzinfos' (line 1579)
        tzinfos_319938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 61), 'tzinfos', False)
        keyword_319939 = tzinfos_319938
        kwargs_319940 = {'ignoretz': keyword_319937, 'dtstart': keyword_319935, 'tzinfos': keyword_319939}
        # Getting the type of 'self' (line 1577)
        self_319931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 31), 'self', False)
        # Obtaining the member '_parse_rfc_rrule' of a type (line 1577)
        _parse_rfc_rrule_319932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 31), self_319931, '_parse_rfc_rrule')
        # Calling _parse_rfc_rrule(args, kwargs) (line 1577)
        _parse_rfc_rrule_call_result_319941 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 31), _parse_rfc_rrule_319932, *[value_319933], **kwargs_319940)
        
        # Processing the call keyword arguments (line 1577)
        kwargs_319942 = {}
        # Getting the type of 'rset' (line 1577)
        rset_319929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 20), 'rset', False)
        # Obtaining the member 'rrule' of a type (line 1577)
        rrule_319930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 20), rset_319929, 'rrule')
        # Calling rrule(args, kwargs) (line 1577)
        rrule_call_result_319943 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 20), rrule_319930, *[_parse_rfc_rrule_call_result_319941], **kwargs_319942)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'rdatevals' (line 1580)
        rdatevals_319944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 29), 'rdatevals')
        # Testing the type of a for loop iterable (line 1580)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1580, 16), rdatevals_319944)
        # Getting the type of the for loop variable (line 1580)
        for_loop_var_319945 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1580, 16), rdatevals_319944)
        # Assigning a type to the variable 'value' (line 1580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1580, 16), 'value', for_loop_var_319945)
        # SSA begins for a for statement (line 1580)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to split(...): (line 1581)
        # Processing the call arguments (line 1581)
        str_319948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 47), 'str', ',')
        # Processing the call keyword arguments (line 1581)
        kwargs_319949 = {}
        # Getting the type of 'value' (line 1581)
        value_319946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 35), 'value', False)
        # Obtaining the member 'split' of a type (line 1581)
        split_319947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 35), value_319946, 'split')
        # Calling split(args, kwargs) (line 1581)
        split_call_result_319950 = invoke(stypy.reporting.localization.Localization(__file__, 1581, 35), split_319947, *[str_319948], **kwargs_319949)
        
        # Testing the type of a for loop iterable (line 1581)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1581, 20), split_call_result_319950)
        # Getting the type of the for loop variable (line 1581)
        for_loop_var_319951 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1581, 20), split_call_result_319950)
        # Assigning a type to the variable 'datestr' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 20), 'datestr', for_loop_var_319951)
        # SSA begins for a for statement (line 1581)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to rdate(...): (line 1582)
        # Processing the call arguments (line 1582)
        
        # Call to parse(...): (line 1582)
        # Processing the call arguments (line 1582)
        # Getting the type of 'datestr' (line 1582)
        datestr_319956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 48), 'datestr', False)
        # Processing the call keyword arguments (line 1582)
        # Getting the type of 'ignoretz' (line 1583)
        ignoretz_319957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 57), 'ignoretz', False)
        keyword_319958 = ignoretz_319957
        # Getting the type of 'tzinfos' (line 1584)
        tzinfos_319959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 56), 'tzinfos', False)
        keyword_319960 = tzinfos_319959
        kwargs_319961 = {'ignoretz': keyword_319958, 'tzinfos': keyword_319960}
        # Getting the type of 'parser' (line 1582)
        parser_319954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 35), 'parser', False)
        # Obtaining the member 'parse' of a type (line 1582)
        parse_319955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 35), parser_319954, 'parse')
        # Calling parse(args, kwargs) (line 1582)
        parse_call_result_319962 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 35), parse_319955, *[datestr_319956], **kwargs_319961)
        
        # Processing the call keyword arguments (line 1582)
        kwargs_319963 = {}
        # Getting the type of 'rset' (line 1582)
        rset_319952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 24), 'rset', False)
        # Obtaining the member 'rdate' of a type (line 1582)
        rdate_319953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 24), rset_319952, 'rdate')
        # Calling rdate(args, kwargs) (line 1582)
        rdate_call_result_319964 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 24), rdate_319953, *[parse_call_result_319962], **kwargs_319963)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'exrulevals' (line 1585)
        exrulevals_319965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 29), 'exrulevals')
        # Testing the type of a for loop iterable (line 1585)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1585, 16), exrulevals_319965)
        # Getting the type of the for loop variable (line 1585)
        for_loop_var_319966 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1585, 16), exrulevals_319965)
        # Assigning a type to the variable 'value' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 16), 'value', for_loop_var_319966)
        # SSA begins for a for statement (line 1585)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to exrule(...): (line 1586)
        # Processing the call arguments (line 1586)
        
        # Call to _parse_rfc_rrule(...): (line 1586)
        # Processing the call arguments (line 1586)
        # Getting the type of 'value' (line 1586)
        value_319971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 54), 'value', False)
        # Processing the call keyword arguments (line 1586)
        # Getting the type of 'dtstart' (line 1586)
        dtstart_319972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 69), 'dtstart', False)
        keyword_319973 = dtstart_319972
        # Getting the type of 'ignoretz' (line 1587)
        ignoretz_319974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 63), 'ignoretz', False)
        keyword_319975 = ignoretz_319974
        # Getting the type of 'tzinfos' (line 1588)
        tzinfos_319976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 62), 'tzinfos', False)
        keyword_319977 = tzinfos_319976
        kwargs_319978 = {'ignoretz': keyword_319975, 'dtstart': keyword_319973, 'tzinfos': keyword_319977}
        # Getting the type of 'self' (line 1586)
        self_319969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 32), 'self', False)
        # Obtaining the member '_parse_rfc_rrule' of a type (line 1586)
        _parse_rfc_rrule_319970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 32), self_319969, '_parse_rfc_rrule')
        # Calling _parse_rfc_rrule(args, kwargs) (line 1586)
        _parse_rfc_rrule_call_result_319979 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 32), _parse_rfc_rrule_319970, *[value_319971], **kwargs_319978)
        
        # Processing the call keyword arguments (line 1586)
        kwargs_319980 = {}
        # Getting the type of 'rset' (line 1586)
        rset_319967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 20), 'rset', False)
        # Obtaining the member 'exrule' of a type (line 1586)
        exrule_319968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 20), rset_319967, 'exrule')
        # Calling exrule(args, kwargs) (line 1586)
        exrule_call_result_319981 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 20), exrule_319968, *[_parse_rfc_rrule_call_result_319979], **kwargs_319980)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'exdatevals' (line 1589)
        exdatevals_319982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 29), 'exdatevals')
        # Testing the type of a for loop iterable (line 1589)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1589, 16), exdatevals_319982)
        # Getting the type of the for loop variable (line 1589)
        for_loop_var_319983 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1589, 16), exdatevals_319982)
        # Assigning a type to the variable 'value' (line 1589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 16), 'value', for_loop_var_319983)
        # SSA begins for a for statement (line 1589)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to split(...): (line 1590)
        # Processing the call arguments (line 1590)
        str_319986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 47), 'str', ',')
        # Processing the call keyword arguments (line 1590)
        kwargs_319987 = {}
        # Getting the type of 'value' (line 1590)
        value_319984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 35), 'value', False)
        # Obtaining the member 'split' of a type (line 1590)
        split_319985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 35), value_319984, 'split')
        # Calling split(args, kwargs) (line 1590)
        split_call_result_319988 = invoke(stypy.reporting.localization.Localization(__file__, 1590, 35), split_319985, *[str_319986], **kwargs_319987)
        
        # Testing the type of a for loop iterable (line 1590)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1590, 20), split_call_result_319988)
        # Getting the type of the for loop variable (line 1590)
        for_loop_var_319989 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1590, 20), split_call_result_319988)
        # Assigning a type to the variable 'datestr' (line 1590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 20), 'datestr', for_loop_var_319989)
        # SSA begins for a for statement (line 1590)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to exdate(...): (line 1591)
        # Processing the call arguments (line 1591)
        
        # Call to parse(...): (line 1591)
        # Processing the call arguments (line 1591)
        # Getting the type of 'datestr' (line 1591)
        datestr_319994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 49), 'datestr', False)
        # Processing the call keyword arguments (line 1591)
        # Getting the type of 'ignoretz' (line 1592)
        ignoretz_319995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 58), 'ignoretz', False)
        keyword_319996 = ignoretz_319995
        # Getting the type of 'tzinfos' (line 1593)
        tzinfos_319997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 57), 'tzinfos', False)
        keyword_319998 = tzinfos_319997
        kwargs_319999 = {'ignoretz': keyword_319996, 'tzinfos': keyword_319998}
        # Getting the type of 'parser' (line 1591)
        parser_319992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 36), 'parser', False)
        # Obtaining the member 'parse' of a type (line 1591)
        parse_319993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 36), parser_319992, 'parse')
        # Calling parse(args, kwargs) (line 1591)
        parse_call_result_320000 = invoke(stypy.reporting.localization.Localization(__file__, 1591, 36), parse_319993, *[datestr_319994], **kwargs_319999)
        
        # Processing the call keyword arguments (line 1591)
        kwargs_320001 = {}
        # Getting the type of 'rset' (line 1591)
        rset_319990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 24), 'rset', False)
        # Obtaining the member 'exdate' of a type (line 1591)
        exdate_319991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 24), rset_319990, 'exdate')
        # Calling exdate(args, kwargs) (line 1591)
        exdate_call_result_320002 = invoke(stypy.reporting.localization.Localization(__file__, 1591, 24), exdate_319991, *[parse_call_result_320000], **kwargs_320001)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'compatible' (line 1594)
        compatible_320003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 19), 'compatible')
        # Getting the type of 'dtstart' (line 1594)
        dtstart_320004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 34), 'dtstart')
        # Applying the binary operator 'and' (line 1594)
        result_and_keyword_320005 = python_operator(stypy.reporting.localization.Localization(__file__, 1594, 19), 'and', compatible_320003, dtstart_320004)
        
        # Testing the type of an if condition (line 1594)
        if_condition_320006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1594, 16), result_and_keyword_320005)
        # Assigning a type to the variable 'if_condition_320006' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 16), 'if_condition_320006', if_condition_320006)
        # SSA begins for if statement (line 1594)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to rdate(...): (line 1595)
        # Processing the call arguments (line 1595)
        # Getting the type of 'dtstart' (line 1595)
        dtstart_320009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 31), 'dtstart', False)
        # Processing the call keyword arguments (line 1595)
        kwargs_320010 = {}
        # Getting the type of 'rset' (line 1595)
        rset_320007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 20), 'rset', False)
        # Obtaining the member 'rdate' of a type (line 1595)
        rdate_320008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1595, 20), rset_320007, 'rdate')
        # Calling rdate(args, kwargs) (line 1595)
        rdate_call_result_320011 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 20), rdate_320008, *[dtstart_320009], **kwargs_320010)
        
        # SSA join for if statement (line 1594)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'rset' (line 1596)
        rset_320012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 23), 'rset')
        # Assigning a type to the variable 'stypy_return_type' (line 1596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 16), 'stypy_return_type', rset_320012)
        # SSA branch for the else part of an if statement (line 1571)
        module_type_store.open_ssa_branch('else')
        
        # Call to _parse_rfc_rrule(...): (line 1598)
        # Processing the call arguments (line 1598)
        
        # Obtaining the type of the subscript
        int_320015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1598, 55), 'int')
        # Getting the type of 'rrulevals' (line 1598)
        rrulevals_320016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 45), 'rrulevals', False)
        # Obtaining the member '__getitem__' of a type (line 1598)
        getitem___320017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 45), rrulevals_320016, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1598)
        subscript_call_result_320018 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 45), getitem___320017, int_320015)
        
        # Processing the call keyword arguments (line 1598)
        # Getting the type of 'dtstart' (line 1599)
        dtstart_320019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 53), 'dtstart', False)
        keyword_320020 = dtstart_320019
        # Getting the type of 'cache' (line 1600)
        cache_320021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 51), 'cache', False)
        keyword_320022 = cache_320021
        # Getting the type of 'ignoretz' (line 1601)
        ignoretz_320023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 54), 'ignoretz', False)
        keyword_320024 = ignoretz_320023
        # Getting the type of 'tzinfos' (line 1602)
        tzinfos_320025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 53), 'tzinfos', False)
        keyword_320026 = tzinfos_320025
        kwargs_320027 = {'ignoretz': keyword_320024, 'cache': keyword_320022, 'dtstart': keyword_320020, 'tzinfos': keyword_320026}
        # Getting the type of 'self' (line 1598)
        self_320013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 23), 'self', False)
        # Obtaining the member '_parse_rfc_rrule' of a type (line 1598)
        _parse_rfc_rrule_320014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 23), self_320013, '_parse_rfc_rrule')
        # Calling _parse_rfc_rrule(args, kwargs) (line 1598)
        _parse_rfc_rrule_call_result_320028 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 23), _parse_rfc_rrule_320014, *[subscript_call_result_320018], **kwargs_320027)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 16), 'stypy_return_type', _parse_rfc_rrule_call_result_320028)
        # SSA join for if statement (line 1571)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1521)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_parse_rfc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_parse_rfc' in the type store
        # Getting the type of 'stypy_return_type' (line 1492)
        stypy_return_type_320029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320029)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_parse_rfc'
        return stypy_return_type_320029


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1604, 4, False)
        # Assigning a type to the variable 'self' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _rrulestr.__call__.__dict__.__setitem__('stypy_localization', localization)
        _rrulestr.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _rrulestr.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _rrulestr.__call__.__dict__.__setitem__('stypy_function_name', '_rrulestr.__call__')
        _rrulestr.__call__.__dict__.__setitem__('stypy_param_names_list', ['s'])
        _rrulestr.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _rrulestr.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _rrulestr.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _rrulestr.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _rrulestr.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _rrulestr.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr.__call__', ['s'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Call to _parse_rfc(...): (line 1605)
        # Processing the call arguments (line 1605)
        # Getting the type of 's' (line 1605)
        s_320032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 31), 's', False)
        # Processing the call keyword arguments (line 1605)
        # Getting the type of 'kwargs' (line 1605)
        kwargs_320033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 36), 'kwargs', False)
        kwargs_320034 = {'kwargs_320033': kwargs_320033}
        # Getting the type of 'self' (line 1605)
        self_320030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 15), 'self', False)
        # Obtaining the member '_parse_rfc' of a type (line 1605)
        _parse_rfc_320031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 15), self_320030, '_parse_rfc')
        # Calling _parse_rfc(args, kwargs) (line 1605)
        _parse_rfc_call_result_320035 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 15), _parse_rfc_320031, *[s_320032], **kwargs_320034)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 8), 'stypy_return_type', _parse_rfc_call_result_320035)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1604)
        stypy_return_type_320036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320036)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_320036


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1390, 0, False)
        # Assigning a type to the variable 'self' (line 1391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_rrulestr.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_rrulestr' (line 1390)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 0), '_rrulestr', _rrulestr)

# Assigning a Dict to a Name (line 1392):

# Obtaining an instance of the builtin type 'dict' (line 1392)
dict_320037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1392)
# Adding element type (key, value) (line 1392)
str_320038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 17), 'str', 'YEARLY')
# Getting the type of 'YEARLY' (line 1392)
YEARLY_320039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 27), 'YEARLY')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 16), dict_320037, (str_320038, YEARLY_320039))
# Adding element type (key, value) (line 1392)
str_320040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 17), 'str', 'MONTHLY')
# Getting the type of 'MONTHLY' (line 1393)
MONTHLY_320041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 28), 'MONTHLY')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 16), dict_320037, (str_320040, MONTHLY_320041))
# Adding element type (key, value) (line 1392)
str_320042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 17), 'str', 'WEEKLY')
# Getting the type of 'WEEKLY' (line 1394)
WEEKLY_320043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 27), 'WEEKLY')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 16), dict_320037, (str_320042, WEEKLY_320043))
# Adding element type (key, value) (line 1392)
str_320044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 17), 'str', 'DAILY')
# Getting the type of 'DAILY' (line 1395)
DAILY_320045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 26), 'DAILY')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 16), dict_320037, (str_320044, DAILY_320045))
# Adding element type (key, value) (line 1392)
str_320046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1396, 17), 'str', 'HOURLY')
# Getting the type of 'HOURLY' (line 1396)
HOURLY_320047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 27), 'HOURLY')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 16), dict_320037, (str_320046, HOURLY_320047))
# Adding element type (key, value) (line 1392)
str_320048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 17), 'str', 'MINUTELY')
# Getting the type of 'MINUTELY' (line 1397)
MINUTELY_320049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 29), 'MINUTELY')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 16), dict_320037, (str_320048, MINUTELY_320049))
# Adding element type (key, value) (line 1392)
str_320050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 17), 'str', 'SECONDLY')
# Getting the type of 'SECONDLY' (line 1398)
SECONDLY_320051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 29), 'SECONDLY')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1392, 16), dict_320037, (str_320050, SECONDLY_320051))

# Getting the type of '_rrulestr'
_rrulestr_320052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_freq_map' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320052, '_freq_map', dict_320037)

# Assigning a Dict to a Name (line 1400):

# Obtaining an instance of the builtin type 'dict' (line 1400)
dict_320053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 19), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1400)
# Adding element type (key, value) (line 1400)
str_320054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 20), 'str', 'MO')
int_320055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 26), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), dict_320053, (str_320054, int_320055))
# Adding element type (key, value) (line 1400)
str_320056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 29), 'str', 'TU')
int_320057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 35), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), dict_320053, (str_320056, int_320057))
# Adding element type (key, value) (line 1400)
str_320058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 38), 'str', 'WE')
int_320059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 44), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), dict_320053, (str_320058, int_320059))
# Adding element type (key, value) (line 1400)
str_320060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 47), 'str', 'TH')
int_320061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 53), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), dict_320053, (str_320060, int_320061))
# Adding element type (key, value) (line 1400)
str_320062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 20), 'str', 'FR')
int_320063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 26), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), dict_320053, (str_320062, int_320063))
# Adding element type (key, value) (line 1400)
str_320064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 29), 'str', 'SA')
int_320065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 35), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), dict_320053, (str_320064, int_320065))
# Adding element type (key, value) (line 1400)
str_320066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 38), 'str', 'SU')
int_320067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 44), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1400, 19), dict_320053, (str_320066, int_320067))

# Getting the type of '_rrulestr'
_rrulestr_320068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_weekday_map' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320068, '_weekday_map', dict_320053)

# Assigning a Name to a Name (line 1409):
# Getting the type of '_rrulestr'
_rrulestr_320069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int' of a type
_handle_int_320070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320069, '_handle_int')
# Getting the type of '_rrulestr'
_rrulestr_320071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_INTERVAL' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320071, '_handle_INTERVAL', _handle_int_320070)

# Assigning a Name to a Name (line 1410):
# Getting the type of '_rrulestr'
_rrulestr_320072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int' of a type
_handle_int_320073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320072, '_handle_int')
# Getting the type of '_rrulestr'
_rrulestr_320074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_COUNT' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320074, '_handle_COUNT', _handle_int_320073)

# Assigning a Name to a Name (line 1411):
# Getting the type of '_rrulestr'
_rrulestr_320075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320075, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYSETPOS' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320077, '_handle_BYSETPOS', _handle_int_list_320076)

# Assigning a Name to a Name (line 1412):
# Getting the type of '_rrulestr'
_rrulestr_320078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320078, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYMONTH' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320080, '_handle_BYMONTH', _handle_int_list_320079)

# Assigning a Name to a Name (line 1413):
# Getting the type of '_rrulestr'
_rrulestr_320081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320081, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYMONTHDAY' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320083, '_handle_BYMONTHDAY', _handle_int_list_320082)

# Assigning a Name to a Name (line 1414):
# Getting the type of '_rrulestr'
_rrulestr_320084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320084, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYYEARDAY' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320086, '_handle_BYYEARDAY', _handle_int_list_320085)

# Assigning a Name to a Name (line 1415):
# Getting the type of '_rrulestr'
_rrulestr_320087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320087, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYEASTER' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320089, '_handle_BYEASTER', _handle_int_list_320088)

# Assigning a Name to a Name (line 1416):
# Getting the type of '_rrulestr'
_rrulestr_320090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320090, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYWEEKNO' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320092, '_handle_BYWEEKNO', _handle_int_list_320091)

# Assigning a Name to a Name (line 1417):
# Getting the type of '_rrulestr'
_rrulestr_320093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320093, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYHOUR' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320095, '_handle_BYHOUR', _handle_int_list_320094)

# Assigning a Name to a Name (line 1418):
# Getting the type of '_rrulestr'
_rrulestr_320096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320096, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYMINUTE' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320098, '_handle_BYMINUTE', _handle_int_list_320097)

# Assigning a Name to a Name (line 1419):
# Getting the type of '_rrulestr'
_rrulestr_320099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_int_list' of a type
_handle_int_list_320100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320099, '_handle_int_list')
# Getting the type of '_rrulestr'
_rrulestr_320101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYSECOND' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320101, '_handle_BYSECOND', _handle_int_list_320100)

# Assigning a Name to a Name (line 1464):
# Getting the type of '_rrulestr'
_rrulestr_320102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Obtaining the member '_handle_BYWEEKDAY' of a type
_handle_BYWEEKDAY_320103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320102, '_handle_BYWEEKDAY')
# Getting the type of '_rrulestr'
_rrulestr_320104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_rrulestr')
# Setting the type of the member '_handle_BYDAY' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _rrulestr_320104, '_handle_BYDAY', _handle_BYWEEKDAY_320103)

# Assigning a Call to a Name (line 1608):

# Assigning a Call to a Name (line 1608):

# Call to _rrulestr(...): (line 1608)
# Processing the call keyword arguments (line 1608)
kwargs_320106 = {}
# Getting the type of '_rrulestr' (line 1608)
_rrulestr_320105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 11), '_rrulestr', False)
# Calling _rrulestr(args, kwargs) (line 1608)
_rrulestr_call_result_320107 = invoke(stypy.reporting.localization.Localization(__file__, 1608, 11), _rrulestr_320105, *[], **kwargs_320106)

# Assigning a type to the variable 'rrulestr' (line 1608)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1608, 0), 'rrulestr', _rrulestr_call_result_320107)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
