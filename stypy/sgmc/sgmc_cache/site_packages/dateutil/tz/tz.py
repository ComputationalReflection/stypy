
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # -*- coding: utf-8 -*-
2: '''
3: This module offers timezone implementations subclassing the abstract
4: :py:`datetime.tzinfo` type. There are classes to handle tzfile format files
5: (usually are in :file:`/etc/localtime`, :file:`/usr/share/zoneinfo`, etc), TZ
6: environment string (in all known formats), given ranges (with help from
7: relative deltas), local machine timezone, fixed offset timezone, and UTC
8: timezone.
9: '''
10: import datetime
11: import struct
12: import time
13: import sys
14: import os
15: import bisect
16: 
17: from six import string_types
18: from ._common import tzname_in_python2, _tzinfo, _total_seconds
19: from ._common import tzrangebase, enfold
20: from ._common import _validate_fromutc_inputs
21: 
22: try:
23:     from .win import tzwin, tzwinlocal
24: except ImportError:
25:     tzwin = tzwinlocal = None
26: 
27: ZERO = datetime.timedelta(0)
28: EPOCH = datetime.datetime.utcfromtimestamp(0)
29: EPOCHORDINAL = EPOCH.toordinal()
30: 
31: 
32: class tzutc(datetime.tzinfo):
33:     '''
34:     This is a tzinfo object that represents the UTC time zone.
35:     '''
36:     def utcoffset(self, dt):
37:         return ZERO
38: 
39:     def dst(self, dt):
40:         return ZERO
41: 
42:     @tzname_in_python2
43:     def tzname(self, dt):
44:         return "UTC"
45: 
46:     def is_ambiguous(self, dt):
47:         '''
48:         Whether or not the "wall time" of a given datetime is ambiguous in this
49:         zone.
50: 
51:         :param dt:
52:             A :py:class:`datetime.datetime`, naive or time zone aware.
53: 
54: 
55:         :return:
56:             Returns ``True`` if ambiguous, ``False`` otherwise.
57: 
58:         .. versionadded:: 2.6.0
59:         '''
60:         return False
61: 
62:     @_validate_fromutc_inputs
63:     def fromutc(self, dt):
64:         '''
65:         Fast track version of fromutc() returns the original ``dt`` object for
66:         any valid :py:class:`datetime.datetime` object.
67:         '''
68:         return dt
69: 
70:     def __eq__(self, other):
71:         if not isinstance(other, (tzutc, tzoffset)):
72:             return NotImplemented
73: 
74:         return (isinstance(other, tzutc) or
75:                 (isinstance(other, tzoffset) and other._offset == ZERO))
76: 
77:     __hash__ = None
78: 
79:     def __ne__(self, other):
80:         return not (self == other)
81: 
82:     def __repr__(self):
83:         return "%s()" % self.__class__.__name__
84: 
85:     __reduce__ = object.__reduce__
86: 
87: 
88: class tzoffset(datetime.tzinfo):
89:     '''
90:     A simple class for representing a fixed offset from UTC.
91: 
92:     :param name:
93:         The timezone name, to be returned when ``tzname()`` is called.
94: 
95:     :param offset:
96:         The time zone offset in seconds, or (since version 2.6.0, represented
97:         as a :py:class:`datetime.timedelta` object.
98:     '''
99:     def __init__(self, name, offset):
100:         self._name = name
101: 
102:         try:
103:             # Allow a timedelta
104:             offset = _total_seconds(offset)
105:         except (TypeError, AttributeError):
106:             pass
107:         self._offset = datetime.timedelta(seconds=offset)
108: 
109:     def utcoffset(self, dt):
110:         return self._offset
111: 
112:     def dst(self, dt):
113:         return ZERO
114: 
115:     @tzname_in_python2
116:     def tzname(self, dt):
117:         return self._name
118: 
119:     @_validate_fromutc_inputs
120:     def fromutc(self, dt):
121:         return dt + self._offset
122: 
123:     def is_ambiguous(self, dt):
124:         '''
125:         Whether or not the "wall time" of a given datetime is ambiguous in this
126:         zone.
127: 
128:         :param dt:
129:             A :py:class:`datetime.datetime`, naive or time zone aware.
130: 
131: 
132:         :return:
133:             Returns ``True`` if ambiguous, ``False`` otherwise.
134: 
135:         .. versionadded:: 2.6.0
136:         '''
137:         return False
138: 
139:     def __eq__(self, other):
140:         if not isinstance(other, tzoffset):
141:             return NotImplemented
142: 
143:         return self._offset == other._offset
144: 
145:     __hash__ = None
146: 
147:     def __ne__(self, other):
148:         return not (self == other)
149: 
150:     def __repr__(self):
151:         return "%s(%s, %s)" % (self.__class__.__name__,
152:                                repr(self._name),
153:                                int(_total_seconds(self._offset)))
154: 
155:     __reduce__ = object.__reduce__
156: 
157: 
158: class tzlocal(_tzinfo):
159:     '''
160:     A :class:`tzinfo` subclass built around the ``time`` timezone functions.
161:     '''
162:     def __init__(self):
163:         super(tzlocal, self).__init__()
164: 
165:         self._std_offset = datetime.timedelta(seconds=-time.timezone)
166:         if time.daylight:
167:             self._dst_offset = datetime.timedelta(seconds=-time.altzone)
168:         else:
169:             self._dst_offset = self._std_offset
170: 
171:         self._dst_saved = self._dst_offset - self._std_offset
172:         self._hasdst = bool(self._dst_saved)
173: 
174:     def utcoffset(self, dt):
175:         if dt is None and self._hasdst:
176:             return None
177: 
178:         if self._isdst(dt):
179:             return self._dst_offset
180:         else:
181:             return self._std_offset
182: 
183:     def dst(self, dt):
184:         if dt is None and self._hasdst:
185:             return None
186: 
187:         if self._isdst(dt):
188:             return self._dst_offset - self._std_offset
189:         else:
190:             return ZERO
191: 
192:     @tzname_in_python2
193:     def tzname(self, dt):
194:         return time.tzname[self._isdst(dt)]
195: 
196:     def is_ambiguous(self, dt):
197:         '''
198:         Whether or not the "wall time" of a given datetime is ambiguous in this
199:         zone.
200: 
201:         :param dt:
202:             A :py:class:`datetime.datetime`, naive or time zone aware.
203: 
204: 
205:         :return:
206:             Returns ``True`` if ambiguous, ``False`` otherwise.
207: 
208:         .. versionadded:: 2.6.0
209:         '''
210:         naive_dst = self._naive_is_dst(dt)
211:         return (not naive_dst and
212:                 (naive_dst != self._naive_is_dst(dt - self._dst_saved)))
213: 
214:     def _naive_is_dst(self, dt):
215:         timestamp = _datetime_to_timestamp(dt)
216:         return time.localtime(timestamp + time.timezone).tm_isdst
217: 
218:     def _isdst(self, dt, fold_naive=True):
219:         # We can't use mktime here. It is unstable when deciding if
220:         # the hour near to a change is DST or not.
221:         #
222:         # timestamp = time.mktime((dt.year, dt.month, dt.day, dt.hour,
223:         #                         dt.minute, dt.second, dt.weekday(), 0, -1))
224:         # return time.localtime(timestamp).tm_isdst
225:         #
226:         # The code above yields the following result:
227:         #
228:         # >>> import tz, datetime
229:         # >>> t = tz.tzlocal()
230:         # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
231:         # 'BRDT'
232:         # >>> datetime.datetime(2003,2,16,0,tzinfo=t).tzname()
233:         # 'BRST'
234:         # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
235:         # 'BRST'
236:         # >>> datetime.datetime(2003,2,15,22,tzinfo=t).tzname()
237:         # 'BRDT'
238:         # >>> datetime.datetime(2003,2,15,23,tzinfo=t).tzname()
239:         # 'BRDT'
240:         #
241:         # Here is a more stable implementation:
242:         #
243:         if not self._hasdst:
244:             return False
245: 
246:         # Check for ambiguous times:
247:         dstval = self._naive_is_dst(dt)
248:         fold = getattr(dt, 'fold', None)
249: 
250:         if self.is_ambiguous(dt):
251:             if fold is not None:
252:                 return not self._fold(dt)
253:             else:
254:                 return True
255: 
256:         return dstval
257: 
258:     def __eq__(self, other):
259:         if not isinstance(other, tzlocal):
260:             return NotImplemented
261: 
262:         return (self._std_offset == other._std_offset and
263:                 self._dst_offset == other._dst_offset)
264: 
265:     __hash__ = None
266: 
267:     def __ne__(self, other):
268:         return not (self == other)
269: 
270:     def __repr__(self):
271:         return "%s()" % self.__class__.__name__
272: 
273:     __reduce__ = object.__reduce__
274: 
275: 
276: class _ttinfo(object):
277:     __slots__ = ["offset", "delta", "isdst", "abbr",
278:                  "isstd", "isgmt", "dstoffset"]
279: 
280:     def __init__(self):
281:         for attr in self.__slots__:
282:             setattr(self, attr, None)
283: 
284:     def __repr__(self):
285:         l = []
286:         for attr in self.__slots__:
287:             value = getattr(self, attr)
288:             if value is not None:
289:                 l.append("%s=%s" % (attr, repr(value)))
290:         return "%s(%s)" % (self.__class__.__name__, ", ".join(l))
291: 
292:     def __eq__(self, other):
293:         if not isinstance(other, _ttinfo):
294:             return NotImplemented
295: 
296:         return (self.offset == other.offset and
297:                 self.delta == other.delta and
298:                 self.isdst == other.isdst and
299:                 self.abbr == other.abbr and
300:                 self.isstd == other.isstd and
301:                 self.isgmt == other.isgmt and
302:                 self.dstoffset == other.dstoffset)
303: 
304:     __hash__ = None
305: 
306:     def __ne__(self, other):
307:         return not (self == other)
308: 
309:     def __getstate__(self):
310:         state = {}
311:         for name in self.__slots__:
312:             state[name] = getattr(self, name, None)
313:         return state
314: 
315:     def __setstate__(self, state):
316:         for name in self.__slots__:
317:             if name in state:
318:                 setattr(self, name, state[name])
319: 
320: 
321: class _tzfile(object):
322:     '''
323:     Lightweight class for holding the relevant transition and time zone
324:     information read from binary tzfiles.
325:     '''
326:     attrs = ['trans_list', 'trans_list_utc', 'trans_idx', 'ttinfo_list',
327:              'ttinfo_std', 'ttinfo_dst', 'ttinfo_before', 'ttinfo_first']
328: 
329:     def __init__(self, **kwargs):
330:         for attr in self.attrs:
331:             setattr(self, attr, kwargs.get(attr, None))
332: 
333: 
334: class tzfile(_tzinfo):
335:     '''
336:     This is a ``tzinfo`` subclass thant allows one to use the ``tzfile(5)``
337:     format timezone files to extract current and historical zone information.
338: 
339:     :param fileobj:
340:         This can be an opened file stream or a file name that the time zone
341:         information can be read from.
342: 
343:     :param filename:
344:         This is an optional parameter specifying the source of the time zone
345:         information in the event that ``fileobj`` is a file object. If omitted
346:         and ``fileobj`` is a file stream, this parameter will be set either to
347:         ``fileobj``'s ``name`` attribute or to ``repr(fileobj)``.
348: 
349:     See `Sources for Time Zone and Daylight Saving Time Data
350:     <http://www.twinsun.com/tz/tz-link.htm>`_ for more information. Time zone
351:     files can be compiled from the `IANA Time Zone database files
352:     <https://www.iana.org/time-zones>`_ with the `zic time zone compiler
353:     <https://www.freebsd.org/cgi/man.cgi?query=zic&sektion=8>`_
354:     '''
355: 
356:     def __init__(self, fileobj, filename=None):
357:         super(tzfile, self).__init__()
358: 
359:         file_opened_here = False
360:         if isinstance(fileobj, string_types):
361:             self._filename = fileobj
362:             fileobj = open(fileobj, 'rb')
363:             file_opened_here = True
364:         elif filename is not None:
365:             self._filename = filename
366:         elif hasattr(fileobj, "name"):
367:             self._filename = fileobj.name
368:         else:
369:             self._filename = repr(fileobj)
370: 
371:         if fileobj is not None:
372:             if not file_opened_here:
373:                 fileobj = _ContextWrapper(fileobj)
374: 
375:             with fileobj as file_stream:
376:                 tzobj = self._read_tzfile(file_stream)
377: 
378:             self._set_tzdata(tzobj)
379: 
380:     def _set_tzdata(self, tzobj):
381:         ''' Set the time zone data of this object from a _tzfile object '''
382:         # Copy the relevant attributes over as private attributes
383:         for attr in _tzfile.attrs:
384:             setattr(self, '_' + attr, getattr(tzobj, attr))
385: 
386:     def _read_tzfile(self, fileobj):
387:         out = _tzfile()
388: 
389:         # From tzfile(5):
390:         #
391:         # The time zone information files used by tzset(3)
392:         # begin with the magic characters "TZif" to identify
393:         # them as time zone information files, followed by
394:         # sixteen bytes reserved for future use, followed by
395:         # six four-byte values of type long, written in a
396:         # ``standard'' byte order (the high-order  byte
397:         # of the value is written first).
398:         if fileobj.read(4).decode() != "TZif":
399:             raise ValueError("magic not found")
400: 
401:         fileobj.read(16)
402: 
403:         (
404:             # The number of UTC/local indicators stored in the file.
405:             ttisgmtcnt,
406: 
407:             # The number of standard/wall indicators stored in the file.
408:             ttisstdcnt,
409: 
410:             # The number of leap seconds for which data is
411:             # stored in the file.
412:             leapcnt,
413: 
414:             # The number of "transition times" for which data
415:             # is stored in the file.
416:             timecnt,
417: 
418:             # The number of "local time types" for which data
419:             # is stored in the file (must not be zero).
420:             typecnt,
421: 
422:             # The  number  of  characters  of "time zone
423:             # abbreviation strings" stored in the file.
424:             charcnt,
425: 
426:         ) = struct.unpack(">6l", fileobj.read(24))
427: 
428:         # The above header is followed by tzh_timecnt four-byte
429:         # values  of  type long,  sorted  in ascending order.
430:         # These values are written in ``standard'' byte order.
431:         # Each is used as a transition time (as  returned  by
432:         # time(2)) at which the rules for computing local time
433:         # change.
434: 
435:         if timecnt:
436:             out.trans_list_utc = list(struct.unpack(">%dl" % timecnt,
437:                                                     fileobj.read(timecnt*4)))
438:         else:
439:             out.trans_list_utc = []
440: 
441:         # Next come tzh_timecnt one-byte values of type unsigned
442:         # char; each one tells which of the different types of
443:         # ``local time'' types described in the file is associated
444:         # with the same-indexed transition time. These values
445:         # serve as indices into an array of ttinfo structures that
446:         # appears next in the file.
447: 
448:         if timecnt:
449:             out.trans_idx = struct.unpack(">%dB" % timecnt,
450:                                             fileobj.read(timecnt))
451:         else:
452:             out.trans_idx = []
453: 
454:         # Each ttinfo structure is written as a four-byte value
455:         # for tt_gmtoff  of  type long,  in  a  standard  byte
456:         # order, followed  by a one-byte value for tt_isdst
457:         # and a one-byte  value  for  tt_abbrind.   In  each
458:         # structure, tt_gmtoff  gives  the  number  of
459:         # seconds to be added to UTC, tt_isdst tells whether
460:         # tm_isdst should be set by  localtime(3),  and
461:         # tt_abbrind serves  as an index into the array of
462:         # time zone abbreviation characters that follow the
463:         # ttinfo structure(s) in the file.
464: 
465:         ttinfo = []
466: 
467:         for i in range(typecnt):
468:             ttinfo.append(struct.unpack(">lbb", fileobj.read(6)))
469: 
470:         abbr = fileobj.read(charcnt).decode()
471: 
472:         # Then there are tzh_leapcnt pairs of four-byte
473:         # values, written in  standard byte  order;  the
474:         # first  value  of  each pair gives the time (as
475:         # returned by time(2)) at which a leap second
476:         # occurs;  the  second  gives the  total  number of
477:         # leap seconds to be applied after the given time.
478:         # The pairs of values are sorted in ascending order
479:         # by time.
480: 
481:         # Not used, for now (but seek for correct file position)
482:         if leapcnt:
483:             fileobj.seek(leapcnt * 8, os.SEEK_CUR)
484: 
485:         # Then there are tzh_ttisstdcnt standard/wall
486:         # indicators, each stored as a one-byte value;
487:         # they tell whether the transition times associated
488:         # with local time types were specified as standard
489:         # time or wall clock time, and are used when
490:         # a time zone file is used in handling POSIX-style
491:         # time zone environment variables.
492: 
493:         if ttisstdcnt:
494:             isstd = struct.unpack(">%db" % ttisstdcnt,
495:                                   fileobj.read(ttisstdcnt))
496: 
497:         # Finally, there are tzh_ttisgmtcnt UTC/local
498:         # indicators, each stored as a one-byte value;
499:         # they tell whether the transition times associated
500:         # with local time types were specified as UTC or
501:         # local time, and are used when a time zone file
502:         # is used in handling POSIX-style time zone envi-
503:         # ronment variables.
504: 
505:         if ttisgmtcnt:
506:             isgmt = struct.unpack(">%db" % ttisgmtcnt,
507:                                   fileobj.read(ttisgmtcnt))
508: 
509:         # Build ttinfo list
510:         out.ttinfo_list = []
511:         for i in range(typecnt):
512:             gmtoff, isdst, abbrind = ttinfo[i]
513:             # Round to full-minutes if that's not the case. Python's
514:             # datetime doesn't accept sub-minute timezones. Check
515:             # http://python.org/sf/1447945 for some information.
516:             gmtoff = 60 * ((gmtoff + 30) // 60)
517:             tti = _ttinfo()
518:             tti.offset = gmtoff
519:             tti.dstoffset = datetime.timedelta(0)
520:             tti.delta = datetime.timedelta(seconds=gmtoff)
521:             tti.isdst = isdst
522:             tti.abbr = abbr[abbrind:abbr.find('\x00', abbrind)]
523:             tti.isstd = (ttisstdcnt > i and isstd[i] != 0)
524:             tti.isgmt = (ttisgmtcnt > i and isgmt[i] != 0)
525:             out.ttinfo_list.append(tti)
526: 
527:         # Replace ttinfo indexes for ttinfo objects.
528:         out.trans_idx = [out.ttinfo_list[idx] for idx in out.trans_idx]
529: 
530:         # Set standard, dst, and before ttinfos. before will be
531:         # used when a given time is before any transitions,
532:         # and will be set to the first non-dst ttinfo, or to
533:         # the first dst, if all of them are dst.
534:         out.ttinfo_std = None
535:         out.ttinfo_dst = None
536:         out.ttinfo_before = None
537:         if out.ttinfo_list:
538:             if not out.trans_list_utc:
539:                 out.ttinfo_std = out.ttinfo_first = out.ttinfo_list[0]
540:             else:
541:                 for i in range(timecnt-1, -1, -1):
542:                     tti = out.trans_idx[i]
543:                     if not out.ttinfo_std and not tti.isdst:
544:                         out.ttinfo_std = tti
545:                     elif not out.ttinfo_dst and tti.isdst:
546:                         out.ttinfo_dst = tti
547: 
548:                     if out.ttinfo_std and out.ttinfo_dst:
549:                         break
550:                 else:
551:                     if out.ttinfo_dst and not out.ttinfo_std:
552:                         out.ttinfo_std = out.ttinfo_dst
553: 
554:                 for tti in out.ttinfo_list:
555:                     if not tti.isdst:
556:                         out.ttinfo_before = tti
557:                         break
558:                 else:
559:                     out.ttinfo_before = out.ttinfo_list[0]
560: 
561:         # Now fix transition times to become relative to wall time.
562:         #
563:         # I'm not sure about this. In my tests, the tz source file
564:         # is setup to wall time, and in the binary file isstd and
565:         # isgmt are off, so it should be in wall time. OTOH, it's
566:         # always in gmt time. Let me know if you have comments
567:         # about this.
568:         laststdoffset = None
569:         out.trans_list = []
570:         for i, tti in enumerate(out.trans_idx):
571:             if not tti.isdst:
572:                 offset = tti.offset
573:                 laststdoffset = offset
574:             else:
575:                 if laststdoffset is not None:
576:                     # Store the DST offset as well and update it in the list
577:                     tti.dstoffset = tti.offset - laststdoffset
578:                     out.trans_idx[i] = tti
579: 
580:                 offset = laststdoffset or 0
581: 
582:             out.trans_list.append(out.trans_list_utc[i] + offset)
583: 
584:         # In case we missed any DST offsets on the way in for some reason, make
585:         # a second pass over the list, looking for the /next/ DST offset.
586:         laststdoffset = None
587:         for i in reversed(range(len(out.trans_idx))):
588:             tti = out.trans_idx[i]
589:             if tti.isdst:
590:                 if not (tti.dstoffset or laststdoffset is None):
591:                     tti.dstoffset = tti.offset - laststdoffset
592:             else:
593:                 laststdoffset = tti.offset
594: 
595:             if not isinstance(tti.dstoffset, datetime.timedelta):
596:                 tti.dstoffset = datetime.timedelta(seconds=tti.dstoffset)
597: 
598:             out.trans_idx[i] = tti
599: 
600:         out.trans_idx = tuple(out.trans_idx)
601:         out.trans_list = tuple(out.trans_list)
602:         out.trans_list_utc = tuple(out.trans_list_utc)
603: 
604:         return out
605: 
606:     def _find_last_transition(self, dt, in_utc=False):
607:         # If there's no list, there are no transitions to find
608:         if not self._trans_list:
609:             return None
610: 
611:         timestamp = _datetime_to_timestamp(dt)
612: 
613:         # Find where the timestamp fits in the transition list - if the
614:         # timestamp is a transition time, it's part of the "after" period.
615:         trans_list = self._trans_list_utc if in_utc else self._trans_list
616:         idx = bisect.bisect_right(trans_list, timestamp)
617: 
618:         # We want to know when the previous transition was, so subtract off 1
619:         return idx - 1        
620: 
621:     def _get_ttinfo(self, idx):
622:         # For no list or after the last transition, default to _ttinfo_std
623:         if idx is None or (idx + 1) >= len(self._trans_list):
624:             return self._ttinfo_std
625: 
626:         # If there is a list and the time is before it, return _ttinfo_before
627:         if idx < 0:
628:             return self._ttinfo_before
629: 
630:         return self._trans_idx[idx]
631: 
632:     def _find_ttinfo(self, dt):
633:         idx = self._resolve_ambiguous_time(dt)
634: 
635:         return self._get_ttinfo(idx)
636: 
637:     def fromutc(self, dt):
638:         '''
639:         The ``tzfile`` implementation of :py:func:`datetime.tzinfo.fromutc`.
640: 
641:         :param dt:
642:             A :py:class:`datetime.datetime` object.
643: 
644:         :raises TypeError:
645:             Raised if ``dt`` is not a :py:class:`datetime.datetime` object.
646: 
647:         :raises ValueError:
648:             Raised if this is called with a ``dt`` which does not have this
649:             ``tzinfo`` attached.
650: 
651:         :return:
652:             Returns a :py:class:`datetime.datetime` object representing the
653:             wall time in ``self``'s time zone.
654:         '''
655:         # These isinstance checks are in datetime.tzinfo, so we'll preserve
656:         # them, even if we don't care about duck typing.
657:         if not isinstance(dt, datetime.datetime):
658:             raise TypeError("fromutc() requires a datetime argument")
659: 
660:         if dt.tzinfo is not self:
661:             raise ValueError("dt.tzinfo is not self")
662: 
663:         # First treat UTC as wall time and get the transition we're in.
664:         idx = self._find_last_transition(dt, in_utc=True)
665:         tti = self._get_ttinfo(idx)
666: 
667:         dt_out = dt + datetime.timedelta(seconds=tti.offset)
668: 
669:         fold = self.is_ambiguous(dt_out, idx=idx)
670: 
671:         return enfold(dt_out, fold=int(fold))
672: 
673:     def is_ambiguous(self, dt, idx=None):
674:         '''
675:         Whether or not the "wall time" of a given datetime is ambiguous in this
676:         zone.
677: 
678:         :param dt:
679:             A :py:class:`datetime.datetime`, naive or time zone aware.
680: 
681: 
682:         :return:
683:             Returns ``True`` if ambiguous, ``False`` otherwise.
684: 
685:         .. versionadded:: 2.6.0
686:         '''
687:         if idx is None:
688:             idx = self._find_last_transition(dt)
689: 
690:         # Calculate the difference in offsets from current to previous
691:         timestamp = _datetime_to_timestamp(dt)
692:         tti = self._get_ttinfo(idx)
693: 
694:         if idx is None or idx <= 0:
695:             return False
696: 
697:         od = self._get_ttinfo(idx - 1).offset - tti.offset
698:         tt = self._trans_list[idx]          # Transition time
699: 
700:         return timestamp < tt + od
701: 
702:     def _resolve_ambiguous_time(self, dt):
703:         idx = self._find_last_transition(dt)
704: 
705:         # If we have no transitions, return the index
706:         _fold = self._fold(dt)
707:         if idx is None or idx == 0:
708:             return idx
709: 
710:         # If it's ambiguous and we're in a fold, shift to a different index.
711:         idx_offset = int(not _fold and self.is_ambiguous(dt, idx))
712: 
713:         return idx - idx_offset
714: 
715:     def utcoffset(self, dt):
716:         if dt is None:
717:             return None
718: 
719:         if not self._ttinfo_std:
720:             return ZERO
721: 
722:         return self._find_ttinfo(dt).delta
723: 
724:     def dst(self, dt):
725:         if dt is None:
726:             return None
727: 
728:         if not self._ttinfo_dst:
729:             return ZERO
730: 
731:         tti = self._find_ttinfo(dt)
732: 
733:         if not tti.isdst:
734:             return ZERO
735: 
736:         # The documentation says that utcoffset()-dst() must
737:         # be constant for every dt.
738:         return tti.dstoffset
739: 
740:     @tzname_in_python2
741:     def tzname(self, dt):
742:         if not self._ttinfo_std or dt is None:
743:             return None
744:         return self._find_ttinfo(dt).abbr
745: 
746:     def __eq__(self, other):
747:         if not isinstance(other, tzfile):
748:             return NotImplemented
749:         return (self._trans_list == other._trans_list and
750:                 self._trans_idx == other._trans_idx and
751:                 self._ttinfo_list == other._ttinfo_list)
752: 
753:     __hash__ = None
754: 
755:     def __ne__(self, other):
756:         return not (self == other)
757: 
758:     def __repr__(self):
759:         return "%s(%s)" % (self.__class__.__name__, repr(self._filename))
760: 
761:     def __reduce__(self):
762:         return self.__reduce_ex__(None)
763: 
764:     def __reduce_ex__(self, protocol):
765:         return (self.__class__, (None, self._filename), self.__dict__)
766: 
767: 
768: class tzrange(tzrangebase):
769:     '''
770:     The ``tzrange`` object is a time zone specified by a set of offsets and
771:     abbreviations, equivalent to the way the ``TZ`` variable can be specified
772:     in POSIX-like systems, but using Python delta objects to specify DST
773:     start, end and offsets.
774: 
775:     :param stdabbr:
776:         The abbreviation for standard time (e.g. ``'EST'``).
777: 
778:     :param stdoffset:
779:         An integer or :class:`datetime.timedelta` object or equivalent
780:         specifying the base offset from UTC.
781: 
782:         If unspecified, +00:00 is used.
783: 
784:     :param dstabbr:
785:         The abbreviation for DST / "Summer" time (e.g. ``'EDT'``).
786: 
787:         If specified, with no other DST information, DST is assumed to occur
788:         and the default behavior or ``dstoffset``, ``start`` and ``end`` is
789:         used. If unspecified and no other DST information is specified, it
790:         is assumed that this zone has no DST.
791: 
792:         If this is unspecified and other DST information is *is* specified,
793:         DST occurs in the zone but the time zone abbreviation is left
794:         unchanged.
795: 
796:     :param dstoffset:
797:         A an integer or :class:`datetime.timedelta` object or equivalent
798:         specifying the UTC offset during DST. If unspecified and any other DST
799:         information is specified, it is assumed to be the STD offset +1 hour.
800: 
801:     :param start:
802:         A :class:`relativedelta.relativedelta` object or equivalent specifying
803:         the time and time of year that daylight savings time starts. To specify,
804:         for example, that DST starts at 2AM on the 2nd Sunday in March, pass:
805: 
806:             ``relativedelta(hours=2, month=3, day=1, weekday=SU(+2))``
807: 
808:         If unspecified and any other DST information is specified, the default
809:         value is 2 AM on the first Sunday in April.
810: 
811:     :param end:
812:         A :class:`relativedelta.relativedelta` object or equivalent representing
813:         the time and time of year that daylight savings time ends, with the
814:         same specification method as in ``start``. One note is that this should
815:         point to the first time in the *standard* zone, so if a transition
816:         occurs at 2AM in the DST zone and the clocks are set back 1 hour to 1AM,
817:         set the `hours` parameter to +1.
818: 
819: 
820:     **Examples:**
821: 
822:     .. testsetup:: tzrange
823: 
824:         from dateutil.tz import tzrange, tzstr
825: 
826:     .. doctest:: tzrange
827: 
828:         >>> tzstr('EST5EDT') == tzrange("EST", -18000, "EDT")
829:         True
830: 
831:         >>> from dateutil.relativedelta import *
832:         >>> range1 = tzrange("EST", -18000, "EDT")
833:         >>> range2 = tzrange("EST", -18000, "EDT", -14400,
834:         ...                  relativedelta(hours=+2, month=4, day=1,
835:         ...                                weekday=SU(+1)),
836:         ...                  relativedelta(hours=+1, month=10, day=31,
837:         ...                                weekday=SU(-1)))
838:         >>> tzstr('EST5EDT') == range1 == range2
839:         True
840: 
841:     '''
842:     def __init__(self, stdabbr, stdoffset=None,
843:                  dstabbr=None, dstoffset=None,
844:                  start=None, end=None):
845: 
846:         global relativedelta
847:         from dateutil import relativedelta
848: 
849:         self._std_abbr = stdabbr
850:         self._dst_abbr = dstabbr
851: 
852:         try:
853:             stdoffset = _total_seconds(stdoffset)
854:         except (TypeError, AttributeError):
855:             pass
856: 
857:         try:
858:             dstoffset = _total_seconds(dstoffset)
859:         except (TypeError, AttributeError):
860:             pass
861: 
862:         if stdoffset is not None:
863:             self._std_offset = datetime.timedelta(seconds=stdoffset)
864:         else:
865:             self._std_offset = ZERO
866: 
867:         if dstoffset is not None:
868:             self._dst_offset = datetime.timedelta(seconds=dstoffset)
869:         elif dstabbr and stdoffset is not None:
870:             self._dst_offset = self._std_offset + datetime.timedelta(hours=+1)
871:         else:
872:             self._dst_offset = ZERO
873: 
874:         if dstabbr and start is None:
875:             self._start_delta = relativedelta.relativedelta(
876:                 hours=+2, month=4, day=1, weekday=relativedelta.SU(+1))
877:         else:
878:             self._start_delta = start
879: 
880:         if dstabbr and end is None:
881:             self._end_delta = relativedelta.relativedelta(
882:                 hours=+1, month=10, day=31, weekday=relativedelta.SU(-1))
883:         else:
884:             self._end_delta = end
885: 
886:         self._dst_base_offset_ = self._dst_offset - self._std_offset
887:         self.hasdst = bool(self._start_delta)
888: 
889:     def transitions(self, year):
890:         '''
891:         For a given year, get the DST on and off transition times, expressed
892:         always on the standard time side. For zones with no transitions, this
893:         function returns ``None``.
894: 
895:         :param year:
896:             The year whose transitions you would like to query.
897: 
898:         :return:
899:             Returns a :class:`tuple` of :class:`datetime.datetime` objects,
900:             ``(dston, dstoff)`` for zones with an annual DST transition, or
901:             ``None`` for fixed offset zones.
902:         '''
903:         if not self.hasdst:
904:             return None
905: 
906:         base_year = datetime.datetime(year, 1, 1)
907: 
908:         start = base_year + self._start_delta
909:         end = base_year + self._end_delta
910: 
911:         return (start, end)
912: 
913:     def __eq__(self, other):
914:         if not isinstance(other, tzrange):
915:             return NotImplemented
916: 
917:         return (self._std_abbr == other._std_abbr and
918:                 self._dst_abbr == other._dst_abbr and
919:                 self._std_offset == other._std_offset and
920:                 self._dst_offset == other._dst_offset and
921:                 self._start_delta == other._start_delta and
922:                 self._end_delta == other._end_delta)
923: 
924:     @property
925:     def _dst_base_offset(self):
926:         return self._dst_base_offset_
927: 
928: 
929: class tzstr(tzrange):
930:     '''
931:     ``tzstr`` objects are time zone objects specified by a time-zone string as
932:     it would be passed to a ``TZ`` variable on POSIX-style systems (see
933:     the `GNU C Library: TZ Variable`_ for more details).
934: 
935:     There is one notable exception, which is that POSIX-style time zones use an
936:     inverted offset format, so normally ``GMT+3`` would be parsed as an offset
937:     3 hours *behind* GMT. The ``tzstr`` time zone object will parse this as an
938:     offset 3 hours *ahead* of GMT. If you would like to maintain the POSIX
939:     behavior, pass a ``True`` value to ``posix_offset``.
940: 
941:     The :class:`tzrange` object provides the same functionality, but is
942:     specified using :class:`relativedelta.relativedelta` objects. rather than
943:     strings.
944: 
945:     :param s:
946:         A time zone string in ``TZ`` variable format. This can be a
947:         :class:`bytes` (2.x: :class:`str`), :class:`str` (2.x: :class:`unicode`)
948:         or a stream emitting unicode characters (e.g. :class:`StringIO`).
949: 
950:     :param posix_offset:
951:         Optional. If set to ``True``, interpret strings such as ``GMT+3`` or
952:         ``UTC+3`` as being 3 hours *behind* UTC rather than ahead, per the
953:         POSIX standard.
954: 
955:     .. _`GNU C Library: TZ Variable`:
956:         https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html
957:     '''
958:     def __init__(self, s, posix_offset=False):
959:         global parser
960:         from dateutil import parser
961: 
962:         self._s = s
963: 
964:         res = parser._parsetz(s)
965:         if res is None:
966:             raise ValueError("unknown string format")
967: 
968:         # Here we break the compatibility with the TZ variable handling.
969:         # GMT-3 actually *means* the timezone -3.
970:         if res.stdabbr in ("GMT", "UTC") and not posix_offset:
971:             res.stdoffset *= -1
972: 
973:         # We must initialize it first, since _delta() needs
974:         # _std_offset and _dst_offset set. Use False in start/end
975:         # to avoid building it two times.
976:         tzrange.__init__(self, res.stdabbr, res.stdoffset,
977:                          res.dstabbr, res.dstoffset,
978:                          start=False, end=False)
979: 
980:         if not res.dstabbr:
981:             self._start_delta = None
982:             self._end_delta = None
983:         else:
984:             self._start_delta = self._delta(res.start)
985:             if self._start_delta:
986:                 self._end_delta = self._delta(res.end, isend=1)
987: 
988:         self.hasdst = bool(self._start_delta)
989: 
990:     def _delta(self, x, isend=0):
991:         from dateutil import relativedelta
992:         kwargs = {}
993:         if x.month is not None:
994:             kwargs["month"] = x.month
995:             if x.weekday is not None:
996:                 kwargs["weekday"] = relativedelta.weekday(x.weekday, x.week)
997:                 if x.week > 0:
998:                     kwargs["day"] = 1
999:                 else:
1000:                     kwargs["day"] = 31
1001:             elif x.day:
1002:                 kwargs["day"] = x.day
1003:         elif x.yday is not None:
1004:             kwargs["yearday"] = x.yday
1005:         elif x.jyday is not None:
1006:             kwargs["nlyearday"] = x.jyday
1007:         if not kwargs:
1008:             # Default is to start on first sunday of april, and end
1009:             # on last sunday of october.
1010:             if not isend:
1011:                 kwargs["month"] = 4
1012:                 kwargs["day"] = 1
1013:                 kwargs["weekday"] = relativedelta.SU(+1)
1014:             else:
1015:                 kwargs["month"] = 10
1016:                 kwargs["day"] = 31
1017:                 kwargs["weekday"] = relativedelta.SU(-1)
1018:         if x.time is not None:
1019:             kwargs["seconds"] = x.time
1020:         else:
1021:             # Default is 2AM.
1022:             kwargs["seconds"] = 7200
1023:         if isend:
1024:             # Convert to standard time, to follow the documented way
1025:             # of working with the extra hour. See the documentation
1026:             # of the tzinfo class.
1027:             delta = self._dst_offset - self._std_offset
1028:             kwargs["seconds"] -= delta.seconds + delta.days * 86400
1029:         return relativedelta.relativedelta(**kwargs)
1030: 
1031:     def __repr__(self):
1032:         return "%s(%s)" % (self.__class__.__name__, repr(self._s))
1033: 
1034: 
1035: class _tzicalvtzcomp(object):
1036:     def __init__(self, tzoffsetfrom, tzoffsetto, isdst,
1037:                  tzname=None, rrule=None):
1038:         self.tzoffsetfrom = datetime.timedelta(seconds=tzoffsetfrom)
1039:         self.tzoffsetto = datetime.timedelta(seconds=tzoffsetto)
1040:         self.tzoffsetdiff = self.tzoffsetto - self.tzoffsetfrom
1041:         self.isdst = isdst
1042:         self.tzname = tzname
1043:         self.rrule = rrule
1044: 
1045: 
1046: class _tzicalvtz(_tzinfo):
1047:     def __init__(self, tzid, comps=[]):
1048:         super(_tzicalvtz, self).__init__()
1049: 
1050:         self._tzid = tzid
1051:         self._comps = comps
1052:         self._cachedate = []
1053:         self._cachecomp = []
1054: 
1055:     def _find_comp(self, dt):
1056:         if len(self._comps) == 1:
1057:             return self._comps[0]
1058: 
1059:         dt = dt.replace(tzinfo=None)
1060: 
1061:         try:
1062:             return self._cachecomp[self._cachedate.index((dt, self._fold(dt)))]
1063:         except ValueError:
1064:             pass
1065: 
1066:         lastcompdt = None
1067:         lastcomp = None
1068: 
1069:         for comp in self._comps:
1070:             compdt = self._find_compdt(comp, dt)
1071: 
1072:             if compdt and (not lastcompdt or lastcompdt < compdt):
1073:                 lastcompdt = compdt
1074:                 lastcomp = comp
1075: 
1076:         if not lastcomp:
1077:             # RFC says nothing about what to do when a given
1078:             # time is before the first onset date. We'll look for the
1079:             # first standard component, or the first component, if
1080:             # none is found.
1081:             for comp in self._comps:
1082:                 if not comp.isdst:
1083:                     lastcomp = comp
1084:                     break
1085:             else:
1086:                 lastcomp = comp[0]
1087: 
1088:         self._cachedate.insert(0, (dt, self._fold(dt)))
1089:         self._cachecomp.insert(0, lastcomp)
1090: 
1091:         if len(self._cachedate) > 10:
1092:             self._cachedate.pop()
1093:             self._cachecomp.pop()
1094: 
1095:         return lastcomp
1096: 
1097:     def _find_compdt(self, comp, dt):
1098:         if comp.tzoffsetdiff < ZERO and self._fold(dt):
1099:             dt -= comp.tzoffsetdiff
1100: 
1101:         compdt = comp.rrule.before(dt, inc=True)
1102: 
1103:         return compdt
1104: 
1105:     def utcoffset(self, dt):
1106:         if dt is None:
1107:             return None
1108: 
1109:         return self._find_comp(dt).tzoffsetto
1110: 
1111:     def dst(self, dt):
1112:         comp = self._find_comp(dt)
1113:         if comp.isdst:
1114:             return comp.tzoffsetdiff
1115:         else:
1116:             return ZERO
1117: 
1118:     @tzname_in_python2
1119:     def tzname(self, dt):
1120:         return self._find_comp(dt).tzname
1121: 
1122:     def __repr__(self):
1123:         return "<tzicalvtz %s>" % repr(self._tzid)
1124: 
1125:     __reduce__ = object.__reduce__
1126: 
1127: 
1128: class tzical(object):
1129:     '''
1130:     This object is designed to parse an iCalendar-style ``VTIMEZONE`` structure
1131:     as set out in `RFC 2445`_ Section 4.6.5 into one or more `tzinfo` objects.
1132: 
1133:     :param `fileobj`:
1134:         A file or stream in iCalendar format, which should be UTF-8 encoded
1135:         with CRLF endings.
1136: 
1137:     .. _`RFC 2445`: https://www.ietf.org/rfc/rfc2445.txt
1138:     '''
1139:     def __init__(self, fileobj):
1140:         global rrule
1141:         from dateutil import rrule
1142: 
1143:         if isinstance(fileobj, string_types):
1144:             self._s = fileobj
1145:             # ical should be encoded in UTF-8 with CRLF
1146:             fileobj = open(fileobj, 'r')
1147:         else:
1148:             self._s = getattr(fileobj, 'name', repr(fileobj))
1149:             fileobj = _ContextWrapper(fileobj)
1150: 
1151:         self._vtz = {}
1152: 
1153:         with fileobj as fobj:
1154:             self._parse_rfc(fobj.read())
1155: 
1156:     def keys(self):
1157:         '''
1158:         Retrieves the available time zones as a list.
1159:         '''
1160:         return list(self._vtz.keys())
1161: 
1162:     def get(self, tzid=None):
1163:         '''
1164:         Retrieve a :py:class:`datetime.tzinfo` object by its ``tzid``.
1165: 
1166:         :param tzid:
1167:             If there is exactly one time zone available, omitting ``tzid``
1168:             or passing :py:const:`None` value returns it. Otherwise a valid
1169:             key (which can be retrieved from :func:`keys`) is required.
1170: 
1171:         :raises ValueError:
1172:             Raised if ``tzid`` is not specified but there are either more
1173:             or fewer than 1 zone defined.
1174: 
1175:         :returns:
1176:             Returns either a :py:class:`datetime.tzinfo` object representing
1177:             the relevant time zone or :py:const:`None` if the ``tzid`` was
1178:             not found.
1179:         '''
1180:         if tzid is None:
1181:             if len(self._vtz) == 0:
1182:                 raise ValueError("no timezones defined")
1183:             elif len(self._vtz) > 1:
1184:                 raise ValueError("more than one timezone available")
1185:             tzid = next(iter(self._vtz))
1186: 
1187:         return self._vtz.get(tzid)
1188: 
1189:     def _parse_offset(self, s):
1190:         s = s.strip()
1191:         if not s:
1192:             raise ValueError("empty offset")
1193:         if s[0] in ('+', '-'):
1194:             signal = (-1, +1)[s[0] == '+']
1195:             s = s[1:]
1196:         else:
1197:             signal = +1
1198:         if len(s) == 4:
1199:             return (int(s[:2]) * 3600 + int(s[2:]) * 60) * signal
1200:         elif len(s) == 6:
1201:             return (int(s[:2]) * 3600 + int(s[2:4]) * 60 + int(s[4:])) * signal
1202:         else:
1203:             raise ValueError("invalid offset: " + s)
1204: 
1205:     def _parse_rfc(self, s):
1206:         lines = s.splitlines()
1207:         if not lines:
1208:             raise ValueError("empty string")
1209: 
1210:         # Unfold
1211:         i = 0
1212:         while i < len(lines):
1213:             line = lines[i].rstrip()
1214:             if not line:
1215:                 del lines[i]
1216:             elif i > 0 and line[0] == " ":
1217:                 lines[i-1] += line[1:]
1218:                 del lines[i]
1219:             else:
1220:                 i += 1
1221: 
1222:         tzid = None
1223:         comps = []
1224:         invtz = False
1225:         comptype = None
1226:         for line in lines:
1227:             if not line:
1228:                 continue
1229:             name, value = line.split(':', 1)
1230:             parms = name.split(';')
1231:             if not parms:
1232:                 raise ValueError("empty property name")
1233:             name = parms[0].upper()
1234:             parms = parms[1:]
1235:             if invtz:
1236:                 if name == "BEGIN":
1237:                     if value in ("STANDARD", "DAYLIGHT"):
1238:                         # Process component
1239:                         pass
1240:                     else:
1241:                         raise ValueError("unknown component: "+value)
1242:                     comptype = value
1243:                     founddtstart = False
1244:                     tzoffsetfrom = None
1245:                     tzoffsetto = None
1246:                     rrulelines = []
1247:                     tzname = None
1248:                 elif name == "END":
1249:                     if value == "VTIMEZONE":
1250:                         if comptype:
1251:                             raise ValueError("component not closed: "+comptype)
1252:                         if not tzid:
1253:                             raise ValueError("mandatory TZID not found")
1254:                         if not comps:
1255:                             raise ValueError(
1256:                                 "at least one component is needed")
1257:                         # Process vtimezone
1258:                         self._vtz[tzid] = _tzicalvtz(tzid, comps)
1259:                         invtz = False
1260:                     elif value == comptype:
1261:                         if not founddtstart:
1262:                             raise ValueError("mandatory DTSTART not found")
1263:                         if tzoffsetfrom is None:
1264:                             raise ValueError(
1265:                                 "mandatory TZOFFSETFROM not found")
1266:                         if tzoffsetto is None:
1267:                             raise ValueError(
1268:                                 "mandatory TZOFFSETFROM not found")
1269:                         # Process component
1270:                         rr = None
1271:                         if rrulelines:
1272:                             rr = rrule.rrulestr("\n".join(rrulelines),
1273:                                                 compatible=True,
1274:                                                 ignoretz=True,
1275:                                                 cache=True)
1276:                         comp = _tzicalvtzcomp(tzoffsetfrom, tzoffsetto,
1277:                                               (comptype == "DAYLIGHT"),
1278:                                               tzname, rr)
1279:                         comps.append(comp)
1280:                         comptype = None
1281:                     else:
1282:                         raise ValueError("invalid component end: "+value)
1283:                 elif comptype:
1284:                     if name == "DTSTART":
1285:                         rrulelines.append(line)
1286:                         founddtstart = True
1287:                     elif name in ("RRULE", "RDATE", "EXRULE", "EXDATE"):
1288:                         rrulelines.append(line)
1289:                     elif name == "TZOFFSETFROM":
1290:                         if parms:
1291:                             raise ValueError(
1292:                                 "unsupported %s parm: %s " % (name, parms[0]))
1293:                         tzoffsetfrom = self._parse_offset(value)
1294:                     elif name == "TZOFFSETTO":
1295:                         if parms:
1296:                             raise ValueError(
1297:                                 "unsupported TZOFFSETTO parm: "+parms[0])
1298:                         tzoffsetto = self._parse_offset(value)
1299:                     elif name == "TZNAME":
1300:                         if parms:
1301:                             raise ValueError(
1302:                                 "unsupported TZNAME parm: "+parms[0])
1303:                         tzname = value
1304:                     elif name == "COMMENT":
1305:                         pass
1306:                     else:
1307:                         raise ValueError("unsupported property: "+name)
1308:                 else:
1309:                     if name == "TZID":
1310:                         if parms:
1311:                             raise ValueError(
1312:                                 "unsupported TZID parm: "+parms[0])
1313:                         tzid = value
1314:                     elif name in ("TZURL", "LAST-MODIFIED", "COMMENT"):
1315:                         pass
1316:                     else:
1317:                         raise ValueError("unsupported property: "+name)
1318:             elif name == "BEGIN" and value == "VTIMEZONE":
1319:                 tzid = None
1320:                 comps = []
1321:                 invtz = True
1322: 
1323:     def __repr__(self):
1324:         return "%s(%s)" % (self.__class__.__name__, repr(self._s))
1325: 
1326: 
1327: if sys.platform != "win32":
1328:     TZFILES = ["/etc/localtime", "localtime"]
1329:     TZPATHS = ["/usr/share/zoneinfo",
1330:                "/usr/lib/zoneinfo",
1331:                "/usr/share/lib/zoneinfo",
1332:                "/etc/zoneinfo"]
1333: else:
1334:     TZFILES = []
1335:     TZPATHS = []
1336: 
1337: 
1338: def gettz(name=None):
1339:     tz = None
1340:     if not name:
1341:         try:
1342:             name = os.environ["TZ"]
1343:         except KeyError:
1344:             pass
1345:     if name is None or name == ":":
1346:         for filepath in TZFILES:
1347:             if not os.path.isabs(filepath):
1348:                 filename = filepath
1349:                 for path in TZPATHS:
1350:                     filepath = os.path.join(path, filename)
1351:                     if os.path.isfile(filepath):
1352:                         break
1353:                 else:
1354:                     continue
1355:             if os.path.isfile(filepath):
1356:                 try:
1357:                     tz = tzfile(filepath)
1358:                     break
1359:                 except (IOError, OSError, ValueError):
1360:                     pass
1361:         else:
1362:             tz = tzlocal()
1363:     else:
1364:         if name.startswith(":"):
1365:             name = name[:-1]
1366:         if os.path.isabs(name):
1367:             if os.path.isfile(name):
1368:                 tz = tzfile(name)
1369:             else:
1370:                 tz = None
1371:         else:
1372:             for path in TZPATHS:
1373:                 filepath = os.path.join(path, name)
1374:                 if not os.path.isfile(filepath):
1375:                     filepath = filepath.replace(' ', '_')
1376:                     if not os.path.isfile(filepath):
1377:                         continue
1378:                 try:
1379:                     tz = tzfile(filepath)
1380:                     break
1381:                 except (IOError, OSError, ValueError):
1382:                     pass
1383:             else:
1384:                 tz = None
1385:                 if tzwin is not None:
1386:                     try:
1387:                         tz = tzwin(name)
1388:                     except WindowsError:
1389:                         tz = None
1390: 
1391:                 if not tz:
1392:                     from dateutil.zoneinfo import get_zonefile_instance
1393:                     tz = get_zonefile_instance().get(name)
1394: 
1395:                 if not tz:
1396:                     for c in name:
1397:                         # name must have at least one offset to be a tzstr
1398:                         if c in "0123456789":
1399:                             try:
1400:                                 tz = tzstr(name)
1401:                             except ValueError:
1402:                                 pass
1403:                             break
1404:                     else:
1405:                         if name in ("GMT", "UTC"):
1406:                             tz = tzutc()
1407:                         elif name in time.tzname:
1408:                             tz = tzlocal()
1409:     return tz
1410: 
1411: 
1412: def datetime_exists(dt, tz=None):
1413:     '''
1414:     Given a datetime and a time zone, determine whether or not a given datetime
1415:     would fall in a gap.
1416: 
1417:     :param dt:
1418:         A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``
1419:         is provided.)
1420: 
1421:     :param tz:
1422:         A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If
1423:         ``None`` or not provided, the datetime's own time zone will be used.
1424: 
1425:     :return:
1426:         Returns a boolean value whether or not the "wall time" exists in ``tz``.
1427:     '''
1428:     if tz is None:
1429:         if dt.tzinfo is None:
1430:             raise ValueError('Datetime is naive and no time zone provided.')
1431:         tz = dt.tzinfo
1432: 
1433:     dt = dt.replace(tzinfo=None)
1434: 
1435:     # This is essentially a test of whether or not the datetime can survive
1436:     # a round trip to UTC.
1437:     dt_rt = dt.replace(tzinfo=tz).astimezone(tzutc()).astimezone(tz)
1438:     dt_rt = dt_rt.replace(tzinfo=None)
1439: 
1440:     return dt == dt_rt
1441: 
1442: 
1443: def datetime_ambiguous(dt, tz=None):
1444:     '''
1445:     Given a datetime and a time zone, determine whether or not a given datetime
1446:     is ambiguous (i.e if there are two times differentiated only by their DST
1447:     status).
1448: 
1449:     :param dt:
1450:         A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``
1451:         is provided.)
1452: 
1453:     :param tz:
1454:         A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If
1455:         ``None`` or not provided, the datetime's own time zone will be used.
1456: 
1457:     :return:
1458:         Returns a boolean value whether or not the "wall time" is ambiguous in
1459:         ``tz``.
1460: 
1461:     .. versionadded:: 2.6.0
1462:     '''
1463:     if tz is None:
1464:         if dt.tzinfo is None:
1465:             raise ValueError('Datetime is naive and no time zone provided.')
1466: 
1467:         tz = dt.tzinfo
1468: 
1469:     # If a time zone defines its own "is_ambiguous" function, we'll use that.
1470:     is_ambiguous_fn = getattr(tz, 'is_ambiguous', None)
1471:     if is_ambiguous_fn is not None:
1472:         try:
1473:             return tz.is_ambiguous(dt)
1474:         except:
1475:             pass
1476: 
1477:     # If it doesn't come out and tell us it's ambiguous, we'll just check if
1478:     # the fold attribute has any effect on this particular date and time.
1479:     dt = dt.replace(tzinfo=tz)
1480:     wall_0 = enfold(dt, fold=0)
1481:     wall_1 = enfold(dt, fold=1)
1482: 
1483:     same_offset = wall_0.utcoffset() == wall_1.utcoffset()
1484:     same_dst = wall_0.dst() == wall_1.dst()
1485: 
1486:     return not (same_offset and same_dst)
1487: 
1488: 
1489: def _datetime_to_timestamp(dt):
1490:     '''
1491:     Convert a :class:`datetime.datetime` object to an epoch timestamp in seconds
1492:     since January 1, 1970, ignoring the time zone.
1493:     '''
1494:     return _total_seconds((dt.replace(tzinfo=None) - EPOCH))
1495: 
1496: 
1497: class _ContextWrapper(object):
1498:     '''
1499:     Class for wrapping contexts so that they are passed through in a
1500:     with statement.
1501:     '''
1502:     def __init__(self, context):
1503:         self.context = context
1504: 
1505:     def __enter__(self):
1506:         return self.context
1507: 
1508:     def __exit__(*args, **kwargs):
1509:         pass
1510: 
1511: # vim:ts=4:sw=4:et
1512: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_320208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 9, (-1)), 'str', '\nThis module offers timezone implementations subclassing the abstract\n:py:`datetime.tzinfo` type. There are classes to handle tzfile format files\n(usually are in :file:`/etc/localtime`, :file:`/usr/share/zoneinfo`, etc), TZ\nenvironment string (in all known formats), given ranges (with help from\nrelative deltas), local machine timezone, fixed offset timezone, and UTC\ntimezone.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import datetime' statement (line 10)
import datetime

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'datetime', datetime, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import struct' statement (line 11)
import struct

import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'struct', struct, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import time' statement (line 12)
import time

import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'time', time, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'import sys' statement (line 13)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import os' statement (line 14)
import os

import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import bisect' statement (line 15)
import bisect

import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'bisect', bisect, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'from six import string_types' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
import_320209 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six')

if (type(import_320209) is not StypyTypeError):

    if (import_320209 != 'pyd_module'):
        __import__(import_320209)
        sys_modules_320210 = sys.modules[import_320209]
        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six', sys_modules_320210.module_type_store, module_type_store, ['string_types'])
        nest_module(stypy.reporting.localization.Localization(__file__, 17, 0), __file__, sys_modules_320210, sys_modules_320210.module_type_store, module_type_store)
    else:
        from six import string_types

        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six', None, module_type_store, ['string_types'], [string_types])

else:
    # Assigning a type to the variable 'six' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'six', import_320209)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from dateutil.tz._common import tzname_in_python2, _tzinfo, _total_seconds' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
import_320211 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'dateutil.tz._common')

if (type(import_320211) is not StypyTypeError):

    if (import_320211 != 'pyd_module'):
        __import__(import_320211)
        sys_modules_320212 = sys.modules[import_320211]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'dateutil.tz._common', sys_modules_320212.module_type_store, module_type_store, ['tzname_in_python2', '_tzinfo', '_total_seconds'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_320212, sys_modules_320212.module_type_store, module_type_store)
    else:
        from dateutil.tz._common import tzname_in_python2, _tzinfo, _total_seconds

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'dateutil.tz._common', None, module_type_store, ['tzname_in_python2', '_tzinfo', '_total_seconds'], [tzname_in_python2, _tzinfo, _total_seconds])

else:
    # Assigning a type to the variable 'dateutil.tz._common' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'dateutil.tz._common', import_320211)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from dateutil.tz._common import tzrangebase, enfold' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
import_320213 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'dateutil.tz._common')

if (type(import_320213) is not StypyTypeError):

    if (import_320213 != 'pyd_module'):
        __import__(import_320213)
        sys_modules_320214 = sys.modules[import_320213]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'dateutil.tz._common', sys_modules_320214.module_type_store, module_type_store, ['tzrangebase', 'enfold'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_320214, sys_modules_320214.module_type_store, module_type_store)
    else:
        from dateutil.tz._common import tzrangebase, enfold

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'dateutil.tz._common', None, module_type_store, ['tzrangebase', 'enfold'], [tzrangebase, enfold])

else:
    # Assigning a type to the variable 'dateutil.tz._common' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'dateutil.tz._common', import_320213)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from dateutil.tz._common import _validate_fromutc_inputs' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
import_320215 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'dateutil.tz._common')

if (type(import_320215) is not StypyTypeError):

    if (import_320215 != 'pyd_module'):
        __import__(import_320215)
        sys_modules_320216 = sys.modules[import_320215]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'dateutil.tz._common', sys_modules_320216.module_type_store, module_type_store, ['_validate_fromutc_inputs'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_320216, sys_modules_320216.module_type_store, module_type_store)
    else:
        from dateutil.tz._common import _validate_fromutc_inputs

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'dateutil.tz._common', None, module_type_store, ['_validate_fromutc_inputs'], [_validate_fromutc_inputs])

else:
    # Assigning a type to the variable 'dateutil.tz._common' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'dateutil.tz._common', import_320215)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')



# SSA begins for try-except statement (line 22)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 4))

# 'from dateutil.tz.win import tzwin, tzwinlocal' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
import_320217 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 4), 'dateutil.tz.win')

if (type(import_320217) is not StypyTypeError):

    if (import_320217 != 'pyd_module'):
        __import__(import_320217)
        sys_modules_320218 = sys.modules[import_320217]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 4), 'dateutil.tz.win', sys_modules_320218.module_type_store, module_type_store, ['tzwin', 'tzwinlocal'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 4), __file__, sys_modules_320218, sys_modules_320218.module_type_store, module_type_store)
    else:
        from dateutil.tz.win import tzwin, tzwinlocal

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 4), 'dateutil.tz.win', None, module_type_store, ['tzwin', 'tzwinlocal'], [tzwin, tzwinlocal])

else:
    # Assigning a type to the variable 'dateutil.tz.win' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 4), 'dateutil.tz.win', import_320217)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')

# SSA branch for the except part of a try statement (line 22)
# SSA branch for the except 'ImportError' branch of a try statement (line 22)
module_type_store.open_ssa_branch('except')

# Multiple assignment of 2 elements.

# Assigning a Name to a Name (line 25):
# Getting the type of 'None' (line 25)
None_320219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 25, 25), 'None')
# Assigning a type to the variable 'tzwinlocal' (line 25)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 12), 'tzwinlocal', None_320219)

# Assigning a Name to a Name (line 25):
# Getting the type of 'tzwinlocal' (line 25)
tzwinlocal_320220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 25, 12), 'tzwinlocal')
# Assigning a type to the variable 'tzwin' (line 25)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 4), 'tzwin', tzwinlocal_320220)
# SSA join for try-except statement (line 22)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Call to a Name (line 27):

# Assigning a Call to a Name (line 27):

# Call to timedelta(...): (line 27)
# Processing the call arguments (line 27)
int_320223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 26), 'int')
# Processing the call keyword arguments (line 27)
kwargs_320224 = {}
# Getting the type of 'datetime' (line 27)
datetime_320221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 27, 7), 'datetime', False)
# Obtaining the member 'timedelta' of a type (line 27)
timedelta_320222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 27, 7), datetime_320221, 'timedelta')
# Calling timedelta(args, kwargs) (line 27)
timedelta_call_result_320225 = invoke(stypy.reporting.localization.Localization(__file__, 27, 7), timedelta_320222, *[int_320223], **kwargs_320224)

# Assigning a type to the variable 'ZERO' (line 27)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'ZERO', timedelta_call_result_320225)

# Assigning a Call to a Name (line 28):

# Assigning a Call to a Name (line 28):

# Call to utcfromtimestamp(...): (line 28)
# Processing the call arguments (line 28)
int_320229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 43), 'int')
# Processing the call keyword arguments (line 28)
kwargs_320230 = {}
# Getting the type of 'datetime' (line 28)
datetime_320226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 8), 'datetime', False)
# Obtaining the member 'datetime' of a type (line 28)
datetime_320227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 8), datetime_320226, 'datetime')
# Obtaining the member 'utcfromtimestamp' of a type (line 28)
utcfromtimestamp_320228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 8), datetime_320227, 'utcfromtimestamp')
# Calling utcfromtimestamp(args, kwargs) (line 28)
utcfromtimestamp_call_result_320231 = invoke(stypy.reporting.localization.Localization(__file__, 28, 8), utcfromtimestamp_320228, *[int_320229], **kwargs_320230)

# Assigning a type to the variable 'EPOCH' (line 28)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'EPOCH', utcfromtimestamp_call_result_320231)

# Assigning a Call to a Name (line 29):

# Assigning a Call to a Name (line 29):

# Call to toordinal(...): (line 29)
# Processing the call keyword arguments (line 29)
kwargs_320234 = {}
# Getting the type of 'EPOCH' (line 29)
EPOCH_320232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 29, 15), 'EPOCH', False)
# Obtaining the member 'toordinal' of a type (line 29)
toordinal_320233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 29, 15), EPOCH_320232, 'toordinal')
# Calling toordinal(args, kwargs) (line 29)
toordinal_call_result_320235 = invoke(stypy.reporting.localization.Localization(__file__, 29, 15), toordinal_320233, *[], **kwargs_320234)

# Assigning a type to the variable 'EPOCHORDINAL' (line 29)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'EPOCHORDINAL', toordinal_call_result_320235)
# Declaration of the 'tzutc' class
# Getting the type of 'datetime' (line 32)
datetime_320236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 32, 12), 'datetime')
# Obtaining the member 'tzinfo' of a type (line 32)
tzinfo_320237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 32, 12), datetime_320236, 'tzinfo')

class tzutc(tzinfo_320237, ):
    str_320238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, (-1)), 'str', '\n    This is a tzinfo object that represents the UTC time zone.\n    ')

    @norecursion
    def utcoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'utcoffset'
        module_type_store = module_type_store.open_function_context('utcoffset', 36, 4, False)
        # Assigning a type to the variable 'self' (line 37)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzutc.utcoffset.__dict__.__setitem__('stypy_localization', localization)
        tzutc.utcoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzutc.utcoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzutc.utcoffset.__dict__.__setitem__('stypy_function_name', 'tzutc.utcoffset')
        tzutc.utcoffset.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzutc.utcoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzutc.utcoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzutc.utcoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzutc.utcoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzutc.utcoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzutc.utcoffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.utcoffset', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'utcoffset', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'utcoffset(...)' code ##################

        # Getting the type of 'ZERO' (line 37)
        ZERO_320239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 15), 'ZERO')
        # Assigning a type to the variable 'stypy_return_type' (line 37)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 8), 'stypy_return_type', ZERO_320239)
        
        # ################# End of 'utcoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'utcoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 36)
        stypy_return_type_320240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320240)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'utcoffset'
        return stypy_return_type_320240


    @norecursion
    def dst(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dst'
        module_type_store = module_type_store.open_function_context('dst', 39, 4, False)
        # Assigning a type to the variable 'self' (line 40)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzutc.dst.__dict__.__setitem__('stypy_localization', localization)
        tzutc.dst.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzutc.dst.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzutc.dst.__dict__.__setitem__('stypy_function_name', 'tzutc.dst')
        tzutc.dst.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzutc.dst.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzutc.dst.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzutc.dst.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzutc.dst.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzutc.dst.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzutc.dst.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.dst', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dst', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dst(...)' code ##################

        # Getting the type of 'ZERO' (line 40)
        ZERO_320241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 15), 'ZERO')
        # Assigning a type to the variable 'stypy_return_type' (line 40)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 8), 'stypy_return_type', ZERO_320241)
        
        # ################# End of 'dst(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dst' in the type store
        # Getting the type of 'stypy_return_type' (line 39)
        stypy_return_type_320242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320242)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dst'
        return stypy_return_type_320242


    @norecursion
    def tzname(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tzname'
        module_type_store = module_type_store.open_function_context('tzname', 42, 4, False)
        # Assigning a type to the variable 'self' (line 43)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzutc.tzname.__dict__.__setitem__('stypy_localization', localization)
        tzutc.tzname.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzutc.tzname.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzutc.tzname.__dict__.__setitem__('stypy_function_name', 'tzutc.tzname')
        tzutc.tzname.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzutc.tzname.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzutc.tzname.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzutc.tzname.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzutc.tzname.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzutc.tzname.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzutc.tzname.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.tzname', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tzname', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tzname(...)' code ##################

        str_320243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 15), 'str', 'UTC')
        # Assigning a type to the variable 'stypy_return_type' (line 44)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 8), 'stypy_return_type', str_320243)
        
        # ################# End of 'tzname(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tzname' in the type store
        # Getting the type of 'stypy_return_type' (line 42)
        stypy_return_type_320244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320244)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tzname'
        return stypy_return_type_320244


    @norecursion
    def is_ambiguous(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_ambiguous'
        module_type_store = module_type_store.open_function_context('is_ambiguous', 46, 4, False)
        # Assigning a type to the variable 'self' (line 47)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_localization', localization)
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_function_name', 'tzutc.is_ambiguous')
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzutc.is_ambiguous.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.is_ambiguous', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_ambiguous', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_ambiguous(...)' code ##################

        str_320245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 59, (-1)), 'str', '\n        Whether or not the "wall time" of a given datetime is ambiguous in this\n        zone.\n\n        :param dt:\n            A :py:class:`datetime.datetime`, naive or time zone aware.\n\n\n        :return:\n            Returns ``True`` if ambiguous, ``False`` otherwise.\n\n        .. versionadded:: 2.6.0\n        ')
        # Getting the type of 'False' (line 60)
        False_320246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 60)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 8), 'stypy_return_type', False_320246)
        
        # ################# End of 'is_ambiguous(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_ambiguous' in the type store
        # Getting the type of 'stypy_return_type' (line 46)
        stypy_return_type_320247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320247)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_ambiguous'
        return stypy_return_type_320247


    @norecursion
    def fromutc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromutc'
        module_type_store = module_type_store.open_function_context('fromutc', 62, 4, False)
        # Assigning a type to the variable 'self' (line 63)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzutc.fromutc.__dict__.__setitem__('stypy_localization', localization)
        tzutc.fromutc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzutc.fromutc.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzutc.fromutc.__dict__.__setitem__('stypy_function_name', 'tzutc.fromutc')
        tzutc.fromutc.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzutc.fromutc.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzutc.fromutc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzutc.fromutc.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzutc.fromutc.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzutc.fromutc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzutc.fromutc.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.fromutc', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromutc', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromutc(...)' code ##################

        str_320248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, (-1)), 'str', '\n        Fast track version of fromutc() returns the original ``dt`` object for\n        any valid :py:class:`datetime.datetime` object.\n        ')
        # Getting the type of 'dt' (line 68)
        dt_320249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 15), 'dt')
        # Assigning a type to the variable 'stypy_return_type' (line 68)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 8), 'stypy_return_type', dt_320249)
        
        # ################# End of 'fromutc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromutc' in the type store
        # Getting the type of 'stypy_return_type' (line 62)
        stypy_return_type_320250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320250)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromutc'
        return stypy_return_type_320250


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 70, 4, False)
        # Assigning a type to the variable 'self' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'tzutc.stypy__eq__')
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzutc.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 71)
        # Processing the call arguments (line 71)
        # Getting the type of 'other' (line 71)
        other_320252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 26), 'other', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 71)
        tuple_320253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 71)
        # Adding element type (line 71)
        # Getting the type of 'tzutc' (line 71)
        tzutc_320254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 34), 'tzutc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 71, 34), tuple_320253, tzutc_320254)
        # Adding element type (line 71)
        # Getting the type of 'tzoffset' (line 71)
        tzoffset_320255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 41), 'tzoffset', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 71, 34), tuple_320253, tzoffset_320255)
        
        # Processing the call keyword arguments (line 71)
        kwargs_320256 = {}
        # Getting the type of 'isinstance' (line 71)
        isinstance_320251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 71)
        isinstance_call_result_320257 = invoke(stypy.reporting.localization.Localization(__file__, 71, 15), isinstance_320251, *[other_320252, tuple_320253], **kwargs_320256)
        
        # Applying the 'not' unary operator (line 71)
        result_not__320258 = python_operator(stypy.reporting.localization.Localization(__file__, 71, 11), 'not', isinstance_call_result_320257)
        
        # Testing the type of an if condition (line 71)
        if_condition_320259 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 71, 8), result_not__320258)
        # Assigning a type to the variable 'if_condition_320259' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 8), 'if_condition_320259', if_condition_320259)
        # SSA begins for if statement (line 71)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 72)
        NotImplemented_320260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 72)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 12), 'stypy_return_type', NotImplemented_320260)
        # SSA join for if statement (line 71)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 74)
        # Processing the call arguments (line 74)
        # Getting the type of 'other' (line 74)
        other_320262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 27), 'other', False)
        # Getting the type of 'tzutc' (line 74)
        tzutc_320263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 34), 'tzutc', False)
        # Processing the call keyword arguments (line 74)
        kwargs_320264 = {}
        # Getting the type of 'isinstance' (line 74)
        isinstance_320261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 16), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 74)
        isinstance_call_result_320265 = invoke(stypy.reporting.localization.Localization(__file__, 74, 16), isinstance_320261, *[other_320262, tzutc_320263], **kwargs_320264)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 75)
        # Processing the call arguments (line 75)
        # Getting the type of 'other' (line 75)
        other_320267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 28), 'other', False)
        # Getting the type of 'tzoffset' (line 75)
        tzoffset_320268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 35), 'tzoffset', False)
        # Processing the call keyword arguments (line 75)
        kwargs_320269 = {}
        # Getting the type of 'isinstance' (line 75)
        isinstance_320266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 17), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 75)
        isinstance_call_result_320270 = invoke(stypy.reporting.localization.Localization(__file__, 75, 17), isinstance_320266, *[other_320267, tzoffset_320268], **kwargs_320269)
        
        
        # Getting the type of 'other' (line 75)
        other_320271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 49), 'other')
        # Obtaining the member '_offset' of a type (line 75)
        _offset_320272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 49), other_320271, '_offset')
        # Getting the type of 'ZERO' (line 75)
        ZERO_320273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 66), 'ZERO')
        # Applying the binary operator '==' (line 75)
        result_eq_320274 = python_operator(stypy.reporting.localization.Localization(__file__, 75, 49), '==', _offset_320272, ZERO_320273)
        
        # Applying the binary operator 'and' (line 75)
        result_and_keyword_320275 = python_operator(stypy.reporting.localization.Localization(__file__, 75, 17), 'and', isinstance_call_result_320270, result_eq_320274)
        
        # Applying the binary operator 'or' (line 74)
        result_or_keyword_320276 = python_operator(stypy.reporting.localization.Localization(__file__, 74, 16), 'or', isinstance_call_result_320265, result_and_keyword_320275)
        
        # Assigning a type to the variable 'stypy_return_type' (line 74)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'stypy_return_type', result_or_keyword_320276)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 70)
        stypy_return_type_320277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320277)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_320277

    
    # Assigning a Name to a Name (line 77):

    @norecursion
    def __ne__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ne__'
        module_type_store = module_type_store.open_function_context('__ne__', 79, 4, False)
        # Assigning a type to the variable 'self' (line 80)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzutc.__ne__.__dict__.__setitem__('stypy_localization', localization)
        tzutc.__ne__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzutc.__ne__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzutc.__ne__.__dict__.__setitem__('stypy_function_name', 'tzutc.__ne__')
        tzutc.__ne__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzutc.__ne__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzutc.__ne__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzutc.__ne__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzutc.__ne__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzutc.__ne__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzutc.__ne__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.__ne__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ne__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ne__(...)' code ##################

        
        
        # Getting the type of 'self' (line 80)
        self_320278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 20), 'self')
        # Getting the type of 'other' (line 80)
        other_320279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 28), 'other')
        # Applying the binary operator '==' (line 80)
        result_eq_320280 = python_operator(stypy.reporting.localization.Localization(__file__, 80, 20), '==', self_320278, other_320279)
        
        # Applying the 'not' unary operator (line 80)
        result_not__320281 = python_operator(stypy.reporting.localization.Localization(__file__, 80, 15), 'not', result_eq_320280)
        
        # Assigning a type to the variable 'stypy_return_type' (line 80)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 8), 'stypy_return_type', result_not__320281)
        
        # ################# End of '__ne__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ne__' in the type store
        # Getting the type of 'stypy_return_type' (line 79)
        stypy_return_type_320282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320282)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ne__'
        return stypy_return_type_320282


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 82, 4, False)
        # Assigning a type to the variable 'self' (line 83)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'tzutc.stypy__repr__')
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzutc.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_320283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, 15), 'str', '%s()')
        # Getting the type of 'self' (line 83)
        self_320284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 24), 'self')
        # Obtaining the member '__class__' of a type (line 83)
        class___320285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 24), self_320284, '__class__')
        # Obtaining the member '__name__' of a type (line 83)
        name___320286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 24), class___320285, '__name__')
        # Applying the binary operator '%' (line 83)
        result_mod_320287 = python_operator(stypy.reporting.localization.Localization(__file__, 83, 15), '%', str_320283, name___320286)
        
        # Assigning a type to the variable 'stypy_return_type' (line 83)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 8), 'stypy_return_type', result_mod_320287)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 82)
        stypy_return_type_320288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320288)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_320288

    
    # Assigning a Attribute to a Name (line 85):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 32, 0, False)
        # Assigning a type to the variable 'self' (line 33)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzutc.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'tzutc' (line 32)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'tzutc', tzutc)

# Assigning a Name to a Name (line 77):
# Getting the type of 'None' (line 77)
None_320289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 15), 'None')
# Getting the type of 'tzutc'
tzutc_320290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'tzutc')
# Setting the type of the member '__hash__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), tzutc_320290, '__hash__', None_320289)

# Assigning a Attribute to a Name (line 85):
# Getting the type of 'object' (line 85)
object_320291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 17), 'object')
# Obtaining the member '__reduce__' of a type (line 85)
reduce___320292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 17), object_320291, '__reduce__')
# Getting the type of 'tzutc'
tzutc_320293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'tzutc')
# Setting the type of the member '__reduce__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), tzutc_320293, '__reduce__', reduce___320292)
# Declaration of the 'tzoffset' class
# Getting the type of 'datetime' (line 88)
datetime_320294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 15), 'datetime')
# Obtaining the member 'tzinfo' of a type (line 88)
tzinfo_320295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 15), datetime_320294, 'tzinfo')

class tzoffset(tzinfo_320295, ):
    str_320296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, (-1)), 'str', '\n    A simple class for representing a fixed offset from UTC.\n\n    :param name:\n        The timezone name, to be returned when ``tzname()`` is called.\n\n    :param offset:\n        The time zone offset in seconds, or (since version 2.6.0, represented\n        as a :py:class:`datetime.timedelta` object.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 99, 4, False)
        # Assigning a type to the variable 'self' (line 100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.__init__', ['name', 'offset'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['name', 'offset'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 100):
        
        # Assigning a Name to a Attribute (line 100):
        # Getting the type of 'name' (line 100)
        name_320297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 21), 'name')
        # Getting the type of 'self' (line 100)
        self_320298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 8), 'self')
        # Setting the type of the member '_name' of a type (line 100)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 100, 8), self_320298, '_name', name_320297)
        
        
        # SSA begins for try-except statement (line 102)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 104):
        
        # Assigning a Call to a Name (line 104):
        
        # Call to _total_seconds(...): (line 104)
        # Processing the call arguments (line 104)
        # Getting the type of 'offset' (line 104)
        offset_320300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 36), 'offset', False)
        # Processing the call keyword arguments (line 104)
        kwargs_320301 = {}
        # Getting the type of '_total_seconds' (line 104)
        _total_seconds_320299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 21), '_total_seconds', False)
        # Calling _total_seconds(args, kwargs) (line 104)
        _total_seconds_call_result_320302 = invoke(stypy.reporting.localization.Localization(__file__, 104, 21), _total_seconds_320299, *[offset_320300], **kwargs_320301)
        
        # Assigning a type to the variable 'offset' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 12), 'offset', _total_seconds_call_result_320302)
        # SSA branch for the except part of a try statement (line 102)
        # SSA branch for the except 'Tuple' branch of a try statement (line 102)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 102)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 107):
        
        # Assigning a Call to a Attribute (line 107):
        
        # Call to timedelta(...): (line 107)
        # Processing the call keyword arguments (line 107)
        # Getting the type of 'offset' (line 107)
        offset_320305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 50), 'offset', False)
        keyword_320306 = offset_320305
        kwargs_320307 = {'seconds': keyword_320306}
        # Getting the type of 'datetime' (line 107)
        datetime_320303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 23), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 107)
        timedelta_320304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 23), datetime_320303, 'timedelta')
        # Calling timedelta(args, kwargs) (line 107)
        timedelta_call_result_320308 = invoke(stypy.reporting.localization.Localization(__file__, 107, 23), timedelta_320304, *[], **kwargs_320307)
        
        # Getting the type of 'self' (line 107)
        self_320309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 8), 'self')
        # Setting the type of the member '_offset' of a type (line 107)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 8), self_320309, '_offset', timedelta_call_result_320308)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def utcoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'utcoffset'
        module_type_store = module_type_store.open_function_context('utcoffset', 109, 4, False)
        # Assigning a type to the variable 'self' (line 110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzoffset.utcoffset.__dict__.__setitem__('stypy_localization', localization)
        tzoffset.utcoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzoffset.utcoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzoffset.utcoffset.__dict__.__setitem__('stypy_function_name', 'tzoffset.utcoffset')
        tzoffset.utcoffset.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzoffset.utcoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzoffset.utcoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzoffset.utcoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzoffset.utcoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzoffset.utcoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzoffset.utcoffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.utcoffset', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'utcoffset', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'utcoffset(...)' code ##################

        # Getting the type of 'self' (line 110)
        self_320310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 15), 'self')
        # Obtaining the member '_offset' of a type (line 110)
        _offset_320311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 110, 15), self_320310, '_offset')
        # Assigning a type to the variable 'stypy_return_type' (line 110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 8), 'stypy_return_type', _offset_320311)
        
        # ################# End of 'utcoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'utcoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 109)
        stypy_return_type_320312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320312)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'utcoffset'
        return stypy_return_type_320312


    @norecursion
    def dst(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dst'
        module_type_store = module_type_store.open_function_context('dst', 112, 4, False)
        # Assigning a type to the variable 'self' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzoffset.dst.__dict__.__setitem__('stypy_localization', localization)
        tzoffset.dst.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzoffset.dst.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzoffset.dst.__dict__.__setitem__('stypy_function_name', 'tzoffset.dst')
        tzoffset.dst.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzoffset.dst.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzoffset.dst.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzoffset.dst.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzoffset.dst.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzoffset.dst.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzoffset.dst.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.dst', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dst', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dst(...)' code ##################

        # Getting the type of 'ZERO' (line 113)
        ZERO_320313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 15), 'ZERO')
        # Assigning a type to the variable 'stypy_return_type' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'stypy_return_type', ZERO_320313)
        
        # ################# End of 'dst(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dst' in the type store
        # Getting the type of 'stypy_return_type' (line 112)
        stypy_return_type_320314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320314)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dst'
        return stypy_return_type_320314


    @norecursion
    def tzname(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tzname'
        module_type_store = module_type_store.open_function_context('tzname', 115, 4, False)
        # Assigning a type to the variable 'self' (line 116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzoffset.tzname.__dict__.__setitem__('stypy_localization', localization)
        tzoffset.tzname.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzoffset.tzname.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzoffset.tzname.__dict__.__setitem__('stypy_function_name', 'tzoffset.tzname')
        tzoffset.tzname.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzoffset.tzname.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzoffset.tzname.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzoffset.tzname.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzoffset.tzname.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzoffset.tzname.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzoffset.tzname.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.tzname', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tzname', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tzname(...)' code ##################

        # Getting the type of 'self' (line 117)
        self_320315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 15), 'self')
        # Obtaining the member '_name' of a type (line 117)
        _name_320316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 15), self_320315, '_name')
        # Assigning a type to the variable 'stypy_return_type' (line 117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 8), 'stypy_return_type', _name_320316)
        
        # ################# End of 'tzname(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tzname' in the type store
        # Getting the type of 'stypy_return_type' (line 115)
        stypy_return_type_320317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tzname'
        return stypy_return_type_320317


    @norecursion
    def fromutc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromutc'
        module_type_store = module_type_store.open_function_context('fromutc', 119, 4, False)
        # Assigning a type to the variable 'self' (line 120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzoffset.fromutc.__dict__.__setitem__('stypy_localization', localization)
        tzoffset.fromutc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzoffset.fromutc.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzoffset.fromutc.__dict__.__setitem__('stypy_function_name', 'tzoffset.fromutc')
        tzoffset.fromutc.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzoffset.fromutc.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzoffset.fromutc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzoffset.fromutc.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzoffset.fromutc.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzoffset.fromutc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzoffset.fromutc.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.fromutc', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromutc', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromutc(...)' code ##################

        # Getting the type of 'dt' (line 121)
        dt_320318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 15), 'dt')
        # Getting the type of 'self' (line 121)
        self_320319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 20), 'self')
        # Obtaining the member '_offset' of a type (line 121)
        _offset_320320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 20), self_320319, '_offset')
        # Applying the binary operator '+' (line 121)
        result_add_320321 = python_operator(stypy.reporting.localization.Localization(__file__, 121, 15), '+', dt_320318, _offset_320320)
        
        # Assigning a type to the variable 'stypy_return_type' (line 121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 8), 'stypy_return_type', result_add_320321)
        
        # ################# End of 'fromutc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromutc' in the type store
        # Getting the type of 'stypy_return_type' (line 119)
        stypy_return_type_320322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320322)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromutc'
        return stypy_return_type_320322


    @norecursion
    def is_ambiguous(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_ambiguous'
        module_type_store = module_type_store.open_function_context('is_ambiguous', 123, 4, False)
        # Assigning a type to the variable 'self' (line 124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_localization', localization)
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_function_name', 'tzoffset.is_ambiguous')
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzoffset.is_ambiguous.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.is_ambiguous', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_ambiguous', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_ambiguous(...)' code ##################

        str_320323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, (-1)), 'str', '\n        Whether or not the "wall time" of a given datetime is ambiguous in this\n        zone.\n\n        :param dt:\n            A :py:class:`datetime.datetime`, naive or time zone aware.\n\n\n        :return:\n            Returns ``True`` if ambiguous, ``False`` otherwise.\n\n        .. versionadded:: 2.6.0\n        ')
        # Getting the type of 'False' (line 137)
        False_320324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'stypy_return_type', False_320324)
        
        # ################# End of 'is_ambiguous(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_ambiguous' in the type store
        # Getting the type of 'stypy_return_type' (line 123)
        stypy_return_type_320325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320325)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_ambiguous'
        return stypy_return_type_320325


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 139, 4, False)
        # Assigning a type to the variable 'self' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'tzoffset.stypy__eq__')
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzoffset.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 140)
        # Processing the call arguments (line 140)
        # Getting the type of 'other' (line 140)
        other_320327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 26), 'other', False)
        # Getting the type of 'tzoffset' (line 140)
        tzoffset_320328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 33), 'tzoffset', False)
        # Processing the call keyword arguments (line 140)
        kwargs_320329 = {}
        # Getting the type of 'isinstance' (line 140)
        isinstance_320326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 140)
        isinstance_call_result_320330 = invoke(stypy.reporting.localization.Localization(__file__, 140, 15), isinstance_320326, *[other_320327, tzoffset_320328], **kwargs_320329)
        
        # Applying the 'not' unary operator (line 140)
        result_not__320331 = python_operator(stypy.reporting.localization.Localization(__file__, 140, 11), 'not', isinstance_call_result_320330)
        
        # Testing the type of an if condition (line 140)
        if_condition_320332 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 140, 8), result_not__320331)
        # Assigning a type to the variable 'if_condition_320332' (line 140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 8), 'if_condition_320332', if_condition_320332)
        # SSA begins for if statement (line 140)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 141)
        NotImplemented_320333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 12), 'stypy_return_type', NotImplemented_320333)
        # SSA join for if statement (line 140)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 143)
        self_320334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 15), 'self')
        # Obtaining the member '_offset' of a type (line 143)
        _offset_320335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 15), self_320334, '_offset')
        # Getting the type of 'other' (line 143)
        other_320336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 31), 'other')
        # Obtaining the member '_offset' of a type (line 143)
        _offset_320337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 31), other_320336, '_offset')
        # Applying the binary operator '==' (line 143)
        result_eq_320338 = python_operator(stypy.reporting.localization.Localization(__file__, 143, 15), '==', _offset_320335, _offset_320337)
        
        # Assigning a type to the variable 'stypy_return_type' (line 143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 8), 'stypy_return_type', result_eq_320338)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 139)
        stypy_return_type_320339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320339)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_320339

    
    # Assigning a Name to a Name (line 145):

    @norecursion
    def __ne__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ne__'
        module_type_store = module_type_store.open_function_context('__ne__', 147, 4, False)
        # Assigning a type to the variable 'self' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzoffset.__ne__.__dict__.__setitem__('stypy_localization', localization)
        tzoffset.__ne__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzoffset.__ne__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzoffset.__ne__.__dict__.__setitem__('stypy_function_name', 'tzoffset.__ne__')
        tzoffset.__ne__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzoffset.__ne__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzoffset.__ne__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzoffset.__ne__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzoffset.__ne__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzoffset.__ne__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzoffset.__ne__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.__ne__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ne__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ne__(...)' code ##################

        
        
        # Getting the type of 'self' (line 148)
        self_320340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 20), 'self')
        # Getting the type of 'other' (line 148)
        other_320341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 28), 'other')
        # Applying the binary operator '==' (line 148)
        result_eq_320342 = python_operator(stypy.reporting.localization.Localization(__file__, 148, 20), '==', self_320340, other_320341)
        
        # Applying the 'not' unary operator (line 148)
        result_not__320343 = python_operator(stypy.reporting.localization.Localization(__file__, 148, 15), 'not', result_eq_320342)
        
        # Assigning a type to the variable 'stypy_return_type' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 8), 'stypy_return_type', result_not__320343)
        
        # ################# End of '__ne__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ne__' in the type store
        # Getting the type of 'stypy_return_type' (line 147)
        stypy_return_type_320344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320344)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ne__'
        return stypy_return_type_320344


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 150, 4, False)
        # Assigning a type to the variable 'self' (line 151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'tzoffset.stypy__repr__')
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzoffset.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzoffset.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_320345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 15), 'str', '%s(%s, %s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 151)
        tuple_320346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 151)
        # Adding element type (line 151)
        # Getting the type of 'self' (line 151)
        self_320347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 31), 'self')
        # Obtaining the member '__class__' of a type (line 151)
        class___320348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 31), self_320347, '__class__')
        # Obtaining the member '__name__' of a type (line 151)
        name___320349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 31), class___320348, '__name__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 31), tuple_320346, name___320349)
        # Adding element type (line 151)
        
        # Call to repr(...): (line 152)
        # Processing the call arguments (line 152)
        # Getting the type of 'self' (line 152)
        self_320351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 36), 'self', False)
        # Obtaining the member '_name' of a type (line 152)
        _name_320352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 36), self_320351, '_name')
        # Processing the call keyword arguments (line 152)
        kwargs_320353 = {}
        # Getting the type of 'repr' (line 152)
        repr_320350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 31), 'repr', False)
        # Calling repr(args, kwargs) (line 152)
        repr_call_result_320354 = invoke(stypy.reporting.localization.Localization(__file__, 152, 31), repr_320350, *[_name_320352], **kwargs_320353)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 31), tuple_320346, repr_call_result_320354)
        # Adding element type (line 151)
        
        # Call to int(...): (line 153)
        # Processing the call arguments (line 153)
        
        # Call to _total_seconds(...): (line 153)
        # Processing the call arguments (line 153)
        # Getting the type of 'self' (line 153)
        self_320357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 50), 'self', False)
        # Obtaining the member '_offset' of a type (line 153)
        _offset_320358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 50), self_320357, '_offset')
        # Processing the call keyword arguments (line 153)
        kwargs_320359 = {}
        # Getting the type of '_total_seconds' (line 153)
        _total_seconds_320356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 35), '_total_seconds', False)
        # Calling _total_seconds(args, kwargs) (line 153)
        _total_seconds_call_result_320360 = invoke(stypy.reporting.localization.Localization(__file__, 153, 35), _total_seconds_320356, *[_offset_320358], **kwargs_320359)
        
        # Processing the call keyword arguments (line 153)
        kwargs_320361 = {}
        # Getting the type of 'int' (line 153)
        int_320355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 31), 'int', False)
        # Calling int(args, kwargs) (line 153)
        int_call_result_320362 = invoke(stypy.reporting.localization.Localization(__file__, 153, 31), int_320355, *[_total_seconds_call_result_320360], **kwargs_320361)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 151, 31), tuple_320346, int_call_result_320362)
        
        # Applying the binary operator '%' (line 151)
        result_mod_320363 = python_operator(stypy.reporting.localization.Localization(__file__, 151, 15), '%', str_320345, tuple_320346)
        
        # Assigning a type to the variable 'stypy_return_type' (line 151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 8), 'stypy_return_type', result_mod_320363)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 150)
        stypy_return_type_320364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320364)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_320364

    
    # Assigning a Attribute to a Name (line 155):

# Assigning a type to the variable 'tzoffset' (line 88)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 0), 'tzoffset', tzoffset)

# Assigning a Name to a Name (line 145):
# Getting the type of 'None' (line 145)
None_320365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 15), 'None')
# Getting the type of 'tzoffset'
tzoffset_320366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'tzoffset')
# Setting the type of the member '__hash__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), tzoffset_320366, '__hash__', None_320365)

# Assigning a Attribute to a Name (line 155):
# Getting the type of 'object' (line 155)
object_320367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 17), 'object')
# Obtaining the member '__reduce__' of a type (line 155)
reduce___320368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 17), object_320367, '__reduce__')
# Getting the type of 'tzoffset'
tzoffset_320369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'tzoffset')
# Setting the type of the member '__reduce__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), tzoffset_320369, '__reduce__', reduce___320368)
# Declaration of the 'tzlocal' class
# Getting the type of '_tzinfo' (line 158)
_tzinfo_320370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 14), '_tzinfo')

class tzlocal(_tzinfo_320370, ):
    str_320371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, (-1)), 'str', '\n    A :class:`tzinfo` subclass built around the ``time`` timezone functions.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 162, 4, False)
        # Assigning a type to the variable 'self' (line 163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 163)
        # Processing the call keyword arguments (line 163)
        kwargs_320378 = {}
        
        # Call to super(...): (line 163)
        # Processing the call arguments (line 163)
        # Getting the type of 'tzlocal' (line 163)
        tzlocal_320373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 14), 'tzlocal', False)
        # Getting the type of 'self' (line 163)
        self_320374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 23), 'self', False)
        # Processing the call keyword arguments (line 163)
        kwargs_320375 = {}
        # Getting the type of 'super' (line 163)
        super_320372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'super', False)
        # Calling super(args, kwargs) (line 163)
        super_call_result_320376 = invoke(stypy.reporting.localization.Localization(__file__, 163, 8), super_320372, *[tzlocal_320373, self_320374], **kwargs_320375)
        
        # Obtaining the member '__init__' of a type (line 163)
        init___320377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 8), super_call_result_320376, '__init__')
        # Calling __init__(args, kwargs) (line 163)
        init___call_result_320379 = invoke(stypy.reporting.localization.Localization(__file__, 163, 8), init___320377, *[], **kwargs_320378)
        
        
        # Assigning a Call to a Attribute (line 165):
        
        # Assigning a Call to a Attribute (line 165):
        
        # Call to timedelta(...): (line 165)
        # Processing the call keyword arguments (line 165)
        
        # Getting the type of 'time' (line 165)
        time_320382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 55), 'time', False)
        # Obtaining the member 'timezone' of a type (line 165)
        timezone_320383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 55), time_320382, 'timezone')
        # Applying the 'usub' unary operator (line 165)
        result___neg___320384 = python_operator(stypy.reporting.localization.Localization(__file__, 165, 54), 'usub', timezone_320383)
        
        keyword_320385 = result___neg___320384
        kwargs_320386 = {'seconds': keyword_320385}
        # Getting the type of 'datetime' (line 165)
        datetime_320380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 27), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 165)
        timedelta_320381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 27), datetime_320380, 'timedelta')
        # Calling timedelta(args, kwargs) (line 165)
        timedelta_call_result_320387 = invoke(stypy.reporting.localization.Localization(__file__, 165, 27), timedelta_320381, *[], **kwargs_320386)
        
        # Getting the type of 'self' (line 165)
        self_320388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'self')
        # Setting the type of the member '_std_offset' of a type (line 165)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 8), self_320388, '_std_offset', timedelta_call_result_320387)
        
        # Getting the type of 'time' (line 166)
        time_320389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 11), 'time')
        # Obtaining the member 'daylight' of a type (line 166)
        daylight_320390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 11), time_320389, 'daylight')
        # Testing the type of an if condition (line 166)
        if_condition_320391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 166, 8), daylight_320390)
        # Assigning a type to the variable 'if_condition_320391' (line 166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'if_condition_320391', if_condition_320391)
        # SSA begins for if statement (line 166)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 167):
        
        # Assigning a Call to a Attribute (line 167):
        
        # Call to timedelta(...): (line 167)
        # Processing the call keyword arguments (line 167)
        
        # Getting the type of 'time' (line 167)
        time_320394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 59), 'time', False)
        # Obtaining the member 'altzone' of a type (line 167)
        altzone_320395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 59), time_320394, 'altzone')
        # Applying the 'usub' unary operator (line 167)
        result___neg___320396 = python_operator(stypy.reporting.localization.Localization(__file__, 167, 58), 'usub', altzone_320395)
        
        keyword_320397 = result___neg___320396
        kwargs_320398 = {'seconds': keyword_320397}
        # Getting the type of 'datetime' (line 167)
        datetime_320392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 31), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 167)
        timedelta_320393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 31), datetime_320392, 'timedelta')
        # Calling timedelta(args, kwargs) (line 167)
        timedelta_call_result_320399 = invoke(stypy.reporting.localization.Localization(__file__, 167, 31), timedelta_320393, *[], **kwargs_320398)
        
        # Getting the type of 'self' (line 167)
        self_320400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'self')
        # Setting the type of the member '_dst_offset' of a type (line 167)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 12), self_320400, '_dst_offset', timedelta_call_result_320399)
        # SSA branch for the else part of an if statement (line 166)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Attribute (line 169):
        
        # Assigning a Attribute to a Attribute (line 169):
        # Getting the type of 'self' (line 169)
        self_320401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 31), 'self')
        # Obtaining the member '_std_offset' of a type (line 169)
        _std_offset_320402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 31), self_320401, '_std_offset')
        # Getting the type of 'self' (line 169)
        self_320403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 12), 'self')
        # Setting the type of the member '_dst_offset' of a type (line 169)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 12), self_320403, '_dst_offset', _std_offset_320402)
        # SSA join for if statement (line 166)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Attribute (line 171):
        
        # Assigning a BinOp to a Attribute (line 171):
        # Getting the type of 'self' (line 171)
        self_320404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 26), 'self')
        # Obtaining the member '_dst_offset' of a type (line 171)
        _dst_offset_320405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 26), self_320404, '_dst_offset')
        # Getting the type of 'self' (line 171)
        self_320406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 45), 'self')
        # Obtaining the member '_std_offset' of a type (line 171)
        _std_offset_320407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 45), self_320406, '_std_offset')
        # Applying the binary operator '-' (line 171)
        result_sub_320408 = python_operator(stypy.reporting.localization.Localization(__file__, 171, 26), '-', _dst_offset_320405, _std_offset_320407)
        
        # Getting the type of 'self' (line 171)
        self_320409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 8), 'self')
        # Setting the type of the member '_dst_saved' of a type (line 171)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 8), self_320409, '_dst_saved', result_sub_320408)
        
        # Assigning a Call to a Attribute (line 172):
        
        # Assigning a Call to a Attribute (line 172):
        
        # Call to bool(...): (line 172)
        # Processing the call arguments (line 172)
        # Getting the type of 'self' (line 172)
        self_320411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 28), 'self', False)
        # Obtaining the member '_dst_saved' of a type (line 172)
        _dst_saved_320412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 28), self_320411, '_dst_saved')
        # Processing the call keyword arguments (line 172)
        kwargs_320413 = {}
        # Getting the type of 'bool' (line 172)
        bool_320410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 23), 'bool', False)
        # Calling bool(args, kwargs) (line 172)
        bool_call_result_320414 = invoke(stypy.reporting.localization.Localization(__file__, 172, 23), bool_320410, *[_dst_saved_320412], **kwargs_320413)
        
        # Getting the type of 'self' (line 172)
        self_320415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'self')
        # Setting the type of the member '_hasdst' of a type (line 172)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 8), self_320415, '_hasdst', bool_call_result_320414)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def utcoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'utcoffset'
        module_type_store = module_type_store.open_function_context('utcoffset', 174, 4, False)
        # Assigning a type to the variable 'self' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal.utcoffset.__dict__.__setitem__('stypy_localization', localization)
        tzlocal.utcoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal.utcoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal.utcoffset.__dict__.__setitem__('stypy_function_name', 'tzlocal.utcoffset')
        tzlocal.utcoffset.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzlocal.utcoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal.utcoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal.utcoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal.utcoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal.utcoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal.utcoffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal.utcoffset', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'utcoffset', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'utcoffset(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dt' (line 175)
        dt_320416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 11), 'dt')
        # Getting the type of 'None' (line 175)
        None_320417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 17), 'None')
        # Applying the binary operator 'is' (line 175)
        result_is__320418 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 11), 'is', dt_320416, None_320417)
        
        # Getting the type of 'self' (line 175)
        self_320419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 26), 'self')
        # Obtaining the member '_hasdst' of a type (line 175)
        _hasdst_320420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 26), self_320419, '_hasdst')
        # Applying the binary operator 'and' (line 175)
        result_and_keyword_320421 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 11), 'and', result_is__320418, _hasdst_320420)
        
        # Testing the type of an if condition (line 175)
        if_condition_320422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 175, 8), result_and_keyword_320421)
        # Assigning a type to the variable 'if_condition_320422' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 8), 'if_condition_320422', if_condition_320422)
        # SSA begins for if statement (line 175)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 176)
        None_320423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 176, 12), 'stypy_return_type', None_320423)
        # SSA join for if statement (line 175)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _isdst(...): (line 178)
        # Processing the call arguments (line 178)
        # Getting the type of 'dt' (line 178)
        dt_320426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 23), 'dt', False)
        # Processing the call keyword arguments (line 178)
        kwargs_320427 = {}
        # Getting the type of 'self' (line 178)
        self_320424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 11), 'self', False)
        # Obtaining the member '_isdst' of a type (line 178)
        _isdst_320425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 11), self_320424, '_isdst')
        # Calling _isdst(args, kwargs) (line 178)
        _isdst_call_result_320428 = invoke(stypy.reporting.localization.Localization(__file__, 178, 11), _isdst_320425, *[dt_320426], **kwargs_320427)
        
        # Testing the type of an if condition (line 178)
        if_condition_320429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 178, 8), _isdst_call_result_320428)
        # Assigning a type to the variable 'if_condition_320429' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'if_condition_320429', if_condition_320429)
        # SSA begins for if statement (line 178)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 179)
        self_320430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 19), 'self')
        # Obtaining the member '_dst_offset' of a type (line 179)
        _dst_offset_320431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 19), self_320430, '_dst_offset')
        # Assigning a type to the variable 'stypy_return_type' (line 179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 12), 'stypy_return_type', _dst_offset_320431)
        # SSA branch for the else part of an if statement (line 178)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'self' (line 181)
        self_320432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 19), 'self')
        # Obtaining the member '_std_offset' of a type (line 181)
        _std_offset_320433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 19), self_320432, '_std_offset')
        # Assigning a type to the variable 'stypy_return_type' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 12), 'stypy_return_type', _std_offset_320433)
        # SSA join for if statement (line 178)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'utcoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'utcoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 174)
        stypy_return_type_320434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320434)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'utcoffset'
        return stypy_return_type_320434


    @norecursion
    def dst(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dst'
        module_type_store = module_type_store.open_function_context('dst', 183, 4, False)
        # Assigning a type to the variable 'self' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal.dst.__dict__.__setitem__('stypy_localization', localization)
        tzlocal.dst.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal.dst.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal.dst.__dict__.__setitem__('stypy_function_name', 'tzlocal.dst')
        tzlocal.dst.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzlocal.dst.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal.dst.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal.dst.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal.dst.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal.dst.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal.dst.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal.dst', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dst', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dst(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dt' (line 184)
        dt_320435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 11), 'dt')
        # Getting the type of 'None' (line 184)
        None_320436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 17), 'None')
        # Applying the binary operator 'is' (line 184)
        result_is__320437 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 11), 'is', dt_320435, None_320436)
        
        # Getting the type of 'self' (line 184)
        self_320438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 26), 'self')
        # Obtaining the member '_hasdst' of a type (line 184)
        _hasdst_320439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 26), self_320438, '_hasdst')
        # Applying the binary operator 'and' (line 184)
        result_and_keyword_320440 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 11), 'and', result_is__320437, _hasdst_320439)
        
        # Testing the type of an if condition (line 184)
        if_condition_320441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 184, 8), result_and_keyword_320440)
        # Assigning a type to the variable 'if_condition_320441' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 8), 'if_condition_320441', if_condition_320441)
        # SSA begins for if statement (line 184)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 185)
        None_320442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 12), 'stypy_return_type', None_320442)
        # SSA join for if statement (line 184)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to _isdst(...): (line 187)
        # Processing the call arguments (line 187)
        # Getting the type of 'dt' (line 187)
        dt_320445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 23), 'dt', False)
        # Processing the call keyword arguments (line 187)
        kwargs_320446 = {}
        # Getting the type of 'self' (line 187)
        self_320443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 11), 'self', False)
        # Obtaining the member '_isdst' of a type (line 187)
        _isdst_320444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 11), self_320443, '_isdst')
        # Calling _isdst(args, kwargs) (line 187)
        _isdst_call_result_320447 = invoke(stypy.reporting.localization.Localization(__file__, 187, 11), _isdst_320444, *[dt_320445], **kwargs_320446)
        
        # Testing the type of an if condition (line 187)
        if_condition_320448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 187, 8), _isdst_call_result_320447)
        # Assigning a type to the variable 'if_condition_320448' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'if_condition_320448', if_condition_320448)
        # SSA begins for if statement (line 187)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 188)
        self_320449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 19), 'self')
        # Obtaining the member '_dst_offset' of a type (line 188)
        _dst_offset_320450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 19), self_320449, '_dst_offset')
        # Getting the type of 'self' (line 188)
        self_320451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 38), 'self')
        # Obtaining the member '_std_offset' of a type (line 188)
        _std_offset_320452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 38), self_320451, '_std_offset')
        # Applying the binary operator '-' (line 188)
        result_sub_320453 = python_operator(stypy.reporting.localization.Localization(__file__, 188, 19), '-', _dst_offset_320450, _std_offset_320452)
        
        # Assigning a type to the variable 'stypy_return_type' (line 188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 12), 'stypy_return_type', result_sub_320453)
        # SSA branch for the else part of an if statement (line 187)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'ZERO' (line 190)
        ZERO_320454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 19), 'ZERO')
        # Assigning a type to the variable 'stypy_return_type' (line 190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 12), 'stypy_return_type', ZERO_320454)
        # SSA join for if statement (line 187)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'dst(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dst' in the type store
        # Getting the type of 'stypy_return_type' (line 183)
        stypy_return_type_320455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320455)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dst'
        return stypy_return_type_320455


    @norecursion
    def tzname(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tzname'
        module_type_store = module_type_store.open_function_context('tzname', 192, 4, False)
        # Assigning a type to the variable 'self' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal.tzname.__dict__.__setitem__('stypy_localization', localization)
        tzlocal.tzname.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal.tzname.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal.tzname.__dict__.__setitem__('stypy_function_name', 'tzlocal.tzname')
        tzlocal.tzname.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzlocal.tzname.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal.tzname.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal.tzname.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal.tzname.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal.tzname.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal.tzname.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal.tzname', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tzname', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tzname(...)' code ##################

        
        # Obtaining the type of the subscript
        
        # Call to _isdst(...): (line 194)
        # Processing the call arguments (line 194)
        # Getting the type of 'dt' (line 194)
        dt_320458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 39), 'dt', False)
        # Processing the call keyword arguments (line 194)
        kwargs_320459 = {}
        # Getting the type of 'self' (line 194)
        self_320456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 27), 'self', False)
        # Obtaining the member '_isdst' of a type (line 194)
        _isdst_320457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 27), self_320456, '_isdst')
        # Calling _isdst(args, kwargs) (line 194)
        _isdst_call_result_320460 = invoke(stypy.reporting.localization.Localization(__file__, 194, 27), _isdst_320457, *[dt_320458], **kwargs_320459)
        
        # Getting the type of 'time' (line 194)
        time_320461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 15), 'time')
        # Obtaining the member 'tzname' of a type (line 194)
        tzname_320462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 15), time_320461, 'tzname')
        # Obtaining the member '__getitem__' of a type (line 194)
        getitem___320463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 15), tzname_320462, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 194)
        subscript_call_result_320464 = invoke(stypy.reporting.localization.Localization(__file__, 194, 15), getitem___320463, _isdst_call_result_320460)
        
        # Assigning a type to the variable 'stypy_return_type' (line 194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 8), 'stypy_return_type', subscript_call_result_320464)
        
        # ################# End of 'tzname(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tzname' in the type store
        # Getting the type of 'stypy_return_type' (line 192)
        stypy_return_type_320465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320465)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tzname'
        return stypy_return_type_320465


    @norecursion
    def is_ambiguous(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_ambiguous'
        module_type_store = module_type_store.open_function_context('is_ambiguous', 196, 4, False)
        # Assigning a type to the variable 'self' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_localization', localization)
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_function_name', 'tzlocal.is_ambiguous')
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal.is_ambiguous.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal.is_ambiguous', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_ambiguous', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_ambiguous(...)' code ##################

        str_320466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, (-1)), 'str', '\n        Whether or not the "wall time" of a given datetime is ambiguous in this\n        zone.\n\n        :param dt:\n            A :py:class:`datetime.datetime`, naive or time zone aware.\n\n\n        :return:\n            Returns ``True`` if ambiguous, ``False`` otherwise.\n\n        .. versionadded:: 2.6.0\n        ')
        
        # Assigning a Call to a Name (line 210):
        
        # Assigning a Call to a Name (line 210):
        
        # Call to _naive_is_dst(...): (line 210)
        # Processing the call arguments (line 210)
        # Getting the type of 'dt' (line 210)
        dt_320469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 39), 'dt', False)
        # Processing the call keyword arguments (line 210)
        kwargs_320470 = {}
        # Getting the type of 'self' (line 210)
        self_320467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 20), 'self', False)
        # Obtaining the member '_naive_is_dst' of a type (line 210)
        _naive_is_dst_320468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 20), self_320467, '_naive_is_dst')
        # Calling _naive_is_dst(args, kwargs) (line 210)
        _naive_is_dst_call_result_320471 = invoke(stypy.reporting.localization.Localization(__file__, 210, 20), _naive_is_dst_320468, *[dt_320469], **kwargs_320470)
        
        # Assigning a type to the variable 'naive_dst' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'naive_dst', _naive_is_dst_call_result_320471)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'naive_dst' (line 211)
        naive_dst_320472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 20), 'naive_dst')
        # Applying the 'not' unary operator (line 211)
        result_not__320473 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 16), 'not', naive_dst_320472)
        
        
        # Getting the type of 'naive_dst' (line 212)
        naive_dst_320474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 17), 'naive_dst')
        
        # Call to _naive_is_dst(...): (line 212)
        # Processing the call arguments (line 212)
        # Getting the type of 'dt' (line 212)
        dt_320477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 49), 'dt', False)
        # Getting the type of 'self' (line 212)
        self_320478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 54), 'self', False)
        # Obtaining the member '_dst_saved' of a type (line 212)
        _dst_saved_320479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 54), self_320478, '_dst_saved')
        # Applying the binary operator '-' (line 212)
        result_sub_320480 = python_operator(stypy.reporting.localization.Localization(__file__, 212, 49), '-', dt_320477, _dst_saved_320479)
        
        # Processing the call keyword arguments (line 212)
        kwargs_320481 = {}
        # Getting the type of 'self' (line 212)
        self_320475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 30), 'self', False)
        # Obtaining the member '_naive_is_dst' of a type (line 212)
        _naive_is_dst_320476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 30), self_320475, '_naive_is_dst')
        # Calling _naive_is_dst(args, kwargs) (line 212)
        _naive_is_dst_call_result_320482 = invoke(stypy.reporting.localization.Localization(__file__, 212, 30), _naive_is_dst_320476, *[result_sub_320480], **kwargs_320481)
        
        # Applying the binary operator '!=' (line 212)
        result_ne_320483 = python_operator(stypy.reporting.localization.Localization(__file__, 212, 17), '!=', naive_dst_320474, _naive_is_dst_call_result_320482)
        
        # Applying the binary operator 'and' (line 211)
        result_and_keyword_320484 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 16), 'and', result_not__320473, result_ne_320483)
        
        # Assigning a type to the variable 'stypy_return_type' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'stypy_return_type', result_and_keyword_320484)
        
        # ################# End of 'is_ambiguous(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_ambiguous' in the type store
        # Getting the type of 'stypy_return_type' (line 196)
        stypy_return_type_320485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320485)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_ambiguous'
        return stypy_return_type_320485


    @norecursion
    def _naive_is_dst(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_naive_is_dst'
        module_type_store = module_type_store.open_function_context('_naive_is_dst', 214, 4, False)
        # Assigning a type to the variable 'self' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_localization', localization)
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_function_name', 'tzlocal._naive_is_dst')
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal._naive_is_dst.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal._naive_is_dst', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_naive_is_dst', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_naive_is_dst(...)' code ##################

        
        # Assigning a Call to a Name (line 215):
        
        # Assigning a Call to a Name (line 215):
        
        # Call to _datetime_to_timestamp(...): (line 215)
        # Processing the call arguments (line 215)
        # Getting the type of 'dt' (line 215)
        dt_320487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 43), 'dt', False)
        # Processing the call keyword arguments (line 215)
        kwargs_320488 = {}
        # Getting the type of '_datetime_to_timestamp' (line 215)
        _datetime_to_timestamp_320486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 20), '_datetime_to_timestamp', False)
        # Calling _datetime_to_timestamp(args, kwargs) (line 215)
        _datetime_to_timestamp_call_result_320489 = invoke(stypy.reporting.localization.Localization(__file__, 215, 20), _datetime_to_timestamp_320486, *[dt_320487], **kwargs_320488)
        
        # Assigning a type to the variable 'timestamp' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'timestamp', _datetime_to_timestamp_call_result_320489)
        
        # Call to localtime(...): (line 216)
        # Processing the call arguments (line 216)
        # Getting the type of 'timestamp' (line 216)
        timestamp_320492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 30), 'timestamp', False)
        # Getting the type of 'time' (line 216)
        time_320493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 42), 'time', False)
        # Obtaining the member 'timezone' of a type (line 216)
        timezone_320494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 42), time_320493, 'timezone')
        # Applying the binary operator '+' (line 216)
        result_add_320495 = python_operator(stypy.reporting.localization.Localization(__file__, 216, 30), '+', timestamp_320492, timezone_320494)
        
        # Processing the call keyword arguments (line 216)
        kwargs_320496 = {}
        # Getting the type of 'time' (line 216)
        time_320490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 15), 'time', False)
        # Obtaining the member 'localtime' of a type (line 216)
        localtime_320491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 15), time_320490, 'localtime')
        # Calling localtime(args, kwargs) (line 216)
        localtime_call_result_320497 = invoke(stypy.reporting.localization.Localization(__file__, 216, 15), localtime_320491, *[result_add_320495], **kwargs_320496)
        
        # Obtaining the member 'tm_isdst' of a type (line 216)
        tm_isdst_320498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 15), localtime_call_result_320497, 'tm_isdst')
        # Assigning a type to the variable 'stypy_return_type' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'stypy_return_type', tm_isdst_320498)
        
        # ################# End of '_naive_is_dst(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_naive_is_dst' in the type store
        # Getting the type of 'stypy_return_type' (line 214)
        stypy_return_type_320499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320499)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_naive_is_dst'
        return stypy_return_type_320499


    @norecursion
    def _isdst(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 218)
        True_320500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 36), 'True')
        defaults = [True_320500]
        # Create a new context for function '_isdst'
        module_type_store = module_type_store.open_function_context('_isdst', 218, 4, False)
        # Assigning a type to the variable 'self' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal._isdst.__dict__.__setitem__('stypy_localization', localization)
        tzlocal._isdst.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal._isdst.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal._isdst.__dict__.__setitem__('stypy_function_name', 'tzlocal._isdst')
        tzlocal._isdst.__dict__.__setitem__('stypy_param_names_list', ['dt', 'fold_naive'])
        tzlocal._isdst.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal._isdst.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal._isdst.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal._isdst.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal._isdst.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal._isdst.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal._isdst', ['dt', 'fold_naive'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_isdst', localization, ['dt', 'fold_naive'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_isdst(...)' code ##################

        
        
        # Getting the type of 'self' (line 243)
        self_320501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 15), 'self')
        # Obtaining the member '_hasdst' of a type (line 243)
        _hasdst_320502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 15), self_320501, '_hasdst')
        # Applying the 'not' unary operator (line 243)
        result_not__320503 = python_operator(stypy.reporting.localization.Localization(__file__, 243, 11), 'not', _hasdst_320502)
        
        # Testing the type of an if condition (line 243)
        if_condition_320504 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 243, 8), result_not__320503)
        # Assigning a type to the variable 'if_condition_320504' (line 243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'if_condition_320504', if_condition_320504)
        # SSA begins for if statement (line 243)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 244)
        False_320505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 12), 'stypy_return_type', False_320505)
        # SSA join for if statement (line 243)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 247):
        
        # Assigning a Call to a Name (line 247):
        
        # Call to _naive_is_dst(...): (line 247)
        # Processing the call arguments (line 247)
        # Getting the type of 'dt' (line 247)
        dt_320508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 36), 'dt', False)
        # Processing the call keyword arguments (line 247)
        kwargs_320509 = {}
        # Getting the type of 'self' (line 247)
        self_320506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 17), 'self', False)
        # Obtaining the member '_naive_is_dst' of a type (line 247)
        _naive_is_dst_320507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 17), self_320506, '_naive_is_dst')
        # Calling _naive_is_dst(args, kwargs) (line 247)
        _naive_is_dst_call_result_320510 = invoke(stypy.reporting.localization.Localization(__file__, 247, 17), _naive_is_dst_320507, *[dt_320508], **kwargs_320509)
        
        # Assigning a type to the variable 'dstval' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 8), 'dstval', _naive_is_dst_call_result_320510)
        
        # Assigning a Call to a Name (line 248):
        
        # Assigning a Call to a Name (line 248):
        
        # Call to getattr(...): (line 248)
        # Processing the call arguments (line 248)
        # Getting the type of 'dt' (line 248)
        dt_320512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 23), 'dt', False)
        str_320513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 27), 'str', 'fold')
        # Getting the type of 'None' (line 248)
        None_320514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 35), 'None', False)
        # Processing the call keyword arguments (line 248)
        kwargs_320515 = {}
        # Getting the type of 'getattr' (line 248)
        getattr_320511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 248)
        getattr_call_result_320516 = invoke(stypy.reporting.localization.Localization(__file__, 248, 15), getattr_320511, *[dt_320512, str_320513, None_320514], **kwargs_320515)
        
        # Assigning a type to the variable 'fold' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 8), 'fold', getattr_call_result_320516)
        
        
        # Call to is_ambiguous(...): (line 250)
        # Processing the call arguments (line 250)
        # Getting the type of 'dt' (line 250)
        dt_320519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 29), 'dt', False)
        # Processing the call keyword arguments (line 250)
        kwargs_320520 = {}
        # Getting the type of 'self' (line 250)
        self_320517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 11), 'self', False)
        # Obtaining the member 'is_ambiguous' of a type (line 250)
        is_ambiguous_320518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 11), self_320517, 'is_ambiguous')
        # Calling is_ambiguous(args, kwargs) (line 250)
        is_ambiguous_call_result_320521 = invoke(stypy.reporting.localization.Localization(__file__, 250, 11), is_ambiguous_320518, *[dt_320519], **kwargs_320520)
        
        # Testing the type of an if condition (line 250)
        if_condition_320522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 250, 8), is_ambiguous_call_result_320521)
        # Assigning a type to the variable 'if_condition_320522' (line 250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 8), 'if_condition_320522', if_condition_320522)
        # SSA begins for if statement (line 250)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 251)
        # Getting the type of 'fold' (line 251)
        fold_320523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 12), 'fold')
        # Getting the type of 'None' (line 251)
        None_320524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 27), 'None')
        
        (may_be_320525, more_types_in_union_320526) = may_not_be_none(fold_320523, None_320524)

        if may_be_320525:

            if more_types_in_union_320526:
                # Runtime conditional SSA (line 251)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Call to _fold(...): (line 252)
            # Processing the call arguments (line 252)
            # Getting the type of 'dt' (line 252)
            dt_320529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 38), 'dt', False)
            # Processing the call keyword arguments (line 252)
            kwargs_320530 = {}
            # Getting the type of 'self' (line 252)
            self_320527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 27), 'self', False)
            # Obtaining the member '_fold' of a type (line 252)
            _fold_320528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 27), self_320527, '_fold')
            # Calling _fold(args, kwargs) (line 252)
            _fold_call_result_320531 = invoke(stypy.reporting.localization.Localization(__file__, 252, 27), _fold_320528, *[dt_320529], **kwargs_320530)
            
            # Applying the 'not' unary operator (line 252)
            result_not__320532 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 23), 'not', _fold_call_result_320531)
            
            # Assigning a type to the variable 'stypy_return_type' (line 252)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 16), 'stypy_return_type', result_not__320532)

            if more_types_in_union_320526:
                # Runtime conditional SSA for else branch (line 251)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_320525) or more_types_in_union_320526):
            # Getting the type of 'True' (line 254)
            True_320533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 23), 'True')
            # Assigning a type to the variable 'stypy_return_type' (line 254)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 16), 'stypy_return_type', True_320533)

            if (may_be_320525 and more_types_in_union_320526):
                # SSA join for if statement (line 251)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 250)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'dstval' (line 256)
        dstval_320534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 15), 'dstval')
        # Assigning a type to the variable 'stypy_return_type' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'stypy_return_type', dstval_320534)
        
        # ################# End of '_isdst(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_isdst' in the type store
        # Getting the type of 'stypy_return_type' (line 218)
        stypy_return_type_320535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320535)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_isdst'
        return stypy_return_type_320535


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 258, 4, False)
        # Assigning a type to the variable 'self' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'tzlocal.stypy__eq__')
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 259)
        # Processing the call arguments (line 259)
        # Getting the type of 'other' (line 259)
        other_320537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 26), 'other', False)
        # Getting the type of 'tzlocal' (line 259)
        tzlocal_320538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 33), 'tzlocal', False)
        # Processing the call keyword arguments (line 259)
        kwargs_320539 = {}
        # Getting the type of 'isinstance' (line 259)
        isinstance_320536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 259)
        isinstance_call_result_320540 = invoke(stypy.reporting.localization.Localization(__file__, 259, 15), isinstance_320536, *[other_320537, tzlocal_320538], **kwargs_320539)
        
        # Applying the 'not' unary operator (line 259)
        result_not__320541 = python_operator(stypy.reporting.localization.Localization(__file__, 259, 11), 'not', isinstance_call_result_320540)
        
        # Testing the type of an if condition (line 259)
        if_condition_320542 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 259, 8), result_not__320541)
        # Assigning a type to the variable 'if_condition_320542' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 8), 'if_condition_320542', if_condition_320542)
        # SSA begins for if statement (line 259)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 260)
        NotImplemented_320543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 12), 'stypy_return_type', NotImplemented_320543)
        # SSA join for if statement (line 259)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 262)
        self_320544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 16), 'self')
        # Obtaining the member '_std_offset' of a type (line 262)
        _std_offset_320545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 16), self_320544, '_std_offset')
        # Getting the type of 'other' (line 262)
        other_320546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 36), 'other')
        # Obtaining the member '_std_offset' of a type (line 262)
        _std_offset_320547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 36), other_320546, '_std_offset')
        # Applying the binary operator '==' (line 262)
        result_eq_320548 = python_operator(stypy.reporting.localization.Localization(__file__, 262, 16), '==', _std_offset_320545, _std_offset_320547)
        
        
        # Getting the type of 'self' (line 263)
        self_320549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 16), 'self')
        # Obtaining the member '_dst_offset' of a type (line 263)
        _dst_offset_320550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 16), self_320549, '_dst_offset')
        # Getting the type of 'other' (line 263)
        other_320551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 36), 'other')
        # Obtaining the member '_dst_offset' of a type (line 263)
        _dst_offset_320552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 36), other_320551, '_dst_offset')
        # Applying the binary operator '==' (line 263)
        result_eq_320553 = python_operator(stypy.reporting.localization.Localization(__file__, 263, 16), '==', _dst_offset_320550, _dst_offset_320552)
        
        # Applying the binary operator 'and' (line 262)
        result_and_keyword_320554 = python_operator(stypy.reporting.localization.Localization(__file__, 262, 16), 'and', result_eq_320548, result_eq_320553)
        
        # Assigning a type to the variable 'stypy_return_type' (line 262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 8), 'stypy_return_type', result_and_keyword_320554)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 258)
        stypy_return_type_320555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320555)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_320555

    
    # Assigning a Name to a Name (line 265):

    @norecursion
    def __ne__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ne__'
        module_type_store = module_type_store.open_function_context('__ne__', 267, 4, False)
        # Assigning a type to the variable 'self' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal.__ne__.__dict__.__setitem__('stypy_localization', localization)
        tzlocal.__ne__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal.__ne__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal.__ne__.__dict__.__setitem__('stypy_function_name', 'tzlocal.__ne__')
        tzlocal.__ne__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzlocal.__ne__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal.__ne__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal.__ne__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal.__ne__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal.__ne__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal.__ne__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal.__ne__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ne__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ne__(...)' code ##################

        
        
        # Getting the type of 'self' (line 268)
        self_320556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 20), 'self')
        # Getting the type of 'other' (line 268)
        other_320557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 28), 'other')
        # Applying the binary operator '==' (line 268)
        result_eq_320558 = python_operator(stypy.reporting.localization.Localization(__file__, 268, 20), '==', self_320556, other_320557)
        
        # Applying the 'not' unary operator (line 268)
        result_not__320559 = python_operator(stypy.reporting.localization.Localization(__file__, 268, 15), 'not', result_eq_320558)
        
        # Assigning a type to the variable 'stypy_return_type' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'stypy_return_type', result_not__320559)
        
        # ################# End of '__ne__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ne__' in the type store
        # Getting the type of 'stypy_return_type' (line 267)
        stypy_return_type_320560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320560)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ne__'
        return stypy_return_type_320560


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 270, 4, False)
        # Assigning a type to the variable 'self' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'tzlocal.stypy__repr__')
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzlocal.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzlocal.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_320561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, 15), 'str', '%s()')
        # Getting the type of 'self' (line 271)
        self_320562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 24), 'self')
        # Obtaining the member '__class__' of a type (line 271)
        class___320563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 24), self_320562, '__class__')
        # Obtaining the member '__name__' of a type (line 271)
        name___320564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 24), class___320563, '__name__')
        # Applying the binary operator '%' (line 271)
        result_mod_320565 = python_operator(stypy.reporting.localization.Localization(__file__, 271, 15), '%', str_320561, name___320564)
        
        # Assigning a type to the variable 'stypy_return_type' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 8), 'stypy_return_type', result_mod_320565)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 270)
        stypy_return_type_320566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320566)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_320566

    
    # Assigning a Attribute to a Name (line 273):

# Assigning a type to the variable 'tzlocal' (line 158)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 0), 'tzlocal', tzlocal)

# Assigning a Name to a Name (line 265):
# Getting the type of 'None' (line 265)
None_320567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 15), 'None')
# Getting the type of 'tzlocal'
tzlocal_320568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'tzlocal')
# Setting the type of the member '__hash__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), tzlocal_320568, '__hash__', None_320567)

# Assigning a Attribute to a Name (line 273):
# Getting the type of 'object' (line 273)
object_320569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 17), 'object')
# Obtaining the member '__reduce__' of a type (line 273)
reduce___320570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 17), object_320569, '__reduce__')
# Getting the type of 'tzlocal'
tzlocal_320571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'tzlocal')
# Setting the type of the member '__reduce__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), tzlocal_320571, '__reduce__', reduce___320570)
# Declaration of the '_ttinfo' class

class _ttinfo(object, ):
    
    # Assigning a List to a Name (line 277):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 280, 4, False)
        # Assigning a type to the variable 'self' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ttinfo.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Getting the type of 'self' (line 281)
        self_320572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 20), 'self')
        # Obtaining the member '__slots__' of a type (line 281)
        slots___320573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 20), self_320572, '__slots__')
        # Testing the type of a for loop iterable (line 281)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 281, 8), slots___320573)
        # Getting the type of the for loop variable (line 281)
        for_loop_var_320574 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 281, 8), slots___320573)
        # Assigning a type to the variable 'attr' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'attr', for_loop_var_320574)
        # SSA begins for a for statement (line 281)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 282)
        # Processing the call arguments (line 282)
        # Getting the type of 'self' (line 282)
        self_320576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 20), 'self', False)
        # Getting the type of 'attr' (line 282)
        attr_320577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 26), 'attr', False)
        # Getting the type of 'None' (line 282)
        None_320578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 32), 'None', False)
        # Processing the call keyword arguments (line 282)
        kwargs_320579 = {}
        # Getting the type of 'setattr' (line 282)
        setattr_320575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 282)
        setattr_call_result_320580 = invoke(stypy.reporting.localization.Localization(__file__, 282, 12), setattr_320575, *[self_320576, attr_320577, None_320578], **kwargs_320579)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 284, 4, False)
        # Assigning a type to the variable 'self' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_function_name', '_ttinfo.stypy__repr__')
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ttinfo.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ttinfo.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        
        # Assigning a List to a Name (line 285):
        
        # Assigning a List to a Name (line 285):
        
        # Obtaining an instance of the builtin type 'list' (line 285)
        list_320581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 285, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 285)
        
        # Assigning a type to the variable 'l' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'l', list_320581)
        
        # Getting the type of 'self' (line 286)
        self_320582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 20), 'self')
        # Obtaining the member '__slots__' of a type (line 286)
        slots___320583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 20), self_320582, '__slots__')
        # Testing the type of a for loop iterable (line 286)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 286, 8), slots___320583)
        # Getting the type of the for loop variable (line 286)
        for_loop_var_320584 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 286, 8), slots___320583)
        # Assigning a type to the variable 'attr' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'attr', for_loop_var_320584)
        # SSA begins for a for statement (line 286)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 287):
        
        # Assigning a Call to a Name (line 287):
        
        # Call to getattr(...): (line 287)
        # Processing the call arguments (line 287)
        # Getting the type of 'self' (line 287)
        self_320586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 28), 'self', False)
        # Getting the type of 'attr' (line 287)
        attr_320587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 34), 'attr', False)
        # Processing the call keyword arguments (line 287)
        kwargs_320588 = {}
        # Getting the type of 'getattr' (line 287)
        getattr_320585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 287)
        getattr_call_result_320589 = invoke(stypy.reporting.localization.Localization(__file__, 287, 20), getattr_320585, *[self_320586, attr_320587], **kwargs_320588)
        
        # Assigning a type to the variable 'value' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 12), 'value', getattr_call_result_320589)
        
        # Type idiom detected: calculating its left and rigth part (line 288)
        # Getting the type of 'value' (line 288)
        value_320590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 12), 'value')
        # Getting the type of 'None' (line 288)
        None_320591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 28), 'None')
        
        (may_be_320592, more_types_in_union_320593) = may_not_be_none(value_320590, None_320591)

        if may_be_320592:

            if more_types_in_union_320593:
                # Runtime conditional SSA (line 288)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to append(...): (line 289)
            # Processing the call arguments (line 289)
            str_320596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 25), 'str', '%s=%s')
            
            # Obtaining an instance of the builtin type 'tuple' (line 289)
            tuple_320597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 289)
            # Adding element type (line 289)
            # Getting the type of 'attr' (line 289)
            attr_320598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 36), 'attr', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 36), tuple_320597, attr_320598)
            # Adding element type (line 289)
            
            # Call to repr(...): (line 289)
            # Processing the call arguments (line 289)
            # Getting the type of 'value' (line 289)
            value_320600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 47), 'value', False)
            # Processing the call keyword arguments (line 289)
            kwargs_320601 = {}
            # Getting the type of 'repr' (line 289)
            repr_320599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 42), 'repr', False)
            # Calling repr(args, kwargs) (line 289)
            repr_call_result_320602 = invoke(stypy.reporting.localization.Localization(__file__, 289, 42), repr_320599, *[value_320600], **kwargs_320601)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 289, 36), tuple_320597, repr_call_result_320602)
            
            # Applying the binary operator '%' (line 289)
            result_mod_320603 = python_operator(stypy.reporting.localization.Localization(__file__, 289, 25), '%', str_320596, tuple_320597)
            
            # Processing the call keyword arguments (line 289)
            kwargs_320604 = {}
            # Getting the type of 'l' (line 289)
            l_320594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 16), 'l', False)
            # Obtaining the member 'append' of a type (line 289)
            append_320595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 16), l_320594, 'append')
            # Calling append(args, kwargs) (line 289)
            append_call_result_320605 = invoke(stypy.reporting.localization.Localization(__file__, 289, 16), append_320595, *[result_mod_320603], **kwargs_320604)
            

            if more_types_in_union_320593:
                # SSA join for if statement (line 288)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        str_320606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 15), 'str', '%s(%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 290)
        tuple_320607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 290)
        # Adding element type (line 290)
        # Getting the type of 'self' (line 290)
        self_320608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 27), 'self')
        # Obtaining the member '__class__' of a type (line 290)
        class___320609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 27), self_320608, '__class__')
        # Obtaining the member '__name__' of a type (line 290)
        name___320610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 27), class___320609, '__name__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 290, 27), tuple_320607, name___320610)
        # Adding element type (line 290)
        
        # Call to join(...): (line 290)
        # Processing the call arguments (line 290)
        # Getting the type of 'l' (line 290)
        l_320613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 62), 'l', False)
        # Processing the call keyword arguments (line 290)
        kwargs_320614 = {}
        str_320611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 52), 'str', ', ')
        # Obtaining the member 'join' of a type (line 290)
        join_320612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 52), str_320611, 'join')
        # Calling join(args, kwargs) (line 290)
        join_call_result_320615 = invoke(stypy.reporting.localization.Localization(__file__, 290, 52), join_320612, *[l_320613], **kwargs_320614)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 290, 27), tuple_320607, join_call_result_320615)
        
        # Applying the binary operator '%' (line 290)
        result_mod_320616 = python_operator(stypy.reporting.localization.Localization(__file__, 290, 15), '%', str_320606, tuple_320607)
        
        # Assigning a type to the variable 'stypy_return_type' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'stypy_return_type', result_mod_320616)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 284)
        stypy_return_type_320617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320617)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_320617


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 292, 4, False)
        # Assigning a type to the variable 'self' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_function_name', '_ttinfo.stypy__eq__')
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ttinfo.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ttinfo.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 293)
        # Processing the call arguments (line 293)
        # Getting the type of 'other' (line 293)
        other_320619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 26), 'other', False)
        # Getting the type of '_ttinfo' (line 293)
        _ttinfo_320620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 33), '_ttinfo', False)
        # Processing the call keyword arguments (line 293)
        kwargs_320621 = {}
        # Getting the type of 'isinstance' (line 293)
        isinstance_320618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 293)
        isinstance_call_result_320622 = invoke(stypy.reporting.localization.Localization(__file__, 293, 15), isinstance_320618, *[other_320619, _ttinfo_320620], **kwargs_320621)
        
        # Applying the 'not' unary operator (line 293)
        result_not__320623 = python_operator(stypy.reporting.localization.Localization(__file__, 293, 11), 'not', isinstance_call_result_320622)
        
        # Testing the type of an if condition (line 293)
        if_condition_320624 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 293, 8), result_not__320623)
        # Assigning a type to the variable 'if_condition_320624' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'if_condition_320624', if_condition_320624)
        # SSA begins for if statement (line 293)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 294)
        NotImplemented_320625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 294, 12), 'stypy_return_type', NotImplemented_320625)
        # SSA join for if statement (line 293)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 296)
        self_320626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 16), 'self')
        # Obtaining the member 'offset' of a type (line 296)
        offset_320627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 16), self_320626, 'offset')
        # Getting the type of 'other' (line 296)
        other_320628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 31), 'other')
        # Obtaining the member 'offset' of a type (line 296)
        offset_320629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 31), other_320628, 'offset')
        # Applying the binary operator '==' (line 296)
        result_eq_320630 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 16), '==', offset_320627, offset_320629)
        
        
        # Getting the type of 'self' (line 297)
        self_320631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 16), 'self')
        # Obtaining the member 'delta' of a type (line 297)
        delta_320632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 16), self_320631, 'delta')
        # Getting the type of 'other' (line 297)
        other_320633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 30), 'other')
        # Obtaining the member 'delta' of a type (line 297)
        delta_320634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 30), other_320633, 'delta')
        # Applying the binary operator '==' (line 297)
        result_eq_320635 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 16), '==', delta_320632, delta_320634)
        
        # Applying the binary operator 'and' (line 296)
        result_and_keyword_320636 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 16), 'and', result_eq_320630, result_eq_320635)
        
        # Getting the type of 'self' (line 298)
        self_320637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 16), 'self')
        # Obtaining the member 'isdst' of a type (line 298)
        isdst_320638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 16), self_320637, 'isdst')
        # Getting the type of 'other' (line 298)
        other_320639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 30), 'other')
        # Obtaining the member 'isdst' of a type (line 298)
        isdst_320640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 30), other_320639, 'isdst')
        # Applying the binary operator '==' (line 298)
        result_eq_320641 = python_operator(stypy.reporting.localization.Localization(__file__, 298, 16), '==', isdst_320638, isdst_320640)
        
        # Applying the binary operator 'and' (line 296)
        result_and_keyword_320642 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 16), 'and', result_and_keyword_320636, result_eq_320641)
        
        # Getting the type of 'self' (line 299)
        self_320643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 16), 'self')
        # Obtaining the member 'abbr' of a type (line 299)
        abbr_320644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 16), self_320643, 'abbr')
        # Getting the type of 'other' (line 299)
        other_320645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 29), 'other')
        # Obtaining the member 'abbr' of a type (line 299)
        abbr_320646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 29), other_320645, 'abbr')
        # Applying the binary operator '==' (line 299)
        result_eq_320647 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 16), '==', abbr_320644, abbr_320646)
        
        # Applying the binary operator 'and' (line 296)
        result_and_keyword_320648 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 16), 'and', result_and_keyword_320642, result_eq_320647)
        
        # Getting the type of 'self' (line 300)
        self_320649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 16), 'self')
        # Obtaining the member 'isstd' of a type (line 300)
        isstd_320650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 16), self_320649, 'isstd')
        # Getting the type of 'other' (line 300)
        other_320651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 30), 'other')
        # Obtaining the member 'isstd' of a type (line 300)
        isstd_320652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 30), other_320651, 'isstd')
        # Applying the binary operator '==' (line 300)
        result_eq_320653 = python_operator(stypy.reporting.localization.Localization(__file__, 300, 16), '==', isstd_320650, isstd_320652)
        
        # Applying the binary operator 'and' (line 296)
        result_and_keyword_320654 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 16), 'and', result_and_keyword_320648, result_eq_320653)
        
        # Getting the type of 'self' (line 301)
        self_320655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 16), 'self')
        # Obtaining the member 'isgmt' of a type (line 301)
        isgmt_320656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 16), self_320655, 'isgmt')
        # Getting the type of 'other' (line 301)
        other_320657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 30), 'other')
        # Obtaining the member 'isgmt' of a type (line 301)
        isgmt_320658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 301, 30), other_320657, 'isgmt')
        # Applying the binary operator '==' (line 301)
        result_eq_320659 = python_operator(stypy.reporting.localization.Localization(__file__, 301, 16), '==', isgmt_320656, isgmt_320658)
        
        # Applying the binary operator 'and' (line 296)
        result_and_keyword_320660 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 16), 'and', result_and_keyword_320654, result_eq_320659)
        
        # Getting the type of 'self' (line 302)
        self_320661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 16), 'self')
        # Obtaining the member 'dstoffset' of a type (line 302)
        dstoffset_320662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 16), self_320661, 'dstoffset')
        # Getting the type of 'other' (line 302)
        other_320663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 34), 'other')
        # Obtaining the member 'dstoffset' of a type (line 302)
        dstoffset_320664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 34), other_320663, 'dstoffset')
        # Applying the binary operator '==' (line 302)
        result_eq_320665 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 16), '==', dstoffset_320662, dstoffset_320664)
        
        # Applying the binary operator 'and' (line 296)
        result_and_keyword_320666 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 16), 'and', result_and_keyword_320660, result_eq_320665)
        
        # Assigning a type to the variable 'stypy_return_type' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'stypy_return_type', result_and_keyword_320666)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 292)
        stypy_return_type_320667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320667)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_320667

    
    # Assigning a Name to a Name (line 304):

    @norecursion
    def __ne__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ne__'
        module_type_store = module_type_store.open_function_context('__ne__', 306, 4, False)
        # Assigning a type to the variable 'self' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ttinfo.__ne__.__dict__.__setitem__('stypy_localization', localization)
        _ttinfo.__ne__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ttinfo.__ne__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ttinfo.__ne__.__dict__.__setitem__('stypy_function_name', '_ttinfo.__ne__')
        _ttinfo.__ne__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        _ttinfo.__ne__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ttinfo.__ne__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ttinfo.__ne__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ttinfo.__ne__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ttinfo.__ne__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ttinfo.__ne__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ttinfo.__ne__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ne__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ne__(...)' code ##################

        
        
        # Getting the type of 'self' (line 307)
        self_320668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 20), 'self')
        # Getting the type of 'other' (line 307)
        other_320669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 28), 'other')
        # Applying the binary operator '==' (line 307)
        result_eq_320670 = python_operator(stypy.reporting.localization.Localization(__file__, 307, 20), '==', self_320668, other_320669)
        
        # Applying the 'not' unary operator (line 307)
        result_not__320671 = python_operator(stypy.reporting.localization.Localization(__file__, 307, 15), 'not', result_eq_320670)
        
        # Assigning a type to the variable 'stypy_return_type' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'stypy_return_type', result_not__320671)
        
        # ################# End of '__ne__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ne__' in the type store
        # Getting the type of 'stypy_return_type' (line 306)
        stypy_return_type_320672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320672)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ne__'
        return stypy_return_type_320672


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 309, 4, False)
        # Assigning a type to the variable 'self' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_function_name', '_ttinfo.__getstate__')
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ttinfo.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ttinfo.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Dict to a Name (line 310):
        
        # Assigning a Dict to a Name (line 310):
        
        # Obtaining an instance of the builtin type 'dict' (line 310)
        dict_320673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 16), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 310)
        
        # Assigning a type to the variable 'state' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'state', dict_320673)
        
        # Getting the type of 'self' (line 311)
        self_320674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 20), 'self')
        # Obtaining the member '__slots__' of a type (line 311)
        slots___320675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 20), self_320674, '__slots__')
        # Testing the type of a for loop iterable (line 311)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 311, 8), slots___320675)
        # Getting the type of the for loop variable (line 311)
        for_loop_var_320676 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 311, 8), slots___320675)
        # Assigning a type to the variable 'name' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'name', for_loop_var_320676)
        # SSA begins for a for statement (line 311)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 312):
        
        # Assigning a Call to a Subscript (line 312):
        
        # Call to getattr(...): (line 312)
        # Processing the call arguments (line 312)
        # Getting the type of 'self' (line 312)
        self_320678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 34), 'self', False)
        # Getting the type of 'name' (line 312)
        name_320679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 40), 'name', False)
        # Getting the type of 'None' (line 312)
        None_320680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 46), 'None', False)
        # Processing the call keyword arguments (line 312)
        kwargs_320681 = {}
        # Getting the type of 'getattr' (line 312)
        getattr_320677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 26), 'getattr', False)
        # Calling getattr(args, kwargs) (line 312)
        getattr_call_result_320682 = invoke(stypy.reporting.localization.Localization(__file__, 312, 26), getattr_320677, *[self_320678, name_320679, None_320680], **kwargs_320681)
        
        # Getting the type of 'state' (line 312)
        state_320683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 12), 'state')
        # Getting the type of 'name' (line 312)
        name_320684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 18), 'name')
        # Storing an element on a container (line 312)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 312, 12), state_320683, (name_320684, getattr_call_result_320682))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'state' (line 313)
        state_320685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 15), 'state')
        # Assigning a type to the variable 'stypy_return_type' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 8), 'stypy_return_type', state_320685)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 309)
        stypy_return_type_320686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320686)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_320686


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 315, 4, False)
        # Assigning a type to the variable 'self' (line 316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_function_name', '_ttinfo.__setstate__')
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ttinfo.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ttinfo.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Getting the type of 'self' (line 316)
        self_320687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 20), 'self')
        # Obtaining the member '__slots__' of a type (line 316)
        slots___320688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 20), self_320687, '__slots__')
        # Testing the type of a for loop iterable (line 316)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 316, 8), slots___320688)
        # Getting the type of the for loop variable (line 316)
        for_loop_var_320689 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 316, 8), slots___320688)
        # Assigning a type to the variable 'name' (line 316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'name', for_loop_var_320689)
        # SSA begins for a for statement (line 316)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'name' (line 317)
        name_320690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 15), 'name')
        # Getting the type of 'state' (line 317)
        state_320691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 23), 'state')
        # Applying the binary operator 'in' (line 317)
        result_contains_320692 = python_operator(stypy.reporting.localization.Localization(__file__, 317, 15), 'in', name_320690, state_320691)
        
        # Testing the type of an if condition (line 317)
        if_condition_320693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 317, 12), result_contains_320692)
        # Assigning a type to the variable 'if_condition_320693' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 12), 'if_condition_320693', if_condition_320693)
        # SSA begins for if statement (line 317)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to setattr(...): (line 318)
        # Processing the call arguments (line 318)
        # Getting the type of 'self' (line 318)
        self_320695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 24), 'self', False)
        # Getting the type of 'name' (line 318)
        name_320696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 30), 'name', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 318)
        name_320697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 42), 'name', False)
        # Getting the type of 'state' (line 318)
        state_320698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 36), 'state', False)
        # Obtaining the member '__getitem__' of a type (line 318)
        getitem___320699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 36), state_320698, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 318)
        subscript_call_result_320700 = invoke(stypy.reporting.localization.Localization(__file__, 318, 36), getitem___320699, name_320697)
        
        # Processing the call keyword arguments (line 318)
        kwargs_320701 = {}
        # Getting the type of 'setattr' (line 318)
        setattr_320694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 16), 'setattr', False)
        # Calling setattr(args, kwargs) (line 318)
        setattr_call_result_320702 = invoke(stypy.reporting.localization.Localization(__file__, 318, 16), setattr_320694, *[self_320695, name_320696, subscript_call_result_320700], **kwargs_320701)
        
        # SSA join for if statement (line 317)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 315)
        stypy_return_type_320703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320703)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_320703


# Assigning a type to the variable '_ttinfo' (line 276)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 0), '_ttinfo', _ttinfo)

# Assigning a List to a Name (line 277):

# Obtaining an instance of the builtin type 'list' (line 277)
list_320704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 16), 'list')
# Adding type elements to the builtin type 'list' instance (line 277)
# Adding element type (line 277)
str_320705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 17), 'str', 'offset')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 16), list_320704, str_320705)
# Adding element type (line 277)
str_320706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 27), 'str', 'delta')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 16), list_320704, str_320706)
# Adding element type (line 277)
str_320707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 36), 'str', 'isdst')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 16), list_320704, str_320707)
# Adding element type (line 277)
str_320708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 45), 'str', 'abbr')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 16), list_320704, str_320708)
# Adding element type (line 277)
str_320709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 17), 'str', 'isstd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 16), list_320704, str_320709)
# Adding element type (line 277)
str_320710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 26), 'str', 'isgmt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 16), list_320704, str_320710)
# Adding element type (line 277)
str_320711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 35), 'str', 'dstoffset')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 277, 16), list_320704, str_320711)

# Getting the type of '_ttinfo'
_ttinfo_320712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_ttinfo')
# Setting the type of the member '__slots__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _ttinfo_320712, '__slots__', list_320704)

# Assigning a Name to a Name (line 304):
# Getting the type of 'None' (line 304)
None_320713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 15), 'None')
# Getting the type of '_ttinfo'
_ttinfo_320714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_ttinfo')
# Setting the type of the member '__hash__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _ttinfo_320714, '__hash__', None_320713)
# Declaration of the '_tzfile' class

class _tzfile(object, ):
    str_320715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, (-1)), 'str', '\n    Lightweight class for holding the relevant transition and time zone\n    information read from binary tzfiles.\n    ')
    
    # Assigning a List to a Name (line 326):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 329, 4, False)
        # Assigning a type to the variable 'self' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzfile.__init__', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Getting the type of 'self' (line 330)
        self_320716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 20), 'self')
        # Obtaining the member 'attrs' of a type (line 330)
        attrs_320717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 20), self_320716, 'attrs')
        # Testing the type of a for loop iterable (line 330)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 330, 8), attrs_320717)
        # Getting the type of the for loop variable (line 330)
        for_loop_var_320718 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 330, 8), attrs_320717)
        # Assigning a type to the variable 'attr' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 8), 'attr', for_loop_var_320718)
        # SSA begins for a for statement (line 330)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 331)
        # Processing the call arguments (line 331)
        # Getting the type of 'self' (line 331)
        self_320720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 20), 'self', False)
        # Getting the type of 'attr' (line 331)
        attr_320721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 26), 'attr', False)
        
        # Call to get(...): (line 331)
        # Processing the call arguments (line 331)
        # Getting the type of 'attr' (line 331)
        attr_320724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 43), 'attr', False)
        # Getting the type of 'None' (line 331)
        None_320725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 49), 'None', False)
        # Processing the call keyword arguments (line 331)
        kwargs_320726 = {}
        # Getting the type of 'kwargs' (line 331)
        kwargs_320722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 32), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 331)
        get_320723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 32), kwargs_320722, 'get')
        # Calling get(args, kwargs) (line 331)
        get_call_result_320727 = invoke(stypy.reporting.localization.Localization(__file__, 331, 32), get_320723, *[attr_320724, None_320725], **kwargs_320726)
        
        # Processing the call keyword arguments (line 331)
        kwargs_320728 = {}
        # Getting the type of 'setattr' (line 331)
        setattr_320719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 331)
        setattr_call_result_320729 = invoke(stypy.reporting.localization.Localization(__file__, 331, 12), setattr_320719, *[self_320720, attr_320721, get_call_result_320727], **kwargs_320728)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_tzfile' (line 321)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 0), '_tzfile', _tzfile)

# Assigning a List to a Name (line 326):

# Obtaining an instance of the builtin type 'list' (line 326)
list_320730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 12), 'list')
# Adding type elements to the builtin type 'list' instance (line 326)
# Adding element type (line 326)
str_320731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 13), 'str', 'trans_list')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 12), list_320730, str_320731)
# Adding element type (line 326)
str_320732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 27), 'str', 'trans_list_utc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 12), list_320730, str_320732)
# Adding element type (line 326)
str_320733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 45), 'str', 'trans_idx')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 12), list_320730, str_320733)
# Adding element type (line 326)
str_320734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 58), 'str', 'ttinfo_list')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 12), list_320730, str_320734)
# Adding element type (line 326)
str_320735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 13), 'str', 'ttinfo_std')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 12), list_320730, str_320735)
# Adding element type (line 326)
str_320736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 27), 'str', 'ttinfo_dst')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 12), list_320730, str_320736)
# Adding element type (line 326)
str_320737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 41), 'str', 'ttinfo_before')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 12), list_320730, str_320737)
# Adding element type (line 326)
str_320738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 58), 'str', 'ttinfo_first')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 12), list_320730, str_320738)

# Getting the type of '_tzfile'
_tzfile_320739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_tzfile')
# Setting the type of the member 'attrs' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _tzfile_320739, 'attrs', list_320730)
# Declaration of the 'tzfile' class
# Getting the type of '_tzinfo' (line 334)
_tzinfo_320740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 13), '_tzinfo')

class tzfile(_tzinfo_320740, ):
    str_320741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, (-1)), 'str', "\n    This is a ``tzinfo`` subclass thant allows one to use the ``tzfile(5)``\n    format timezone files to extract current and historical zone information.\n\n    :param fileobj:\n        This can be an opened file stream or a file name that the time zone\n        information can be read from.\n\n    :param filename:\n        This is an optional parameter specifying the source of the time zone\n        information in the event that ``fileobj`` is a file object. If omitted\n        and ``fileobj`` is a file stream, this parameter will be set either to\n        ``fileobj``'s ``name`` attribute or to ``repr(fileobj)``.\n\n    See `Sources for Time Zone and Daylight Saving Time Data\n    <http://www.twinsun.com/tz/tz-link.htm>`_ for more information. Time zone\n    files can be compiled from the `IANA Time Zone database files\n    <https://www.iana.org/time-zones>`_ with the `zic time zone compiler\n    <https://www.freebsd.org/cgi/man.cgi?query=zic&sektion=8>`_\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 356)
        None_320742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 41), 'None')
        defaults = [None_320742]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 356, 4, False)
        # Assigning a type to the variable 'self' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.__init__', ['fileobj', 'filename'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fileobj', 'filename'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 357)
        # Processing the call keyword arguments (line 357)
        kwargs_320749 = {}
        
        # Call to super(...): (line 357)
        # Processing the call arguments (line 357)
        # Getting the type of 'tzfile' (line 357)
        tzfile_320744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 14), 'tzfile', False)
        # Getting the type of 'self' (line 357)
        self_320745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 22), 'self', False)
        # Processing the call keyword arguments (line 357)
        kwargs_320746 = {}
        # Getting the type of 'super' (line 357)
        super_320743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 8), 'super', False)
        # Calling super(args, kwargs) (line 357)
        super_call_result_320747 = invoke(stypy.reporting.localization.Localization(__file__, 357, 8), super_320743, *[tzfile_320744, self_320745], **kwargs_320746)
        
        # Obtaining the member '__init__' of a type (line 357)
        init___320748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 8), super_call_result_320747, '__init__')
        # Calling __init__(args, kwargs) (line 357)
        init___call_result_320750 = invoke(stypy.reporting.localization.Localization(__file__, 357, 8), init___320748, *[], **kwargs_320749)
        
        
        # Assigning a Name to a Name (line 359):
        
        # Assigning a Name to a Name (line 359):
        # Getting the type of 'False' (line 359)
        False_320751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 27), 'False')
        # Assigning a type to the variable 'file_opened_here' (line 359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'file_opened_here', False_320751)
        
        
        # Call to isinstance(...): (line 360)
        # Processing the call arguments (line 360)
        # Getting the type of 'fileobj' (line 360)
        fileobj_320753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 22), 'fileobj', False)
        # Getting the type of 'string_types' (line 360)
        string_types_320754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 31), 'string_types', False)
        # Processing the call keyword arguments (line 360)
        kwargs_320755 = {}
        # Getting the type of 'isinstance' (line 360)
        isinstance_320752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 360)
        isinstance_call_result_320756 = invoke(stypy.reporting.localization.Localization(__file__, 360, 11), isinstance_320752, *[fileobj_320753, string_types_320754], **kwargs_320755)
        
        # Testing the type of an if condition (line 360)
        if_condition_320757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 360, 8), isinstance_call_result_320756)
        # Assigning a type to the variable 'if_condition_320757' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'if_condition_320757', if_condition_320757)
        # SSA begins for if statement (line 360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 361):
        
        # Assigning a Name to a Attribute (line 361):
        # Getting the type of 'fileobj' (line 361)
        fileobj_320758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 29), 'fileobj')
        # Getting the type of 'self' (line 361)
        self_320759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 12), 'self')
        # Setting the type of the member '_filename' of a type (line 361)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 12), self_320759, '_filename', fileobj_320758)
        
        # Assigning a Call to a Name (line 362):
        
        # Assigning a Call to a Name (line 362):
        
        # Call to open(...): (line 362)
        # Processing the call arguments (line 362)
        # Getting the type of 'fileobj' (line 362)
        fileobj_320761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 27), 'fileobj', False)
        str_320762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 36), 'str', 'rb')
        # Processing the call keyword arguments (line 362)
        kwargs_320763 = {}
        # Getting the type of 'open' (line 362)
        open_320760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 22), 'open', False)
        # Calling open(args, kwargs) (line 362)
        open_call_result_320764 = invoke(stypy.reporting.localization.Localization(__file__, 362, 22), open_320760, *[fileobj_320761, str_320762], **kwargs_320763)
        
        # Assigning a type to the variable 'fileobj' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 12), 'fileobj', open_call_result_320764)
        
        # Assigning a Name to a Name (line 363):
        
        # Assigning a Name to a Name (line 363):
        # Getting the type of 'True' (line 363)
        True_320765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 31), 'True')
        # Assigning a type to the variable 'file_opened_here' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'file_opened_here', True_320765)
        # SSA branch for the else part of an if statement (line 360)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 364)
        # Getting the type of 'filename' (line 364)
        filename_320766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 13), 'filename')
        # Getting the type of 'None' (line 364)
        None_320767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 29), 'None')
        
        (may_be_320768, more_types_in_union_320769) = may_not_be_none(filename_320766, None_320767)

        if may_be_320768:

            if more_types_in_union_320769:
                # Runtime conditional SSA (line 364)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 365):
            
            # Assigning a Name to a Attribute (line 365):
            # Getting the type of 'filename' (line 365)
            filename_320770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 29), 'filename')
            # Getting the type of 'self' (line 365)
            self_320771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 12), 'self')
            # Setting the type of the member '_filename' of a type (line 365)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 12), self_320771, '_filename', filename_320770)

            if more_types_in_union_320769:
                # Runtime conditional SSA for else branch (line 364)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_320768) or more_types_in_union_320769):
            
            # Type idiom detected: calculating its left and rigth part (line 366)
            str_320772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, 30), 'str', 'name')
            # Getting the type of 'fileobj' (line 366)
            fileobj_320773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 21), 'fileobj')
            
            (may_be_320774, more_types_in_union_320775) = may_provide_member(str_320772, fileobj_320773)

            if may_be_320774:

                if more_types_in_union_320775:
                    # Runtime conditional SSA (line 366)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'fileobj' (line 366)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 13), 'fileobj', remove_not_member_provider_from_union(fileobj_320773, 'name'))
                
                # Assigning a Attribute to a Attribute (line 367):
                
                # Assigning a Attribute to a Attribute (line 367):
                # Getting the type of 'fileobj' (line 367)
                fileobj_320776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 29), 'fileobj')
                # Obtaining the member 'name' of a type (line 367)
                name_320777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 29), fileobj_320776, 'name')
                # Getting the type of 'self' (line 367)
                self_320778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 12), 'self')
                # Setting the type of the member '_filename' of a type (line 367)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 12), self_320778, '_filename', name_320777)

                if more_types_in_union_320775:
                    # Runtime conditional SSA for else branch (line 366)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_320774) or more_types_in_union_320775):
                # Assigning a type to the variable 'fileobj' (line 366)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 13), 'fileobj', remove_member_provider_from_union(fileobj_320773, 'name'))
                
                # Assigning a Call to a Attribute (line 369):
                
                # Assigning a Call to a Attribute (line 369):
                
                # Call to repr(...): (line 369)
                # Processing the call arguments (line 369)
                # Getting the type of 'fileobj' (line 369)
                fileobj_320780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 34), 'fileobj', False)
                # Processing the call keyword arguments (line 369)
                kwargs_320781 = {}
                # Getting the type of 'repr' (line 369)
                repr_320779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 29), 'repr', False)
                # Calling repr(args, kwargs) (line 369)
                repr_call_result_320782 = invoke(stypy.reporting.localization.Localization(__file__, 369, 29), repr_320779, *[fileobj_320780], **kwargs_320781)
                
                # Getting the type of 'self' (line 369)
                self_320783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 12), 'self')
                # Setting the type of the member '_filename' of a type (line 369)
                module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 12), self_320783, '_filename', repr_call_result_320782)

                if (may_be_320774 and more_types_in_union_320775):
                    # SSA join for if statement (line 366)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_320768 and more_types_in_union_320769):
                # SSA join for if statement (line 364)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 360)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 371)
        # Getting the type of 'fileobj' (line 371)
        fileobj_320784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'fileobj')
        # Getting the type of 'None' (line 371)
        None_320785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 26), 'None')
        
        (may_be_320786, more_types_in_union_320787) = may_not_be_none(fileobj_320784, None_320785)

        if may_be_320786:

            if more_types_in_union_320787:
                # Runtime conditional SSA (line 371)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'file_opened_here' (line 372)
            file_opened_here_320788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 19), 'file_opened_here')
            # Applying the 'not' unary operator (line 372)
            result_not__320789 = python_operator(stypy.reporting.localization.Localization(__file__, 372, 15), 'not', file_opened_here_320788)
            
            # Testing the type of an if condition (line 372)
            if_condition_320790 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 372, 12), result_not__320789)
            # Assigning a type to the variable 'if_condition_320790' (line 372)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 12), 'if_condition_320790', if_condition_320790)
            # SSA begins for if statement (line 372)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 373):
            
            # Assigning a Call to a Name (line 373):
            
            # Call to _ContextWrapper(...): (line 373)
            # Processing the call arguments (line 373)
            # Getting the type of 'fileobj' (line 373)
            fileobj_320792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 42), 'fileobj', False)
            # Processing the call keyword arguments (line 373)
            kwargs_320793 = {}
            # Getting the type of '_ContextWrapper' (line 373)
            _ContextWrapper_320791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 26), '_ContextWrapper', False)
            # Calling _ContextWrapper(args, kwargs) (line 373)
            _ContextWrapper_call_result_320794 = invoke(stypy.reporting.localization.Localization(__file__, 373, 26), _ContextWrapper_320791, *[fileobj_320792], **kwargs_320793)
            
            # Assigning a type to the variable 'fileobj' (line 373)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 16), 'fileobj', _ContextWrapper_call_result_320794)
            # SSA join for if statement (line 372)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'fileobj' (line 375)
            fileobj_320795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 17), 'fileobj')
            with_320796 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 375, 17), fileobj_320795, 'with parameter', '__enter__', '__exit__')

            if with_320796:
                # Calling the __enter__ method to initiate a with section
                # Obtaining the member '__enter__' of a type (line 375)
                enter___320797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 17), fileobj_320795, '__enter__')
                with_enter_320798 = invoke(stypy.reporting.localization.Localization(__file__, 375, 17), enter___320797)
                # Assigning a type to the variable 'file_stream' (line 375)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 17), 'file_stream', with_enter_320798)
                
                # Assigning a Call to a Name (line 376):
                
                # Assigning a Call to a Name (line 376):
                
                # Call to _read_tzfile(...): (line 376)
                # Processing the call arguments (line 376)
                # Getting the type of 'file_stream' (line 376)
                file_stream_320801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 42), 'file_stream', False)
                # Processing the call keyword arguments (line 376)
                kwargs_320802 = {}
                # Getting the type of 'self' (line 376)
                self_320799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 24), 'self', False)
                # Obtaining the member '_read_tzfile' of a type (line 376)
                _read_tzfile_320800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 24), self_320799, '_read_tzfile')
                # Calling _read_tzfile(args, kwargs) (line 376)
                _read_tzfile_call_result_320803 = invoke(stypy.reporting.localization.Localization(__file__, 376, 24), _read_tzfile_320800, *[file_stream_320801], **kwargs_320802)
                
                # Assigning a type to the variable 'tzobj' (line 376)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 16), 'tzobj', _read_tzfile_call_result_320803)
                # Calling the __exit__ method to finish a with section
                # Obtaining the member '__exit__' of a type (line 375)
                exit___320804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 17), fileobj_320795, '__exit__')
                with_exit_320805 = invoke(stypy.reporting.localization.Localization(__file__, 375, 17), exit___320804, None, None, None)

            
            # Call to _set_tzdata(...): (line 378)
            # Processing the call arguments (line 378)
            # Getting the type of 'tzobj' (line 378)
            tzobj_320808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 29), 'tzobj', False)
            # Processing the call keyword arguments (line 378)
            kwargs_320809 = {}
            # Getting the type of 'self' (line 378)
            self_320806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 12), 'self', False)
            # Obtaining the member '_set_tzdata' of a type (line 378)
            _set_tzdata_320807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 378, 12), self_320806, '_set_tzdata')
            # Calling _set_tzdata(args, kwargs) (line 378)
            _set_tzdata_call_result_320810 = invoke(stypy.reporting.localization.Localization(__file__, 378, 12), _set_tzdata_320807, *[tzobj_320808], **kwargs_320809)
            

            if more_types_in_union_320787:
                # SSA join for if statement (line 371)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _set_tzdata(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_tzdata'
        module_type_store = module_type_store.open_function_context('_set_tzdata', 380, 4, False)
        # Assigning a type to the variable 'self' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile._set_tzdata.__dict__.__setitem__('stypy_localization', localization)
        tzfile._set_tzdata.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile._set_tzdata.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile._set_tzdata.__dict__.__setitem__('stypy_function_name', 'tzfile._set_tzdata')
        tzfile._set_tzdata.__dict__.__setitem__('stypy_param_names_list', ['tzobj'])
        tzfile._set_tzdata.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile._set_tzdata.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile._set_tzdata.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile._set_tzdata.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile._set_tzdata.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile._set_tzdata.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile._set_tzdata', ['tzobj'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_tzdata', localization, ['tzobj'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_tzdata(...)' code ##################

        str_320811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 8), 'str', ' Set the time zone data of this object from a _tzfile object ')
        
        # Getting the type of '_tzfile' (line 383)
        _tzfile_320812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 20), '_tzfile')
        # Obtaining the member 'attrs' of a type (line 383)
        attrs_320813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 383, 20), _tzfile_320812, 'attrs')
        # Testing the type of a for loop iterable (line 383)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 383, 8), attrs_320813)
        # Getting the type of the for loop variable (line 383)
        for_loop_var_320814 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 383, 8), attrs_320813)
        # Assigning a type to the variable 'attr' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 8), 'attr', for_loop_var_320814)
        # SSA begins for a for statement (line 383)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 384)
        # Processing the call arguments (line 384)
        # Getting the type of 'self' (line 384)
        self_320816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 20), 'self', False)
        str_320817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 26), 'str', '_')
        # Getting the type of 'attr' (line 384)
        attr_320818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 32), 'attr', False)
        # Applying the binary operator '+' (line 384)
        result_add_320819 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 26), '+', str_320817, attr_320818)
        
        
        # Call to getattr(...): (line 384)
        # Processing the call arguments (line 384)
        # Getting the type of 'tzobj' (line 384)
        tzobj_320821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 46), 'tzobj', False)
        # Getting the type of 'attr' (line 384)
        attr_320822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 53), 'attr', False)
        # Processing the call keyword arguments (line 384)
        kwargs_320823 = {}
        # Getting the type of 'getattr' (line 384)
        getattr_320820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 38), 'getattr', False)
        # Calling getattr(args, kwargs) (line 384)
        getattr_call_result_320824 = invoke(stypy.reporting.localization.Localization(__file__, 384, 38), getattr_320820, *[tzobj_320821, attr_320822], **kwargs_320823)
        
        # Processing the call keyword arguments (line 384)
        kwargs_320825 = {}
        # Getting the type of 'setattr' (line 384)
        setattr_320815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 384)
        setattr_call_result_320826 = invoke(stypy.reporting.localization.Localization(__file__, 384, 12), setattr_320815, *[self_320816, result_add_320819, getattr_call_result_320824], **kwargs_320825)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_set_tzdata(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_tzdata' in the type store
        # Getting the type of 'stypy_return_type' (line 380)
        stypy_return_type_320827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_320827)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_tzdata'
        return stypy_return_type_320827


    @norecursion
    def _read_tzfile(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_read_tzfile'
        module_type_store = module_type_store.open_function_context('_read_tzfile', 386, 4, False)
        # Assigning a type to the variable 'self' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile._read_tzfile.__dict__.__setitem__('stypy_localization', localization)
        tzfile._read_tzfile.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile._read_tzfile.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile._read_tzfile.__dict__.__setitem__('stypy_function_name', 'tzfile._read_tzfile')
        tzfile._read_tzfile.__dict__.__setitem__('stypy_param_names_list', ['fileobj'])
        tzfile._read_tzfile.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile._read_tzfile.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile._read_tzfile.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile._read_tzfile.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile._read_tzfile.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile._read_tzfile.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile._read_tzfile', ['fileobj'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_read_tzfile', localization, ['fileobj'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_read_tzfile(...)' code ##################

        
        # Assigning a Call to a Name (line 387):
        
        # Assigning a Call to a Name (line 387):
        
        # Call to _tzfile(...): (line 387)
        # Processing the call keyword arguments (line 387)
        kwargs_320829 = {}
        # Getting the type of '_tzfile' (line 387)
        _tzfile_320828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 14), '_tzfile', False)
        # Calling _tzfile(args, kwargs) (line 387)
        _tzfile_call_result_320830 = invoke(stypy.reporting.localization.Localization(__file__, 387, 14), _tzfile_320828, *[], **kwargs_320829)
        
        # Assigning a type to the variable 'out' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 8), 'out', _tzfile_call_result_320830)
        
        
        
        # Call to decode(...): (line 398)
        # Processing the call keyword arguments (line 398)
        kwargs_320837 = {}
        
        # Call to read(...): (line 398)
        # Processing the call arguments (line 398)
        int_320833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 24), 'int')
        # Processing the call keyword arguments (line 398)
        kwargs_320834 = {}
        # Getting the type of 'fileobj' (line 398)
        fileobj_320831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 11), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 398)
        read_320832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 11), fileobj_320831, 'read')
        # Calling read(args, kwargs) (line 398)
        read_call_result_320835 = invoke(stypy.reporting.localization.Localization(__file__, 398, 11), read_320832, *[int_320833], **kwargs_320834)
        
        # Obtaining the member 'decode' of a type (line 398)
        decode_320836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 11), read_call_result_320835, 'decode')
        # Calling decode(args, kwargs) (line 398)
        decode_call_result_320838 = invoke(stypy.reporting.localization.Localization(__file__, 398, 11), decode_320836, *[], **kwargs_320837)
        
        str_320839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 39), 'str', 'TZif')
        # Applying the binary operator '!=' (line 398)
        result_ne_320840 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 11), '!=', decode_call_result_320838, str_320839)
        
        # Testing the type of an if condition (line 398)
        if_condition_320841 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 398, 8), result_ne_320840)
        # Assigning a type to the variable 'if_condition_320841' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 8), 'if_condition_320841', if_condition_320841)
        # SSA begins for if statement (line 398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 399)
        # Processing the call arguments (line 399)
        str_320843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 29), 'str', 'magic not found')
        # Processing the call keyword arguments (line 399)
        kwargs_320844 = {}
        # Getting the type of 'ValueError' (line 399)
        ValueError_320842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 399)
        ValueError_call_result_320845 = invoke(stypy.reporting.localization.Localization(__file__, 399, 18), ValueError_320842, *[str_320843], **kwargs_320844)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 399, 12), ValueError_call_result_320845, 'raise parameter', BaseException)
        # SSA join for if statement (line 398)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to read(...): (line 401)
        # Processing the call arguments (line 401)
        int_320848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 21), 'int')
        # Processing the call keyword arguments (line 401)
        kwargs_320849 = {}
        # Getting the type of 'fileobj' (line 401)
        fileobj_320846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 8), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 401)
        read_320847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 8), fileobj_320846, 'read')
        # Calling read(args, kwargs) (line 401)
        read_call_result_320850 = invoke(stypy.reporting.localization.Localization(__file__, 401, 8), read_320847, *[int_320848], **kwargs_320849)
        
        
        # Assigning a Call to a Tuple (line 403):
        
        # Assigning a Call to a Name:
        
        # Call to unpack(...): (line 426)
        # Processing the call arguments (line 426)
        str_320853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 26), 'str', '>6l')
        
        # Call to read(...): (line 426)
        # Processing the call arguments (line 426)
        int_320856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 46), 'int')
        # Processing the call keyword arguments (line 426)
        kwargs_320857 = {}
        # Getting the type of 'fileobj' (line 426)
        fileobj_320854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 33), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 426)
        read_320855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 33), fileobj_320854, 'read')
        # Calling read(args, kwargs) (line 426)
        read_call_result_320858 = invoke(stypy.reporting.localization.Localization(__file__, 426, 33), read_320855, *[int_320856], **kwargs_320857)
        
        # Processing the call keyword arguments (line 426)
        kwargs_320859 = {}
        # Getting the type of 'struct' (line 426)
        struct_320851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 12), 'struct', False)
        # Obtaining the member 'unpack' of a type (line 426)
        unpack_320852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 12), struct_320851, 'unpack')
        # Calling unpack(args, kwargs) (line 426)
        unpack_call_result_320860 = invoke(stypy.reporting.localization.Localization(__file__, 426, 12), unpack_320852, *[str_320853, read_call_result_320858], **kwargs_320859)
        
        # Assigning a type to the variable 'call_assignment_320195' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320195', unpack_call_result_320860)
        
        # Assigning a Call to a Name (line 403):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_320863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 8), 'int')
        # Processing the call keyword arguments
        kwargs_320864 = {}
        # Getting the type of 'call_assignment_320195' (line 403)
        call_assignment_320195_320861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320195', False)
        # Obtaining the member '__getitem__' of a type (line 403)
        getitem___320862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), call_assignment_320195_320861, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_320865 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___320862, *[int_320863], **kwargs_320864)
        
        # Assigning a type to the variable 'call_assignment_320196' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320196', getitem___call_result_320865)
        
        # Assigning a Name to a Name (line 403):
        # Getting the type of 'call_assignment_320196' (line 403)
        call_assignment_320196_320866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320196')
        # Assigning a type to the variable 'ttisgmtcnt' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 12), 'ttisgmtcnt', call_assignment_320196_320866)
        
        # Assigning a Call to a Name (line 403):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_320869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 8), 'int')
        # Processing the call keyword arguments
        kwargs_320870 = {}
        # Getting the type of 'call_assignment_320195' (line 403)
        call_assignment_320195_320867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320195', False)
        # Obtaining the member '__getitem__' of a type (line 403)
        getitem___320868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), call_assignment_320195_320867, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_320871 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___320868, *[int_320869], **kwargs_320870)
        
        # Assigning a type to the variable 'call_assignment_320197' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320197', getitem___call_result_320871)
        
        # Assigning a Name to a Name (line 403):
        # Getting the type of 'call_assignment_320197' (line 403)
        call_assignment_320197_320872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320197')
        # Assigning a type to the variable 'ttisstdcnt' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 12), 'ttisstdcnt', call_assignment_320197_320872)
        
        # Assigning a Call to a Name (line 403):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_320875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 8), 'int')
        # Processing the call keyword arguments
        kwargs_320876 = {}
        # Getting the type of 'call_assignment_320195' (line 403)
        call_assignment_320195_320873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320195', False)
        # Obtaining the member '__getitem__' of a type (line 403)
        getitem___320874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), call_assignment_320195_320873, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_320877 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___320874, *[int_320875], **kwargs_320876)
        
        # Assigning a type to the variable 'call_assignment_320198' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320198', getitem___call_result_320877)
        
        # Assigning a Name to a Name (line 403):
        # Getting the type of 'call_assignment_320198' (line 403)
        call_assignment_320198_320878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320198')
        # Assigning a type to the variable 'leapcnt' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 12), 'leapcnt', call_assignment_320198_320878)
        
        # Assigning a Call to a Name (line 403):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_320881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 8), 'int')
        # Processing the call keyword arguments
        kwargs_320882 = {}
        # Getting the type of 'call_assignment_320195' (line 403)
        call_assignment_320195_320879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320195', False)
        # Obtaining the member '__getitem__' of a type (line 403)
        getitem___320880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), call_assignment_320195_320879, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_320883 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___320880, *[int_320881], **kwargs_320882)
        
        # Assigning a type to the variable 'call_assignment_320199' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320199', getitem___call_result_320883)
        
        # Assigning a Name to a Name (line 403):
        # Getting the type of 'call_assignment_320199' (line 403)
        call_assignment_320199_320884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320199')
        # Assigning a type to the variable 'timecnt' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 12), 'timecnt', call_assignment_320199_320884)
        
        # Assigning a Call to a Name (line 403):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_320887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 8), 'int')
        # Processing the call keyword arguments
        kwargs_320888 = {}
        # Getting the type of 'call_assignment_320195' (line 403)
        call_assignment_320195_320885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320195', False)
        # Obtaining the member '__getitem__' of a type (line 403)
        getitem___320886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), call_assignment_320195_320885, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_320889 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___320886, *[int_320887], **kwargs_320888)
        
        # Assigning a type to the variable 'call_assignment_320200' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320200', getitem___call_result_320889)
        
        # Assigning a Name to a Name (line 403):
        # Getting the type of 'call_assignment_320200' (line 403)
        call_assignment_320200_320890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320200')
        # Assigning a type to the variable 'typecnt' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 12), 'typecnt', call_assignment_320200_320890)
        
        # Assigning a Call to a Name (line 403):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_320893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 8), 'int')
        # Processing the call keyword arguments
        kwargs_320894 = {}
        # Getting the type of 'call_assignment_320195' (line 403)
        call_assignment_320195_320891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320195', False)
        # Obtaining the member '__getitem__' of a type (line 403)
        getitem___320892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), call_assignment_320195_320891, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_320895 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___320892, *[int_320893], **kwargs_320894)
        
        # Assigning a type to the variable 'call_assignment_320201' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320201', getitem___call_result_320895)
        
        # Assigning a Name to a Name (line 403):
        # Getting the type of 'call_assignment_320201' (line 403)
        call_assignment_320201_320896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'call_assignment_320201')
        # Assigning a type to the variable 'charcnt' (line 424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 12), 'charcnt', call_assignment_320201_320896)
        
        # Getting the type of 'timecnt' (line 435)
        timecnt_320897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 11), 'timecnt')
        # Testing the type of an if condition (line 435)
        if_condition_320898 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 435, 8), timecnt_320897)
        # Assigning a type to the variable 'if_condition_320898' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'if_condition_320898', if_condition_320898)
        # SSA begins for if statement (line 435)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 436):
        
        # Assigning a Call to a Attribute (line 436):
        
        # Call to list(...): (line 436)
        # Processing the call arguments (line 436)
        
        # Call to unpack(...): (line 436)
        # Processing the call arguments (line 436)
        str_320902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 52), 'str', '>%dl')
        # Getting the type of 'timecnt' (line 436)
        timecnt_320903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 61), 'timecnt', False)
        # Applying the binary operator '%' (line 436)
        result_mod_320904 = python_operator(stypy.reporting.localization.Localization(__file__, 436, 52), '%', str_320902, timecnt_320903)
        
        
        # Call to read(...): (line 437)
        # Processing the call arguments (line 437)
        # Getting the type of 'timecnt' (line 437)
        timecnt_320907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 65), 'timecnt', False)
        int_320908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 73), 'int')
        # Applying the binary operator '*' (line 437)
        result_mul_320909 = python_operator(stypy.reporting.localization.Localization(__file__, 437, 65), '*', timecnt_320907, int_320908)
        
        # Processing the call keyword arguments (line 437)
        kwargs_320910 = {}
        # Getting the type of 'fileobj' (line 437)
        fileobj_320905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 52), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 437)
        read_320906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 52), fileobj_320905, 'read')
        # Calling read(args, kwargs) (line 437)
        read_call_result_320911 = invoke(stypy.reporting.localization.Localization(__file__, 437, 52), read_320906, *[result_mul_320909], **kwargs_320910)
        
        # Processing the call keyword arguments (line 436)
        kwargs_320912 = {}
        # Getting the type of 'struct' (line 436)
        struct_320900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 38), 'struct', False)
        # Obtaining the member 'unpack' of a type (line 436)
        unpack_320901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 38), struct_320900, 'unpack')
        # Calling unpack(args, kwargs) (line 436)
        unpack_call_result_320913 = invoke(stypy.reporting.localization.Localization(__file__, 436, 38), unpack_320901, *[result_mod_320904, read_call_result_320911], **kwargs_320912)
        
        # Processing the call keyword arguments (line 436)
        kwargs_320914 = {}
        # Getting the type of 'list' (line 436)
        list_320899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 33), 'list', False)
        # Calling list(args, kwargs) (line 436)
        list_call_result_320915 = invoke(stypy.reporting.localization.Localization(__file__, 436, 33), list_320899, *[unpack_call_result_320913], **kwargs_320914)
        
        # Getting the type of 'out' (line 436)
        out_320916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 12), 'out')
        # Setting the type of the member 'trans_list_utc' of a type (line 436)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 12), out_320916, 'trans_list_utc', list_call_result_320915)
        # SSA branch for the else part of an if statement (line 435)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Attribute (line 439):
        
        # Assigning a List to a Attribute (line 439):
        
        # Obtaining an instance of the builtin type 'list' (line 439)
        list_320917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 439)
        
        # Getting the type of 'out' (line 439)
        out_320918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 12), 'out')
        # Setting the type of the member 'trans_list_utc' of a type (line 439)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 12), out_320918, 'trans_list_utc', list_320917)
        # SSA join for if statement (line 435)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'timecnt' (line 448)
        timecnt_320919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 11), 'timecnt')
        # Testing the type of an if condition (line 448)
        if_condition_320920 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 448, 8), timecnt_320919)
        # Assigning a type to the variable 'if_condition_320920' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'if_condition_320920', if_condition_320920)
        # SSA begins for if statement (line 448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 449):
        
        # Assigning a Call to a Attribute (line 449):
        
        # Call to unpack(...): (line 449)
        # Processing the call arguments (line 449)
        str_320923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 42), 'str', '>%dB')
        # Getting the type of 'timecnt' (line 449)
        timecnt_320924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 51), 'timecnt', False)
        # Applying the binary operator '%' (line 449)
        result_mod_320925 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 42), '%', str_320923, timecnt_320924)
        
        
        # Call to read(...): (line 450)
        # Processing the call arguments (line 450)
        # Getting the type of 'timecnt' (line 450)
        timecnt_320928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 57), 'timecnt', False)
        # Processing the call keyword arguments (line 450)
        kwargs_320929 = {}
        # Getting the type of 'fileobj' (line 450)
        fileobj_320926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 44), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 450)
        read_320927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 44), fileobj_320926, 'read')
        # Calling read(args, kwargs) (line 450)
        read_call_result_320930 = invoke(stypy.reporting.localization.Localization(__file__, 450, 44), read_320927, *[timecnt_320928], **kwargs_320929)
        
        # Processing the call keyword arguments (line 449)
        kwargs_320931 = {}
        # Getting the type of 'struct' (line 449)
        struct_320921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 28), 'struct', False)
        # Obtaining the member 'unpack' of a type (line 449)
        unpack_320922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 28), struct_320921, 'unpack')
        # Calling unpack(args, kwargs) (line 449)
        unpack_call_result_320932 = invoke(stypy.reporting.localization.Localization(__file__, 449, 28), unpack_320922, *[result_mod_320925, read_call_result_320930], **kwargs_320931)
        
        # Getting the type of 'out' (line 449)
        out_320933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 12), 'out')
        # Setting the type of the member 'trans_idx' of a type (line 449)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 12), out_320933, 'trans_idx', unpack_call_result_320932)
        # SSA branch for the else part of an if statement (line 448)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Attribute (line 452):
        
        # Assigning a List to a Attribute (line 452):
        
        # Obtaining an instance of the builtin type 'list' (line 452)
        list_320934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 452)
        
        # Getting the type of 'out' (line 452)
        out_320935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 12), 'out')
        # Setting the type of the member 'trans_idx' of a type (line 452)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 12), out_320935, 'trans_idx', list_320934)
        # SSA join for if statement (line 448)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 465):
        
        # Assigning a List to a Name (line 465):
        
        # Obtaining an instance of the builtin type 'list' (line 465)
        list_320936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 465)
        
        # Assigning a type to the variable 'ttinfo' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 8), 'ttinfo', list_320936)
        
        
        # Call to range(...): (line 467)
        # Processing the call arguments (line 467)
        # Getting the type of 'typecnt' (line 467)
        typecnt_320938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 23), 'typecnt', False)
        # Processing the call keyword arguments (line 467)
        kwargs_320939 = {}
        # Getting the type of 'range' (line 467)
        range_320937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 17), 'range', False)
        # Calling range(args, kwargs) (line 467)
        range_call_result_320940 = invoke(stypy.reporting.localization.Localization(__file__, 467, 17), range_320937, *[typecnt_320938], **kwargs_320939)
        
        # Testing the type of a for loop iterable (line 467)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 467, 8), range_call_result_320940)
        # Getting the type of the for loop variable (line 467)
        for_loop_var_320941 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 467, 8), range_call_result_320940)
        # Assigning a type to the variable 'i' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'i', for_loop_var_320941)
        # SSA begins for a for statement (line 467)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 468)
        # Processing the call arguments (line 468)
        
        # Call to unpack(...): (line 468)
        # Processing the call arguments (line 468)
        str_320946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 40), 'str', '>lbb')
        
        # Call to read(...): (line 468)
        # Processing the call arguments (line 468)
        int_320949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 61), 'int')
        # Processing the call keyword arguments (line 468)
        kwargs_320950 = {}
        # Getting the type of 'fileobj' (line 468)
        fileobj_320947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 48), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 468)
        read_320948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 48), fileobj_320947, 'read')
        # Calling read(args, kwargs) (line 468)
        read_call_result_320951 = invoke(stypy.reporting.localization.Localization(__file__, 468, 48), read_320948, *[int_320949], **kwargs_320950)
        
        # Processing the call keyword arguments (line 468)
        kwargs_320952 = {}
        # Getting the type of 'struct' (line 468)
        struct_320944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 26), 'struct', False)
        # Obtaining the member 'unpack' of a type (line 468)
        unpack_320945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 26), struct_320944, 'unpack')
        # Calling unpack(args, kwargs) (line 468)
        unpack_call_result_320953 = invoke(stypy.reporting.localization.Localization(__file__, 468, 26), unpack_320945, *[str_320946, read_call_result_320951], **kwargs_320952)
        
        # Processing the call keyword arguments (line 468)
        kwargs_320954 = {}
        # Getting the type of 'ttinfo' (line 468)
        ttinfo_320942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 12), 'ttinfo', False)
        # Obtaining the member 'append' of a type (line 468)
        append_320943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 12), ttinfo_320942, 'append')
        # Calling append(args, kwargs) (line 468)
        append_call_result_320955 = invoke(stypy.reporting.localization.Localization(__file__, 468, 12), append_320943, *[unpack_call_result_320953], **kwargs_320954)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 470):
        
        # Assigning a Call to a Name (line 470):
        
        # Call to decode(...): (line 470)
        # Processing the call keyword arguments (line 470)
        kwargs_320962 = {}
        
        # Call to read(...): (line 470)
        # Processing the call arguments (line 470)
        # Getting the type of 'charcnt' (line 470)
        charcnt_320958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 28), 'charcnt', False)
        # Processing the call keyword arguments (line 470)
        kwargs_320959 = {}
        # Getting the type of 'fileobj' (line 470)
        fileobj_320956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 15), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 470)
        read_320957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 15), fileobj_320956, 'read')
        # Calling read(args, kwargs) (line 470)
        read_call_result_320960 = invoke(stypy.reporting.localization.Localization(__file__, 470, 15), read_320957, *[charcnt_320958], **kwargs_320959)
        
        # Obtaining the member 'decode' of a type (line 470)
        decode_320961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 15), read_call_result_320960, 'decode')
        # Calling decode(args, kwargs) (line 470)
        decode_call_result_320963 = invoke(stypy.reporting.localization.Localization(__file__, 470, 15), decode_320961, *[], **kwargs_320962)
        
        # Assigning a type to the variable 'abbr' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'abbr', decode_call_result_320963)
        
        # Getting the type of 'leapcnt' (line 482)
        leapcnt_320964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 11), 'leapcnt')
        # Testing the type of an if condition (line 482)
        if_condition_320965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 482, 8), leapcnt_320964)
        # Assigning a type to the variable 'if_condition_320965' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'if_condition_320965', if_condition_320965)
        # SSA begins for if statement (line 482)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to seek(...): (line 483)
        # Processing the call arguments (line 483)
        # Getting the type of 'leapcnt' (line 483)
        leapcnt_320968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 25), 'leapcnt', False)
        int_320969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 35), 'int')
        # Applying the binary operator '*' (line 483)
        result_mul_320970 = python_operator(stypy.reporting.localization.Localization(__file__, 483, 25), '*', leapcnt_320968, int_320969)
        
        # Getting the type of 'os' (line 483)
        os_320971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 38), 'os', False)
        # Obtaining the member 'SEEK_CUR' of a type (line 483)
        SEEK_CUR_320972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 38), os_320971, 'SEEK_CUR')
        # Processing the call keyword arguments (line 483)
        kwargs_320973 = {}
        # Getting the type of 'fileobj' (line 483)
        fileobj_320966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 12), 'fileobj', False)
        # Obtaining the member 'seek' of a type (line 483)
        seek_320967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 12), fileobj_320966, 'seek')
        # Calling seek(args, kwargs) (line 483)
        seek_call_result_320974 = invoke(stypy.reporting.localization.Localization(__file__, 483, 12), seek_320967, *[result_mul_320970, SEEK_CUR_320972], **kwargs_320973)
        
        # SSA join for if statement (line 482)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'ttisstdcnt' (line 493)
        ttisstdcnt_320975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 11), 'ttisstdcnt')
        # Testing the type of an if condition (line 493)
        if_condition_320976 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 493, 8), ttisstdcnt_320975)
        # Assigning a type to the variable 'if_condition_320976' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'if_condition_320976', if_condition_320976)
        # SSA begins for if statement (line 493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 494):
        
        # Assigning a Call to a Name (line 494):
        
        # Call to unpack(...): (line 494)
        # Processing the call arguments (line 494)
        str_320979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 34), 'str', '>%db')
        # Getting the type of 'ttisstdcnt' (line 494)
        ttisstdcnt_320980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 43), 'ttisstdcnt', False)
        # Applying the binary operator '%' (line 494)
        result_mod_320981 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 34), '%', str_320979, ttisstdcnt_320980)
        
        
        # Call to read(...): (line 495)
        # Processing the call arguments (line 495)
        # Getting the type of 'ttisstdcnt' (line 495)
        ttisstdcnt_320984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 47), 'ttisstdcnt', False)
        # Processing the call keyword arguments (line 495)
        kwargs_320985 = {}
        # Getting the type of 'fileobj' (line 495)
        fileobj_320982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 34), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 495)
        read_320983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 34), fileobj_320982, 'read')
        # Calling read(args, kwargs) (line 495)
        read_call_result_320986 = invoke(stypy.reporting.localization.Localization(__file__, 495, 34), read_320983, *[ttisstdcnt_320984], **kwargs_320985)
        
        # Processing the call keyword arguments (line 494)
        kwargs_320987 = {}
        # Getting the type of 'struct' (line 494)
        struct_320977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 20), 'struct', False)
        # Obtaining the member 'unpack' of a type (line 494)
        unpack_320978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 20), struct_320977, 'unpack')
        # Calling unpack(args, kwargs) (line 494)
        unpack_call_result_320988 = invoke(stypy.reporting.localization.Localization(__file__, 494, 20), unpack_320978, *[result_mod_320981, read_call_result_320986], **kwargs_320987)
        
        # Assigning a type to the variable 'isstd' (line 494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 12), 'isstd', unpack_call_result_320988)
        # SSA join for if statement (line 493)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'ttisgmtcnt' (line 505)
        ttisgmtcnt_320989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 11), 'ttisgmtcnt')
        # Testing the type of an if condition (line 505)
        if_condition_320990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 505, 8), ttisgmtcnt_320989)
        # Assigning a type to the variable 'if_condition_320990' (line 505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'if_condition_320990', if_condition_320990)
        # SSA begins for if statement (line 505)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 506):
        
        # Assigning a Call to a Name (line 506):
        
        # Call to unpack(...): (line 506)
        # Processing the call arguments (line 506)
        str_320993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 34), 'str', '>%db')
        # Getting the type of 'ttisgmtcnt' (line 506)
        ttisgmtcnt_320994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 43), 'ttisgmtcnt', False)
        # Applying the binary operator '%' (line 506)
        result_mod_320995 = python_operator(stypy.reporting.localization.Localization(__file__, 506, 34), '%', str_320993, ttisgmtcnt_320994)
        
        
        # Call to read(...): (line 507)
        # Processing the call arguments (line 507)
        # Getting the type of 'ttisgmtcnt' (line 507)
        ttisgmtcnt_320998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 47), 'ttisgmtcnt', False)
        # Processing the call keyword arguments (line 507)
        kwargs_320999 = {}
        # Getting the type of 'fileobj' (line 507)
        fileobj_320996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 34), 'fileobj', False)
        # Obtaining the member 'read' of a type (line 507)
        read_320997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 34), fileobj_320996, 'read')
        # Calling read(args, kwargs) (line 507)
        read_call_result_321000 = invoke(stypy.reporting.localization.Localization(__file__, 507, 34), read_320997, *[ttisgmtcnt_320998], **kwargs_320999)
        
        # Processing the call keyword arguments (line 506)
        kwargs_321001 = {}
        # Getting the type of 'struct' (line 506)
        struct_320991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 20), 'struct', False)
        # Obtaining the member 'unpack' of a type (line 506)
        unpack_320992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 20), struct_320991, 'unpack')
        # Calling unpack(args, kwargs) (line 506)
        unpack_call_result_321002 = invoke(stypy.reporting.localization.Localization(__file__, 506, 20), unpack_320992, *[result_mod_320995, read_call_result_321000], **kwargs_321001)
        
        # Assigning a type to the variable 'isgmt' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 12), 'isgmt', unpack_call_result_321002)
        # SSA join for if statement (line 505)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 510):
        
        # Assigning a List to a Attribute (line 510):
        
        # Obtaining an instance of the builtin type 'list' (line 510)
        list_321003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 510)
        
        # Getting the type of 'out' (line 510)
        out_321004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 8), 'out')
        # Setting the type of the member 'ttinfo_list' of a type (line 510)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 8), out_321004, 'ttinfo_list', list_321003)
        
        
        # Call to range(...): (line 511)
        # Processing the call arguments (line 511)
        # Getting the type of 'typecnt' (line 511)
        typecnt_321006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 23), 'typecnt', False)
        # Processing the call keyword arguments (line 511)
        kwargs_321007 = {}
        # Getting the type of 'range' (line 511)
        range_321005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 17), 'range', False)
        # Calling range(args, kwargs) (line 511)
        range_call_result_321008 = invoke(stypy.reporting.localization.Localization(__file__, 511, 17), range_321005, *[typecnt_321006], **kwargs_321007)
        
        # Testing the type of a for loop iterable (line 511)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 511, 8), range_call_result_321008)
        # Getting the type of the for loop variable (line 511)
        for_loop_var_321009 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 511, 8), range_call_result_321008)
        # Assigning a type to the variable 'i' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'i', for_loop_var_321009)
        # SSA begins for a for statement (line 511)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Tuple (line 512):
        
        # Assigning a Subscript to a Name (line 512):
        
        # Obtaining the type of the subscript
        int_321010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 512)
        i_321011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 44), 'i')
        # Getting the type of 'ttinfo' (line 512)
        ttinfo_321012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 37), 'ttinfo')
        # Obtaining the member '__getitem__' of a type (line 512)
        getitem___321013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 37), ttinfo_321012, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 512)
        subscript_call_result_321014 = invoke(stypy.reporting.localization.Localization(__file__, 512, 37), getitem___321013, i_321011)
        
        # Obtaining the member '__getitem__' of a type (line 512)
        getitem___321015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 12), subscript_call_result_321014, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 512)
        subscript_call_result_321016 = invoke(stypy.reporting.localization.Localization(__file__, 512, 12), getitem___321015, int_321010)
        
        # Assigning a type to the variable 'tuple_var_assignment_320202' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'tuple_var_assignment_320202', subscript_call_result_321016)
        
        # Assigning a Subscript to a Name (line 512):
        
        # Obtaining the type of the subscript
        int_321017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 512)
        i_321018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 44), 'i')
        # Getting the type of 'ttinfo' (line 512)
        ttinfo_321019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 37), 'ttinfo')
        # Obtaining the member '__getitem__' of a type (line 512)
        getitem___321020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 37), ttinfo_321019, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 512)
        subscript_call_result_321021 = invoke(stypy.reporting.localization.Localization(__file__, 512, 37), getitem___321020, i_321018)
        
        # Obtaining the member '__getitem__' of a type (line 512)
        getitem___321022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 12), subscript_call_result_321021, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 512)
        subscript_call_result_321023 = invoke(stypy.reporting.localization.Localization(__file__, 512, 12), getitem___321022, int_321017)
        
        # Assigning a type to the variable 'tuple_var_assignment_320203' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'tuple_var_assignment_320203', subscript_call_result_321023)
        
        # Assigning a Subscript to a Name (line 512):
        
        # Obtaining the type of the subscript
        int_321024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 512)
        i_321025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 44), 'i')
        # Getting the type of 'ttinfo' (line 512)
        ttinfo_321026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 37), 'ttinfo')
        # Obtaining the member '__getitem__' of a type (line 512)
        getitem___321027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 37), ttinfo_321026, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 512)
        subscript_call_result_321028 = invoke(stypy.reporting.localization.Localization(__file__, 512, 37), getitem___321027, i_321025)
        
        # Obtaining the member '__getitem__' of a type (line 512)
        getitem___321029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 12), subscript_call_result_321028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 512)
        subscript_call_result_321030 = invoke(stypy.reporting.localization.Localization(__file__, 512, 12), getitem___321029, int_321024)
        
        # Assigning a type to the variable 'tuple_var_assignment_320204' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'tuple_var_assignment_320204', subscript_call_result_321030)
        
        # Assigning a Name to a Name (line 512):
        # Getting the type of 'tuple_var_assignment_320202' (line 512)
        tuple_var_assignment_320202_321031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'tuple_var_assignment_320202')
        # Assigning a type to the variable 'gmtoff' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'gmtoff', tuple_var_assignment_320202_321031)
        
        # Assigning a Name to a Name (line 512):
        # Getting the type of 'tuple_var_assignment_320203' (line 512)
        tuple_var_assignment_320203_321032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'tuple_var_assignment_320203')
        # Assigning a type to the variable 'isdst' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 20), 'isdst', tuple_var_assignment_320203_321032)
        
        # Assigning a Name to a Name (line 512):
        # Getting the type of 'tuple_var_assignment_320204' (line 512)
        tuple_var_assignment_320204_321033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'tuple_var_assignment_320204')
        # Assigning a type to the variable 'abbrind' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 27), 'abbrind', tuple_var_assignment_320204_321033)
        
        # Assigning a BinOp to a Name (line 516):
        
        # Assigning a BinOp to a Name (line 516):
        int_321034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 21), 'int')
        # Getting the type of 'gmtoff' (line 516)
        gmtoff_321035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 28), 'gmtoff')
        int_321036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 37), 'int')
        # Applying the binary operator '+' (line 516)
        result_add_321037 = python_operator(stypy.reporting.localization.Localization(__file__, 516, 28), '+', gmtoff_321035, int_321036)
        
        int_321038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 44), 'int')
        # Applying the binary operator '//' (line 516)
        result_floordiv_321039 = python_operator(stypy.reporting.localization.Localization(__file__, 516, 27), '//', result_add_321037, int_321038)
        
        # Applying the binary operator '*' (line 516)
        result_mul_321040 = python_operator(stypy.reporting.localization.Localization(__file__, 516, 21), '*', int_321034, result_floordiv_321039)
        
        # Assigning a type to the variable 'gmtoff' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'gmtoff', result_mul_321040)
        
        # Assigning a Call to a Name (line 517):
        
        # Assigning a Call to a Name (line 517):
        
        # Call to _ttinfo(...): (line 517)
        # Processing the call keyword arguments (line 517)
        kwargs_321042 = {}
        # Getting the type of '_ttinfo' (line 517)
        _ttinfo_321041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 18), '_ttinfo', False)
        # Calling _ttinfo(args, kwargs) (line 517)
        _ttinfo_call_result_321043 = invoke(stypy.reporting.localization.Localization(__file__, 517, 18), _ttinfo_321041, *[], **kwargs_321042)
        
        # Assigning a type to the variable 'tti' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 12), 'tti', _ttinfo_call_result_321043)
        
        # Assigning a Name to a Attribute (line 518):
        
        # Assigning a Name to a Attribute (line 518):
        # Getting the type of 'gmtoff' (line 518)
        gmtoff_321044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 25), 'gmtoff')
        # Getting the type of 'tti' (line 518)
        tti_321045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 12), 'tti')
        # Setting the type of the member 'offset' of a type (line 518)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 12), tti_321045, 'offset', gmtoff_321044)
        
        # Assigning a Call to a Attribute (line 519):
        
        # Assigning a Call to a Attribute (line 519):
        
        # Call to timedelta(...): (line 519)
        # Processing the call arguments (line 519)
        int_321048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 47), 'int')
        # Processing the call keyword arguments (line 519)
        kwargs_321049 = {}
        # Getting the type of 'datetime' (line 519)
        datetime_321046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 28), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 519)
        timedelta_321047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 28), datetime_321046, 'timedelta')
        # Calling timedelta(args, kwargs) (line 519)
        timedelta_call_result_321050 = invoke(stypy.reporting.localization.Localization(__file__, 519, 28), timedelta_321047, *[int_321048], **kwargs_321049)
        
        # Getting the type of 'tti' (line 519)
        tti_321051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'tti')
        # Setting the type of the member 'dstoffset' of a type (line 519)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 12), tti_321051, 'dstoffset', timedelta_call_result_321050)
        
        # Assigning a Call to a Attribute (line 520):
        
        # Assigning a Call to a Attribute (line 520):
        
        # Call to timedelta(...): (line 520)
        # Processing the call keyword arguments (line 520)
        # Getting the type of 'gmtoff' (line 520)
        gmtoff_321054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 51), 'gmtoff', False)
        keyword_321055 = gmtoff_321054
        kwargs_321056 = {'seconds': keyword_321055}
        # Getting the type of 'datetime' (line 520)
        datetime_321052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 24), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 520)
        timedelta_321053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 24), datetime_321052, 'timedelta')
        # Calling timedelta(args, kwargs) (line 520)
        timedelta_call_result_321057 = invoke(stypy.reporting.localization.Localization(__file__, 520, 24), timedelta_321053, *[], **kwargs_321056)
        
        # Getting the type of 'tti' (line 520)
        tti_321058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 12), 'tti')
        # Setting the type of the member 'delta' of a type (line 520)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 12), tti_321058, 'delta', timedelta_call_result_321057)
        
        # Assigning a Name to a Attribute (line 521):
        
        # Assigning a Name to a Attribute (line 521):
        # Getting the type of 'isdst' (line 521)
        isdst_321059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 24), 'isdst')
        # Getting the type of 'tti' (line 521)
        tti_321060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 12), 'tti')
        # Setting the type of the member 'isdst' of a type (line 521)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 12), tti_321060, 'isdst', isdst_321059)
        
        # Assigning a Subscript to a Attribute (line 522):
        
        # Assigning a Subscript to a Attribute (line 522):
        
        # Obtaining the type of the subscript
        # Getting the type of 'abbrind' (line 522)
        abbrind_321061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 28), 'abbrind')
        
        # Call to find(...): (line 522)
        # Processing the call arguments (line 522)
        str_321064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 46), 'str', '\x00')
        # Getting the type of 'abbrind' (line 522)
        abbrind_321065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 54), 'abbrind', False)
        # Processing the call keyword arguments (line 522)
        kwargs_321066 = {}
        # Getting the type of 'abbr' (line 522)
        abbr_321062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 36), 'abbr', False)
        # Obtaining the member 'find' of a type (line 522)
        find_321063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 36), abbr_321062, 'find')
        # Calling find(args, kwargs) (line 522)
        find_call_result_321067 = invoke(stypy.reporting.localization.Localization(__file__, 522, 36), find_321063, *[str_321064, abbrind_321065], **kwargs_321066)
        
        slice_321068 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 522, 23), abbrind_321061, find_call_result_321067, None)
        # Getting the type of 'abbr' (line 522)
        abbr_321069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 23), 'abbr')
        # Obtaining the member '__getitem__' of a type (line 522)
        getitem___321070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 23), abbr_321069, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 522)
        subscript_call_result_321071 = invoke(stypy.reporting.localization.Localization(__file__, 522, 23), getitem___321070, slice_321068)
        
        # Getting the type of 'tti' (line 522)
        tti_321072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 12), 'tti')
        # Setting the type of the member 'abbr' of a type (line 522)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 12), tti_321072, 'abbr', subscript_call_result_321071)
        
        # Assigning a BoolOp to a Attribute (line 523):
        
        # Assigning a BoolOp to a Attribute (line 523):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ttisstdcnt' (line 523)
        ttisstdcnt_321073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 25), 'ttisstdcnt')
        # Getting the type of 'i' (line 523)
        i_321074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 38), 'i')
        # Applying the binary operator '>' (line 523)
        result_gt_321075 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 25), '>', ttisstdcnt_321073, i_321074)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 523)
        i_321076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 50), 'i')
        # Getting the type of 'isstd' (line 523)
        isstd_321077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 44), 'isstd')
        # Obtaining the member '__getitem__' of a type (line 523)
        getitem___321078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 44), isstd_321077, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 523)
        subscript_call_result_321079 = invoke(stypy.reporting.localization.Localization(__file__, 523, 44), getitem___321078, i_321076)
        
        int_321080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 56), 'int')
        # Applying the binary operator '!=' (line 523)
        result_ne_321081 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 44), '!=', subscript_call_result_321079, int_321080)
        
        # Applying the binary operator 'and' (line 523)
        result_and_keyword_321082 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 25), 'and', result_gt_321075, result_ne_321081)
        
        # Getting the type of 'tti' (line 523)
        tti_321083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 12), 'tti')
        # Setting the type of the member 'isstd' of a type (line 523)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 12), tti_321083, 'isstd', result_and_keyword_321082)
        
        # Assigning a BoolOp to a Attribute (line 524):
        
        # Assigning a BoolOp to a Attribute (line 524):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ttisgmtcnt' (line 524)
        ttisgmtcnt_321084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 25), 'ttisgmtcnt')
        # Getting the type of 'i' (line 524)
        i_321085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 38), 'i')
        # Applying the binary operator '>' (line 524)
        result_gt_321086 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 25), '>', ttisgmtcnt_321084, i_321085)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 524)
        i_321087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 50), 'i')
        # Getting the type of 'isgmt' (line 524)
        isgmt_321088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 44), 'isgmt')
        # Obtaining the member '__getitem__' of a type (line 524)
        getitem___321089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 44), isgmt_321088, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 524)
        subscript_call_result_321090 = invoke(stypy.reporting.localization.Localization(__file__, 524, 44), getitem___321089, i_321087)
        
        int_321091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 56), 'int')
        # Applying the binary operator '!=' (line 524)
        result_ne_321092 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 44), '!=', subscript_call_result_321090, int_321091)
        
        # Applying the binary operator 'and' (line 524)
        result_and_keyword_321093 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 25), 'and', result_gt_321086, result_ne_321092)
        
        # Getting the type of 'tti' (line 524)
        tti_321094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'tti')
        # Setting the type of the member 'isgmt' of a type (line 524)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 12), tti_321094, 'isgmt', result_and_keyword_321093)
        
        # Call to append(...): (line 525)
        # Processing the call arguments (line 525)
        # Getting the type of 'tti' (line 525)
        tti_321098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 35), 'tti', False)
        # Processing the call keyword arguments (line 525)
        kwargs_321099 = {}
        # Getting the type of 'out' (line 525)
        out_321095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 12), 'out', False)
        # Obtaining the member 'ttinfo_list' of a type (line 525)
        ttinfo_list_321096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 12), out_321095, 'ttinfo_list')
        # Obtaining the member 'append' of a type (line 525)
        append_321097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 12), ttinfo_list_321096, 'append')
        # Calling append(args, kwargs) (line 525)
        append_call_result_321100 = invoke(stypy.reporting.localization.Localization(__file__, 525, 12), append_321097, *[tti_321098], **kwargs_321099)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Attribute (line 528):
        
        # Assigning a ListComp to a Attribute (line 528):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'out' (line 528)
        out_321106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 57), 'out')
        # Obtaining the member 'trans_idx' of a type (line 528)
        trans_idx_321107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 57), out_321106, 'trans_idx')
        comprehension_321108 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 25), trans_idx_321107)
        # Assigning a type to the variable 'idx' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 25), 'idx', comprehension_321108)
        
        # Obtaining the type of the subscript
        # Getting the type of 'idx' (line 528)
        idx_321101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 41), 'idx')
        # Getting the type of 'out' (line 528)
        out_321102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 25), 'out')
        # Obtaining the member 'ttinfo_list' of a type (line 528)
        ttinfo_list_321103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 25), out_321102, 'ttinfo_list')
        # Obtaining the member '__getitem__' of a type (line 528)
        getitem___321104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 25), ttinfo_list_321103, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 528)
        subscript_call_result_321105 = invoke(stypy.reporting.localization.Localization(__file__, 528, 25), getitem___321104, idx_321101)
        
        list_321109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 25), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 528, 25), list_321109, subscript_call_result_321105)
        # Getting the type of 'out' (line 528)
        out_321110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'out')
        # Setting the type of the member 'trans_idx' of a type (line 528)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), out_321110, 'trans_idx', list_321109)
        
        # Assigning a Name to a Attribute (line 534):
        
        # Assigning a Name to a Attribute (line 534):
        # Getting the type of 'None' (line 534)
        None_321111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 25), 'None')
        # Getting the type of 'out' (line 534)
        out_321112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'out')
        # Setting the type of the member 'ttinfo_std' of a type (line 534)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 8), out_321112, 'ttinfo_std', None_321111)
        
        # Assigning a Name to a Attribute (line 535):
        
        # Assigning a Name to a Attribute (line 535):
        # Getting the type of 'None' (line 535)
        None_321113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 25), 'None')
        # Getting the type of 'out' (line 535)
        out_321114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 8), 'out')
        # Setting the type of the member 'ttinfo_dst' of a type (line 535)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 8), out_321114, 'ttinfo_dst', None_321113)
        
        # Assigning a Name to a Attribute (line 536):
        
        # Assigning a Name to a Attribute (line 536):
        # Getting the type of 'None' (line 536)
        None_321115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 28), 'None')
        # Getting the type of 'out' (line 536)
        out_321116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 8), 'out')
        # Setting the type of the member 'ttinfo_before' of a type (line 536)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 536, 8), out_321116, 'ttinfo_before', None_321115)
        
        # Getting the type of 'out' (line 537)
        out_321117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 11), 'out')
        # Obtaining the member 'ttinfo_list' of a type (line 537)
        ttinfo_list_321118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 11), out_321117, 'ttinfo_list')
        # Testing the type of an if condition (line 537)
        if_condition_321119 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 537, 8), ttinfo_list_321118)
        # Assigning a type to the variable 'if_condition_321119' (line 537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 8), 'if_condition_321119', if_condition_321119)
        # SSA begins for if statement (line 537)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'out' (line 538)
        out_321120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 19), 'out')
        # Obtaining the member 'trans_list_utc' of a type (line 538)
        trans_list_utc_321121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 19), out_321120, 'trans_list_utc')
        # Applying the 'not' unary operator (line 538)
        result_not__321122 = python_operator(stypy.reporting.localization.Localization(__file__, 538, 15), 'not', trans_list_utc_321121)
        
        # Testing the type of an if condition (line 538)
        if_condition_321123 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 538, 12), result_not__321122)
        # Assigning a type to the variable 'if_condition_321123' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 12), 'if_condition_321123', if_condition_321123)
        # SSA begins for if statement (line 538)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Subscript to a Attribute (line 539):
        
        # Obtaining the type of the subscript
        int_321124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 539, 68), 'int')
        # Getting the type of 'out' (line 539)
        out_321125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 52), 'out')
        # Obtaining the member 'ttinfo_list' of a type (line 539)
        ttinfo_list_321126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 52), out_321125, 'ttinfo_list')
        # Obtaining the member '__getitem__' of a type (line 539)
        getitem___321127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 52), ttinfo_list_321126, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 539)
        subscript_call_result_321128 = invoke(stypy.reporting.localization.Localization(__file__, 539, 52), getitem___321127, int_321124)
        
        # Getting the type of 'out' (line 539)
        out_321129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 33), 'out')
        # Setting the type of the member 'ttinfo_first' of a type (line 539)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 33), out_321129, 'ttinfo_first', subscript_call_result_321128)
        
        # Assigning a Attribute to a Attribute (line 539):
        # Getting the type of 'out' (line 539)
        out_321130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 33), 'out')
        # Obtaining the member 'ttinfo_first' of a type (line 539)
        ttinfo_first_321131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 33), out_321130, 'ttinfo_first')
        # Getting the type of 'out' (line 539)
        out_321132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 16), 'out')
        # Setting the type of the member 'ttinfo_std' of a type (line 539)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 16), out_321132, 'ttinfo_std', ttinfo_first_321131)
        # SSA branch for the else part of an if statement (line 538)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to range(...): (line 541)
        # Processing the call arguments (line 541)
        # Getting the type of 'timecnt' (line 541)
        timecnt_321134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 31), 'timecnt', False)
        int_321135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 39), 'int')
        # Applying the binary operator '-' (line 541)
        result_sub_321136 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 31), '-', timecnt_321134, int_321135)
        
        int_321137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 42), 'int')
        int_321138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 46), 'int')
        # Processing the call keyword arguments (line 541)
        kwargs_321139 = {}
        # Getting the type of 'range' (line 541)
        range_321133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 25), 'range', False)
        # Calling range(args, kwargs) (line 541)
        range_call_result_321140 = invoke(stypy.reporting.localization.Localization(__file__, 541, 25), range_321133, *[result_sub_321136, int_321137, int_321138], **kwargs_321139)
        
        # Testing the type of a for loop iterable (line 541)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 541, 16), range_call_result_321140)
        # Getting the type of the for loop variable (line 541)
        for_loop_var_321141 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 541, 16), range_call_result_321140)
        # Assigning a type to the variable 'i' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 16), 'i', for_loop_var_321141)
        # SSA begins for a for statement (line 541)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 542):
        
        # Assigning a Subscript to a Name (line 542):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 542)
        i_321142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 40), 'i')
        # Getting the type of 'out' (line 542)
        out_321143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 26), 'out')
        # Obtaining the member 'trans_idx' of a type (line 542)
        trans_idx_321144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 26), out_321143, 'trans_idx')
        # Obtaining the member '__getitem__' of a type (line 542)
        getitem___321145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 26), trans_idx_321144, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 542)
        subscript_call_result_321146 = invoke(stypy.reporting.localization.Localization(__file__, 542, 26), getitem___321145, i_321142)
        
        # Assigning a type to the variable 'tti' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 20), 'tti', subscript_call_result_321146)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'out' (line 543)
        out_321147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 27), 'out')
        # Obtaining the member 'ttinfo_std' of a type (line 543)
        ttinfo_std_321148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 27), out_321147, 'ttinfo_std')
        # Applying the 'not' unary operator (line 543)
        result_not__321149 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 23), 'not', ttinfo_std_321148)
        
        
        # Getting the type of 'tti' (line 543)
        tti_321150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 50), 'tti')
        # Obtaining the member 'isdst' of a type (line 543)
        isdst_321151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 50), tti_321150, 'isdst')
        # Applying the 'not' unary operator (line 543)
        result_not__321152 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 46), 'not', isdst_321151)
        
        # Applying the binary operator 'and' (line 543)
        result_and_keyword_321153 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 23), 'and', result_not__321149, result_not__321152)
        
        # Testing the type of an if condition (line 543)
        if_condition_321154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 543, 20), result_and_keyword_321153)
        # Assigning a type to the variable 'if_condition_321154' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 20), 'if_condition_321154', if_condition_321154)
        # SSA begins for if statement (line 543)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 544):
        
        # Assigning a Name to a Attribute (line 544):
        # Getting the type of 'tti' (line 544)
        tti_321155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 41), 'tti')
        # Getting the type of 'out' (line 544)
        out_321156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 24), 'out')
        # Setting the type of the member 'ttinfo_std' of a type (line 544)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 24), out_321156, 'ttinfo_std', tti_321155)
        # SSA branch for the else part of an if statement (line 543)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'out' (line 545)
        out_321157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 29), 'out')
        # Obtaining the member 'ttinfo_dst' of a type (line 545)
        ttinfo_dst_321158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 29), out_321157, 'ttinfo_dst')
        # Applying the 'not' unary operator (line 545)
        result_not__321159 = python_operator(stypy.reporting.localization.Localization(__file__, 545, 25), 'not', ttinfo_dst_321158)
        
        # Getting the type of 'tti' (line 545)
        tti_321160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 48), 'tti')
        # Obtaining the member 'isdst' of a type (line 545)
        isdst_321161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 48), tti_321160, 'isdst')
        # Applying the binary operator 'and' (line 545)
        result_and_keyword_321162 = python_operator(stypy.reporting.localization.Localization(__file__, 545, 25), 'and', result_not__321159, isdst_321161)
        
        # Testing the type of an if condition (line 545)
        if_condition_321163 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 545, 25), result_and_keyword_321162)
        # Assigning a type to the variable 'if_condition_321163' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 25), 'if_condition_321163', if_condition_321163)
        # SSA begins for if statement (line 545)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 546):
        
        # Assigning a Name to a Attribute (line 546):
        # Getting the type of 'tti' (line 546)
        tti_321164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 41), 'tti')
        # Getting the type of 'out' (line 546)
        out_321165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 24), 'out')
        # Setting the type of the member 'ttinfo_dst' of a type (line 546)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 24), out_321165, 'ttinfo_dst', tti_321164)
        # SSA join for if statement (line 545)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 543)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'out' (line 548)
        out_321166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 23), 'out')
        # Obtaining the member 'ttinfo_std' of a type (line 548)
        ttinfo_std_321167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 23), out_321166, 'ttinfo_std')
        # Getting the type of 'out' (line 548)
        out_321168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 42), 'out')
        # Obtaining the member 'ttinfo_dst' of a type (line 548)
        ttinfo_dst_321169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 42), out_321168, 'ttinfo_dst')
        # Applying the binary operator 'and' (line 548)
        result_and_keyword_321170 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 23), 'and', ttinfo_std_321167, ttinfo_dst_321169)
        
        # Testing the type of an if condition (line 548)
        if_condition_321171 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 548, 20), result_and_keyword_321170)
        # Assigning a type to the variable 'if_condition_321171' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 20), 'if_condition_321171', if_condition_321171)
        # SSA begins for if statement (line 548)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 548)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 541)
        module_type_store.open_ssa_branch('for loop else')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'out' (line 551)
        out_321172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 23), 'out')
        # Obtaining the member 'ttinfo_dst' of a type (line 551)
        ttinfo_dst_321173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 23), out_321172, 'ttinfo_dst')
        
        # Getting the type of 'out' (line 551)
        out_321174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 46), 'out')
        # Obtaining the member 'ttinfo_std' of a type (line 551)
        ttinfo_std_321175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 46), out_321174, 'ttinfo_std')
        # Applying the 'not' unary operator (line 551)
        result_not__321176 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 42), 'not', ttinfo_std_321175)
        
        # Applying the binary operator 'and' (line 551)
        result_and_keyword_321177 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 23), 'and', ttinfo_dst_321173, result_not__321176)
        
        # Testing the type of an if condition (line 551)
        if_condition_321178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 551, 20), result_and_keyword_321177)
        # Assigning a type to the variable 'if_condition_321178' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 20), 'if_condition_321178', if_condition_321178)
        # SSA begins for if statement (line 551)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 552):
        
        # Assigning a Attribute to a Attribute (line 552):
        # Getting the type of 'out' (line 552)
        out_321179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 41), 'out')
        # Obtaining the member 'ttinfo_dst' of a type (line 552)
        ttinfo_dst_321180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 41), out_321179, 'ttinfo_dst')
        # Getting the type of 'out' (line 552)
        out_321181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 24), 'out')
        # Setting the type of the member 'ttinfo_std' of a type (line 552)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 24), out_321181, 'ttinfo_std', ttinfo_dst_321180)
        # SSA join for if statement (line 551)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'out' (line 554)
        out_321182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 27), 'out')
        # Obtaining the member 'ttinfo_list' of a type (line 554)
        ttinfo_list_321183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 27), out_321182, 'ttinfo_list')
        # Testing the type of a for loop iterable (line 554)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 554, 16), ttinfo_list_321183)
        # Getting the type of the for loop variable (line 554)
        for_loop_var_321184 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 554, 16), ttinfo_list_321183)
        # Assigning a type to the variable 'tti' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 16), 'tti', for_loop_var_321184)
        # SSA begins for a for statement (line 554)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'tti' (line 555)
        tti_321185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 27), 'tti')
        # Obtaining the member 'isdst' of a type (line 555)
        isdst_321186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 27), tti_321185, 'isdst')
        # Applying the 'not' unary operator (line 555)
        result_not__321187 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 23), 'not', isdst_321186)
        
        # Testing the type of an if condition (line 555)
        if_condition_321188 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 20), result_not__321187)
        # Assigning a type to the variable 'if_condition_321188' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 20), 'if_condition_321188', if_condition_321188)
        # SSA begins for if statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 556):
        
        # Assigning a Name to a Attribute (line 556):
        # Getting the type of 'tti' (line 556)
        tti_321189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 44), 'tti')
        # Getting the type of 'out' (line 556)
        out_321190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 24), 'out')
        # Setting the type of the member 'ttinfo_before' of a type (line 556)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 24), out_321190, 'ttinfo_before', tti_321189)
        # SSA join for if statement (line 555)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 554)
        module_type_store.open_ssa_branch('for loop else')
        
        # Assigning a Subscript to a Attribute (line 559):
        
        # Assigning a Subscript to a Attribute (line 559):
        
        # Obtaining the type of the subscript
        int_321191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 56), 'int')
        # Getting the type of 'out' (line 559)
        out_321192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 40), 'out')
        # Obtaining the member 'ttinfo_list' of a type (line 559)
        ttinfo_list_321193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 40), out_321192, 'ttinfo_list')
        # Obtaining the member '__getitem__' of a type (line 559)
        getitem___321194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 40), ttinfo_list_321193, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 559)
        subscript_call_result_321195 = invoke(stypy.reporting.localization.Localization(__file__, 559, 40), getitem___321194, int_321191)
        
        # Getting the type of 'out' (line 559)
        out_321196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 20), 'out')
        # Setting the type of the member 'ttinfo_before' of a type (line 559)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 20), out_321196, 'ttinfo_before', subscript_call_result_321195)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 538)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 537)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 568):
        
        # Assigning a Name to a Name (line 568):
        # Getting the type of 'None' (line 568)
        None_321197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 24), 'None')
        # Assigning a type to the variable 'laststdoffset' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'laststdoffset', None_321197)
        
        # Assigning a List to a Attribute (line 569):
        
        # Assigning a List to a Attribute (line 569):
        
        # Obtaining an instance of the builtin type 'list' (line 569)
        list_321198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 569)
        
        # Getting the type of 'out' (line 569)
        out_321199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 8), 'out')
        # Setting the type of the member 'trans_list' of a type (line 569)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 8), out_321199, 'trans_list', list_321198)
        
        
        # Call to enumerate(...): (line 570)
        # Processing the call arguments (line 570)
        # Getting the type of 'out' (line 570)
        out_321201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 32), 'out', False)
        # Obtaining the member 'trans_idx' of a type (line 570)
        trans_idx_321202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 32), out_321201, 'trans_idx')
        # Processing the call keyword arguments (line 570)
        kwargs_321203 = {}
        # Getting the type of 'enumerate' (line 570)
        enumerate_321200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 22), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 570)
        enumerate_call_result_321204 = invoke(stypy.reporting.localization.Localization(__file__, 570, 22), enumerate_321200, *[trans_idx_321202], **kwargs_321203)
        
        # Testing the type of a for loop iterable (line 570)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 570, 8), enumerate_call_result_321204)
        # Getting the type of the for loop variable (line 570)
        for_loop_var_321205 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 570, 8), enumerate_call_result_321204)
        # Assigning a type to the variable 'i' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 570, 8), for_loop_var_321205))
        # Assigning a type to the variable 'tti' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'tti', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 570, 8), for_loop_var_321205))
        # SSA begins for a for statement (line 570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'tti' (line 571)
        tti_321206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 19), 'tti')
        # Obtaining the member 'isdst' of a type (line 571)
        isdst_321207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 19), tti_321206, 'isdst')
        # Applying the 'not' unary operator (line 571)
        result_not__321208 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 15), 'not', isdst_321207)
        
        # Testing the type of an if condition (line 571)
        if_condition_321209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 571, 12), result_not__321208)
        # Assigning a type to the variable 'if_condition_321209' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 12), 'if_condition_321209', if_condition_321209)
        # SSA begins for if statement (line 571)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 572):
        
        # Assigning a Attribute to a Name (line 572):
        # Getting the type of 'tti' (line 572)
        tti_321210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 25), 'tti')
        # Obtaining the member 'offset' of a type (line 572)
        offset_321211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 25), tti_321210, 'offset')
        # Assigning a type to the variable 'offset' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 16), 'offset', offset_321211)
        
        # Assigning a Name to a Name (line 573):
        
        # Assigning a Name to a Name (line 573):
        # Getting the type of 'offset' (line 573)
        offset_321212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 32), 'offset')
        # Assigning a type to the variable 'laststdoffset' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 16), 'laststdoffset', offset_321212)
        # SSA branch for the else part of an if statement (line 571)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 575)
        # Getting the type of 'laststdoffset' (line 575)
        laststdoffset_321213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 16), 'laststdoffset')
        # Getting the type of 'None' (line 575)
        None_321214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 40), 'None')
        
        (may_be_321215, more_types_in_union_321216) = may_not_be_none(laststdoffset_321213, None_321214)

        if may_be_321215:

            if more_types_in_union_321216:
                # Runtime conditional SSA (line 575)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Attribute (line 577):
            
            # Assigning a BinOp to a Attribute (line 577):
            # Getting the type of 'tti' (line 577)
            tti_321217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 36), 'tti')
            # Obtaining the member 'offset' of a type (line 577)
            offset_321218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 36), tti_321217, 'offset')
            # Getting the type of 'laststdoffset' (line 577)
            laststdoffset_321219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 49), 'laststdoffset')
            # Applying the binary operator '-' (line 577)
            result_sub_321220 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 36), '-', offset_321218, laststdoffset_321219)
            
            # Getting the type of 'tti' (line 577)
            tti_321221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 20), 'tti')
            # Setting the type of the member 'dstoffset' of a type (line 577)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 20), tti_321221, 'dstoffset', result_sub_321220)
            
            # Assigning a Name to a Subscript (line 578):
            
            # Assigning a Name to a Subscript (line 578):
            # Getting the type of 'tti' (line 578)
            tti_321222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 39), 'tti')
            # Getting the type of 'out' (line 578)
            out_321223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 20), 'out')
            # Obtaining the member 'trans_idx' of a type (line 578)
            trans_idx_321224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 20), out_321223, 'trans_idx')
            # Getting the type of 'i' (line 578)
            i_321225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 34), 'i')
            # Storing an element on a container (line 578)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 578, 20), trans_idx_321224, (i_321225, tti_321222))

            if more_types_in_union_321216:
                # SSA join for if statement (line 575)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BoolOp to a Name (line 580):
        
        # Assigning a BoolOp to a Name (line 580):
        
        # Evaluating a boolean operation
        # Getting the type of 'laststdoffset' (line 580)
        laststdoffset_321226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 25), 'laststdoffset')
        int_321227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 42), 'int')
        # Applying the binary operator 'or' (line 580)
        result_or_keyword_321228 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 25), 'or', laststdoffset_321226, int_321227)
        
        # Assigning a type to the variable 'offset' (line 580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 16), 'offset', result_or_keyword_321228)
        # SSA join for if statement (line 571)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 582)
        # Processing the call arguments (line 582)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 582)
        i_321232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 53), 'i', False)
        # Getting the type of 'out' (line 582)
        out_321233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 34), 'out', False)
        # Obtaining the member 'trans_list_utc' of a type (line 582)
        trans_list_utc_321234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 34), out_321233, 'trans_list_utc')
        # Obtaining the member '__getitem__' of a type (line 582)
        getitem___321235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 34), trans_list_utc_321234, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 582)
        subscript_call_result_321236 = invoke(stypy.reporting.localization.Localization(__file__, 582, 34), getitem___321235, i_321232)
        
        # Getting the type of 'offset' (line 582)
        offset_321237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 58), 'offset', False)
        # Applying the binary operator '+' (line 582)
        result_add_321238 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 34), '+', subscript_call_result_321236, offset_321237)
        
        # Processing the call keyword arguments (line 582)
        kwargs_321239 = {}
        # Getting the type of 'out' (line 582)
        out_321229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 12), 'out', False)
        # Obtaining the member 'trans_list' of a type (line 582)
        trans_list_321230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 12), out_321229, 'trans_list')
        # Obtaining the member 'append' of a type (line 582)
        append_321231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 12), trans_list_321230, 'append')
        # Calling append(args, kwargs) (line 582)
        append_call_result_321240 = invoke(stypy.reporting.localization.Localization(__file__, 582, 12), append_321231, *[result_add_321238], **kwargs_321239)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 586):
        
        # Assigning a Name to a Name (line 586):
        # Getting the type of 'None' (line 586)
        None_321241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 24), 'None')
        # Assigning a type to the variable 'laststdoffset' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'laststdoffset', None_321241)
        
        
        # Call to reversed(...): (line 587)
        # Processing the call arguments (line 587)
        
        # Call to range(...): (line 587)
        # Processing the call arguments (line 587)
        
        # Call to len(...): (line 587)
        # Processing the call arguments (line 587)
        # Getting the type of 'out' (line 587)
        out_321245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 36), 'out', False)
        # Obtaining the member 'trans_idx' of a type (line 587)
        trans_idx_321246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 36), out_321245, 'trans_idx')
        # Processing the call keyword arguments (line 587)
        kwargs_321247 = {}
        # Getting the type of 'len' (line 587)
        len_321244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 32), 'len', False)
        # Calling len(args, kwargs) (line 587)
        len_call_result_321248 = invoke(stypy.reporting.localization.Localization(__file__, 587, 32), len_321244, *[trans_idx_321246], **kwargs_321247)
        
        # Processing the call keyword arguments (line 587)
        kwargs_321249 = {}
        # Getting the type of 'range' (line 587)
        range_321243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 26), 'range', False)
        # Calling range(args, kwargs) (line 587)
        range_call_result_321250 = invoke(stypy.reporting.localization.Localization(__file__, 587, 26), range_321243, *[len_call_result_321248], **kwargs_321249)
        
        # Processing the call keyword arguments (line 587)
        kwargs_321251 = {}
        # Getting the type of 'reversed' (line 587)
        reversed_321242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 17), 'reversed', False)
        # Calling reversed(args, kwargs) (line 587)
        reversed_call_result_321252 = invoke(stypy.reporting.localization.Localization(__file__, 587, 17), reversed_321242, *[range_call_result_321250], **kwargs_321251)
        
        # Testing the type of a for loop iterable (line 587)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 587, 8), reversed_call_result_321252)
        # Getting the type of the for loop variable (line 587)
        for_loop_var_321253 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 587, 8), reversed_call_result_321252)
        # Assigning a type to the variable 'i' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 8), 'i', for_loop_var_321253)
        # SSA begins for a for statement (line 587)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 588):
        
        # Assigning a Subscript to a Name (line 588):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 588)
        i_321254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 32), 'i')
        # Getting the type of 'out' (line 588)
        out_321255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 18), 'out')
        # Obtaining the member 'trans_idx' of a type (line 588)
        trans_idx_321256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 18), out_321255, 'trans_idx')
        # Obtaining the member '__getitem__' of a type (line 588)
        getitem___321257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 18), trans_idx_321256, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 588)
        subscript_call_result_321258 = invoke(stypy.reporting.localization.Localization(__file__, 588, 18), getitem___321257, i_321254)
        
        # Assigning a type to the variable 'tti' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 12), 'tti', subscript_call_result_321258)
        
        # Getting the type of 'tti' (line 589)
        tti_321259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 15), 'tti')
        # Obtaining the member 'isdst' of a type (line 589)
        isdst_321260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 15), tti_321259, 'isdst')
        # Testing the type of an if condition (line 589)
        if_condition_321261 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 589, 12), isdst_321260)
        # Assigning a type to the variable 'if_condition_321261' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 12), 'if_condition_321261', if_condition_321261)
        # SSA begins for if statement (line 589)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'tti' (line 590)
        tti_321262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 24), 'tti')
        # Obtaining the member 'dstoffset' of a type (line 590)
        dstoffset_321263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 24), tti_321262, 'dstoffset')
        
        # Getting the type of 'laststdoffset' (line 590)
        laststdoffset_321264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 41), 'laststdoffset')
        # Getting the type of 'None' (line 590)
        None_321265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 58), 'None')
        # Applying the binary operator 'is' (line 590)
        result_is__321266 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 41), 'is', laststdoffset_321264, None_321265)
        
        # Applying the binary operator 'or' (line 590)
        result_or_keyword_321267 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 24), 'or', dstoffset_321263, result_is__321266)
        
        # Applying the 'not' unary operator (line 590)
        result_not__321268 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 19), 'not', result_or_keyword_321267)
        
        # Testing the type of an if condition (line 590)
        if_condition_321269 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 590, 16), result_not__321268)
        # Assigning a type to the variable 'if_condition_321269' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 16), 'if_condition_321269', if_condition_321269)
        # SSA begins for if statement (line 590)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 591):
        
        # Assigning a BinOp to a Attribute (line 591):
        # Getting the type of 'tti' (line 591)
        tti_321270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 36), 'tti')
        # Obtaining the member 'offset' of a type (line 591)
        offset_321271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 36), tti_321270, 'offset')
        # Getting the type of 'laststdoffset' (line 591)
        laststdoffset_321272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 49), 'laststdoffset')
        # Applying the binary operator '-' (line 591)
        result_sub_321273 = python_operator(stypy.reporting.localization.Localization(__file__, 591, 36), '-', offset_321271, laststdoffset_321272)
        
        # Getting the type of 'tti' (line 591)
        tti_321274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 20), 'tti')
        # Setting the type of the member 'dstoffset' of a type (line 591)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 20), tti_321274, 'dstoffset', result_sub_321273)
        # SSA join for if statement (line 590)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 589)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 593):
        
        # Assigning a Attribute to a Name (line 593):
        # Getting the type of 'tti' (line 593)
        tti_321275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 32), 'tti')
        # Obtaining the member 'offset' of a type (line 593)
        offset_321276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 32), tti_321275, 'offset')
        # Assigning a type to the variable 'laststdoffset' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 16), 'laststdoffset', offset_321276)
        # SSA join for if statement (line 589)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to isinstance(...): (line 595)
        # Processing the call arguments (line 595)
        # Getting the type of 'tti' (line 595)
        tti_321278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 30), 'tti', False)
        # Obtaining the member 'dstoffset' of a type (line 595)
        dstoffset_321279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 30), tti_321278, 'dstoffset')
        # Getting the type of 'datetime' (line 595)
        datetime_321280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 45), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 595)
        timedelta_321281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 45), datetime_321280, 'timedelta')
        # Processing the call keyword arguments (line 595)
        kwargs_321282 = {}
        # Getting the type of 'isinstance' (line 595)
        isinstance_321277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 595)
        isinstance_call_result_321283 = invoke(stypy.reporting.localization.Localization(__file__, 595, 19), isinstance_321277, *[dstoffset_321279, timedelta_321281], **kwargs_321282)
        
        # Applying the 'not' unary operator (line 595)
        result_not__321284 = python_operator(stypy.reporting.localization.Localization(__file__, 595, 15), 'not', isinstance_call_result_321283)
        
        # Testing the type of an if condition (line 595)
        if_condition_321285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 595, 12), result_not__321284)
        # Assigning a type to the variable 'if_condition_321285' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 12), 'if_condition_321285', if_condition_321285)
        # SSA begins for if statement (line 595)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 596):
        
        # Assigning a Call to a Attribute (line 596):
        
        # Call to timedelta(...): (line 596)
        # Processing the call keyword arguments (line 596)
        # Getting the type of 'tti' (line 596)
        tti_321288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 59), 'tti', False)
        # Obtaining the member 'dstoffset' of a type (line 596)
        dstoffset_321289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 59), tti_321288, 'dstoffset')
        keyword_321290 = dstoffset_321289
        kwargs_321291 = {'seconds': keyword_321290}
        # Getting the type of 'datetime' (line 596)
        datetime_321286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 32), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 596)
        timedelta_321287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 32), datetime_321286, 'timedelta')
        # Calling timedelta(args, kwargs) (line 596)
        timedelta_call_result_321292 = invoke(stypy.reporting.localization.Localization(__file__, 596, 32), timedelta_321287, *[], **kwargs_321291)
        
        # Getting the type of 'tti' (line 596)
        tti_321293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 16), 'tti')
        # Setting the type of the member 'dstoffset' of a type (line 596)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 16), tti_321293, 'dstoffset', timedelta_call_result_321292)
        # SSA join for if statement (line 595)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 598):
        
        # Assigning a Name to a Subscript (line 598):
        # Getting the type of 'tti' (line 598)
        tti_321294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 31), 'tti')
        # Getting the type of 'out' (line 598)
        out_321295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 12), 'out')
        # Obtaining the member 'trans_idx' of a type (line 598)
        trans_idx_321296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 12), out_321295, 'trans_idx')
        # Getting the type of 'i' (line 598)
        i_321297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 26), 'i')
        # Storing an element on a container (line 598)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 598, 12), trans_idx_321296, (i_321297, tti_321294))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 600):
        
        # Assigning a Call to a Attribute (line 600):
        
        # Call to tuple(...): (line 600)
        # Processing the call arguments (line 600)
        # Getting the type of 'out' (line 600)
        out_321299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 30), 'out', False)
        # Obtaining the member 'trans_idx' of a type (line 600)
        trans_idx_321300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 30), out_321299, 'trans_idx')
        # Processing the call keyword arguments (line 600)
        kwargs_321301 = {}
        # Getting the type of 'tuple' (line 600)
        tuple_321298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 24), 'tuple', False)
        # Calling tuple(args, kwargs) (line 600)
        tuple_call_result_321302 = invoke(stypy.reporting.localization.Localization(__file__, 600, 24), tuple_321298, *[trans_idx_321300], **kwargs_321301)
        
        # Getting the type of 'out' (line 600)
        out_321303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'out')
        # Setting the type of the member 'trans_idx' of a type (line 600)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 8), out_321303, 'trans_idx', tuple_call_result_321302)
        
        # Assigning a Call to a Attribute (line 601):
        
        # Assigning a Call to a Attribute (line 601):
        
        # Call to tuple(...): (line 601)
        # Processing the call arguments (line 601)
        # Getting the type of 'out' (line 601)
        out_321305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 31), 'out', False)
        # Obtaining the member 'trans_list' of a type (line 601)
        trans_list_321306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 31), out_321305, 'trans_list')
        # Processing the call keyword arguments (line 601)
        kwargs_321307 = {}
        # Getting the type of 'tuple' (line 601)
        tuple_321304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 25), 'tuple', False)
        # Calling tuple(args, kwargs) (line 601)
        tuple_call_result_321308 = invoke(stypy.reporting.localization.Localization(__file__, 601, 25), tuple_321304, *[trans_list_321306], **kwargs_321307)
        
        # Getting the type of 'out' (line 601)
        out_321309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 8), 'out')
        # Setting the type of the member 'trans_list' of a type (line 601)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 8), out_321309, 'trans_list', tuple_call_result_321308)
        
        # Assigning a Call to a Attribute (line 602):
        
        # Assigning a Call to a Attribute (line 602):
        
        # Call to tuple(...): (line 602)
        # Processing the call arguments (line 602)
        # Getting the type of 'out' (line 602)
        out_321311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 35), 'out', False)
        # Obtaining the member 'trans_list_utc' of a type (line 602)
        trans_list_utc_321312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 35), out_321311, 'trans_list_utc')
        # Processing the call keyword arguments (line 602)
        kwargs_321313 = {}
        # Getting the type of 'tuple' (line 602)
        tuple_321310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 29), 'tuple', False)
        # Calling tuple(args, kwargs) (line 602)
        tuple_call_result_321314 = invoke(stypy.reporting.localization.Localization(__file__, 602, 29), tuple_321310, *[trans_list_utc_321312], **kwargs_321313)
        
        # Getting the type of 'out' (line 602)
        out_321315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'out')
        # Setting the type of the member 'trans_list_utc' of a type (line 602)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 8), out_321315, 'trans_list_utc', tuple_call_result_321314)
        # Getting the type of 'out' (line 604)
        out_321316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'stypy_return_type', out_321316)
        
        # ################# End of '_read_tzfile(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_read_tzfile' in the type store
        # Getting the type of 'stypy_return_type' (line 386)
        stypy_return_type_321317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_read_tzfile'
        return stypy_return_type_321317


    @norecursion
    def _find_last_transition(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 606)
        False_321318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 47), 'False')
        defaults = [False_321318]
        # Create a new context for function '_find_last_transition'
        module_type_store = module_type_store.open_function_context('_find_last_transition', 606, 4, False)
        # Assigning a type to the variable 'self' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile._find_last_transition.__dict__.__setitem__('stypy_localization', localization)
        tzfile._find_last_transition.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile._find_last_transition.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile._find_last_transition.__dict__.__setitem__('stypy_function_name', 'tzfile._find_last_transition')
        tzfile._find_last_transition.__dict__.__setitem__('stypy_param_names_list', ['dt', 'in_utc'])
        tzfile._find_last_transition.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile._find_last_transition.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile._find_last_transition.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile._find_last_transition.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile._find_last_transition.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile._find_last_transition.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile._find_last_transition', ['dt', 'in_utc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_find_last_transition', localization, ['dt', 'in_utc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_find_last_transition(...)' code ##################

        
        
        # Getting the type of 'self' (line 608)
        self_321319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 15), 'self')
        # Obtaining the member '_trans_list' of a type (line 608)
        _trans_list_321320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 15), self_321319, '_trans_list')
        # Applying the 'not' unary operator (line 608)
        result_not__321321 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 11), 'not', _trans_list_321320)
        
        # Testing the type of an if condition (line 608)
        if_condition_321322 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 608, 8), result_not__321321)
        # Assigning a type to the variable 'if_condition_321322' (line 608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'if_condition_321322', if_condition_321322)
        # SSA begins for if statement (line 608)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 609)
        None_321323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'stypy_return_type', None_321323)
        # SSA join for if statement (line 608)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 611):
        
        # Assigning a Call to a Name (line 611):
        
        # Call to _datetime_to_timestamp(...): (line 611)
        # Processing the call arguments (line 611)
        # Getting the type of 'dt' (line 611)
        dt_321325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 43), 'dt', False)
        # Processing the call keyword arguments (line 611)
        kwargs_321326 = {}
        # Getting the type of '_datetime_to_timestamp' (line 611)
        _datetime_to_timestamp_321324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 20), '_datetime_to_timestamp', False)
        # Calling _datetime_to_timestamp(args, kwargs) (line 611)
        _datetime_to_timestamp_call_result_321327 = invoke(stypy.reporting.localization.Localization(__file__, 611, 20), _datetime_to_timestamp_321324, *[dt_321325], **kwargs_321326)
        
        # Assigning a type to the variable 'timestamp' (line 611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'timestamp', _datetime_to_timestamp_call_result_321327)
        
        # Assigning a IfExp to a Name (line 615):
        
        # Assigning a IfExp to a Name (line 615):
        
        # Getting the type of 'in_utc' (line 615)
        in_utc_321328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 45), 'in_utc')
        # Testing the type of an if expression (line 615)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 615, 21), in_utc_321328)
        # SSA begins for if expression (line 615)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'self' (line 615)
        self_321329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 21), 'self')
        # Obtaining the member '_trans_list_utc' of a type (line 615)
        _trans_list_utc_321330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 21), self_321329, '_trans_list_utc')
        # SSA branch for the else part of an if expression (line 615)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'self' (line 615)
        self_321331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 57), 'self')
        # Obtaining the member '_trans_list' of a type (line 615)
        _trans_list_321332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 57), self_321331, '_trans_list')
        # SSA join for if expression (line 615)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_321333 = union_type.UnionType.add(_trans_list_utc_321330, _trans_list_321332)
        
        # Assigning a type to the variable 'trans_list' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'trans_list', if_exp_321333)
        
        # Assigning a Call to a Name (line 616):
        
        # Assigning a Call to a Name (line 616):
        
        # Call to bisect_right(...): (line 616)
        # Processing the call arguments (line 616)
        # Getting the type of 'trans_list' (line 616)
        trans_list_321336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 34), 'trans_list', False)
        # Getting the type of 'timestamp' (line 616)
        timestamp_321337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 46), 'timestamp', False)
        # Processing the call keyword arguments (line 616)
        kwargs_321338 = {}
        # Getting the type of 'bisect' (line 616)
        bisect_321334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 14), 'bisect', False)
        # Obtaining the member 'bisect_right' of a type (line 616)
        bisect_right_321335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 14), bisect_321334, 'bisect_right')
        # Calling bisect_right(args, kwargs) (line 616)
        bisect_right_call_result_321339 = invoke(stypy.reporting.localization.Localization(__file__, 616, 14), bisect_right_321335, *[trans_list_321336, timestamp_321337], **kwargs_321338)
        
        # Assigning a type to the variable 'idx' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'idx', bisect_right_call_result_321339)
        # Getting the type of 'idx' (line 619)
        idx_321340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 15), 'idx')
        int_321341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 21), 'int')
        # Applying the binary operator '-' (line 619)
        result_sub_321342 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 15), '-', idx_321340, int_321341)
        
        # Assigning a type to the variable 'stypy_return_type' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 'stypy_return_type', result_sub_321342)
        
        # ################# End of '_find_last_transition(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_find_last_transition' in the type store
        # Getting the type of 'stypy_return_type' (line 606)
        stypy_return_type_321343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321343)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_find_last_transition'
        return stypy_return_type_321343


    @norecursion
    def _get_ttinfo(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_ttinfo'
        module_type_store = module_type_store.open_function_context('_get_ttinfo', 621, 4, False)
        # Assigning a type to the variable 'self' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_localization', localization)
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_function_name', 'tzfile._get_ttinfo')
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_param_names_list', ['idx'])
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile._get_ttinfo.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile._get_ttinfo', ['idx'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_ttinfo', localization, ['idx'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_ttinfo(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'idx' (line 623)
        idx_321344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 11), 'idx')
        # Getting the type of 'None' (line 623)
        None_321345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 18), 'None')
        # Applying the binary operator 'is' (line 623)
        result_is__321346 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 11), 'is', idx_321344, None_321345)
        
        
        # Getting the type of 'idx' (line 623)
        idx_321347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 27), 'idx')
        int_321348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 33), 'int')
        # Applying the binary operator '+' (line 623)
        result_add_321349 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 27), '+', idx_321347, int_321348)
        
        
        # Call to len(...): (line 623)
        # Processing the call arguments (line 623)
        # Getting the type of 'self' (line 623)
        self_321351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 43), 'self', False)
        # Obtaining the member '_trans_list' of a type (line 623)
        _trans_list_321352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 43), self_321351, '_trans_list')
        # Processing the call keyword arguments (line 623)
        kwargs_321353 = {}
        # Getting the type of 'len' (line 623)
        len_321350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 39), 'len', False)
        # Calling len(args, kwargs) (line 623)
        len_call_result_321354 = invoke(stypy.reporting.localization.Localization(__file__, 623, 39), len_321350, *[_trans_list_321352], **kwargs_321353)
        
        # Applying the binary operator '>=' (line 623)
        result_ge_321355 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 26), '>=', result_add_321349, len_call_result_321354)
        
        # Applying the binary operator 'or' (line 623)
        result_or_keyword_321356 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 11), 'or', result_is__321346, result_ge_321355)
        
        # Testing the type of an if condition (line 623)
        if_condition_321357 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 623, 8), result_or_keyword_321356)
        # Assigning a type to the variable 'if_condition_321357' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'if_condition_321357', if_condition_321357)
        # SSA begins for if statement (line 623)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 624)
        self_321358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 19), 'self')
        # Obtaining the member '_ttinfo_std' of a type (line 624)
        _ttinfo_std_321359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 19), self_321358, '_ttinfo_std')
        # Assigning a type to the variable 'stypy_return_type' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 12), 'stypy_return_type', _ttinfo_std_321359)
        # SSA join for if statement (line 623)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'idx' (line 627)
        idx_321360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 11), 'idx')
        int_321361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 17), 'int')
        # Applying the binary operator '<' (line 627)
        result_lt_321362 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 11), '<', idx_321360, int_321361)
        
        # Testing the type of an if condition (line 627)
        if_condition_321363 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 627, 8), result_lt_321362)
        # Assigning a type to the variable 'if_condition_321363' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 8), 'if_condition_321363', if_condition_321363)
        # SSA begins for if statement (line 627)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 628)
        self_321364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 19), 'self')
        # Obtaining the member '_ttinfo_before' of a type (line 628)
        _ttinfo_before_321365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 19), self_321364, '_ttinfo_before')
        # Assigning a type to the variable 'stypy_return_type' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 12), 'stypy_return_type', _ttinfo_before_321365)
        # SSA join for if statement (line 627)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'idx' (line 630)
        idx_321366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 31), 'idx')
        # Getting the type of 'self' (line 630)
        self_321367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 15), 'self')
        # Obtaining the member '_trans_idx' of a type (line 630)
        _trans_idx_321368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 15), self_321367, '_trans_idx')
        # Obtaining the member '__getitem__' of a type (line 630)
        getitem___321369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 15), _trans_idx_321368, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 630)
        subscript_call_result_321370 = invoke(stypy.reporting.localization.Localization(__file__, 630, 15), getitem___321369, idx_321366)
        
        # Assigning a type to the variable 'stypy_return_type' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'stypy_return_type', subscript_call_result_321370)
        
        # ################# End of '_get_ttinfo(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_ttinfo' in the type store
        # Getting the type of 'stypy_return_type' (line 621)
        stypy_return_type_321371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321371)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_ttinfo'
        return stypy_return_type_321371


    @norecursion
    def _find_ttinfo(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_find_ttinfo'
        module_type_store = module_type_store.open_function_context('_find_ttinfo', 632, 4, False)
        # Assigning a type to the variable 'self' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_localization', localization)
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_function_name', 'tzfile._find_ttinfo')
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile._find_ttinfo.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile._find_ttinfo', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_find_ttinfo', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_find_ttinfo(...)' code ##################

        
        # Assigning a Call to a Name (line 633):
        
        # Assigning a Call to a Name (line 633):
        
        # Call to _resolve_ambiguous_time(...): (line 633)
        # Processing the call arguments (line 633)
        # Getting the type of 'dt' (line 633)
        dt_321374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 43), 'dt', False)
        # Processing the call keyword arguments (line 633)
        kwargs_321375 = {}
        # Getting the type of 'self' (line 633)
        self_321372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 14), 'self', False)
        # Obtaining the member '_resolve_ambiguous_time' of a type (line 633)
        _resolve_ambiguous_time_321373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 14), self_321372, '_resolve_ambiguous_time')
        # Calling _resolve_ambiguous_time(args, kwargs) (line 633)
        _resolve_ambiguous_time_call_result_321376 = invoke(stypy.reporting.localization.Localization(__file__, 633, 14), _resolve_ambiguous_time_321373, *[dt_321374], **kwargs_321375)
        
        # Assigning a type to the variable 'idx' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'idx', _resolve_ambiguous_time_call_result_321376)
        
        # Call to _get_ttinfo(...): (line 635)
        # Processing the call arguments (line 635)
        # Getting the type of 'idx' (line 635)
        idx_321379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 32), 'idx', False)
        # Processing the call keyword arguments (line 635)
        kwargs_321380 = {}
        # Getting the type of 'self' (line 635)
        self_321377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 15), 'self', False)
        # Obtaining the member '_get_ttinfo' of a type (line 635)
        _get_ttinfo_321378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 15), self_321377, '_get_ttinfo')
        # Calling _get_ttinfo(args, kwargs) (line 635)
        _get_ttinfo_call_result_321381 = invoke(stypy.reporting.localization.Localization(__file__, 635, 15), _get_ttinfo_321378, *[idx_321379], **kwargs_321380)
        
        # Assigning a type to the variable 'stypy_return_type' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'stypy_return_type', _get_ttinfo_call_result_321381)
        
        # ################# End of '_find_ttinfo(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_find_ttinfo' in the type store
        # Getting the type of 'stypy_return_type' (line 632)
        stypy_return_type_321382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321382)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_find_ttinfo'
        return stypy_return_type_321382


    @norecursion
    def fromutc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fromutc'
        module_type_store = module_type_store.open_function_context('fromutc', 637, 4, False)
        # Assigning a type to the variable 'self' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.fromutc.__dict__.__setitem__('stypy_localization', localization)
        tzfile.fromutc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.fromutc.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.fromutc.__dict__.__setitem__('stypy_function_name', 'tzfile.fromutc')
        tzfile.fromutc.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzfile.fromutc.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.fromutc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.fromutc.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.fromutc.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.fromutc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.fromutc.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.fromutc', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromutc', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromutc(...)' code ##################

        str_321383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, (-1)), 'str', "\n        The ``tzfile`` implementation of :py:func:`datetime.tzinfo.fromutc`.\n\n        :param dt:\n            A :py:class:`datetime.datetime` object.\n\n        :raises TypeError:\n            Raised if ``dt`` is not a :py:class:`datetime.datetime` object.\n\n        :raises ValueError:\n            Raised if this is called with a ``dt`` which does not have this\n            ``tzinfo`` attached.\n\n        :return:\n            Returns a :py:class:`datetime.datetime` object representing the\n            wall time in ``self``'s time zone.\n        ")
        
        
        
        # Call to isinstance(...): (line 657)
        # Processing the call arguments (line 657)
        # Getting the type of 'dt' (line 657)
        dt_321385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 26), 'dt', False)
        # Getting the type of 'datetime' (line 657)
        datetime_321386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 30), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 657)
        datetime_321387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 657, 30), datetime_321386, 'datetime')
        # Processing the call keyword arguments (line 657)
        kwargs_321388 = {}
        # Getting the type of 'isinstance' (line 657)
        isinstance_321384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 657)
        isinstance_call_result_321389 = invoke(stypy.reporting.localization.Localization(__file__, 657, 15), isinstance_321384, *[dt_321385, datetime_321387], **kwargs_321388)
        
        # Applying the 'not' unary operator (line 657)
        result_not__321390 = python_operator(stypy.reporting.localization.Localization(__file__, 657, 11), 'not', isinstance_call_result_321389)
        
        # Testing the type of an if condition (line 657)
        if_condition_321391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 657, 8), result_not__321390)
        # Assigning a type to the variable 'if_condition_321391' (line 657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 8), 'if_condition_321391', if_condition_321391)
        # SSA begins for if statement (line 657)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 658)
        # Processing the call arguments (line 658)
        str_321393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 28), 'str', 'fromutc() requires a datetime argument')
        # Processing the call keyword arguments (line 658)
        kwargs_321394 = {}
        # Getting the type of 'TypeError' (line 658)
        TypeError_321392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 658)
        TypeError_call_result_321395 = invoke(stypy.reporting.localization.Localization(__file__, 658, 18), TypeError_321392, *[str_321393], **kwargs_321394)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 658, 12), TypeError_call_result_321395, 'raise parameter', BaseException)
        # SSA join for if statement (line 657)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'dt' (line 660)
        dt_321396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 11), 'dt')
        # Obtaining the member 'tzinfo' of a type (line 660)
        tzinfo_321397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 11), dt_321396, 'tzinfo')
        # Getting the type of 'self' (line 660)
        self_321398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 28), 'self')
        # Applying the binary operator 'isnot' (line 660)
        result_is_not_321399 = python_operator(stypy.reporting.localization.Localization(__file__, 660, 11), 'isnot', tzinfo_321397, self_321398)
        
        # Testing the type of an if condition (line 660)
        if_condition_321400 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 660, 8), result_is_not_321399)
        # Assigning a type to the variable 'if_condition_321400' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 8), 'if_condition_321400', if_condition_321400)
        # SSA begins for if statement (line 660)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 661)
        # Processing the call arguments (line 661)
        str_321402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 29), 'str', 'dt.tzinfo is not self')
        # Processing the call keyword arguments (line 661)
        kwargs_321403 = {}
        # Getting the type of 'ValueError' (line 661)
        ValueError_321401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 661)
        ValueError_call_result_321404 = invoke(stypy.reporting.localization.Localization(__file__, 661, 18), ValueError_321401, *[str_321402], **kwargs_321403)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 661, 12), ValueError_call_result_321404, 'raise parameter', BaseException)
        # SSA join for if statement (line 660)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 664):
        
        # Assigning a Call to a Name (line 664):
        
        # Call to _find_last_transition(...): (line 664)
        # Processing the call arguments (line 664)
        # Getting the type of 'dt' (line 664)
        dt_321407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 41), 'dt', False)
        # Processing the call keyword arguments (line 664)
        # Getting the type of 'True' (line 664)
        True_321408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 52), 'True', False)
        keyword_321409 = True_321408
        kwargs_321410 = {'in_utc': keyword_321409}
        # Getting the type of 'self' (line 664)
        self_321405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 14), 'self', False)
        # Obtaining the member '_find_last_transition' of a type (line 664)
        _find_last_transition_321406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 14), self_321405, '_find_last_transition')
        # Calling _find_last_transition(args, kwargs) (line 664)
        _find_last_transition_call_result_321411 = invoke(stypy.reporting.localization.Localization(__file__, 664, 14), _find_last_transition_321406, *[dt_321407], **kwargs_321410)
        
        # Assigning a type to the variable 'idx' (line 664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'idx', _find_last_transition_call_result_321411)
        
        # Assigning a Call to a Name (line 665):
        
        # Assigning a Call to a Name (line 665):
        
        # Call to _get_ttinfo(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'idx' (line 665)
        idx_321414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 31), 'idx', False)
        # Processing the call keyword arguments (line 665)
        kwargs_321415 = {}
        # Getting the type of 'self' (line 665)
        self_321412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 14), 'self', False)
        # Obtaining the member '_get_ttinfo' of a type (line 665)
        _get_ttinfo_321413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 14), self_321412, '_get_ttinfo')
        # Calling _get_ttinfo(args, kwargs) (line 665)
        _get_ttinfo_call_result_321416 = invoke(stypy.reporting.localization.Localization(__file__, 665, 14), _get_ttinfo_321413, *[idx_321414], **kwargs_321415)
        
        # Assigning a type to the variable 'tti' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'tti', _get_ttinfo_call_result_321416)
        
        # Assigning a BinOp to a Name (line 667):
        
        # Assigning a BinOp to a Name (line 667):
        # Getting the type of 'dt' (line 667)
        dt_321417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 17), 'dt')
        
        # Call to timedelta(...): (line 667)
        # Processing the call keyword arguments (line 667)
        # Getting the type of 'tti' (line 667)
        tti_321420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 49), 'tti', False)
        # Obtaining the member 'offset' of a type (line 667)
        offset_321421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 49), tti_321420, 'offset')
        keyword_321422 = offset_321421
        kwargs_321423 = {'seconds': keyword_321422}
        # Getting the type of 'datetime' (line 667)
        datetime_321418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 22), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 667)
        timedelta_321419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 22), datetime_321418, 'timedelta')
        # Calling timedelta(args, kwargs) (line 667)
        timedelta_call_result_321424 = invoke(stypy.reporting.localization.Localization(__file__, 667, 22), timedelta_321419, *[], **kwargs_321423)
        
        # Applying the binary operator '+' (line 667)
        result_add_321425 = python_operator(stypy.reporting.localization.Localization(__file__, 667, 17), '+', dt_321417, timedelta_call_result_321424)
        
        # Assigning a type to the variable 'dt_out' (line 667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'dt_out', result_add_321425)
        
        # Assigning a Call to a Name (line 669):
        
        # Assigning a Call to a Name (line 669):
        
        # Call to is_ambiguous(...): (line 669)
        # Processing the call arguments (line 669)
        # Getting the type of 'dt_out' (line 669)
        dt_out_321428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 33), 'dt_out', False)
        # Processing the call keyword arguments (line 669)
        # Getting the type of 'idx' (line 669)
        idx_321429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 45), 'idx', False)
        keyword_321430 = idx_321429
        kwargs_321431 = {'idx': keyword_321430}
        # Getting the type of 'self' (line 669)
        self_321426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 15), 'self', False)
        # Obtaining the member 'is_ambiguous' of a type (line 669)
        is_ambiguous_321427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 15), self_321426, 'is_ambiguous')
        # Calling is_ambiguous(args, kwargs) (line 669)
        is_ambiguous_call_result_321432 = invoke(stypy.reporting.localization.Localization(__file__, 669, 15), is_ambiguous_321427, *[dt_out_321428], **kwargs_321431)
        
        # Assigning a type to the variable 'fold' (line 669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 8), 'fold', is_ambiguous_call_result_321432)
        
        # Call to enfold(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'dt_out' (line 671)
        dt_out_321434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 22), 'dt_out', False)
        # Processing the call keyword arguments (line 671)
        
        # Call to int(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'fold' (line 671)
        fold_321436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 39), 'fold', False)
        # Processing the call keyword arguments (line 671)
        kwargs_321437 = {}
        # Getting the type of 'int' (line 671)
        int_321435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 35), 'int', False)
        # Calling int(args, kwargs) (line 671)
        int_call_result_321438 = invoke(stypy.reporting.localization.Localization(__file__, 671, 35), int_321435, *[fold_321436], **kwargs_321437)
        
        keyword_321439 = int_call_result_321438
        kwargs_321440 = {'fold': keyword_321439}
        # Getting the type of 'enfold' (line 671)
        enfold_321433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 15), 'enfold', False)
        # Calling enfold(args, kwargs) (line 671)
        enfold_call_result_321441 = invoke(stypy.reporting.localization.Localization(__file__, 671, 15), enfold_321433, *[dt_out_321434], **kwargs_321440)
        
        # Assigning a type to the variable 'stypy_return_type' (line 671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'stypy_return_type', enfold_call_result_321441)
        
        # ################# End of 'fromutc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromutc' in the type store
        # Getting the type of 'stypy_return_type' (line 637)
        stypy_return_type_321442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321442)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromutc'
        return stypy_return_type_321442


    @norecursion
    def is_ambiguous(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 673)
        None_321443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 35), 'None')
        defaults = [None_321443]
        # Create a new context for function 'is_ambiguous'
        module_type_store = module_type_store.open_function_context('is_ambiguous', 673, 4, False)
        # Assigning a type to the variable 'self' (line 674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_localization', localization)
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_function_name', 'tzfile.is_ambiguous')
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_param_names_list', ['dt', 'idx'])
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.is_ambiguous.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.is_ambiguous', ['dt', 'idx'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_ambiguous', localization, ['dt', 'idx'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_ambiguous(...)' code ##################

        str_321444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, (-1)), 'str', '\n        Whether or not the "wall time" of a given datetime is ambiguous in this\n        zone.\n\n        :param dt:\n            A :py:class:`datetime.datetime`, naive or time zone aware.\n\n\n        :return:\n            Returns ``True`` if ambiguous, ``False`` otherwise.\n\n        .. versionadded:: 2.6.0\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 687)
        # Getting the type of 'idx' (line 687)
        idx_321445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 11), 'idx')
        # Getting the type of 'None' (line 687)
        None_321446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 18), 'None')
        
        (may_be_321447, more_types_in_union_321448) = may_be_none(idx_321445, None_321446)

        if may_be_321447:

            if more_types_in_union_321448:
                # Runtime conditional SSA (line 687)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 688):
            
            # Assigning a Call to a Name (line 688):
            
            # Call to _find_last_transition(...): (line 688)
            # Processing the call arguments (line 688)
            # Getting the type of 'dt' (line 688)
            dt_321451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 45), 'dt', False)
            # Processing the call keyword arguments (line 688)
            kwargs_321452 = {}
            # Getting the type of 'self' (line 688)
            self_321449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 18), 'self', False)
            # Obtaining the member '_find_last_transition' of a type (line 688)
            _find_last_transition_321450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 18), self_321449, '_find_last_transition')
            # Calling _find_last_transition(args, kwargs) (line 688)
            _find_last_transition_call_result_321453 = invoke(stypy.reporting.localization.Localization(__file__, 688, 18), _find_last_transition_321450, *[dt_321451], **kwargs_321452)
            
            # Assigning a type to the variable 'idx' (line 688)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 12), 'idx', _find_last_transition_call_result_321453)

            if more_types_in_union_321448:
                # SSA join for if statement (line 687)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 691):
        
        # Assigning a Call to a Name (line 691):
        
        # Call to _datetime_to_timestamp(...): (line 691)
        # Processing the call arguments (line 691)
        # Getting the type of 'dt' (line 691)
        dt_321455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 43), 'dt', False)
        # Processing the call keyword arguments (line 691)
        kwargs_321456 = {}
        # Getting the type of '_datetime_to_timestamp' (line 691)
        _datetime_to_timestamp_321454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 20), '_datetime_to_timestamp', False)
        # Calling _datetime_to_timestamp(args, kwargs) (line 691)
        _datetime_to_timestamp_call_result_321457 = invoke(stypy.reporting.localization.Localization(__file__, 691, 20), _datetime_to_timestamp_321454, *[dt_321455], **kwargs_321456)
        
        # Assigning a type to the variable 'timestamp' (line 691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 8), 'timestamp', _datetime_to_timestamp_call_result_321457)
        
        # Assigning a Call to a Name (line 692):
        
        # Assigning a Call to a Name (line 692):
        
        # Call to _get_ttinfo(...): (line 692)
        # Processing the call arguments (line 692)
        # Getting the type of 'idx' (line 692)
        idx_321460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 31), 'idx', False)
        # Processing the call keyword arguments (line 692)
        kwargs_321461 = {}
        # Getting the type of 'self' (line 692)
        self_321458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 14), 'self', False)
        # Obtaining the member '_get_ttinfo' of a type (line 692)
        _get_ttinfo_321459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 14), self_321458, '_get_ttinfo')
        # Calling _get_ttinfo(args, kwargs) (line 692)
        _get_ttinfo_call_result_321462 = invoke(stypy.reporting.localization.Localization(__file__, 692, 14), _get_ttinfo_321459, *[idx_321460], **kwargs_321461)
        
        # Assigning a type to the variable 'tti' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'tti', _get_ttinfo_call_result_321462)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'idx' (line 694)
        idx_321463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 11), 'idx')
        # Getting the type of 'None' (line 694)
        None_321464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 18), 'None')
        # Applying the binary operator 'is' (line 694)
        result_is__321465 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 11), 'is', idx_321463, None_321464)
        
        
        # Getting the type of 'idx' (line 694)
        idx_321466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 26), 'idx')
        int_321467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 33), 'int')
        # Applying the binary operator '<=' (line 694)
        result_le_321468 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 26), '<=', idx_321466, int_321467)
        
        # Applying the binary operator 'or' (line 694)
        result_or_keyword_321469 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 11), 'or', result_is__321465, result_le_321468)
        
        # Testing the type of an if condition (line 694)
        if_condition_321470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 694, 8), result_or_keyword_321469)
        # Assigning a type to the variable 'if_condition_321470' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'if_condition_321470', if_condition_321470)
        # SSA begins for if statement (line 694)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'False' (line 695)
        False_321471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 12), 'stypy_return_type', False_321471)
        # SSA join for if statement (line 694)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 697):
        
        # Assigning a BinOp to a Name (line 697):
        
        # Call to _get_ttinfo(...): (line 697)
        # Processing the call arguments (line 697)
        # Getting the type of 'idx' (line 697)
        idx_321474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 30), 'idx', False)
        int_321475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 36), 'int')
        # Applying the binary operator '-' (line 697)
        result_sub_321476 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 30), '-', idx_321474, int_321475)
        
        # Processing the call keyword arguments (line 697)
        kwargs_321477 = {}
        # Getting the type of 'self' (line 697)
        self_321472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 13), 'self', False)
        # Obtaining the member '_get_ttinfo' of a type (line 697)
        _get_ttinfo_321473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 13), self_321472, '_get_ttinfo')
        # Calling _get_ttinfo(args, kwargs) (line 697)
        _get_ttinfo_call_result_321478 = invoke(stypy.reporting.localization.Localization(__file__, 697, 13), _get_ttinfo_321473, *[result_sub_321476], **kwargs_321477)
        
        # Obtaining the member 'offset' of a type (line 697)
        offset_321479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 13), _get_ttinfo_call_result_321478, 'offset')
        # Getting the type of 'tti' (line 697)
        tti_321480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 48), 'tti')
        # Obtaining the member 'offset' of a type (line 697)
        offset_321481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 48), tti_321480, 'offset')
        # Applying the binary operator '-' (line 697)
        result_sub_321482 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 13), '-', offset_321479, offset_321481)
        
        # Assigning a type to the variable 'od' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'od', result_sub_321482)
        
        # Assigning a Subscript to a Name (line 698):
        
        # Assigning a Subscript to a Name (line 698):
        
        # Obtaining the type of the subscript
        # Getting the type of 'idx' (line 698)
        idx_321483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 30), 'idx')
        # Getting the type of 'self' (line 698)
        self_321484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 13), 'self')
        # Obtaining the member '_trans_list' of a type (line 698)
        _trans_list_321485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 13), self_321484, '_trans_list')
        # Obtaining the member '__getitem__' of a type (line 698)
        getitem___321486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 13), _trans_list_321485, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 698)
        subscript_call_result_321487 = invoke(stypy.reporting.localization.Localization(__file__, 698, 13), getitem___321486, idx_321483)
        
        # Assigning a type to the variable 'tt' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'tt', subscript_call_result_321487)
        
        # Getting the type of 'timestamp' (line 700)
        timestamp_321488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 15), 'timestamp')
        # Getting the type of 'tt' (line 700)
        tt_321489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 27), 'tt')
        # Getting the type of 'od' (line 700)
        od_321490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 32), 'od')
        # Applying the binary operator '+' (line 700)
        result_add_321491 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 27), '+', tt_321489, od_321490)
        
        # Applying the binary operator '<' (line 700)
        result_lt_321492 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 15), '<', timestamp_321488, result_add_321491)
        
        # Assigning a type to the variable 'stypy_return_type' (line 700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 8), 'stypy_return_type', result_lt_321492)
        
        # ################# End of 'is_ambiguous(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_ambiguous' in the type store
        # Getting the type of 'stypy_return_type' (line 673)
        stypy_return_type_321493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321493)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_ambiguous'
        return stypy_return_type_321493


    @norecursion
    def _resolve_ambiguous_time(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_resolve_ambiguous_time'
        module_type_store = module_type_store.open_function_context('_resolve_ambiguous_time', 702, 4, False)
        # Assigning a type to the variable 'self' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_localization', localization)
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_function_name', 'tzfile._resolve_ambiguous_time')
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile._resolve_ambiguous_time.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile._resolve_ambiguous_time', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_resolve_ambiguous_time', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_resolve_ambiguous_time(...)' code ##################

        
        # Assigning a Call to a Name (line 703):
        
        # Assigning a Call to a Name (line 703):
        
        # Call to _find_last_transition(...): (line 703)
        # Processing the call arguments (line 703)
        # Getting the type of 'dt' (line 703)
        dt_321496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 41), 'dt', False)
        # Processing the call keyword arguments (line 703)
        kwargs_321497 = {}
        # Getting the type of 'self' (line 703)
        self_321494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 14), 'self', False)
        # Obtaining the member '_find_last_transition' of a type (line 703)
        _find_last_transition_321495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 14), self_321494, '_find_last_transition')
        # Calling _find_last_transition(args, kwargs) (line 703)
        _find_last_transition_call_result_321498 = invoke(stypy.reporting.localization.Localization(__file__, 703, 14), _find_last_transition_321495, *[dt_321496], **kwargs_321497)
        
        # Assigning a type to the variable 'idx' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'idx', _find_last_transition_call_result_321498)
        
        # Assigning a Call to a Name (line 706):
        
        # Assigning a Call to a Name (line 706):
        
        # Call to _fold(...): (line 706)
        # Processing the call arguments (line 706)
        # Getting the type of 'dt' (line 706)
        dt_321501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 27), 'dt', False)
        # Processing the call keyword arguments (line 706)
        kwargs_321502 = {}
        # Getting the type of 'self' (line 706)
        self_321499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 16), 'self', False)
        # Obtaining the member '_fold' of a type (line 706)
        _fold_321500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 16), self_321499, '_fold')
        # Calling _fold(args, kwargs) (line 706)
        _fold_call_result_321503 = invoke(stypy.reporting.localization.Localization(__file__, 706, 16), _fold_321500, *[dt_321501], **kwargs_321502)
        
        # Assigning a type to the variable '_fold' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 8), '_fold', _fold_call_result_321503)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'idx' (line 707)
        idx_321504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 11), 'idx')
        # Getting the type of 'None' (line 707)
        None_321505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 18), 'None')
        # Applying the binary operator 'is' (line 707)
        result_is__321506 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 11), 'is', idx_321504, None_321505)
        
        
        # Getting the type of 'idx' (line 707)
        idx_321507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 26), 'idx')
        int_321508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 33), 'int')
        # Applying the binary operator '==' (line 707)
        result_eq_321509 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 26), '==', idx_321507, int_321508)
        
        # Applying the binary operator 'or' (line 707)
        result_or_keyword_321510 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 11), 'or', result_is__321506, result_eq_321509)
        
        # Testing the type of an if condition (line 707)
        if_condition_321511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 707, 8), result_or_keyword_321510)
        # Assigning a type to the variable 'if_condition_321511' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'if_condition_321511', if_condition_321511)
        # SSA begins for if statement (line 707)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'idx' (line 708)
        idx_321512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 19), 'idx')
        # Assigning a type to the variable 'stypy_return_type' (line 708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 12), 'stypy_return_type', idx_321512)
        # SSA join for if statement (line 707)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 711):
        
        # Assigning a Call to a Name (line 711):
        
        # Call to int(...): (line 711)
        # Processing the call arguments (line 711)
        
        # Evaluating a boolean operation
        
        # Getting the type of '_fold' (line 711)
        _fold_321514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 29), '_fold', False)
        # Applying the 'not' unary operator (line 711)
        result_not__321515 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 25), 'not', _fold_321514)
        
        
        # Call to is_ambiguous(...): (line 711)
        # Processing the call arguments (line 711)
        # Getting the type of 'dt' (line 711)
        dt_321518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 57), 'dt', False)
        # Getting the type of 'idx' (line 711)
        idx_321519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 61), 'idx', False)
        # Processing the call keyword arguments (line 711)
        kwargs_321520 = {}
        # Getting the type of 'self' (line 711)
        self_321516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 39), 'self', False)
        # Obtaining the member 'is_ambiguous' of a type (line 711)
        is_ambiguous_321517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 39), self_321516, 'is_ambiguous')
        # Calling is_ambiguous(args, kwargs) (line 711)
        is_ambiguous_call_result_321521 = invoke(stypy.reporting.localization.Localization(__file__, 711, 39), is_ambiguous_321517, *[dt_321518, idx_321519], **kwargs_321520)
        
        # Applying the binary operator 'and' (line 711)
        result_and_keyword_321522 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 25), 'and', result_not__321515, is_ambiguous_call_result_321521)
        
        # Processing the call keyword arguments (line 711)
        kwargs_321523 = {}
        # Getting the type of 'int' (line 711)
        int_321513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 21), 'int', False)
        # Calling int(args, kwargs) (line 711)
        int_call_result_321524 = invoke(stypy.reporting.localization.Localization(__file__, 711, 21), int_321513, *[result_and_keyword_321522], **kwargs_321523)
        
        # Assigning a type to the variable 'idx_offset' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'idx_offset', int_call_result_321524)
        # Getting the type of 'idx' (line 713)
        idx_321525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 15), 'idx')
        # Getting the type of 'idx_offset' (line 713)
        idx_offset_321526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 21), 'idx_offset')
        # Applying the binary operator '-' (line 713)
        result_sub_321527 = python_operator(stypy.reporting.localization.Localization(__file__, 713, 15), '-', idx_321525, idx_offset_321526)
        
        # Assigning a type to the variable 'stypy_return_type' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'stypy_return_type', result_sub_321527)
        
        # ################# End of '_resolve_ambiguous_time(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_resolve_ambiguous_time' in the type store
        # Getting the type of 'stypy_return_type' (line 702)
        stypy_return_type_321528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321528)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_resolve_ambiguous_time'
        return stypy_return_type_321528


    @norecursion
    def utcoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'utcoffset'
        module_type_store = module_type_store.open_function_context('utcoffset', 715, 4, False)
        # Assigning a type to the variable 'self' (line 716)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.utcoffset.__dict__.__setitem__('stypy_localization', localization)
        tzfile.utcoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.utcoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.utcoffset.__dict__.__setitem__('stypy_function_name', 'tzfile.utcoffset')
        tzfile.utcoffset.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzfile.utcoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.utcoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.utcoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.utcoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.utcoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.utcoffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.utcoffset', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'utcoffset', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'utcoffset(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 716)
        # Getting the type of 'dt' (line 716)
        dt_321529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 11), 'dt')
        # Getting the type of 'None' (line 716)
        None_321530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 17), 'None')
        
        (may_be_321531, more_types_in_union_321532) = may_be_none(dt_321529, None_321530)

        if may_be_321531:

            if more_types_in_union_321532:
                # Runtime conditional SSA (line 716)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'None' (line 717)
            None_321533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 717)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 12), 'stypy_return_type', None_321533)

            if more_types_in_union_321532:
                # SSA join for if statement (line 716)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 719)
        self_321534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 15), 'self')
        # Obtaining the member '_ttinfo_std' of a type (line 719)
        _ttinfo_std_321535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 719, 15), self_321534, '_ttinfo_std')
        # Applying the 'not' unary operator (line 719)
        result_not__321536 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 11), 'not', _ttinfo_std_321535)
        
        # Testing the type of an if condition (line 719)
        if_condition_321537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 719, 8), result_not__321536)
        # Assigning a type to the variable 'if_condition_321537' (line 719)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 8), 'if_condition_321537', if_condition_321537)
        # SSA begins for if statement (line 719)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'ZERO' (line 720)
        ZERO_321538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 19), 'ZERO')
        # Assigning a type to the variable 'stypy_return_type' (line 720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 12), 'stypy_return_type', ZERO_321538)
        # SSA join for if statement (line 719)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _find_ttinfo(...): (line 722)
        # Processing the call arguments (line 722)
        # Getting the type of 'dt' (line 722)
        dt_321541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 33), 'dt', False)
        # Processing the call keyword arguments (line 722)
        kwargs_321542 = {}
        # Getting the type of 'self' (line 722)
        self_321539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 15), 'self', False)
        # Obtaining the member '_find_ttinfo' of a type (line 722)
        _find_ttinfo_321540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 15), self_321539, '_find_ttinfo')
        # Calling _find_ttinfo(args, kwargs) (line 722)
        _find_ttinfo_call_result_321543 = invoke(stypy.reporting.localization.Localization(__file__, 722, 15), _find_ttinfo_321540, *[dt_321541], **kwargs_321542)
        
        # Obtaining the member 'delta' of a type (line 722)
        delta_321544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 15), _find_ttinfo_call_result_321543, 'delta')
        # Assigning a type to the variable 'stypy_return_type' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'stypy_return_type', delta_321544)
        
        # ################# End of 'utcoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'utcoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 715)
        stypy_return_type_321545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321545)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'utcoffset'
        return stypy_return_type_321545


    @norecursion
    def dst(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dst'
        module_type_store = module_type_store.open_function_context('dst', 724, 4, False)
        # Assigning a type to the variable 'self' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.dst.__dict__.__setitem__('stypy_localization', localization)
        tzfile.dst.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.dst.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.dst.__dict__.__setitem__('stypy_function_name', 'tzfile.dst')
        tzfile.dst.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzfile.dst.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.dst.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.dst.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.dst.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.dst.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.dst.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.dst', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dst', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dst(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 725)
        # Getting the type of 'dt' (line 725)
        dt_321546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 11), 'dt')
        # Getting the type of 'None' (line 725)
        None_321547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 17), 'None')
        
        (may_be_321548, more_types_in_union_321549) = may_be_none(dt_321546, None_321547)

        if may_be_321548:

            if more_types_in_union_321549:
                # Runtime conditional SSA (line 725)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'None' (line 726)
            None_321550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 726)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 12), 'stypy_return_type', None_321550)

            if more_types_in_union_321549:
                # SSA join for if statement (line 725)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 728)
        self_321551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 15), 'self')
        # Obtaining the member '_ttinfo_dst' of a type (line 728)
        _ttinfo_dst_321552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 15), self_321551, '_ttinfo_dst')
        # Applying the 'not' unary operator (line 728)
        result_not__321553 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 11), 'not', _ttinfo_dst_321552)
        
        # Testing the type of an if condition (line 728)
        if_condition_321554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 728, 8), result_not__321553)
        # Assigning a type to the variable 'if_condition_321554' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 8), 'if_condition_321554', if_condition_321554)
        # SSA begins for if statement (line 728)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'ZERO' (line 729)
        ZERO_321555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 19), 'ZERO')
        # Assigning a type to the variable 'stypy_return_type' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 12), 'stypy_return_type', ZERO_321555)
        # SSA join for if statement (line 728)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 731):
        
        # Assigning a Call to a Name (line 731):
        
        # Call to _find_ttinfo(...): (line 731)
        # Processing the call arguments (line 731)
        # Getting the type of 'dt' (line 731)
        dt_321558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 32), 'dt', False)
        # Processing the call keyword arguments (line 731)
        kwargs_321559 = {}
        # Getting the type of 'self' (line 731)
        self_321556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 14), 'self', False)
        # Obtaining the member '_find_ttinfo' of a type (line 731)
        _find_ttinfo_321557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 14), self_321556, '_find_ttinfo')
        # Calling _find_ttinfo(args, kwargs) (line 731)
        _find_ttinfo_call_result_321560 = invoke(stypy.reporting.localization.Localization(__file__, 731, 14), _find_ttinfo_321557, *[dt_321558], **kwargs_321559)
        
        # Assigning a type to the variable 'tti' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'tti', _find_ttinfo_call_result_321560)
        
        
        # Getting the type of 'tti' (line 733)
        tti_321561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 15), 'tti')
        # Obtaining the member 'isdst' of a type (line 733)
        isdst_321562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 15), tti_321561, 'isdst')
        # Applying the 'not' unary operator (line 733)
        result_not__321563 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 11), 'not', isdst_321562)
        
        # Testing the type of an if condition (line 733)
        if_condition_321564 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 733, 8), result_not__321563)
        # Assigning a type to the variable 'if_condition_321564' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'if_condition_321564', if_condition_321564)
        # SSA begins for if statement (line 733)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'ZERO' (line 734)
        ZERO_321565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 19), 'ZERO')
        # Assigning a type to the variable 'stypy_return_type' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 12), 'stypy_return_type', ZERO_321565)
        # SSA join for if statement (line 733)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'tti' (line 738)
        tti_321566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 15), 'tti')
        # Obtaining the member 'dstoffset' of a type (line 738)
        dstoffset_321567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 15), tti_321566, 'dstoffset')
        # Assigning a type to the variable 'stypy_return_type' (line 738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'stypy_return_type', dstoffset_321567)
        
        # ################# End of 'dst(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dst' in the type store
        # Getting the type of 'stypy_return_type' (line 724)
        stypy_return_type_321568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321568)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dst'
        return stypy_return_type_321568


    @norecursion
    def tzname(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tzname'
        module_type_store = module_type_store.open_function_context('tzname', 740, 4, False)
        # Assigning a type to the variable 'self' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.tzname.__dict__.__setitem__('stypy_localization', localization)
        tzfile.tzname.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.tzname.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.tzname.__dict__.__setitem__('stypy_function_name', 'tzfile.tzname')
        tzfile.tzname.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        tzfile.tzname.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.tzname.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.tzname.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.tzname.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.tzname.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.tzname.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.tzname', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tzname', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tzname(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 742)
        self_321569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 15), 'self')
        # Obtaining the member '_ttinfo_std' of a type (line 742)
        _ttinfo_std_321570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 15), self_321569, '_ttinfo_std')
        # Applying the 'not' unary operator (line 742)
        result_not__321571 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 11), 'not', _ttinfo_std_321570)
        
        
        # Getting the type of 'dt' (line 742)
        dt_321572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 35), 'dt')
        # Getting the type of 'None' (line 742)
        None_321573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 41), 'None')
        # Applying the binary operator 'is' (line 742)
        result_is__321574 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 35), 'is', dt_321572, None_321573)
        
        # Applying the binary operator 'or' (line 742)
        result_or_keyword_321575 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 11), 'or', result_not__321571, result_is__321574)
        
        # Testing the type of an if condition (line 742)
        if_condition_321576 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 742, 8), result_or_keyword_321575)
        # Assigning a type to the variable 'if_condition_321576' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'if_condition_321576', if_condition_321576)
        # SSA begins for if statement (line 742)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 743)
        None_321577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 12), 'stypy_return_type', None_321577)
        # SSA join for if statement (line 742)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _find_ttinfo(...): (line 744)
        # Processing the call arguments (line 744)
        # Getting the type of 'dt' (line 744)
        dt_321580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 33), 'dt', False)
        # Processing the call keyword arguments (line 744)
        kwargs_321581 = {}
        # Getting the type of 'self' (line 744)
        self_321578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 15), 'self', False)
        # Obtaining the member '_find_ttinfo' of a type (line 744)
        _find_ttinfo_321579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 15), self_321578, '_find_ttinfo')
        # Calling _find_ttinfo(args, kwargs) (line 744)
        _find_ttinfo_call_result_321582 = invoke(stypy.reporting.localization.Localization(__file__, 744, 15), _find_ttinfo_321579, *[dt_321580], **kwargs_321581)
        
        # Obtaining the member 'abbr' of a type (line 744)
        abbr_321583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 15), _find_ttinfo_call_result_321582, 'abbr')
        # Assigning a type to the variable 'stypy_return_type' (line 744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 744, 8), 'stypy_return_type', abbr_321583)
        
        # ################# End of 'tzname(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tzname' in the type store
        # Getting the type of 'stypy_return_type' (line 740)
        stypy_return_type_321584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321584)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tzname'
        return stypy_return_type_321584


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 746, 4, False)
        # Assigning a type to the variable 'self' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'tzfile.stypy__eq__')
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 747)
        # Processing the call arguments (line 747)
        # Getting the type of 'other' (line 747)
        other_321586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 26), 'other', False)
        # Getting the type of 'tzfile' (line 747)
        tzfile_321587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 33), 'tzfile', False)
        # Processing the call keyword arguments (line 747)
        kwargs_321588 = {}
        # Getting the type of 'isinstance' (line 747)
        isinstance_321585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 747)
        isinstance_call_result_321589 = invoke(stypy.reporting.localization.Localization(__file__, 747, 15), isinstance_321585, *[other_321586, tzfile_321587], **kwargs_321588)
        
        # Applying the 'not' unary operator (line 747)
        result_not__321590 = python_operator(stypy.reporting.localization.Localization(__file__, 747, 11), 'not', isinstance_call_result_321589)
        
        # Testing the type of an if condition (line 747)
        if_condition_321591 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 747, 8), result_not__321590)
        # Assigning a type to the variable 'if_condition_321591' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'if_condition_321591', if_condition_321591)
        # SSA begins for if statement (line 747)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 748)
        NotImplemented_321592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'stypy_return_type', NotImplemented_321592)
        # SSA join for if statement (line 747)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 749)
        self_321593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 16), 'self')
        # Obtaining the member '_trans_list' of a type (line 749)
        _trans_list_321594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 16), self_321593, '_trans_list')
        # Getting the type of 'other' (line 749)
        other_321595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 36), 'other')
        # Obtaining the member '_trans_list' of a type (line 749)
        _trans_list_321596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 36), other_321595, '_trans_list')
        # Applying the binary operator '==' (line 749)
        result_eq_321597 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 16), '==', _trans_list_321594, _trans_list_321596)
        
        
        # Getting the type of 'self' (line 750)
        self_321598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 16), 'self')
        # Obtaining the member '_trans_idx' of a type (line 750)
        _trans_idx_321599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 16), self_321598, '_trans_idx')
        # Getting the type of 'other' (line 750)
        other_321600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 35), 'other')
        # Obtaining the member '_trans_idx' of a type (line 750)
        _trans_idx_321601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 35), other_321600, '_trans_idx')
        # Applying the binary operator '==' (line 750)
        result_eq_321602 = python_operator(stypy.reporting.localization.Localization(__file__, 750, 16), '==', _trans_idx_321599, _trans_idx_321601)
        
        # Applying the binary operator 'and' (line 749)
        result_and_keyword_321603 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 16), 'and', result_eq_321597, result_eq_321602)
        
        # Getting the type of 'self' (line 751)
        self_321604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 16), 'self')
        # Obtaining the member '_ttinfo_list' of a type (line 751)
        _ttinfo_list_321605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 16), self_321604, '_ttinfo_list')
        # Getting the type of 'other' (line 751)
        other_321606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 37), 'other')
        # Obtaining the member '_ttinfo_list' of a type (line 751)
        _ttinfo_list_321607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 37), other_321606, '_ttinfo_list')
        # Applying the binary operator '==' (line 751)
        result_eq_321608 = python_operator(stypy.reporting.localization.Localization(__file__, 751, 16), '==', _ttinfo_list_321605, _ttinfo_list_321607)
        
        # Applying the binary operator 'and' (line 749)
        result_and_keyword_321609 = python_operator(stypy.reporting.localization.Localization(__file__, 749, 16), 'and', result_and_keyword_321603, result_eq_321608)
        
        # Assigning a type to the variable 'stypy_return_type' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'stypy_return_type', result_and_keyword_321609)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 746)
        stypy_return_type_321610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321610)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_321610

    
    # Assigning a Name to a Name (line 753):

    @norecursion
    def __ne__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__ne__'
        module_type_store = module_type_store.open_function_context('__ne__', 755, 4, False)
        # Assigning a type to the variable 'self' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.__ne__.__dict__.__setitem__('stypy_localization', localization)
        tzfile.__ne__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.__ne__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.__ne__.__dict__.__setitem__('stypy_function_name', 'tzfile.__ne__')
        tzfile.__ne__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzfile.__ne__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.__ne__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.__ne__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.__ne__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.__ne__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.__ne__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.__ne__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__ne__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__ne__(...)' code ##################

        
        
        # Getting the type of 'self' (line 756)
        self_321611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 20), 'self')
        # Getting the type of 'other' (line 756)
        other_321612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 28), 'other')
        # Applying the binary operator '==' (line 756)
        result_eq_321613 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 20), '==', self_321611, other_321612)
        
        # Applying the 'not' unary operator (line 756)
        result_not__321614 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 15), 'not', result_eq_321613)
        
        # Assigning a type to the variable 'stypy_return_type' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'stypy_return_type', result_not__321614)
        
        # ################# End of '__ne__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__ne__' in the type store
        # Getting the type of 'stypy_return_type' (line 755)
        stypy_return_type_321615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321615)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__ne__'
        return stypy_return_type_321615


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 758, 4, False)
        # Assigning a type to the variable 'self' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'tzfile.stypy__repr__')
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_321616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 15), 'str', '%s(%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 759)
        tuple_321617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 759, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 759)
        # Adding element type (line 759)
        # Getting the type of 'self' (line 759)
        self_321618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 27), 'self')
        # Obtaining the member '__class__' of a type (line 759)
        class___321619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 27), self_321618, '__class__')
        # Obtaining the member '__name__' of a type (line 759)
        name___321620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 27), class___321619, '__name__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 27), tuple_321617, name___321620)
        # Adding element type (line 759)
        
        # Call to repr(...): (line 759)
        # Processing the call arguments (line 759)
        # Getting the type of 'self' (line 759)
        self_321622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 57), 'self', False)
        # Obtaining the member '_filename' of a type (line 759)
        _filename_321623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 57), self_321622, '_filename')
        # Processing the call keyword arguments (line 759)
        kwargs_321624 = {}
        # Getting the type of 'repr' (line 759)
        repr_321621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 52), 'repr', False)
        # Calling repr(args, kwargs) (line 759)
        repr_call_result_321625 = invoke(stypy.reporting.localization.Localization(__file__, 759, 52), repr_321621, *[_filename_321623], **kwargs_321624)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 759, 27), tuple_321617, repr_call_result_321625)
        
        # Applying the binary operator '%' (line 759)
        result_mod_321626 = python_operator(stypy.reporting.localization.Localization(__file__, 759, 15), '%', str_321616, tuple_321617)
        
        # Assigning a type to the variable 'stypy_return_type' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 8), 'stypy_return_type', result_mod_321626)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 758)
        stypy_return_type_321627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321627)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_321627


    @norecursion
    def __reduce__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__reduce__'
        module_type_store = module_type_store.open_function_context('__reduce__', 761, 4, False)
        # Assigning a type to the variable 'self' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.__reduce__.__dict__.__setitem__('stypy_localization', localization)
        tzfile.__reduce__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.__reduce__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.__reduce__.__dict__.__setitem__('stypy_function_name', 'tzfile.__reduce__')
        tzfile.__reduce__.__dict__.__setitem__('stypy_param_names_list', [])
        tzfile.__reduce__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.__reduce__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.__reduce__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.__reduce__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.__reduce__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.__reduce__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.__reduce__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__reduce__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__reduce__(...)' code ##################

        
        # Call to __reduce_ex__(...): (line 762)
        # Processing the call arguments (line 762)
        # Getting the type of 'None' (line 762)
        None_321630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 34), 'None', False)
        # Processing the call keyword arguments (line 762)
        kwargs_321631 = {}
        # Getting the type of 'self' (line 762)
        self_321628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 15), 'self', False)
        # Obtaining the member '__reduce_ex__' of a type (line 762)
        reduce_ex___321629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 15), self_321628, '__reduce_ex__')
        # Calling __reduce_ex__(args, kwargs) (line 762)
        reduce_ex___call_result_321632 = invoke(stypy.reporting.localization.Localization(__file__, 762, 15), reduce_ex___321629, *[None_321630], **kwargs_321631)
        
        # Assigning a type to the variable 'stypy_return_type' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'stypy_return_type', reduce_ex___call_result_321632)
        
        # ################# End of '__reduce__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__reduce__' in the type store
        # Getting the type of 'stypy_return_type' (line 761)
        stypy_return_type_321633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321633)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__reduce__'
        return stypy_return_type_321633


    @norecursion
    def __reduce_ex__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__reduce_ex__'
        module_type_store = module_type_store.open_function_context('__reduce_ex__', 764, 4, False)
        # Assigning a type to the variable 'self' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_localization', localization)
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_function_name', 'tzfile.__reduce_ex__')
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_param_names_list', ['protocol'])
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzfile.__reduce_ex__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzfile.__reduce_ex__', ['protocol'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__reduce_ex__', localization, ['protocol'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__reduce_ex__(...)' code ##################

        
        # Obtaining an instance of the builtin type 'tuple' (line 765)
        tuple_321634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 765)
        # Adding element type (line 765)
        # Getting the type of 'self' (line 765)
        self_321635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 16), 'self')
        # Obtaining the member '__class__' of a type (line 765)
        class___321636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 16), self_321635, '__class__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 16), tuple_321634, class___321636)
        # Adding element type (line 765)
        
        # Obtaining an instance of the builtin type 'tuple' (line 765)
        tuple_321637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 765)
        # Adding element type (line 765)
        # Getting the type of 'None' (line 765)
        None_321638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 33), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 33), tuple_321637, None_321638)
        # Adding element type (line 765)
        # Getting the type of 'self' (line 765)
        self_321639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 39), 'self')
        # Obtaining the member '_filename' of a type (line 765)
        _filename_321640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 39), self_321639, '_filename')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 33), tuple_321637, _filename_321640)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 16), tuple_321634, tuple_321637)
        # Adding element type (line 765)
        # Getting the type of 'self' (line 765)
        self_321641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 56), 'self')
        # Obtaining the member '__dict__' of a type (line 765)
        dict___321642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 56), self_321641, '__dict__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 16), tuple_321634, dict___321642)
        
        # Assigning a type to the variable 'stypy_return_type' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'stypy_return_type', tuple_321634)
        
        # ################# End of '__reduce_ex__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__reduce_ex__' in the type store
        # Getting the type of 'stypy_return_type' (line 764)
        stypy_return_type_321643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321643)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__reduce_ex__'
        return stypy_return_type_321643


# Assigning a type to the variable 'tzfile' (line 334)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 0), 'tzfile', tzfile)

# Assigning a Name to a Name (line 753):
# Getting the type of 'None' (line 753)
None_321644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 15), 'None')
# Getting the type of 'tzfile'
tzfile_321645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'tzfile')
# Setting the type of the member '__hash__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), tzfile_321645, '__hash__', None_321644)
# Declaration of the 'tzrange' class
# Getting the type of 'tzrangebase' (line 768)
tzrangebase_321646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 14), 'tzrangebase')

class tzrange(tzrangebase_321646, ):
    str_321647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 841, (-1)), 'str', '\n    The ``tzrange`` object is a time zone specified by a set of offsets and\n    abbreviations, equivalent to the way the ``TZ`` variable can be specified\n    in POSIX-like systems, but using Python delta objects to specify DST\n    start, end and offsets.\n\n    :param stdabbr:\n        The abbreviation for standard time (e.g. ``\'EST\'``).\n\n    :param stdoffset:\n        An integer or :class:`datetime.timedelta` object or equivalent\n        specifying the base offset from UTC.\n\n        If unspecified, +00:00 is used.\n\n    :param dstabbr:\n        The abbreviation for DST / "Summer" time (e.g. ``\'EDT\'``).\n\n        If specified, with no other DST information, DST is assumed to occur\n        and the default behavior or ``dstoffset``, ``start`` and ``end`` is\n        used. If unspecified and no other DST information is specified, it\n        is assumed that this zone has no DST.\n\n        If this is unspecified and other DST information is *is* specified,\n        DST occurs in the zone but the time zone abbreviation is left\n        unchanged.\n\n    :param dstoffset:\n        A an integer or :class:`datetime.timedelta` object or equivalent\n        specifying the UTC offset during DST. If unspecified and any other DST\n        information is specified, it is assumed to be the STD offset +1 hour.\n\n    :param start:\n        A :class:`relativedelta.relativedelta` object or equivalent specifying\n        the time and time of year that daylight savings time starts. To specify,\n        for example, that DST starts at 2AM on the 2nd Sunday in March, pass:\n\n            ``relativedelta(hours=2, month=3, day=1, weekday=SU(+2))``\n\n        If unspecified and any other DST information is specified, the default\n        value is 2 AM on the first Sunday in April.\n\n    :param end:\n        A :class:`relativedelta.relativedelta` object or equivalent representing\n        the time and time of year that daylight savings time ends, with the\n        same specification method as in ``start``. One note is that this should\n        point to the first time in the *standard* zone, so if a transition\n        occurs at 2AM in the DST zone and the clocks are set back 1 hour to 1AM,\n        set the `hours` parameter to +1.\n\n\n    **Examples:**\n\n    .. testsetup:: tzrange\n\n        from dateutil.tz import tzrange, tzstr\n\n    .. doctest:: tzrange\n\n        >>> tzstr(\'EST5EDT\') == tzrange("EST", -18000, "EDT")\n        True\n\n        >>> from dateutil.relativedelta import *\n        >>> range1 = tzrange("EST", -18000, "EDT")\n        >>> range2 = tzrange("EST", -18000, "EDT", -14400,\n        ...                  relativedelta(hours=+2, month=4, day=1,\n        ...                                weekday=SU(+1)),\n        ...                  relativedelta(hours=+1, month=10, day=31,\n        ...                                weekday=SU(-1)))\n        >>> tzstr(\'EST5EDT\') == range1 == range2\n        True\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 842)
        None_321648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 42), 'None')
        # Getting the type of 'None' (line 843)
        None_321649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 25), 'None')
        # Getting the type of 'None' (line 843)
        None_321650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 41), 'None')
        # Getting the type of 'None' (line 844)
        None_321651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 23), 'None')
        # Getting the type of 'None' (line 844)
        None_321652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 33), 'None')
        defaults = [None_321648, None_321649, None_321650, None_321651, None_321652]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 842, 4, False)
        # Assigning a type to the variable 'self' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzrange.__init__', ['stdabbr', 'stdoffset', 'dstabbr', 'dstoffset', 'start', 'end'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['stdabbr', 'stdoffset', 'dstabbr', 'dstoffset', 'start', 'end'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        # Marking variables as global (line 846)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 846, 8), 'relativedelta')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 847, 8))
        
        # 'from dateutil import relativedelta' statement (line 847)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
        import_321653 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 847, 8), 'dateutil')

        if (type(import_321653) is not StypyTypeError):

            if (import_321653 != 'pyd_module'):
                __import__(import_321653)
                sys_modules_321654 = sys.modules[import_321653]
                import_from_module(stypy.reporting.localization.Localization(__file__, 847, 8), 'dateutil', sys_modules_321654.module_type_store, module_type_store, ['relativedelta'])
                nest_module(stypy.reporting.localization.Localization(__file__, 847, 8), __file__, sys_modules_321654, sys_modules_321654.module_type_store, module_type_store)
            else:
                from dateutil import relativedelta

                import_from_module(stypy.reporting.localization.Localization(__file__, 847, 8), 'dateutil', None, module_type_store, ['relativedelta'], [relativedelta])

        else:
            # Assigning a type to the variable 'dateutil' (line 847)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 8), 'dateutil', import_321653)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')
        
        
        # Assigning a Name to a Attribute (line 849):
        
        # Assigning a Name to a Attribute (line 849):
        # Getting the type of 'stdabbr' (line 849)
        stdabbr_321655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 25), 'stdabbr')
        # Getting the type of 'self' (line 849)
        self_321656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'self')
        # Setting the type of the member '_std_abbr' of a type (line 849)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 8), self_321656, '_std_abbr', stdabbr_321655)
        
        # Assigning a Name to a Attribute (line 850):
        
        # Assigning a Name to a Attribute (line 850):
        # Getting the type of 'dstabbr' (line 850)
        dstabbr_321657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 25), 'dstabbr')
        # Getting the type of 'self' (line 850)
        self_321658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 8), 'self')
        # Setting the type of the member '_dst_abbr' of a type (line 850)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 8), self_321658, '_dst_abbr', dstabbr_321657)
        
        
        # SSA begins for try-except statement (line 852)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 853):
        
        # Assigning a Call to a Name (line 853):
        
        # Call to _total_seconds(...): (line 853)
        # Processing the call arguments (line 853)
        # Getting the type of 'stdoffset' (line 853)
        stdoffset_321660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 39), 'stdoffset', False)
        # Processing the call keyword arguments (line 853)
        kwargs_321661 = {}
        # Getting the type of '_total_seconds' (line 853)
        _total_seconds_321659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 24), '_total_seconds', False)
        # Calling _total_seconds(args, kwargs) (line 853)
        _total_seconds_call_result_321662 = invoke(stypy.reporting.localization.Localization(__file__, 853, 24), _total_seconds_321659, *[stdoffset_321660], **kwargs_321661)
        
        # Assigning a type to the variable 'stdoffset' (line 853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 12), 'stdoffset', _total_seconds_call_result_321662)
        # SSA branch for the except part of a try statement (line 852)
        # SSA branch for the except 'Tuple' branch of a try statement (line 852)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 852)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 857)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 858):
        
        # Assigning a Call to a Name (line 858):
        
        # Call to _total_seconds(...): (line 858)
        # Processing the call arguments (line 858)
        # Getting the type of 'dstoffset' (line 858)
        dstoffset_321664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 39), 'dstoffset', False)
        # Processing the call keyword arguments (line 858)
        kwargs_321665 = {}
        # Getting the type of '_total_seconds' (line 858)
        _total_seconds_321663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 24), '_total_seconds', False)
        # Calling _total_seconds(args, kwargs) (line 858)
        _total_seconds_call_result_321666 = invoke(stypy.reporting.localization.Localization(__file__, 858, 24), _total_seconds_321663, *[dstoffset_321664], **kwargs_321665)
        
        # Assigning a type to the variable 'dstoffset' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 12), 'dstoffset', _total_seconds_call_result_321666)
        # SSA branch for the except part of a try statement (line 857)
        # SSA branch for the except 'Tuple' branch of a try statement (line 857)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 857)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 862)
        # Getting the type of 'stdoffset' (line 862)
        stdoffset_321667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 8), 'stdoffset')
        # Getting the type of 'None' (line 862)
        None_321668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 28), 'None')
        
        (may_be_321669, more_types_in_union_321670) = may_not_be_none(stdoffset_321667, None_321668)

        if may_be_321669:

            if more_types_in_union_321670:
                # Runtime conditional SSA (line 862)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 863):
            
            # Assigning a Call to a Attribute (line 863):
            
            # Call to timedelta(...): (line 863)
            # Processing the call keyword arguments (line 863)
            # Getting the type of 'stdoffset' (line 863)
            stdoffset_321673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 58), 'stdoffset', False)
            keyword_321674 = stdoffset_321673
            kwargs_321675 = {'seconds': keyword_321674}
            # Getting the type of 'datetime' (line 863)
            datetime_321671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 31), 'datetime', False)
            # Obtaining the member 'timedelta' of a type (line 863)
            timedelta_321672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 31), datetime_321671, 'timedelta')
            # Calling timedelta(args, kwargs) (line 863)
            timedelta_call_result_321676 = invoke(stypy.reporting.localization.Localization(__file__, 863, 31), timedelta_321672, *[], **kwargs_321675)
            
            # Getting the type of 'self' (line 863)
            self_321677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 12), 'self')
            # Setting the type of the member '_std_offset' of a type (line 863)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 12), self_321677, '_std_offset', timedelta_call_result_321676)

            if more_types_in_union_321670:
                # Runtime conditional SSA for else branch (line 862)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_321669) or more_types_in_union_321670):
            
            # Assigning a Name to a Attribute (line 865):
            
            # Assigning a Name to a Attribute (line 865):
            # Getting the type of 'ZERO' (line 865)
            ZERO_321678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 31), 'ZERO')
            # Getting the type of 'self' (line 865)
            self_321679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 12), 'self')
            # Setting the type of the member '_std_offset' of a type (line 865)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 12), self_321679, '_std_offset', ZERO_321678)

            if (may_be_321669 and more_types_in_union_321670):
                # SSA join for if statement (line 862)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 867)
        # Getting the type of 'dstoffset' (line 867)
        dstoffset_321680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'dstoffset')
        # Getting the type of 'None' (line 867)
        None_321681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 28), 'None')
        
        (may_be_321682, more_types_in_union_321683) = may_not_be_none(dstoffset_321680, None_321681)

        if may_be_321682:

            if more_types_in_union_321683:
                # Runtime conditional SSA (line 867)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 868):
            
            # Assigning a Call to a Attribute (line 868):
            
            # Call to timedelta(...): (line 868)
            # Processing the call keyword arguments (line 868)
            # Getting the type of 'dstoffset' (line 868)
            dstoffset_321686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 58), 'dstoffset', False)
            keyword_321687 = dstoffset_321686
            kwargs_321688 = {'seconds': keyword_321687}
            # Getting the type of 'datetime' (line 868)
            datetime_321684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 31), 'datetime', False)
            # Obtaining the member 'timedelta' of a type (line 868)
            timedelta_321685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 31), datetime_321684, 'timedelta')
            # Calling timedelta(args, kwargs) (line 868)
            timedelta_call_result_321689 = invoke(stypy.reporting.localization.Localization(__file__, 868, 31), timedelta_321685, *[], **kwargs_321688)
            
            # Getting the type of 'self' (line 868)
            self_321690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 12), 'self')
            # Setting the type of the member '_dst_offset' of a type (line 868)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 12), self_321690, '_dst_offset', timedelta_call_result_321689)

            if more_types_in_union_321683:
                # Runtime conditional SSA for else branch (line 867)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_321682) or more_types_in_union_321683):
            
            
            # Evaluating a boolean operation
            # Getting the type of 'dstabbr' (line 869)
            dstabbr_321691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 13), 'dstabbr')
            
            # Getting the type of 'stdoffset' (line 869)
            stdoffset_321692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 25), 'stdoffset')
            # Getting the type of 'None' (line 869)
            None_321693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 42), 'None')
            # Applying the binary operator 'isnot' (line 869)
            result_is_not_321694 = python_operator(stypy.reporting.localization.Localization(__file__, 869, 25), 'isnot', stdoffset_321692, None_321693)
            
            # Applying the binary operator 'and' (line 869)
            result_and_keyword_321695 = python_operator(stypy.reporting.localization.Localization(__file__, 869, 13), 'and', dstabbr_321691, result_is_not_321694)
            
            # Testing the type of an if condition (line 869)
            if_condition_321696 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 869, 13), result_and_keyword_321695)
            # Assigning a type to the variable 'if_condition_321696' (line 869)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 13), 'if_condition_321696', if_condition_321696)
            # SSA begins for if statement (line 869)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Attribute (line 870):
            
            # Assigning a BinOp to a Attribute (line 870):
            # Getting the type of 'self' (line 870)
            self_321697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 31), 'self')
            # Obtaining the member '_std_offset' of a type (line 870)
            _std_offset_321698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 31), self_321697, '_std_offset')
            
            # Call to timedelta(...): (line 870)
            # Processing the call keyword arguments (line 870)
            
            int_321701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 76), 'int')
            # Applying the 'uadd' unary operator (line 870)
            result___pos___321702 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 75), 'uadd', int_321701)
            
            keyword_321703 = result___pos___321702
            kwargs_321704 = {'hours': keyword_321703}
            # Getting the type of 'datetime' (line 870)
            datetime_321699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 50), 'datetime', False)
            # Obtaining the member 'timedelta' of a type (line 870)
            timedelta_321700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 50), datetime_321699, 'timedelta')
            # Calling timedelta(args, kwargs) (line 870)
            timedelta_call_result_321705 = invoke(stypy.reporting.localization.Localization(__file__, 870, 50), timedelta_321700, *[], **kwargs_321704)
            
            # Applying the binary operator '+' (line 870)
            result_add_321706 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 31), '+', _std_offset_321698, timedelta_call_result_321705)
            
            # Getting the type of 'self' (line 870)
            self_321707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 12), 'self')
            # Setting the type of the member '_dst_offset' of a type (line 870)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 12), self_321707, '_dst_offset', result_add_321706)
            # SSA branch for the else part of an if statement (line 869)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Attribute (line 872):
            
            # Assigning a Name to a Attribute (line 872):
            # Getting the type of 'ZERO' (line 872)
            ZERO_321708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 31), 'ZERO')
            # Getting the type of 'self' (line 872)
            self_321709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 12), 'self')
            # Setting the type of the member '_dst_offset' of a type (line 872)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 12), self_321709, '_dst_offset', ZERO_321708)
            # SSA join for if statement (line 869)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_321682 and more_types_in_union_321683):
                # SSA join for if statement (line 867)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'dstabbr' (line 874)
        dstabbr_321710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 11), 'dstabbr')
        
        # Getting the type of 'start' (line 874)
        start_321711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 23), 'start')
        # Getting the type of 'None' (line 874)
        None_321712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 32), 'None')
        # Applying the binary operator 'is' (line 874)
        result_is__321713 = python_operator(stypy.reporting.localization.Localization(__file__, 874, 23), 'is', start_321711, None_321712)
        
        # Applying the binary operator 'and' (line 874)
        result_and_keyword_321714 = python_operator(stypy.reporting.localization.Localization(__file__, 874, 11), 'and', dstabbr_321710, result_is__321713)
        
        # Testing the type of an if condition (line 874)
        if_condition_321715 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 874, 8), result_and_keyword_321714)
        # Assigning a type to the variable 'if_condition_321715' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'if_condition_321715', if_condition_321715)
        # SSA begins for if statement (line 874)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 875):
        
        # Assigning a Call to a Attribute (line 875):
        
        # Call to relativedelta(...): (line 875)
        # Processing the call keyword arguments (line 875)
        
        int_321718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 23), 'int')
        # Applying the 'uadd' unary operator (line 876)
        result___pos___321719 = python_operator(stypy.reporting.localization.Localization(__file__, 876, 22), 'uadd', int_321718)
        
        keyword_321720 = result___pos___321719
        int_321721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 32), 'int')
        keyword_321722 = int_321721
        int_321723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 39), 'int')
        keyword_321724 = int_321723
        
        # Call to SU(...): (line 876)
        # Processing the call arguments (line 876)
        
        int_321727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 68), 'int')
        # Applying the 'uadd' unary operator (line 876)
        result___pos___321728 = python_operator(stypy.reporting.localization.Localization(__file__, 876, 67), 'uadd', int_321727)
        
        # Processing the call keyword arguments (line 876)
        kwargs_321729 = {}
        # Getting the type of 'relativedelta' (line 876)
        relativedelta_321725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 50), 'relativedelta', False)
        # Obtaining the member 'SU' of a type (line 876)
        SU_321726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 50), relativedelta_321725, 'SU')
        # Calling SU(args, kwargs) (line 876)
        SU_call_result_321730 = invoke(stypy.reporting.localization.Localization(__file__, 876, 50), SU_321726, *[result___pos___321728], **kwargs_321729)
        
        keyword_321731 = SU_call_result_321730
        kwargs_321732 = {'hours': keyword_321720, 'weekday': keyword_321731, 'day': keyword_321724, 'month': keyword_321722}
        # Getting the type of 'relativedelta' (line 875)
        relativedelta_321716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 32), 'relativedelta', False)
        # Obtaining the member 'relativedelta' of a type (line 875)
        relativedelta_321717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 32), relativedelta_321716, 'relativedelta')
        # Calling relativedelta(args, kwargs) (line 875)
        relativedelta_call_result_321733 = invoke(stypy.reporting.localization.Localization(__file__, 875, 32), relativedelta_321717, *[], **kwargs_321732)
        
        # Getting the type of 'self' (line 875)
        self_321734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 12), 'self')
        # Setting the type of the member '_start_delta' of a type (line 875)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 12), self_321734, '_start_delta', relativedelta_call_result_321733)
        # SSA branch for the else part of an if statement (line 874)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 878):
        
        # Assigning a Name to a Attribute (line 878):
        # Getting the type of 'start' (line 878)
        start_321735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 32), 'start')
        # Getting the type of 'self' (line 878)
        self_321736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 12), 'self')
        # Setting the type of the member '_start_delta' of a type (line 878)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 12), self_321736, '_start_delta', start_321735)
        # SSA join for if statement (line 874)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'dstabbr' (line 880)
        dstabbr_321737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 11), 'dstabbr')
        
        # Getting the type of 'end' (line 880)
        end_321738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 23), 'end')
        # Getting the type of 'None' (line 880)
        None_321739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 30), 'None')
        # Applying the binary operator 'is' (line 880)
        result_is__321740 = python_operator(stypy.reporting.localization.Localization(__file__, 880, 23), 'is', end_321738, None_321739)
        
        # Applying the binary operator 'and' (line 880)
        result_and_keyword_321741 = python_operator(stypy.reporting.localization.Localization(__file__, 880, 11), 'and', dstabbr_321737, result_is__321740)
        
        # Testing the type of an if condition (line 880)
        if_condition_321742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 880, 8), result_and_keyword_321741)
        # Assigning a type to the variable 'if_condition_321742' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'if_condition_321742', if_condition_321742)
        # SSA begins for if statement (line 880)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 881):
        
        # Assigning a Call to a Attribute (line 881):
        
        # Call to relativedelta(...): (line 881)
        # Processing the call keyword arguments (line 881)
        
        int_321745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 23), 'int')
        # Applying the 'uadd' unary operator (line 882)
        result___pos___321746 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 22), 'uadd', int_321745)
        
        keyword_321747 = result___pos___321746
        int_321748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 32), 'int')
        keyword_321749 = int_321748
        int_321750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 40), 'int')
        keyword_321751 = int_321750
        
        # Call to SU(...): (line 882)
        # Processing the call arguments (line 882)
        int_321754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 69), 'int')
        # Processing the call keyword arguments (line 882)
        kwargs_321755 = {}
        # Getting the type of 'relativedelta' (line 882)
        relativedelta_321752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 52), 'relativedelta', False)
        # Obtaining the member 'SU' of a type (line 882)
        SU_321753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 52), relativedelta_321752, 'SU')
        # Calling SU(args, kwargs) (line 882)
        SU_call_result_321756 = invoke(stypy.reporting.localization.Localization(__file__, 882, 52), SU_321753, *[int_321754], **kwargs_321755)
        
        keyword_321757 = SU_call_result_321756
        kwargs_321758 = {'hours': keyword_321747, 'weekday': keyword_321757, 'day': keyword_321751, 'month': keyword_321749}
        # Getting the type of 'relativedelta' (line 881)
        relativedelta_321743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 30), 'relativedelta', False)
        # Obtaining the member 'relativedelta' of a type (line 881)
        relativedelta_321744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 30), relativedelta_321743, 'relativedelta')
        # Calling relativedelta(args, kwargs) (line 881)
        relativedelta_call_result_321759 = invoke(stypy.reporting.localization.Localization(__file__, 881, 30), relativedelta_321744, *[], **kwargs_321758)
        
        # Getting the type of 'self' (line 881)
        self_321760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 12), 'self')
        # Setting the type of the member '_end_delta' of a type (line 881)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 12), self_321760, '_end_delta', relativedelta_call_result_321759)
        # SSA branch for the else part of an if statement (line 880)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 884):
        
        # Assigning a Name to a Attribute (line 884):
        # Getting the type of 'end' (line 884)
        end_321761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 30), 'end')
        # Getting the type of 'self' (line 884)
        self_321762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 12), 'self')
        # Setting the type of the member '_end_delta' of a type (line 884)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 12), self_321762, '_end_delta', end_321761)
        # SSA join for if statement (line 880)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Attribute (line 886):
        
        # Assigning a BinOp to a Attribute (line 886):
        # Getting the type of 'self' (line 886)
        self_321763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 33), 'self')
        # Obtaining the member '_dst_offset' of a type (line 886)
        _dst_offset_321764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 33), self_321763, '_dst_offset')
        # Getting the type of 'self' (line 886)
        self_321765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 52), 'self')
        # Obtaining the member '_std_offset' of a type (line 886)
        _std_offset_321766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 52), self_321765, '_std_offset')
        # Applying the binary operator '-' (line 886)
        result_sub_321767 = python_operator(stypy.reporting.localization.Localization(__file__, 886, 33), '-', _dst_offset_321764, _std_offset_321766)
        
        # Getting the type of 'self' (line 886)
        self_321768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'self')
        # Setting the type of the member '_dst_base_offset_' of a type (line 886)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 8), self_321768, '_dst_base_offset_', result_sub_321767)
        
        # Assigning a Call to a Attribute (line 887):
        
        # Assigning a Call to a Attribute (line 887):
        
        # Call to bool(...): (line 887)
        # Processing the call arguments (line 887)
        # Getting the type of 'self' (line 887)
        self_321770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 27), 'self', False)
        # Obtaining the member '_start_delta' of a type (line 887)
        _start_delta_321771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 27), self_321770, '_start_delta')
        # Processing the call keyword arguments (line 887)
        kwargs_321772 = {}
        # Getting the type of 'bool' (line 887)
        bool_321769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 22), 'bool', False)
        # Calling bool(args, kwargs) (line 887)
        bool_call_result_321773 = invoke(stypy.reporting.localization.Localization(__file__, 887, 22), bool_321769, *[_start_delta_321771], **kwargs_321772)
        
        # Getting the type of 'self' (line 887)
        self_321774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'self')
        # Setting the type of the member 'hasdst' of a type (line 887)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 8), self_321774, 'hasdst', bool_call_result_321773)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def transitions(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'transitions'
        module_type_store = module_type_store.open_function_context('transitions', 889, 4, False)
        # Assigning a type to the variable 'self' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzrange.transitions.__dict__.__setitem__('stypy_localization', localization)
        tzrange.transitions.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzrange.transitions.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzrange.transitions.__dict__.__setitem__('stypy_function_name', 'tzrange.transitions')
        tzrange.transitions.__dict__.__setitem__('stypy_param_names_list', ['year'])
        tzrange.transitions.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzrange.transitions.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzrange.transitions.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzrange.transitions.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzrange.transitions.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzrange.transitions.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzrange.transitions', ['year'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'transitions', localization, ['year'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'transitions(...)' code ##################

        str_321775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 902, (-1)), 'str', '\n        For a given year, get the DST on and off transition times, expressed\n        always on the standard time side. For zones with no transitions, this\n        function returns ``None``.\n\n        :param year:\n            The year whose transitions you would like to query.\n\n        :return:\n            Returns a :class:`tuple` of :class:`datetime.datetime` objects,\n            ``(dston, dstoff)`` for zones with an annual DST transition, or\n            ``None`` for fixed offset zones.\n        ')
        
        
        # Getting the type of 'self' (line 903)
        self_321776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 15), 'self')
        # Obtaining the member 'hasdst' of a type (line 903)
        hasdst_321777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 15), self_321776, 'hasdst')
        # Applying the 'not' unary operator (line 903)
        result_not__321778 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 11), 'not', hasdst_321777)
        
        # Testing the type of an if condition (line 903)
        if_condition_321779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 903, 8), result_not__321778)
        # Assigning a type to the variable 'if_condition_321779' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'if_condition_321779', if_condition_321779)
        # SSA begins for if statement (line 903)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 904)
        None_321780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 12), 'stypy_return_type', None_321780)
        # SSA join for if statement (line 903)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 906):
        
        # Assigning a Call to a Name (line 906):
        
        # Call to datetime(...): (line 906)
        # Processing the call arguments (line 906)
        # Getting the type of 'year' (line 906)
        year_321783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 38), 'year', False)
        int_321784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 44), 'int')
        int_321785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 47), 'int')
        # Processing the call keyword arguments (line 906)
        kwargs_321786 = {}
        # Getting the type of 'datetime' (line 906)
        datetime_321781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 20), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 906)
        datetime_321782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 906, 20), datetime_321781, 'datetime')
        # Calling datetime(args, kwargs) (line 906)
        datetime_call_result_321787 = invoke(stypy.reporting.localization.Localization(__file__, 906, 20), datetime_321782, *[year_321783, int_321784, int_321785], **kwargs_321786)
        
        # Assigning a type to the variable 'base_year' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 8), 'base_year', datetime_call_result_321787)
        
        # Assigning a BinOp to a Name (line 908):
        
        # Assigning a BinOp to a Name (line 908):
        # Getting the type of 'base_year' (line 908)
        base_year_321788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 16), 'base_year')
        # Getting the type of 'self' (line 908)
        self_321789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 28), 'self')
        # Obtaining the member '_start_delta' of a type (line 908)
        _start_delta_321790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 28), self_321789, '_start_delta')
        # Applying the binary operator '+' (line 908)
        result_add_321791 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 16), '+', base_year_321788, _start_delta_321790)
        
        # Assigning a type to the variable 'start' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'start', result_add_321791)
        
        # Assigning a BinOp to a Name (line 909):
        
        # Assigning a BinOp to a Name (line 909):
        # Getting the type of 'base_year' (line 909)
        base_year_321792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 14), 'base_year')
        # Getting the type of 'self' (line 909)
        self_321793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 26), 'self')
        # Obtaining the member '_end_delta' of a type (line 909)
        _end_delta_321794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 26), self_321793, '_end_delta')
        # Applying the binary operator '+' (line 909)
        result_add_321795 = python_operator(stypy.reporting.localization.Localization(__file__, 909, 14), '+', base_year_321792, _end_delta_321794)
        
        # Assigning a type to the variable 'end' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 8), 'end', result_add_321795)
        
        # Obtaining an instance of the builtin type 'tuple' (line 911)
        tuple_321796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 911)
        # Adding element type (line 911)
        # Getting the type of 'start' (line 911)
        start_321797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 16), 'start')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 911, 16), tuple_321796, start_321797)
        # Adding element type (line 911)
        # Getting the type of 'end' (line 911)
        end_321798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 23), 'end')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 911, 16), tuple_321796, end_321798)
        
        # Assigning a type to the variable 'stypy_return_type' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 8), 'stypy_return_type', tuple_321796)
        
        # ################# End of 'transitions(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'transitions' in the type store
        # Getting the type of 'stypy_return_type' (line 889)
        stypy_return_type_321799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321799)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'transitions'
        return stypy_return_type_321799


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 913, 4, False)
        # Assigning a type to the variable 'self' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'tzrange.stypy__eq__')
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['other'])
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzrange.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzrange.stypy__eq__', ['other'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['other'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 914)
        # Processing the call arguments (line 914)
        # Getting the type of 'other' (line 914)
        other_321801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 26), 'other', False)
        # Getting the type of 'tzrange' (line 914)
        tzrange_321802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 33), 'tzrange', False)
        # Processing the call keyword arguments (line 914)
        kwargs_321803 = {}
        # Getting the type of 'isinstance' (line 914)
        isinstance_321800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 914)
        isinstance_call_result_321804 = invoke(stypy.reporting.localization.Localization(__file__, 914, 15), isinstance_321800, *[other_321801, tzrange_321802], **kwargs_321803)
        
        # Applying the 'not' unary operator (line 914)
        result_not__321805 = python_operator(stypy.reporting.localization.Localization(__file__, 914, 11), 'not', isinstance_call_result_321804)
        
        # Testing the type of an if condition (line 914)
        if_condition_321806 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 914, 8), result_not__321805)
        # Assigning a type to the variable 'if_condition_321806' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 8), 'if_condition_321806', if_condition_321806)
        # SSA begins for if statement (line 914)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'NotImplemented' (line 915)
        NotImplemented_321807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 19), 'NotImplemented')
        # Assigning a type to the variable 'stypy_return_type' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 12), 'stypy_return_type', NotImplemented_321807)
        # SSA join for if statement (line 914)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 917)
        self_321808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 16), 'self')
        # Obtaining the member '_std_abbr' of a type (line 917)
        _std_abbr_321809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 16), self_321808, '_std_abbr')
        # Getting the type of 'other' (line 917)
        other_321810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 34), 'other')
        # Obtaining the member '_std_abbr' of a type (line 917)
        _std_abbr_321811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 34), other_321810, '_std_abbr')
        # Applying the binary operator '==' (line 917)
        result_eq_321812 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 16), '==', _std_abbr_321809, _std_abbr_321811)
        
        
        # Getting the type of 'self' (line 918)
        self_321813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 16), 'self')
        # Obtaining the member '_dst_abbr' of a type (line 918)
        _dst_abbr_321814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 16), self_321813, '_dst_abbr')
        # Getting the type of 'other' (line 918)
        other_321815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 34), 'other')
        # Obtaining the member '_dst_abbr' of a type (line 918)
        _dst_abbr_321816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 34), other_321815, '_dst_abbr')
        # Applying the binary operator '==' (line 918)
        result_eq_321817 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 16), '==', _dst_abbr_321814, _dst_abbr_321816)
        
        # Applying the binary operator 'and' (line 917)
        result_and_keyword_321818 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 16), 'and', result_eq_321812, result_eq_321817)
        
        # Getting the type of 'self' (line 919)
        self_321819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 16), 'self')
        # Obtaining the member '_std_offset' of a type (line 919)
        _std_offset_321820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 16), self_321819, '_std_offset')
        # Getting the type of 'other' (line 919)
        other_321821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 36), 'other')
        # Obtaining the member '_std_offset' of a type (line 919)
        _std_offset_321822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 36), other_321821, '_std_offset')
        # Applying the binary operator '==' (line 919)
        result_eq_321823 = python_operator(stypy.reporting.localization.Localization(__file__, 919, 16), '==', _std_offset_321820, _std_offset_321822)
        
        # Applying the binary operator 'and' (line 917)
        result_and_keyword_321824 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 16), 'and', result_and_keyword_321818, result_eq_321823)
        
        # Getting the type of 'self' (line 920)
        self_321825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 16), 'self')
        # Obtaining the member '_dst_offset' of a type (line 920)
        _dst_offset_321826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 16), self_321825, '_dst_offset')
        # Getting the type of 'other' (line 920)
        other_321827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 36), 'other')
        # Obtaining the member '_dst_offset' of a type (line 920)
        _dst_offset_321828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 36), other_321827, '_dst_offset')
        # Applying the binary operator '==' (line 920)
        result_eq_321829 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 16), '==', _dst_offset_321826, _dst_offset_321828)
        
        # Applying the binary operator 'and' (line 917)
        result_and_keyword_321830 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 16), 'and', result_and_keyword_321824, result_eq_321829)
        
        # Getting the type of 'self' (line 921)
        self_321831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 16), 'self')
        # Obtaining the member '_start_delta' of a type (line 921)
        _start_delta_321832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 16), self_321831, '_start_delta')
        # Getting the type of 'other' (line 921)
        other_321833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 37), 'other')
        # Obtaining the member '_start_delta' of a type (line 921)
        _start_delta_321834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 37), other_321833, '_start_delta')
        # Applying the binary operator '==' (line 921)
        result_eq_321835 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 16), '==', _start_delta_321832, _start_delta_321834)
        
        # Applying the binary operator 'and' (line 917)
        result_and_keyword_321836 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 16), 'and', result_and_keyword_321830, result_eq_321835)
        
        # Getting the type of 'self' (line 922)
        self_321837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 16), 'self')
        # Obtaining the member '_end_delta' of a type (line 922)
        _end_delta_321838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 16), self_321837, '_end_delta')
        # Getting the type of 'other' (line 922)
        other_321839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 35), 'other')
        # Obtaining the member '_end_delta' of a type (line 922)
        _end_delta_321840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 35), other_321839, '_end_delta')
        # Applying the binary operator '==' (line 922)
        result_eq_321841 = python_operator(stypy.reporting.localization.Localization(__file__, 922, 16), '==', _end_delta_321838, _end_delta_321840)
        
        # Applying the binary operator 'and' (line 917)
        result_and_keyword_321842 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 16), 'and', result_and_keyword_321836, result_eq_321841)
        
        # Assigning a type to the variable 'stypy_return_type' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'stypy_return_type', result_and_keyword_321842)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 913)
        stypy_return_type_321843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321843)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_321843


    @norecursion
    def _dst_base_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_dst_base_offset'
        module_type_store = module_type_store.open_function_context('_dst_base_offset', 924, 4, False)
        # Assigning a type to the variable 'self' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_localization', localization)
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_function_name', 'tzrange._dst_base_offset')
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_param_names_list', [])
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzrange._dst_base_offset.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzrange._dst_base_offset', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_dst_base_offset', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_dst_base_offset(...)' code ##################

        # Getting the type of 'self' (line 926)
        self_321844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 15), 'self')
        # Obtaining the member '_dst_base_offset_' of a type (line 926)
        _dst_base_offset__321845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 15), self_321844, '_dst_base_offset_')
        # Assigning a type to the variable 'stypy_return_type' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 8), 'stypy_return_type', _dst_base_offset__321845)
        
        # ################# End of '_dst_base_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_dst_base_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 924)
        stypy_return_type_321846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_321846)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_dst_base_offset'
        return stypy_return_type_321846


# Assigning a type to the variable 'tzrange' (line 768)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 0), 'tzrange', tzrange)
# Declaration of the 'tzstr' class
# Getting the type of 'tzrange' (line 929)
tzrange_321847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 12), 'tzrange')

class tzstr(tzrange_321847, ):
    str_321848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, (-1)), 'str', '\n    ``tzstr`` objects are time zone objects specified by a time-zone string as\n    it would be passed to a ``TZ`` variable on POSIX-style systems (see\n    the `GNU C Library: TZ Variable`_ for more details).\n\n    There is one notable exception, which is that POSIX-style time zones use an\n    inverted offset format, so normally ``GMT+3`` would be parsed as an offset\n    3 hours *behind* GMT. The ``tzstr`` time zone object will parse this as an\n    offset 3 hours *ahead* of GMT. If you would like to maintain the POSIX\n    behavior, pass a ``True`` value to ``posix_offset``.\n\n    The :class:`tzrange` object provides the same functionality, but is\n    specified using :class:`relativedelta.relativedelta` objects. rather than\n    strings.\n\n    :param s:\n        A time zone string in ``TZ`` variable format. This can be a\n        :class:`bytes` (2.x: :class:`str`), :class:`str` (2.x: :class:`unicode`)\n        or a stream emitting unicode characters (e.g. :class:`StringIO`).\n\n    :param posix_offset:\n        Optional. If set to ``True``, interpret strings such as ``GMT+3`` or\n        ``UTC+3`` as being 3 hours *behind* UTC rather than ahead, per the\n        POSIX standard.\n\n    .. _`GNU C Library: TZ Variable`:\n        https://www.gnu.org/software/libc/manual/html_node/TZ-Variable.html\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 958)
        False_321849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 39), 'False')
        defaults = [False_321849]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 958, 4, False)
        # Assigning a type to the variable 'self' (line 959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzstr.__init__', ['s', 'posix_offset'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['s', 'posix_offset'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        # Marking variables as global (line 959)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 959, 8), 'parser')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 960, 8))
        
        # 'from dateutil import parser' statement (line 960)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
        import_321850 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 960, 8), 'dateutil')

        if (type(import_321850) is not StypyTypeError):

            if (import_321850 != 'pyd_module'):
                __import__(import_321850)
                sys_modules_321851 = sys.modules[import_321850]
                import_from_module(stypy.reporting.localization.Localization(__file__, 960, 8), 'dateutil', sys_modules_321851.module_type_store, module_type_store, ['parser'])
                nest_module(stypy.reporting.localization.Localization(__file__, 960, 8), __file__, sys_modules_321851, sys_modules_321851.module_type_store, module_type_store)
            else:
                from dateutil import parser

                import_from_module(stypy.reporting.localization.Localization(__file__, 960, 8), 'dateutil', None, module_type_store, ['parser'], [parser])

        else:
            # Assigning a type to the variable 'dateutil' (line 960)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'dateutil', import_321850)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')
        
        
        # Assigning a Name to a Attribute (line 962):
        
        # Assigning a Name to a Attribute (line 962):
        # Getting the type of 's' (line 962)
        s_321852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 18), 's')
        # Getting the type of 'self' (line 962)
        self_321853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'self')
        # Setting the type of the member '_s' of a type (line 962)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 8), self_321853, '_s', s_321852)
        
        # Assigning a Call to a Name (line 964):
        
        # Assigning a Call to a Name (line 964):
        
        # Call to _parsetz(...): (line 964)
        # Processing the call arguments (line 964)
        # Getting the type of 's' (line 964)
        s_321856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 30), 's', False)
        # Processing the call keyword arguments (line 964)
        kwargs_321857 = {}
        # Getting the type of 'parser' (line 964)
        parser_321854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 14), 'parser', False)
        # Obtaining the member '_parsetz' of a type (line 964)
        _parsetz_321855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 14), parser_321854, '_parsetz')
        # Calling _parsetz(args, kwargs) (line 964)
        _parsetz_call_result_321858 = invoke(stypy.reporting.localization.Localization(__file__, 964, 14), _parsetz_321855, *[s_321856], **kwargs_321857)
        
        # Assigning a type to the variable 'res' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'res', _parsetz_call_result_321858)
        
        # Type idiom detected: calculating its left and rigth part (line 965)
        # Getting the type of 'res' (line 965)
        res_321859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 11), 'res')
        # Getting the type of 'None' (line 965)
        None_321860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 18), 'None')
        
        (may_be_321861, more_types_in_union_321862) = may_be_none(res_321859, None_321860)

        if may_be_321861:

            if more_types_in_union_321862:
                # Runtime conditional SSA (line 965)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to ValueError(...): (line 966)
            # Processing the call arguments (line 966)
            str_321864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 29), 'str', 'unknown string format')
            # Processing the call keyword arguments (line 966)
            kwargs_321865 = {}
            # Getting the type of 'ValueError' (line 966)
            ValueError_321863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 966)
            ValueError_call_result_321866 = invoke(stypy.reporting.localization.Localization(__file__, 966, 18), ValueError_321863, *[str_321864], **kwargs_321865)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 966, 12), ValueError_call_result_321866, 'raise parameter', BaseException)

            if more_types_in_union_321862:
                # SSA join for if statement (line 965)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'res' (line 970)
        res_321867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 11), 'res')
        # Obtaining the member 'stdabbr' of a type (line 970)
        stdabbr_321868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 11), res_321867, 'stdabbr')
        
        # Obtaining an instance of the builtin type 'tuple' (line 970)
        tuple_321869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 970)
        # Adding element type (line 970)
        str_321870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 27), 'str', 'GMT')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 970, 27), tuple_321869, str_321870)
        # Adding element type (line 970)
        str_321871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 34), 'str', 'UTC')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 970, 27), tuple_321869, str_321871)
        
        # Applying the binary operator 'in' (line 970)
        result_contains_321872 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 11), 'in', stdabbr_321868, tuple_321869)
        
        
        # Getting the type of 'posix_offset' (line 970)
        posix_offset_321873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 49), 'posix_offset')
        # Applying the 'not' unary operator (line 970)
        result_not__321874 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 45), 'not', posix_offset_321873)
        
        # Applying the binary operator 'and' (line 970)
        result_and_keyword_321875 = python_operator(stypy.reporting.localization.Localization(__file__, 970, 11), 'and', result_contains_321872, result_not__321874)
        
        # Testing the type of an if condition (line 970)
        if_condition_321876 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 970, 8), result_and_keyword_321875)
        # Assigning a type to the variable 'if_condition_321876' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 8), 'if_condition_321876', if_condition_321876)
        # SSA begins for if statement (line 970)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'res' (line 971)
        res_321877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 12), 'res')
        # Obtaining the member 'stdoffset' of a type (line 971)
        stdoffset_321878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 12), res_321877, 'stdoffset')
        int_321879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 29), 'int')
        # Applying the binary operator '*=' (line 971)
        result_imul_321880 = python_operator(stypy.reporting.localization.Localization(__file__, 971, 12), '*=', stdoffset_321878, int_321879)
        # Getting the type of 'res' (line 971)
        res_321881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 12), 'res')
        # Setting the type of the member 'stdoffset' of a type (line 971)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 12), res_321881, 'stdoffset', result_imul_321880)
        
        # SSA join for if statement (line 970)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 976)
        # Processing the call arguments (line 976)
        # Getting the type of 'self' (line 976)
        self_321884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 25), 'self', False)
        # Getting the type of 'res' (line 976)
        res_321885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 31), 'res', False)
        # Obtaining the member 'stdabbr' of a type (line 976)
        stdabbr_321886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 31), res_321885, 'stdabbr')
        # Getting the type of 'res' (line 976)
        res_321887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 44), 'res', False)
        # Obtaining the member 'stdoffset' of a type (line 976)
        stdoffset_321888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 44), res_321887, 'stdoffset')
        # Getting the type of 'res' (line 977)
        res_321889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 25), 'res', False)
        # Obtaining the member 'dstabbr' of a type (line 977)
        dstabbr_321890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 25), res_321889, 'dstabbr')
        # Getting the type of 'res' (line 977)
        res_321891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 38), 'res', False)
        # Obtaining the member 'dstoffset' of a type (line 977)
        dstoffset_321892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 38), res_321891, 'dstoffset')
        # Processing the call keyword arguments (line 976)
        # Getting the type of 'False' (line 978)
        False_321893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 31), 'False', False)
        keyword_321894 = False_321893
        # Getting the type of 'False' (line 978)
        False_321895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 42), 'False', False)
        keyword_321896 = False_321895
        kwargs_321897 = {'start': keyword_321894, 'end': keyword_321896}
        # Getting the type of 'tzrange' (line 976)
        tzrange_321882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), 'tzrange', False)
        # Obtaining the member '__init__' of a type (line 976)
        init___321883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 8), tzrange_321882, '__init__')
        # Calling __init__(args, kwargs) (line 976)
        init___call_result_321898 = invoke(stypy.reporting.localization.Localization(__file__, 976, 8), init___321883, *[self_321884, stdabbr_321886, stdoffset_321888, dstabbr_321890, dstoffset_321892], **kwargs_321897)
        
        
        
        # Getting the type of 'res' (line 980)
        res_321899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 15), 'res')
        # Obtaining the member 'dstabbr' of a type (line 980)
        dstabbr_321900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 15), res_321899, 'dstabbr')
        # Applying the 'not' unary operator (line 980)
        result_not__321901 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 11), 'not', dstabbr_321900)
        
        # Testing the type of an if condition (line 980)
        if_condition_321902 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 980, 8), result_not__321901)
        # Assigning a type to the variable 'if_condition_321902' (line 980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 8), 'if_condition_321902', if_condition_321902)
        # SSA begins for if statement (line 980)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 981):
        
        # Assigning a Name to a Attribute (line 981):
        # Getting the type of 'None' (line 981)
        None_321903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 32), 'None')
        # Getting the type of 'self' (line 981)
        self_321904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'self')
        # Setting the type of the member '_start_delta' of a type (line 981)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 12), self_321904, '_start_delta', None_321903)
        
        # Assigning a Name to a Attribute (line 982):
        
        # Assigning a Name to a Attribute (line 982):
        # Getting the type of 'None' (line 982)
        None_321905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 30), 'None')
        # Getting the type of 'self' (line 982)
        self_321906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'self')
        # Setting the type of the member '_end_delta' of a type (line 982)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 12), self_321906, '_end_delta', None_321905)
        # SSA branch for the else part of an if statement (line 980)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 984):
        
        # Assigning a Call to a Attribute (line 984):
        
        # Call to _delta(...): (line 984)
        # Processing the call arguments (line 984)
        # Getting the type of 'res' (line 984)
        res_321909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 44), 'res', False)
        # Obtaining the member 'start' of a type (line 984)
        start_321910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 44), res_321909, 'start')
        # Processing the call keyword arguments (line 984)
        kwargs_321911 = {}
        # Getting the type of 'self' (line 984)
        self_321907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 32), 'self', False)
        # Obtaining the member '_delta' of a type (line 984)
        _delta_321908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 32), self_321907, '_delta')
        # Calling _delta(args, kwargs) (line 984)
        _delta_call_result_321912 = invoke(stypy.reporting.localization.Localization(__file__, 984, 32), _delta_321908, *[start_321910], **kwargs_321911)
        
        # Getting the type of 'self' (line 984)
        self_321913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 12), 'self')
        # Setting the type of the member '_start_delta' of a type (line 984)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 12), self_321913, '_start_delta', _delta_call_result_321912)
        
        # Getting the type of 'self' (line 985)
        self_321914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 15), 'self')
        # Obtaining the member '_start_delta' of a type (line 985)
        _start_delta_321915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 15), self_321914, '_start_delta')
        # Testing the type of an if condition (line 985)
        if_condition_321916 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 985, 12), _start_delta_321915)
        # Assigning a type to the variable 'if_condition_321916' (line 985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 12), 'if_condition_321916', if_condition_321916)
        # SSA begins for if statement (line 985)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 986):
        
        # Assigning a Call to a Attribute (line 986):
        
        # Call to _delta(...): (line 986)
        # Processing the call arguments (line 986)
        # Getting the type of 'res' (line 986)
        res_321919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 46), 'res', False)
        # Obtaining the member 'end' of a type (line 986)
        end_321920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 46), res_321919, 'end')
        # Processing the call keyword arguments (line 986)
        int_321921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 61), 'int')
        keyword_321922 = int_321921
        kwargs_321923 = {'isend': keyword_321922}
        # Getting the type of 'self' (line 986)
        self_321917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 34), 'self', False)
        # Obtaining the member '_delta' of a type (line 986)
        _delta_321918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 34), self_321917, '_delta')
        # Calling _delta(args, kwargs) (line 986)
        _delta_call_result_321924 = invoke(stypy.reporting.localization.Localization(__file__, 986, 34), _delta_321918, *[end_321920], **kwargs_321923)
        
        # Getting the type of 'self' (line 986)
        self_321925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 16), 'self')
        # Setting the type of the member '_end_delta' of a type (line 986)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 16), self_321925, '_end_delta', _delta_call_result_321924)
        # SSA join for if statement (line 985)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 980)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 988):
        
        # Assigning a Call to a Attribute (line 988):
        
        # Call to bool(...): (line 988)
        # Processing the call arguments (line 988)
        # Getting the type of 'self' (line 988)
        self_321927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 27), 'self', False)
        # Obtaining the member '_start_delta' of a type (line 988)
        _start_delta_321928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 27), self_321927, '_start_delta')
        # Processing the call keyword arguments (line 988)
        kwargs_321929 = {}
        # Getting the type of 'bool' (line 988)
        bool_321926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 22), 'bool', False)
        # Calling bool(args, kwargs) (line 988)
        bool_call_result_321930 = invoke(stypy.reporting.localization.Localization(__file__, 988, 22), bool_321926, *[_start_delta_321928], **kwargs_321929)
        
        # Getting the type of 'self' (line 988)
        self_321931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'self')
        # Setting the type of the member 'hasdst' of a type (line 988)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 8), self_321931, 'hasdst', bool_call_result_321930)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _delta(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_321932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 990, 30), 'int')
        defaults = [int_321932]
        # Create a new context for function '_delta'
        module_type_store = module_type_store.open_function_context('_delta', 990, 4, False)
        # Assigning a type to the variable 'self' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzstr._delta.__dict__.__setitem__('stypy_localization', localization)
        tzstr._delta.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzstr._delta.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzstr._delta.__dict__.__setitem__('stypy_function_name', 'tzstr._delta')
        tzstr._delta.__dict__.__setitem__('stypy_param_names_list', ['x', 'isend'])
        tzstr._delta.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzstr._delta.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzstr._delta.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzstr._delta.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzstr._delta.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzstr._delta.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzstr._delta', ['x', 'isend'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_delta', localization, ['x', 'isend'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_delta(...)' code ##################

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 991, 8))
        
        # 'from dateutil import relativedelta' statement (line 991)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
        import_321933 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 991, 8), 'dateutil')

        if (type(import_321933) is not StypyTypeError):

            if (import_321933 != 'pyd_module'):
                __import__(import_321933)
                sys_modules_321934 = sys.modules[import_321933]
                import_from_module(stypy.reporting.localization.Localization(__file__, 991, 8), 'dateutil', sys_modules_321934.module_type_store, module_type_store, ['relativedelta'])
                nest_module(stypy.reporting.localization.Localization(__file__, 991, 8), __file__, sys_modules_321934, sys_modules_321934.module_type_store, module_type_store)
            else:
                from dateutil import relativedelta

                import_from_module(stypy.reporting.localization.Localization(__file__, 991, 8), 'dateutil', None, module_type_store, ['relativedelta'], [relativedelta])

        else:
            # Assigning a type to the variable 'dateutil' (line 991)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'dateutil', import_321933)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')
        
        
        # Assigning a Dict to a Name (line 992):
        
        # Assigning a Dict to a Name (line 992):
        
        # Obtaining an instance of the builtin type 'dict' (line 992)
        dict_321935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 992, 17), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 992)
        
        # Assigning a type to the variable 'kwargs' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 8), 'kwargs', dict_321935)
        
        
        # Getting the type of 'x' (line 993)
        x_321936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 11), 'x')
        # Obtaining the member 'month' of a type (line 993)
        month_321937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 11), x_321936, 'month')
        # Getting the type of 'None' (line 993)
        None_321938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 26), 'None')
        # Applying the binary operator 'isnot' (line 993)
        result_is_not_321939 = python_operator(stypy.reporting.localization.Localization(__file__, 993, 11), 'isnot', month_321937, None_321938)
        
        # Testing the type of an if condition (line 993)
        if_condition_321940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 993, 8), result_is_not_321939)
        # Assigning a type to the variable 'if_condition_321940' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'if_condition_321940', if_condition_321940)
        # SSA begins for if statement (line 993)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 994):
        
        # Assigning a Attribute to a Subscript (line 994):
        # Getting the type of 'x' (line 994)
        x_321941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 30), 'x')
        # Obtaining the member 'month' of a type (line 994)
        month_321942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 30), x_321941, 'month')
        # Getting the type of 'kwargs' (line 994)
        kwargs_321943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'kwargs')
        str_321944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 19), 'str', 'month')
        # Storing an element on a container (line 994)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 994, 12), kwargs_321943, (str_321944, month_321942))
        
        
        # Getting the type of 'x' (line 995)
        x_321945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 15), 'x')
        # Obtaining the member 'weekday' of a type (line 995)
        weekday_321946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 15), x_321945, 'weekday')
        # Getting the type of 'None' (line 995)
        None_321947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 32), 'None')
        # Applying the binary operator 'isnot' (line 995)
        result_is_not_321948 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 15), 'isnot', weekday_321946, None_321947)
        
        # Testing the type of an if condition (line 995)
        if_condition_321949 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 995, 12), result_is_not_321948)
        # Assigning a type to the variable 'if_condition_321949' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 12), 'if_condition_321949', if_condition_321949)
        # SSA begins for if statement (line 995)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 996):
        
        # Assigning a Call to a Subscript (line 996):
        
        # Call to weekday(...): (line 996)
        # Processing the call arguments (line 996)
        # Getting the type of 'x' (line 996)
        x_321952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 58), 'x', False)
        # Obtaining the member 'weekday' of a type (line 996)
        weekday_321953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 58), x_321952, 'weekday')
        # Getting the type of 'x' (line 996)
        x_321954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 69), 'x', False)
        # Obtaining the member 'week' of a type (line 996)
        week_321955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 69), x_321954, 'week')
        # Processing the call keyword arguments (line 996)
        kwargs_321956 = {}
        # Getting the type of 'relativedelta' (line 996)
        relativedelta_321950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 36), 'relativedelta', False)
        # Obtaining the member 'weekday' of a type (line 996)
        weekday_321951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 36), relativedelta_321950, 'weekday')
        # Calling weekday(args, kwargs) (line 996)
        weekday_call_result_321957 = invoke(stypy.reporting.localization.Localization(__file__, 996, 36), weekday_321951, *[weekday_321953, week_321955], **kwargs_321956)
        
        # Getting the type of 'kwargs' (line 996)
        kwargs_321958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 16), 'kwargs')
        str_321959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 23), 'str', 'weekday')
        # Storing an element on a container (line 996)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 996, 16), kwargs_321958, (str_321959, weekday_call_result_321957))
        
        
        # Getting the type of 'x' (line 997)
        x_321960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 19), 'x')
        # Obtaining the member 'week' of a type (line 997)
        week_321961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 19), x_321960, 'week')
        int_321962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 28), 'int')
        # Applying the binary operator '>' (line 997)
        result_gt_321963 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 19), '>', week_321961, int_321962)
        
        # Testing the type of an if condition (line 997)
        if_condition_321964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 997, 16), result_gt_321963)
        # Assigning a type to the variable 'if_condition_321964' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 16), 'if_condition_321964', if_condition_321964)
        # SSA begins for if statement (line 997)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 998):
        
        # Assigning a Num to a Subscript (line 998):
        int_321965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 36), 'int')
        # Getting the type of 'kwargs' (line 998)
        kwargs_321966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 20), 'kwargs')
        str_321967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 27), 'str', 'day')
        # Storing an element on a container (line 998)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 998, 20), kwargs_321966, (str_321967, int_321965))
        # SSA branch for the else part of an if statement (line 997)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Subscript (line 1000):
        
        # Assigning a Num to a Subscript (line 1000):
        int_321968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 36), 'int')
        # Getting the type of 'kwargs' (line 1000)
        kwargs_321969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 20), 'kwargs')
        str_321970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 27), 'str', 'day')
        # Storing an element on a container (line 1000)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1000, 20), kwargs_321969, (str_321970, int_321968))
        # SSA join for if statement (line 997)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 995)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'x' (line 1001)
        x_321971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 17), 'x')
        # Obtaining the member 'day' of a type (line 1001)
        day_321972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 17), x_321971, 'day')
        # Testing the type of an if condition (line 1001)
        if_condition_321973 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1001, 17), day_321972)
        # Assigning a type to the variable 'if_condition_321973' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 17), 'if_condition_321973', if_condition_321973)
        # SSA begins for if statement (line 1001)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 1002):
        
        # Assigning a Attribute to a Subscript (line 1002):
        # Getting the type of 'x' (line 1002)
        x_321974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 32), 'x')
        # Obtaining the member 'day' of a type (line 1002)
        day_321975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 32), x_321974, 'day')
        # Getting the type of 'kwargs' (line 1002)
        kwargs_321976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 16), 'kwargs')
        str_321977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 23), 'str', 'day')
        # Storing an element on a container (line 1002)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1002, 16), kwargs_321976, (str_321977, day_321975))
        # SSA join for if statement (line 1001)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 995)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 993)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 1003)
        x_321978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 13), 'x')
        # Obtaining the member 'yday' of a type (line 1003)
        yday_321979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 13), x_321978, 'yday')
        # Getting the type of 'None' (line 1003)
        None_321980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 27), 'None')
        # Applying the binary operator 'isnot' (line 1003)
        result_is_not_321981 = python_operator(stypy.reporting.localization.Localization(__file__, 1003, 13), 'isnot', yday_321979, None_321980)
        
        # Testing the type of an if condition (line 1003)
        if_condition_321982 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1003, 13), result_is_not_321981)
        # Assigning a type to the variable 'if_condition_321982' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 13), 'if_condition_321982', if_condition_321982)
        # SSA begins for if statement (line 1003)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 1004):
        
        # Assigning a Attribute to a Subscript (line 1004):
        # Getting the type of 'x' (line 1004)
        x_321983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 32), 'x')
        # Obtaining the member 'yday' of a type (line 1004)
        yday_321984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 32), x_321983, 'yday')
        # Getting the type of 'kwargs' (line 1004)
        kwargs_321985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 12), 'kwargs')
        str_321986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1004, 19), 'str', 'yearday')
        # Storing an element on a container (line 1004)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1004, 12), kwargs_321985, (str_321986, yday_321984))
        # SSA branch for the else part of an if statement (line 1003)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 1005)
        x_321987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 13), 'x')
        # Obtaining the member 'jyday' of a type (line 1005)
        jyday_321988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 13), x_321987, 'jyday')
        # Getting the type of 'None' (line 1005)
        None_321989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 28), 'None')
        # Applying the binary operator 'isnot' (line 1005)
        result_is_not_321990 = python_operator(stypy.reporting.localization.Localization(__file__, 1005, 13), 'isnot', jyday_321988, None_321989)
        
        # Testing the type of an if condition (line 1005)
        if_condition_321991 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1005, 13), result_is_not_321990)
        # Assigning a type to the variable 'if_condition_321991' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 13), 'if_condition_321991', if_condition_321991)
        # SSA begins for if statement (line 1005)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 1006):
        
        # Assigning a Attribute to a Subscript (line 1006):
        # Getting the type of 'x' (line 1006)
        x_321992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 34), 'x')
        # Obtaining the member 'jyday' of a type (line 1006)
        jyday_321993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 34), x_321992, 'jyday')
        # Getting the type of 'kwargs' (line 1006)
        kwargs_321994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 12), 'kwargs')
        str_321995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1006, 19), 'str', 'nlyearday')
        # Storing an element on a container (line 1006)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1006, 12), kwargs_321994, (str_321995, jyday_321993))
        # SSA join for if statement (line 1005)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1003)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 993)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'kwargs' (line 1007)
        kwargs_321996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 15), 'kwargs')
        # Applying the 'not' unary operator (line 1007)
        result_not__321997 = python_operator(stypy.reporting.localization.Localization(__file__, 1007, 11), 'not', kwargs_321996)
        
        # Testing the type of an if condition (line 1007)
        if_condition_321998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1007, 8), result_not__321997)
        # Assigning a type to the variable 'if_condition_321998' (line 1007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1007, 8), 'if_condition_321998', if_condition_321998)
        # SSA begins for if statement (line 1007)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'isend' (line 1010)
        isend_321999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 19), 'isend')
        # Applying the 'not' unary operator (line 1010)
        result_not__322000 = python_operator(stypy.reporting.localization.Localization(__file__, 1010, 15), 'not', isend_321999)
        
        # Testing the type of an if condition (line 1010)
        if_condition_322001 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1010, 12), result_not__322000)
        # Assigning a type to the variable 'if_condition_322001' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 12), 'if_condition_322001', if_condition_322001)
        # SSA begins for if statement (line 1010)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 1011):
        
        # Assigning a Num to a Subscript (line 1011):
        int_322002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 34), 'int')
        # Getting the type of 'kwargs' (line 1011)
        kwargs_322003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 16), 'kwargs')
        str_322004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 23), 'str', 'month')
        # Storing an element on a container (line 1011)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1011, 16), kwargs_322003, (str_322004, int_322002))
        
        # Assigning a Num to a Subscript (line 1012):
        
        # Assigning a Num to a Subscript (line 1012):
        int_322005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 32), 'int')
        # Getting the type of 'kwargs' (line 1012)
        kwargs_322006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 16), 'kwargs')
        str_322007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 23), 'str', 'day')
        # Storing an element on a container (line 1012)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1012, 16), kwargs_322006, (str_322007, int_322005))
        
        # Assigning a Call to a Subscript (line 1013):
        
        # Assigning a Call to a Subscript (line 1013):
        
        # Call to SU(...): (line 1013)
        # Processing the call arguments (line 1013)
        
        int_322010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 54), 'int')
        # Applying the 'uadd' unary operator (line 1013)
        result___pos___322011 = python_operator(stypy.reporting.localization.Localization(__file__, 1013, 53), 'uadd', int_322010)
        
        # Processing the call keyword arguments (line 1013)
        kwargs_322012 = {}
        # Getting the type of 'relativedelta' (line 1013)
        relativedelta_322008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 36), 'relativedelta', False)
        # Obtaining the member 'SU' of a type (line 1013)
        SU_322009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 36), relativedelta_322008, 'SU')
        # Calling SU(args, kwargs) (line 1013)
        SU_call_result_322013 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 36), SU_322009, *[result___pos___322011], **kwargs_322012)
        
        # Getting the type of 'kwargs' (line 1013)
        kwargs_322014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 16), 'kwargs')
        str_322015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 23), 'str', 'weekday')
        # Storing an element on a container (line 1013)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1013, 16), kwargs_322014, (str_322015, SU_call_result_322013))
        # SSA branch for the else part of an if statement (line 1010)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Subscript (line 1015):
        
        # Assigning a Num to a Subscript (line 1015):
        int_322016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, 34), 'int')
        # Getting the type of 'kwargs' (line 1015)
        kwargs_322017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 16), 'kwargs')
        str_322018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, 23), 'str', 'month')
        # Storing an element on a container (line 1015)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1015, 16), kwargs_322017, (str_322018, int_322016))
        
        # Assigning a Num to a Subscript (line 1016):
        
        # Assigning a Num to a Subscript (line 1016):
        int_322019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 32), 'int')
        # Getting the type of 'kwargs' (line 1016)
        kwargs_322020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 16), 'kwargs')
        str_322021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 23), 'str', 'day')
        # Storing an element on a container (line 1016)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1016, 16), kwargs_322020, (str_322021, int_322019))
        
        # Assigning a Call to a Subscript (line 1017):
        
        # Assigning a Call to a Subscript (line 1017):
        
        # Call to SU(...): (line 1017)
        # Processing the call arguments (line 1017)
        int_322024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 53), 'int')
        # Processing the call keyword arguments (line 1017)
        kwargs_322025 = {}
        # Getting the type of 'relativedelta' (line 1017)
        relativedelta_322022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 36), 'relativedelta', False)
        # Obtaining the member 'SU' of a type (line 1017)
        SU_322023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 36), relativedelta_322022, 'SU')
        # Calling SU(args, kwargs) (line 1017)
        SU_call_result_322026 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 36), SU_322023, *[int_322024], **kwargs_322025)
        
        # Getting the type of 'kwargs' (line 1017)
        kwargs_322027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 16), 'kwargs')
        str_322028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1017, 23), 'str', 'weekday')
        # Storing an element on a container (line 1017)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1017, 16), kwargs_322027, (str_322028, SU_call_result_322026))
        # SSA join for if statement (line 1010)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1007)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 1018)
        x_322029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 11), 'x')
        # Obtaining the member 'time' of a type (line 1018)
        time_322030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 11), x_322029, 'time')
        # Getting the type of 'None' (line 1018)
        None_322031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 25), 'None')
        # Applying the binary operator 'isnot' (line 1018)
        result_is_not_322032 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 11), 'isnot', time_322030, None_322031)
        
        # Testing the type of an if condition (line 1018)
        if_condition_322033 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1018, 8), result_is_not_322032)
        # Assigning a type to the variable 'if_condition_322033' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'if_condition_322033', if_condition_322033)
        # SSA begins for if statement (line 1018)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 1019):
        
        # Assigning a Attribute to a Subscript (line 1019):
        # Getting the type of 'x' (line 1019)
        x_322034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 32), 'x')
        # Obtaining the member 'time' of a type (line 1019)
        time_322035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 32), x_322034, 'time')
        # Getting the type of 'kwargs' (line 1019)
        kwargs_322036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 12), 'kwargs')
        str_322037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1019, 19), 'str', 'seconds')
        # Storing an element on a container (line 1019)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1019, 12), kwargs_322036, (str_322037, time_322035))
        # SSA branch for the else part of an if statement (line 1018)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Subscript (line 1022):
        
        # Assigning a Num to a Subscript (line 1022):
        int_322038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1022, 32), 'int')
        # Getting the type of 'kwargs' (line 1022)
        kwargs_322039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 12), 'kwargs')
        str_322040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1022, 19), 'str', 'seconds')
        # Storing an element on a container (line 1022)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1022, 12), kwargs_322039, (str_322040, int_322038))
        # SSA join for if statement (line 1018)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'isend' (line 1023)
        isend_322041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 11), 'isend')
        # Testing the type of an if condition (line 1023)
        if_condition_322042 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1023, 8), isend_322041)
        # Assigning a type to the variable 'if_condition_322042' (line 1023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 8), 'if_condition_322042', if_condition_322042)
        # SSA begins for if statement (line 1023)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1027):
        
        # Assigning a BinOp to a Name (line 1027):
        # Getting the type of 'self' (line 1027)
        self_322043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 20), 'self')
        # Obtaining the member '_dst_offset' of a type (line 1027)
        _dst_offset_322044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 20), self_322043, '_dst_offset')
        # Getting the type of 'self' (line 1027)
        self_322045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 39), 'self')
        # Obtaining the member '_std_offset' of a type (line 1027)
        _std_offset_322046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 39), self_322045, '_std_offset')
        # Applying the binary operator '-' (line 1027)
        result_sub_322047 = python_operator(stypy.reporting.localization.Localization(__file__, 1027, 20), '-', _dst_offset_322044, _std_offset_322046)
        
        # Assigning a type to the variable 'delta' (line 1027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 12), 'delta', result_sub_322047)
        
        # Getting the type of 'kwargs' (line 1028)
        kwargs_322048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 12), 'kwargs')
        
        # Obtaining the type of the subscript
        str_322049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 19), 'str', 'seconds')
        # Getting the type of 'kwargs' (line 1028)
        kwargs_322050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 12), 'kwargs')
        # Obtaining the member '__getitem__' of a type (line 1028)
        getitem___322051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 12), kwargs_322050, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1028)
        subscript_call_result_322052 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 12), getitem___322051, str_322049)
        
        # Getting the type of 'delta' (line 1028)
        delta_322053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 33), 'delta')
        # Obtaining the member 'seconds' of a type (line 1028)
        seconds_322054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 33), delta_322053, 'seconds')
        # Getting the type of 'delta' (line 1028)
        delta_322055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 49), 'delta')
        # Obtaining the member 'days' of a type (line 1028)
        days_322056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 49), delta_322055, 'days')
        int_322057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 62), 'int')
        # Applying the binary operator '*' (line 1028)
        result_mul_322058 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 49), '*', days_322056, int_322057)
        
        # Applying the binary operator '+' (line 1028)
        result_add_322059 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 33), '+', seconds_322054, result_mul_322058)
        
        # Applying the binary operator '-=' (line 1028)
        result_isub_322060 = python_operator(stypy.reporting.localization.Localization(__file__, 1028, 12), '-=', subscript_call_result_322052, result_add_322059)
        # Getting the type of 'kwargs' (line 1028)
        kwargs_322061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 12), 'kwargs')
        str_322062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 19), 'str', 'seconds')
        # Storing an element on a container (line 1028)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1028, 12), kwargs_322061, (str_322062, result_isub_322060))
        
        # SSA join for if statement (line 1023)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to relativedelta(...): (line 1029)
        # Processing the call keyword arguments (line 1029)
        # Getting the type of 'kwargs' (line 1029)
        kwargs_322065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 45), 'kwargs', False)
        kwargs_322066 = {'kwargs_322065': kwargs_322065}
        # Getting the type of 'relativedelta' (line 1029)
        relativedelta_322063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 15), 'relativedelta', False)
        # Obtaining the member 'relativedelta' of a type (line 1029)
        relativedelta_322064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 15), relativedelta_322063, 'relativedelta')
        # Calling relativedelta(args, kwargs) (line 1029)
        relativedelta_call_result_322067 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 15), relativedelta_322064, *[], **kwargs_322066)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'stypy_return_type', relativedelta_call_result_322067)
        
        # ################# End of '_delta(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_delta' in the type store
        # Getting the type of 'stypy_return_type' (line 990)
        stypy_return_type_322068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322068)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_delta'
        return stypy_return_type_322068


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 1031, 4, False)
        # Assigning a type to the variable 'self' (line 1032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'tzstr.stypy__repr__')
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzstr.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzstr.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_322069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 15), 'str', '%s(%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1032)
        tuple_322070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1032)
        # Adding element type (line 1032)
        # Getting the type of 'self' (line 1032)
        self_322071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 27), 'self')
        # Obtaining the member '__class__' of a type (line 1032)
        class___322072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 27), self_322071, '__class__')
        # Obtaining the member '__name__' of a type (line 1032)
        name___322073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 27), class___322072, '__name__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1032, 27), tuple_322070, name___322073)
        # Adding element type (line 1032)
        
        # Call to repr(...): (line 1032)
        # Processing the call arguments (line 1032)
        # Getting the type of 'self' (line 1032)
        self_322075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 57), 'self', False)
        # Obtaining the member '_s' of a type (line 1032)
        _s_322076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 57), self_322075, '_s')
        # Processing the call keyword arguments (line 1032)
        kwargs_322077 = {}
        # Getting the type of 'repr' (line 1032)
        repr_322074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 52), 'repr', False)
        # Calling repr(args, kwargs) (line 1032)
        repr_call_result_322078 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 52), repr_322074, *[_s_322076], **kwargs_322077)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1032, 27), tuple_322070, repr_call_result_322078)
        
        # Applying the binary operator '%' (line 1032)
        result_mod_322079 = python_operator(stypy.reporting.localization.Localization(__file__, 1032, 15), '%', str_322069, tuple_322070)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 8), 'stypy_return_type', result_mod_322079)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 1031)
        stypy_return_type_322080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322080)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_322080


# Assigning a type to the variable 'tzstr' (line 929)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 0), 'tzstr', tzstr)
# Declaration of the '_tzicalvtzcomp' class

class _tzicalvtzcomp(object, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1037)
        None_322081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 24), 'None')
        # Getting the type of 'None' (line 1037)
        None_322082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 36), 'None')
        defaults = [None_322081, None_322082]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1036, 4, False)
        # Assigning a type to the variable 'self' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzicalvtzcomp.__init__', ['tzoffsetfrom', 'tzoffsetto', 'isdst', 'tzname', 'rrule'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['tzoffsetfrom', 'tzoffsetto', 'isdst', 'tzname', 'rrule'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1038):
        
        # Assigning a Call to a Attribute (line 1038):
        
        # Call to timedelta(...): (line 1038)
        # Processing the call keyword arguments (line 1038)
        # Getting the type of 'tzoffsetfrom' (line 1038)
        tzoffsetfrom_322085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 55), 'tzoffsetfrom', False)
        keyword_322086 = tzoffsetfrom_322085
        kwargs_322087 = {'seconds': keyword_322086}
        # Getting the type of 'datetime' (line 1038)
        datetime_322083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 28), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 1038)
        timedelta_322084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 28), datetime_322083, 'timedelta')
        # Calling timedelta(args, kwargs) (line 1038)
        timedelta_call_result_322088 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 28), timedelta_322084, *[], **kwargs_322087)
        
        # Getting the type of 'self' (line 1038)
        self_322089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'self')
        # Setting the type of the member 'tzoffsetfrom' of a type (line 1038)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 8), self_322089, 'tzoffsetfrom', timedelta_call_result_322088)
        
        # Assigning a Call to a Attribute (line 1039):
        
        # Assigning a Call to a Attribute (line 1039):
        
        # Call to timedelta(...): (line 1039)
        # Processing the call keyword arguments (line 1039)
        # Getting the type of 'tzoffsetto' (line 1039)
        tzoffsetto_322092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 53), 'tzoffsetto', False)
        keyword_322093 = tzoffsetto_322092
        kwargs_322094 = {'seconds': keyword_322093}
        # Getting the type of 'datetime' (line 1039)
        datetime_322090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 26), 'datetime', False)
        # Obtaining the member 'timedelta' of a type (line 1039)
        timedelta_322091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 26), datetime_322090, 'timedelta')
        # Calling timedelta(args, kwargs) (line 1039)
        timedelta_call_result_322095 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 26), timedelta_322091, *[], **kwargs_322094)
        
        # Getting the type of 'self' (line 1039)
        self_322096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'self')
        # Setting the type of the member 'tzoffsetto' of a type (line 1039)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 8), self_322096, 'tzoffsetto', timedelta_call_result_322095)
        
        # Assigning a BinOp to a Attribute (line 1040):
        
        # Assigning a BinOp to a Attribute (line 1040):
        # Getting the type of 'self' (line 1040)
        self_322097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 28), 'self')
        # Obtaining the member 'tzoffsetto' of a type (line 1040)
        tzoffsetto_322098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 28), self_322097, 'tzoffsetto')
        # Getting the type of 'self' (line 1040)
        self_322099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 46), 'self')
        # Obtaining the member 'tzoffsetfrom' of a type (line 1040)
        tzoffsetfrom_322100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 46), self_322099, 'tzoffsetfrom')
        # Applying the binary operator '-' (line 1040)
        result_sub_322101 = python_operator(stypy.reporting.localization.Localization(__file__, 1040, 28), '-', tzoffsetto_322098, tzoffsetfrom_322100)
        
        # Getting the type of 'self' (line 1040)
        self_322102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 8), 'self')
        # Setting the type of the member 'tzoffsetdiff' of a type (line 1040)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 8), self_322102, 'tzoffsetdiff', result_sub_322101)
        
        # Assigning a Name to a Attribute (line 1041):
        
        # Assigning a Name to a Attribute (line 1041):
        # Getting the type of 'isdst' (line 1041)
        isdst_322103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 21), 'isdst')
        # Getting the type of 'self' (line 1041)
        self_322104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'self')
        # Setting the type of the member 'isdst' of a type (line 1041)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 8), self_322104, 'isdst', isdst_322103)
        
        # Assigning a Name to a Attribute (line 1042):
        
        # Assigning a Name to a Attribute (line 1042):
        # Getting the type of 'tzname' (line 1042)
        tzname_322105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 22), 'tzname')
        # Getting the type of 'self' (line 1042)
        self_322106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'self')
        # Setting the type of the member 'tzname' of a type (line 1042)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 8), self_322106, 'tzname', tzname_322105)
        
        # Assigning a Name to a Attribute (line 1043):
        
        # Assigning a Name to a Attribute (line 1043):
        # Getting the type of 'rrule' (line 1043)
        rrule_322107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 21), 'rrule')
        # Getting the type of 'self' (line 1043)
        self_322108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'self')
        # Setting the type of the member 'rrule' of a type (line 1043)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 8), self_322108, 'rrule', rrule_322107)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_tzicalvtzcomp' (line 1035)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 0), '_tzicalvtzcomp', _tzicalvtzcomp)
# Declaration of the '_tzicalvtz' class
# Getting the type of '_tzinfo' (line 1046)
_tzinfo_322109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 17), '_tzinfo')

class _tzicalvtz(_tzinfo_322109, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        
        # Obtaining an instance of the builtin type 'list' (line 1047)
        list_322110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1047)
        
        defaults = [list_322110]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1047, 4, False)
        # Assigning a type to the variable 'self' (line 1048)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzicalvtz.__init__', ['tzid', 'comps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['tzid', 'comps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1048)
        # Processing the call keyword arguments (line 1048)
        kwargs_322117 = {}
        
        # Call to super(...): (line 1048)
        # Processing the call arguments (line 1048)
        # Getting the type of '_tzicalvtz' (line 1048)
        _tzicalvtz_322112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 14), '_tzicalvtz', False)
        # Getting the type of 'self' (line 1048)
        self_322113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 26), 'self', False)
        # Processing the call keyword arguments (line 1048)
        kwargs_322114 = {}
        # Getting the type of 'super' (line 1048)
        super_322111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 8), 'super', False)
        # Calling super(args, kwargs) (line 1048)
        super_call_result_322115 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 8), super_322111, *[_tzicalvtz_322112, self_322113], **kwargs_322114)
        
        # Obtaining the member '__init__' of a type (line 1048)
        init___322116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 8), super_call_result_322115, '__init__')
        # Calling __init__(args, kwargs) (line 1048)
        init___call_result_322118 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 8), init___322116, *[], **kwargs_322117)
        
        
        # Assigning a Name to a Attribute (line 1050):
        
        # Assigning a Name to a Attribute (line 1050):
        # Getting the type of 'tzid' (line 1050)
        tzid_322119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 21), 'tzid')
        # Getting the type of 'self' (line 1050)
        self_322120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 8), 'self')
        # Setting the type of the member '_tzid' of a type (line 1050)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 8), self_322120, '_tzid', tzid_322119)
        
        # Assigning a Name to a Attribute (line 1051):
        
        # Assigning a Name to a Attribute (line 1051):
        # Getting the type of 'comps' (line 1051)
        comps_322121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 22), 'comps')
        # Getting the type of 'self' (line 1051)
        self_322122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'self')
        # Setting the type of the member '_comps' of a type (line 1051)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 8), self_322122, '_comps', comps_322121)
        
        # Assigning a List to a Attribute (line 1052):
        
        # Assigning a List to a Attribute (line 1052):
        
        # Obtaining an instance of the builtin type 'list' (line 1052)
        list_322123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1052)
        
        # Getting the type of 'self' (line 1052)
        self_322124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'self')
        # Setting the type of the member '_cachedate' of a type (line 1052)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 8), self_322124, '_cachedate', list_322123)
        
        # Assigning a List to a Attribute (line 1053):
        
        # Assigning a List to a Attribute (line 1053):
        
        # Obtaining an instance of the builtin type 'list' (line 1053)
        list_322125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1053)
        
        # Getting the type of 'self' (line 1053)
        self_322126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'self')
        # Setting the type of the member '_cachecomp' of a type (line 1053)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 8), self_322126, '_cachecomp', list_322125)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _find_comp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_find_comp'
        module_type_store = module_type_store.open_function_context('_find_comp', 1055, 4, False)
        # Assigning a type to the variable 'self' (line 1056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_localization', localization)
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_type_store', module_type_store)
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_function_name', '_tzicalvtz._find_comp')
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_varargs_param_name', None)
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_call_defaults', defaults)
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_call_varargs', varargs)
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _tzicalvtz._find_comp.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzicalvtz._find_comp', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_find_comp', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_find_comp(...)' code ##################

        
        
        
        # Call to len(...): (line 1056)
        # Processing the call arguments (line 1056)
        # Getting the type of 'self' (line 1056)
        self_322128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 15), 'self', False)
        # Obtaining the member '_comps' of a type (line 1056)
        _comps_322129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 15), self_322128, '_comps')
        # Processing the call keyword arguments (line 1056)
        kwargs_322130 = {}
        # Getting the type of 'len' (line 1056)
        len_322127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 11), 'len', False)
        # Calling len(args, kwargs) (line 1056)
        len_call_result_322131 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 11), len_322127, *[_comps_322129], **kwargs_322130)
        
        int_322132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 31), 'int')
        # Applying the binary operator '==' (line 1056)
        result_eq_322133 = python_operator(stypy.reporting.localization.Localization(__file__, 1056, 11), '==', len_call_result_322131, int_322132)
        
        # Testing the type of an if condition (line 1056)
        if_condition_322134 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1056, 8), result_eq_322133)
        # Assigning a type to the variable 'if_condition_322134' (line 1056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 8), 'if_condition_322134', if_condition_322134)
        # SSA begins for if statement (line 1056)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        int_322135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 31), 'int')
        # Getting the type of 'self' (line 1057)
        self_322136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 19), 'self')
        # Obtaining the member '_comps' of a type (line 1057)
        _comps_322137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 19), self_322136, '_comps')
        # Obtaining the member '__getitem__' of a type (line 1057)
        getitem___322138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 19), _comps_322137, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1057)
        subscript_call_result_322139 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 19), getitem___322138, int_322135)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 12), 'stypy_return_type', subscript_call_result_322139)
        # SSA join for if statement (line 1056)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1059):
        
        # Assigning a Call to a Name (line 1059):
        
        # Call to replace(...): (line 1059)
        # Processing the call keyword arguments (line 1059)
        # Getting the type of 'None' (line 1059)
        None_322142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 31), 'None', False)
        keyword_322143 = None_322142
        kwargs_322144 = {'tzinfo': keyword_322143}
        # Getting the type of 'dt' (line 1059)
        dt_322140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 13), 'dt', False)
        # Obtaining the member 'replace' of a type (line 1059)
        replace_322141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 13), dt_322140, 'replace')
        # Calling replace(args, kwargs) (line 1059)
        replace_call_result_322145 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 13), replace_322141, *[], **kwargs_322144)
        
        # Assigning a type to the variable 'dt' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 8), 'dt', replace_call_result_322145)
        
        
        # SSA begins for try-except statement (line 1061)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        
        # Call to index(...): (line 1062)
        # Processing the call arguments (line 1062)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1062)
        tuple_322149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1062, 58), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1062)
        # Adding element type (line 1062)
        # Getting the type of 'dt' (line 1062)
        dt_322150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 58), 'dt', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1062, 58), tuple_322149, dt_322150)
        # Adding element type (line 1062)
        
        # Call to _fold(...): (line 1062)
        # Processing the call arguments (line 1062)
        # Getting the type of 'dt' (line 1062)
        dt_322153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 73), 'dt', False)
        # Processing the call keyword arguments (line 1062)
        kwargs_322154 = {}
        # Getting the type of 'self' (line 1062)
        self_322151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 62), 'self', False)
        # Obtaining the member '_fold' of a type (line 1062)
        _fold_322152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 62), self_322151, '_fold')
        # Calling _fold(args, kwargs) (line 1062)
        _fold_call_result_322155 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 62), _fold_322152, *[dt_322153], **kwargs_322154)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1062, 58), tuple_322149, _fold_call_result_322155)
        
        # Processing the call keyword arguments (line 1062)
        kwargs_322156 = {}
        # Getting the type of 'self' (line 1062)
        self_322146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 35), 'self', False)
        # Obtaining the member '_cachedate' of a type (line 1062)
        _cachedate_322147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 35), self_322146, '_cachedate')
        # Obtaining the member 'index' of a type (line 1062)
        index_322148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 35), _cachedate_322147, 'index')
        # Calling index(args, kwargs) (line 1062)
        index_call_result_322157 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 35), index_322148, *[tuple_322149], **kwargs_322156)
        
        # Getting the type of 'self' (line 1062)
        self_322158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 19), 'self')
        # Obtaining the member '_cachecomp' of a type (line 1062)
        _cachecomp_322159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 19), self_322158, '_cachecomp')
        # Obtaining the member '__getitem__' of a type (line 1062)
        getitem___322160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 19), _cachecomp_322159, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1062)
        subscript_call_result_322161 = invoke(stypy.reporting.localization.Localization(__file__, 1062, 19), getitem___322160, index_call_result_322157)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 12), 'stypy_return_type', subscript_call_result_322161)
        # SSA branch for the except part of a try statement (line 1061)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1061)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1061)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1066):
        
        # Assigning a Name to a Name (line 1066):
        # Getting the type of 'None' (line 1066)
        None_322162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 21), 'None')
        # Assigning a type to the variable 'lastcompdt' (line 1066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1066, 8), 'lastcompdt', None_322162)
        
        # Assigning a Name to a Name (line 1067):
        
        # Assigning a Name to a Name (line 1067):
        # Getting the type of 'None' (line 1067)
        None_322163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 19), 'None')
        # Assigning a type to the variable 'lastcomp' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'lastcomp', None_322163)
        
        # Getting the type of 'self' (line 1069)
        self_322164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 20), 'self')
        # Obtaining the member '_comps' of a type (line 1069)
        _comps_322165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1069, 20), self_322164, '_comps')
        # Testing the type of a for loop iterable (line 1069)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1069, 8), _comps_322165)
        # Getting the type of the for loop variable (line 1069)
        for_loop_var_322166 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1069, 8), _comps_322165)
        # Assigning a type to the variable 'comp' (line 1069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 8), 'comp', for_loop_var_322166)
        # SSA begins for a for statement (line 1069)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1070):
        
        # Assigning a Call to a Name (line 1070):
        
        # Call to _find_compdt(...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of 'comp' (line 1070)
        comp_322169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 39), 'comp', False)
        # Getting the type of 'dt' (line 1070)
        dt_322170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 45), 'dt', False)
        # Processing the call keyword arguments (line 1070)
        kwargs_322171 = {}
        # Getting the type of 'self' (line 1070)
        self_322167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 21), 'self', False)
        # Obtaining the member '_find_compdt' of a type (line 1070)
        _find_compdt_322168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 21), self_322167, '_find_compdt')
        # Calling _find_compdt(args, kwargs) (line 1070)
        _find_compdt_call_result_322172 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 21), _find_compdt_322168, *[comp_322169, dt_322170], **kwargs_322171)
        
        # Assigning a type to the variable 'compdt' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 12), 'compdt', _find_compdt_call_result_322172)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'compdt' (line 1072)
        compdt_322173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 15), 'compdt')
        
        # Evaluating a boolean operation
        
        # Getting the type of 'lastcompdt' (line 1072)
        lastcompdt_322174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 31), 'lastcompdt')
        # Applying the 'not' unary operator (line 1072)
        result_not__322175 = python_operator(stypy.reporting.localization.Localization(__file__, 1072, 27), 'not', lastcompdt_322174)
        
        
        # Getting the type of 'lastcompdt' (line 1072)
        lastcompdt_322176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 45), 'lastcompdt')
        # Getting the type of 'compdt' (line 1072)
        compdt_322177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 58), 'compdt')
        # Applying the binary operator '<' (line 1072)
        result_lt_322178 = python_operator(stypy.reporting.localization.Localization(__file__, 1072, 45), '<', lastcompdt_322176, compdt_322177)
        
        # Applying the binary operator 'or' (line 1072)
        result_or_keyword_322179 = python_operator(stypy.reporting.localization.Localization(__file__, 1072, 27), 'or', result_not__322175, result_lt_322178)
        
        # Applying the binary operator 'and' (line 1072)
        result_and_keyword_322180 = python_operator(stypy.reporting.localization.Localization(__file__, 1072, 15), 'and', compdt_322173, result_or_keyword_322179)
        
        # Testing the type of an if condition (line 1072)
        if_condition_322181 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1072, 12), result_and_keyword_322180)
        # Assigning a type to the variable 'if_condition_322181' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 12), 'if_condition_322181', if_condition_322181)
        # SSA begins for if statement (line 1072)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1073):
        
        # Assigning a Name to a Name (line 1073):
        # Getting the type of 'compdt' (line 1073)
        compdt_322182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 29), 'compdt')
        # Assigning a type to the variable 'lastcompdt' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 16), 'lastcompdt', compdt_322182)
        
        # Assigning a Name to a Name (line 1074):
        
        # Assigning a Name to a Name (line 1074):
        # Getting the type of 'comp' (line 1074)
        comp_322183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 27), 'comp')
        # Assigning a type to the variable 'lastcomp' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 16), 'lastcomp', comp_322183)
        # SSA join for if statement (line 1072)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'lastcomp' (line 1076)
        lastcomp_322184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 15), 'lastcomp')
        # Applying the 'not' unary operator (line 1076)
        result_not__322185 = python_operator(stypy.reporting.localization.Localization(__file__, 1076, 11), 'not', lastcomp_322184)
        
        # Testing the type of an if condition (line 1076)
        if_condition_322186 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1076, 8), result_not__322185)
        # Assigning a type to the variable 'if_condition_322186' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 8), 'if_condition_322186', if_condition_322186)
        # SSA begins for if statement (line 1076)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 1081)
        self_322187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 24), 'self')
        # Obtaining the member '_comps' of a type (line 1081)
        _comps_322188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 24), self_322187, '_comps')
        # Testing the type of a for loop iterable (line 1081)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1081, 12), _comps_322188)
        # Getting the type of the for loop variable (line 1081)
        for_loop_var_322189 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1081, 12), _comps_322188)
        # Assigning a type to the variable 'comp' (line 1081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 12), 'comp', for_loop_var_322189)
        # SSA begins for a for statement (line 1081)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'comp' (line 1082)
        comp_322190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 23), 'comp')
        # Obtaining the member 'isdst' of a type (line 1082)
        isdst_322191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1082, 23), comp_322190, 'isdst')
        # Applying the 'not' unary operator (line 1082)
        result_not__322192 = python_operator(stypy.reporting.localization.Localization(__file__, 1082, 19), 'not', isdst_322191)
        
        # Testing the type of an if condition (line 1082)
        if_condition_322193 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1082, 16), result_not__322192)
        # Assigning a type to the variable 'if_condition_322193' (line 1082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 16), 'if_condition_322193', if_condition_322193)
        # SSA begins for if statement (line 1082)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1083):
        
        # Assigning a Name to a Name (line 1083):
        # Getting the type of 'comp' (line 1083)
        comp_322194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1083, 31), 'comp')
        # Assigning a type to the variable 'lastcomp' (line 1083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 20), 'lastcomp', comp_322194)
        # SSA join for if statement (line 1082)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 1081)
        module_type_store.open_ssa_branch('for loop else')
        
        # Assigning a Subscript to a Name (line 1086):
        
        # Assigning a Subscript to a Name (line 1086):
        
        # Obtaining the type of the subscript
        int_322195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 32), 'int')
        # Getting the type of 'comp' (line 1086)
        comp_322196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 27), 'comp')
        # Obtaining the member '__getitem__' of a type (line 1086)
        getitem___322197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 27), comp_322196, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1086)
        subscript_call_result_322198 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 27), getitem___322197, int_322195)
        
        # Assigning a type to the variable 'lastcomp' (line 1086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 16), 'lastcomp', subscript_call_result_322198)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1076)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to insert(...): (line 1088)
        # Processing the call arguments (line 1088)
        int_322202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 31), 'int')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1088)
        tuple_322203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1088)
        # Adding element type (line 1088)
        # Getting the type of 'dt' (line 1088)
        dt_322204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 35), 'dt', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 35), tuple_322203, dt_322204)
        # Adding element type (line 1088)
        
        # Call to _fold(...): (line 1088)
        # Processing the call arguments (line 1088)
        # Getting the type of 'dt' (line 1088)
        dt_322207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 50), 'dt', False)
        # Processing the call keyword arguments (line 1088)
        kwargs_322208 = {}
        # Getting the type of 'self' (line 1088)
        self_322205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 39), 'self', False)
        # Obtaining the member '_fold' of a type (line 1088)
        _fold_322206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 39), self_322205, '_fold')
        # Calling _fold(args, kwargs) (line 1088)
        _fold_call_result_322209 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 39), _fold_322206, *[dt_322207], **kwargs_322208)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 35), tuple_322203, _fold_call_result_322209)
        
        # Processing the call keyword arguments (line 1088)
        kwargs_322210 = {}
        # Getting the type of 'self' (line 1088)
        self_322199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'self', False)
        # Obtaining the member '_cachedate' of a type (line 1088)
        _cachedate_322200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 8), self_322199, '_cachedate')
        # Obtaining the member 'insert' of a type (line 1088)
        insert_322201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 8), _cachedate_322200, 'insert')
        # Calling insert(args, kwargs) (line 1088)
        insert_call_result_322211 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 8), insert_322201, *[int_322202, tuple_322203], **kwargs_322210)
        
        
        # Call to insert(...): (line 1089)
        # Processing the call arguments (line 1089)
        int_322215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, 31), 'int')
        # Getting the type of 'lastcomp' (line 1089)
        lastcomp_322216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 34), 'lastcomp', False)
        # Processing the call keyword arguments (line 1089)
        kwargs_322217 = {}
        # Getting the type of 'self' (line 1089)
        self_322212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'self', False)
        # Obtaining the member '_cachecomp' of a type (line 1089)
        _cachecomp_322213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), self_322212, '_cachecomp')
        # Obtaining the member 'insert' of a type (line 1089)
        insert_322214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), _cachecomp_322213, 'insert')
        # Calling insert(args, kwargs) (line 1089)
        insert_call_result_322218 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 8), insert_322214, *[int_322215, lastcomp_322216], **kwargs_322217)
        
        
        
        
        # Call to len(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'self' (line 1091)
        self_322220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 15), 'self', False)
        # Obtaining the member '_cachedate' of a type (line 1091)
        _cachedate_322221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 15), self_322220, '_cachedate')
        # Processing the call keyword arguments (line 1091)
        kwargs_322222 = {}
        # Getting the type of 'len' (line 1091)
        len_322219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 11), 'len', False)
        # Calling len(args, kwargs) (line 1091)
        len_call_result_322223 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 11), len_322219, *[_cachedate_322221], **kwargs_322222)
        
        int_322224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 34), 'int')
        # Applying the binary operator '>' (line 1091)
        result_gt_322225 = python_operator(stypy.reporting.localization.Localization(__file__, 1091, 11), '>', len_call_result_322223, int_322224)
        
        # Testing the type of an if condition (line 1091)
        if_condition_322226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1091, 8), result_gt_322225)
        # Assigning a type to the variable 'if_condition_322226' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'if_condition_322226', if_condition_322226)
        # SSA begins for if statement (line 1091)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to pop(...): (line 1092)
        # Processing the call keyword arguments (line 1092)
        kwargs_322230 = {}
        # Getting the type of 'self' (line 1092)
        self_322227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 12), 'self', False)
        # Obtaining the member '_cachedate' of a type (line 1092)
        _cachedate_322228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 12), self_322227, '_cachedate')
        # Obtaining the member 'pop' of a type (line 1092)
        pop_322229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 12), _cachedate_322228, 'pop')
        # Calling pop(args, kwargs) (line 1092)
        pop_call_result_322231 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 12), pop_322229, *[], **kwargs_322230)
        
        
        # Call to pop(...): (line 1093)
        # Processing the call keyword arguments (line 1093)
        kwargs_322235 = {}
        # Getting the type of 'self' (line 1093)
        self_322232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 12), 'self', False)
        # Obtaining the member '_cachecomp' of a type (line 1093)
        _cachecomp_322233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 12), self_322232, '_cachecomp')
        # Obtaining the member 'pop' of a type (line 1093)
        pop_322234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 12), _cachecomp_322233, 'pop')
        # Calling pop(args, kwargs) (line 1093)
        pop_call_result_322236 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 12), pop_322234, *[], **kwargs_322235)
        
        # SSA join for if statement (line 1091)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'lastcomp' (line 1095)
        lastcomp_322237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 15), 'lastcomp')
        # Assigning a type to the variable 'stypy_return_type' (line 1095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 8), 'stypy_return_type', lastcomp_322237)
        
        # ################# End of '_find_comp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_find_comp' in the type store
        # Getting the type of 'stypy_return_type' (line 1055)
        stypy_return_type_322238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322238)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_find_comp'
        return stypy_return_type_322238


    @norecursion
    def _find_compdt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_find_compdt'
        module_type_store = module_type_store.open_function_context('_find_compdt', 1097, 4, False)
        # Assigning a type to the variable 'self' (line 1098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_localization', localization)
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_type_store', module_type_store)
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_function_name', '_tzicalvtz._find_compdt')
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_param_names_list', ['comp', 'dt'])
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_varargs_param_name', None)
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_call_defaults', defaults)
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_call_varargs', varargs)
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _tzicalvtz._find_compdt.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzicalvtz._find_compdt', ['comp', 'dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_find_compdt', localization, ['comp', 'dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_find_compdt(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'comp' (line 1098)
        comp_322239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 11), 'comp')
        # Obtaining the member 'tzoffsetdiff' of a type (line 1098)
        tzoffsetdiff_322240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 11), comp_322239, 'tzoffsetdiff')
        # Getting the type of 'ZERO' (line 1098)
        ZERO_322241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 31), 'ZERO')
        # Applying the binary operator '<' (line 1098)
        result_lt_322242 = python_operator(stypy.reporting.localization.Localization(__file__, 1098, 11), '<', tzoffsetdiff_322240, ZERO_322241)
        
        
        # Call to _fold(...): (line 1098)
        # Processing the call arguments (line 1098)
        # Getting the type of 'dt' (line 1098)
        dt_322245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 51), 'dt', False)
        # Processing the call keyword arguments (line 1098)
        kwargs_322246 = {}
        # Getting the type of 'self' (line 1098)
        self_322243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 40), 'self', False)
        # Obtaining the member '_fold' of a type (line 1098)
        _fold_322244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 40), self_322243, '_fold')
        # Calling _fold(args, kwargs) (line 1098)
        _fold_call_result_322247 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 40), _fold_322244, *[dt_322245], **kwargs_322246)
        
        # Applying the binary operator 'and' (line 1098)
        result_and_keyword_322248 = python_operator(stypy.reporting.localization.Localization(__file__, 1098, 11), 'and', result_lt_322242, _fold_call_result_322247)
        
        # Testing the type of an if condition (line 1098)
        if_condition_322249 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1098, 8), result_and_keyword_322248)
        # Assigning a type to the variable 'if_condition_322249' (line 1098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 8), 'if_condition_322249', if_condition_322249)
        # SSA begins for if statement (line 1098)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'dt' (line 1099)
        dt_322250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'dt')
        # Getting the type of 'comp' (line 1099)
        comp_322251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 18), 'comp')
        # Obtaining the member 'tzoffsetdiff' of a type (line 1099)
        tzoffsetdiff_322252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 18), comp_322251, 'tzoffsetdiff')
        # Applying the binary operator '-=' (line 1099)
        result_isub_322253 = python_operator(stypy.reporting.localization.Localization(__file__, 1099, 12), '-=', dt_322250, tzoffsetdiff_322252)
        # Assigning a type to the variable 'dt' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'dt', result_isub_322253)
        
        # SSA join for if statement (line 1098)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1101):
        
        # Assigning a Call to a Name (line 1101):
        
        # Call to before(...): (line 1101)
        # Processing the call arguments (line 1101)
        # Getting the type of 'dt' (line 1101)
        dt_322257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 35), 'dt', False)
        # Processing the call keyword arguments (line 1101)
        # Getting the type of 'True' (line 1101)
        True_322258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 43), 'True', False)
        keyword_322259 = True_322258
        kwargs_322260 = {'inc': keyword_322259}
        # Getting the type of 'comp' (line 1101)
        comp_322254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 17), 'comp', False)
        # Obtaining the member 'rrule' of a type (line 1101)
        rrule_322255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 17), comp_322254, 'rrule')
        # Obtaining the member 'before' of a type (line 1101)
        before_322256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 17), rrule_322255, 'before')
        # Calling before(args, kwargs) (line 1101)
        before_call_result_322261 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 17), before_322256, *[dt_322257], **kwargs_322260)
        
        # Assigning a type to the variable 'compdt' (line 1101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'compdt', before_call_result_322261)
        # Getting the type of 'compdt' (line 1103)
        compdt_322262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 15), 'compdt')
        # Assigning a type to the variable 'stypy_return_type' (line 1103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 8), 'stypy_return_type', compdt_322262)
        
        # ################# End of '_find_compdt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_find_compdt' in the type store
        # Getting the type of 'stypy_return_type' (line 1097)
        stypy_return_type_322263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322263)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_find_compdt'
        return stypy_return_type_322263


    @norecursion
    def utcoffset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'utcoffset'
        module_type_store = module_type_store.open_function_context('utcoffset', 1105, 4, False)
        # Assigning a type to the variable 'self' (line 1106)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_localization', localization)
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_type_store', module_type_store)
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_function_name', '_tzicalvtz.utcoffset')
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_varargs_param_name', None)
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_call_defaults', defaults)
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_call_varargs', varargs)
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _tzicalvtz.utcoffset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzicalvtz.utcoffset', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'utcoffset', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'utcoffset(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1106)
        # Getting the type of 'dt' (line 1106)
        dt_322264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 11), 'dt')
        # Getting the type of 'None' (line 1106)
        None_322265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 17), 'None')
        
        (may_be_322266, more_types_in_union_322267) = may_be_none(dt_322264, None_322265)

        if may_be_322266:

            if more_types_in_union_322267:
                # Runtime conditional SSA (line 1106)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'None' (line 1107)
            None_322268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 1107)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 12), 'stypy_return_type', None_322268)

            if more_types_in_union_322267:
                # SSA join for if statement (line 1106)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _find_comp(...): (line 1109)
        # Processing the call arguments (line 1109)
        # Getting the type of 'dt' (line 1109)
        dt_322271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 31), 'dt', False)
        # Processing the call keyword arguments (line 1109)
        kwargs_322272 = {}
        # Getting the type of 'self' (line 1109)
        self_322269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 15), 'self', False)
        # Obtaining the member '_find_comp' of a type (line 1109)
        _find_comp_322270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 15), self_322269, '_find_comp')
        # Calling _find_comp(args, kwargs) (line 1109)
        _find_comp_call_result_322273 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 15), _find_comp_322270, *[dt_322271], **kwargs_322272)
        
        # Obtaining the member 'tzoffsetto' of a type (line 1109)
        tzoffsetto_322274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 15), _find_comp_call_result_322273, 'tzoffsetto')
        # Assigning a type to the variable 'stypy_return_type' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'stypy_return_type', tzoffsetto_322274)
        
        # ################# End of 'utcoffset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'utcoffset' in the type store
        # Getting the type of 'stypy_return_type' (line 1105)
        stypy_return_type_322275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322275)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'utcoffset'
        return stypy_return_type_322275


    @norecursion
    def dst(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dst'
        module_type_store = module_type_store.open_function_context('dst', 1111, 4, False)
        # Assigning a type to the variable 'self' (line 1112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _tzicalvtz.dst.__dict__.__setitem__('stypy_localization', localization)
        _tzicalvtz.dst.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _tzicalvtz.dst.__dict__.__setitem__('stypy_type_store', module_type_store)
        _tzicalvtz.dst.__dict__.__setitem__('stypy_function_name', '_tzicalvtz.dst')
        _tzicalvtz.dst.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        _tzicalvtz.dst.__dict__.__setitem__('stypy_varargs_param_name', None)
        _tzicalvtz.dst.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _tzicalvtz.dst.__dict__.__setitem__('stypy_call_defaults', defaults)
        _tzicalvtz.dst.__dict__.__setitem__('stypy_call_varargs', varargs)
        _tzicalvtz.dst.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _tzicalvtz.dst.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzicalvtz.dst', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dst', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dst(...)' code ##################

        
        # Assigning a Call to a Name (line 1112):
        
        # Assigning a Call to a Name (line 1112):
        
        # Call to _find_comp(...): (line 1112)
        # Processing the call arguments (line 1112)
        # Getting the type of 'dt' (line 1112)
        dt_322278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 31), 'dt', False)
        # Processing the call keyword arguments (line 1112)
        kwargs_322279 = {}
        # Getting the type of 'self' (line 1112)
        self_322276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 15), 'self', False)
        # Obtaining the member '_find_comp' of a type (line 1112)
        _find_comp_322277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 15), self_322276, '_find_comp')
        # Calling _find_comp(args, kwargs) (line 1112)
        _find_comp_call_result_322280 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 15), _find_comp_322277, *[dt_322278], **kwargs_322279)
        
        # Assigning a type to the variable 'comp' (line 1112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'comp', _find_comp_call_result_322280)
        
        # Getting the type of 'comp' (line 1113)
        comp_322281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 11), 'comp')
        # Obtaining the member 'isdst' of a type (line 1113)
        isdst_322282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1113, 11), comp_322281, 'isdst')
        # Testing the type of an if condition (line 1113)
        if_condition_322283 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1113, 8), isdst_322282)
        # Assigning a type to the variable 'if_condition_322283' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'if_condition_322283', if_condition_322283)
        # SSA begins for if statement (line 1113)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'comp' (line 1114)
        comp_322284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 19), 'comp')
        # Obtaining the member 'tzoffsetdiff' of a type (line 1114)
        tzoffsetdiff_322285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 19), comp_322284, 'tzoffsetdiff')
        # Assigning a type to the variable 'stypy_return_type' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 12), 'stypy_return_type', tzoffsetdiff_322285)
        # SSA branch for the else part of an if statement (line 1113)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'ZERO' (line 1116)
        ZERO_322286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 19), 'ZERO')
        # Assigning a type to the variable 'stypy_return_type' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 12), 'stypy_return_type', ZERO_322286)
        # SSA join for if statement (line 1113)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'dst(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dst' in the type store
        # Getting the type of 'stypy_return_type' (line 1111)
        stypy_return_type_322287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322287)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dst'
        return stypy_return_type_322287


    @norecursion
    def tzname(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tzname'
        module_type_store = module_type_store.open_function_context('tzname', 1118, 4, False)
        # Assigning a type to the variable 'self' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_localization', localization)
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_type_store', module_type_store)
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_function_name', '_tzicalvtz.tzname')
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_varargs_param_name', None)
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_call_defaults', defaults)
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_call_varargs', varargs)
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _tzicalvtz.tzname.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzicalvtz.tzname', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tzname', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tzname(...)' code ##################

        
        # Call to _find_comp(...): (line 1120)
        # Processing the call arguments (line 1120)
        # Getting the type of 'dt' (line 1120)
        dt_322290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 31), 'dt', False)
        # Processing the call keyword arguments (line 1120)
        kwargs_322291 = {}
        # Getting the type of 'self' (line 1120)
        self_322288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 15), 'self', False)
        # Obtaining the member '_find_comp' of a type (line 1120)
        _find_comp_322289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 15), self_322288, '_find_comp')
        # Calling _find_comp(args, kwargs) (line 1120)
        _find_comp_call_result_322292 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 15), _find_comp_322289, *[dt_322290], **kwargs_322291)
        
        # Obtaining the member 'tzname' of a type (line 1120)
        tzname_322293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 15), _find_comp_call_result_322292, 'tzname')
        # Assigning a type to the variable 'stypy_return_type' (line 1120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'stypy_return_type', tzname_322293)
        
        # ################# End of 'tzname(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tzname' in the type store
        # Getting the type of 'stypy_return_type' (line 1118)
        stypy_return_type_322294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322294)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tzname'
        return stypy_return_type_322294


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 1122, 4, False)
        # Assigning a type to the variable 'self' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_function_name', '_tzicalvtz.stypy__repr__')
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _tzicalvtz.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_tzicalvtz.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_322295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 15), 'str', '<tzicalvtz %s>')
        
        # Call to repr(...): (line 1123)
        # Processing the call arguments (line 1123)
        # Getting the type of 'self' (line 1123)
        self_322297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 39), 'self', False)
        # Obtaining the member '_tzid' of a type (line 1123)
        _tzid_322298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 39), self_322297, '_tzid')
        # Processing the call keyword arguments (line 1123)
        kwargs_322299 = {}
        # Getting the type of 'repr' (line 1123)
        repr_322296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 34), 'repr', False)
        # Calling repr(args, kwargs) (line 1123)
        repr_call_result_322300 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 34), repr_322296, *[_tzid_322298], **kwargs_322299)
        
        # Applying the binary operator '%' (line 1123)
        result_mod_322301 = python_operator(stypy.reporting.localization.Localization(__file__, 1123, 15), '%', str_322295, repr_call_result_322300)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'stypy_return_type', result_mod_322301)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 1122)
        stypy_return_type_322302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322302)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_322302

    
    # Assigning a Attribute to a Name (line 1125):

# Assigning a type to the variable '_tzicalvtz' (line 1046)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 0), '_tzicalvtz', _tzicalvtz)

# Assigning a Attribute to a Name (line 1125):
# Getting the type of 'object' (line 1125)
object_322303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 17), 'object')
# Obtaining the member '__reduce__' of a type (line 1125)
reduce___322304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 17), object_322303, '__reduce__')
# Getting the type of '_tzicalvtz'
_tzicalvtz_322305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_tzicalvtz')
# Setting the type of the member '__reduce__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _tzicalvtz_322305, '__reduce__', reduce___322304)
# Declaration of the 'tzical' class

class tzical(object, ):
    str_322306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, (-1)), 'str', '\n    This object is designed to parse an iCalendar-style ``VTIMEZONE`` structure\n    as set out in `RFC 2445`_ Section 4.6.5 into one or more `tzinfo` objects.\n\n    :param `fileobj`:\n        A file or stream in iCalendar format, which should be UTF-8 encoded\n        with CRLF endings.\n\n    .. _`RFC 2445`: https://www.ietf.org/rfc/rfc2445.txt\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1139, 4, False)
        # Assigning a type to the variable 'self' (line 1140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzical.__init__', ['fileobj'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fileobj'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        # Marking variables as global (line 1140)
        module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 1140, 8), 'rrule')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1141, 8))
        
        # 'from dateutil import rrule' statement (line 1141)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
        import_322307 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1141, 8), 'dateutil')

        if (type(import_322307) is not StypyTypeError):

            if (import_322307 != 'pyd_module'):
                __import__(import_322307)
                sys_modules_322308 = sys.modules[import_322307]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1141, 8), 'dateutil', sys_modules_322308.module_type_store, module_type_store, ['rrule'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1141, 8), __file__, sys_modules_322308, sys_modules_322308.module_type_store, module_type_store)
            else:
                from dateutil import rrule

                import_from_module(stypy.reporting.localization.Localization(__file__, 1141, 8), 'dateutil', None, module_type_store, ['rrule'], [rrule])

        else:
            # Assigning a type to the variable 'dateutil' (line 1141)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 8), 'dateutil', import_322307)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')
        
        
        
        # Call to isinstance(...): (line 1143)
        # Processing the call arguments (line 1143)
        # Getting the type of 'fileobj' (line 1143)
        fileobj_322310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 22), 'fileobj', False)
        # Getting the type of 'string_types' (line 1143)
        string_types_322311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 31), 'string_types', False)
        # Processing the call keyword arguments (line 1143)
        kwargs_322312 = {}
        # Getting the type of 'isinstance' (line 1143)
        isinstance_322309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1143)
        isinstance_call_result_322313 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 11), isinstance_322309, *[fileobj_322310, string_types_322311], **kwargs_322312)
        
        # Testing the type of an if condition (line 1143)
        if_condition_322314 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1143, 8), isinstance_call_result_322313)
        # Assigning a type to the variable 'if_condition_322314' (line 1143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 8), 'if_condition_322314', if_condition_322314)
        # SSA begins for if statement (line 1143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1144):
        
        # Assigning a Name to a Attribute (line 1144):
        # Getting the type of 'fileobj' (line 1144)
        fileobj_322315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 22), 'fileobj')
        # Getting the type of 'self' (line 1144)
        self_322316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 12), 'self')
        # Setting the type of the member '_s' of a type (line 1144)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 12), self_322316, '_s', fileobj_322315)
        
        # Assigning a Call to a Name (line 1146):
        
        # Assigning a Call to a Name (line 1146):
        
        # Call to open(...): (line 1146)
        # Processing the call arguments (line 1146)
        # Getting the type of 'fileobj' (line 1146)
        fileobj_322318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 27), 'fileobj', False)
        str_322319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 36), 'str', 'r')
        # Processing the call keyword arguments (line 1146)
        kwargs_322320 = {}
        # Getting the type of 'open' (line 1146)
        open_322317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 22), 'open', False)
        # Calling open(args, kwargs) (line 1146)
        open_call_result_322321 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 22), open_322317, *[fileobj_322318, str_322319], **kwargs_322320)
        
        # Assigning a type to the variable 'fileobj' (line 1146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 12), 'fileobj', open_call_result_322321)
        # SSA branch for the else part of an if statement (line 1143)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 1148):
        
        # Assigning a Call to a Attribute (line 1148):
        
        # Call to getattr(...): (line 1148)
        # Processing the call arguments (line 1148)
        # Getting the type of 'fileobj' (line 1148)
        fileobj_322323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 30), 'fileobj', False)
        str_322324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1148, 39), 'str', 'name')
        
        # Call to repr(...): (line 1148)
        # Processing the call arguments (line 1148)
        # Getting the type of 'fileobj' (line 1148)
        fileobj_322326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 52), 'fileobj', False)
        # Processing the call keyword arguments (line 1148)
        kwargs_322327 = {}
        # Getting the type of 'repr' (line 1148)
        repr_322325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 47), 'repr', False)
        # Calling repr(args, kwargs) (line 1148)
        repr_call_result_322328 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 47), repr_322325, *[fileobj_322326], **kwargs_322327)
        
        # Processing the call keyword arguments (line 1148)
        kwargs_322329 = {}
        # Getting the type of 'getattr' (line 1148)
        getattr_322322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 22), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1148)
        getattr_call_result_322330 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 22), getattr_322322, *[fileobj_322323, str_322324, repr_call_result_322328], **kwargs_322329)
        
        # Getting the type of 'self' (line 1148)
        self_322331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'self')
        # Setting the type of the member '_s' of a type (line 1148)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1148, 12), self_322331, '_s', getattr_call_result_322330)
        
        # Assigning a Call to a Name (line 1149):
        
        # Assigning a Call to a Name (line 1149):
        
        # Call to _ContextWrapper(...): (line 1149)
        # Processing the call arguments (line 1149)
        # Getting the type of 'fileobj' (line 1149)
        fileobj_322333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 38), 'fileobj', False)
        # Processing the call keyword arguments (line 1149)
        kwargs_322334 = {}
        # Getting the type of '_ContextWrapper' (line 1149)
        _ContextWrapper_322332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 22), '_ContextWrapper', False)
        # Calling _ContextWrapper(args, kwargs) (line 1149)
        _ContextWrapper_call_result_322335 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 22), _ContextWrapper_322332, *[fileobj_322333], **kwargs_322334)
        
        # Assigning a type to the variable 'fileobj' (line 1149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'fileobj', _ContextWrapper_call_result_322335)
        # SSA join for if statement (line 1143)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Attribute (line 1151):
        
        # Assigning a Dict to a Attribute (line 1151):
        
        # Obtaining an instance of the builtin type 'dict' (line 1151)
        dict_322336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1151, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1151)
        
        # Getting the type of 'self' (line 1151)
        self_322337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 8), 'self')
        # Setting the type of the member '_vtz' of a type (line 1151)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 8), self_322337, '_vtz', dict_322336)
        # Getting the type of 'fileobj' (line 1153)
        fileobj_322338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 13), 'fileobj')
        with_322339 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1153, 13), fileobj_322338, 'with parameter', '__enter__', '__exit__')

        if with_322339:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 1153)
            enter___322340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 13), fileobj_322338, '__enter__')
            with_enter_322341 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 13), enter___322340)
            # Assigning a type to the variable 'fobj' (line 1153)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 13), 'fobj', with_enter_322341)
            
            # Call to _parse_rfc(...): (line 1154)
            # Processing the call arguments (line 1154)
            
            # Call to read(...): (line 1154)
            # Processing the call keyword arguments (line 1154)
            kwargs_322346 = {}
            # Getting the type of 'fobj' (line 1154)
            fobj_322344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 28), 'fobj', False)
            # Obtaining the member 'read' of a type (line 1154)
            read_322345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 28), fobj_322344, 'read')
            # Calling read(args, kwargs) (line 1154)
            read_call_result_322347 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 28), read_322345, *[], **kwargs_322346)
            
            # Processing the call keyword arguments (line 1154)
            kwargs_322348 = {}
            # Getting the type of 'self' (line 1154)
            self_322342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 12), 'self', False)
            # Obtaining the member '_parse_rfc' of a type (line 1154)
            _parse_rfc_322343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 12), self_322342, '_parse_rfc')
            # Calling _parse_rfc(args, kwargs) (line 1154)
            _parse_rfc_call_result_322349 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 12), _parse_rfc_322343, *[read_call_result_322347], **kwargs_322348)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 1153)
            exit___322350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 13), fileobj_322338, '__exit__')
            with_exit_322351 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 13), exit___322350, None, None, None)

        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def keys(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'keys'
        module_type_store = module_type_store.open_function_context('keys', 1156, 4, False)
        # Assigning a type to the variable 'self' (line 1157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzical.keys.__dict__.__setitem__('stypy_localization', localization)
        tzical.keys.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzical.keys.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzical.keys.__dict__.__setitem__('stypy_function_name', 'tzical.keys')
        tzical.keys.__dict__.__setitem__('stypy_param_names_list', [])
        tzical.keys.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzical.keys.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzical.keys.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzical.keys.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzical.keys.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzical.keys.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzical.keys', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'keys', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'keys(...)' code ##################

        str_322352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, (-1)), 'str', '\n        Retrieves the available time zones as a list.\n        ')
        
        # Call to list(...): (line 1160)
        # Processing the call arguments (line 1160)
        
        # Call to keys(...): (line 1160)
        # Processing the call keyword arguments (line 1160)
        kwargs_322357 = {}
        # Getting the type of 'self' (line 1160)
        self_322354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 20), 'self', False)
        # Obtaining the member '_vtz' of a type (line 1160)
        _vtz_322355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 20), self_322354, '_vtz')
        # Obtaining the member 'keys' of a type (line 1160)
        keys_322356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 20), _vtz_322355, 'keys')
        # Calling keys(args, kwargs) (line 1160)
        keys_call_result_322358 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 20), keys_322356, *[], **kwargs_322357)
        
        # Processing the call keyword arguments (line 1160)
        kwargs_322359 = {}
        # Getting the type of 'list' (line 1160)
        list_322353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 15), 'list', False)
        # Calling list(args, kwargs) (line 1160)
        list_call_result_322360 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 15), list_322353, *[keys_call_result_322358], **kwargs_322359)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 8), 'stypy_return_type', list_call_result_322360)
        
        # ################# End of 'keys(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'keys' in the type store
        # Getting the type of 'stypy_return_type' (line 1156)
        stypy_return_type_322361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322361)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'keys'
        return stypy_return_type_322361


    @norecursion
    def get(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1162)
        None_322362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 23), 'None')
        defaults = [None_322362]
        # Create a new context for function 'get'
        module_type_store = module_type_store.open_function_context('get', 1162, 4, False)
        # Assigning a type to the variable 'self' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzical.get.__dict__.__setitem__('stypy_localization', localization)
        tzical.get.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzical.get.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzical.get.__dict__.__setitem__('stypy_function_name', 'tzical.get')
        tzical.get.__dict__.__setitem__('stypy_param_names_list', ['tzid'])
        tzical.get.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzical.get.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzical.get.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzical.get.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzical.get.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzical.get.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzical.get', ['tzid'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get', localization, ['tzid'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get(...)' code ##################

        str_322363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, (-1)), 'str', '\n        Retrieve a :py:class:`datetime.tzinfo` object by its ``tzid``.\n\n        :param tzid:\n            If there is exactly one time zone available, omitting ``tzid``\n            or passing :py:const:`None` value returns it. Otherwise a valid\n            key (which can be retrieved from :func:`keys`) is required.\n\n        :raises ValueError:\n            Raised if ``tzid`` is not specified but there are either more\n            or fewer than 1 zone defined.\n\n        :returns:\n            Returns either a :py:class:`datetime.tzinfo` object representing\n            the relevant time zone or :py:const:`None` if the ``tzid`` was\n            not found.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1180)
        # Getting the type of 'tzid' (line 1180)
        tzid_322364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 11), 'tzid')
        # Getting the type of 'None' (line 1180)
        None_322365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 19), 'None')
        
        (may_be_322366, more_types_in_union_322367) = may_be_none(tzid_322364, None_322365)

        if may_be_322366:

            if more_types_in_union_322367:
                # Runtime conditional SSA (line 1180)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            
            # Call to len(...): (line 1181)
            # Processing the call arguments (line 1181)
            # Getting the type of 'self' (line 1181)
            self_322369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 19), 'self', False)
            # Obtaining the member '_vtz' of a type (line 1181)
            _vtz_322370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 19), self_322369, '_vtz')
            # Processing the call keyword arguments (line 1181)
            kwargs_322371 = {}
            # Getting the type of 'len' (line 1181)
            len_322368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 15), 'len', False)
            # Calling len(args, kwargs) (line 1181)
            len_call_result_322372 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 15), len_322368, *[_vtz_322370], **kwargs_322371)
            
            int_322373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, 33), 'int')
            # Applying the binary operator '==' (line 1181)
            result_eq_322374 = python_operator(stypy.reporting.localization.Localization(__file__, 1181, 15), '==', len_call_result_322372, int_322373)
            
            # Testing the type of an if condition (line 1181)
            if_condition_322375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1181, 12), result_eq_322374)
            # Assigning a type to the variable 'if_condition_322375' (line 1181)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 12), 'if_condition_322375', if_condition_322375)
            # SSA begins for if statement (line 1181)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1182)
            # Processing the call arguments (line 1182)
            str_322377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 33), 'str', 'no timezones defined')
            # Processing the call keyword arguments (line 1182)
            kwargs_322378 = {}
            # Getting the type of 'ValueError' (line 1182)
            ValueError_322376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1182)
            ValueError_call_result_322379 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 22), ValueError_322376, *[str_322377], **kwargs_322378)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1182, 16), ValueError_call_result_322379, 'raise parameter', BaseException)
            # SSA branch for the else part of an if statement (line 1181)
            module_type_store.open_ssa_branch('else')
            
            
            
            # Call to len(...): (line 1183)
            # Processing the call arguments (line 1183)
            # Getting the type of 'self' (line 1183)
            self_322381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 21), 'self', False)
            # Obtaining the member '_vtz' of a type (line 1183)
            _vtz_322382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 21), self_322381, '_vtz')
            # Processing the call keyword arguments (line 1183)
            kwargs_322383 = {}
            # Getting the type of 'len' (line 1183)
            len_322380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 17), 'len', False)
            # Calling len(args, kwargs) (line 1183)
            len_call_result_322384 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 17), len_322380, *[_vtz_322382], **kwargs_322383)
            
            int_322385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 34), 'int')
            # Applying the binary operator '>' (line 1183)
            result_gt_322386 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 17), '>', len_call_result_322384, int_322385)
            
            # Testing the type of an if condition (line 1183)
            if_condition_322387 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1183, 17), result_gt_322386)
            # Assigning a type to the variable 'if_condition_322387' (line 1183)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 17), 'if_condition_322387', if_condition_322387)
            # SSA begins for if statement (line 1183)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1184)
            # Processing the call arguments (line 1184)
            str_322389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 33), 'str', 'more than one timezone available')
            # Processing the call keyword arguments (line 1184)
            kwargs_322390 = {}
            # Getting the type of 'ValueError' (line 1184)
            ValueError_322388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1184)
            ValueError_call_result_322391 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 22), ValueError_322388, *[str_322389], **kwargs_322390)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1184, 16), ValueError_call_result_322391, 'raise parameter', BaseException)
            # SSA join for if statement (line 1183)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1181)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 1185):
            
            # Assigning a Call to a Name (line 1185):
            
            # Call to next(...): (line 1185)
            # Processing the call arguments (line 1185)
            
            # Call to iter(...): (line 1185)
            # Processing the call arguments (line 1185)
            # Getting the type of 'self' (line 1185)
            self_322394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 29), 'self', False)
            # Obtaining the member '_vtz' of a type (line 1185)
            _vtz_322395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 29), self_322394, '_vtz')
            # Processing the call keyword arguments (line 1185)
            kwargs_322396 = {}
            # Getting the type of 'iter' (line 1185)
            iter_322393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 24), 'iter', False)
            # Calling iter(args, kwargs) (line 1185)
            iter_call_result_322397 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 24), iter_322393, *[_vtz_322395], **kwargs_322396)
            
            # Processing the call keyword arguments (line 1185)
            kwargs_322398 = {}
            # Getting the type of 'next' (line 1185)
            next_322392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 19), 'next', False)
            # Calling next(args, kwargs) (line 1185)
            next_call_result_322399 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 19), next_322392, *[iter_call_result_322397], **kwargs_322398)
            
            # Assigning a type to the variable 'tzid' (line 1185)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 12), 'tzid', next_call_result_322399)

            if more_types_in_union_322367:
                # SSA join for if statement (line 1180)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to get(...): (line 1187)
        # Processing the call arguments (line 1187)
        # Getting the type of 'tzid' (line 1187)
        tzid_322403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 29), 'tzid', False)
        # Processing the call keyword arguments (line 1187)
        kwargs_322404 = {}
        # Getting the type of 'self' (line 1187)
        self_322400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 15), 'self', False)
        # Obtaining the member '_vtz' of a type (line 1187)
        _vtz_322401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 15), self_322400, '_vtz')
        # Obtaining the member 'get' of a type (line 1187)
        get_322402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 15), _vtz_322401, 'get')
        # Calling get(args, kwargs) (line 1187)
        get_call_result_322405 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 15), get_322402, *[tzid_322403], **kwargs_322404)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'stypy_return_type', get_call_result_322405)
        
        # ################# End of 'get(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get' in the type store
        # Getting the type of 'stypy_return_type' (line 1162)
        stypy_return_type_322406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322406)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get'
        return stypy_return_type_322406


    @norecursion
    def _parse_offset(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_parse_offset'
        module_type_store = module_type_store.open_function_context('_parse_offset', 1189, 4, False)
        # Assigning a type to the variable 'self' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzical._parse_offset.__dict__.__setitem__('stypy_localization', localization)
        tzical._parse_offset.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzical._parse_offset.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzical._parse_offset.__dict__.__setitem__('stypy_function_name', 'tzical._parse_offset')
        tzical._parse_offset.__dict__.__setitem__('stypy_param_names_list', ['s'])
        tzical._parse_offset.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzical._parse_offset.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzical._parse_offset.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzical._parse_offset.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzical._parse_offset.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzical._parse_offset.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzical._parse_offset', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_parse_offset', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_parse_offset(...)' code ##################

        
        # Assigning a Call to a Name (line 1190):
        
        # Assigning a Call to a Name (line 1190):
        
        # Call to strip(...): (line 1190)
        # Processing the call keyword arguments (line 1190)
        kwargs_322409 = {}
        # Getting the type of 's' (line 1190)
        s_322407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 12), 's', False)
        # Obtaining the member 'strip' of a type (line 1190)
        strip_322408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 12), s_322407, 'strip')
        # Calling strip(args, kwargs) (line 1190)
        strip_call_result_322410 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 12), strip_322408, *[], **kwargs_322409)
        
        # Assigning a type to the variable 's' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 8), 's', strip_call_result_322410)
        
        
        # Getting the type of 's' (line 1191)
        s_322411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 15), 's')
        # Applying the 'not' unary operator (line 1191)
        result_not__322412 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 11), 'not', s_322411)
        
        # Testing the type of an if condition (line 1191)
        if_condition_322413 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1191, 8), result_not__322412)
        # Assigning a type to the variable 'if_condition_322413' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'if_condition_322413', if_condition_322413)
        # SSA begins for if statement (line 1191)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1192)
        # Processing the call arguments (line 1192)
        str_322415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 29), 'str', 'empty offset')
        # Processing the call keyword arguments (line 1192)
        kwargs_322416 = {}
        # Getting the type of 'ValueError' (line 1192)
        ValueError_322414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1192)
        ValueError_call_result_322417 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 18), ValueError_322414, *[str_322415], **kwargs_322416)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1192, 12), ValueError_call_result_322417, 'raise parameter', BaseException)
        # SSA join for if statement (line 1191)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_322418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 13), 'int')
        # Getting the type of 's' (line 1193)
        s_322419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 11), 's')
        # Obtaining the member '__getitem__' of a type (line 1193)
        getitem___322420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 11), s_322419, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1193)
        subscript_call_result_322421 = invoke(stypy.reporting.localization.Localization(__file__, 1193, 11), getitem___322420, int_322418)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1193)
        tuple_322422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1193)
        # Adding element type (line 1193)
        str_322423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 20), 'str', '+')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 20), tuple_322422, str_322423)
        # Adding element type (line 1193)
        str_322424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 25), 'str', '-')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1193, 20), tuple_322422, str_322424)
        
        # Applying the binary operator 'in' (line 1193)
        result_contains_322425 = python_operator(stypy.reporting.localization.Localization(__file__, 1193, 11), 'in', subscript_call_result_322421, tuple_322422)
        
        # Testing the type of an if condition (line 1193)
        if_condition_322426 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1193, 8), result_contains_322425)
        # Assigning a type to the variable 'if_condition_322426' (line 1193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 8), 'if_condition_322426', if_condition_322426)
        # SSA begins for if statement (line 1193)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1194):
        
        # Assigning a Subscript to a Name (line 1194):
        
        # Obtaining the type of the subscript
        
        
        # Obtaining the type of the subscript
        int_322427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 32), 'int')
        # Getting the type of 's' (line 1194)
        s_322428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 30), 's')
        # Obtaining the member '__getitem__' of a type (line 1194)
        getitem___322429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 30), s_322428, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1194)
        subscript_call_result_322430 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 30), getitem___322429, int_322427)
        
        str_322431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 38), 'str', '+')
        # Applying the binary operator '==' (line 1194)
        result_eq_322432 = python_operator(stypy.reporting.localization.Localization(__file__, 1194, 30), '==', subscript_call_result_322430, str_322431)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1194)
        tuple_322433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1194)
        # Adding element type (line 1194)
        int_322434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1194, 22), tuple_322433, int_322434)
        # Adding element type (line 1194)
        
        int_322435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 27), 'int')
        # Applying the 'uadd' unary operator (line 1194)
        result___pos___322436 = python_operator(stypy.reporting.localization.Localization(__file__, 1194, 26), 'uadd', int_322435)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1194, 22), tuple_322433, result___pos___322436)
        
        # Obtaining the member '__getitem__' of a type (line 1194)
        getitem___322437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 22), tuple_322433, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1194)
        subscript_call_result_322438 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 22), getitem___322437, result_eq_322432)
        
        # Assigning a type to the variable 'signal' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 12), 'signal', subscript_call_result_322438)
        
        # Assigning a Subscript to a Name (line 1195):
        
        # Assigning a Subscript to a Name (line 1195):
        
        # Obtaining the type of the subscript
        int_322439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 18), 'int')
        slice_322440 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1195, 16), int_322439, None, None)
        # Getting the type of 's' (line 1195)
        s_322441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 16), 's')
        # Obtaining the member '__getitem__' of a type (line 1195)
        getitem___322442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 16), s_322441, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1195)
        subscript_call_result_322443 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 16), getitem___322442, slice_322440)
        
        # Assigning a type to the variable 's' (line 1195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 12), 's', subscript_call_result_322443)
        # SSA branch for the else part of an if statement (line 1193)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a UnaryOp to a Name (line 1197):
        
        # Assigning a UnaryOp to a Name (line 1197):
        
        int_322444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 22), 'int')
        # Applying the 'uadd' unary operator (line 1197)
        result___pos___322445 = python_operator(stypy.reporting.localization.Localization(__file__, 1197, 21), 'uadd', int_322444)
        
        # Assigning a type to the variable 'signal' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 12), 'signal', result___pos___322445)
        # SSA join for if statement (line 1193)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 1198)
        # Processing the call arguments (line 1198)
        # Getting the type of 's' (line 1198)
        s_322447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 15), 's', False)
        # Processing the call keyword arguments (line 1198)
        kwargs_322448 = {}
        # Getting the type of 'len' (line 1198)
        len_322446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 11), 'len', False)
        # Calling len(args, kwargs) (line 1198)
        len_call_result_322449 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 11), len_322446, *[s_322447], **kwargs_322448)
        
        int_322450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 21), 'int')
        # Applying the binary operator '==' (line 1198)
        result_eq_322451 = python_operator(stypy.reporting.localization.Localization(__file__, 1198, 11), '==', len_call_result_322449, int_322450)
        
        # Testing the type of an if condition (line 1198)
        if_condition_322452 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1198, 8), result_eq_322451)
        # Assigning a type to the variable 'if_condition_322452' (line 1198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 8), 'if_condition_322452', if_condition_322452)
        # SSA begins for if statement (line 1198)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to int(...): (line 1199)
        # Processing the call arguments (line 1199)
        
        # Obtaining the type of the subscript
        int_322454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 27), 'int')
        slice_322455 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1199, 24), None, int_322454, None)
        # Getting the type of 's' (line 1199)
        s_322456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 24), 's', False)
        # Obtaining the member '__getitem__' of a type (line 1199)
        getitem___322457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 24), s_322456, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1199)
        subscript_call_result_322458 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 24), getitem___322457, slice_322455)
        
        # Processing the call keyword arguments (line 1199)
        kwargs_322459 = {}
        # Getting the type of 'int' (line 1199)
        int_322453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 20), 'int', False)
        # Calling int(args, kwargs) (line 1199)
        int_call_result_322460 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 20), int_322453, *[subscript_call_result_322458], **kwargs_322459)
        
        int_322461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 33), 'int')
        # Applying the binary operator '*' (line 1199)
        result_mul_322462 = python_operator(stypy.reporting.localization.Localization(__file__, 1199, 20), '*', int_call_result_322460, int_322461)
        
        
        # Call to int(...): (line 1199)
        # Processing the call arguments (line 1199)
        
        # Obtaining the type of the subscript
        int_322464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 46), 'int')
        slice_322465 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1199, 44), int_322464, None, None)
        # Getting the type of 's' (line 1199)
        s_322466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 44), 's', False)
        # Obtaining the member '__getitem__' of a type (line 1199)
        getitem___322467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 44), s_322466, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1199)
        subscript_call_result_322468 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 44), getitem___322467, slice_322465)
        
        # Processing the call keyword arguments (line 1199)
        kwargs_322469 = {}
        # Getting the type of 'int' (line 1199)
        int_322463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 40), 'int', False)
        # Calling int(args, kwargs) (line 1199)
        int_call_result_322470 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 40), int_322463, *[subscript_call_result_322468], **kwargs_322469)
        
        int_322471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 53), 'int')
        # Applying the binary operator '*' (line 1199)
        result_mul_322472 = python_operator(stypy.reporting.localization.Localization(__file__, 1199, 40), '*', int_call_result_322470, int_322471)
        
        # Applying the binary operator '+' (line 1199)
        result_add_322473 = python_operator(stypy.reporting.localization.Localization(__file__, 1199, 20), '+', result_mul_322462, result_mul_322472)
        
        # Getting the type of 'signal' (line 1199)
        signal_322474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 59), 'signal')
        # Applying the binary operator '*' (line 1199)
        result_mul_322475 = python_operator(stypy.reporting.localization.Localization(__file__, 1199, 19), '*', result_add_322473, signal_322474)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 12), 'stypy_return_type', result_mul_322475)
        # SSA branch for the else part of an if statement (line 1198)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 1200)
        # Processing the call arguments (line 1200)
        # Getting the type of 's' (line 1200)
        s_322477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 17), 's', False)
        # Processing the call keyword arguments (line 1200)
        kwargs_322478 = {}
        # Getting the type of 'len' (line 1200)
        len_322476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 13), 'len', False)
        # Calling len(args, kwargs) (line 1200)
        len_call_result_322479 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 13), len_322476, *[s_322477], **kwargs_322478)
        
        int_322480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 23), 'int')
        # Applying the binary operator '==' (line 1200)
        result_eq_322481 = python_operator(stypy.reporting.localization.Localization(__file__, 1200, 13), '==', len_call_result_322479, int_322480)
        
        # Testing the type of an if condition (line 1200)
        if_condition_322482 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1200, 13), result_eq_322481)
        # Assigning a type to the variable 'if_condition_322482' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 13), 'if_condition_322482', if_condition_322482)
        # SSA begins for if statement (line 1200)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to int(...): (line 1201)
        # Processing the call arguments (line 1201)
        
        # Obtaining the type of the subscript
        int_322484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 27), 'int')
        slice_322485 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1201, 24), None, int_322484, None)
        # Getting the type of 's' (line 1201)
        s_322486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 24), 's', False)
        # Obtaining the member '__getitem__' of a type (line 1201)
        getitem___322487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 24), s_322486, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1201)
        subscript_call_result_322488 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 24), getitem___322487, slice_322485)
        
        # Processing the call keyword arguments (line 1201)
        kwargs_322489 = {}
        # Getting the type of 'int' (line 1201)
        int_322483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 20), 'int', False)
        # Calling int(args, kwargs) (line 1201)
        int_call_result_322490 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 20), int_322483, *[subscript_call_result_322488], **kwargs_322489)
        
        int_322491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 33), 'int')
        # Applying the binary operator '*' (line 1201)
        result_mul_322492 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 20), '*', int_call_result_322490, int_322491)
        
        
        # Call to int(...): (line 1201)
        # Processing the call arguments (line 1201)
        
        # Obtaining the type of the subscript
        int_322494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 46), 'int')
        int_322495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 48), 'int')
        slice_322496 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1201, 44), int_322494, int_322495, None)
        # Getting the type of 's' (line 1201)
        s_322497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 44), 's', False)
        # Obtaining the member '__getitem__' of a type (line 1201)
        getitem___322498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 44), s_322497, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1201)
        subscript_call_result_322499 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 44), getitem___322498, slice_322496)
        
        # Processing the call keyword arguments (line 1201)
        kwargs_322500 = {}
        # Getting the type of 'int' (line 1201)
        int_322493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 40), 'int', False)
        # Calling int(args, kwargs) (line 1201)
        int_call_result_322501 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 40), int_322493, *[subscript_call_result_322499], **kwargs_322500)
        
        int_322502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 54), 'int')
        # Applying the binary operator '*' (line 1201)
        result_mul_322503 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 40), '*', int_call_result_322501, int_322502)
        
        # Applying the binary operator '+' (line 1201)
        result_add_322504 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 20), '+', result_mul_322492, result_mul_322503)
        
        
        # Call to int(...): (line 1201)
        # Processing the call arguments (line 1201)
        
        # Obtaining the type of the subscript
        int_322506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 65), 'int')
        slice_322507 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1201, 63), int_322506, None, None)
        # Getting the type of 's' (line 1201)
        s_322508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 63), 's', False)
        # Obtaining the member '__getitem__' of a type (line 1201)
        getitem___322509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 63), s_322508, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1201)
        subscript_call_result_322510 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 63), getitem___322509, slice_322507)
        
        # Processing the call keyword arguments (line 1201)
        kwargs_322511 = {}
        # Getting the type of 'int' (line 1201)
        int_322505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 59), 'int', False)
        # Calling int(args, kwargs) (line 1201)
        int_call_result_322512 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 59), int_322505, *[subscript_call_result_322510], **kwargs_322511)
        
        # Applying the binary operator '+' (line 1201)
        result_add_322513 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 57), '+', result_add_322504, int_call_result_322512)
        
        # Getting the type of 'signal' (line 1201)
        signal_322514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 73), 'signal')
        # Applying the binary operator '*' (line 1201)
        result_mul_322515 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 19), '*', result_add_322513, signal_322514)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 12), 'stypy_return_type', result_mul_322515)
        # SSA branch for the else part of an if statement (line 1200)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1203)
        # Processing the call arguments (line 1203)
        str_322517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1203, 29), 'str', 'invalid offset: ')
        # Getting the type of 's' (line 1203)
        s_322518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 50), 's', False)
        # Applying the binary operator '+' (line 1203)
        result_add_322519 = python_operator(stypy.reporting.localization.Localization(__file__, 1203, 29), '+', str_322517, s_322518)
        
        # Processing the call keyword arguments (line 1203)
        kwargs_322520 = {}
        # Getting the type of 'ValueError' (line 1203)
        ValueError_322516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1203)
        ValueError_call_result_322521 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 18), ValueError_322516, *[result_add_322519], **kwargs_322520)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1203, 12), ValueError_call_result_322521, 'raise parameter', BaseException)
        # SSA join for if statement (line 1200)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1198)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_parse_offset(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_parse_offset' in the type store
        # Getting the type of 'stypy_return_type' (line 1189)
        stypy_return_type_322522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322522)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_parse_offset'
        return stypy_return_type_322522


    @norecursion
    def _parse_rfc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_parse_rfc'
        module_type_store = module_type_store.open_function_context('_parse_rfc', 1205, 4, False)
        # Assigning a type to the variable 'self' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzical._parse_rfc.__dict__.__setitem__('stypy_localization', localization)
        tzical._parse_rfc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzical._parse_rfc.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzical._parse_rfc.__dict__.__setitem__('stypy_function_name', 'tzical._parse_rfc')
        tzical._parse_rfc.__dict__.__setitem__('stypy_param_names_list', ['s'])
        tzical._parse_rfc.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzical._parse_rfc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzical._parse_rfc.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzical._parse_rfc.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzical._parse_rfc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzical._parse_rfc.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzical._parse_rfc', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_parse_rfc', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_parse_rfc(...)' code ##################

        
        # Assigning a Call to a Name (line 1206):
        
        # Assigning a Call to a Name (line 1206):
        
        # Call to splitlines(...): (line 1206)
        # Processing the call keyword arguments (line 1206)
        kwargs_322525 = {}
        # Getting the type of 's' (line 1206)
        s_322523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 16), 's', False)
        # Obtaining the member 'splitlines' of a type (line 1206)
        splitlines_322524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 16), s_322523, 'splitlines')
        # Calling splitlines(args, kwargs) (line 1206)
        splitlines_call_result_322526 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 16), splitlines_322524, *[], **kwargs_322525)
        
        # Assigning a type to the variable 'lines' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 8), 'lines', splitlines_call_result_322526)
        
        
        # Getting the type of 'lines' (line 1207)
        lines_322527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 15), 'lines')
        # Applying the 'not' unary operator (line 1207)
        result_not__322528 = python_operator(stypy.reporting.localization.Localization(__file__, 1207, 11), 'not', lines_322527)
        
        # Testing the type of an if condition (line 1207)
        if_condition_322529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1207, 8), result_not__322528)
        # Assigning a type to the variable 'if_condition_322529' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 8), 'if_condition_322529', if_condition_322529)
        # SSA begins for if statement (line 1207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1208)
        # Processing the call arguments (line 1208)
        str_322531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1208, 29), 'str', 'empty string')
        # Processing the call keyword arguments (line 1208)
        kwargs_322532 = {}
        # Getting the type of 'ValueError' (line 1208)
        ValueError_322530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1208)
        ValueError_call_result_322533 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 18), ValueError_322530, *[str_322531], **kwargs_322532)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1208, 12), ValueError_call_result_322533, 'raise parameter', BaseException)
        # SSA join for if statement (line 1207)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 1211):
        
        # Assigning a Num to a Name (line 1211):
        int_322534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 12), 'int')
        # Assigning a type to the variable 'i' (line 1211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 8), 'i', int_322534)
        
        
        # Getting the type of 'i' (line 1212)
        i_322535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 14), 'i')
        
        # Call to len(...): (line 1212)
        # Processing the call arguments (line 1212)
        # Getting the type of 'lines' (line 1212)
        lines_322537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 22), 'lines', False)
        # Processing the call keyword arguments (line 1212)
        kwargs_322538 = {}
        # Getting the type of 'len' (line 1212)
        len_322536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 18), 'len', False)
        # Calling len(args, kwargs) (line 1212)
        len_call_result_322539 = invoke(stypy.reporting.localization.Localization(__file__, 1212, 18), len_322536, *[lines_322537], **kwargs_322538)
        
        # Applying the binary operator '<' (line 1212)
        result_lt_322540 = python_operator(stypy.reporting.localization.Localization(__file__, 1212, 14), '<', i_322535, len_call_result_322539)
        
        # Testing the type of an if condition (line 1212)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1212, 8), result_lt_322540)
        # SSA begins for while statement (line 1212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Call to a Name (line 1213):
        
        # Assigning a Call to a Name (line 1213):
        
        # Call to rstrip(...): (line 1213)
        # Processing the call keyword arguments (line 1213)
        kwargs_322546 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1213)
        i_322541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 25), 'i', False)
        # Getting the type of 'lines' (line 1213)
        lines_322542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 19), 'lines', False)
        # Obtaining the member '__getitem__' of a type (line 1213)
        getitem___322543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 19), lines_322542, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1213)
        subscript_call_result_322544 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 19), getitem___322543, i_322541)
        
        # Obtaining the member 'rstrip' of a type (line 1213)
        rstrip_322545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 19), subscript_call_result_322544, 'rstrip')
        # Calling rstrip(args, kwargs) (line 1213)
        rstrip_call_result_322547 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 19), rstrip_322545, *[], **kwargs_322546)
        
        # Assigning a type to the variable 'line' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 12), 'line', rstrip_call_result_322547)
        
        
        # Getting the type of 'line' (line 1214)
        line_322548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 19), 'line')
        # Applying the 'not' unary operator (line 1214)
        result_not__322549 = python_operator(stypy.reporting.localization.Localization(__file__, 1214, 15), 'not', line_322548)
        
        # Testing the type of an if condition (line 1214)
        if_condition_322550 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1214, 12), result_not__322549)
        # Assigning a type to the variable 'if_condition_322550' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 12), 'if_condition_322550', if_condition_322550)
        # SSA begins for if statement (line 1214)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'lines' (line 1215)
        lines_322551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 20), 'lines')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1215)
        i_322552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 26), 'i')
        # Getting the type of 'lines' (line 1215)
        lines_322553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 20), 'lines')
        # Obtaining the member '__getitem__' of a type (line 1215)
        getitem___322554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 20), lines_322553, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1215)
        subscript_call_result_322555 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 20), getitem___322554, i_322552)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1215, 16), lines_322551, subscript_call_result_322555)
        # SSA branch for the else part of an if statement (line 1214)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1216)
        i_322556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 17), 'i')
        int_322557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 21), 'int')
        # Applying the binary operator '>' (line 1216)
        result_gt_322558 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 17), '>', i_322556, int_322557)
        
        
        
        # Obtaining the type of the subscript
        int_322559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 32), 'int')
        # Getting the type of 'line' (line 1216)
        line_322560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 27), 'line')
        # Obtaining the member '__getitem__' of a type (line 1216)
        getitem___322561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 27), line_322560, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1216)
        subscript_call_result_322562 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 27), getitem___322561, int_322559)
        
        str_322563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1216, 38), 'str', ' ')
        # Applying the binary operator '==' (line 1216)
        result_eq_322564 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 27), '==', subscript_call_result_322562, str_322563)
        
        # Applying the binary operator 'and' (line 1216)
        result_and_keyword_322565 = python_operator(stypy.reporting.localization.Localization(__file__, 1216, 17), 'and', result_gt_322558, result_eq_322564)
        
        # Testing the type of an if condition (line 1216)
        if_condition_322566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1216, 17), result_and_keyword_322565)
        # Assigning a type to the variable 'if_condition_322566' (line 1216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 17), 'if_condition_322566', if_condition_322566)
        # SSA begins for if statement (line 1216)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'lines' (line 1217)
        lines_322567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 16), 'lines')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1217)
        i_322568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 22), 'i')
        int_322569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1217, 24), 'int')
        # Applying the binary operator '-' (line 1217)
        result_sub_322570 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 22), '-', i_322568, int_322569)
        
        # Getting the type of 'lines' (line 1217)
        lines_322571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 16), 'lines')
        # Obtaining the member '__getitem__' of a type (line 1217)
        getitem___322572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 16), lines_322571, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1217)
        subscript_call_result_322573 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 16), getitem___322572, result_sub_322570)
        
        
        # Obtaining the type of the subscript
        int_322574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1217, 35), 'int')
        slice_322575 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1217, 30), int_322574, None, None)
        # Getting the type of 'line' (line 1217)
        line_322576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 30), 'line')
        # Obtaining the member '__getitem__' of a type (line 1217)
        getitem___322577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 30), line_322576, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1217)
        subscript_call_result_322578 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 30), getitem___322577, slice_322575)
        
        # Applying the binary operator '+=' (line 1217)
        result_iadd_322579 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 16), '+=', subscript_call_result_322573, subscript_call_result_322578)
        # Getting the type of 'lines' (line 1217)
        lines_322580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 16), 'lines')
        # Getting the type of 'i' (line 1217)
        i_322581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 22), 'i')
        int_322582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1217, 24), 'int')
        # Applying the binary operator '-' (line 1217)
        result_sub_322583 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 22), '-', i_322581, int_322582)
        
        # Storing an element on a container (line 1217)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1217, 16), lines_322580, (result_sub_322583, result_iadd_322579))
        
        # Deleting a member
        # Getting the type of 'lines' (line 1218)
        lines_322584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 20), 'lines')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1218)
        i_322585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 26), 'i')
        # Getting the type of 'lines' (line 1218)
        lines_322586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 20), 'lines')
        # Obtaining the member '__getitem__' of a type (line 1218)
        getitem___322587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 20), lines_322586, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1218)
        subscript_call_result_322588 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 20), getitem___322587, i_322585)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1218, 16), lines_322584, subscript_call_result_322588)
        # SSA branch for the else part of an if statement (line 1216)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'i' (line 1220)
        i_322589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 16), 'i')
        int_322590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 21), 'int')
        # Applying the binary operator '+=' (line 1220)
        result_iadd_322591 = python_operator(stypy.reporting.localization.Localization(__file__, 1220, 16), '+=', i_322589, int_322590)
        # Assigning a type to the variable 'i' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 16), 'i', result_iadd_322591)
        
        # SSA join for if statement (line 1216)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1214)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 1212)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1222):
        
        # Assigning a Name to a Name (line 1222):
        # Getting the type of 'None' (line 1222)
        None_322592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 15), 'None')
        # Assigning a type to the variable 'tzid' (line 1222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 8), 'tzid', None_322592)
        
        # Assigning a List to a Name (line 1223):
        
        # Assigning a List to a Name (line 1223):
        
        # Obtaining an instance of the builtin type 'list' (line 1223)
        list_322593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1223)
        
        # Assigning a type to the variable 'comps' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), 'comps', list_322593)
        
        # Assigning a Name to a Name (line 1224):
        
        # Assigning a Name to a Name (line 1224):
        # Getting the type of 'False' (line 1224)
        False_322594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 16), 'False')
        # Assigning a type to the variable 'invtz' (line 1224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 8), 'invtz', False_322594)
        
        # Assigning a Name to a Name (line 1225):
        
        # Assigning a Name to a Name (line 1225):
        # Getting the type of 'None' (line 1225)
        None_322595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 19), 'None')
        # Assigning a type to the variable 'comptype' (line 1225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1225, 8), 'comptype', None_322595)
        
        # Getting the type of 'lines' (line 1226)
        lines_322596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 20), 'lines')
        # Testing the type of a for loop iterable (line 1226)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1226, 8), lines_322596)
        # Getting the type of the for loop variable (line 1226)
        for_loop_var_322597 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1226, 8), lines_322596)
        # Assigning a type to the variable 'line' (line 1226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'line', for_loop_var_322597)
        # SSA begins for a for statement (line 1226)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'line' (line 1227)
        line_322598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 19), 'line')
        # Applying the 'not' unary operator (line 1227)
        result_not__322599 = python_operator(stypy.reporting.localization.Localization(__file__, 1227, 15), 'not', line_322598)
        
        # Testing the type of an if condition (line 1227)
        if_condition_322600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1227, 12), result_not__322599)
        # Assigning a type to the variable 'if_condition_322600' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 12), 'if_condition_322600', if_condition_322600)
        # SSA begins for if statement (line 1227)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1227)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1229):
        
        # Assigning a Call to a Name:
        
        # Call to split(...): (line 1229)
        # Processing the call arguments (line 1229)
        str_322603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 37), 'str', ':')
        int_322604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 42), 'int')
        # Processing the call keyword arguments (line 1229)
        kwargs_322605 = {}
        # Getting the type of 'line' (line 1229)
        line_322601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 26), 'line', False)
        # Obtaining the member 'split' of a type (line 1229)
        split_322602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 26), line_322601, 'split')
        # Calling split(args, kwargs) (line 1229)
        split_call_result_322606 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 26), split_322602, *[str_322603, int_322604], **kwargs_322605)
        
        # Assigning a type to the variable 'call_assignment_320205' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'call_assignment_320205', split_call_result_322606)
        
        # Assigning a Call to a Name (line 1229):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_322609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 12), 'int')
        # Processing the call keyword arguments
        kwargs_322610 = {}
        # Getting the type of 'call_assignment_320205' (line 1229)
        call_assignment_320205_322607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'call_assignment_320205', False)
        # Obtaining the member '__getitem__' of a type (line 1229)
        getitem___322608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 12), call_assignment_320205_322607, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_322611 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___322608, *[int_322609], **kwargs_322610)
        
        # Assigning a type to the variable 'call_assignment_320206' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'call_assignment_320206', getitem___call_result_322611)
        
        # Assigning a Name to a Name (line 1229):
        # Getting the type of 'call_assignment_320206' (line 1229)
        call_assignment_320206_322612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'call_assignment_320206')
        # Assigning a type to the variable 'name' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'name', call_assignment_320206_322612)
        
        # Assigning a Call to a Name (line 1229):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_322615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 12), 'int')
        # Processing the call keyword arguments
        kwargs_322616 = {}
        # Getting the type of 'call_assignment_320205' (line 1229)
        call_assignment_320205_322613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'call_assignment_320205', False)
        # Obtaining the member '__getitem__' of a type (line 1229)
        getitem___322614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 12), call_assignment_320205_322613, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_322617 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___322614, *[int_322615], **kwargs_322616)
        
        # Assigning a type to the variable 'call_assignment_320207' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'call_assignment_320207', getitem___call_result_322617)
        
        # Assigning a Name to a Name (line 1229):
        # Getting the type of 'call_assignment_320207' (line 1229)
        call_assignment_320207_322618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 12), 'call_assignment_320207')
        # Assigning a type to the variable 'value' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 18), 'value', call_assignment_320207_322618)
        
        # Assigning a Call to a Name (line 1230):
        
        # Assigning a Call to a Name (line 1230):
        
        # Call to split(...): (line 1230)
        # Processing the call arguments (line 1230)
        str_322621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 31), 'str', ';')
        # Processing the call keyword arguments (line 1230)
        kwargs_322622 = {}
        # Getting the type of 'name' (line 1230)
        name_322619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 20), 'name', False)
        # Obtaining the member 'split' of a type (line 1230)
        split_322620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 20), name_322619, 'split')
        # Calling split(args, kwargs) (line 1230)
        split_call_result_322623 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 20), split_322620, *[str_322621], **kwargs_322622)
        
        # Assigning a type to the variable 'parms' (line 1230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 12), 'parms', split_call_result_322623)
        
        
        # Getting the type of 'parms' (line 1231)
        parms_322624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 19), 'parms')
        # Applying the 'not' unary operator (line 1231)
        result_not__322625 = python_operator(stypy.reporting.localization.Localization(__file__, 1231, 15), 'not', parms_322624)
        
        # Testing the type of an if condition (line 1231)
        if_condition_322626 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1231, 12), result_not__322625)
        # Assigning a type to the variable 'if_condition_322626' (line 1231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1231, 12), 'if_condition_322626', if_condition_322626)
        # SSA begins for if statement (line 1231)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1232)
        # Processing the call arguments (line 1232)
        str_322628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 33), 'str', 'empty property name')
        # Processing the call keyword arguments (line 1232)
        kwargs_322629 = {}
        # Getting the type of 'ValueError' (line 1232)
        ValueError_322627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1232)
        ValueError_call_result_322630 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 22), ValueError_322627, *[str_322628], **kwargs_322629)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1232, 16), ValueError_call_result_322630, 'raise parameter', BaseException)
        # SSA join for if statement (line 1231)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1233):
        
        # Assigning a Call to a Name (line 1233):
        
        # Call to upper(...): (line 1233)
        # Processing the call keyword arguments (line 1233)
        kwargs_322636 = {}
        
        # Obtaining the type of the subscript
        int_322631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1233, 25), 'int')
        # Getting the type of 'parms' (line 1233)
        parms_322632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 19), 'parms', False)
        # Obtaining the member '__getitem__' of a type (line 1233)
        getitem___322633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 19), parms_322632, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1233)
        subscript_call_result_322634 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 19), getitem___322633, int_322631)
        
        # Obtaining the member 'upper' of a type (line 1233)
        upper_322635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 19), subscript_call_result_322634, 'upper')
        # Calling upper(args, kwargs) (line 1233)
        upper_call_result_322637 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 19), upper_322635, *[], **kwargs_322636)
        
        # Assigning a type to the variable 'name' (line 1233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 12), 'name', upper_call_result_322637)
        
        # Assigning a Subscript to a Name (line 1234):
        
        # Assigning a Subscript to a Name (line 1234):
        
        # Obtaining the type of the subscript
        int_322638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 26), 'int')
        slice_322639 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1234, 20), int_322638, None, None)
        # Getting the type of 'parms' (line 1234)
        parms_322640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 20), 'parms')
        # Obtaining the member '__getitem__' of a type (line 1234)
        getitem___322641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 20), parms_322640, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1234)
        subscript_call_result_322642 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 20), getitem___322641, slice_322639)
        
        # Assigning a type to the variable 'parms' (line 1234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 12), 'parms', subscript_call_result_322642)
        
        # Getting the type of 'invtz' (line 1235)
        invtz_322643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 15), 'invtz')
        # Testing the type of an if condition (line 1235)
        if_condition_322644 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1235, 12), invtz_322643)
        # Assigning a type to the variable 'if_condition_322644' (line 1235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 12), 'if_condition_322644', if_condition_322644)
        # SSA begins for if statement (line 1235)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'name' (line 1236)
        name_322645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 19), 'name')
        str_322646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 27), 'str', 'BEGIN')
        # Applying the binary operator '==' (line 1236)
        result_eq_322647 = python_operator(stypy.reporting.localization.Localization(__file__, 1236, 19), '==', name_322645, str_322646)
        
        # Testing the type of an if condition (line 1236)
        if_condition_322648 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1236, 16), result_eq_322647)
        # Assigning a type to the variable 'if_condition_322648' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 16), 'if_condition_322648', if_condition_322648)
        # SSA begins for if statement (line 1236)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'value' (line 1237)
        value_322649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 23), 'value')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1237)
        tuple_322650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1237)
        # Adding element type (line 1237)
        str_322651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 33), 'str', 'STANDARD')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1237, 33), tuple_322650, str_322651)
        # Adding element type (line 1237)
        str_322652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 45), 'str', 'DAYLIGHT')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1237, 33), tuple_322650, str_322652)
        
        # Applying the binary operator 'in' (line 1237)
        result_contains_322653 = python_operator(stypy.reporting.localization.Localization(__file__, 1237, 23), 'in', value_322649, tuple_322650)
        
        # Testing the type of an if condition (line 1237)
        if_condition_322654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1237, 20), result_contains_322653)
        # Assigning a type to the variable 'if_condition_322654' (line 1237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 20), 'if_condition_322654', if_condition_322654)
        # SSA begins for if statement (line 1237)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 1237)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1241)
        # Processing the call arguments (line 1241)
        str_322656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 41), 'str', 'unknown component: ')
        # Getting the type of 'value' (line 1241)
        value_322657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 63), 'value', False)
        # Applying the binary operator '+' (line 1241)
        result_add_322658 = python_operator(stypy.reporting.localization.Localization(__file__, 1241, 41), '+', str_322656, value_322657)
        
        # Processing the call keyword arguments (line 1241)
        kwargs_322659 = {}
        # Getting the type of 'ValueError' (line 1241)
        ValueError_322655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1241)
        ValueError_call_result_322660 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 30), ValueError_322655, *[result_add_322658], **kwargs_322659)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1241, 24), ValueError_call_result_322660, 'raise parameter', BaseException)
        # SSA join for if statement (line 1237)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1242):
        
        # Assigning a Name to a Name (line 1242):
        # Getting the type of 'value' (line 1242)
        value_322661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 31), 'value')
        # Assigning a type to the variable 'comptype' (line 1242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 20), 'comptype', value_322661)
        
        # Assigning a Name to a Name (line 1243):
        
        # Assigning a Name to a Name (line 1243):
        # Getting the type of 'False' (line 1243)
        False_322662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 35), 'False')
        # Assigning a type to the variable 'founddtstart' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 20), 'founddtstart', False_322662)
        
        # Assigning a Name to a Name (line 1244):
        
        # Assigning a Name to a Name (line 1244):
        # Getting the type of 'None' (line 1244)
        None_322663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 35), 'None')
        # Assigning a type to the variable 'tzoffsetfrom' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 20), 'tzoffsetfrom', None_322663)
        
        # Assigning a Name to a Name (line 1245):
        
        # Assigning a Name to a Name (line 1245):
        # Getting the type of 'None' (line 1245)
        None_322664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 33), 'None')
        # Assigning a type to the variable 'tzoffsetto' (line 1245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 20), 'tzoffsetto', None_322664)
        
        # Assigning a List to a Name (line 1246):
        
        # Assigning a List to a Name (line 1246):
        
        # Obtaining an instance of the builtin type 'list' (line 1246)
        list_322665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1246)
        
        # Assigning a type to the variable 'rrulelines' (line 1246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 20), 'rrulelines', list_322665)
        
        # Assigning a Name to a Name (line 1247):
        
        # Assigning a Name to a Name (line 1247):
        # Getting the type of 'None' (line 1247)
        None_322666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 29), 'None')
        # Assigning a type to the variable 'tzname' (line 1247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 20), 'tzname', None_322666)
        # SSA branch for the else part of an if statement (line 1236)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1248)
        name_322667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 21), 'name')
        str_322668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1248, 29), 'str', 'END')
        # Applying the binary operator '==' (line 1248)
        result_eq_322669 = python_operator(stypy.reporting.localization.Localization(__file__, 1248, 21), '==', name_322667, str_322668)
        
        # Testing the type of an if condition (line 1248)
        if_condition_322670 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1248, 21), result_eq_322669)
        # Assigning a type to the variable 'if_condition_322670' (line 1248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 21), 'if_condition_322670', if_condition_322670)
        # SSA begins for if statement (line 1248)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'value' (line 1249)
        value_322671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 23), 'value')
        str_322672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 32), 'str', 'VTIMEZONE')
        # Applying the binary operator '==' (line 1249)
        result_eq_322673 = python_operator(stypy.reporting.localization.Localization(__file__, 1249, 23), '==', value_322671, str_322672)
        
        # Testing the type of an if condition (line 1249)
        if_condition_322674 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1249, 20), result_eq_322673)
        # Assigning a type to the variable 'if_condition_322674' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 20), 'if_condition_322674', if_condition_322674)
        # SSA begins for if statement (line 1249)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'comptype' (line 1250)
        comptype_322675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 27), 'comptype')
        # Testing the type of an if condition (line 1250)
        if_condition_322676 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1250, 24), comptype_322675)
        # Assigning a type to the variable 'if_condition_322676' (line 1250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 24), 'if_condition_322676', if_condition_322676)
        # SSA begins for if statement (line 1250)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1251)
        # Processing the call arguments (line 1251)
        str_322678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, 45), 'str', 'component not closed: ')
        # Getting the type of 'comptype' (line 1251)
        comptype_322679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 70), 'comptype', False)
        # Applying the binary operator '+' (line 1251)
        result_add_322680 = python_operator(stypy.reporting.localization.Localization(__file__, 1251, 45), '+', str_322678, comptype_322679)
        
        # Processing the call keyword arguments (line 1251)
        kwargs_322681 = {}
        # Getting the type of 'ValueError' (line 1251)
        ValueError_322677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1251)
        ValueError_call_result_322682 = invoke(stypy.reporting.localization.Localization(__file__, 1251, 34), ValueError_322677, *[result_add_322680], **kwargs_322681)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1251, 28), ValueError_call_result_322682, 'raise parameter', BaseException)
        # SSA join for if statement (line 1250)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'tzid' (line 1252)
        tzid_322683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 31), 'tzid')
        # Applying the 'not' unary operator (line 1252)
        result_not__322684 = python_operator(stypy.reporting.localization.Localization(__file__, 1252, 27), 'not', tzid_322683)
        
        # Testing the type of an if condition (line 1252)
        if_condition_322685 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1252, 24), result_not__322684)
        # Assigning a type to the variable 'if_condition_322685' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 24), 'if_condition_322685', if_condition_322685)
        # SSA begins for if statement (line 1252)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1253)
        # Processing the call arguments (line 1253)
        str_322687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 45), 'str', 'mandatory TZID not found')
        # Processing the call keyword arguments (line 1253)
        kwargs_322688 = {}
        # Getting the type of 'ValueError' (line 1253)
        ValueError_322686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1253)
        ValueError_call_result_322689 = invoke(stypy.reporting.localization.Localization(__file__, 1253, 34), ValueError_322686, *[str_322687], **kwargs_322688)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1253, 28), ValueError_call_result_322689, 'raise parameter', BaseException)
        # SSA join for if statement (line 1252)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'comps' (line 1254)
        comps_322690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 31), 'comps')
        # Applying the 'not' unary operator (line 1254)
        result_not__322691 = python_operator(stypy.reporting.localization.Localization(__file__, 1254, 27), 'not', comps_322690)
        
        # Testing the type of an if condition (line 1254)
        if_condition_322692 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1254, 24), result_not__322691)
        # Assigning a type to the variable 'if_condition_322692' (line 1254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 24), 'if_condition_322692', if_condition_322692)
        # SSA begins for if statement (line 1254)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1255)
        # Processing the call arguments (line 1255)
        str_322694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 32), 'str', 'at least one component is needed')
        # Processing the call keyword arguments (line 1255)
        kwargs_322695 = {}
        # Getting the type of 'ValueError' (line 1255)
        ValueError_322693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1255)
        ValueError_call_result_322696 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 34), ValueError_322693, *[str_322694], **kwargs_322695)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1255, 28), ValueError_call_result_322696, 'raise parameter', BaseException)
        # SSA join for if statement (line 1254)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Subscript (line 1258):
        
        # Assigning a Call to a Subscript (line 1258):
        
        # Call to _tzicalvtz(...): (line 1258)
        # Processing the call arguments (line 1258)
        # Getting the type of 'tzid' (line 1258)
        tzid_322698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 53), 'tzid', False)
        # Getting the type of 'comps' (line 1258)
        comps_322699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 59), 'comps', False)
        # Processing the call keyword arguments (line 1258)
        kwargs_322700 = {}
        # Getting the type of '_tzicalvtz' (line 1258)
        _tzicalvtz_322697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 42), '_tzicalvtz', False)
        # Calling _tzicalvtz(args, kwargs) (line 1258)
        _tzicalvtz_call_result_322701 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 42), _tzicalvtz_322697, *[tzid_322698, comps_322699], **kwargs_322700)
        
        # Getting the type of 'self' (line 1258)
        self_322702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 24), 'self')
        # Obtaining the member '_vtz' of a type (line 1258)
        _vtz_322703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 24), self_322702, '_vtz')
        # Getting the type of 'tzid' (line 1258)
        tzid_322704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 34), 'tzid')
        # Storing an element on a container (line 1258)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1258, 24), _vtz_322703, (tzid_322704, _tzicalvtz_call_result_322701))
        
        # Assigning a Name to a Name (line 1259):
        
        # Assigning a Name to a Name (line 1259):
        # Getting the type of 'False' (line 1259)
        False_322705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 32), 'False')
        # Assigning a type to the variable 'invtz' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 24), 'invtz', False_322705)
        # SSA branch for the else part of an if statement (line 1249)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'value' (line 1260)
        value_322706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 25), 'value')
        # Getting the type of 'comptype' (line 1260)
        comptype_322707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 34), 'comptype')
        # Applying the binary operator '==' (line 1260)
        result_eq_322708 = python_operator(stypy.reporting.localization.Localization(__file__, 1260, 25), '==', value_322706, comptype_322707)
        
        # Testing the type of an if condition (line 1260)
        if_condition_322709 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1260, 25), result_eq_322708)
        # Assigning a type to the variable 'if_condition_322709' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 25), 'if_condition_322709', if_condition_322709)
        # SSA begins for if statement (line 1260)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'founddtstart' (line 1261)
        founddtstart_322710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 31), 'founddtstart')
        # Applying the 'not' unary operator (line 1261)
        result_not__322711 = python_operator(stypy.reporting.localization.Localization(__file__, 1261, 27), 'not', founddtstart_322710)
        
        # Testing the type of an if condition (line 1261)
        if_condition_322712 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1261, 24), result_not__322711)
        # Assigning a type to the variable 'if_condition_322712' (line 1261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 24), 'if_condition_322712', if_condition_322712)
        # SSA begins for if statement (line 1261)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1262)
        # Processing the call arguments (line 1262)
        str_322714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 45), 'str', 'mandatory DTSTART not found')
        # Processing the call keyword arguments (line 1262)
        kwargs_322715 = {}
        # Getting the type of 'ValueError' (line 1262)
        ValueError_322713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1262)
        ValueError_call_result_322716 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 34), ValueError_322713, *[str_322714], **kwargs_322715)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1262, 28), ValueError_call_result_322716, 'raise parameter', BaseException)
        # SSA join for if statement (line 1261)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1263)
        # Getting the type of 'tzoffsetfrom' (line 1263)
        tzoffsetfrom_322717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 27), 'tzoffsetfrom')
        # Getting the type of 'None' (line 1263)
        None_322718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 43), 'None')
        
        (may_be_322719, more_types_in_union_322720) = may_be_none(tzoffsetfrom_322717, None_322718)

        if may_be_322719:

            if more_types_in_union_322720:
                # Runtime conditional SSA (line 1263)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to ValueError(...): (line 1264)
            # Processing the call arguments (line 1264)
            str_322722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 32), 'str', 'mandatory TZOFFSETFROM not found')
            # Processing the call keyword arguments (line 1264)
            kwargs_322723 = {}
            # Getting the type of 'ValueError' (line 1264)
            ValueError_322721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 34), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1264)
            ValueError_call_result_322724 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 34), ValueError_322721, *[str_322722], **kwargs_322723)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1264, 28), ValueError_call_result_322724, 'raise parameter', BaseException)

            if more_types_in_union_322720:
                # SSA join for if statement (line 1263)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1266)
        # Getting the type of 'tzoffsetto' (line 1266)
        tzoffsetto_322725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 27), 'tzoffsetto')
        # Getting the type of 'None' (line 1266)
        None_322726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 41), 'None')
        
        (may_be_322727, more_types_in_union_322728) = may_be_none(tzoffsetto_322725, None_322726)

        if may_be_322727:

            if more_types_in_union_322728:
                # Runtime conditional SSA (line 1266)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to ValueError(...): (line 1267)
            # Processing the call arguments (line 1267)
            str_322730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, 32), 'str', 'mandatory TZOFFSETFROM not found')
            # Processing the call keyword arguments (line 1267)
            kwargs_322731 = {}
            # Getting the type of 'ValueError' (line 1267)
            ValueError_322729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 34), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1267)
            ValueError_call_result_322732 = invoke(stypy.reporting.localization.Localization(__file__, 1267, 34), ValueError_322729, *[str_322730], **kwargs_322731)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1267, 28), ValueError_call_result_322732, 'raise parameter', BaseException)

            if more_types_in_union_322728:
                # SSA join for if statement (line 1266)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Name (line 1270):
        
        # Assigning a Name to a Name (line 1270):
        # Getting the type of 'None' (line 1270)
        None_322733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 29), 'None')
        # Assigning a type to the variable 'rr' (line 1270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 24), 'rr', None_322733)
        
        # Getting the type of 'rrulelines' (line 1271)
        rrulelines_322734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 27), 'rrulelines')
        # Testing the type of an if condition (line 1271)
        if_condition_322735 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1271, 24), rrulelines_322734)
        # Assigning a type to the variable 'if_condition_322735' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 24), 'if_condition_322735', if_condition_322735)
        # SSA begins for if statement (line 1271)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1272):
        
        # Assigning a Call to a Name (line 1272):
        
        # Call to rrulestr(...): (line 1272)
        # Processing the call arguments (line 1272)
        
        # Call to join(...): (line 1272)
        # Processing the call arguments (line 1272)
        # Getting the type of 'rrulelines' (line 1272)
        rrulelines_322740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 58), 'rrulelines', False)
        # Processing the call keyword arguments (line 1272)
        kwargs_322741 = {}
        str_322738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1272, 48), 'str', '\n')
        # Obtaining the member 'join' of a type (line 1272)
        join_322739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 48), str_322738, 'join')
        # Calling join(args, kwargs) (line 1272)
        join_call_result_322742 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 48), join_322739, *[rrulelines_322740], **kwargs_322741)
        
        # Processing the call keyword arguments (line 1272)
        # Getting the type of 'True' (line 1273)
        True_322743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 59), 'True', False)
        keyword_322744 = True_322743
        # Getting the type of 'True' (line 1274)
        True_322745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 57), 'True', False)
        keyword_322746 = True_322745
        # Getting the type of 'True' (line 1275)
        True_322747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 54), 'True', False)
        keyword_322748 = True_322747
        kwargs_322749 = {'compatible': keyword_322744, 'ignoretz': keyword_322746, 'cache': keyword_322748}
        # Getting the type of 'rrule' (line 1272)
        rrule_322736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 33), 'rrule', False)
        # Obtaining the member 'rrulestr' of a type (line 1272)
        rrulestr_322737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 33), rrule_322736, 'rrulestr')
        # Calling rrulestr(args, kwargs) (line 1272)
        rrulestr_call_result_322750 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 33), rrulestr_322737, *[join_call_result_322742], **kwargs_322749)
        
        # Assigning a type to the variable 'rr' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 28), 'rr', rrulestr_call_result_322750)
        # SSA join for if statement (line 1271)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1276):
        
        # Assigning a Call to a Name (line 1276):
        
        # Call to _tzicalvtzcomp(...): (line 1276)
        # Processing the call arguments (line 1276)
        # Getting the type of 'tzoffsetfrom' (line 1276)
        tzoffsetfrom_322752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 46), 'tzoffsetfrom', False)
        # Getting the type of 'tzoffsetto' (line 1276)
        tzoffsetto_322753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 60), 'tzoffsetto', False)
        
        # Getting the type of 'comptype' (line 1277)
        comptype_322754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 47), 'comptype', False)
        str_322755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 59), 'str', 'DAYLIGHT')
        # Applying the binary operator '==' (line 1277)
        result_eq_322756 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 47), '==', comptype_322754, str_322755)
        
        # Getting the type of 'tzname' (line 1278)
        tzname_322757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 46), 'tzname', False)
        # Getting the type of 'rr' (line 1278)
        rr_322758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 54), 'rr', False)
        # Processing the call keyword arguments (line 1276)
        kwargs_322759 = {}
        # Getting the type of '_tzicalvtzcomp' (line 1276)
        _tzicalvtzcomp_322751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 31), '_tzicalvtzcomp', False)
        # Calling _tzicalvtzcomp(args, kwargs) (line 1276)
        _tzicalvtzcomp_call_result_322760 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 31), _tzicalvtzcomp_322751, *[tzoffsetfrom_322752, tzoffsetto_322753, result_eq_322756, tzname_322757, rr_322758], **kwargs_322759)
        
        # Assigning a type to the variable 'comp' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 24), 'comp', _tzicalvtzcomp_call_result_322760)
        
        # Call to append(...): (line 1279)
        # Processing the call arguments (line 1279)
        # Getting the type of 'comp' (line 1279)
        comp_322763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 37), 'comp', False)
        # Processing the call keyword arguments (line 1279)
        kwargs_322764 = {}
        # Getting the type of 'comps' (line 1279)
        comps_322761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 24), 'comps', False)
        # Obtaining the member 'append' of a type (line 1279)
        append_322762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1279, 24), comps_322761, 'append')
        # Calling append(args, kwargs) (line 1279)
        append_call_result_322765 = invoke(stypy.reporting.localization.Localization(__file__, 1279, 24), append_322762, *[comp_322763], **kwargs_322764)
        
        
        # Assigning a Name to a Name (line 1280):
        
        # Assigning a Name to a Name (line 1280):
        # Getting the type of 'None' (line 1280)
        None_322766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 35), 'None')
        # Assigning a type to the variable 'comptype' (line 1280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 24), 'comptype', None_322766)
        # SSA branch for the else part of an if statement (line 1260)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1282)
        # Processing the call arguments (line 1282)
        str_322768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, 41), 'str', 'invalid component end: ')
        # Getting the type of 'value' (line 1282)
        value_322769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 67), 'value', False)
        # Applying the binary operator '+' (line 1282)
        result_add_322770 = python_operator(stypy.reporting.localization.Localization(__file__, 1282, 41), '+', str_322768, value_322769)
        
        # Processing the call keyword arguments (line 1282)
        kwargs_322771 = {}
        # Getting the type of 'ValueError' (line 1282)
        ValueError_322767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1282)
        ValueError_call_result_322772 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 30), ValueError_322767, *[result_add_322770], **kwargs_322771)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1282, 24), ValueError_call_result_322772, 'raise parameter', BaseException)
        # SSA join for if statement (line 1260)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1249)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1248)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'comptype' (line 1283)
        comptype_322773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 21), 'comptype')
        # Testing the type of an if condition (line 1283)
        if_condition_322774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1283, 21), comptype_322773)
        # Assigning a type to the variable 'if_condition_322774' (line 1283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 21), 'if_condition_322774', if_condition_322774)
        # SSA begins for if statement (line 1283)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'name' (line 1284)
        name_322775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 23), 'name')
        str_322776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 31), 'str', 'DTSTART')
        # Applying the binary operator '==' (line 1284)
        result_eq_322777 = python_operator(stypy.reporting.localization.Localization(__file__, 1284, 23), '==', name_322775, str_322776)
        
        # Testing the type of an if condition (line 1284)
        if_condition_322778 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1284, 20), result_eq_322777)
        # Assigning a type to the variable 'if_condition_322778' (line 1284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1284, 20), 'if_condition_322778', if_condition_322778)
        # SSA begins for if statement (line 1284)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1285)
        # Processing the call arguments (line 1285)
        # Getting the type of 'line' (line 1285)
        line_322781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 42), 'line', False)
        # Processing the call keyword arguments (line 1285)
        kwargs_322782 = {}
        # Getting the type of 'rrulelines' (line 1285)
        rrulelines_322779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 24), 'rrulelines', False)
        # Obtaining the member 'append' of a type (line 1285)
        append_322780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 24), rrulelines_322779, 'append')
        # Calling append(args, kwargs) (line 1285)
        append_call_result_322783 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 24), append_322780, *[line_322781], **kwargs_322782)
        
        
        # Assigning a Name to a Name (line 1286):
        
        # Assigning a Name to a Name (line 1286):
        # Getting the type of 'True' (line 1286)
        True_322784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 39), 'True')
        # Assigning a type to the variable 'founddtstart' (line 1286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 24), 'founddtstart', True_322784)
        # SSA branch for the else part of an if statement (line 1284)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1287)
        name_322785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 25), 'name')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1287)
        tuple_322786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1287)
        # Adding element type (line 1287)
        str_322787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 34), 'str', 'RRULE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 34), tuple_322786, str_322787)
        # Adding element type (line 1287)
        str_322788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 43), 'str', 'RDATE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 34), tuple_322786, str_322788)
        # Adding element type (line 1287)
        str_322789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 52), 'str', 'EXRULE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 34), tuple_322786, str_322789)
        # Adding element type (line 1287)
        str_322790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 62), 'str', 'EXDATE')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 34), tuple_322786, str_322790)
        
        # Applying the binary operator 'in' (line 1287)
        result_contains_322791 = python_operator(stypy.reporting.localization.Localization(__file__, 1287, 25), 'in', name_322785, tuple_322786)
        
        # Testing the type of an if condition (line 1287)
        if_condition_322792 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1287, 25), result_contains_322791)
        # Assigning a type to the variable 'if_condition_322792' (line 1287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 25), 'if_condition_322792', if_condition_322792)
        # SSA begins for if statement (line 1287)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1288)
        # Processing the call arguments (line 1288)
        # Getting the type of 'line' (line 1288)
        line_322795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 42), 'line', False)
        # Processing the call keyword arguments (line 1288)
        kwargs_322796 = {}
        # Getting the type of 'rrulelines' (line 1288)
        rrulelines_322793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 24), 'rrulelines', False)
        # Obtaining the member 'append' of a type (line 1288)
        append_322794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 24), rrulelines_322793, 'append')
        # Calling append(args, kwargs) (line 1288)
        append_call_result_322797 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 24), append_322794, *[line_322795], **kwargs_322796)
        
        # SSA branch for the else part of an if statement (line 1287)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1289)
        name_322798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 25), 'name')
        str_322799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1289, 33), 'str', 'TZOFFSETFROM')
        # Applying the binary operator '==' (line 1289)
        result_eq_322800 = python_operator(stypy.reporting.localization.Localization(__file__, 1289, 25), '==', name_322798, str_322799)
        
        # Testing the type of an if condition (line 1289)
        if_condition_322801 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1289, 25), result_eq_322800)
        # Assigning a type to the variable 'if_condition_322801' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 25), 'if_condition_322801', if_condition_322801)
        # SSA begins for if statement (line 1289)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1290)
        parms_322802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 27), 'parms')
        # Testing the type of an if condition (line 1290)
        if_condition_322803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1290, 24), parms_322802)
        # Assigning a type to the variable 'if_condition_322803' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 24), 'if_condition_322803', if_condition_322803)
        # SSA begins for if statement (line 1290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1291)
        # Processing the call arguments (line 1291)
        str_322805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 32), 'str', 'unsupported %s parm: %s ')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1292)
        tuple_322806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 62), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1292)
        # Adding element type (line 1292)
        # Getting the type of 'name' (line 1292)
        name_322807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 62), 'name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1292, 62), tuple_322806, name_322807)
        # Adding element type (line 1292)
        
        # Obtaining the type of the subscript
        int_322808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 74), 'int')
        # Getting the type of 'parms' (line 1292)
        parms_322809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 68), 'parms', False)
        # Obtaining the member '__getitem__' of a type (line 1292)
        getitem___322810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 68), parms_322809, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1292)
        subscript_call_result_322811 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 68), getitem___322810, int_322808)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1292, 62), tuple_322806, subscript_call_result_322811)
        
        # Applying the binary operator '%' (line 1292)
        result_mod_322812 = python_operator(stypy.reporting.localization.Localization(__file__, 1292, 32), '%', str_322805, tuple_322806)
        
        # Processing the call keyword arguments (line 1291)
        kwargs_322813 = {}
        # Getting the type of 'ValueError' (line 1291)
        ValueError_322804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1291)
        ValueError_call_result_322814 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 34), ValueError_322804, *[result_mod_322812], **kwargs_322813)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1291, 28), ValueError_call_result_322814, 'raise parameter', BaseException)
        # SSA join for if statement (line 1290)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1293):
        
        # Assigning a Call to a Name (line 1293):
        
        # Call to _parse_offset(...): (line 1293)
        # Processing the call arguments (line 1293)
        # Getting the type of 'value' (line 1293)
        value_322817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 58), 'value', False)
        # Processing the call keyword arguments (line 1293)
        kwargs_322818 = {}
        # Getting the type of 'self' (line 1293)
        self_322815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 39), 'self', False)
        # Obtaining the member '_parse_offset' of a type (line 1293)
        _parse_offset_322816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 39), self_322815, '_parse_offset')
        # Calling _parse_offset(args, kwargs) (line 1293)
        _parse_offset_call_result_322819 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 39), _parse_offset_322816, *[value_322817], **kwargs_322818)
        
        # Assigning a type to the variable 'tzoffsetfrom' (line 1293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 24), 'tzoffsetfrom', _parse_offset_call_result_322819)
        # SSA branch for the else part of an if statement (line 1289)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1294)
        name_322820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 25), 'name')
        str_322821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 33), 'str', 'TZOFFSETTO')
        # Applying the binary operator '==' (line 1294)
        result_eq_322822 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 25), '==', name_322820, str_322821)
        
        # Testing the type of an if condition (line 1294)
        if_condition_322823 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1294, 25), result_eq_322822)
        # Assigning a type to the variable 'if_condition_322823' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 25), 'if_condition_322823', if_condition_322823)
        # SSA begins for if statement (line 1294)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1295)
        parms_322824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 27), 'parms')
        # Testing the type of an if condition (line 1295)
        if_condition_322825 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1295, 24), parms_322824)
        # Assigning a type to the variable 'if_condition_322825' (line 1295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 24), 'if_condition_322825', if_condition_322825)
        # SSA begins for if statement (line 1295)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1296)
        # Processing the call arguments (line 1296)
        str_322827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 32), 'str', 'unsupported TZOFFSETTO parm: ')
        
        # Obtaining the type of the subscript
        int_322828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 70), 'int')
        # Getting the type of 'parms' (line 1297)
        parms_322829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 64), 'parms', False)
        # Obtaining the member '__getitem__' of a type (line 1297)
        getitem___322830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 64), parms_322829, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1297)
        subscript_call_result_322831 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 64), getitem___322830, int_322828)
        
        # Applying the binary operator '+' (line 1297)
        result_add_322832 = python_operator(stypy.reporting.localization.Localization(__file__, 1297, 32), '+', str_322827, subscript_call_result_322831)
        
        # Processing the call keyword arguments (line 1296)
        kwargs_322833 = {}
        # Getting the type of 'ValueError' (line 1296)
        ValueError_322826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1296)
        ValueError_call_result_322834 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 34), ValueError_322826, *[result_add_322832], **kwargs_322833)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1296, 28), ValueError_call_result_322834, 'raise parameter', BaseException)
        # SSA join for if statement (line 1295)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1298):
        
        # Assigning a Call to a Name (line 1298):
        
        # Call to _parse_offset(...): (line 1298)
        # Processing the call arguments (line 1298)
        # Getting the type of 'value' (line 1298)
        value_322837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 56), 'value', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_322838 = {}
        # Getting the type of 'self' (line 1298)
        self_322835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 37), 'self', False)
        # Obtaining the member '_parse_offset' of a type (line 1298)
        _parse_offset_322836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 37), self_322835, '_parse_offset')
        # Calling _parse_offset(args, kwargs) (line 1298)
        _parse_offset_call_result_322839 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 37), _parse_offset_322836, *[value_322837], **kwargs_322838)
        
        # Assigning a type to the variable 'tzoffsetto' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 24), 'tzoffsetto', _parse_offset_call_result_322839)
        # SSA branch for the else part of an if statement (line 1294)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1299)
        name_322840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 25), 'name')
        str_322841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 33), 'str', 'TZNAME')
        # Applying the binary operator '==' (line 1299)
        result_eq_322842 = python_operator(stypy.reporting.localization.Localization(__file__, 1299, 25), '==', name_322840, str_322841)
        
        # Testing the type of an if condition (line 1299)
        if_condition_322843 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1299, 25), result_eq_322842)
        # Assigning a type to the variable 'if_condition_322843' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 25), 'if_condition_322843', if_condition_322843)
        # SSA begins for if statement (line 1299)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1300)
        parms_322844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 27), 'parms')
        # Testing the type of an if condition (line 1300)
        if_condition_322845 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1300, 24), parms_322844)
        # Assigning a type to the variable 'if_condition_322845' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 24), 'if_condition_322845', if_condition_322845)
        # SSA begins for if statement (line 1300)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1301)
        # Processing the call arguments (line 1301)
        str_322847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 32), 'str', 'unsupported TZNAME parm: ')
        
        # Obtaining the type of the subscript
        int_322848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 66), 'int')
        # Getting the type of 'parms' (line 1302)
        parms_322849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 60), 'parms', False)
        # Obtaining the member '__getitem__' of a type (line 1302)
        getitem___322850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 60), parms_322849, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1302)
        subscript_call_result_322851 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 60), getitem___322850, int_322848)
        
        # Applying the binary operator '+' (line 1302)
        result_add_322852 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 32), '+', str_322847, subscript_call_result_322851)
        
        # Processing the call keyword arguments (line 1301)
        kwargs_322853 = {}
        # Getting the type of 'ValueError' (line 1301)
        ValueError_322846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1301)
        ValueError_call_result_322854 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 34), ValueError_322846, *[result_add_322852], **kwargs_322853)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1301, 28), ValueError_call_result_322854, 'raise parameter', BaseException)
        # SSA join for if statement (line 1300)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1303):
        
        # Assigning a Name to a Name (line 1303):
        # Getting the type of 'value' (line 1303)
        value_322855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 33), 'value')
        # Assigning a type to the variable 'tzname' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 24), 'tzname', value_322855)
        # SSA branch for the else part of an if statement (line 1299)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1304)
        name_322856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 25), 'name')
        str_322857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1304, 33), 'str', 'COMMENT')
        # Applying the binary operator '==' (line 1304)
        result_eq_322858 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 25), '==', name_322856, str_322857)
        
        # Testing the type of an if condition (line 1304)
        if_condition_322859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1304, 25), result_eq_322858)
        # Assigning a type to the variable 'if_condition_322859' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 25), 'if_condition_322859', if_condition_322859)
        # SSA begins for if statement (line 1304)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 1304)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1307)
        # Processing the call arguments (line 1307)
        str_322861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1307, 41), 'str', 'unsupported property: ')
        # Getting the type of 'name' (line 1307)
        name_322862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 66), 'name', False)
        # Applying the binary operator '+' (line 1307)
        result_add_322863 = python_operator(stypy.reporting.localization.Localization(__file__, 1307, 41), '+', str_322861, name_322862)
        
        # Processing the call keyword arguments (line 1307)
        kwargs_322864 = {}
        # Getting the type of 'ValueError' (line 1307)
        ValueError_322860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1307)
        ValueError_call_result_322865 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 30), ValueError_322860, *[result_add_322863], **kwargs_322864)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1307, 24), ValueError_call_result_322865, 'raise parameter', BaseException)
        # SSA join for if statement (line 1304)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1299)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1294)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1289)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1287)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1284)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1283)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1309)
        name_322866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 23), 'name')
        str_322867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1309, 31), 'str', 'TZID')
        # Applying the binary operator '==' (line 1309)
        result_eq_322868 = python_operator(stypy.reporting.localization.Localization(__file__, 1309, 23), '==', name_322866, str_322867)
        
        # Testing the type of an if condition (line 1309)
        if_condition_322869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1309, 20), result_eq_322868)
        # Assigning a type to the variable 'if_condition_322869' (line 1309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1309, 20), 'if_condition_322869', if_condition_322869)
        # SSA begins for if statement (line 1309)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'parms' (line 1310)
        parms_322870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 27), 'parms')
        # Testing the type of an if condition (line 1310)
        if_condition_322871 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1310, 24), parms_322870)
        # Assigning a type to the variable 'if_condition_322871' (line 1310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1310, 24), 'if_condition_322871', if_condition_322871)
        # SSA begins for if statement (line 1310)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1311)
        # Processing the call arguments (line 1311)
        str_322873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 32), 'str', 'unsupported TZID parm: ')
        
        # Obtaining the type of the subscript
        int_322874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 64), 'int')
        # Getting the type of 'parms' (line 1312)
        parms_322875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 58), 'parms', False)
        # Obtaining the member '__getitem__' of a type (line 1312)
        getitem___322876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 58), parms_322875, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1312)
        subscript_call_result_322877 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 58), getitem___322876, int_322874)
        
        # Applying the binary operator '+' (line 1312)
        result_add_322878 = python_operator(stypy.reporting.localization.Localization(__file__, 1312, 32), '+', str_322873, subscript_call_result_322877)
        
        # Processing the call keyword arguments (line 1311)
        kwargs_322879 = {}
        # Getting the type of 'ValueError' (line 1311)
        ValueError_322872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 34), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1311)
        ValueError_call_result_322880 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 34), ValueError_322872, *[result_add_322878], **kwargs_322879)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1311, 28), ValueError_call_result_322880, 'raise parameter', BaseException)
        # SSA join for if statement (line 1310)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1313):
        
        # Assigning a Name to a Name (line 1313):
        # Getting the type of 'value' (line 1313)
        value_322881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 31), 'value')
        # Assigning a type to the variable 'tzid' (line 1313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 24), 'tzid', value_322881)
        # SSA branch for the else part of an if statement (line 1309)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'name' (line 1314)
        name_322882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 25), 'name')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1314)
        tuple_322883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1314)
        # Adding element type (line 1314)
        str_322884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 34), 'str', 'TZURL')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 34), tuple_322883, str_322884)
        # Adding element type (line 1314)
        str_322885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 43), 'str', 'LAST-MODIFIED')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 34), tuple_322883, str_322885)
        # Adding element type (line 1314)
        str_322886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 60), 'str', 'COMMENT')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 34), tuple_322883, str_322886)
        
        # Applying the binary operator 'in' (line 1314)
        result_contains_322887 = python_operator(stypy.reporting.localization.Localization(__file__, 1314, 25), 'in', name_322882, tuple_322883)
        
        # Testing the type of an if condition (line 1314)
        if_condition_322888 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1314, 25), result_contains_322887)
        # Assigning a type to the variable 'if_condition_322888' (line 1314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 25), 'if_condition_322888', if_condition_322888)
        # SSA begins for if statement (line 1314)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 1314)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1317)
        # Processing the call arguments (line 1317)
        str_322890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 41), 'str', 'unsupported property: ')
        # Getting the type of 'name' (line 1317)
        name_322891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 66), 'name', False)
        # Applying the binary operator '+' (line 1317)
        result_add_322892 = python_operator(stypy.reporting.localization.Localization(__file__, 1317, 41), '+', str_322890, name_322891)
        
        # Processing the call keyword arguments (line 1317)
        kwargs_322893 = {}
        # Getting the type of 'ValueError' (line 1317)
        ValueError_322889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1317)
        ValueError_call_result_322894 = invoke(stypy.reporting.localization.Localization(__file__, 1317, 30), ValueError_322889, *[result_add_322892], **kwargs_322893)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1317, 24), ValueError_call_result_322894, 'raise parameter', BaseException)
        # SSA join for if statement (line 1314)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1309)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1283)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1248)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1236)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1235)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'name' (line 1318)
        name_322895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 17), 'name')
        str_322896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 25), 'str', 'BEGIN')
        # Applying the binary operator '==' (line 1318)
        result_eq_322897 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 17), '==', name_322895, str_322896)
        
        
        # Getting the type of 'value' (line 1318)
        value_322898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 37), 'value')
        str_322899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1318, 46), 'str', 'VTIMEZONE')
        # Applying the binary operator '==' (line 1318)
        result_eq_322900 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 37), '==', value_322898, str_322899)
        
        # Applying the binary operator 'and' (line 1318)
        result_and_keyword_322901 = python_operator(stypy.reporting.localization.Localization(__file__, 1318, 17), 'and', result_eq_322897, result_eq_322900)
        
        # Testing the type of an if condition (line 1318)
        if_condition_322902 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1318, 17), result_and_keyword_322901)
        # Assigning a type to the variable 'if_condition_322902' (line 1318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 17), 'if_condition_322902', if_condition_322902)
        # SSA begins for if statement (line 1318)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1319):
        
        # Assigning a Name to a Name (line 1319):
        # Getting the type of 'None' (line 1319)
        None_322903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 23), 'None')
        # Assigning a type to the variable 'tzid' (line 1319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 16), 'tzid', None_322903)
        
        # Assigning a List to a Name (line 1320):
        
        # Assigning a List to a Name (line 1320):
        
        # Obtaining an instance of the builtin type 'list' (line 1320)
        list_322904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1320)
        
        # Assigning a type to the variable 'comps' (line 1320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 16), 'comps', list_322904)
        
        # Assigning a Name to a Name (line 1321):
        
        # Assigning a Name to a Name (line 1321):
        # Getting the type of 'True' (line 1321)
        True_322905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 24), 'True')
        # Assigning a type to the variable 'invtz' (line 1321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 16), 'invtz', True_322905)
        # SSA join for if statement (line 1318)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1235)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_parse_rfc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_parse_rfc' in the type store
        # Getting the type of 'stypy_return_type' (line 1205)
        stypy_return_type_322906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322906)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_parse_rfc'
        return stypy_return_type_322906


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 1323, 4, False)
        # Assigning a type to the variable 'self' (line 1324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        tzical.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        tzical.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        tzical.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        tzical.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'tzical.stypy__repr__')
        tzical.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        tzical.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        tzical.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        tzical.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        tzical.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        tzical.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        tzical.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'tzical.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_322907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 15), 'str', '%s(%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1324)
        tuple_322908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1324, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1324)
        # Adding element type (line 1324)
        # Getting the type of 'self' (line 1324)
        self_322909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 27), 'self')
        # Obtaining the member '__class__' of a type (line 1324)
        class___322910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 27), self_322909, '__class__')
        # Obtaining the member '__name__' of a type (line 1324)
        name___322911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 27), class___322910, '__name__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1324, 27), tuple_322908, name___322911)
        # Adding element type (line 1324)
        
        # Call to repr(...): (line 1324)
        # Processing the call arguments (line 1324)
        # Getting the type of 'self' (line 1324)
        self_322913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 57), 'self', False)
        # Obtaining the member '_s' of a type (line 1324)
        _s_322914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 57), self_322913, '_s')
        # Processing the call keyword arguments (line 1324)
        kwargs_322915 = {}
        # Getting the type of 'repr' (line 1324)
        repr_322912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 52), 'repr', False)
        # Calling repr(args, kwargs) (line 1324)
        repr_call_result_322916 = invoke(stypy.reporting.localization.Localization(__file__, 1324, 52), repr_322912, *[_s_322914], **kwargs_322915)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1324, 27), tuple_322908, repr_call_result_322916)
        
        # Applying the binary operator '%' (line 1324)
        result_mod_322917 = python_operator(stypy.reporting.localization.Localization(__file__, 1324, 15), '%', str_322907, tuple_322908)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 8), 'stypy_return_type', result_mod_322917)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 1323)
        stypy_return_type_322918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_322918)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_322918


# Assigning a type to the variable 'tzical' (line 1128)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 0), 'tzical', tzical)


# Getting the type of 'sys' (line 1327)
sys_322919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 3), 'sys')
# Obtaining the member 'platform' of a type (line 1327)
platform_322920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 3), sys_322919, 'platform')
str_322921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 19), 'str', 'win32')
# Applying the binary operator '!=' (line 1327)
result_ne_322922 = python_operator(stypy.reporting.localization.Localization(__file__, 1327, 3), '!=', platform_322920, str_322921)

# Testing the type of an if condition (line 1327)
if_condition_322923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1327, 0), result_ne_322922)
# Assigning a type to the variable 'if_condition_322923' (line 1327)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 0), 'if_condition_322923', if_condition_322923)
# SSA begins for if statement (line 1327)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a List to a Name (line 1328):

# Assigning a List to a Name (line 1328):

# Obtaining an instance of the builtin type 'list' (line 1328)
list_322924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 14), 'list')
# Adding type elements to the builtin type 'list' instance (line 1328)
# Adding element type (line 1328)
str_322925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 15), 'str', '/etc/localtime')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 14), list_322924, str_322925)
# Adding element type (line 1328)
str_322926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 33), 'str', 'localtime')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1328, 14), list_322924, str_322926)

# Assigning a type to the variable 'TZFILES' (line 1328)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1328, 4), 'TZFILES', list_322924)

# Assigning a List to a Name (line 1329):

# Assigning a List to a Name (line 1329):

# Obtaining an instance of the builtin type 'list' (line 1329)
list_322927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 14), 'list')
# Adding type elements to the builtin type 'list' instance (line 1329)
# Adding element type (line 1329)
str_322928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 15), 'str', '/usr/share/zoneinfo')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 14), list_322927, str_322928)
# Adding element type (line 1329)
str_322929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 15), 'str', '/usr/lib/zoneinfo')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 14), list_322927, str_322929)
# Adding element type (line 1329)
str_322930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 15), 'str', '/usr/share/lib/zoneinfo')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 14), list_322927, str_322930)
# Adding element type (line 1329)
str_322931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 15), 'str', '/etc/zoneinfo')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1329, 14), list_322927, str_322931)

# Assigning a type to the variable 'TZPATHS' (line 1329)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 4), 'TZPATHS', list_322927)
# SSA branch for the else part of an if statement (line 1327)
module_type_store.open_ssa_branch('else')

# Assigning a List to a Name (line 1334):

# Assigning a List to a Name (line 1334):

# Obtaining an instance of the builtin type 'list' (line 1334)
list_322932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1334, 14), 'list')
# Adding type elements to the builtin type 'list' instance (line 1334)

# Assigning a type to the variable 'TZFILES' (line 1334)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 4), 'TZFILES', list_322932)

# Assigning a List to a Name (line 1335):

# Assigning a List to a Name (line 1335):

# Obtaining an instance of the builtin type 'list' (line 1335)
list_322933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 14), 'list')
# Adding type elements to the builtin type 'list' instance (line 1335)

# Assigning a type to the variable 'TZPATHS' (line 1335)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1335, 4), 'TZPATHS', list_322933)
# SSA join for if statement (line 1327)
module_type_store = module_type_store.join_ssa_context()


@norecursion
def gettz(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1338)
    None_322934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 15), 'None')
    defaults = [None_322934]
    # Create a new context for function 'gettz'
    module_type_store = module_type_store.open_function_context('gettz', 1338, 0, False)
    
    # Passed parameters checking function
    gettz.stypy_localization = localization
    gettz.stypy_type_of_self = None
    gettz.stypy_type_store = module_type_store
    gettz.stypy_function_name = 'gettz'
    gettz.stypy_param_names_list = ['name']
    gettz.stypy_varargs_param_name = None
    gettz.stypy_kwargs_param_name = None
    gettz.stypy_call_defaults = defaults
    gettz.stypy_call_varargs = varargs
    gettz.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gettz', ['name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gettz', localization, ['name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gettz(...)' code ##################

    
    # Assigning a Name to a Name (line 1339):
    
    # Assigning a Name to a Name (line 1339):
    # Getting the type of 'None' (line 1339)
    None_322935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 9), 'None')
    # Assigning a type to the variable 'tz' (line 1339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), 'tz', None_322935)
    
    
    # Getting the type of 'name' (line 1340)
    name_322936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 11), 'name')
    # Applying the 'not' unary operator (line 1340)
    result_not__322937 = python_operator(stypy.reporting.localization.Localization(__file__, 1340, 7), 'not', name_322936)
    
    # Testing the type of an if condition (line 1340)
    if_condition_322938 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1340, 4), result_not__322937)
    # Assigning a type to the variable 'if_condition_322938' (line 1340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'if_condition_322938', if_condition_322938)
    # SSA begins for if statement (line 1340)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1341)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 1342):
    
    # Assigning a Subscript to a Name (line 1342):
    
    # Obtaining the type of the subscript
    str_322939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 30), 'str', 'TZ')
    # Getting the type of 'os' (line 1342)
    os_322940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 19), 'os')
    # Obtaining the member 'environ' of a type (line 1342)
    environ_322941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 19), os_322940, 'environ')
    # Obtaining the member '__getitem__' of a type (line 1342)
    getitem___322942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 19), environ_322941, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1342)
    subscript_call_result_322943 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 19), getitem___322942, str_322939)
    
    # Assigning a type to the variable 'name' (line 1342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1342, 12), 'name', subscript_call_result_322943)
    # SSA branch for the except part of a try statement (line 1341)
    # SSA branch for the except 'KeyError' branch of a try statement (line 1341)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 1341)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1340)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'name' (line 1345)
    name_322944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 7), 'name')
    # Getting the type of 'None' (line 1345)
    None_322945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 15), 'None')
    # Applying the binary operator 'is' (line 1345)
    result_is__322946 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 7), 'is', name_322944, None_322945)
    
    
    # Getting the type of 'name' (line 1345)
    name_322947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 23), 'name')
    str_322948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 31), 'str', ':')
    # Applying the binary operator '==' (line 1345)
    result_eq_322949 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 23), '==', name_322947, str_322948)
    
    # Applying the binary operator 'or' (line 1345)
    result_or_keyword_322950 = python_operator(stypy.reporting.localization.Localization(__file__, 1345, 7), 'or', result_is__322946, result_eq_322949)
    
    # Testing the type of an if condition (line 1345)
    if_condition_322951 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1345, 4), result_or_keyword_322950)
    # Assigning a type to the variable 'if_condition_322951' (line 1345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'if_condition_322951', if_condition_322951)
    # SSA begins for if statement (line 1345)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'TZFILES' (line 1346)
    TZFILES_322952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 24), 'TZFILES')
    # Testing the type of a for loop iterable (line 1346)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1346, 8), TZFILES_322952)
    # Getting the type of the for loop variable (line 1346)
    for_loop_var_322953 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1346, 8), TZFILES_322952)
    # Assigning a type to the variable 'filepath' (line 1346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 8), 'filepath', for_loop_var_322953)
    # SSA begins for a for statement (line 1346)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to isabs(...): (line 1347)
    # Processing the call arguments (line 1347)
    # Getting the type of 'filepath' (line 1347)
    filepath_322957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 33), 'filepath', False)
    # Processing the call keyword arguments (line 1347)
    kwargs_322958 = {}
    # Getting the type of 'os' (line 1347)
    os_322954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 19), 'os', False)
    # Obtaining the member 'path' of a type (line 1347)
    path_322955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 19), os_322954, 'path')
    # Obtaining the member 'isabs' of a type (line 1347)
    isabs_322956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 19), path_322955, 'isabs')
    # Calling isabs(args, kwargs) (line 1347)
    isabs_call_result_322959 = invoke(stypy.reporting.localization.Localization(__file__, 1347, 19), isabs_322956, *[filepath_322957], **kwargs_322958)
    
    # Applying the 'not' unary operator (line 1347)
    result_not__322960 = python_operator(stypy.reporting.localization.Localization(__file__, 1347, 15), 'not', isabs_call_result_322959)
    
    # Testing the type of an if condition (line 1347)
    if_condition_322961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1347, 12), result_not__322960)
    # Assigning a type to the variable 'if_condition_322961' (line 1347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 12), 'if_condition_322961', if_condition_322961)
    # SSA begins for if statement (line 1347)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1348):
    
    # Assigning a Name to a Name (line 1348):
    # Getting the type of 'filepath' (line 1348)
    filepath_322962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 27), 'filepath')
    # Assigning a type to the variable 'filename' (line 1348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 16), 'filename', filepath_322962)
    
    # Getting the type of 'TZPATHS' (line 1349)
    TZPATHS_322963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 28), 'TZPATHS')
    # Testing the type of a for loop iterable (line 1349)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1349, 16), TZPATHS_322963)
    # Getting the type of the for loop variable (line 1349)
    for_loop_var_322964 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1349, 16), TZPATHS_322963)
    # Assigning a type to the variable 'path' (line 1349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 16), 'path', for_loop_var_322964)
    # SSA begins for a for statement (line 1349)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1350):
    
    # Assigning a Call to a Name (line 1350):
    
    # Call to join(...): (line 1350)
    # Processing the call arguments (line 1350)
    # Getting the type of 'path' (line 1350)
    path_322968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 44), 'path', False)
    # Getting the type of 'filename' (line 1350)
    filename_322969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 50), 'filename', False)
    # Processing the call keyword arguments (line 1350)
    kwargs_322970 = {}
    # Getting the type of 'os' (line 1350)
    os_322965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 31), 'os', False)
    # Obtaining the member 'path' of a type (line 1350)
    path_322966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 31), os_322965, 'path')
    # Obtaining the member 'join' of a type (line 1350)
    join_322967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 31), path_322966, 'join')
    # Calling join(args, kwargs) (line 1350)
    join_call_result_322971 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 31), join_322967, *[path_322968, filename_322969], **kwargs_322970)
    
    # Assigning a type to the variable 'filepath' (line 1350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 20), 'filepath', join_call_result_322971)
    
    
    # Call to isfile(...): (line 1351)
    # Processing the call arguments (line 1351)
    # Getting the type of 'filepath' (line 1351)
    filepath_322975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 38), 'filepath', False)
    # Processing the call keyword arguments (line 1351)
    kwargs_322976 = {}
    # Getting the type of 'os' (line 1351)
    os_322972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 23), 'os', False)
    # Obtaining the member 'path' of a type (line 1351)
    path_322973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 23), os_322972, 'path')
    # Obtaining the member 'isfile' of a type (line 1351)
    isfile_322974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 23), path_322973, 'isfile')
    # Calling isfile(args, kwargs) (line 1351)
    isfile_call_result_322977 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 23), isfile_322974, *[filepath_322975], **kwargs_322976)
    
    # Testing the type of an if condition (line 1351)
    if_condition_322978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1351, 20), isfile_call_result_322977)
    # Assigning a type to the variable 'if_condition_322978' (line 1351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 20), 'if_condition_322978', if_condition_322978)
    # SSA begins for if statement (line 1351)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1351)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of a for statement (line 1349)
    module_type_store.open_ssa_branch('for loop else')
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1347)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isfile(...): (line 1355)
    # Processing the call arguments (line 1355)
    # Getting the type of 'filepath' (line 1355)
    filepath_322982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 30), 'filepath', False)
    # Processing the call keyword arguments (line 1355)
    kwargs_322983 = {}
    # Getting the type of 'os' (line 1355)
    os_322979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 1355)
    path_322980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 15), os_322979, 'path')
    # Obtaining the member 'isfile' of a type (line 1355)
    isfile_322981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 15), path_322980, 'isfile')
    # Calling isfile(args, kwargs) (line 1355)
    isfile_call_result_322984 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 15), isfile_322981, *[filepath_322982], **kwargs_322983)
    
    # Testing the type of an if condition (line 1355)
    if_condition_322985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1355, 12), isfile_call_result_322984)
    # Assigning a type to the variable 'if_condition_322985' (line 1355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 12), 'if_condition_322985', if_condition_322985)
    # SSA begins for if statement (line 1355)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1356)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1357):
    
    # Assigning a Call to a Name (line 1357):
    
    # Call to tzfile(...): (line 1357)
    # Processing the call arguments (line 1357)
    # Getting the type of 'filepath' (line 1357)
    filepath_322987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 32), 'filepath', False)
    # Processing the call keyword arguments (line 1357)
    kwargs_322988 = {}
    # Getting the type of 'tzfile' (line 1357)
    tzfile_322986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 25), 'tzfile', False)
    # Calling tzfile(args, kwargs) (line 1357)
    tzfile_call_result_322989 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 25), tzfile_322986, *[filepath_322987], **kwargs_322988)
    
    # Assigning a type to the variable 'tz' (line 1357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 20), 'tz', tzfile_call_result_322989)
    # SSA branch for the except part of a try statement (line 1356)
    # SSA branch for the except 'Tuple' branch of a try statement (line 1356)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 1356)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1355)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of a for statement (line 1346)
    module_type_store.open_ssa_branch('for loop else')
    
    # Assigning a Call to a Name (line 1362):
    
    # Assigning a Call to a Name (line 1362):
    
    # Call to tzlocal(...): (line 1362)
    # Processing the call keyword arguments (line 1362)
    kwargs_322991 = {}
    # Getting the type of 'tzlocal' (line 1362)
    tzlocal_322990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 17), 'tzlocal', False)
    # Calling tzlocal(args, kwargs) (line 1362)
    tzlocal_call_result_322992 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 17), tzlocal_322990, *[], **kwargs_322991)
    
    # Assigning a type to the variable 'tz' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 12), 'tz', tzlocal_call_result_322992)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1345)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to startswith(...): (line 1364)
    # Processing the call arguments (line 1364)
    str_322995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1364, 27), 'str', ':')
    # Processing the call keyword arguments (line 1364)
    kwargs_322996 = {}
    # Getting the type of 'name' (line 1364)
    name_322993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 11), 'name', False)
    # Obtaining the member 'startswith' of a type (line 1364)
    startswith_322994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 11), name_322993, 'startswith')
    # Calling startswith(args, kwargs) (line 1364)
    startswith_call_result_322997 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 11), startswith_322994, *[str_322995], **kwargs_322996)
    
    # Testing the type of an if condition (line 1364)
    if_condition_322998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1364, 8), startswith_call_result_322997)
    # Assigning a type to the variable 'if_condition_322998' (line 1364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1364, 8), 'if_condition_322998', if_condition_322998)
    # SSA begins for if statement (line 1364)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1365):
    
    # Assigning a Subscript to a Name (line 1365):
    
    # Obtaining the type of the subscript
    int_322999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 25), 'int')
    slice_323000 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1365, 19), None, int_322999, None)
    # Getting the type of 'name' (line 1365)
    name_323001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 19), 'name')
    # Obtaining the member '__getitem__' of a type (line 1365)
    getitem___323002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 19), name_323001, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1365)
    subscript_call_result_323003 = invoke(stypy.reporting.localization.Localization(__file__, 1365, 19), getitem___323002, slice_323000)
    
    # Assigning a type to the variable 'name' (line 1365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 12), 'name', subscript_call_result_323003)
    # SSA join for if statement (line 1364)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isabs(...): (line 1366)
    # Processing the call arguments (line 1366)
    # Getting the type of 'name' (line 1366)
    name_323007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 25), 'name', False)
    # Processing the call keyword arguments (line 1366)
    kwargs_323008 = {}
    # Getting the type of 'os' (line 1366)
    os_323004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 1366)
    path_323005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 11), os_323004, 'path')
    # Obtaining the member 'isabs' of a type (line 1366)
    isabs_323006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 11), path_323005, 'isabs')
    # Calling isabs(args, kwargs) (line 1366)
    isabs_call_result_323009 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 11), isabs_323006, *[name_323007], **kwargs_323008)
    
    # Testing the type of an if condition (line 1366)
    if_condition_323010 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1366, 8), isabs_call_result_323009)
    # Assigning a type to the variable 'if_condition_323010' (line 1366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 8), 'if_condition_323010', if_condition_323010)
    # SSA begins for if statement (line 1366)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isfile(...): (line 1367)
    # Processing the call arguments (line 1367)
    # Getting the type of 'name' (line 1367)
    name_323014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 30), 'name', False)
    # Processing the call keyword arguments (line 1367)
    kwargs_323015 = {}
    # Getting the type of 'os' (line 1367)
    os_323011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 15), 'os', False)
    # Obtaining the member 'path' of a type (line 1367)
    path_323012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 15), os_323011, 'path')
    # Obtaining the member 'isfile' of a type (line 1367)
    isfile_323013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 15), path_323012, 'isfile')
    # Calling isfile(args, kwargs) (line 1367)
    isfile_call_result_323016 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 15), isfile_323013, *[name_323014], **kwargs_323015)
    
    # Testing the type of an if condition (line 1367)
    if_condition_323017 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1367, 12), isfile_call_result_323016)
    # Assigning a type to the variable 'if_condition_323017' (line 1367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 12), 'if_condition_323017', if_condition_323017)
    # SSA begins for if statement (line 1367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1368):
    
    # Assigning a Call to a Name (line 1368):
    
    # Call to tzfile(...): (line 1368)
    # Processing the call arguments (line 1368)
    # Getting the type of 'name' (line 1368)
    name_323019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 28), 'name', False)
    # Processing the call keyword arguments (line 1368)
    kwargs_323020 = {}
    # Getting the type of 'tzfile' (line 1368)
    tzfile_323018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 21), 'tzfile', False)
    # Calling tzfile(args, kwargs) (line 1368)
    tzfile_call_result_323021 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 21), tzfile_323018, *[name_323019], **kwargs_323020)
    
    # Assigning a type to the variable 'tz' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 16), 'tz', tzfile_call_result_323021)
    # SSA branch for the else part of an if statement (line 1367)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1370):
    
    # Assigning a Name to a Name (line 1370):
    # Getting the type of 'None' (line 1370)
    None_323022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 21), 'None')
    # Assigning a type to the variable 'tz' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 16), 'tz', None_323022)
    # SSA join for if statement (line 1367)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1366)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'TZPATHS' (line 1372)
    TZPATHS_323023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 24), 'TZPATHS')
    # Testing the type of a for loop iterable (line 1372)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1372, 12), TZPATHS_323023)
    # Getting the type of the for loop variable (line 1372)
    for_loop_var_323024 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1372, 12), TZPATHS_323023)
    # Assigning a type to the variable 'path' (line 1372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 12), 'path', for_loop_var_323024)
    # SSA begins for a for statement (line 1372)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1373):
    
    # Assigning a Call to a Name (line 1373):
    
    # Call to join(...): (line 1373)
    # Processing the call arguments (line 1373)
    # Getting the type of 'path' (line 1373)
    path_323028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 40), 'path', False)
    # Getting the type of 'name' (line 1373)
    name_323029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 46), 'name', False)
    # Processing the call keyword arguments (line 1373)
    kwargs_323030 = {}
    # Getting the type of 'os' (line 1373)
    os_323025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 27), 'os', False)
    # Obtaining the member 'path' of a type (line 1373)
    path_323026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 27), os_323025, 'path')
    # Obtaining the member 'join' of a type (line 1373)
    join_323027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 27), path_323026, 'join')
    # Calling join(args, kwargs) (line 1373)
    join_call_result_323031 = invoke(stypy.reporting.localization.Localization(__file__, 1373, 27), join_323027, *[path_323028, name_323029], **kwargs_323030)
    
    # Assigning a type to the variable 'filepath' (line 1373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 16), 'filepath', join_call_result_323031)
    
    
    
    # Call to isfile(...): (line 1374)
    # Processing the call arguments (line 1374)
    # Getting the type of 'filepath' (line 1374)
    filepath_323035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 38), 'filepath', False)
    # Processing the call keyword arguments (line 1374)
    kwargs_323036 = {}
    # Getting the type of 'os' (line 1374)
    os_323032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 23), 'os', False)
    # Obtaining the member 'path' of a type (line 1374)
    path_323033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 23), os_323032, 'path')
    # Obtaining the member 'isfile' of a type (line 1374)
    isfile_323034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 23), path_323033, 'isfile')
    # Calling isfile(args, kwargs) (line 1374)
    isfile_call_result_323037 = invoke(stypy.reporting.localization.Localization(__file__, 1374, 23), isfile_323034, *[filepath_323035], **kwargs_323036)
    
    # Applying the 'not' unary operator (line 1374)
    result_not__323038 = python_operator(stypy.reporting.localization.Localization(__file__, 1374, 19), 'not', isfile_call_result_323037)
    
    # Testing the type of an if condition (line 1374)
    if_condition_323039 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1374, 16), result_not__323038)
    # Assigning a type to the variable 'if_condition_323039' (line 1374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 16), 'if_condition_323039', if_condition_323039)
    # SSA begins for if statement (line 1374)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1375):
    
    # Assigning a Call to a Name (line 1375):
    
    # Call to replace(...): (line 1375)
    # Processing the call arguments (line 1375)
    str_323042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 48), 'str', ' ')
    str_323043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 53), 'str', '_')
    # Processing the call keyword arguments (line 1375)
    kwargs_323044 = {}
    # Getting the type of 'filepath' (line 1375)
    filepath_323040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 31), 'filepath', False)
    # Obtaining the member 'replace' of a type (line 1375)
    replace_323041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 31), filepath_323040, 'replace')
    # Calling replace(args, kwargs) (line 1375)
    replace_call_result_323045 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 31), replace_323041, *[str_323042, str_323043], **kwargs_323044)
    
    # Assigning a type to the variable 'filepath' (line 1375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 20), 'filepath', replace_call_result_323045)
    
    
    
    # Call to isfile(...): (line 1376)
    # Processing the call arguments (line 1376)
    # Getting the type of 'filepath' (line 1376)
    filepath_323049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 42), 'filepath', False)
    # Processing the call keyword arguments (line 1376)
    kwargs_323050 = {}
    # Getting the type of 'os' (line 1376)
    os_323046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 27), 'os', False)
    # Obtaining the member 'path' of a type (line 1376)
    path_323047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 27), os_323046, 'path')
    # Obtaining the member 'isfile' of a type (line 1376)
    isfile_323048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 27), path_323047, 'isfile')
    # Calling isfile(args, kwargs) (line 1376)
    isfile_call_result_323051 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 27), isfile_323048, *[filepath_323049], **kwargs_323050)
    
    # Applying the 'not' unary operator (line 1376)
    result_not__323052 = python_operator(stypy.reporting.localization.Localization(__file__, 1376, 23), 'not', isfile_call_result_323051)
    
    # Testing the type of an if condition (line 1376)
    if_condition_323053 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1376, 20), result_not__323052)
    # Assigning a type to the variable 'if_condition_323053' (line 1376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 20), 'if_condition_323053', if_condition_323053)
    # SSA begins for if statement (line 1376)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1376)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1374)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1378)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1379):
    
    # Assigning a Call to a Name (line 1379):
    
    # Call to tzfile(...): (line 1379)
    # Processing the call arguments (line 1379)
    # Getting the type of 'filepath' (line 1379)
    filepath_323055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 32), 'filepath', False)
    # Processing the call keyword arguments (line 1379)
    kwargs_323056 = {}
    # Getting the type of 'tzfile' (line 1379)
    tzfile_323054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 25), 'tzfile', False)
    # Calling tzfile(args, kwargs) (line 1379)
    tzfile_call_result_323057 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 25), tzfile_323054, *[filepath_323055], **kwargs_323056)
    
    # Assigning a type to the variable 'tz' (line 1379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 20), 'tz', tzfile_call_result_323057)
    # SSA branch for the except part of a try statement (line 1378)
    # SSA branch for the except 'Tuple' branch of a try statement (line 1378)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 1378)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of a for statement (line 1372)
    module_type_store.open_ssa_branch('for loop else')
    
    # Assigning a Name to a Name (line 1384):
    
    # Assigning a Name to a Name (line 1384):
    # Getting the type of 'None' (line 1384)
    None_323058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 21), 'None')
    # Assigning a type to the variable 'tz' (line 1384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 16), 'tz', None_323058)
    
    # Type idiom detected: calculating its left and rigth part (line 1385)
    # Getting the type of 'tzwin' (line 1385)
    tzwin_323059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 16), 'tzwin')
    # Getting the type of 'None' (line 1385)
    None_323060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 32), 'None')
    
    (may_be_323061, more_types_in_union_323062) = may_not_be_none(tzwin_323059, None_323060)

    if may_be_323061:

        if more_types_in_union_323062:
            # Runtime conditional SSA (line 1385)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # SSA begins for try-except statement (line 1386)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1387):
        
        # Assigning a Call to a Name (line 1387):
        
        # Call to tzwin(...): (line 1387)
        # Processing the call arguments (line 1387)
        # Getting the type of 'name' (line 1387)
        name_323064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 35), 'name', False)
        # Processing the call keyword arguments (line 1387)
        kwargs_323065 = {}
        # Getting the type of 'tzwin' (line 1387)
        tzwin_323063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 29), 'tzwin', False)
        # Calling tzwin(args, kwargs) (line 1387)
        tzwin_call_result_323066 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 29), tzwin_323063, *[name_323064], **kwargs_323065)
        
        # Assigning a type to the variable 'tz' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 24), 'tz', tzwin_call_result_323066)
        # SSA branch for the except part of a try statement (line 1386)
        # SSA branch for the except 'WindowsError' branch of a try statement (line 1386)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Name (line 1389):
        
        # Assigning a Name to a Name (line 1389):
        # Getting the type of 'None' (line 1389)
        None_323067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 29), 'None')
        # Assigning a type to the variable 'tz' (line 1389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 24), 'tz', None_323067)
        # SSA join for try-except statement (line 1386)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_323062:
            # SSA join for if statement (line 1385)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'tz' (line 1391)
    tz_323068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 23), 'tz')
    # Applying the 'not' unary operator (line 1391)
    result_not__323069 = python_operator(stypy.reporting.localization.Localization(__file__, 1391, 19), 'not', tz_323068)
    
    # Testing the type of an if condition (line 1391)
    if_condition_323070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1391, 16), result_not__323069)
    # Assigning a type to the variable 'if_condition_323070' (line 1391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 16), 'if_condition_323070', if_condition_323070)
    # SSA begins for if statement (line 1391)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1392, 20))
    
    # 'from dateutil.zoneinfo import get_zonefile_instance' statement (line 1392)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/dateutil/tz/')
    import_323071 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1392, 20), 'dateutil.zoneinfo')

    if (type(import_323071) is not StypyTypeError):

        if (import_323071 != 'pyd_module'):
            __import__(import_323071)
            sys_modules_323072 = sys.modules[import_323071]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1392, 20), 'dateutil.zoneinfo', sys_modules_323072.module_type_store, module_type_store, ['get_zonefile_instance'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1392, 20), __file__, sys_modules_323072, sys_modules_323072.module_type_store, module_type_store)
        else:
            from dateutil.zoneinfo import get_zonefile_instance

            import_from_module(stypy.reporting.localization.Localization(__file__, 1392, 20), 'dateutil.zoneinfo', None, module_type_store, ['get_zonefile_instance'], [get_zonefile_instance])

    else:
        # Assigning a type to the variable 'dateutil.zoneinfo' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 20), 'dateutil.zoneinfo', import_323071)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/dateutil/tz/')
    
    
    # Assigning a Call to a Name (line 1393):
    
    # Assigning a Call to a Name (line 1393):
    
    # Call to get(...): (line 1393)
    # Processing the call arguments (line 1393)
    # Getting the type of 'name' (line 1393)
    name_323077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 53), 'name', False)
    # Processing the call keyword arguments (line 1393)
    kwargs_323078 = {}
    
    # Call to get_zonefile_instance(...): (line 1393)
    # Processing the call keyword arguments (line 1393)
    kwargs_323074 = {}
    # Getting the type of 'get_zonefile_instance' (line 1393)
    get_zonefile_instance_323073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 25), 'get_zonefile_instance', False)
    # Calling get_zonefile_instance(args, kwargs) (line 1393)
    get_zonefile_instance_call_result_323075 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 25), get_zonefile_instance_323073, *[], **kwargs_323074)
    
    # Obtaining the member 'get' of a type (line 1393)
    get_323076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1393, 25), get_zonefile_instance_call_result_323075, 'get')
    # Calling get(args, kwargs) (line 1393)
    get_call_result_323079 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 25), get_323076, *[name_323077], **kwargs_323078)
    
    # Assigning a type to the variable 'tz' (line 1393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 20), 'tz', get_call_result_323079)
    # SSA join for if statement (line 1391)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'tz' (line 1395)
    tz_323080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 23), 'tz')
    # Applying the 'not' unary operator (line 1395)
    result_not__323081 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 19), 'not', tz_323080)
    
    # Testing the type of an if condition (line 1395)
    if_condition_323082 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1395, 16), result_not__323081)
    # Assigning a type to the variable 'if_condition_323082' (line 1395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 16), 'if_condition_323082', if_condition_323082)
    # SSA begins for if statement (line 1395)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'name' (line 1396)
    name_323083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 29), 'name')
    # Testing the type of a for loop iterable (line 1396)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1396, 20), name_323083)
    # Getting the type of the for loop variable (line 1396)
    for_loop_var_323084 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1396, 20), name_323083)
    # Assigning a type to the variable 'c' (line 1396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 20), 'c', for_loop_var_323084)
    # SSA begins for a for statement (line 1396)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'c' (line 1398)
    c_323085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 27), 'c')
    str_323086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 32), 'str', '0123456789')
    # Applying the binary operator 'in' (line 1398)
    result_contains_323087 = python_operator(stypy.reporting.localization.Localization(__file__, 1398, 27), 'in', c_323085, str_323086)
    
    # Testing the type of an if condition (line 1398)
    if_condition_323088 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1398, 24), result_contains_323087)
    # Assigning a type to the variable 'if_condition_323088' (line 1398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 24), 'if_condition_323088', if_condition_323088)
    # SSA begins for if statement (line 1398)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1399)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1400):
    
    # Assigning a Call to a Name (line 1400):
    
    # Call to tzstr(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'name' (line 1400)
    name_323090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 43), 'name', False)
    # Processing the call keyword arguments (line 1400)
    kwargs_323091 = {}
    # Getting the type of 'tzstr' (line 1400)
    tzstr_323089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 37), 'tzstr', False)
    # Calling tzstr(args, kwargs) (line 1400)
    tzstr_call_result_323092 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 37), tzstr_323089, *[name_323090], **kwargs_323091)
    
    # Assigning a type to the variable 'tz' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 32), 'tz', tzstr_call_result_323092)
    # SSA branch for the except part of a try statement (line 1399)
    # SSA branch for the except 'ValueError' branch of a try statement (line 1399)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 1399)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1398)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of a for statement (line 1396)
    module_type_store.open_ssa_branch('for loop else')
    
    
    # Getting the type of 'name' (line 1405)
    name_323093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 27), 'name')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1405)
    tuple_323094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1405)
    # Adding element type (line 1405)
    str_323095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 36), 'str', 'GMT')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1405, 36), tuple_323094, str_323095)
    # Adding element type (line 1405)
    str_323096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 43), 'str', 'UTC')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1405, 36), tuple_323094, str_323096)
    
    # Applying the binary operator 'in' (line 1405)
    result_contains_323097 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 27), 'in', name_323093, tuple_323094)
    
    # Testing the type of an if condition (line 1405)
    if_condition_323098 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1405, 24), result_contains_323097)
    # Assigning a type to the variable 'if_condition_323098' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 24), 'if_condition_323098', if_condition_323098)
    # SSA begins for if statement (line 1405)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1406):
    
    # Assigning a Call to a Name (line 1406):
    
    # Call to tzutc(...): (line 1406)
    # Processing the call keyword arguments (line 1406)
    kwargs_323100 = {}
    # Getting the type of 'tzutc' (line 1406)
    tzutc_323099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 33), 'tzutc', False)
    # Calling tzutc(args, kwargs) (line 1406)
    tzutc_call_result_323101 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 33), tzutc_323099, *[], **kwargs_323100)
    
    # Assigning a type to the variable 'tz' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 28), 'tz', tzutc_call_result_323101)
    # SSA branch for the else part of an if statement (line 1405)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'name' (line 1407)
    name_323102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 29), 'name')
    # Getting the type of 'time' (line 1407)
    time_323103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 37), 'time')
    # Obtaining the member 'tzname' of a type (line 1407)
    tzname_323104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 37), time_323103, 'tzname')
    # Applying the binary operator 'in' (line 1407)
    result_contains_323105 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 29), 'in', name_323102, tzname_323104)
    
    # Testing the type of an if condition (line 1407)
    if_condition_323106 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1407, 29), result_contains_323105)
    # Assigning a type to the variable 'if_condition_323106' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 29), 'if_condition_323106', if_condition_323106)
    # SSA begins for if statement (line 1407)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1408):
    
    # Assigning a Call to a Name (line 1408):
    
    # Call to tzlocal(...): (line 1408)
    # Processing the call keyword arguments (line 1408)
    kwargs_323108 = {}
    # Getting the type of 'tzlocal' (line 1408)
    tzlocal_323107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 33), 'tzlocal', False)
    # Calling tzlocal(args, kwargs) (line 1408)
    tzlocal_call_result_323109 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 33), tzlocal_323107, *[], **kwargs_323108)
    
    # Assigning a type to the variable 'tz' (line 1408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 28), 'tz', tzlocal_call_result_323109)
    # SSA join for if statement (line 1407)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1405)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1395)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1366)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1345)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'tz' (line 1409)
    tz_323110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 11), 'tz')
    # Assigning a type to the variable 'stypy_return_type' (line 1409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 4), 'stypy_return_type', tz_323110)
    
    # ################# End of 'gettz(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gettz' in the type store
    # Getting the type of 'stypy_return_type' (line 1338)
    stypy_return_type_323111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_323111)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gettz'
    return stypy_return_type_323111

# Assigning a type to the variable 'gettz' (line 1338)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1338, 0), 'gettz', gettz)

@norecursion
def datetime_exists(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1412)
    None_323112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 27), 'None')
    defaults = [None_323112]
    # Create a new context for function 'datetime_exists'
    module_type_store = module_type_store.open_function_context('datetime_exists', 1412, 0, False)
    
    # Passed parameters checking function
    datetime_exists.stypy_localization = localization
    datetime_exists.stypy_type_of_self = None
    datetime_exists.stypy_type_store = module_type_store
    datetime_exists.stypy_function_name = 'datetime_exists'
    datetime_exists.stypy_param_names_list = ['dt', 'tz']
    datetime_exists.stypy_varargs_param_name = None
    datetime_exists.stypy_kwargs_param_name = None
    datetime_exists.stypy_call_defaults = defaults
    datetime_exists.stypy_call_varargs = varargs
    datetime_exists.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'datetime_exists', ['dt', 'tz'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'datetime_exists', localization, ['dt', 'tz'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'datetime_exists(...)' code ##################

    str_323113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1427, (-1)), 'str', '\n    Given a datetime and a time zone, determine whether or not a given datetime\n    would fall in a gap.\n\n    :param dt:\n        A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``\n        is provided.)\n\n    :param tz:\n        A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If\n        ``None`` or not provided, the datetime\'s own time zone will be used.\n\n    :return:\n        Returns a boolean value whether or not the "wall time" exists in ``tz``.\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 1428)
    # Getting the type of 'tz' (line 1428)
    tz_323114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 7), 'tz')
    # Getting the type of 'None' (line 1428)
    None_323115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 13), 'None')
    
    (may_be_323116, more_types_in_union_323117) = may_be_none(tz_323114, None_323115)

    if may_be_323116:

        if more_types_in_union_323117:
            # Runtime conditional SSA (line 1428)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Type idiom detected: calculating its left and rigth part (line 1429)
        # Getting the type of 'dt' (line 1429)
        dt_323118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 11), 'dt')
        # Obtaining the member 'tzinfo' of a type (line 1429)
        tzinfo_323119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 11), dt_323118, 'tzinfo')
        # Getting the type of 'None' (line 1429)
        None_323120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 24), 'None')
        
        (may_be_323121, more_types_in_union_323122) = may_be_none(tzinfo_323119, None_323120)

        if may_be_323121:

            if more_types_in_union_323122:
                # Runtime conditional SSA (line 1429)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to ValueError(...): (line 1430)
            # Processing the call arguments (line 1430)
            str_323124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 29), 'str', 'Datetime is naive and no time zone provided.')
            # Processing the call keyword arguments (line 1430)
            kwargs_323125 = {}
            # Getting the type of 'ValueError' (line 1430)
            ValueError_323123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1430)
            ValueError_call_result_323126 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 18), ValueError_323123, *[str_323124], **kwargs_323125)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1430, 12), ValueError_call_result_323126, 'raise parameter', BaseException)

            if more_types_in_union_323122:
                # SSA join for if statement (line 1429)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 1431):
        
        # Assigning a Attribute to a Name (line 1431):
        # Getting the type of 'dt' (line 1431)
        dt_323127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 13), 'dt')
        # Obtaining the member 'tzinfo' of a type (line 1431)
        tzinfo_323128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 13), dt_323127, 'tzinfo')
        # Assigning a type to the variable 'tz' (line 1431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 8), 'tz', tzinfo_323128)

        if more_types_in_union_323117:
            # SSA join for if statement (line 1428)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1433):
    
    # Assigning a Call to a Name (line 1433):
    
    # Call to replace(...): (line 1433)
    # Processing the call keyword arguments (line 1433)
    # Getting the type of 'None' (line 1433)
    None_323131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 27), 'None', False)
    keyword_323132 = None_323131
    kwargs_323133 = {'tzinfo': keyword_323132}
    # Getting the type of 'dt' (line 1433)
    dt_323129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 9), 'dt', False)
    # Obtaining the member 'replace' of a type (line 1433)
    replace_323130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 9), dt_323129, 'replace')
    # Calling replace(args, kwargs) (line 1433)
    replace_call_result_323134 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 9), replace_323130, *[], **kwargs_323133)
    
    # Assigning a type to the variable 'dt' (line 1433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 4), 'dt', replace_call_result_323134)
    
    # Assigning a Call to a Name (line 1437):
    
    # Assigning a Call to a Name (line 1437):
    
    # Call to astimezone(...): (line 1437)
    # Processing the call arguments (line 1437)
    # Getting the type of 'tz' (line 1437)
    tz_323148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 65), 'tz', False)
    # Processing the call keyword arguments (line 1437)
    kwargs_323149 = {}
    
    # Call to astimezone(...): (line 1437)
    # Processing the call arguments (line 1437)
    
    # Call to tzutc(...): (line 1437)
    # Processing the call keyword arguments (line 1437)
    kwargs_323143 = {}
    # Getting the type of 'tzutc' (line 1437)
    tzutc_323142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 45), 'tzutc', False)
    # Calling tzutc(args, kwargs) (line 1437)
    tzutc_call_result_323144 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 45), tzutc_323142, *[], **kwargs_323143)
    
    # Processing the call keyword arguments (line 1437)
    kwargs_323145 = {}
    
    # Call to replace(...): (line 1437)
    # Processing the call keyword arguments (line 1437)
    # Getting the type of 'tz' (line 1437)
    tz_323137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 30), 'tz', False)
    keyword_323138 = tz_323137
    kwargs_323139 = {'tzinfo': keyword_323138}
    # Getting the type of 'dt' (line 1437)
    dt_323135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'dt', False)
    # Obtaining the member 'replace' of a type (line 1437)
    replace_323136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 12), dt_323135, 'replace')
    # Calling replace(args, kwargs) (line 1437)
    replace_call_result_323140 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 12), replace_323136, *[], **kwargs_323139)
    
    # Obtaining the member 'astimezone' of a type (line 1437)
    astimezone_323141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 12), replace_call_result_323140, 'astimezone')
    # Calling astimezone(args, kwargs) (line 1437)
    astimezone_call_result_323146 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 12), astimezone_323141, *[tzutc_call_result_323144], **kwargs_323145)
    
    # Obtaining the member 'astimezone' of a type (line 1437)
    astimezone_323147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 12), astimezone_call_result_323146, 'astimezone')
    # Calling astimezone(args, kwargs) (line 1437)
    astimezone_call_result_323150 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 12), astimezone_323147, *[tz_323148], **kwargs_323149)
    
    # Assigning a type to the variable 'dt_rt' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'dt_rt', astimezone_call_result_323150)
    
    # Assigning a Call to a Name (line 1438):
    
    # Assigning a Call to a Name (line 1438):
    
    # Call to replace(...): (line 1438)
    # Processing the call keyword arguments (line 1438)
    # Getting the type of 'None' (line 1438)
    None_323153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 33), 'None', False)
    keyword_323154 = None_323153
    kwargs_323155 = {'tzinfo': keyword_323154}
    # Getting the type of 'dt_rt' (line 1438)
    dt_rt_323151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 12), 'dt_rt', False)
    # Obtaining the member 'replace' of a type (line 1438)
    replace_323152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 12), dt_rt_323151, 'replace')
    # Calling replace(args, kwargs) (line 1438)
    replace_call_result_323156 = invoke(stypy.reporting.localization.Localization(__file__, 1438, 12), replace_323152, *[], **kwargs_323155)
    
    # Assigning a type to the variable 'dt_rt' (line 1438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 4), 'dt_rt', replace_call_result_323156)
    
    # Getting the type of 'dt' (line 1440)
    dt_323157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 11), 'dt')
    # Getting the type of 'dt_rt' (line 1440)
    dt_rt_323158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 17), 'dt_rt')
    # Applying the binary operator '==' (line 1440)
    result_eq_323159 = python_operator(stypy.reporting.localization.Localization(__file__, 1440, 11), '==', dt_323157, dt_rt_323158)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'stypy_return_type', result_eq_323159)
    
    # ################# End of 'datetime_exists(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'datetime_exists' in the type store
    # Getting the type of 'stypy_return_type' (line 1412)
    stypy_return_type_323160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_323160)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'datetime_exists'
    return stypy_return_type_323160

# Assigning a type to the variable 'datetime_exists' (line 1412)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 0), 'datetime_exists', datetime_exists)

@norecursion
def datetime_ambiguous(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1443)
    None_323161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 30), 'None')
    defaults = [None_323161]
    # Create a new context for function 'datetime_ambiguous'
    module_type_store = module_type_store.open_function_context('datetime_ambiguous', 1443, 0, False)
    
    # Passed parameters checking function
    datetime_ambiguous.stypy_localization = localization
    datetime_ambiguous.stypy_type_of_self = None
    datetime_ambiguous.stypy_type_store = module_type_store
    datetime_ambiguous.stypy_function_name = 'datetime_ambiguous'
    datetime_ambiguous.stypy_param_names_list = ['dt', 'tz']
    datetime_ambiguous.stypy_varargs_param_name = None
    datetime_ambiguous.stypy_kwargs_param_name = None
    datetime_ambiguous.stypy_call_defaults = defaults
    datetime_ambiguous.stypy_call_varargs = varargs
    datetime_ambiguous.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'datetime_ambiguous', ['dt', 'tz'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'datetime_ambiguous', localization, ['dt', 'tz'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'datetime_ambiguous(...)' code ##################

    str_323162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1462, (-1)), 'str', '\n    Given a datetime and a time zone, determine whether or not a given datetime\n    is ambiguous (i.e if there are two times differentiated only by their DST\n    status).\n\n    :param dt:\n        A :class:`datetime.datetime` (whose time zone will be ignored if ``tz``\n        is provided.)\n\n    :param tz:\n        A :class:`datetime.tzinfo` with support for the ``fold`` attribute. If\n        ``None`` or not provided, the datetime\'s own time zone will be used.\n\n    :return:\n        Returns a boolean value whether or not the "wall time" is ambiguous in\n        ``tz``.\n\n    .. versionadded:: 2.6.0\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 1463)
    # Getting the type of 'tz' (line 1463)
    tz_323163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 7), 'tz')
    # Getting the type of 'None' (line 1463)
    None_323164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 13), 'None')
    
    (may_be_323165, more_types_in_union_323166) = may_be_none(tz_323163, None_323164)

    if may_be_323165:

        if more_types_in_union_323166:
            # Runtime conditional SSA (line 1463)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Type idiom detected: calculating its left and rigth part (line 1464)
        # Getting the type of 'dt' (line 1464)
        dt_323167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 11), 'dt')
        # Obtaining the member 'tzinfo' of a type (line 1464)
        tzinfo_323168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 11), dt_323167, 'tzinfo')
        # Getting the type of 'None' (line 1464)
        None_323169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 24), 'None')
        
        (may_be_323170, more_types_in_union_323171) = may_be_none(tzinfo_323168, None_323169)

        if may_be_323170:

            if more_types_in_union_323171:
                # Runtime conditional SSA (line 1464)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to ValueError(...): (line 1465)
            # Processing the call arguments (line 1465)
            str_323173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 29), 'str', 'Datetime is naive and no time zone provided.')
            # Processing the call keyword arguments (line 1465)
            kwargs_323174 = {}
            # Getting the type of 'ValueError' (line 1465)
            ValueError_323172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1465)
            ValueError_call_result_323175 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 18), ValueError_323172, *[str_323173], **kwargs_323174)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1465, 12), ValueError_call_result_323175, 'raise parameter', BaseException)

            if more_types_in_union_323171:
                # SSA join for if statement (line 1464)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 1467):
        
        # Assigning a Attribute to a Name (line 1467):
        # Getting the type of 'dt' (line 1467)
        dt_323176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 13), 'dt')
        # Obtaining the member 'tzinfo' of a type (line 1467)
        tzinfo_323177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 13), dt_323176, 'tzinfo')
        # Assigning a type to the variable 'tz' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'tz', tzinfo_323177)

        if more_types_in_union_323166:
            # SSA join for if statement (line 1463)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1470):
    
    # Assigning a Call to a Name (line 1470):
    
    # Call to getattr(...): (line 1470)
    # Processing the call arguments (line 1470)
    # Getting the type of 'tz' (line 1470)
    tz_323179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 30), 'tz', False)
    str_323180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 34), 'str', 'is_ambiguous')
    # Getting the type of 'None' (line 1470)
    None_323181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 50), 'None', False)
    # Processing the call keyword arguments (line 1470)
    kwargs_323182 = {}
    # Getting the type of 'getattr' (line 1470)
    getattr_323178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 22), 'getattr', False)
    # Calling getattr(args, kwargs) (line 1470)
    getattr_call_result_323183 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 22), getattr_323178, *[tz_323179, str_323180, None_323181], **kwargs_323182)
    
    # Assigning a type to the variable 'is_ambiguous_fn' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'is_ambiguous_fn', getattr_call_result_323183)
    
    # Type idiom detected: calculating its left and rigth part (line 1471)
    # Getting the type of 'is_ambiguous_fn' (line 1471)
    is_ambiguous_fn_323184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 4), 'is_ambiguous_fn')
    # Getting the type of 'None' (line 1471)
    None_323185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 30), 'None')
    
    (may_be_323186, more_types_in_union_323187) = may_not_be_none(is_ambiguous_fn_323184, None_323185)

    if may_be_323186:

        if more_types_in_union_323187:
            # Runtime conditional SSA (line 1471)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # SSA begins for try-except statement (line 1472)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to is_ambiguous(...): (line 1473)
        # Processing the call arguments (line 1473)
        # Getting the type of 'dt' (line 1473)
        dt_323190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 35), 'dt', False)
        # Processing the call keyword arguments (line 1473)
        kwargs_323191 = {}
        # Getting the type of 'tz' (line 1473)
        tz_323188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 19), 'tz', False)
        # Obtaining the member 'is_ambiguous' of a type (line 1473)
        is_ambiguous_323189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 19), tz_323188, 'is_ambiguous')
        # Calling is_ambiguous(args, kwargs) (line 1473)
        is_ambiguous_call_result_323192 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 19), is_ambiguous_323189, *[dt_323190], **kwargs_323191)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'stypy_return_type', is_ambiguous_call_result_323192)
        # SSA branch for the except part of a try statement (line 1472)
        # SSA branch for the except '<any exception>' branch of a try statement (line 1472)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1472)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_323187:
            # SSA join for if statement (line 1471)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1479):
    
    # Assigning a Call to a Name (line 1479):
    
    # Call to replace(...): (line 1479)
    # Processing the call keyword arguments (line 1479)
    # Getting the type of 'tz' (line 1479)
    tz_323195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 27), 'tz', False)
    keyword_323196 = tz_323195
    kwargs_323197 = {'tzinfo': keyword_323196}
    # Getting the type of 'dt' (line 1479)
    dt_323193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 9), 'dt', False)
    # Obtaining the member 'replace' of a type (line 1479)
    replace_323194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 9), dt_323193, 'replace')
    # Calling replace(args, kwargs) (line 1479)
    replace_call_result_323198 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 9), replace_323194, *[], **kwargs_323197)
    
    # Assigning a type to the variable 'dt' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 4), 'dt', replace_call_result_323198)
    
    # Assigning a Call to a Name (line 1480):
    
    # Assigning a Call to a Name (line 1480):
    
    # Call to enfold(...): (line 1480)
    # Processing the call arguments (line 1480)
    # Getting the type of 'dt' (line 1480)
    dt_323200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 20), 'dt', False)
    # Processing the call keyword arguments (line 1480)
    int_323201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, 29), 'int')
    keyword_323202 = int_323201
    kwargs_323203 = {'fold': keyword_323202}
    # Getting the type of 'enfold' (line 1480)
    enfold_323199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 13), 'enfold', False)
    # Calling enfold(args, kwargs) (line 1480)
    enfold_call_result_323204 = invoke(stypy.reporting.localization.Localization(__file__, 1480, 13), enfold_323199, *[dt_323200], **kwargs_323203)
    
    # Assigning a type to the variable 'wall_0' (line 1480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'wall_0', enfold_call_result_323204)
    
    # Assigning a Call to a Name (line 1481):
    
    # Assigning a Call to a Name (line 1481):
    
    # Call to enfold(...): (line 1481)
    # Processing the call arguments (line 1481)
    # Getting the type of 'dt' (line 1481)
    dt_323206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 20), 'dt', False)
    # Processing the call keyword arguments (line 1481)
    int_323207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 29), 'int')
    keyword_323208 = int_323207
    kwargs_323209 = {'fold': keyword_323208}
    # Getting the type of 'enfold' (line 1481)
    enfold_323205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 13), 'enfold', False)
    # Calling enfold(args, kwargs) (line 1481)
    enfold_call_result_323210 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 13), enfold_323205, *[dt_323206], **kwargs_323209)
    
    # Assigning a type to the variable 'wall_1' (line 1481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 4), 'wall_1', enfold_call_result_323210)
    
    # Assigning a Compare to a Name (line 1483):
    
    # Assigning a Compare to a Name (line 1483):
    
    
    # Call to utcoffset(...): (line 1483)
    # Processing the call keyword arguments (line 1483)
    kwargs_323213 = {}
    # Getting the type of 'wall_0' (line 1483)
    wall_0_323211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 18), 'wall_0', False)
    # Obtaining the member 'utcoffset' of a type (line 1483)
    utcoffset_323212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 18), wall_0_323211, 'utcoffset')
    # Calling utcoffset(args, kwargs) (line 1483)
    utcoffset_call_result_323214 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 18), utcoffset_323212, *[], **kwargs_323213)
    
    
    # Call to utcoffset(...): (line 1483)
    # Processing the call keyword arguments (line 1483)
    kwargs_323217 = {}
    # Getting the type of 'wall_1' (line 1483)
    wall_1_323215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 40), 'wall_1', False)
    # Obtaining the member 'utcoffset' of a type (line 1483)
    utcoffset_323216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 40), wall_1_323215, 'utcoffset')
    # Calling utcoffset(args, kwargs) (line 1483)
    utcoffset_call_result_323218 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 40), utcoffset_323216, *[], **kwargs_323217)
    
    # Applying the binary operator '==' (line 1483)
    result_eq_323219 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 18), '==', utcoffset_call_result_323214, utcoffset_call_result_323218)
    
    # Assigning a type to the variable 'same_offset' (line 1483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 4), 'same_offset', result_eq_323219)
    
    # Assigning a Compare to a Name (line 1484):
    
    # Assigning a Compare to a Name (line 1484):
    
    
    # Call to dst(...): (line 1484)
    # Processing the call keyword arguments (line 1484)
    kwargs_323222 = {}
    # Getting the type of 'wall_0' (line 1484)
    wall_0_323220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 15), 'wall_0', False)
    # Obtaining the member 'dst' of a type (line 1484)
    dst_323221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 15), wall_0_323220, 'dst')
    # Calling dst(args, kwargs) (line 1484)
    dst_call_result_323223 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 15), dst_323221, *[], **kwargs_323222)
    
    
    # Call to dst(...): (line 1484)
    # Processing the call keyword arguments (line 1484)
    kwargs_323226 = {}
    # Getting the type of 'wall_1' (line 1484)
    wall_1_323224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 31), 'wall_1', False)
    # Obtaining the member 'dst' of a type (line 1484)
    dst_323225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 31), wall_1_323224, 'dst')
    # Calling dst(args, kwargs) (line 1484)
    dst_call_result_323227 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 31), dst_323225, *[], **kwargs_323226)
    
    # Applying the binary operator '==' (line 1484)
    result_eq_323228 = python_operator(stypy.reporting.localization.Localization(__file__, 1484, 15), '==', dst_call_result_323223, dst_call_result_323227)
    
    # Assigning a type to the variable 'same_dst' (line 1484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 4), 'same_dst', result_eq_323228)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'same_offset' (line 1486)
    same_offset_323229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 16), 'same_offset')
    # Getting the type of 'same_dst' (line 1486)
    same_dst_323230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 32), 'same_dst')
    # Applying the binary operator 'and' (line 1486)
    result_and_keyword_323231 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 16), 'and', same_offset_323229, same_dst_323230)
    
    # Applying the 'not' unary operator (line 1486)
    result_not__323232 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 11), 'not', result_and_keyword_323231)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 4), 'stypy_return_type', result_not__323232)
    
    # ################# End of 'datetime_ambiguous(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'datetime_ambiguous' in the type store
    # Getting the type of 'stypy_return_type' (line 1443)
    stypy_return_type_323233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_323233)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'datetime_ambiguous'
    return stypy_return_type_323233

# Assigning a type to the variable 'datetime_ambiguous' (line 1443)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 0), 'datetime_ambiguous', datetime_ambiguous)

@norecursion
def _datetime_to_timestamp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_datetime_to_timestamp'
    module_type_store = module_type_store.open_function_context('_datetime_to_timestamp', 1489, 0, False)
    
    # Passed parameters checking function
    _datetime_to_timestamp.stypy_localization = localization
    _datetime_to_timestamp.stypy_type_of_self = None
    _datetime_to_timestamp.stypy_type_store = module_type_store
    _datetime_to_timestamp.stypy_function_name = '_datetime_to_timestamp'
    _datetime_to_timestamp.stypy_param_names_list = ['dt']
    _datetime_to_timestamp.stypy_varargs_param_name = None
    _datetime_to_timestamp.stypy_kwargs_param_name = None
    _datetime_to_timestamp.stypy_call_defaults = defaults
    _datetime_to_timestamp.stypy_call_varargs = varargs
    _datetime_to_timestamp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_datetime_to_timestamp', ['dt'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_datetime_to_timestamp', localization, ['dt'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_datetime_to_timestamp(...)' code ##################

    str_323234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, (-1)), 'str', '\n    Convert a :class:`datetime.datetime` object to an epoch timestamp in seconds\n    since January 1, 1970, ignoring the time zone.\n    ')
    
    # Call to _total_seconds(...): (line 1494)
    # Processing the call arguments (line 1494)
    
    # Call to replace(...): (line 1494)
    # Processing the call keyword arguments (line 1494)
    # Getting the type of 'None' (line 1494)
    None_323238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 45), 'None', False)
    keyword_323239 = None_323238
    kwargs_323240 = {'tzinfo': keyword_323239}
    # Getting the type of 'dt' (line 1494)
    dt_323236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 27), 'dt', False)
    # Obtaining the member 'replace' of a type (line 1494)
    replace_323237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 27), dt_323236, 'replace')
    # Calling replace(args, kwargs) (line 1494)
    replace_call_result_323241 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 27), replace_323237, *[], **kwargs_323240)
    
    # Getting the type of 'EPOCH' (line 1494)
    EPOCH_323242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 53), 'EPOCH', False)
    # Applying the binary operator '-' (line 1494)
    result_sub_323243 = python_operator(stypy.reporting.localization.Localization(__file__, 1494, 27), '-', replace_call_result_323241, EPOCH_323242)
    
    # Processing the call keyword arguments (line 1494)
    kwargs_323244 = {}
    # Getting the type of '_total_seconds' (line 1494)
    _total_seconds_323235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 11), '_total_seconds', False)
    # Calling _total_seconds(args, kwargs) (line 1494)
    _total_seconds_call_result_323245 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 11), _total_seconds_323235, *[result_sub_323243], **kwargs_323244)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 4), 'stypy_return_type', _total_seconds_call_result_323245)
    
    # ################# End of '_datetime_to_timestamp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_datetime_to_timestamp' in the type store
    # Getting the type of 'stypy_return_type' (line 1489)
    stypy_return_type_323246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_323246)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_datetime_to_timestamp'
    return stypy_return_type_323246

# Assigning a type to the variable '_datetime_to_timestamp' (line 1489)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 0), '_datetime_to_timestamp', _datetime_to_timestamp)
# Declaration of the '_ContextWrapper' class

class _ContextWrapper(object, ):
    str_323247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, (-1)), 'str', '\n    Class for wrapping contexts so that they are passed through in a\n    with statement.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1502, 4, False)
        # Assigning a type to the variable 'self' (line 1503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ContextWrapper.__init__', ['context'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['context'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1503):
        
        # Assigning a Name to a Attribute (line 1503):
        # Getting the type of 'context' (line 1503)
        context_323248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 23), 'context')
        # Getting the type of 'self' (line 1503)
        self_323249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 8), 'self')
        # Setting the type of the member 'context' of a type (line 1503)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 8), self_323249, 'context', context_323248)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __enter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__enter__'
        module_type_store = module_type_store.open_function_context('__enter__', 1505, 4, False)
        # Assigning a type to the variable 'self' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_localization', localization)
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_function_name', '_ContextWrapper.__enter__')
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_param_names_list', [])
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ContextWrapper.__enter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ContextWrapper.__enter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__enter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__enter__(...)' code ##################

        # Getting the type of 'self' (line 1506)
        self_323250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 15), 'self')
        # Obtaining the member 'context' of a type (line 1506)
        context_323251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 15), self_323250, 'context')
        # Assigning a type to the variable 'stypy_return_type' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'stypy_return_type', context_323251)
        
        # ################# End of '__enter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__enter__' in the type store
        # Getting the type of 'stypy_return_type' (line 1505)
        stypy_return_type_323252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_323252)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__enter__'
        return stypy_return_type_323252


    @norecursion
    def __exit__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__exit__'
        module_type_store = module_type_store.open_function_context('__exit__', 1508, 4, False)
        # Assigning a type to the variable 'self' (line 1509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_localization', localization)
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_function_name', '_ContextWrapper.__exit__')
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_param_names_list', [])
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ContextWrapper.__exit__.__dict__.__setitem__('stypy_declared_arg_number', 0)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ContextWrapper.__exit__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__exit__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__exit__(...)' code ##################

        pass
        
        # ################# End of '__exit__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__exit__' in the type store
        # Getting the type of 'stypy_return_type' (line 1508)
        stypy_return_type_323253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_323253)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__exit__'
        return stypy_return_type_323253


# Assigning a type to the variable '_ContextWrapper' (line 1497)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 0), '_ContextWrapper', _ContextWrapper)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
